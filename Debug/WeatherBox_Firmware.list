
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008154  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008218  08008218  00018218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008350  08008350  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008358  08008358  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  080083d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080083d0  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f732  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fcc  00000000  00000000  0002f7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  00031798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  00032818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014866  00000000  00000000  00033790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9dd  00000000  00000000  00047ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008220a  00000000  00000000  000539d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5bdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000d5c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080081fc 	.word	0x080081fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080081fc 	.word	0x080081fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fa97 	bl	8001764 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f9ef 	bl	8001624 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fa89 	bl	8001764 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fa7f 	bl	8001764 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fa11 	bl	800169c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fa07 	bl	800169c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f98b 	bl	80005c0 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f90d 	bl	80004d4 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f97d 	bl	80005c0 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f973 	bl	80005c0 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f91b 	bl	8000524 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f911 	bl	8000524 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_uldivmod>:
 8000310:	2b00      	cmp	r3, #0
 8000312:	d111      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000314:	2a00      	cmp	r2, #0
 8000316:	d10f      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000318:	2900      	cmp	r1, #0
 800031a:	d100      	bne.n	800031e <__aeabi_uldivmod+0xe>
 800031c:	2800      	cmp	r0, #0
 800031e:	d002      	beq.n	8000326 <__aeabi_uldivmod+0x16>
 8000320:	2100      	movs	r1, #0
 8000322:	43c9      	mvns	r1, r1
 8000324:	1c08      	adds	r0, r1, #0
 8000326:	b407      	push	{r0, r1, r2}
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <__aeabi_uldivmod+0x24>)
 800032a:	a102      	add	r1, pc, #8	; (adr r1, 8000334 <__aeabi_uldivmod+0x24>)
 800032c:	1840      	adds	r0, r0, r1
 800032e:	9002      	str	r0, [sp, #8]
 8000330:	bd03      	pop	{r0, r1, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	fffffee9 	.word	0xfffffee9
 8000338:	b403      	push	{r0, r1}
 800033a:	4668      	mov	r0, sp
 800033c:	b501      	push	{r0, lr}
 800033e:	9802      	ldr	r0, [sp, #8]
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	9b01      	ldr	r3, [sp, #4]
 8000346:	469e      	mov	lr, r3
 8000348:	b002      	add	sp, #8
 800034a:	bc0c      	pop	{r2, r3}
 800034c:	4770      	bx	lr
 800034e:	46c0      	nop			; (mov r8, r8)

08000350 <__udivmoddi4>:
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	464f      	mov	r7, r9
 8000354:	4646      	mov	r6, r8
 8000356:	46d6      	mov	lr, sl
 8000358:	b5c0      	push	{r6, r7, lr}
 800035a:	0004      	movs	r4, r0
 800035c:	b082      	sub	sp, #8
 800035e:	000d      	movs	r5, r1
 8000360:	4691      	mov	r9, r2
 8000362:	4698      	mov	r8, r3
 8000364:	428b      	cmp	r3, r1
 8000366:	d82f      	bhi.n	80003c8 <__udivmoddi4+0x78>
 8000368:	d02c      	beq.n	80003c4 <__udivmoddi4+0x74>
 800036a:	4641      	mov	r1, r8
 800036c:	4648      	mov	r0, r9
 800036e:	f002 f965 	bl	800263c <__clzdi2>
 8000372:	0029      	movs	r1, r5
 8000374:	0006      	movs	r6, r0
 8000376:	0020      	movs	r0, r4
 8000378:	f002 f960 	bl	800263c <__clzdi2>
 800037c:	1a33      	subs	r3, r6, r0
 800037e:	469c      	mov	ip, r3
 8000380:	3b20      	subs	r3, #32
 8000382:	469a      	mov	sl, r3
 8000384:	d500      	bpl.n	8000388 <__udivmoddi4+0x38>
 8000386:	e076      	b.n	8000476 <__udivmoddi4+0x126>
 8000388:	464b      	mov	r3, r9
 800038a:	4652      	mov	r2, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001f      	movs	r7, r3
 8000390:	464b      	mov	r3, r9
 8000392:	4662      	mov	r2, ip
 8000394:	4093      	lsls	r3, r2
 8000396:	001e      	movs	r6, r3
 8000398:	42af      	cmp	r7, r5
 800039a:	d828      	bhi.n	80003ee <__udivmoddi4+0x9e>
 800039c:	d025      	beq.n	80003ea <__udivmoddi4+0x9a>
 800039e:	4653      	mov	r3, sl
 80003a0:	1ba4      	subs	r4, r4, r6
 80003a2:	41bd      	sbcs	r5, r7
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	da00      	bge.n	80003aa <__udivmoddi4+0x5a>
 80003a8:	e07b      	b.n	80004a2 <__udivmoddi4+0x152>
 80003aa:	2200      	movs	r2, #0
 80003ac:	2300      	movs	r3, #0
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	2301      	movs	r3, #1
 80003b4:	4652      	mov	r2, sl
 80003b6:	4093      	lsls	r3, r2
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2301      	movs	r3, #1
 80003bc:	4662      	mov	r2, ip
 80003be:	4093      	lsls	r3, r2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	e018      	b.n	80003f6 <__udivmoddi4+0xa6>
 80003c4:	4282      	cmp	r2, r0
 80003c6:	d9d0      	bls.n	800036a <__udivmoddi4+0x1a>
 80003c8:	2200      	movs	r2, #0
 80003ca:	2300      	movs	r3, #0
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <__udivmoddi4+0x8a>
 80003d6:	601c      	str	r4, [r3, #0]
 80003d8:	605d      	str	r5, [r3, #4]
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	b002      	add	sp, #8
 80003e0:	bc1c      	pop	{r2, r3, r4}
 80003e2:	4690      	mov	r8, r2
 80003e4:	4699      	mov	r9, r3
 80003e6:	46a2      	mov	sl, r4
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d9d7      	bls.n	800039e <__udivmoddi4+0x4e>
 80003ee:	2200      	movs	r2, #0
 80003f0:	2300      	movs	r3, #0
 80003f2:	9200      	str	r2, [sp, #0]
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	4663      	mov	r3, ip
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0e9      	beq.n	80003d0 <__udivmoddi4+0x80>
 80003fc:	07fb      	lsls	r3, r7, #31
 80003fe:	4698      	mov	r8, r3
 8000400:	4641      	mov	r1, r8
 8000402:	0872      	lsrs	r2, r6, #1
 8000404:	430a      	orrs	r2, r1
 8000406:	087b      	lsrs	r3, r7, #1
 8000408:	4666      	mov	r6, ip
 800040a:	e00e      	b.n	800042a <__udivmoddi4+0xda>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d101      	bne.n	8000414 <__udivmoddi4+0xc4>
 8000410:	42a2      	cmp	r2, r4
 8000412:	d80c      	bhi.n	800042e <__udivmoddi4+0xde>
 8000414:	1aa4      	subs	r4, r4, r2
 8000416:	419d      	sbcs	r5, r3
 8000418:	2001      	movs	r0, #1
 800041a:	1924      	adds	r4, r4, r4
 800041c:	416d      	adcs	r5, r5
 800041e:	2100      	movs	r1, #0
 8000420:	3e01      	subs	r6, #1
 8000422:	1824      	adds	r4, r4, r0
 8000424:	414d      	adcs	r5, r1
 8000426:	2e00      	cmp	r6, #0
 8000428:	d006      	beq.n	8000438 <__udivmoddi4+0xe8>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d9ee      	bls.n	800040c <__udivmoddi4+0xbc>
 800042e:	3e01      	subs	r6, #1
 8000430:	1924      	adds	r4, r4, r4
 8000432:	416d      	adcs	r5, r5
 8000434:	2e00      	cmp	r6, #0
 8000436:	d1f8      	bne.n	800042a <__udivmoddi4+0xda>
 8000438:	9800      	ldr	r0, [sp, #0]
 800043a:	9901      	ldr	r1, [sp, #4]
 800043c:	4653      	mov	r3, sl
 800043e:	1900      	adds	r0, r0, r4
 8000440:	4169      	adcs	r1, r5
 8000442:	2b00      	cmp	r3, #0
 8000444:	db23      	blt.n	800048e <__udivmoddi4+0x13e>
 8000446:	002b      	movs	r3, r5
 8000448:	4652      	mov	r2, sl
 800044a:	40d3      	lsrs	r3, r2
 800044c:	002a      	movs	r2, r5
 800044e:	4664      	mov	r4, ip
 8000450:	40e2      	lsrs	r2, r4
 8000452:	001c      	movs	r4, r3
 8000454:	4653      	mov	r3, sl
 8000456:	0015      	movs	r5, r2
 8000458:	2b00      	cmp	r3, #0
 800045a:	db2d      	blt.n	80004b8 <__udivmoddi4+0x168>
 800045c:	0026      	movs	r6, r4
 800045e:	4657      	mov	r7, sl
 8000460:	40be      	lsls	r6, r7
 8000462:	0033      	movs	r3, r6
 8000464:	0026      	movs	r6, r4
 8000466:	4667      	mov	r7, ip
 8000468:	40be      	lsls	r6, r7
 800046a:	0032      	movs	r2, r6
 800046c:	1a80      	subs	r0, r0, r2
 800046e:	4199      	sbcs	r1, r3
 8000470:	9000      	str	r0, [sp, #0]
 8000472:	9101      	str	r1, [sp, #4]
 8000474:	e7ac      	b.n	80003d0 <__udivmoddi4+0x80>
 8000476:	4662      	mov	r2, ip
 8000478:	2320      	movs	r3, #32
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	464a      	mov	r2, r9
 800047e:	40da      	lsrs	r2, r3
 8000480:	4661      	mov	r1, ip
 8000482:	0013      	movs	r3, r2
 8000484:	4642      	mov	r2, r8
 8000486:	408a      	lsls	r2, r1
 8000488:	0017      	movs	r7, r2
 800048a:	431f      	orrs	r7, r3
 800048c:	e780      	b.n	8000390 <__udivmoddi4+0x40>
 800048e:	4662      	mov	r2, ip
 8000490:	2320      	movs	r3, #32
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	002a      	movs	r2, r5
 8000496:	4666      	mov	r6, ip
 8000498:	409a      	lsls	r2, r3
 800049a:	0023      	movs	r3, r4
 800049c:	40f3      	lsrs	r3, r6
 800049e:	4313      	orrs	r3, r2
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0xfc>
 80004a2:	4662      	mov	r2, ip
 80004a4:	2320      	movs	r3, #32
 80004a6:	2100      	movs	r1, #0
 80004a8:	1a9b      	subs	r3, r3, r2
 80004aa:	2200      	movs	r2, #0
 80004ac:	9100      	str	r1, [sp, #0]
 80004ae:	9201      	str	r2, [sp, #4]
 80004b0:	2201      	movs	r2, #1
 80004b2:	40da      	lsrs	r2, r3
 80004b4:	9201      	str	r2, [sp, #4]
 80004b6:	e780      	b.n	80003ba <__udivmoddi4+0x6a>
 80004b8:	2320      	movs	r3, #32
 80004ba:	4662      	mov	r2, ip
 80004bc:	0026      	movs	r6, r4
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	40de      	lsrs	r6, r3
 80004c2:	002f      	movs	r7, r5
 80004c4:	46b0      	mov	r8, r6
 80004c6:	4666      	mov	r6, ip
 80004c8:	40b7      	lsls	r7, r6
 80004ca:	4646      	mov	r6, r8
 80004cc:	003b      	movs	r3, r7
 80004ce:	4333      	orrs	r3, r6
 80004d0:	e7c8      	b.n	8000464 <__udivmoddi4+0x114>
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__eqsf2>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	0042      	lsls	r2, r0, #1
 80004d8:	024e      	lsls	r6, r1, #9
 80004da:	004c      	lsls	r4, r1, #1
 80004dc:	0245      	lsls	r5, r0, #9
 80004de:	0a6d      	lsrs	r5, r5, #9
 80004e0:	0e12      	lsrs	r2, r2, #24
 80004e2:	0fc3      	lsrs	r3, r0, #31
 80004e4:	0a76      	lsrs	r6, r6, #9
 80004e6:	0e24      	lsrs	r4, r4, #24
 80004e8:	0fc9      	lsrs	r1, r1, #31
 80004ea:	2aff      	cmp	r2, #255	; 0xff
 80004ec:	d00f      	beq.n	800050e <__eqsf2+0x3a>
 80004ee:	2cff      	cmp	r4, #255	; 0xff
 80004f0:	d011      	beq.n	8000516 <__eqsf2+0x42>
 80004f2:	2001      	movs	r0, #1
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d000      	beq.n	80004fa <__eqsf2+0x26>
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	42b5      	cmp	r5, r6
 80004fc:	d1fc      	bne.n	80004f8 <__eqsf2+0x24>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d00d      	beq.n	800051e <__eqsf2+0x4a>
 8000502:	2a00      	cmp	r2, #0
 8000504:	d1f8      	bne.n	80004f8 <__eqsf2+0x24>
 8000506:	0028      	movs	r0, r5
 8000508:	1e45      	subs	r5, r0, #1
 800050a:	41a8      	sbcs	r0, r5
 800050c:	e7f4      	b.n	80004f8 <__eqsf2+0x24>
 800050e:	2001      	movs	r0, #1
 8000510:	2d00      	cmp	r5, #0
 8000512:	d1f1      	bne.n	80004f8 <__eqsf2+0x24>
 8000514:	e7eb      	b.n	80004ee <__eqsf2+0x1a>
 8000516:	2001      	movs	r0, #1
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1ed      	bne.n	80004f8 <__eqsf2+0x24>
 800051c:	e7e9      	b.n	80004f2 <__eqsf2+0x1e>
 800051e:	2000      	movs	r0, #0
 8000520:	e7ea      	b.n	80004f8 <__eqsf2+0x24>
 8000522:	46c0      	nop			; (mov r8, r8)

08000524 <__gesf2>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	004a      	lsls	r2, r1, #1
 8000528:	024e      	lsls	r6, r1, #9
 800052a:	0245      	lsls	r5, r0, #9
 800052c:	0044      	lsls	r4, r0, #1
 800052e:	0a6d      	lsrs	r5, r5, #9
 8000530:	0e24      	lsrs	r4, r4, #24
 8000532:	0fc3      	lsrs	r3, r0, #31
 8000534:	0a76      	lsrs	r6, r6, #9
 8000536:	0e12      	lsrs	r2, r2, #24
 8000538:	0fc9      	lsrs	r1, r1, #31
 800053a:	2cff      	cmp	r4, #255	; 0xff
 800053c:	d015      	beq.n	800056a <__gesf2+0x46>
 800053e:	2aff      	cmp	r2, #255	; 0xff
 8000540:	d00e      	beq.n	8000560 <__gesf2+0x3c>
 8000542:	2c00      	cmp	r4, #0
 8000544:	d115      	bne.n	8000572 <__gesf2+0x4e>
 8000546:	2a00      	cmp	r2, #0
 8000548:	d101      	bne.n	800054e <__gesf2+0x2a>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d01c      	beq.n	8000588 <__gesf2+0x64>
 800054e:	2d00      	cmp	r5, #0
 8000550:	d014      	beq.n	800057c <__gesf2+0x58>
 8000552:	428b      	cmp	r3, r1
 8000554:	d027      	beq.n	80005a6 <__gesf2+0x82>
 8000556:	2002      	movs	r0, #2
 8000558:	3b01      	subs	r3, #1
 800055a:	4018      	ands	r0, r3
 800055c:	3801      	subs	r0, #1
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	2e00      	cmp	r6, #0
 8000562:	d0ee      	beq.n	8000542 <__gesf2+0x1e>
 8000564:	2002      	movs	r0, #2
 8000566:	4240      	negs	r0, r0
 8000568:	e7f9      	b.n	800055e <__gesf2+0x3a>
 800056a:	2d00      	cmp	r5, #0
 800056c:	d1fa      	bne.n	8000564 <__gesf2+0x40>
 800056e:	2aff      	cmp	r2, #255	; 0xff
 8000570:	d00e      	beq.n	8000590 <__gesf2+0x6c>
 8000572:	2a00      	cmp	r2, #0
 8000574:	d10e      	bne.n	8000594 <__gesf2+0x70>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d0ed      	beq.n	8000556 <__gesf2+0x32>
 800057a:	e00b      	b.n	8000594 <__gesf2+0x70>
 800057c:	2301      	movs	r3, #1
 800057e:	3901      	subs	r1, #1
 8000580:	4399      	bics	r1, r3
 8000582:	0008      	movs	r0, r1
 8000584:	3001      	adds	r0, #1
 8000586:	e7ea      	b.n	800055e <__gesf2+0x3a>
 8000588:	2000      	movs	r0, #0
 800058a:	2d00      	cmp	r5, #0
 800058c:	d0e7      	beq.n	800055e <__gesf2+0x3a>
 800058e:	e7e2      	b.n	8000556 <__gesf2+0x32>
 8000590:	2e00      	cmp	r6, #0
 8000592:	d1e7      	bne.n	8000564 <__gesf2+0x40>
 8000594:	428b      	cmp	r3, r1
 8000596:	d1de      	bne.n	8000556 <__gesf2+0x32>
 8000598:	4294      	cmp	r4, r2
 800059a:	dd05      	ble.n	80005a8 <__gesf2+0x84>
 800059c:	2102      	movs	r1, #2
 800059e:	1e58      	subs	r0, r3, #1
 80005a0:	4008      	ands	r0, r1
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7db      	b.n	800055e <__gesf2+0x3a>
 80005a6:	2400      	movs	r4, #0
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	dc04      	bgt.n	80005b6 <__gesf2+0x92>
 80005ac:	42b5      	cmp	r5, r6
 80005ae:	d8d2      	bhi.n	8000556 <__gesf2+0x32>
 80005b0:	2000      	movs	r0, #0
 80005b2:	42b5      	cmp	r5, r6
 80005b4:	d2d3      	bcs.n	800055e <__gesf2+0x3a>
 80005b6:	1e58      	subs	r0, r3, #1
 80005b8:	2301      	movs	r3, #1
 80005ba:	4398      	bics	r0, r3
 80005bc:	3001      	adds	r0, #1
 80005be:	e7ce      	b.n	800055e <__gesf2+0x3a>

080005c0 <__lesf2>:
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	0042      	lsls	r2, r0, #1
 80005c4:	0244      	lsls	r4, r0, #9
 80005c6:	024d      	lsls	r5, r1, #9
 80005c8:	0fc3      	lsrs	r3, r0, #31
 80005ca:	0048      	lsls	r0, r1, #1
 80005cc:	0a64      	lsrs	r4, r4, #9
 80005ce:	0e12      	lsrs	r2, r2, #24
 80005d0:	0a6d      	lsrs	r5, r5, #9
 80005d2:	0e00      	lsrs	r0, r0, #24
 80005d4:	0fc9      	lsrs	r1, r1, #31
 80005d6:	2aff      	cmp	r2, #255	; 0xff
 80005d8:	d012      	beq.n	8000600 <__lesf2+0x40>
 80005da:	28ff      	cmp	r0, #255	; 0xff
 80005dc:	d00c      	beq.n	80005f8 <__lesf2+0x38>
 80005de:	2a00      	cmp	r2, #0
 80005e0:	d112      	bne.n	8000608 <__lesf2+0x48>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d119      	bne.n	800061a <__lesf2+0x5a>
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d117      	bne.n	800061a <__lesf2+0x5a>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d02b      	beq.n	8000646 <__lesf2+0x86>
 80005ee:	2002      	movs	r0, #2
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4018      	ands	r0, r3
 80005f4:	3801      	subs	r0, #1
 80005f6:	e026      	b.n	8000646 <__lesf2+0x86>
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	d0f0      	beq.n	80005de <__lesf2+0x1e>
 80005fc:	2002      	movs	r0, #2
 80005fe:	e022      	b.n	8000646 <__lesf2+0x86>
 8000600:	2c00      	cmp	r4, #0
 8000602:	d1fb      	bne.n	80005fc <__lesf2+0x3c>
 8000604:	28ff      	cmp	r0, #255	; 0xff
 8000606:	d01f      	beq.n	8000648 <__lesf2+0x88>
 8000608:	2800      	cmp	r0, #0
 800060a:	d11f      	bne.n	800064c <__lesf2+0x8c>
 800060c:	2d00      	cmp	r5, #0
 800060e:	d11d      	bne.n	800064c <__lesf2+0x8c>
 8000610:	2002      	movs	r0, #2
 8000612:	3b01      	subs	r3, #1
 8000614:	4018      	ands	r0, r3
 8000616:	3801      	subs	r0, #1
 8000618:	e015      	b.n	8000646 <__lesf2+0x86>
 800061a:	2c00      	cmp	r4, #0
 800061c:	d00e      	beq.n	800063c <__lesf2+0x7c>
 800061e:	428b      	cmp	r3, r1
 8000620:	d1e5      	bne.n	80005ee <__lesf2+0x2e>
 8000622:	2200      	movs	r2, #0
 8000624:	4290      	cmp	r0, r2
 8000626:	dc04      	bgt.n	8000632 <__lesf2+0x72>
 8000628:	42ac      	cmp	r4, r5
 800062a:	d8e0      	bhi.n	80005ee <__lesf2+0x2e>
 800062c:	2000      	movs	r0, #0
 800062e:	42ac      	cmp	r4, r5
 8000630:	d209      	bcs.n	8000646 <__lesf2+0x86>
 8000632:	1e58      	subs	r0, r3, #1
 8000634:	2301      	movs	r3, #1
 8000636:	4398      	bics	r0, r3
 8000638:	3001      	adds	r0, #1
 800063a:	e004      	b.n	8000646 <__lesf2+0x86>
 800063c:	2301      	movs	r3, #1
 800063e:	3901      	subs	r1, #1
 8000640:	4399      	bics	r1, r3
 8000642:	0008      	movs	r0, r1
 8000644:	3001      	adds	r0, #1
 8000646:	bd30      	pop	{r4, r5, pc}
 8000648:	2d00      	cmp	r5, #0
 800064a:	d1d7      	bne.n	80005fc <__lesf2+0x3c>
 800064c:	428b      	cmp	r3, r1
 800064e:	d1ce      	bne.n	80005ee <__lesf2+0x2e>
 8000650:	4282      	cmp	r2, r0
 8000652:	dde7      	ble.n	8000624 <__lesf2+0x64>
 8000654:	2102      	movs	r1, #2
 8000656:	1e58      	subs	r0, r3, #1
 8000658:	4008      	ands	r0, r1
 800065a:	3801      	subs	r0, #1
 800065c:	e7f3      	b.n	8000646 <__lesf2+0x86>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__aeabi_fsub>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	4647      	mov	r7, r8
 8000664:	46ce      	mov	lr, r9
 8000666:	0044      	lsls	r4, r0, #1
 8000668:	0fc2      	lsrs	r2, r0, #31
 800066a:	b580      	push	{r7, lr}
 800066c:	0247      	lsls	r7, r0, #9
 800066e:	0248      	lsls	r0, r1, #9
 8000670:	0a40      	lsrs	r0, r0, #9
 8000672:	4684      	mov	ip, r0
 8000674:	4666      	mov	r6, ip
 8000676:	0048      	lsls	r0, r1, #1
 8000678:	0a7f      	lsrs	r7, r7, #9
 800067a:	0e24      	lsrs	r4, r4, #24
 800067c:	00f6      	lsls	r6, r6, #3
 800067e:	0025      	movs	r5, r4
 8000680:	4690      	mov	r8, r2
 8000682:	00fb      	lsls	r3, r7, #3
 8000684:	0e00      	lsrs	r0, r0, #24
 8000686:	0fc9      	lsrs	r1, r1, #31
 8000688:	46b1      	mov	r9, r6
 800068a:	28ff      	cmp	r0, #255	; 0xff
 800068c:	d100      	bne.n	8000690 <__aeabi_fsub+0x30>
 800068e:	e085      	b.n	800079c <__aeabi_fsub+0x13c>
 8000690:	2601      	movs	r6, #1
 8000692:	4071      	eors	r1, r6
 8000694:	1a26      	subs	r6, r4, r0
 8000696:	4291      	cmp	r1, r2
 8000698:	d057      	beq.n	800074a <__aeabi_fsub+0xea>
 800069a:	2e00      	cmp	r6, #0
 800069c:	dd43      	ble.n	8000726 <__aeabi_fsub+0xc6>
 800069e:	2800      	cmp	r0, #0
 80006a0:	d000      	beq.n	80006a4 <__aeabi_fsub+0x44>
 80006a2:	e07f      	b.n	80007a4 <__aeabi_fsub+0x144>
 80006a4:	4649      	mov	r1, r9
 80006a6:	2900      	cmp	r1, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fsub+0x4c>
 80006aa:	e0aa      	b.n	8000802 <__aeabi_fsub+0x1a2>
 80006ac:	3e01      	subs	r6, #1
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fsub+0x54>
 80006b2:	e0f7      	b.n	80008a4 <__aeabi_fsub+0x244>
 80006b4:	1a5b      	subs	r3, r3, r1
 80006b6:	015a      	lsls	r2, r3, #5
 80006b8:	d400      	bmi.n	80006bc <__aeabi_fsub+0x5c>
 80006ba:	e08b      	b.n	80007d4 <__aeabi_fsub+0x174>
 80006bc:	019b      	lsls	r3, r3, #6
 80006be:	099c      	lsrs	r4, r3, #6
 80006c0:	0020      	movs	r0, r4
 80006c2:	f001 ff9d 	bl	8002600 <__clzsi2>
 80006c6:	3805      	subs	r0, #5
 80006c8:	4084      	lsls	r4, r0
 80006ca:	4285      	cmp	r5, r0
 80006cc:	dd00      	ble.n	80006d0 <__aeabi_fsub+0x70>
 80006ce:	e0d3      	b.n	8000878 <__aeabi_fsub+0x218>
 80006d0:	1b45      	subs	r5, r0, r5
 80006d2:	0023      	movs	r3, r4
 80006d4:	2020      	movs	r0, #32
 80006d6:	3501      	adds	r5, #1
 80006d8:	40eb      	lsrs	r3, r5
 80006da:	1b45      	subs	r5, r0, r5
 80006dc:	40ac      	lsls	r4, r5
 80006de:	1e62      	subs	r2, r4, #1
 80006e0:	4194      	sbcs	r4, r2
 80006e2:	4323      	orrs	r3, r4
 80006e4:	2407      	movs	r4, #7
 80006e6:	2500      	movs	r5, #0
 80006e8:	401c      	ands	r4, r3
 80006ea:	2201      	movs	r2, #1
 80006ec:	4641      	mov	r1, r8
 80006ee:	400a      	ands	r2, r1
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d004      	beq.n	80006fe <__aeabi_fsub+0x9e>
 80006f4:	210f      	movs	r1, #15
 80006f6:	4019      	ands	r1, r3
 80006f8:	2904      	cmp	r1, #4
 80006fa:	d000      	beq.n	80006fe <__aeabi_fsub+0x9e>
 80006fc:	3304      	adds	r3, #4
 80006fe:	0159      	lsls	r1, r3, #5
 8000700:	d400      	bmi.n	8000704 <__aeabi_fsub+0xa4>
 8000702:	e080      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000704:	3501      	adds	r5, #1
 8000706:	b2ec      	uxtb	r4, r5
 8000708:	2dff      	cmp	r5, #255	; 0xff
 800070a:	d000      	beq.n	800070e <__aeabi_fsub+0xae>
 800070c:	e0a3      	b.n	8000856 <__aeabi_fsub+0x1f6>
 800070e:	24ff      	movs	r4, #255	; 0xff
 8000710:	2300      	movs	r3, #0
 8000712:	025b      	lsls	r3, r3, #9
 8000714:	05e4      	lsls	r4, r4, #23
 8000716:	0a58      	lsrs	r0, r3, #9
 8000718:	07d2      	lsls	r2, r2, #31
 800071a:	4320      	orrs	r0, r4
 800071c:	4310      	orrs	r0, r2
 800071e:	bc0c      	pop	{r2, r3}
 8000720:	4690      	mov	r8, r2
 8000722:	4699      	mov	r9, r3
 8000724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000726:	2e00      	cmp	r6, #0
 8000728:	d174      	bne.n	8000814 <__aeabi_fsub+0x1b4>
 800072a:	1c60      	adds	r0, r4, #1
 800072c:	b2c0      	uxtb	r0, r0
 800072e:	2801      	cmp	r0, #1
 8000730:	dc00      	bgt.n	8000734 <__aeabi_fsub+0xd4>
 8000732:	e0a7      	b.n	8000884 <__aeabi_fsub+0x224>
 8000734:	464a      	mov	r2, r9
 8000736:	1a9c      	subs	r4, r3, r2
 8000738:	0162      	lsls	r2, r4, #5
 800073a:	d500      	bpl.n	800073e <__aeabi_fsub+0xde>
 800073c:	e0b6      	b.n	80008ac <__aeabi_fsub+0x24c>
 800073e:	2c00      	cmp	r4, #0
 8000740:	d1be      	bne.n	80006c0 <__aeabi_fsub+0x60>
 8000742:	2200      	movs	r2, #0
 8000744:	2400      	movs	r4, #0
 8000746:	2300      	movs	r3, #0
 8000748:	e7e3      	b.n	8000712 <__aeabi_fsub+0xb2>
 800074a:	2e00      	cmp	r6, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fsub+0xf0>
 800074e:	e085      	b.n	800085c <__aeabi_fsub+0x1fc>
 8000750:	2800      	cmp	r0, #0
 8000752:	d046      	beq.n	80007e2 <__aeabi_fsub+0x182>
 8000754:	2cff      	cmp	r4, #255	; 0xff
 8000756:	d049      	beq.n	80007ec <__aeabi_fsub+0x18c>
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	4648      	mov	r0, r9
 800075c:	04d2      	lsls	r2, r2, #19
 800075e:	4310      	orrs	r0, r2
 8000760:	4681      	mov	r9, r0
 8000762:	2201      	movs	r2, #1
 8000764:	2e1b      	cmp	r6, #27
 8000766:	dc09      	bgt.n	800077c <__aeabi_fsub+0x11c>
 8000768:	2020      	movs	r0, #32
 800076a:	464c      	mov	r4, r9
 800076c:	1b80      	subs	r0, r0, r6
 800076e:	4084      	lsls	r4, r0
 8000770:	464a      	mov	r2, r9
 8000772:	0020      	movs	r0, r4
 8000774:	40f2      	lsrs	r2, r6
 8000776:	1e44      	subs	r4, r0, #1
 8000778:	41a0      	sbcs	r0, r4
 800077a:	4302      	orrs	r2, r0
 800077c:	189b      	adds	r3, r3, r2
 800077e:	015a      	lsls	r2, r3, #5
 8000780:	d528      	bpl.n	80007d4 <__aeabi_fsub+0x174>
 8000782:	3501      	adds	r5, #1
 8000784:	2dff      	cmp	r5, #255	; 0xff
 8000786:	d100      	bne.n	800078a <__aeabi_fsub+0x12a>
 8000788:	e0a8      	b.n	80008dc <__aeabi_fsub+0x27c>
 800078a:	2201      	movs	r2, #1
 800078c:	2407      	movs	r4, #7
 800078e:	4994      	ldr	r1, [pc, #592]	; (80009e0 <__aeabi_fsub+0x380>)
 8000790:	401a      	ands	r2, r3
 8000792:	085b      	lsrs	r3, r3, #1
 8000794:	400b      	ands	r3, r1
 8000796:	4313      	orrs	r3, r2
 8000798:	401c      	ands	r4, r3
 800079a:	e7a6      	b.n	80006ea <__aeabi_fsub+0x8a>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d000      	beq.n	80007a2 <__aeabi_fsub+0x142>
 80007a0:	e778      	b.n	8000694 <__aeabi_fsub+0x34>
 80007a2:	e775      	b.n	8000690 <__aeabi_fsub+0x30>
 80007a4:	2cff      	cmp	r4, #255	; 0xff
 80007a6:	d054      	beq.n	8000852 <__aeabi_fsub+0x1f2>
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	4649      	mov	r1, r9
 80007ac:	04d2      	lsls	r2, r2, #19
 80007ae:	4311      	orrs	r1, r2
 80007b0:	4689      	mov	r9, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	2e1b      	cmp	r6, #27
 80007b6:	dc09      	bgt.n	80007cc <__aeabi_fsub+0x16c>
 80007b8:	2120      	movs	r1, #32
 80007ba:	4648      	mov	r0, r9
 80007bc:	1b89      	subs	r1, r1, r6
 80007be:	4088      	lsls	r0, r1
 80007c0:	464a      	mov	r2, r9
 80007c2:	0001      	movs	r1, r0
 80007c4:	40f2      	lsrs	r2, r6
 80007c6:	1e48      	subs	r0, r1, #1
 80007c8:	4181      	sbcs	r1, r0
 80007ca:	430a      	orrs	r2, r1
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	015a      	lsls	r2, r3, #5
 80007d0:	d500      	bpl.n	80007d4 <__aeabi_fsub+0x174>
 80007d2:	e773      	b.n	80006bc <__aeabi_fsub+0x5c>
 80007d4:	2201      	movs	r2, #1
 80007d6:	4641      	mov	r1, r8
 80007d8:	400a      	ands	r2, r1
 80007da:	0759      	lsls	r1, r3, #29
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fsub+0x180>
 80007de:	e789      	b.n	80006f4 <__aeabi_fsub+0x94>
 80007e0:	e011      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80007e2:	4648      	mov	r0, r9
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d158      	bne.n	800089a <__aeabi_fsub+0x23a>
 80007e8:	2cff      	cmp	r4, #255	; 0xff
 80007ea:	d10c      	bne.n	8000806 <__aeabi_fsub+0x1a6>
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fsub+0x194>
 80007f2:	e78c      	b.n	800070e <__aeabi_fsub+0xae>
 80007f4:	2080      	movs	r0, #128	; 0x80
 80007f6:	03c0      	lsls	r0, r0, #15
 80007f8:	4303      	orrs	r3, r0
 80007fa:	025b      	lsls	r3, r3, #9
 80007fc:	0a5b      	lsrs	r3, r3, #9
 80007fe:	24ff      	movs	r4, #255	; 0xff
 8000800:	e787      	b.n	8000712 <__aeabi_fsub+0xb2>
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d025      	beq.n	8000852 <__aeabi_fsub+0x1f2>
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d0f0      	beq.n	80007ee <__aeabi_fsub+0x18e>
 800080c:	025b      	lsls	r3, r3, #9
 800080e:	0a5b      	lsrs	r3, r3, #9
 8000810:	b2ec      	uxtb	r4, r5
 8000812:	e77e      	b.n	8000712 <__aeabi_fsub+0xb2>
 8000814:	2c00      	cmp	r4, #0
 8000816:	d04d      	beq.n	80008b4 <__aeabi_fsub+0x254>
 8000818:	28ff      	cmp	r0, #255	; 0xff
 800081a:	d018      	beq.n	800084e <__aeabi_fsub+0x1ee>
 800081c:	2480      	movs	r4, #128	; 0x80
 800081e:	04e4      	lsls	r4, r4, #19
 8000820:	4272      	negs	r2, r6
 8000822:	4323      	orrs	r3, r4
 8000824:	2a1b      	cmp	r2, #27
 8000826:	dd00      	ble.n	800082a <__aeabi_fsub+0x1ca>
 8000828:	e0c4      	b.n	80009b4 <__aeabi_fsub+0x354>
 800082a:	001c      	movs	r4, r3
 800082c:	2520      	movs	r5, #32
 800082e:	40d4      	lsrs	r4, r2
 8000830:	1aaa      	subs	r2, r5, r2
 8000832:	4093      	lsls	r3, r2
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	4323      	orrs	r3, r4
 800083a:	464a      	mov	r2, r9
 800083c:	0005      	movs	r5, r0
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	4688      	mov	r8, r1
 8000842:	e738      	b.n	80006b6 <__aeabi_fsub+0x56>
 8000844:	1c72      	adds	r2, r6, #1
 8000846:	d0f8      	beq.n	800083a <__aeabi_fsub+0x1da>
 8000848:	43f2      	mvns	r2, r6
 800084a:	28ff      	cmp	r0, #255	; 0xff
 800084c:	d1ea      	bne.n	8000824 <__aeabi_fsub+0x1c4>
 800084e:	000a      	movs	r2, r1
 8000850:	464b      	mov	r3, r9
 8000852:	25ff      	movs	r5, #255	; 0xff
 8000854:	e7d7      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000856:	019b      	lsls	r3, r3, #6
 8000858:	0a5b      	lsrs	r3, r3, #9
 800085a:	e75a      	b.n	8000712 <__aeabi_fsub+0xb2>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d141      	bne.n	80008e4 <__aeabi_fsub+0x284>
 8000860:	1c65      	adds	r5, r4, #1
 8000862:	b2e9      	uxtb	r1, r5
 8000864:	2901      	cmp	r1, #1
 8000866:	dd45      	ble.n	80008f4 <__aeabi_fsub+0x294>
 8000868:	2dff      	cmp	r5, #255	; 0xff
 800086a:	d100      	bne.n	800086e <__aeabi_fsub+0x20e>
 800086c:	e74f      	b.n	800070e <__aeabi_fsub+0xae>
 800086e:	2407      	movs	r4, #7
 8000870:	444b      	add	r3, r9
 8000872:	085b      	lsrs	r3, r3, #1
 8000874:	401c      	ands	r4, r3
 8000876:	e738      	b.n	80006ea <__aeabi_fsub+0x8a>
 8000878:	2207      	movs	r2, #7
 800087a:	4b5a      	ldr	r3, [pc, #360]	; (80009e4 <__aeabi_fsub+0x384>)
 800087c:	1a2d      	subs	r5, r5, r0
 800087e:	4023      	ands	r3, r4
 8000880:	4014      	ands	r4, r2
 8000882:	e732      	b.n	80006ea <__aeabi_fsub+0x8a>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d11d      	bne.n	80008c4 <__aeabi_fsub+0x264>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d17a      	bne.n	8000982 <__aeabi_fsub+0x322>
 800088c:	464b      	mov	r3, r9
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fsub+0x234>
 8000892:	e091      	b.n	80009b8 <__aeabi_fsub+0x358>
 8000894:	000a      	movs	r2, r1
 8000896:	2500      	movs	r5, #0
 8000898:	e7b5      	b.n	8000806 <__aeabi_fsub+0x1a6>
 800089a:	3e01      	subs	r6, #1
 800089c:	2e00      	cmp	r6, #0
 800089e:	d119      	bne.n	80008d4 <__aeabi_fsub+0x274>
 80008a0:	444b      	add	r3, r9
 80008a2:	e76c      	b.n	800077e <__aeabi_fsub+0x11e>
 80008a4:	2cff      	cmp	r4, #255	; 0xff
 80008a6:	d184      	bne.n	80007b2 <__aeabi_fsub+0x152>
 80008a8:	25ff      	movs	r5, #255	; 0xff
 80008aa:	e7ac      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80008ac:	464a      	mov	r2, r9
 80008ae:	4688      	mov	r8, r1
 80008b0:	1ad4      	subs	r4, r2, r3
 80008b2:	e705      	b.n	80006c0 <__aeabi_fsub+0x60>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1c5      	bne.n	8000844 <__aeabi_fsub+0x1e4>
 80008b8:	000a      	movs	r2, r1
 80008ba:	28ff      	cmp	r0, #255	; 0xff
 80008bc:	d0c8      	beq.n	8000850 <__aeabi_fsub+0x1f0>
 80008be:	0005      	movs	r5, r0
 80008c0:	464b      	mov	r3, r9
 80008c2:	e7a0      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d149      	bne.n	800095c <__aeabi_fsub+0x2fc>
 80008c8:	464b      	mov	r3, r9
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d077      	beq.n	80009be <__aeabi_fsub+0x35e>
 80008ce:	000a      	movs	r2, r1
 80008d0:	25ff      	movs	r5, #255	; 0xff
 80008d2:	e798      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80008d4:	2cff      	cmp	r4, #255	; 0xff
 80008d6:	d000      	beq.n	80008da <__aeabi_fsub+0x27a>
 80008d8:	e743      	b.n	8000762 <__aeabi_fsub+0x102>
 80008da:	e787      	b.n	80007ec <__aeabi_fsub+0x18c>
 80008dc:	000a      	movs	r2, r1
 80008de:	24ff      	movs	r4, #255	; 0xff
 80008e0:	2300      	movs	r3, #0
 80008e2:	e716      	b.n	8000712 <__aeabi_fsub+0xb2>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d115      	bne.n	8000914 <__aeabi_fsub+0x2b4>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d157      	bne.n	800099c <__aeabi_fsub+0x33c>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d1e6      	bne.n	80008be <__aeabi_fsub+0x25e>
 80008f0:	464b      	mov	r3, r9
 80008f2:	e77b      	b.n	80007ec <__aeabi_fsub+0x18c>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d120      	bne.n	800093a <__aeabi_fsub+0x2da>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d057      	beq.n	80009ac <__aeabi_fsub+0x34c>
 80008fc:	4649      	mov	r1, r9
 80008fe:	2900      	cmp	r1, #0
 8000900:	d053      	beq.n	80009aa <__aeabi_fsub+0x34a>
 8000902:	444b      	add	r3, r9
 8000904:	015a      	lsls	r2, r3, #5
 8000906:	d568      	bpl.n	80009da <__aeabi_fsub+0x37a>
 8000908:	2407      	movs	r4, #7
 800090a:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <__aeabi_fsub+0x384>)
 800090c:	401c      	ands	r4, r3
 800090e:	2501      	movs	r5, #1
 8000910:	4013      	ands	r3, r2
 8000912:	e6ea      	b.n	80006ea <__aeabi_fsub+0x8a>
 8000914:	28ff      	cmp	r0, #255	; 0xff
 8000916:	d0eb      	beq.n	80008f0 <__aeabi_fsub+0x290>
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	04d2      	lsls	r2, r2, #19
 800091c:	4276      	negs	r6, r6
 800091e:	4313      	orrs	r3, r2
 8000920:	2e1b      	cmp	r6, #27
 8000922:	dc53      	bgt.n	80009cc <__aeabi_fsub+0x36c>
 8000924:	2520      	movs	r5, #32
 8000926:	1bad      	subs	r5, r5, r6
 8000928:	001a      	movs	r2, r3
 800092a:	40ab      	lsls	r3, r5
 800092c:	40f2      	lsrs	r2, r6
 800092e:	1e5c      	subs	r4, r3, #1
 8000930:	41a3      	sbcs	r3, r4
 8000932:	4313      	orrs	r3, r2
 8000934:	444b      	add	r3, r9
 8000936:	0005      	movs	r5, r0
 8000938:	e721      	b.n	800077e <__aeabi_fsub+0x11e>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0d8      	beq.n	80008f0 <__aeabi_fsub+0x290>
 800093e:	4649      	mov	r1, r9
 8000940:	2900      	cmp	r1, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fsub+0x2e6>
 8000944:	e752      	b.n	80007ec <__aeabi_fsub+0x18c>
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	03c9      	lsls	r1, r1, #15
 800094a:	420f      	tst	r7, r1
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x2f0>
 800094e:	e74d      	b.n	80007ec <__aeabi_fsub+0x18c>
 8000950:	4660      	mov	r0, ip
 8000952:	4208      	tst	r0, r1
 8000954:	d000      	beq.n	8000958 <__aeabi_fsub+0x2f8>
 8000956:	e749      	b.n	80007ec <__aeabi_fsub+0x18c>
 8000958:	464b      	mov	r3, r9
 800095a:	e747      	b.n	80007ec <__aeabi_fsub+0x18c>
 800095c:	4648      	mov	r0, r9
 800095e:	25ff      	movs	r5, #255	; 0xff
 8000960:	2800      	cmp	r0, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x306>
 8000964:	e74f      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	03d2      	lsls	r2, r2, #15
 800096a:	4217      	tst	r7, r2
 800096c:	d004      	beq.n	8000978 <__aeabi_fsub+0x318>
 800096e:	4660      	mov	r0, ip
 8000970:	4210      	tst	r0, r2
 8000972:	d101      	bne.n	8000978 <__aeabi_fsub+0x318>
 8000974:	464b      	mov	r3, r9
 8000976:	4688      	mov	r8, r1
 8000978:	2201      	movs	r2, #1
 800097a:	4641      	mov	r1, r8
 800097c:	25ff      	movs	r5, #255	; 0xff
 800097e:	400a      	ands	r2, r1
 8000980:	e741      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000982:	4648      	mov	r0, r9
 8000984:	2800      	cmp	r0, #0
 8000986:	d01f      	beq.n	80009c8 <__aeabi_fsub+0x368>
 8000988:	1a1a      	subs	r2, r3, r0
 800098a:	0150      	lsls	r0, r2, #5
 800098c:	d520      	bpl.n	80009d0 <__aeabi_fsub+0x370>
 800098e:	464a      	mov	r2, r9
 8000990:	2407      	movs	r4, #7
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	401c      	ands	r4, r3
 8000996:	4688      	mov	r8, r1
 8000998:	2500      	movs	r5, #0
 800099a:	e6a6      	b.n	80006ea <__aeabi_fsub+0x8a>
 800099c:	1c74      	adds	r4, r6, #1
 800099e:	d0c9      	beq.n	8000934 <__aeabi_fsub+0x2d4>
 80009a0:	43f6      	mvns	r6, r6
 80009a2:	28ff      	cmp	r0, #255	; 0xff
 80009a4:	d1bc      	bne.n	8000920 <__aeabi_fsub+0x2c0>
 80009a6:	464b      	mov	r3, r9
 80009a8:	e720      	b.n	80007ec <__aeabi_fsub+0x18c>
 80009aa:	4699      	mov	r9, r3
 80009ac:	464b      	mov	r3, r9
 80009ae:	2500      	movs	r5, #0
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	e72b      	b.n	800080c <__aeabi_fsub+0x1ac>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e740      	b.n	800083a <__aeabi_fsub+0x1da>
 80009b8:	2200      	movs	r2, #0
 80009ba:	2300      	movs	r3, #0
 80009bc:	e6a9      	b.n	8000712 <__aeabi_fsub+0xb2>
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	2200      	movs	r2, #0
 80009c2:	03db      	lsls	r3, r3, #15
 80009c4:	24ff      	movs	r4, #255	; 0xff
 80009c6:	e6a4      	b.n	8000712 <__aeabi_fsub+0xb2>
 80009c8:	2500      	movs	r5, #0
 80009ca:	e71c      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e7b1      	b.n	8000934 <__aeabi_fsub+0x2d4>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d0f1      	beq.n	80009b8 <__aeabi_fsub+0x358>
 80009d4:	0013      	movs	r3, r2
 80009d6:	2500      	movs	r5, #0
 80009d8:	e6fc      	b.n	80007d4 <__aeabi_fsub+0x174>
 80009da:	2500      	movs	r5, #0
 80009dc:	e6fa      	b.n	80007d4 <__aeabi_fsub+0x174>
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	7dffffff 	.word	0x7dffffff
 80009e4:	fbffffff 	.word	0xfbffffff

080009e8 <__aeabi_dadd>:
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	464f      	mov	r7, r9
 80009ec:	4646      	mov	r6, r8
 80009ee:	46d6      	mov	lr, sl
 80009f0:	000c      	movs	r4, r1
 80009f2:	0309      	lsls	r1, r1, #12
 80009f4:	b5c0      	push	{r6, r7, lr}
 80009f6:	0a49      	lsrs	r1, r1, #9
 80009f8:	0f47      	lsrs	r7, r0, #29
 80009fa:	005e      	lsls	r6, r3, #1
 80009fc:	4339      	orrs	r1, r7
 80009fe:	031f      	lsls	r7, r3, #12
 8000a00:	0fdb      	lsrs	r3, r3, #31
 8000a02:	469c      	mov	ip, r3
 8000a04:	0065      	lsls	r5, r4, #1
 8000a06:	0a7b      	lsrs	r3, r7, #9
 8000a08:	0f57      	lsrs	r7, r2, #29
 8000a0a:	431f      	orrs	r7, r3
 8000a0c:	0d6d      	lsrs	r5, r5, #21
 8000a0e:	0fe4      	lsrs	r4, r4, #31
 8000a10:	0d76      	lsrs	r6, r6, #21
 8000a12:	46a1      	mov	r9, r4
 8000a14:	00c0      	lsls	r0, r0, #3
 8000a16:	46b8      	mov	r8, r7
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	1bab      	subs	r3, r5, r6
 8000a1c:	4564      	cmp	r4, ip
 8000a1e:	d07b      	beq.n	8000b18 <__aeabi_dadd+0x130>
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dd5f      	ble.n	8000ae4 <__aeabi_dadd+0xfc>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x42>
 8000a28:	e0a4      	b.n	8000b74 <__aeabi_dadd+0x18c>
 8000a2a:	003e      	movs	r6, r7
 8000a2c:	4316      	orrs	r6, r2
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x4a>
 8000a30:	e112      	b.n	8000c58 <__aeabi_dadd+0x270>
 8000a32:	1e5e      	subs	r6, r3, #1
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x52>
 8000a38:	e19e      	b.n	8000d78 <__aeabi_dadd+0x390>
 8000a3a:	1a87      	subs	r7, r0, r2
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	42b8      	cmp	r0, r7
 8000a40:	4180      	sbcs	r0, r0
 8000a42:	2501      	movs	r5, #1
 8000a44:	1ac9      	subs	r1, r1, r3
 8000a46:	4240      	negs	r0, r0
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	020b      	lsls	r3, r1, #8
 8000a4c:	d400      	bmi.n	8000a50 <__aeabi_dadd+0x68>
 8000a4e:	e131      	b.n	8000cb4 <__aeabi_dadd+0x2cc>
 8000a50:	0249      	lsls	r1, r1, #9
 8000a52:	0a4e      	lsrs	r6, r1, #9
 8000a54:	2e00      	cmp	r6, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x72>
 8000a58:	e16e      	b.n	8000d38 <__aeabi_dadd+0x350>
 8000a5a:	0030      	movs	r0, r6
 8000a5c:	f001 fdd0 	bl	8002600 <__clzsi2>
 8000a60:	0003      	movs	r3, r0
 8000a62:	3b08      	subs	r3, #8
 8000a64:	2b1f      	cmp	r3, #31
 8000a66:	dd00      	ble.n	8000a6a <__aeabi_dadd+0x82>
 8000a68:	e161      	b.n	8000d2e <__aeabi_dadd+0x346>
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	0039      	movs	r1, r7
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	409e      	lsls	r6, r3
 8000a72:	40d1      	lsrs	r1, r2
 8000a74:	409f      	lsls	r7, r3
 8000a76:	430e      	orrs	r6, r1
 8000a78:	429d      	cmp	r5, r3
 8000a7a:	dd00      	ble.n	8000a7e <__aeabi_dadd+0x96>
 8000a7c:	e151      	b.n	8000d22 <__aeabi_dadd+0x33a>
 8000a7e:	1b5d      	subs	r5, r3, r5
 8000a80:	1c6b      	adds	r3, r5, #1
 8000a82:	2b1f      	cmp	r3, #31
 8000a84:	dd00      	ble.n	8000a88 <__aeabi_dadd+0xa0>
 8000a86:	e17c      	b.n	8000d82 <__aeabi_dadd+0x39a>
 8000a88:	2120      	movs	r1, #32
 8000a8a:	1ac9      	subs	r1, r1, r3
 8000a8c:	003d      	movs	r5, r7
 8000a8e:	0030      	movs	r0, r6
 8000a90:	408f      	lsls	r7, r1
 8000a92:	4088      	lsls	r0, r1
 8000a94:	40dd      	lsrs	r5, r3
 8000a96:	1e79      	subs	r1, r7, #1
 8000a98:	418f      	sbcs	r7, r1
 8000a9a:	0031      	movs	r1, r6
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	4328      	orrs	r0, r5
 8000aa0:	40d9      	lsrs	r1, r3
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	4307      	orrs	r7, r0
 8000aa6:	403a      	ands	r2, r7
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d009      	beq.n	8000ac0 <__aeabi_dadd+0xd8>
 8000aac:	230f      	movs	r3, #15
 8000aae:	403b      	ands	r3, r7
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d005      	beq.n	8000ac0 <__aeabi_dadd+0xd8>
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	42bb      	cmp	r3, r7
 8000ab8:	41bf      	sbcs	r7, r7
 8000aba:	427f      	negs	r7, r7
 8000abc:	19c9      	adds	r1, r1, r7
 8000abe:	001f      	movs	r7, r3
 8000ac0:	020b      	lsls	r3, r1, #8
 8000ac2:	d400      	bmi.n	8000ac6 <__aeabi_dadd+0xde>
 8000ac4:	e226      	b.n	8000f14 <__aeabi_dadd+0x52c>
 8000ac6:	1c6a      	adds	r2, r5, #1
 8000ac8:	4bc6      	ldr	r3, [pc, #792]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000aca:	0555      	lsls	r5, r2, #21
 8000acc:	0d6d      	lsrs	r5, r5, #21
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0xec>
 8000ad2:	e106      	b.n	8000ce2 <__aeabi_dadd+0x2fa>
 8000ad4:	4ac4      	ldr	r2, [pc, #784]	; (8000de8 <__aeabi_dadd+0x400>)
 8000ad6:	08ff      	lsrs	r7, r7, #3
 8000ad8:	400a      	ands	r2, r1
 8000ada:	0753      	lsls	r3, r2, #29
 8000adc:	0252      	lsls	r2, r2, #9
 8000ade:	433b      	orrs	r3, r7
 8000ae0:	0b12      	lsrs	r2, r2, #12
 8000ae2:	e08e      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x102>
 8000ae8:	e0b8      	b.n	8000c5c <__aeabi_dadd+0x274>
 8000aea:	1c6b      	adds	r3, r5, #1
 8000aec:	055b      	lsls	r3, r3, #21
 8000aee:	0d5b      	lsrs	r3, r3, #21
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	dc00      	bgt.n	8000af6 <__aeabi_dadd+0x10e>
 8000af4:	e130      	b.n	8000d58 <__aeabi_dadd+0x370>
 8000af6:	1a87      	subs	r7, r0, r2
 8000af8:	4643      	mov	r3, r8
 8000afa:	42b8      	cmp	r0, r7
 8000afc:	41b6      	sbcs	r6, r6
 8000afe:	1acb      	subs	r3, r1, r3
 8000b00:	4276      	negs	r6, r6
 8000b02:	1b9e      	subs	r6, r3, r6
 8000b04:	0233      	lsls	r3, r6, #8
 8000b06:	d500      	bpl.n	8000b0a <__aeabi_dadd+0x122>
 8000b08:	e14c      	b.n	8000da4 <__aeabi_dadd+0x3bc>
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	4333      	orrs	r3, r6
 8000b0e:	d1a1      	bne.n	8000a54 <__aeabi_dadd+0x6c>
 8000b10:	2200      	movs	r2, #0
 8000b12:	2400      	movs	r4, #0
 8000b14:	2500      	movs	r5, #0
 8000b16:	e070      	b.n	8000bfa <__aeabi_dadd+0x212>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dc00      	bgt.n	8000b1e <__aeabi_dadd+0x136>
 8000b1c:	e0e5      	b.n	8000cea <__aeabi_dadd+0x302>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x13c>
 8000b22:	e083      	b.n	8000c2c <__aeabi_dadd+0x244>
 8000b24:	4eaf      	ldr	r6, [pc, #700]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000b26:	42b5      	cmp	r5, r6
 8000b28:	d060      	beq.n	8000bec <__aeabi_dadd+0x204>
 8000b2a:	2680      	movs	r6, #128	; 0x80
 8000b2c:	0436      	lsls	r6, r6, #16
 8000b2e:	4337      	orrs	r7, r6
 8000b30:	46b8      	mov	r8, r7
 8000b32:	2b38      	cmp	r3, #56	; 0x38
 8000b34:	dc00      	bgt.n	8000b38 <__aeabi_dadd+0x150>
 8000b36:	e13e      	b.n	8000db6 <__aeabi_dadd+0x3ce>
 8000b38:	4643      	mov	r3, r8
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	001f      	movs	r7, r3
 8000b3e:	1e7a      	subs	r2, r7, #1
 8000b40:	4197      	sbcs	r7, r2
 8000b42:	183f      	adds	r7, r7, r0
 8000b44:	4287      	cmp	r7, r0
 8000b46:	4180      	sbcs	r0, r0
 8000b48:	4240      	negs	r0, r0
 8000b4a:	1809      	adds	r1, r1, r0
 8000b4c:	020b      	lsls	r3, r1, #8
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_dadd+0x16a>
 8000b50:	e0b0      	b.n	8000cb4 <__aeabi_dadd+0x2cc>
 8000b52:	4ba4      	ldr	r3, [pc, #656]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000b54:	3501      	adds	r5, #1
 8000b56:	429d      	cmp	r5, r3
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x174>
 8000b5a:	e0c3      	b.n	8000ce4 <__aeabi_dadd+0x2fc>
 8000b5c:	4aa2      	ldr	r2, [pc, #648]	; (8000de8 <__aeabi_dadd+0x400>)
 8000b5e:	087b      	lsrs	r3, r7, #1
 8000b60:	400a      	ands	r2, r1
 8000b62:	2101      	movs	r1, #1
 8000b64:	400f      	ands	r7, r1
 8000b66:	431f      	orrs	r7, r3
 8000b68:	0851      	lsrs	r1, r2, #1
 8000b6a:	07d3      	lsls	r3, r2, #31
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	431f      	orrs	r7, r3
 8000b70:	403a      	ands	r2, r7
 8000b72:	e799      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000b74:	4e9b      	ldr	r6, [pc, #620]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000b76:	42b5      	cmp	r5, r6
 8000b78:	d038      	beq.n	8000bec <__aeabi_dadd+0x204>
 8000b7a:	2680      	movs	r6, #128	; 0x80
 8000b7c:	0436      	lsls	r6, r6, #16
 8000b7e:	4337      	orrs	r7, r6
 8000b80:	46b8      	mov	r8, r7
 8000b82:	2b38      	cmp	r3, #56	; 0x38
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dadd+0x1a0>
 8000b86:	e0dc      	b.n	8000d42 <__aeabi_dadd+0x35a>
 8000b88:	2b1f      	cmp	r3, #31
 8000b8a:	dc00      	bgt.n	8000b8e <__aeabi_dadd+0x1a6>
 8000b8c:	e130      	b.n	8000df0 <__aeabi_dadd+0x408>
 8000b8e:	001e      	movs	r6, r3
 8000b90:	4647      	mov	r7, r8
 8000b92:	3e20      	subs	r6, #32
 8000b94:	40f7      	lsrs	r7, r6
 8000b96:	46bc      	mov	ip, r7
 8000b98:	2b20      	cmp	r3, #32
 8000b9a:	d004      	beq.n	8000ba6 <__aeabi_dadd+0x1be>
 8000b9c:	2640      	movs	r6, #64	; 0x40
 8000b9e:	1af3      	subs	r3, r6, r3
 8000ba0:	4646      	mov	r6, r8
 8000ba2:	409e      	lsls	r6, r3
 8000ba4:	4332      	orrs	r2, r6
 8000ba6:	0017      	movs	r7, r2
 8000ba8:	4663      	mov	r3, ip
 8000baa:	1e7a      	subs	r2, r7, #1
 8000bac:	4197      	sbcs	r7, r2
 8000bae:	431f      	orrs	r7, r3
 8000bb0:	e0cc      	b.n	8000d4c <__aeabi_dadd+0x364>
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0x1d0>
 8000bb6:	e204      	b.n	8000fc2 <__aeabi_dadd+0x5da>
 8000bb8:	4643      	mov	r3, r8
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dadd+0x1d8>
 8000bbe:	e159      	b.n	8000e74 <__aeabi_dadd+0x48c>
 8000bc0:	074b      	lsls	r3, r1, #29
 8000bc2:	08c0      	lsrs	r0, r0, #3
 8000bc4:	4318      	orrs	r0, r3
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	08c9      	lsrs	r1, r1, #3
 8000bca:	031b      	lsls	r3, r3, #12
 8000bcc:	4219      	tst	r1, r3
 8000bce:	d008      	beq.n	8000be2 <__aeabi_dadd+0x1fa>
 8000bd0:	4645      	mov	r5, r8
 8000bd2:	08ed      	lsrs	r5, r5, #3
 8000bd4:	421d      	tst	r5, r3
 8000bd6:	d104      	bne.n	8000be2 <__aeabi_dadd+0x1fa>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	08d0      	lsrs	r0, r2, #3
 8000bdc:	0759      	lsls	r1, r3, #29
 8000bde:	4308      	orrs	r0, r1
 8000be0:	0029      	movs	r1, r5
 8000be2:	0f42      	lsrs	r2, r0, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	4d7f      	ldr	r5, [pc, #508]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000be8:	4311      	orrs	r1, r2
 8000bea:	00c0      	lsls	r0, r0, #3
 8000bec:	074b      	lsls	r3, r1, #29
 8000bee:	08ca      	lsrs	r2, r1, #3
 8000bf0:	497c      	ldr	r1, [pc, #496]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000bf2:	08c0      	lsrs	r0, r0, #3
 8000bf4:	4303      	orrs	r3, r0
 8000bf6:	428d      	cmp	r5, r1
 8000bf8:	d068      	beq.n	8000ccc <__aeabi_dadd+0x2e4>
 8000bfa:	0312      	lsls	r2, r2, #12
 8000bfc:	056d      	lsls	r5, r5, #21
 8000bfe:	0b12      	lsrs	r2, r2, #12
 8000c00:	0d6d      	lsrs	r5, r5, #21
 8000c02:	2100      	movs	r1, #0
 8000c04:	0312      	lsls	r2, r2, #12
 8000c06:	0018      	movs	r0, r3
 8000c08:	0b13      	lsrs	r3, r2, #12
 8000c0a:	0d0a      	lsrs	r2, r1, #20
 8000c0c:	0512      	lsls	r2, r2, #20
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	4b76      	ldr	r3, [pc, #472]	; (8000dec <__aeabi_dadd+0x404>)
 8000c12:	052d      	lsls	r5, r5, #20
 8000c14:	4013      	ands	r3, r2
 8000c16:	432b      	orrs	r3, r5
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	07e4      	lsls	r4, r4, #31
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	0019      	movs	r1, r3
 8000c22:	bc1c      	pop	{r2, r3, r4}
 8000c24:	4690      	mov	r8, r2
 8000c26:	4699      	mov	r9, r3
 8000c28:	46a2      	mov	sl, r4
 8000c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2c:	003e      	movs	r6, r7
 8000c2e:	4316      	orrs	r6, r2
 8000c30:	d012      	beq.n	8000c58 <__aeabi_dadd+0x270>
 8000c32:	1e5e      	subs	r6, r3, #1
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_dadd+0x252>
 8000c38:	e100      	b.n	8000e3c <__aeabi_dadd+0x454>
 8000c3a:	1887      	adds	r7, r0, r2
 8000c3c:	4287      	cmp	r7, r0
 8000c3e:	4180      	sbcs	r0, r0
 8000c40:	4441      	add	r1, r8
 8000c42:	4240      	negs	r0, r0
 8000c44:	1809      	adds	r1, r1, r0
 8000c46:	2501      	movs	r5, #1
 8000c48:	020b      	lsls	r3, r1, #8
 8000c4a:	d533      	bpl.n	8000cb4 <__aeabi_dadd+0x2cc>
 8000c4c:	2502      	movs	r5, #2
 8000c4e:	e785      	b.n	8000b5c <__aeabi_dadd+0x174>
 8000c50:	4664      	mov	r4, ip
 8000c52:	0033      	movs	r3, r6
 8000c54:	4641      	mov	r1, r8
 8000c56:	0010      	movs	r0, r2
 8000c58:	001d      	movs	r5, r3
 8000c5a:	e7c7      	b.n	8000bec <__aeabi_dadd+0x204>
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_dadd+0x27a>
 8000c60:	e0da      	b.n	8000e18 <__aeabi_dadd+0x430>
 8000c62:	000c      	movs	r4, r1
 8000c64:	4304      	orrs	r4, r0
 8000c66:	d0f3      	beq.n	8000c50 <__aeabi_dadd+0x268>
 8000c68:	1c5c      	adds	r4, r3, #1
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x286>
 8000c6c:	e19f      	b.n	8000fae <__aeabi_dadd+0x5c6>
 8000c6e:	4c5d      	ldr	r4, [pc, #372]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dadd+0x28e>
 8000c74:	e12f      	b.n	8000ed6 <__aeabi_dadd+0x4ee>
 8000c76:	43db      	mvns	r3, r3
 8000c78:	2b38      	cmp	r3, #56	; 0x38
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dadd+0x296>
 8000c7c:	e166      	b.n	8000f4c <__aeabi_dadd+0x564>
 8000c7e:	2b1f      	cmp	r3, #31
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dadd+0x29c>
 8000c82:	e183      	b.n	8000f8c <__aeabi_dadd+0x5a4>
 8000c84:	2420      	movs	r4, #32
 8000c86:	0005      	movs	r5, r0
 8000c88:	1ae4      	subs	r4, r4, r3
 8000c8a:	000f      	movs	r7, r1
 8000c8c:	40dd      	lsrs	r5, r3
 8000c8e:	40d9      	lsrs	r1, r3
 8000c90:	40a0      	lsls	r0, r4
 8000c92:	4643      	mov	r3, r8
 8000c94:	40a7      	lsls	r7, r4
 8000c96:	1a5b      	subs	r3, r3, r1
 8000c98:	1e44      	subs	r4, r0, #1
 8000c9a:	41a0      	sbcs	r0, r4
 8000c9c:	4698      	mov	r8, r3
 8000c9e:	432f      	orrs	r7, r5
 8000ca0:	4338      	orrs	r0, r7
 8000ca2:	1a17      	subs	r7, r2, r0
 8000ca4:	42ba      	cmp	r2, r7
 8000ca6:	4192      	sbcs	r2, r2
 8000ca8:	4643      	mov	r3, r8
 8000caa:	4252      	negs	r2, r2
 8000cac:	1a99      	subs	r1, r3, r2
 8000cae:	4664      	mov	r4, ip
 8000cb0:	0035      	movs	r5, r6
 8000cb2:	e6ca      	b.n	8000a4a <__aeabi_dadd+0x62>
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	403a      	ands	r2, r7
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dadd+0x2d6>
 8000cbc:	e6f6      	b.n	8000aac <__aeabi_dadd+0xc4>
 8000cbe:	074b      	lsls	r3, r1, #29
 8000cc0:	08ca      	lsrs	r2, r1, #3
 8000cc2:	4948      	ldr	r1, [pc, #288]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000cc4:	08ff      	lsrs	r7, r7, #3
 8000cc6:	433b      	orrs	r3, r7
 8000cc8:	428d      	cmp	r5, r1
 8000cca:	d196      	bne.n	8000bfa <__aeabi_dadd+0x212>
 8000ccc:	0019      	movs	r1, r3
 8000cce:	4311      	orrs	r1, r2
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x2ec>
 8000cd2:	e19e      	b.n	8001012 <__aeabi_dadd+0x62a>
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0309      	lsls	r1, r1, #12
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	0312      	lsls	r2, r2, #12
 8000cdc:	0b12      	lsrs	r2, r2, #12
 8000cde:	4d41      	ldr	r5, [pc, #260]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000ce0:	e78f      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000ce2:	0015      	movs	r5, r2
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e78b      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_dadd+0x308>
 8000cee:	e0c7      	b.n	8000e80 <__aeabi_dadd+0x498>
 8000cf0:	1c6b      	adds	r3, r5, #1
 8000cf2:	055f      	lsls	r7, r3, #21
 8000cf4:	0d7f      	lsrs	r7, r7, #21
 8000cf6:	2f01      	cmp	r7, #1
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_dadd+0x314>
 8000cfa:	e0f1      	b.n	8000ee0 <__aeabi_dadd+0x4f8>
 8000cfc:	4d39      	ldr	r5, [pc, #228]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000cfe:	42ab      	cmp	r3, r5
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x31c>
 8000d02:	e0b9      	b.n	8000e78 <__aeabi_dadd+0x490>
 8000d04:	1885      	adds	r5, r0, r2
 8000d06:	000a      	movs	r2, r1
 8000d08:	4285      	cmp	r5, r0
 8000d0a:	4189      	sbcs	r1, r1
 8000d0c:	4442      	add	r2, r8
 8000d0e:	4249      	negs	r1, r1
 8000d10:	1851      	adds	r1, r2, r1
 8000d12:	2207      	movs	r2, #7
 8000d14:	07cf      	lsls	r7, r1, #31
 8000d16:	086d      	lsrs	r5, r5, #1
 8000d18:	432f      	orrs	r7, r5
 8000d1a:	0849      	lsrs	r1, r1, #1
 8000d1c:	403a      	ands	r2, r7
 8000d1e:	001d      	movs	r5, r3
 8000d20:	e6c2      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000d22:	2207      	movs	r2, #7
 8000d24:	4930      	ldr	r1, [pc, #192]	; (8000de8 <__aeabi_dadd+0x400>)
 8000d26:	1aed      	subs	r5, r5, r3
 8000d28:	4031      	ands	r1, r6
 8000d2a:	403a      	ands	r2, r7
 8000d2c:	e6bc      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000d2e:	003e      	movs	r6, r7
 8000d30:	3828      	subs	r0, #40	; 0x28
 8000d32:	4086      	lsls	r6, r0
 8000d34:	2700      	movs	r7, #0
 8000d36:	e69f      	b.n	8000a78 <__aeabi_dadd+0x90>
 8000d38:	0038      	movs	r0, r7
 8000d3a:	f001 fc61 	bl	8002600 <__clzsi2>
 8000d3e:	3020      	adds	r0, #32
 8000d40:	e68e      	b.n	8000a60 <__aeabi_dadd+0x78>
 8000d42:	4643      	mov	r3, r8
 8000d44:	4313      	orrs	r3, r2
 8000d46:	001f      	movs	r7, r3
 8000d48:	1e7a      	subs	r2, r7, #1
 8000d4a:	4197      	sbcs	r7, r2
 8000d4c:	1bc7      	subs	r7, r0, r7
 8000d4e:	42b8      	cmp	r0, r7
 8000d50:	4180      	sbcs	r0, r0
 8000d52:	4240      	negs	r0, r0
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	e678      	b.n	8000a4a <__aeabi_dadd+0x62>
 8000d58:	000e      	movs	r6, r1
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	4306      	orrs	r6, r0
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d161      	bne.n	8000e28 <__aeabi_dadd+0x440>
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d000      	beq.n	8000d6a <__aeabi_dadd+0x382>
 8000d68:	e0f4      	b.n	8000f54 <__aeabi_dadd+0x56c>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x388>
 8000d6e:	e11b      	b.n	8000fa8 <__aeabi_dadd+0x5c0>
 8000d70:	4664      	mov	r4, ip
 8000d72:	0039      	movs	r1, r7
 8000d74:	0010      	movs	r0, r2
 8000d76:	e739      	b.n	8000bec <__aeabi_dadd+0x204>
 8000d78:	4f1a      	ldr	r7, [pc, #104]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000d7a:	42bb      	cmp	r3, r7
 8000d7c:	d07a      	beq.n	8000e74 <__aeabi_dadd+0x48c>
 8000d7e:	0033      	movs	r3, r6
 8000d80:	e6ff      	b.n	8000b82 <__aeabi_dadd+0x19a>
 8000d82:	0030      	movs	r0, r6
 8000d84:	3d1f      	subs	r5, #31
 8000d86:	40e8      	lsrs	r0, r5
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d003      	beq.n	8000d94 <__aeabi_dadd+0x3ac>
 8000d8c:	2140      	movs	r1, #64	; 0x40
 8000d8e:	1acb      	subs	r3, r1, r3
 8000d90:	409e      	lsls	r6, r3
 8000d92:	4337      	orrs	r7, r6
 8000d94:	1e7b      	subs	r3, r7, #1
 8000d96:	419f      	sbcs	r7, r3
 8000d98:	2207      	movs	r2, #7
 8000d9a:	4307      	orrs	r7, r0
 8000d9c:	403a      	ands	r2, r7
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	e789      	b.n	8000cb8 <__aeabi_dadd+0x2d0>
 8000da4:	1a17      	subs	r7, r2, r0
 8000da6:	4643      	mov	r3, r8
 8000da8:	42ba      	cmp	r2, r7
 8000daa:	41b6      	sbcs	r6, r6
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	4276      	negs	r6, r6
 8000db0:	1b8e      	subs	r6, r1, r6
 8000db2:	4664      	mov	r4, ip
 8000db4:	e64e      	b.n	8000a54 <__aeabi_dadd+0x6c>
 8000db6:	2b1f      	cmp	r3, #31
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_dadd+0x3d4>
 8000dba:	e0ad      	b.n	8000f18 <__aeabi_dadd+0x530>
 8000dbc:	2620      	movs	r6, #32
 8000dbe:	4647      	mov	r7, r8
 8000dc0:	1af6      	subs	r6, r6, r3
 8000dc2:	40b7      	lsls	r7, r6
 8000dc4:	46b9      	mov	r9, r7
 8000dc6:	0017      	movs	r7, r2
 8000dc8:	46b2      	mov	sl, r6
 8000dca:	40df      	lsrs	r7, r3
 8000dcc:	464e      	mov	r6, r9
 8000dce:	433e      	orrs	r6, r7
 8000dd0:	0037      	movs	r7, r6
 8000dd2:	4656      	mov	r6, sl
 8000dd4:	40b2      	lsls	r2, r6
 8000dd6:	1e56      	subs	r6, r2, #1
 8000dd8:	41b2      	sbcs	r2, r6
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	4642      	mov	r2, r8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	1889      	adds	r1, r1, r2
 8000de2:	e6ae      	b.n	8000b42 <__aeabi_dadd+0x15a>
 8000de4:	000007ff 	.word	0x000007ff
 8000de8:	ff7fffff 	.word	0xff7fffff
 8000dec:	800fffff 	.word	0x800fffff
 8000df0:	2620      	movs	r6, #32
 8000df2:	4647      	mov	r7, r8
 8000df4:	1af6      	subs	r6, r6, r3
 8000df6:	40b7      	lsls	r7, r6
 8000df8:	46b9      	mov	r9, r7
 8000dfa:	0017      	movs	r7, r2
 8000dfc:	46b2      	mov	sl, r6
 8000dfe:	40df      	lsrs	r7, r3
 8000e00:	464e      	mov	r6, r9
 8000e02:	433e      	orrs	r6, r7
 8000e04:	0037      	movs	r7, r6
 8000e06:	4656      	mov	r6, sl
 8000e08:	40b2      	lsls	r2, r6
 8000e0a:	1e56      	subs	r6, r2, #1
 8000e0c:	41b2      	sbcs	r2, r6
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	4642      	mov	r2, r8
 8000e12:	40da      	lsrs	r2, r3
 8000e14:	1a89      	subs	r1, r1, r2
 8000e16:	e799      	b.n	8000d4c <__aeabi_dadd+0x364>
 8000e18:	4c7f      	ldr	r4, [pc, #508]	; (8001018 <__aeabi_dadd+0x630>)
 8000e1a:	42a6      	cmp	r6, r4
 8000e1c:	d05b      	beq.n	8000ed6 <__aeabi_dadd+0x4ee>
 8000e1e:	2480      	movs	r4, #128	; 0x80
 8000e20:	0424      	lsls	r4, r4, #16
 8000e22:	425b      	negs	r3, r3
 8000e24:	4321      	orrs	r1, r4
 8000e26:	e727      	b.n	8000c78 <__aeabi_dadd+0x290>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d10c      	bne.n	8000e46 <__aeabi_dadd+0x45e>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x44a>
 8000e30:	e0cb      	b.n	8000fca <__aeabi_dadd+0x5e2>
 8000e32:	4664      	mov	r4, ip
 8000e34:	0039      	movs	r1, r7
 8000e36:	0010      	movs	r0, r2
 8000e38:	4d77      	ldr	r5, [pc, #476]	; (8001018 <__aeabi_dadd+0x630>)
 8000e3a:	e6d7      	b.n	8000bec <__aeabi_dadd+0x204>
 8000e3c:	4f76      	ldr	r7, [pc, #472]	; (8001018 <__aeabi_dadd+0x630>)
 8000e3e:	42bb      	cmp	r3, r7
 8000e40:	d018      	beq.n	8000e74 <__aeabi_dadd+0x48c>
 8000e42:	0033      	movs	r3, r6
 8000e44:	e675      	b.n	8000b32 <__aeabi_dadd+0x14a>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d014      	beq.n	8000e74 <__aeabi_dadd+0x48c>
 8000e4a:	074b      	lsls	r3, r1, #29
 8000e4c:	08c0      	lsrs	r0, r0, #3
 8000e4e:	4318      	orrs	r0, r3
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	08c9      	lsrs	r1, r1, #3
 8000e54:	031b      	lsls	r3, r3, #12
 8000e56:	4219      	tst	r1, r3
 8000e58:	d007      	beq.n	8000e6a <__aeabi_dadd+0x482>
 8000e5a:	08fc      	lsrs	r4, r7, #3
 8000e5c:	421c      	tst	r4, r3
 8000e5e:	d104      	bne.n	8000e6a <__aeabi_dadd+0x482>
 8000e60:	0779      	lsls	r1, r7, #29
 8000e62:	08d0      	lsrs	r0, r2, #3
 8000e64:	4308      	orrs	r0, r1
 8000e66:	46e1      	mov	r9, ip
 8000e68:	0021      	movs	r1, r4
 8000e6a:	464c      	mov	r4, r9
 8000e6c:	0f42      	lsrs	r2, r0, #29
 8000e6e:	00c9      	lsls	r1, r1, #3
 8000e70:	4311      	orrs	r1, r2
 8000e72:	00c0      	lsls	r0, r0, #3
 8000e74:	4d68      	ldr	r5, [pc, #416]	; (8001018 <__aeabi_dadd+0x630>)
 8000e76:	e6b9      	b.n	8000bec <__aeabi_dadd+0x204>
 8000e78:	001d      	movs	r5, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e6c0      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d15b      	bne.n	8000f3c <__aeabi_dadd+0x554>
 8000e84:	000d      	movs	r5, r1
 8000e86:	4305      	orrs	r5, r0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dadd+0x4a4>
 8000e8a:	e6e2      	b.n	8000c52 <__aeabi_dadd+0x26a>
 8000e8c:	1c5d      	adds	r5, r3, #1
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_dadd+0x4aa>
 8000e90:	e0b0      	b.n	8000ff4 <__aeabi_dadd+0x60c>
 8000e92:	4d61      	ldr	r5, [pc, #388]	; (8001018 <__aeabi_dadd+0x630>)
 8000e94:	42ae      	cmp	r6, r5
 8000e96:	d01f      	beq.n	8000ed8 <__aeabi_dadd+0x4f0>
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	2b38      	cmp	r3, #56	; 0x38
 8000e9c:	dc71      	bgt.n	8000f82 <__aeabi_dadd+0x59a>
 8000e9e:	2b1f      	cmp	r3, #31
 8000ea0:	dd00      	ble.n	8000ea4 <__aeabi_dadd+0x4bc>
 8000ea2:	e096      	b.n	8000fd2 <__aeabi_dadd+0x5ea>
 8000ea4:	2520      	movs	r5, #32
 8000ea6:	000f      	movs	r7, r1
 8000ea8:	1aed      	subs	r5, r5, r3
 8000eaa:	40af      	lsls	r7, r5
 8000eac:	46b9      	mov	r9, r7
 8000eae:	0007      	movs	r7, r0
 8000eb0:	46aa      	mov	sl, r5
 8000eb2:	40df      	lsrs	r7, r3
 8000eb4:	464d      	mov	r5, r9
 8000eb6:	433d      	orrs	r5, r7
 8000eb8:	002f      	movs	r7, r5
 8000eba:	4655      	mov	r5, sl
 8000ebc:	40a8      	lsls	r0, r5
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	1e45      	subs	r5, r0, #1
 8000ec2:	41a8      	sbcs	r0, r5
 8000ec4:	4488      	add	r8, r1
 8000ec6:	4307      	orrs	r7, r0
 8000ec8:	18bf      	adds	r7, r7, r2
 8000eca:	4297      	cmp	r7, r2
 8000ecc:	4192      	sbcs	r2, r2
 8000ece:	4251      	negs	r1, r2
 8000ed0:	4441      	add	r1, r8
 8000ed2:	0035      	movs	r5, r6
 8000ed4:	e63a      	b.n	8000b4c <__aeabi_dadd+0x164>
 8000ed6:	4664      	mov	r4, ip
 8000ed8:	0035      	movs	r5, r6
 8000eda:	4641      	mov	r1, r8
 8000edc:	0010      	movs	r0, r2
 8000ede:	e685      	b.n	8000bec <__aeabi_dadd+0x204>
 8000ee0:	000b      	movs	r3, r1
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x502>
 8000ee8:	e663      	b.n	8000bb2 <__aeabi_dadd+0x1ca>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f5      	beq.n	8000eda <__aeabi_dadd+0x4f2>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x50e>
 8000ef4:	e67a      	b.n	8000bec <__aeabi_dadd+0x204>
 8000ef6:	1887      	adds	r7, r0, r2
 8000ef8:	4287      	cmp	r7, r0
 8000efa:	4180      	sbcs	r0, r0
 8000efc:	2207      	movs	r2, #7
 8000efe:	4441      	add	r1, r8
 8000f00:	4240      	negs	r0, r0
 8000f02:	1809      	adds	r1, r1, r0
 8000f04:	403a      	ands	r2, r7
 8000f06:	020b      	lsls	r3, r1, #8
 8000f08:	d400      	bmi.n	8000f0c <__aeabi_dadd+0x524>
 8000f0a:	e6d5      	b.n	8000cb8 <__aeabi_dadd+0x2d0>
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <__aeabi_dadd+0x634>)
 8000f0e:	3501      	adds	r5, #1
 8000f10:	4019      	ands	r1, r3
 8000f12:	e5c9      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000f14:	0038      	movs	r0, r7
 8000f16:	e669      	b.n	8000bec <__aeabi_dadd+0x204>
 8000f18:	001e      	movs	r6, r3
 8000f1a:	4647      	mov	r7, r8
 8000f1c:	3e20      	subs	r6, #32
 8000f1e:	40f7      	lsrs	r7, r6
 8000f20:	46bc      	mov	ip, r7
 8000f22:	2b20      	cmp	r3, #32
 8000f24:	d004      	beq.n	8000f30 <__aeabi_dadd+0x548>
 8000f26:	2640      	movs	r6, #64	; 0x40
 8000f28:	1af3      	subs	r3, r6, r3
 8000f2a:	4646      	mov	r6, r8
 8000f2c:	409e      	lsls	r6, r3
 8000f2e:	4332      	orrs	r2, r6
 8000f30:	0017      	movs	r7, r2
 8000f32:	4663      	mov	r3, ip
 8000f34:	1e7a      	subs	r2, r7, #1
 8000f36:	4197      	sbcs	r7, r2
 8000f38:	431f      	orrs	r7, r3
 8000f3a:	e602      	b.n	8000b42 <__aeabi_dadd+0x15a>
 8000f3c:	4d36      	ldr	r5, [pc, #216]	; (8001018 <__aeabi_dadd+0x630>)
 8000f3e:	42ae      	cmp	r6, r5
 8000f40:	d0ca      	beq.n	8000ed8 <__aeabi_dadd+0x4f0>
 8000f42:	2580      	movs	r5, #128	; 0x80
 8000f44:	042d      	lsls	r5, r5, #16
 8000f46:	425b      	negs	r3, r3
 8000f48:	4329      	orrs	r1, r5
 8000f4a:	e7a6      	b.n	8000e9a <__aeabi_dadd+0x4b2>
 8000f4c:	4308      	orrs	r0, r1
 8000f4e:	1e41      	subs	r1, r0, #1
 8000f50:	4188      	sbcs	r0, r1
 8000f52:	e6a6      	b.n	8000ca2 <__aeabi_dadd+0x2ba>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dadd+0x572>
 8000f58:	e648      	b.n	8000bec <__aeabi_dadd+0x204>
 8000f5a:	1a87      	subs	r7, r0, r2
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	42b8      	cmp	r0, r7
 8000f60:	41b6      	sbcs	r6, r6
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	4276      	negs	r6, r6
 8000f66:	1b9e      	subs	r6, r3, r6
 8000f68:	0233      	lsls	r3, r6, #8
 8000f6a:	d54b      	bpl.n	8001004 <__aeabi_dadd+0x61c>
 8000f6c:	1a17      	subs	r7, r2, r0
 8000f6e:	4643      	mov	r3, r8
 8000f70:	42ba      	cmp	r2, r7
 8000f72:	4192      	sbcs	r2, r2
 8000f74:	1a59      	subs	r1, r3, r1
 8000f76:	4252      	negs	r2, r2
 8000f78:	1a89      	subs	r1, r1, r2
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	4664      	mov	r4, ip
 8000f7e:	403a      	ands	r2, r7
 8000f80:	e592      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000f82:	4301      	orrs	r1, r0
 8000f84:	000f      	movs	r7, r1
 8000f86:	1e79      	subs	r1, r7, #1
 8000f88:	418f      	sbcs	r7, r1
 8000f8a:	e79d      	b.n	8000ec8 <__aeabi_dadd+0x4e0>
 8000f8c:	001c      	movs	r4, r3
 8000f8e:	000f      	movs	r7, r1
 8000f90:	3c20      	subs	r4, #32
 8000f92:	40e7      	lsrs	r7, r4
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	d003      	beq.n	8000fa0 <__aeabi_dadd+0x5b8>
 8000f98:	2440      	movs	r4, #64	; 0x40
 8000f9a:	1ae3      	subs	r3, r4, r3
 8000f9c:	4099      	lsls	r1, r3
 8000f9e:	4308      	orrs	r0, r1
 8000fa0:	1e41      	subs	r1, r0, #1
 8000fa2:	4188      	sbcs	r0, r1
 8000fa4:	4338      	orrs	r0, r7
 8000fa6:	e67c      	b.n	8000ca2 <__aeabi_dadd+0x2ba>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2400      	movs	r4, #0
 8000fac:	e625      	b.n	8000bfa <__aeabi_dadd+0x212>
 8000fae:	1a17      	subs	r7, r2, r0
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	42ba      	cmp	r2, r7
 8000fb4:	4192      	sbcs	r2, r2
 8000fb6:	1a59      	subs	r1, r3, r1
 8000fb8:	4252      	negs	r2, r2
 8000fba:	1a89      	subs	r1, r1, r2
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	0035      	movs	r5, r6
 8000fc0:	e543      	b.n	8000a4a <__aeabi_dadd+0x62>
 8000fc2:	4641      	mov	r1, r8
 8000fc4:	0010      	movs	r0, r2
 8000fc6:	4d14      	ldr	r5, [pc, #80]	; (8001018 <__aeabi_dadd+0x630>)
 8000fc8:	e610      	b.n	8000bec <__aeabi_dadd+0x204>
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	2400      	movs	r4, #0
 8000fce:	0312      	lsls	r2, r2, #12
 8000fd0:	e680      	b.n	8000cd4 <__aeabi_dadd+0x2ec>
 8000fd2:	001d      	movs	r5, r3
 8000fd4:	000f      	movs	r7, r1
 8000fd6:	3d20      	subs	r5, #32
 8000fd8:	40ef      	lsrs	r7, r5
 8000fda:	46bc      	mov	ip, r7
 8000fdc:	2b20      	cmp	r3, #32
 8000fde:	d003      	beq.n	8000fe8 <__aeabi_dadd+0x600>
 8000fe0:	2540      	movs	r5, #64	; 0x40
 8000fe2:	1aeb      	subs	r3, r5, r3
 8000fe4:	4099      	lsls	r1, r3
 8000fe6:	4308      	orrs	r0, r1
 8000fe8:	0007      	movs	r7, r0
 8000fea:	4663      	mov	r3, ip
 8000fec:	1e78      	subs	r0, r7, #1
 8000fee:	4187      	sbcs	r7, r0
 8000ff0:	431f      	orrs	r7, r3
 8000ff2:	e769      	b.n	8000ec8 <__aeabi_dadd+0x4e0>
 8000ff4:	1887      	adds	r7, r0, r2
 8000ff6:	4297      	cmp	r7, r2
 8000ff8:	419b      	sbcs	r3, r3
 8000ffa:	4441      	add	r1, r8
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	18c9      	adds	r1, r1, r3
 8001000:	0035      	movs	r5, r6
 8001002:	e5a3      	b.n	8000b4c <__aeabi_dadd+0x164>
 8001004:	003b      	movs	r3, r7
 8001006:	4333      	orrs	r3, r6
 8001008:	d0ce      	beq.n	8000fa8 <__aeabi_dadd+0x5c0>
 800100a:	2207      	movs	r2, #7
 800100c:	0031      	movs	r1, r6
 800100e:	403a      	ands	r2, r7
 8001010:	e652      	b.n	8000cb8 <__aeabi_dadd+0x2d0>
 8001012:	2300      	movs	r3, #0
 8001014:	001a      	movs	r2, r3
 8001016:	e5f4      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8001018:	000007ff 	.word	0x000007ff
 800101c:	ff7fffff 	.word	0xff7fffff

08001020 <__aeabi_ddiv>:
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	4657      	mov	r7, sl
 8001024:	46de      	mov	lr, fp
 8001026:	464e      	mov	r6, r9
 8001028:	4645      	mov	r5, r8
 800102a:	b5e0      	push	{r5, r6, r7, lr}
 800102c:	4683      	mov	fp, r0
 800102e:	0007      	movs	r7, r0
 8001030:	030e      	lsls	r6, r1, #12
 8001032:	0048      	lsls	r0, r1, #1
 8001034:	b085      	sub	sp, #20
 8001036:	4692      	mov	sl, r2
 8001038:	001c      	movs	r4, r3
 800103a:	0b36      	lsrs	r6, r6, #12
 800103c:	0d40      	lsrs	r0, r0, #21
 800103e:	0fcd      	lsrs	r5, r1, #31
 8001040:	2800      	cmp	r0, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x26>
 8001044:	e09d      	b.n	8001182 <__aeabi_ddiv+0x162>
 8001046:	4b95      	ldr	r3, [pc, #596]	; (800129c <__aeabi_ddiv+0x27c>)
 8001048:	4298      	cmp	r0, r3
 800104a:	d039      	beq.n	80010c0 <__aeabi_ddiv+0xa0>
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	00f6      	lsls	r6, r6, #3
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	431e      	orrs	r6, r3
 8001054:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <__aeabi_ddiv+0x280>)
 8001056:	0f7b      	lsrs	r3, r7, #29
 8001058:	4333      	orrs	r3, r6
 800105a:	4699      	mov	r9, r3
 800105c:	4694      	mov	ip, r2
 800105e:	0003      	movs	r3, r0
 8001060:	4463      	add	r3, ip
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2600      	movs	r6, #0
 8001068:	00ff      	lsls	r7, r7, #3
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	0323      	lsls	r3, r4, #12
 800106e:	0b1b      	lsrs	r3, r3, #12
 8001070:	4698      	mov	r8, r3
 8001072:	0063      	lsls	r3, r4, #1
 8001074:	0fe4      	lsrs	r4, r4, #31
 8001076:	4652      	mov	r2, sl
 8001078:	0d5b      	lsrs	r3, r3, #21
 800107a:	9401      	str	r4, [sp, #4]
 800107c:	d100      	bne.n	8001080 <__aeabi_ddiv+0x60>
 800107e:	e0b3      	b.n	80011e8 <__aeabi_ddiv+0x1c8>
 8001080:	4986      	ldr	r1, [pc, #536]	; (800129c <__aeabi_ddiv+0x27c>)
 8001082:	428b      	cmp	r3, r1
 8001084:	d100      	bne.n	8001088 <__aeabi_ddiv+0x68>
 8001086:	e09e      	b.n	80011c6 <__aeabi_ddiv+0x1a6>
 8001088:	4642      	mov	r2, r8
 800108a:	00d1      	lsls	r1, r2, #3
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0412      	lsls	r2, r2, #16
 8001090:	430a      	orrs	r2, r1
 8001092:	4651      	mov	r1, sl
 8001094:	0f49      	lsrs	r1, r1, #29
 8001096:	4311      	orrs	r1, r2
 8001098:	468b      	mov	fp, r1
 800109a:	4981      	ldr	r1, [pc, #516]	; (80012a0 <__aeabi_ddiv+0x280>)
 800109c:	4652      	mov	r2, sl
 800109e:	468c      	mov	ip, r1
 80010a0:	9900      	ldr	r1, [sp, #0]
 80010a2:	4463      	add	r3, ip
 80010a4:	1acb      	subs	r3, r1, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	002b      	movs	r3, r5
 80010ae:	4063      	eors	r3, r4
 80010b0:	469a      	mov	sl, r3
 80010b2:	2e0f      	cmp	r6, #15
 80010b4:	d900      	bls.n	80010b8 <__aeabi_ddiv+0x98>
 80010b6:	e105      	b.n	80012c4 <__aeabi_ddiv+0x2a4>
 80010b8:	4b7a      	ldr	r3, [pc, #488]	; (80012a4 <__aeabi_ddiv+0x284>)
 80010ba:	00b6      	lsls	r6, r6, #2
 80010bc:	599b      	ldr	r3, [r3, r6]
 80010be:	469f      	mov	pc, r3
 80010c0:	465b      	mov	r3, fp
 80010c2:	4333      	orrs	r3, r6
 80010c4:	4699      	mov	r9, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_ddiv+0xaa>
 80010c8:	e0b8      	b.n	800123c <__aeabi_ddiv+0x21c>
 80010ca:	2302      	movs	r3, #2
 80010cc:	2608      	movs	r6, #8
 80010ce:	2700      	movs	r7, #0
 80010d0:	9000      	str	r0, [sp, #0]
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	e7ca      	b.n	800106c <__aeabi_ddiv+0x4c>
 80010d6:	46cb      	mov	fp, r9
 80010d8:	003a      	movs	r2, r7
 80010da:	9902      	ldr	r1, [sp, #8]
 80010dc:	9501      	str	r5, [sp, #4]
 80010de:	9b01      	ldr	r3, [sp, #4]
 80010e0:	469a      	mov	sl, r3
 80010e2:	2902      	cmp	r1, #2
 80010e4:	d027      	beq.n	8001136 <__aeabi_ddiv+0x116>
 80010e6:	2903      	cmp	r1, #3
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0xcc>
 80010ea:	e280      	b.n	80015ee <__aeabi_ddiv+0x5ce>
 80010ec:	2901      	cmp	r1, #1
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x15a>
 80010f0:	496d      	ldr	r1, [pc, #436]	; (80012a8 <__aeabi_ddiv+0x288>)
 80010f2:	9b00      	ldr	r3, [sp, #0]
 80010f4:	468c      	mov	ip, r1
 80010f6:	4463      	add	r3, ip
 80010f8:	001c      	movs	r4, r3
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	dd38      	ble.n	8001170 <__aeabi_ddiv+0x150>
 80010fe:	0753      	lsls	r3, r2, #29
 8001100:	d000      	beq.n	8001104 <__aeabi_ddiv+0xe4>
 8001102:	e213      	b.n	800152c <__aeabi_ddiv+0x50c>
 8001104:	08d2      	lsrs	r2, r2, #3
 8001106:	465b      	mov	r3, fp
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	d509      	bpl.n	8001120 <__aeabi_ddiv+0x100>
 800110c:	4659      	mov	r1, fp
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <__aeabi_ddiv+0x28c>)
 8001110:	4019      	ands	r1, r3
 8001112:	468b      	mov	fp, r1
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	00c9      	lsls	r1, r1, #3
 8001118:	468c      	mov	ip, r1
 800111a:	9b00      	ldr	r3, [sp, #0]
 800111c:	4463      	add	r3, ip
 800111e:	001c      	movs	r4, r3
 8001120:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <__aeabi_ddiv+0x290>)
 8001122:	429c      	cmp	r4, r3
 8001124:	dc07      	bgt.n	8001136 <__aeabi_ddiv+0x116>
 8001126:	465b      	mov	r3, fp
 8001128:	0564      	lsls	r4, r4, #21
 800112a:	075f      	lsls	r7, r3, #29
 800112c:	025b      	lsls	r3, r3, #9
 800112e:	4317      	orrs	r7, r2
 8001130:	0b1b      	lsrs	r3, r3, #12
 8001132:	0d62      	lsrs	r2, r4, #21
 8001134:	e002      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001136:	2300      	movs	r3, #0
 8001138:	2700      	movs	r7, #0
 800113a:	4a58      	ldr	r2, [pc, #352]	; (800129c <__aeabi_ddiv+0x27c>)
 800113c:	2100      	movs	r1, #0
 800113e:	031b      	lsls	r3, r3, #12
 8001140:	0b1c      	lsrs	r4, r3, #12
 8001142:	0d0b      	lsrs	r3, r1, #20
 8001144:	051b      	lsls	r3, r3, #20
 8001146:	4323      	orrs	r3, r4
 8001148:	0514      	lsls	r4, r2, #20
 800114a:	4a5a      	ldr	r2, [pc, #360]	; (80012b4 <__aeabi_ddiv+0x294>)
 800114c:	0038      	movs	r0, r7
 800114e:	4013      	ands	r3, r2
 8001150:	431c      	orrs	r4, r3
 8001152:	4653      	mov	r3, sl
 8001154:	0064      	lsls	r4, r4, #1
 8001156:	07db      	lsls	r3, r3, #31
 8001158:	0864      	lsrs	r4, r4, #1
 800115a:	431c      	orrs	r4, r3
 800115c:	0021      	movs	r1, r4
 800115e:	b005      	add	sp, #20
 8001160:	bc3c      	pop	{r2, r3, r4, r5}
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	46a2      	mov	sl, r4
 8001168:	46ab      	mov	fp, r5
 800116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116c:	2201      	movs	r2, #1
 800116e:	4252      	negs	r2, r2
 8001170:	2301      	movs	r3, #1
 8001172:	1b1b      	subs	r3, r3, r4
 8001174:	2b38      	cmp	r3, #56	; 0x38
 8001176:	dc00      	bgt.n	800117a <__aeabi_ddiv+0x15a>
 8001178:	e1ad      	b.n	80014d6 <__aeabi_ddiv+0x4b6>
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	2700      	movs	r7, #0
 8001180:	e7dc      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001182:	465b      	mov	r3, fp
 8001184:	4333      	orrs	r3, r6
 8001186:	4699      	mov	r9, r3
 8001188:	d05e      	beq.n	8001248 <__aeabi_ddiv+0x228>
 800118a:	2e00      	cmp	r6, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_ddiv+0x170>
 800118e:	e18a      	b.n	80014a6 <__aeabi_ddiv+0x486>
 8001190:	0030      	movs	r0, r6
 8001192:	f001 fa35 	bl	8002600 <__clzsi2>
 8001196:	0003      	movs	r3, r0
 8001198:	3b0b      	subs	r3, #11
 800119a:	2b1c      	cmp	r3, #28
 800119c:	dd00      	ble.n	80011a0 <__aeabi_ddiv+0x180>
 800119e:	e17b      	b.n	8001498 <__aeabi_ddiv+0x478>
 80011a0:	221d      	movs	r2, #29
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	465a      	mov	r2, fp
 80011a6:	0001      	movs	r1, r0
 80011a8:	40da      	lsrs	r2, r3
 80011aa:	3908      	subs	r1, #8
 80011ac:	408e      	lsls	r6, r1
 80011ae:	0013      	movs	r3, r2
 80011b0:	465f      	mov	r7, fp
 80011b2:	4333      	orrs	r3, r6
 80011b4:	4699      	mov	r9, r3
 80011b6:	408f      	lsls	r7, r1
 80011b8:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <__aeabi_ddiv+0x298>)
 80011ba:	2600      	movs	r6, #0
 80011bc:	1a1b      	subs	r3, r3, r0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	e752      	b.n	800106c <__aeabi_ddiv+0x4c>
 80011c6:	4641      	mov	r1, r8
 80011c8:	4653      	mov	r3, sl
 80011ca:	430b      	orrs	r3, r1
 80011cc:	493b      	ldr	r1, [pc, #236]	; (80012bc <__aeabi_ddiv+0x29c>)
 80011ce:	469b      	mov	fp, r3
 80011d0:	468c      	mov	ip, r1
 80011d2:	9b00      	ldr	r3, [sp, #0]
 80011d4:	4463      	add	r3, ip
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	465b      	mov	r3, fp
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d13b      	bne.n	8001256 <__aeabi_ddiv+0x236>
 80011de:	2302      	movs	r3, #2
 80011e0:	2200      	movs	r2, #0
 80011e2:	431e      	orrs	r6, r3
 80011e4:	2102      	movs	r1, #2
 80011e6:	e761      	b.n	80010ac <__aeabi_ddiv+0x8c>
 80011e8:	4643      	mov	r3, r8
 80011ea:	4313      	orrs	r3, r2
 80011ec:	469b      	mov	fp, r3
 80011ee:	d037      	beq.n	8001260 <__aeabi_ddiv+0x240>
 80011f0:	4643      	mov	r3, r8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x1d8>
 80011f6:	e162      	b.n	80014be <__aeabi_ddiv+0x49e>
 80011f8:	4640      	mov	r0, r8
 80011fa:	f001 fa01 	bl	8002600 <__clzsi2>
 80011fe:	0003      	movs	r3, r0
 8001200:	3b0b      	subs	r3, #11
 8001202:	2b1c      	cmp	r3, #28
 8001204:	dd00      	ble.n	8001208 <__aeabi_ddiv+0x1e8>
 8001206:	e153      	b.n	80014b0 <__aeabi_ddiv+0x490>
 8001208:	0002      	movs	r2, r0
 800120a:	4641      	mov	r1, r8
 800120c:	3a08      	subs	r2, #8
 800120e:	4091      	lsls	r1, r2
 8001210:	4688      	mov	r8, r1
 8001212:	211d      	movs	r1, #29
 8001214:	1acb      	subs	r3, r1, r3
 8001216:	4651      	mov	r1, sl
 8001218:	40d9      	lsrs	r1, r3
 800121a:	000b      	movs	r3, r1
 800121c:	4641      	mov	r1, r8
 800121e:	430b      	orrs	r3, r1
 8001220:	469b      	mov	fp, r3
 8001222:	4653      	mov	r3, sl
 8001224:	4093      	lsls	r3, r2
 8001226:	001a      	movs	r2, r3
 8001228:	9b00      	ldr	r3, [sp, #0]
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <__aeabi_ddiv+0x2a0>)
 800122c:	469c      	mov	ip, r3
 800122e:	4460      	add	r0, ip
 8001230:	0003      	movs	r3, r0
 8001232:	468c      	mov	ip, r1
 8001234:	4463      	add	r3, ip
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2100      	movs	r1, #0
 800123a:	e737      	b.n	80010ac <__aeabi_ddiv+0x8c>
 800123c:	2303      	movs	r3, #3
 800123e:	46b1      	mov	r9, r6
 8001240:	9000      	str	r0, [sp, #0]
 8001242:	260c      	movs	r6, #12
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	e711      	b.n	800106c <__aeabi_ddiv+0x4c>
 8001248:	2300      	movs	r3, #0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	2604      	movs	r6, #4
 8001250:	2700      	movs	r7, #0
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	e70a      	b.n	800106c <__aeabi_ddiv+0x4c>
 8001256:	2303      	movs	r3, #3
 8001258:	46c3      	mov	fp, r8
 800125a:	431e      	orrs	r6, r3
 800125c:	2103      	movs	r1, #3
 800125e:	e725      	b.n	80010ac <__aeabi_ddiv+0x8c>
 8001260:	3301      	adds	r3, #1
 8001262:	431e      	orrs	r6, r3
 8001264:	2200      	movs	r2, #0
 8001266:	2101      	movs	r1, #1
 8001268:	e720      	b.n	80010ac <__aeabi_ddiv+0x8c>
 800126a:	2300      	movs	r3, #0
 800126c:	469a      	mov	sl, r3
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	2700      	movs	r7, #0
 8001272:	031b      	lsls	r3, r3, #12
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <__aeabi_ddiv+0x27c>)
 8001276:	e761      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	4649      	mov	r1, r9
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	4219      	tst	r1, r3
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x264>
 8001282:	e0e2      	b.n	800144a <__aeabi_ddiv+0x42a>
 8001284:	4659      	mov	r1, fp
 8001286:	4219      	tst	r1, r3
 8001288:	d000      	beq.n	800128c <__aeabi_ddiv+0x26c>
 800128a:	e0de      	b.n	800144a <__aeabi_ddiv+0x42a>
 800128c:	430b      	orrs	r3, r1
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	0017      	movs	r7, r2
 8001292:	0b1b      	lsrs	r3, r3, #12
 8001294:	46a2      	mov	sl, r4
 8001296:	4a01      	ldr	r2, [pc, #4]	; (800129c <__aeabi_ddiv+0x27c>)
 8001298:	e750      	b.n	800113c <__aeabi_ddiv+0x11c>
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	000007ff 	.word	0x000007ff
 80012a0:	fffffc01 	.word	0xfffffc01
 80012a4:	08008218 	.word	0x08008218
 80012a8:	000003ff 	.word	0x000003ff
 80012ac:	feffffff 	.word	0xfeffffff
 80012b0:	000007fe 	.word	0x000007fe
 80012b4:	800fffff 	.word	0x800fffff
 80012b8:	fffffc0d 	.word	0xfffffc0d
 80012bc:	fffff801 	.word	0xfffff801
 80012c0:	000003f3 	.word	0x000003f3
 80012c4:	45d9      	cmp	r9, fp
 80012c6:	d900      	bls.n	80012ca <__aeabi_ddiv+0x2aa>
 80012c8:	e0cb      	b.n	8001462 <__aeabi_ddiv+0x442>
 80012ca:	d100      	bne.n	80012ce <__aeabi_ddiv+0x2ae>
 80012cc:	e0c6      	b.n	800145c <__aeabi_ddiv+0x43c>
 80012ce:	003c      	movs	r4, r7
 80012d0:	4648      	mov	r0, r9
 80012d2:	2700      	movs	r7, #0
 80012d4:	9b00      	ldr	r3, [sp, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	465b      	mov	r3, fp
 80012dc:	0e16      	lsrs	r6, r2, #24
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	431e      	orrs	r6, r3
 80012e2:	0213      	lsls	r3, r2, #8
 80012e4:	4698      	mov	r8, r3
 80012e6:	0433      	lsls	r3, r6, #16
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	4699      	mov	r9, r3
 80012ec:	0c31      	lsrs	r1, r6, #16
 80012ee:	9101      	str	r1, [sp, #4]
 80012f0:	f7fe ff90 	bl	8000214 <__aeabi_uidivmod>
 80012f4:	464a      	mov	r2, r9
 80012f6:	4342      	muls	r2, r0
 80012f8:	040b      	lsls	r3, r1, #16
 80012fa:	0c21      	lsrs	r1, r4, #16
 80012fc:	0005      	movs	r5, r0
 80012fe:	4319      	orrs	r1, r3
 8001300:	428a      	cmp	r2, r1
 8001302:	d907      	bls.n	8001314 <__aeabi_ddiv+0x2f4>
 8001304:	1989      	adds	r1, r1, r6
 8001306:	3d01      	subs	r5, #1
 8001308:	428e      	cmp	r6, r1
 800130a:	d803      	bhi.n	8001314 <__aeabi_ddiv+0x2f4>
 800130c:	428a      	cmp	r2, r1
 800130e:	d901      	bls.n	8001314 <__aeabi_ddiv+0x2f4>
 8001310:	1e85      	subs	r5, r0, #2
 8001312:	1989      	adds	r1, r1, r6
 8001314:	1a88      	subs	r0, r1, r2
 8001316:	9901      	ldr	r1, [sp, #4]
 8001318:	f7fe ff7c 	bl	8000214 <__aeabi_uidivmod>
 800131c:	0409      	lsls	r1, r1, #16
 800131e:	468c      	mov	ip, r1
 8001320:	464a      	mov	r2, r9
 8001322:	0421      	lsls	r1, r4, #16
 8001324:	4664      	mov	r4, ip
 8001326:	4342      	muls	r2, r0
 8001328:	0c09      	lsrs	r1, r1, #16
 800132a:	0003      	movs	r3, r0
 800132c:	4321      	orrs	r1, r4
 800132e:	428a      	cmp	r2, r1
 8001330:	d904      	bls.n	800133c <__aeabi_ddiv+0x31c>
 8001332:	1989      	adds	r1, r1, r6
 8001334:	3b01      	subs	r3, #1
 8001336:	428e      	cmp	r6, r1
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x31c>
 800133a:	e0f1      	b.n	8001520 <__aeabi_ddiv+0x500>
 800133c:	042d      	lsls	r5, r5, #16
 800133e:	431d      	orrs	r5, r3
 8001340:	46ab      	mov	fp, r5
 8001342:	4643      	mov	r3, r8
 8001344:	1a89      	subs	r1, r1, r2
 8001346:	4642      	mov	r2, r8
 8001348:	0c28      	lsrs	r0, r5, #16
 800134a:	0412      	lsls	r2, r2, #16
 800134c:	0c1d      	lsrs	r5, r3, #16
 800134e:	465b      	mov	r3, fp
 8001350:	0c14      	lsrs	r4, r2, #16
 8001352:	0022      	movs	r2, r4
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	0c1b      	lsrs	r3, r3, #16
 8001358:	435a      	muls	r2, r3
 800135a:	9403      	str	r4, [sp, #12]
 800135c:	436b      	muls	r3, r5
 800135e:	4344      	muls	r4, r0
 8001360:	9502      	str	r5, [sp, #8]
 8001362:	4368      	muls	r0, r5
 8001364:	191b      	adds	r3, r3, r4
 8001366:	0c15      	lsrs	r5, r2, #16
 8001368:	18eb      	adds	r3, r5, r3
 800136a:	429c      	cmp	r4, r3
 800136c:	d903      	bls.n	8001376 <__aeabi_ddiv+0x356>
 800136e:	2480      	movs	r4, #128	; 0x80
 8001370:	0264      	lsls	r4, r4, #9
 8001372:	46a4      	mov	ip, r4
 8001374:	4460      	add	r0, ip
 8001376:	0c1c      	lsrs	r4, r3, #16
 8001378:	0415      	lsls	r5, r2, #16
 800137a:	041b      	lsls	r3, r3, #16
 800137c:	0c2d      	lsrs	r5, r5, #16
 800137e:	1820      	adds	r0, r4, r0
 8001380:	195d      	adds	r5, r3, r5
 8001382:	4281      	cmp	r1, r0
 8001384:	d377      	bcc.n	8001476 <__aeabi_ddiv+0x456>
 8001386:	d073      	beq.n	8001470 <__aeabi_ddiv+0x450>
 8001388:	1a0c      	subs	r4, r1, r0
 800138a:	4aa2      	ldr	r2, [pc, #648]	; (8001614 <__aeabi_ddiv+0x5f4>)
 800138c:	1b7d      	subs	r5, r7, r5
 800138e:	42af      	cmp	r7, r5
 8001390:	41bf      	sbcs	r7, r7
 8001392:	4694      	mov	ip, r2
 8001394:	9b00      	ldr	r3, [sp, #0]
 8001396:	427f      	negs	r7, r7
 8001398:	4463      	add	r3, ip
 800139a:	1be0      	subs	r0, r4, r7
 800139c:	001c      	movs	r4, r3
 800139e:	4286      	cmp	r6, r0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_ddiv+0x384>
 80013a2:	e0db      	b.n	800155c <__aeabi_ddiv+0x53c>
 80013a4:	9901      	ldr	r1, [sp, #4]
 80013a6:	f7fe ff35 	bl	8000214 <__aeabi_uidivmod>
 80013aa:	464a      	mov	r2, r9
 80013ac:	4342      	muls	r2, r0
 80013ae:	040b      	lsls	r3, r1, #16
 80013b0:	0c29      	lsrs	r1, r5, #16
 80013b2:	0007      	movs	r7, r0
 80013b4:	4319      	orrs	r1, r3
 80013b6:	428a      	cmp	r2, r1
 80013b8:	d907      	bls.n	80013ca <__aeabi_ddiv+0x3aa>
 80013ba:	1989      	adds	r1, r1, r6
 80013bc:	3f01      	subs	r7, #1
 80013be:	428e      	cmp	r6, r1
 80013c0:	d803      	bhi.n	80013ca <__aeabi_ddiv+0x3aa>
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d901      	bls.n	80013ca <__aeabi_ddiv+0x3aa>
 80013c6:	1e87      	subs	r7, r0, #2
 80013c8:	1989      	adds	r1, r1, r6
 80013ca:	1a88      	subs	r0, r1, r2
 80013cc:	9901      	ldr	r1, [sp, #4]
 80013ce:	f7fe ff21 	bl	8000214 <__aeabi_uidivmod>
 80013d2:	0409      	lsls	r1, r1, #16
 80013d4:	464a      	mov	r2, r9
 80013d6:	4689      	mov	r9, r1
 80013d8:	0429      	lsls	r1, r5, #16
 80013da:	464d      	mov	r5, r9
 80013dc:	4342      	muls	r2, r0
 80013de:	0c09      	lsrs	r1, r1, #16
 80013e0:	0003      	movs	r3, r0
 80013e2:	4329      	orrs	r1, r5
 80013e4:	428a      	cmp	r2, r1
 80013e6:	d907      	bls.n	80013f8 <__aeabi_ddiv+0x3d8>
 80013e8:	1989      	adds	r1, r1, r6
 80013ea:	3b01      	subs	r3, #1
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d803      	bhi.n	80013f8 <__aeabi_ddiv+0x3d8>
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d901      	bls.n	80013f8 <__aeabi_ddiv+0x3d8>
 80013f4:	1e83      	subs	r3, r0, #2
 80013f6:	1989      	adds	r1, r1, r6
 80013f8:	043f      	lsls	r7, r7, #16
 80013fa:	1a89      	subs	r1, r1, r2
 80013fc:	003a      	movs	r2, r7
 80013fe:	9f03      	ldr	r7, [sp, #12]
 8001400:	431a      	orrs	r2, r3
 8001402:	0038      	movs	r0, r7
 8001404:	0413      	lsls	r3, r2, #16
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	4358      	muls	r0, r3
 800140a:	4681      	mov	r9, r0
 800140c:	9802      	ldr	r0, [sp, #8]
 800140e:	0c15      	lsrs	r5, r2, #16
 8001410:	436f      	muls	r7, r5
 8001412:	4343      	muls	r3, r0
 8001414:	4345      	muls	r5, r0
 8001416:	4648      	mov	r0, r9
 8001418:	0c00      	lsrs	r0, r0, #16
 800141a:	4684      	mov	ip, r0
 800141c:	19db      	adds	r3, r3, r7
 800141e:	4463      	add	r3, ip
 8001420:	429f      	cmp	r7, r3
 8001422:	d903      	bls.n	800142c <__aeabi_ddiv+0x40c>
 8001424:	2080      	movs	r0, #128	; 0x80
 8001426:	0240      	lsls	r0, r0, #9
 8001428:	4684      	mov	ip, r0
 800142a:	4465      	add	r5, ip
 800142c:	4648      	mov	r0, r9
 800142e:	0c1f      	lsrs	r7, r3, #16
 8001430:	0400      	lsls	r0, r0, #16
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	0c00      	lsrs	r0, r0, #16
 8001436:	197d      	adds	r5, r7, r5
 8001438:	1818      	adds	r0, r3, r0
 800143a:	42a9      	cmp	r1, r5
 800143c:	d200      	bcs.n	8001440 <__aeabi_ddiv+0x420>
 800143e:	e084      	b.n	800154a <__aeabi_ddiv+0x52a>
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x424>
 8001442:	e07f      	b.n	8001544 <__aeabi_ddiv+0x524>
 8001444:	2301      	movs	r3, #1
 8001446:	431a      	orrs	r2, r3
 8001448:	e657      	b.n	80010fa <__aeabi_ddiv+0xda>
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	464a      	mov	r2, r9
 800144e:	031b      	lsls	r3, r3, #12
 8001450:	4313      	orrs	r3, r2
 8001452:	031b      	lsls	r3, r3, #12
 8001454:	0b1b      	lsrs	r3, r3, #12
 8001456:	46aa      	mov	sl, r5
 8001458:	4a6f      	ldr	r2, [pc, #444]	; (8001618 <__aeabi_ddiv+0x5f8>)
 800145a:	e66f      	b.n	800113c <__aeabi_ddiv+0x11c>
 800145c:	42ba      	cmp	r2, r7
 800145e:	d900      	bls.n	8001462 <__aeabi_ddiv+0x442>
 8001460:	e735      	b.n	80012ce <__aeabi_ddiv+0x2ae>
 8001462:	464b      	mov	r3, r9
 8001464:	07dc      	lsls	r4, r3, #31
 8001466:	0858      	lsrs	r0, r3, #1
 8001468:	087b      	lsrs	r3, r7, #1
 800146a:	431c      	orrs	r4, r3
 800146c:	07ff      	lsls	r7, r7, #31
 800146e:	e734      	b.n	80012da <__aeabi_ddiv+0x2ba>
 8001470:	2400      	movs	r4, #0
 8001472:	42af      	cmp	r7, r5
 8001474:	d289      	bcs.n	800138a <__aeabi_ddiv+0x36a>
 8001476:	4447      	add	r7, r8
 8001478:	4547      	cmp	r7, r8
 800147a:	41a4      	sbcs	r4, r4
 800147c:	465b      	mov	r3, fp
 800147e:	4264      	negs	r4, r4
 8001480:	19a4      	adds	r4, r4, r6
 8001482:	1864      	adds	r4, r4, r1
 8001484:	3b01      	subs	r3, #1
 8001486:	42a6      	cmp	r6, r4
 8001488:	d21e      	bcs.n	80014c8 <__aeabi_ddiv+0x4a8>
 800148a:	42a0      	cmp	r0, r4
 800148c:	d86d      	bhi.n	800156a <__aeabi_ddiv+0x54a>
 800148e:	d100      	bne.n	8001492 <__aeabi_ddiv+0x472>
 8001490:	e0b6      	b.n	8001600 <__aeabi_ddiv+0x5e0>
 8001492:	1a24      	subs	r4, r4, r0
 8001494:	469b      	mov	fp, r3
 8001496:	e778      	b.n	800138a <__aeabi_ddiv+0x36a>
 8001498:	0003      	movs	r3, r0
 800149a:	465a      	mov	r2, fp
 800149c:	3b28      	subs	r3, #40	; 0x28
 800149e:	409a      	lsls	r2, r3
 80014a0:	2700      	movs	r7, #0
 80014a2:	4691      	mov	r9, r2
 80014a4:	e688      	b.n	80011b8 <__aeabi_ddiv+0x198>
 80014a6:	4658      	mov	r0, fp
 80014a8:	f001 f8aa 	bl	8002600 <__clzsi2>
 80014ac:	3020      	adds	r0, #32
 80014ae:	e672      	b.n	8001196 <__aeabi_ddiv+0x176>
 80014b0:	0003      	movs	r3, r0
 80014b2:	4652      	mov	r2, sl
 80014b4:	3b28      	subs	r3, #40	; 0x28
 80014b6:	409a      	lsls	r2, r3
 80014b8:	4693      	mov	fp, r2
 80014ba:	2200      	movs	r2, #0
 80014bc:	e6b4      	b.n	8001228 <__aeabi_ddiv+0x208>
 80014be:	4650      	mov	r0, sl
 80014c0:	f001 f89e 	bl	8002600 <__clzsi2>
 80014c4:	3020      	adds	r0, #32
 80014c6:	e69a      	b.n	80011fe <__aeabi_ddiv+0x1de>
 80014c8:	42a6      	cmp	r6, r4
 80014ca:	d1e2      	bne.n	8001492 <__aeabi_ddiv+0x472>
 80014cc:	45b8      	cmp	r8, r7
 80014ce:	d9dc      	bls.n	800148a <__aeabi_ddiv+0x46a>
 80014d0:	1a34      	subs	r4, r6, r0
 80014d2:	469b      	mov	fp, r3
 80014d4:	e759      	b.n	800138a <__aeabi_ddiv+0x36a>
 80014d6:	2b1f      	cmp	r3, #31
 80014d8:	dc65      	bgt.n	80015a6 <__aeabi_ddiv+0x586>
 80014da:	4c50      	ldr	r4, [pc, #320]	; (800161c <__aeabi_ddiv+0x5fc>)
 80014dc:	9900      	ldr	r1, [sp, #0]
 80014de:	46a4      	mov	ip, r4
 80014e0:	465c      	mov	r4, fp
 80014e2:	4461      	add	r1, ip
 80014e4:	0008      	movs	r0, r1
 80014e6:	408c      	lsls	r4, r1
 80014e8:	0011      	movs	r1, r2
 80014ea:	4082      	lsls	r2, r0
 80014ec:	40d9      	lsrs	r1, r3
 80014ee:	1e50      	subs	r0, r2, #1
 80014f0:	4182      	sbcs	r2, r0
 80014f2:	430c      	orrs	r4, r1
 80014f4:	4314      	orrs	r4, r2
 80014f6:	465a      	mov	r2, fp
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	0762      	lsls	r2, r4, #29
 80014fe:	d009      	beq.n	8001514 <__aeabi_ddiv+0x4f4>
 8001500:	220f      	movs	r2, #15
 8001502:	4022      	ands	r2, r4
 8001504:	2a04      	cmp	r2, #4
 8001506:	d005      	beq.n	8001514 <__aeabi_ddiv+0x4f4>
 8001508:	0022      	movs	r2, r4
 800150a:	1d14      	adds	r4, r2, #4
 800150c:	4294      	cmp	r4, r2
 800150e:	4189      	sbcs	r1, r1
 8001510:	4249      	negs	r1, r1
 8001512:	185b      	adds	r3, r3, r1
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	d562      	bpl.n	80015de <__aeabi_ddiv+0x5be>
 8001518:	2201      	movs	r2, #1
 800151a:	2300      	movs	r3, #0
 800151c:	2700      	movs	r7, #0
 800151e:	e60d      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001520:	428a      	cmp	r2, r1
 8001522:	d800      	bhi.n	8001526 <__aeabi_ddiv+0x506>
 8001524:	e70a      	b.n	800133c <__aeabi_ddiv+0x31c>
 8001526:	1e83      	subs	r3, r0, #2
 8001528:	1989      	adds	r1, r1, r6
 800152a:	e707      	b.n	800133c <__aeabi_ddiv+0x31c>
 800152c:	230f      	movs	r3, #15
 800152e:	4013      	ands	r3, r2
 8001530:	2b04      	cmp	r3, #4
 8001532:	d100      	bne.n	8001536 <__aeabi_ddiv+0x516>
 8001534:	e5e6      	b.n	8001104 <__aeabi_ddiv+0xe4>
 8001536:	1d17      	adds	r7, r2, #4
 8001538:	4297      	cmp	r7, r2
 800153a:	4192      	sbcs	r2, r2
 800153c:	4253      	negs	r3, r2
 800153e:	449b      	add	fp, r3
 8001540:	08fa      	lsrs	r2, r7, #3
 8001542:	e5e0      	b.n	8001106 <__aeabi_ddiv+0xe6>
 8001544:	2800      	cmp	r0, #0
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0x52a>
 8001548:	e5d7      	b.n	80010fa <__aeabi_ddiv+0xda>
 800154a:	1871      	adds	r1, r6, r1
 800154c:	1e53      	subs	r3, r2, #1
 800154e:	42b1      	cmp	r1, r6
 8001550:	d327      	bcc.n	80015a2 <__aeabi_ddiv+0x582>
 8001552:	42a9      	cmp	r1, r5
 8001554:	d315      	bcc.n	8001582 <__aeabi_ddiv+0x562>
 8001556:	d058      	beq.n	800160a <__aeabi_ddiv+0x5ea>
 8001558:	001a      	movs	r2, r3
 800155a:	e773      	b.n	8001444 <__aeabi_ddiv+0x424>
 800155c:	2b00      	cmp	r3, #0
 800155e:	dc00      	bgt.n	8001562 <__aeabi_ddiv+0x542>
 8001560:	e604      	b.n	800116c <__aeabi_ddiv+0x14c>
 8001562:	2301      	movs	r3, #1
 8001564:	2200      	movs	r2, #0
 8001566:	449b      	add	fp, r3
 8001568:	e5cd      	b.n	8001106 <__aeabi_ddiv+0xe6>
 800156a:	2302      	movs	r3, #2
 800156c:	4447      	add	r7, r8
 800156e:	4547      	cmp	r7, r8
 8001570:	4189      	sbcs	r1, r1
 8001572:	425b      	negs	r3, r3
 8001574:	469c      	mov	ip, r3
 8001576:	4249      	negs	r1, r1
 8001578:	1989      	adds	r1, r1, r6
 800157a:	190c      	adds	r4, r1, r4
 800157c:	44e3      	add	fp, ip
 800157e:	1a24      	subs	r4, r4, r0
 8001580:	e703      	b.n	800138a <__aeabi_ddiv+0x36a>
 8001582:	4643      	mov	r3, r8
 8001584:	005f      	lsls	r7, r3, #1
 8001586:	4547      	cmp	r7, r8
 8001588:	419b      	sbcs	r3, r3
 800158a:	46b8      	mov	r8, r7
 800158c:	425b      	negs	r3, r3
 800158e:	199e      	adds	r6, r3, r6
 8001590:	3a02      	subs	r2, #2
 8001592:	1989      	adds	r1, r1, r6
 8001594:	42a9      	cmp	r1, r5
 8001596:	d000      	beq.n	800159a <__aeabi_ddiv+0x57a>
 8001598:	e754      	b.n	8001444 <__aeabi_ddiv+0x424>
 800159a:	4540      	cmp	r0, r8
 800159c:	d000      	beq.n	80015a0 <__aeabi_ddiv+0x580>
 800159e:	e751      	b.n	8001444 <__aeabi_ddiv+0x424>
 80015a0:	e5ab      	b.n	80010fa <__aeabi_ddiv+0xda>
 80015a2:	001a      	movs	r2, r3
 80015a4:	e7f6      	b.n	8001594 <__aeabi_ddiv+0x574>
 80015a6:	211f      	movs	r1, #31
 80015a8:	465f      	mov	r7, fp
 80015aa:	4249      	negs	r1, r1
 80015ac:	1b0c      	subs	r4, r1, r4
 80015ae:	40e7      	lsrs	r7, r4
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d007      	beq.n	80015c4 <__aeabi_ddiv+0x5a4>
 80015b4:	491a      	ldr	r1, [pc, #104]	; (8001620 <__aeabi_ddiv+0x600>)
 80015b6:	9b00      	ldr	r3, [sp, #0]
 80015b8:	468c      	mov	ip, r1
 80015ba:	4463      	add	r3, ip
 80015bc:	0018      	movs	r0, r3
 80015be:	465b      	mov	r3, fp
 80015c0:	4083      	lsls	r3, r0
 80015c2:	431a      	orrs	r2, r3
 80015c4:	1e50      	subs	r0, r2, #1
 80015c6:	4182      	sbcs	r2, r0
 80015c8:	433a      	orrs	r2, r7
 80015ca:	2707      	movs	r7, #7
 80015cc:	2300      	movs	r3, #0
 80015ce:	4017      	ands	r7, r2
 80015d0:	d009      	beq.n	80015e6 <__aeabi_ddiv+0x5c6>
 80015d2:	210f      	movs	r1, #15
 80015d4:	2300      	movs	r3, #0
 80015d6:	4011      	ands	r1, r2
 80015d8:	0014      	movs	r4, r2
 80015da:	2904      	cmp	r1, #4
 80015dc:	d195      	bne.n	800150a <__aeabi_ddiv+0x4ea>
 80015de:	0022      	movs	r2, r4
 80015e0:	075f      	lsls	r7, r3, #29
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	0b1b      	lsrs	r3, r3, #12
 80015e6:	08d2      	lsrs	r2, r2, #3
 80015e8:	4317      	orrs	r7, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	e5a6      	b.n	800113c <__aeabi_ddiv+0x11c>
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	4659      	mov	r1, fp
 80015f2:	031b      	lsls	r3, r3, #12
 80015f4:	430b      	orrs	r3, r1
 80015f6:	031b      	lsls	r3, r3, #12
 80015f8:	0017      	movs	r7, r2
 80015fa:	0b1b      	lsrs	r3, r3, #12
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <__aeabi_ddiv+0x5f8>)
 80015fe:	e59d      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001600:	42bd      	cmp	r5, r7
 8001602:	d8b2      	bhi.n	800156a <__aeabi_ddiv+0x54a>
 8001604:	469b      	mov	fp, r3
 8001606:	2400      	movs	r4, #0
 8001608:	e6bf      	b.n	800138a <__aeabi_ddiv+0x36a>
 800160a:	4580      	cmp	r8, r0
 800160c:	d3b9      	bcc.n	8001582 <__aeabi_ddiv+0x562>
 800160e:	001a      	movs	r2, r3
 8001610:	e7c3      	b.n	800159a <__aeabi_ddiv+0x57a>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000003ff 	.word	0x000003ff
 8001618:	000007ff 	.word	0x000007ff
 800161c:	0000041e 	.word	0x0000041e
 8001620:	0000043e 	.word	0x0000043e

08001624 <__eqdf2>:
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	464f      	mov	r7, r9
 8001628:	4646      	mov	r6, r8
 800162a:	46d6      	mov	lr, sl
 800162c:	4684      	mov	ip, r0
 800162e:	b5c0      	push	{r6, r7, lr}
 8001630:	4680      	mov	r8, r0
 8001632:	4e19      	ldr	r6, [pc, #100]	; (8001698 <__eqdf2+0x74>)
 8001634:	0318      	lsls	r0, r3, #12
 8001636:	030f      	lsls	r7, r1, #12
 8001638:	004d      	lsls	r5, r1, #1
 800163a:	0b00      	lsrs	r0, r0, #12
 800163c:	005c      	lsls	r4, r3, #1
 800163e:	4682      	mov	sl, r0
 8001640:	0b3f      	lsrs	r7, r7, #12
 8001642:	0d6d      	lsrs	r5, r5, #21
 8001644:	0fc9      	lsrs	r1, r1, #31
 8001646:	4691      	mov	r9, r2
 8001648:	0d64      	lsrs	r4, r4, #21
 800164a:	0fdb      	lsrs	r3, r3, #31
 800164c:	2001      	movs	r0, #1
 800164e:	42b5      	cmp	r5, r6
 8001650:	d00a      	beq.n	8001668 <__eqdf2+0x44>
 8001652:	42b4      	cmp	r4, r6
 8001654:	d003      	beq.n	800165e <__eqdf2+0x3a>
 8001656:	42a5      	cmp	r5, r4
 8001658:	d101      	bne.n	800165e <__eqdf2+0x3a>
 800165a:	4557      	cmp	r7, sl
 800165c:	d00c      	beq.n	8001678 <__eqdf2+0x54>
 800165e:	bc1c      	pop	{r2, r3, r4}
 8001660:	4690      	mov	r8, r2
 8001662:	4699      	mov	r9, r3
 8001664:	46a2      	mov	sl, r4
 8001666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001668:	4666      	mov	r6, ip
 800166a:	433e      	orrs	r6, r7
 800166c:	d1f7      	bne.n	800165e <__eqdf2+0x3a>
 800166e:	42ac      	cmp	r4, r5
 8001670:	d1f5      	bne.n	800165e <__eqdf2+0x3a>
 8001672:	4654      	mov	r4, sl
 8001674:	4314      	orrs	r4, r2
 8001676:	d1f2      	bne.n	800165e <__eqdf2+0x3a>
 8001678:	2001      	movs	r0, #1
 800167a:	45c8      	cmp	r8, r9
 800167c:	d1ef      	bne.n	800165e <__eqdf2+0x3a>
 800167e:	4299      	cmp	r1, r3
 8001680:	d007      	beq.n	8001692 <__eqdf2+0x6e>
 8001682:	2d00      	cmp	r5, #0
 8001684:	d1eb      	bne.n	800165e <__eqdf2+0x3a>
 8001686:	4663      	mov	r3, ip
 8001688:	431f      	orrs	r7, r3
 800168a:	0038      	movs	r0, r7
 800168c:	1e47      	subs	r7, r0, #1
 800168e:	41b8      	sbcs	r0, r7
 8001690:	e7e5      	b.n	800165e <__eqdf2+0x3a>
 8001692:	2000      	movs	r0, #0
 8001694:	e7e3      	b.n	800165e <__eqdf2+0x3a>
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	000007ff 	.word	0x000007ff

0800169c <__gedf2>:
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	464f      	mov	r7, r9
 80016a0:	4646      	mov	r6, r8
 80016a2:	46d6      	mov	lr, sl
 80016a4:	004d      	lsls	r5, r1, #1
 80016a6:	b5c0      	push	{r6, r7, lr}
 80016a8:	030e      	lsls	r6, r1, #12
 80016aa:	0fc9      	lsrs	r1, r1, #31
 80016ac:	468a      	mov	sl, r1
 80016ae:	492c      	ldr	r1, [pc, #176]	; (8001760 <__gedf2+0xc4>)
 80016b0:	031f      	lsls	r7, r3, #12
 80016b2:	005c      	lsls	r4, r3, #1
 80016b4:	4680      	mov	r8, r0
 80016b6:	0b36      	lsrs	r6, r6, #12
 80016b8:	0d6d      	lsrs	r5, r5, #21
 80016ba:	4691      	mov	r9, r2
 80016bc:	0b3f      	lsrs	r7, r7, #12
 80016be:	0d64      	lsrs	r4, r4, #21
 80016c0:	0fdb      	lsrs	r3, r3, #31
 80016c2:	428d      	cmp	r5, r1
 80016c4:	d01e      	beq.n	8001704 <__gedf2+0x68>
 80016c6:	428c      	cmp	r4, r1
 80016c8:	d016      	beq.n	80016f8 <__gedf2+0x5c>
 80016ca:	2d00      	cmp	r5, #0
 80016cc:	d11e      	bne.n	800170c <__gedf2+0x70>
 80016ce:	4330      	orrs	r0, r6
 80016d0:	4684      	mov	ip, r0
 80016d2:	2c00      	cmp	r4, #0
 80016d4:	d101      	bne.n	80016da <__gedf2+0x3e>
 80016d6:	433a      	orrs	r2, r7
 80016d8:	d023      	beq.n	8001722 <__gedf2+0x86>
 80016da:	4662      	mov	r2, ip
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d01a      	beq.n	8001716 <__gedf2+0x7a>
 80016e0:	459a      	cmp	sl, r3
 80016e2:	d029      	beq.n	8001738 <__gedf2+0x9c>
 80016e4:	4651      	mov	r1, sl
 80016e6:	2002      	movs	r0, #2
 80016e8:	3901      	subs	r1, #1
 80016ea:	4008      	ands	r0, r1
 80016ec:	3801      	subs	r0, #1
 80016ee:	bc1c      	pop	{r2, r3, r4}
 80016f0:	4690      	mov	r8, r2
 80016f2:	4699      	mov	r9, r3
 80016f4:	46a2      	mov	sl, r4
 80016f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f8:	0039      	movs	r1, r7
 80016fa:	4311      	orrs	r1, r2
 80016fc:	d0e5      	beq.n	80016ca <__gedf2+0x2e>
 80016fe:	2002      	movs	r0, #2
 8001700:	4240      	negs	r0, r0
 8001702:	e7f4      	b.n	80016ee <__gedf2+0x52>
 8001704:	4330      	orrs	r0, r6
 8001706:	d1fa      	bne.n	80016fe <__gedf2+0x62>
 8001708:	42ac      	cmp	r4, r5
 800170a:	d00f      	beq.n	800172c <__gedf2+0x90>
 800170c:	2c00      	cmp	r4, #0
 800170e:	d10f      	bne.n	8001730 <__gedf2+0x94>
 8001710:	433a      	orrs	r2, r7
 8001712:	d0e7      	beq.n	80016e4 <__gedf2+0x48>
 8001714:	e00c      	b.n	8001730 <__gedf2+0x94>
 8001716:	2201      	movs	r2, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	4393      	bics	r3, r2
 800171c:	0018      	movs	r0, r3
 800171e:	3001      	adds	r0, #1
 8001720:	e7e5      	b.n	80016ee <__gedf2+0x52>
 8001722:	4663      	mov	r3, ip
 8001724:	2000      	movs	r0, #0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0e1      	beq.n	80016ee <__gedf2+0x52>
 800172a:	e7db      	b.n	80016e4 <__gedf2+0x48>
 800172c:	433a      	orrs	r2, r7
 800172e:	d1e6      	bne.n	80016fe <__gedf2+0x62>
 8001730:	459a      	cmp	sl, r3
 8001732:	d1d7      	bne.n	80016e4 <__gedf2+0x48>
 8001734:	42a5      	cmp	r5, r4
 8001736:	dcd5      	bgt.n	80016e4 <__gedf2+0x48>
 8001738:	42a5      	cmp	r5, r4
 800173a:	db05      	blt.n	8001748 <__gedf2+0xac>
 800173c:	42be      	cmp	r6, r7
 800173e:	d8d1      	bhi.n	80016e4 <__gedf2+0x48>
 8001740:	d008      	beq.n	8001754 <__gedf2+0xb8>
 8001742:	2000      	movs	r0, #0
 8001744:	42be      	cmp	r6, r7
 8001746:	d2d2      	bcs.n	80016ee <__gedf2+0x52>
 8001748:	4650      	mov	r0, sl
 800174a:	2301      	movs	r3, #1
 800174c:	3801      	subs	r0, #1
 800174e:	4398      	bics	r0, r3
 8001750:	3001      	adds	r0, #1
 8001752:	e7cc      	b.n	80016ee <__gedf2+0x52>
 8001754:	45c8      	cmp	r8, r9
 8001756:	d8c5      	bhi.n	80016e4 <__gedf2+0x48>
 8001758:	2000      	movs	r0, #0
 800175a:	45c8      	cmp	r8, r9
 800175c:	d3f4      	bcc.n	8001748 <__gedf2+0xac>
 800175e:	e7c6      	b.n	80016ee <__gedf2+0x52>
 8001760:	000007ff 	.word	0x000007ff

08001764 <__ledf2>:
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	464f      	mov	r7, r9
 8001768:	4646      	mov	r6, r8
 800176a:	46d6      	mov	lr, sl
 800176c:	004d      	lsls	r5, r1, #1
 800176e:	b5c0      	push	{r6, r7, lr}
 8001770:	030e      	lsls	r6, r1, #12
 8001772:	0fc9      	lsrs	r1, r1, #31
 8001774:	468a      	mov	sl, r1
 8001776:	492e      	ldr	r1, [pc, #184]	; (8001830 <__ledf2+0xcc>)
 8001778:	031f      	lsls	r7, r3, #12
 800177a:	005c      	lsls	r4, r3, #1
 800177c:	4680      	mov	r8, r0
 800177e:	0b36      	lsrs	r6, r6, #12
 8001780:	0d6d      	lsrs	r5, r5, #21
 8001782:	4691      	mov	r9, r2
 8001784:	0b3f      	lsrs	r7, r7, #12
 8001786:	0d64      	lsrs	r4, r4, #21
 8001788:	0fdb      	lsrs	r3, r3, #31
 800178a:	428d      	cmp	r5, r1
 800178c:	d018      	beq.n	80017c0 <__ledf2+0x5c>
 800178e:	428c      	cmp	r4, r1
 8001790:	d011      	beq.n	80017b6 <__ledf2+0x52>
 8001792:	2d00      	cmp	r5, #0
 8001794:	d118      	bne.n	80017c8 <__ledf2+0x64>
 8001796:	4330      	orrs	r0, r6
 8001798:	4684      	mov	ip, r0
 800179a:	2c00      	cmp	r4, #0
 800179c:	d11e      	bne.n	80017dc <__ledf2+0x78>
 800179e:	433a      	orrs	r2, r7
 80017a0:	d11c      	bne.n	80017dc <__ledf2+0x78>
 80017a2:	4663      	mov	r3, ip
 80017a4:	2000      	movs	r0, #0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d030      	beq.n	800180c <__ledf2+0xa8>
 80017aa:	4651      	mov	r1, sl
 80017ac:	2002      	movs	r0, #2
 80017ae:	3901      	subs	r1, #1
 80017b0:	4008      	ands	r0, r1
 80017b2:	3801      	subs	r0, #1
 80017b4:	e02a      	b.n	800180c <__ledf2+0xa8>
 80017b6:	0039      	movs	r1, r7
 80017b8:	4311      	orrs	r1, r2
 80017ba:	d0ea      	beq.n	8001792 <__ledf2+0x2e>
 80017bc:	2002      	movs	r0, #2
 80017be:	e025      	b.n	800180c <__ledf2+0xa8>
 80017c0:	4330      	orrs	r0, r6
 80017c2:	d1fb      	bne.n	80017bc <__ledf2+0x58>
 80017c4:	42ac      	cmp	r4, r5
 80017c6:	d026      	beq.n	8001816 <__ledf2+0xb2>
 80017c8:	2c00      	cmp	r4, #0
 80017ca:	d126      	bne.n	800181a <__ledf2+0xb6>
 80017cc:	433a      	orrs	r2, r7
 80017ce:	d124      	bne.n	800181a <__ledf2+0xb6>
 80017d0:	4651      	mov	r1, sl
 80017d2:	2002      	movs	r0, #2
 80017d4:	3901      	subs	r1, #1
 80017d6:	4008      	ands	r0, r1
 80017d8:	3801      	subs	r0, #1
 80017da:	e017      	b.n	800180c <__ledf2+0xa8>
 80017dc:	4662      	mov	r2, ip
 80017de:	2a00      	cmp	r2, #0
 80017e0:	d00f      	beq.n	8001802 <__ledf2+0x9e>
 80017e2:	459a      	cmp	sl, r3
 80017e4:	d1e1      	bne.n	80017aa <__ledf2+0x46>
 80017e6:	42a5      	cmp	r5, r4
 80017e8:	db05      	blt.n	80017f6 <__ledf2+0x92>
 80017ea:	42be      	cmp	r6, r7
 80017ec:	d8dd      	bhi.n	80017aa <__ledf2+0x46>
 80017ee:	d019      	beq.n	8001824 <__ledf2+0xc0>
 80017f0:	2000      	movs	r0, #0
 80017f2:	42be      	cmp	r6, r7
 80017f4:	d20a      	bcs.n	800180c <__ledf2+0xa8>
 80017f6:	4650      	mov	r0, sl
 80017f8:	2301      	movs	r3, #1
 80017fa:	3801      	subs	r0, #1
 80017fc:	4398      	bics	r0, r3
 80017fe:	3001      	adds	r0, #1
 8001800:	e004      	b.n	800180c <__ledf2+0xa8>
 8001802:	2201      	movs	r2, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	4393      	bics	r3, r2
 8001808:	0018      	movs	r0, r3
 800180a:	3001      	adds	r0, #1
 800180c:	bc1c      	pop	{r2, r3, r4}
 800180e:	4690      	mov	r8, r2
 8001810:	4699      	mov	r9, r3
 8001812:	46a2      	mov	sl, r4
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001816:	433a      	orrs	r2, r7
 8001818:	d1d0      	bne.n	80017bc <__ledf2+0x58>
 800181a:	459a      	cmp	sl, r3
 800181c:	d1c5      	bne.n	80017aa <__ledf2+0x46>
 800181e:	42a5      	cmp	r5, r4
 8001820:	dcc3      	bgt.n	80017aa <__ledf2+0x46>
 8001822:	e7e0      	b.n	80017e6 <__ledf2+0x82>
 8001824:	45c8      	cmp	r8, r9
 8001826:	d8c0      	bhi.n	80017aa <__ledf2+0x46>
 8001828:	2000      	movs	r0, #0
 800182a:	45c8      	cmp	r8, r9
 800182c:	d3e3      	bcc.n	80017f6 <__ledf2+0x92>
 800182e:	e7ed      	b.n	800180c <__ledf2+0xa8>
 8001830:	000007ff 	.word	0x000007ff

08001834 <__aeabi_dmul>:
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	4657      	mov	r7, sl
 8001838:	46de      	mov	lr, fp
 800183a:	464e      	mov	r6, r9
 800183c:	4645      	mov	r5, r8
 800183e:	b5e0      	push	{r5, r6, r7, lr}
 8001840:	4683      	mov	fp, r0
 8001842:	0006      	movs	r6, r0
 8001844:	030f      	lsls	r7, r1, #12
 8001846:	0048      	lsls	r0, r1, #1
 8001848:	b087      	sub	sp, #28
 800184a:	4692      	mov	sl, r2
 800184c:	001d      	movs	r5, r3
 800184e:	0b3f      	lsrs	r7, r7, #12
 8001850:	0d40      	lsrs	r0, r0, #21
 8001852:	0fcc      	lsrs	r4, r1, #31
 8001854:	2800      	cmp	r0, #0
 8001856:	d100      	bne.n	800185a <__aeabi_dmul+0x26>
 8001858:	e06f      	b.n	800193a <__aeabi_dmul+0x106>
 800185a:	4bde      	ldr	r3, [pc, #888]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 800185c:	4298      	cmp	r0, r3
 800185e:	d038      	beq.n	80018d2 <__aeabi_dmul+0x9e>
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	00ff      	lsls	r7, r7, #3
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	431f      	orrs	r7, r3
 8001868:	0f73      	lsrs	r3, r6, #29
 800186a:	433b      	orrs	r3, r7
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	4bda      	ldr	r3, [pc, #872]	; (8001bd8 <__aeabi_dmul+0x3a4>)
 8001870:	2700      	movs	r7, #0
 8001872:	4699      	mov	r9, r3
 8001874:	2300      	movs	r3, #0
 8001876:	469b      	mov	fp, r3
 8001878:	00f6      	lsls	r6, r6, #3
 800187a:	4481      	add	r9, r0
 800187c:	032b      	lsls	r3, r5, #12
 800187e:	0069      	lsls	r1, r5, #1
 8001880:	0b1b      	lsrs	r3, r3, #12
 8001882:	4652      	mov	r2, sl
 8001884:	4698      	mov	r8, r3
 8001886:	0d49      	lsrs	r1, r1, #21
 8001888:	0fed      	lsrs	r5, r5, #31
 800188a:	2900      	cmp	r1, #0
 800188c:	d100      	bne.n	8001890 <__aeabi_dmul+0x5c>
 800188e:	e085      	b.n	800199c <__aeabi_dmul+0x168>
 8001890:	4bd0      	ldr	r3, [pc, #832]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 8001892:	4299      	cmp	r1, r3
 8001894:	d100      	bne.n	8001898 <__aeabi_dmul+0x64>
 8001896:	e073      	b.n	8001980 <__aeabi_dmul+0x14c>
 8001898:	4643      	mov	r3, r8
 800189a:	00da      	lsls	r2, r3, #3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	4313      	orrs	r3, r2
 80018a2:	4652      	mov	r2, sl
 80018a4:	48cc      	ldr	r0, [pc, #816]	; (8001bd8 <__aeabi_dmul+0x3a4>)
 80018a6:	0f52      	lsrs	r2, r2, #29
 80018a8:	4684      	mov	ip, r0
 80018aa:	4313      	orrs	r3, r2
 80018ac:	4652      	mov	r2, sl
 80018ae:	2000      	movs	r0, #0
 80018b0:	4461      	add	r1, ip
 80018b2:	00d2      	lsls	r2, r2, #3
 80018b4:	4489      	add	r9, r1
 80018b6:	0021      	movs	r1, r4
 80018b8:	4069      	eors	r1, r5
 80018ba:	9100      	str	r1, [sp, #0]
 80018bc:	468c      	mov	ip, r1
 80018be:	2101      	movs	r1, #1
 80018c0:	4449      	add	r1, r9
 80018c2:	468a      	mov	sl, r1
 80018c4:	2f0f      	cmp	r7, #15
 80018c6:	d900      	bls.n	80018ca <__aeabi_dmul+0x96>
 80018c8:	e090      	b.n	80019ec <__aeabi_dmul+0x1b8>
 80018ca:	49c4      	ldr	r1, [pc, #784]	; (8001bdc <__aeabi_dmul+0x3a8>)
 80018cc:	00bf      	lsls	r7, r7, #2
 80018ce:	59cf      	ldr	r7, [r1, r7]
 80018d0:	46bf      	mov	pc, r7
 80018d2:	465b      	mov	r3, fp
 80018d4:	433b      	orrs	r3, r7
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	d000      	beq.n	80018dc <__aeabi_dmul+0xa8>
 80018da:	e16a      	b.n	8001bb2 <__aeabi_dmul+0x37e>
 80018dc:	2302      	movs	r3, #2
 80018de:	2708      	movs	r7, #8
 80018e0:	2600      	movs	r6, #0
 80018e2:	4681      	mov	r9, r0
 80018e4:	469b      	mov	fp, r3
 80018e6:	e7c9      	b.n	800187c <__aeabi_dmul+0x48>
 80018e8:	0032      	movs	r2, r6
 80018ea:	4658      	mov	r0, fp
 80018ec:	9b01      	ldr	r3, [sp, #4]
 80018ee:	4661      	mov	r1, ip
 80018f0:	9100      	str	r1, [sp, #0]
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dmul+0xc4>
 80018f6:	e075      	b.n	80019e4 <__aeabi_dmul+0x1b0>
 80018f8:	2803      	cmp	r0, #3
 80018fa:	d100      	bne.n	80018fe <__aeabi_dmul+0xca>
 80018fc:	e1fe      	b.n	8001cfc <__aeabi_dmul+0x4c8>
 80018fe:	2801      	cmp	r0, #1
 8001900:	d000      	beq.n	8001904 <__aeabi_dmul+0xd0>
 8001902:	e12c      	b.n	8001b5e <__aeabi_dmul+0x32a>
 8001904:	2300      	movs	r3, #0
 8001906:	2700      	movs	r7, #0
 8001908:	2600      	movs	r6, #0
 800190a:	2500      	movs	r5, #0
 800190c:	033f      	lsls	r7, r7, #12
 800190e:	0d2a      	lsrs	r2, r5, #20
 8001910:	0b3f      	lsrs	r7, r7, #12
 8001912:	48b3      	ldr	r0, [pc, #716]	; (8001be0 <__aeabi_dmul+0x3ac>)
 8001914:	0512      	lsls	r2, r2, #20
 8001916:	433a      	orrs	r2, r7
 8001918:	4002      	ands	r2, r0
 800191a:	051b      	lsls	r3, r3, #20
 800191c:	4313      	orrs	r3, r2
 800191e:	9a00      	ldr	r2, [sp, #0]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	07d1      	lsls	r1, r2, #31
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	430b      	orrs	r3, r1
 8001928:	0030      	movs	r0, r6
 800192a:	0019      	movs	r1, r3
 800192c:	b007      	add	sp, #28
 800192e:	bc3c      	pop	{r2, r3, r4, r5}
 8001930:	4690      	mov	r8, r2
 8001932:	4699      	mov	r9, r3
 8001934:	46a2      	mov	sl, r4
 8001936:	46ab      	mov	fp, r5
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193a:	465b      	mov	r3, fp
 800193c:	433b      	orrs	r3, r7
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	d100      	bne.n	8001944 <__aeabi_dmul+0x110>
 8001942:	e12f      	b.n	8001ba4 <__aeabi_dmul+0x370>
 8001944:	2f00      	cmp	r7, #0
 8001946:	d100      	bne.n	800194a <__aeabi_dmul+0x116>
 8001948:	e1a5      	b.n	8001c96 <__aeabi_dmul+0x462>
 800194a:	0038      	movs	r0, r7
 800194c:	f000 fe58 	bl	8002600 <__clzsi2>
 8001950:	0003      	movs	r3, r0
 8001952:	3b0b      	subs	r3, #11
 8001954:	2b1c      	cmp	r3, #28
 8001956:	dd00      	ble.n	800195a <__aeabi_dmul+0x126>
 8001958:	e196      	b.n	8001c88 <__aeabi_dmul+0x454>
 800195a:	221d      	movs	r2, #29
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	465a      	mov	r2, fp
 8001960:	0001      	movs	r1, r0
 8001962:	40da      	lsrs	r2, r3
 8001964:	465e      	mov	r6, fp
 8001966:	3908      	subs	r1, #8
 8001968:	408f      	lsls	r7, r1
 800196a:	0013      	movs	r3, r2
 800196c:	408e      	lsls	r6, r1
 800196e:	433b      	orrs	r3, r7
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	4b9c      	ldr	r3, [pc, #624]	; (8001be4 <__aeabi_dmul+0x3b0>)
 8001974:	2700      	movs	r7, #0
 8001976:	1a1b      	subs	r3, r3, r0
 8001978:	4699      	mov	r9, r3
 800197a:	2300      	movs	r3, #0
 800197c:	469b      	mov	fp, r3
 800197e:	e77d      	b.n	800187c <__aeabi_dmul+0x48>
 8001980:	4641      	mov	r1, r8
 8001982:	4653      	mov	r3, sl
 8001984:	430b      	orrs	r3, r1
 8001986:	4993      	ldr	r1, [pc, #588]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 8001988:	468c      	mov	ip, r1
 800198a:	44e1      	add	r9, ip
 800198c:	2b00      	cmp	r3, #0
 800198e:	d000      	beq.n	8001992 <__aeabi_dmul+0x15e>
 8001990:	e11a      	b.n	8001bc8 <__aeabi_dmul+0x394>
 8001992:	2202      	movs	r2, #2
 8001994:	2002      	movs	r0, #2
 8001996:	4317      	orrs	r7, r2
 8001998:	2200      	movs	r2, #0
 800199a:	e78c      	b.n	80018b6 <__aeabi_dmul+0x82>
 800199c:	4313      	orrs	r3, r2
 800199e:	d100      	bne.n	80019a2 <__aeabi_dmul+0x16e>
 80019a0:	e10d      	b.n	8001bbe <__aeabi_dmul+0x38a>
 80019a2:	4643      	mov	r3, r8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d100      	bne.n	80019aa <__aeabi_dmul+0x176>
 80019a8:	e181      	b.n	8001cae <__aeabi_dmul+0x47a>
 80019aa:	4640      	mov	r0, r8
 80019ac:	f000 fe28 	bl	8002600 <__clzsi2>
 80019b0:	0002      	movs	r2, r0
 80019b2:	3a0b      	subs	r2, #11
 80019b4:	2a1c      	cmp	r2, #28
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dmul+0x186>
 80019b8:	e172      	b.n	8001ca0 <__aeabi_dmul+0x46c>
 80019ba:	0001      	movs	r1, r0
 80019bc:	4643      	mov	r3, r8
 80019be:	3908      	subs	r1, #8
 80019c0:	408b      	lsls	r3, r1
 80019c2:	4698      	mov	r8, r3
 80019c4:	231d      	movs	r3, #29
 80019c6:	1a9a      	subs	r2, r3, r2
 80019c8:	4653      	mov	r3, sl
 80019ca:	40d3      	lsrs	r3, r2
 80019cc:	001a      	movs	r2, r3
 80019ce:	4643      	mov	r3, r8
 80019d0:	4313      	orrs	r3, r2
 80019d2:	4652      	mov	r2, sl
 80019d4:	408a      	lsls	r2, r1
 80019d6:	4649      	mov	r1, r9
 80019d8:	1a08      	subs	r0, r1, r0
 80019da:	4982      	ldr	r1, [pc, #520]	; (8001be4 <__aeabi_dmul+0x3b0>)
 80019dc:	4689      	mov	r9, r1
 80019de:	4481      	add	r9, r0
 80019e0:	2000      	movs	r0, #0
 80019e2:	e768      	b.n	80018b6 <__aeabi_dmul+0x82>
 80019e4:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 80019e6:	2700      	movs	r7, #0
 80019e8:	2600      	movs	r6, #0
 80019ea:	e78e      	b.n	800190a <__aeabi_dmul+0xd6>
 80019ec:	0c14      	lsrs	r4, r2, #16
 80019ee:	0412      	lsls	r2, r2, #16
 80019f0:	0c12      	lsrs	r2, r2, #16
 80019f2:	0011      	movs	r1, r2
 80019f4:	0c37      	lsrs	r7, r6, #16
 80019f6:	0436      	lsls	r6, r6, #16
 80019f8:	0c35      	lsrs	r5, r6, #16
 80019fa:	4379      	muls	r1, r7
 80019fc:	0028      	movs	r0, r5
 80019fe:	468c      	mov	ip, r1
 8001a00:	002e      	movs	r6, r5
 8001a02:	4360      	muls	r0, r4
 8001a04:	4460      	add	r0, ip
 8001a06:	4683      	mov	fp, r0
 8001a08:	4356      	muls	r6, r2
 8001a0a:	0021      	movs	r1, r4
 8001a0c:	0c30      	lsrs	r0, r6, #16
 8001a0e:	4680      	mov	r8, r0
 8001a10:	4658      	mov	r0, fp
 8001a12:	4379      	muls	r1, r7
 8001a14:	4440      	add	r0, r8
 8001a16:	9102      	str	r1, [sp, #8]
 8001a18:	4584      	cmp	ip, r0
 8001a1a:	d906      	bls.n	8001a2a <__aeabi_dmul+0x1f6>
 8001a1c:	4688      	mov	r8, r1
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0249      	lsls	r1, r1, #9
 8001a22:	468c      	mov	ip, r1
 8001a24:	44e0      	add	r8, ip
 8001a26:	4641      	mov	r1, r8
 8001a28:	9102      	str	r1, [sp, #8]
 8001a2a:	0436      	lsls	r6, r6, #16
 8001a2c:	0c01      	lsrs	r1, r0, #16
 8001a2e:	0c36      	lsrs	r6, r6, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	468b      	mov	fp, r1
 8001a34:	1981      	adds	r1, r0, r6
 8001a36:	0c1e      	lsrs	r6, r3, #16
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	9103      	str	r1, [sp, #12]
 8001a3e:	0019      	movs	r1, r3
 8001a40:	4379      	muls	r1, r7
 8001a42:	468c      	mov	ip, r1
 8001a44:	0028      	movs	r0, r5
 8001a46:	4375      	muls	r5, r6
 8001a48:	4465      	add	r5, ip
 8001a4a:	46a8      	mov	r8, r5
 8001a4c:	4358      	muls	r0, r3
 8001a4e:	0c05      	lsrs	r5, r0, #16
 8001a50:	4445      	add	r5, r8
 8001a52:	4377      	muls	r7, r6
 8001a54:	42a9      	cmp	r1, r5
 8001a56:	d903      	bls.n	8001a60 <__aeabi_dmul+0x22c>
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0249      	lsls	r1, r1, #9
 8001a5c:	468c      	mov	ip, r1
 8001a5e:	4467      	add	r7, ip
 8001a60:	0c29      	lsrs	r1, r5, #16
 8001a62:	468c      	mov	ip, r1
 8001a64:	0039      	movs	r1, r7
 8001a66:	0400      	lsls	r0, r0, #16
 8001a68:	0c00      	lsrs	r0, r0, #16
 8001a6a:	042d      	lsls	r5, r5, #16
 8001a6c:	182d      	adds	r5, r5, r0
 8001a6e:	4461      	add	r1, ip
 8001a70:	44ab      	add	fp, r5
 8001a72:	9105      	str	r1, [sp, #20]
 8001a74:	4659      	mov	r1, fp
 8001a76:	9104      	str	r1, [sp, #16]
 8001a78:	9901      	ldr	r1, [sp, #4]
 8001a7a:	040f      	lsls	r7, r1, #16
 8001a7c:	0c3f      	lsrs	r7, r7, #16
 8001a7e:	0c08      	lsrs	r0, r1, #16
 8001a80:	0039      	movs	r1, r7
 8001a82:	4351      	muls	r1, r2
 8001a84:	4342      	muls	r2, r0
 8001a86:	4690      	mov	r8, r2
 8001a88:	0002      	movs	r2, r0
 8001a8a:	468c      	mov	ip, r1
 8001a8c:	0c09      	lsrs	r1, r1, #16
 8001a8e:	468b      	mov	fp, r1
 8001a90:	4362      	muls	r2, r4
 8001a92:	437c      	muls	r4, r7
 8001a94:	4444      	add	r4, r8
 8001a96:	445c      	add	r4, fp
 8001a98:	45a0      	cmp	r8, r4
 8001a9a:	d903      	bls.n	8001aa4 <__aeabi_dmul+0x270>
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0249      	lsls	r1, r1, #9
 8001aa0:	4688      	mov	r8, r1
 8001aa2:	4442      	add	r2, r8
 8001aa4:	0c21      	lsrs	r1, r4, #16
 8001aa6:	4688      	mov	r8, r1
 8001aa8:	4661      	mov	r1, ip
 8001aaa:	0409      	lsls	r1, r1, #16
 8001aac:	0c09      	lsrs	r1, r1, #16
 8001aae:	468c      	mov	ip, r1
 8001ab0:	0039      	movs	r1, r7
 8001ab2:	4359      	muls	r1, r3
 8001ab4:	4343      	muls	r3, r0
 8001ab6:	4370      	muls	r0, r6
 8001ab8:	437e      	muls	r6, r7
 8001aba:	0c0f      	lsrs	r7, r1, #16
 8001abc:	18f6      	adds	r6, r6, r3
 8001abe:	0424      	lsls	r4, r4, #16
 8001ac0:	19be      	adds	r6, r7, r6
 8001ac2:	4464      	add	r4, ip
 8001ac4:	4442      	add	r2, r8
 8001ac6:	468c      	mov	ip, r1
 8001ac8:	42b3      	cmp	r3, r6
 8001aca:	d903      	bls.n	8001ad4 <__aeabi_dmul+0x2a0>
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	025b      	lsls	r3, r3, #9
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	4440      	add	r0, r8
 8001ad4:	9b02      	ldr	r3, [sp, #8]
 8001ad6:	4661      	mov	r1, ip
 8001ad8:	4698      	mov	r8, r3
 8001ada:	9b04      	ldr	r3, [sp, #16]
 8001adc:	0437      	lsls	r7, r6, #16
 8001ade:	4443      	add	r3, r8
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	45ab      	cmp	fp, r5
 8001ae4:	41ad      	sbcs	r5, r5
 8001ae6:	426b      	negs	r3, r5
 8001ae8:	040d      	lsls	r5, r1, #16
 8001aea:	9905      	ldr	r1, [sp, #20]
 8001aec:	0c2d      	lsrs	r5, r5, #16
 8001aee:	468c      	mov	ip, r1
 8001af0:	197f      	adds	r7, r7, r5
 8001af2:	4467      	add	r7, ip
 8001af4:	18fd      	adds	r5, r7, r3
 8001af6:	46a8      	mov	r8, r5
 8001af8:	465d      	mov	r5, fp
 8001afa:	192d      	adds	r5, r5, r4
 8001afc:	42a5      	cmp	r5, r4
 8001afe:	41a4      	sbcs	r4, r4
 8001b00:	4693      	mov	fp, r2
 8001b02:	4264      	negs	r4, r4
 8001b04:	46a4      	mov	ip, r4
 8001b06:	44c3      	add	fp, r8
 8001b08:	44dc      	add	ip, fp
 8001b0a:	428f      	cmp	r7, r1
 8001b0c:	41bf      	sbcs	r7, r7
 8001b0e:	4598      	cmp	r8, r3
 8001b10:	419b      	sbcs	r3, r3
 8001b12:	4593      	cmp	fp, r2
 8001b14:	4192      	sbcs	r2, r2
 8001b16:	45a4      	cmp	ip, r4
 8001b18:	41a4      	sbcs	r4, r4
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	427f      	negs	r7, r7
 8001b1e:	431f      	orrs	r7, r3
 8001b20:	0c36      	lsrs	r6, r6, #16
 8001b22:	4252      	negs	r2, r2
 8001b24:	4264      	negs	r4, r4
 8001b26:	19bf      	adds	r7, r7, r6
 8001b28:	4322      	orrs	r2, r4
 8001b2a:	18bf      	adds	r7, r7, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	1838      	adds	r0, r7, r0
 8001b30:	0243      	lsls	r3, r0, #9
 8001b32:	0dd2      	lsrs	r2, r2, #23
 8001b34:	9903      	ldr	r1, [sp, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	026a      	lsls	r2, r5, #9
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	1e50      	subs	r0, r2, #1
 8001b3e:	4182      	sbcs	r2, r0
 8001b40:	4661      	mov	r1, ip
 8001b42:	0ded      	lsrs	r5, r5, #23
 8001b44:	432a      	orrs	r2, r5
 8001b46:	024e      	lsls	r6, r1, #9
 8001b48:	4332      	orrs	r2, r6
 8001b4a:	01d9      	lsls	r1, r3, #7
 8001b4c:	d400      	bmi.n	8001b50 <__aeabi_dmul+0x31c>
 8001b4e:	e0b3      	b.n	8001cb8 <__aeabi_dmul+0x484>
 8001b50:	2601      	movs	r6, #1
 8001b52:	0850      	lsrs	r0, r2, #1
 8001b54:	4032      	ands	r2, r6
 8001b56:	4302      	orrs	r2, r0
 8001b58:	07de      	lsls	r6, r3, #31
 8001b5a:	4332      	orrs	r2, r6
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	4c22      	ldr	r4, [pc, #136]	; (8001be8 <__aeabi_dmul+0x3b4>)
 8001b60:	4454      	add	r4, sl
 8001b62:	2c00      	cmp	r4, #0
 8001b64:	dd62      	ble.n	8001c2c <__aeabi_dmul+0x3f8>
 8001b66:	0751      	lsls	r1, r2, #29
 8001b68:	d009      	beq.n	8001b7e <__aeabi_dmul+0x34a>
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	4010      	ands	r0, r2
 8001b6e:	2804      	cmp	r0, #4
 8001b70:	d005      	beq.n	8001b7e <__aeabi_dmul+0x34a>
 8001b72:	1d10      	adds	r0, r2, #4
 8001b74:	4290      	cmp	r0, r2
 8001b76:	4192      	sbcs	r2, r2
 8001b78:	4252      	negs	r2, r2
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	01d9      	lsls	r1, r3, #7
 8001b80:	d504      	bpl.n	8001b8c <__aeabi_dmul+0x358>
 8001b82:	2480      	movs	r4, #128	; 0x80
 8001b84:	4819      	ldr	r0, [pc, #100]	; (8001bec <__aeabi_dmul+0x3b8>)
 8001b86:	00e4      	lsls	r4, r4, #3
 8001b88:	4003      	ands	r3, r0
 8001b8a:	4454      	add	r4, sl
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <__aeabi_dmul+0x3bc>)
 8001b8e:	4284      	cmp	r4, r0
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_dmul+0x360>
 8001b92:	e727      	b.n	80019e4 <__aeabi_dmul+0x1b0>
 8001b94:	075e      	lsls	r6, r3, #29
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	08d2      	lsrs	r2, r2, #3
 8001b9a:	0b1f      	lsrs	r7, r3, #12
 8001b9c:	0563      	lsls	r3, r4, #21
 8001b9e:	4316      	orrs	r6, r2
 8001ba0:	0d5b      	lsrs	r3, r3, #21
 8001ba2:	e6b2      	b.n	800190a <__aeabi_dmul+0xd6>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	2704      	movs	r7, #4
 8001bac:	2600      	movs	r6, #0
 8001bae:	469b      	mov	fp, r3
 8001bb0:	e664      	b.n	800187c <__aeabi_dmul+0x48>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	9701      	str	r7, [sp, #4]
 8001bb6:	4681      	mov	r9, r0
 8001bb8:	270c      	movs	r7, #12
 8001bba:	469b      	mov	fp, r3
 8001bbc:	e65e      	b.n	800187c <__aeabi_dmul+0x48>
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4317      	orrs	r7, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	e676      	b.n	80018b6 <__aeabi_dmul+0x82>
 8001bc8:	2303      	movs	r3, #3
 8001bca:	2003      	movs	r0, #3
 8001bcc:	431f      	orrs	r7, r3
 8001bce:	4643      	mov	r3, r8
 8001bd0:	e671      	b.n	80018b6 <__aeabi_dmul+0x82>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	000007ff 	.word	0x000007ff
 8001bd8:	fffffc01 	.word	0xfffffc01
 8001bdc:	08008258 	.word	0x08008258
 8001be0:	800fffff 	.word	0x800fffff
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	000003ff 	.word	0x000003ff
 8001bec:	feffffff 	.word	0xfeffffff
 8001bf0:	000007fe 	.word	0x000007fe
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2780      	movs	r7, #128	; 0x80
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	033f      	lsls	r7, r7, #12
 8001bfc:	2600      	movs	r6, #0
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001c00:	e683      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c02:	9b01      	ldr	r3, [sp, #4]
 8001c04:	0032      	movs	r2, r6
 8001c06:	46a4      	mov	ip, r4
 8001c08:	4658      	mov	r0, fp
 8001c0a:	e670      	b.n	80018ee <__aeabi_dmul+0xba>
 8001c0c:	46ac      	mov	ip, r5
 8001c0e:	e66e      	b.n	80018ee <__aeabi_dmul+0xba>
 8001c10:	2780      	movs	r7, #128	; 0x80
 8001c12:	9901      	ldr	r1, [sp, #4]
 8001c14:	033f      	lsls	r7, r7, #12
 8001c16:	4239      	tst	r1, r7
 8001c18:	d02d      	beq.n	8001c76 <__aeabi_dmul+0x442>
 8001c1a:	423b      	tst	r3, r7
 8001c1c:	d12b      	bne.n	8001c76 <__aeabi_dmul+0x442>
 8001c1e:	431f      	orrs	r7, r3
 8001c20:	033f      	lsls	r7, r7, #12
 8001c22:	0b3f      	lsrs	r7, r7, #12
 8001c24:	9500      	str	r5, [sp, #0]
 8001c26:	0016      	movs	r6, r2
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001c2a:	e66e      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c2c:	2501      	movs	r5, #1
 8001c2e:	1b2d      	subs	r5, r5, r4
 8001c30:	2d38      	cmp	r5, #56	; 0x38
 8001c32:	dd00      	ble.n	8001c36 <__aeabi_dmul+0x402>
 8001c34:	e666      	b.n	8001904 <__aeabi_dmul+0xd0>
 8001c36:	2d1f      	cmp	r5, #31
 8001c38:	dc40      	bgt.n	8001cbc <__aeabi_dmul+0x488>
 8001c3a:	4835      	ldr	r0, [pc, #212]	; (8001d10 <__aeabi_dmul+0x4dc>)
 8001c3c:	001c      	movs	r4, r3
 8001c3e:	4450      	add	r0, sl
 8001c40:	0016      	movs	r6, r2
 8001c42:	4082      	lsls	r2, r0
 8001c44:	4084      	lsls	r4, r0
 8001c46:	40ee      	lsrs	r6, r5
 8001c48:	1e50      	subs	r0, r2, #1
 8001c4a:	4182      	sbcs	r2, r0
 8001c4c:	4334      	orrs	r4, r6
 8001c4e:	4314      	orrs	r4, r2
 8001c50:	40eb      	lsrs	r3, r5
 8001c52:	0762      	lsls	r2, r4, #29
 8001c54:	d009      	beq.n	8001c6a <__aeabi_dmul+0x436>
 8001c56:	220f      	movs	r2, #15
 8001c58:	4022      	ands	r2, r4
 8001c5a:	2a04      	cmp	r2, #4
 8001c5c:	d005      	beq.n	8001c6a <__aeabi_dmul+0x436>
 8001c5e:	0022      	movs	r2, r4
 8001c60:	1d14      	adds	r4, r2, #4
 8001c62:	4294      	cmp	r4, r2
 8001c64:	4180      	sbcs	r0, r0
 8001c66:	4240      	negs	r0, r0
 8001c68:	181b      	adds	r3, r3, r0
 8001c6a:	021a      	lsls	r2, r3, #8
 8001c6c:	d53e      	bpl.n	8001cec <__aeabi_dmul+0x4b8>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2700      	movs	r7, #0
 8001c72:	2600      	movs	r6, #0
 8001c74:	e649      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c76:	2780      	movs	r7, #128	; 0x80
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	033f      	lsls	r7, r7, #12
 8001c7c:	431f      	orrs	r7, r3
 8001c7e:	033f      	lsls	r7, r7, #12
 8001c80:	0b3f      	lsrs	r7, r7, #12
 8001c82:	9400      	str	r4, [sp, #0]
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001c86:	e640      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	465a      	mov	r2, fp
 8001c8c:	3b28      	subs	r3, #40	; 0x28
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	2600      	movs	r6, #0
 8001c92:	9201      	str	r2, [sp, #4]
 8001c94:	e66d      	b.n	8001972 <__aeabi_dmul+0x13e>
 8001c96:	4658      	mov	r0, fp
 8001c98:	f000 fcb2 	bl	8002600 <__clzsi2>
 8001c9c:	3020      	adds	r0, #32
 8001c9e:	e657      	b.n	8001950 <__aeabi_dmul+0x11c>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	4652      	mov	r2, sl
 8001ca4:	3b28      	subs	r3, #40	; 0x28
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	2200      	movs	r2, #0
 8001cac:	e693      	b.n	80019d6 <__aeabi_dmul+0x1a2>
 8001cae:	4650      	mov	r0, sl
 8001cb0:	f000 fca6 	bl	8002600 <__clzsi2>
 8001cb4:	3020      	adds	r0, #32
 8001cb6:	e67b      	b.n	80019b0 <__aeabi_dmul+0x17c>
 8001cb8:	46ca      	mov	sl, r9
 8001cba:	e750      	b.n	8001b5e <__aeabi_dmul+0x32a>
 8001cbc:	201f      	movs	r0, #31
 8001cbe:	001e      	movs	r6, r3
 8001cc0:	4240      	negs	r0, r0
 8001cc2:	1b04      	subs	r4, r0, r4
 8001cc4:	40e6      	lsrs	r6, r4
 8001cc6:	2d20      	cmp	r5, #32
 8001cc8:	d003      	beq.n	8001cd2 <__aeabi_dmul+0x49e>
 8001cca:	4c12      	ldr	r4, [pc, #72]	; (8001d14 <__aeabi_dmul+0x4e0>)
 8001ccc:	4454      	add	r4, sl
 8001cce:	40a3      	lsls	r3, r4
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	1e50      	subs	r0, r2, #1
 8001cd4:	4182      	sbcs	r2, r0
 8001cd6:	4332      	orrs	r2, r6
 8001cd8:	2607      	movs	r6, #7
 8001cda:	2700      	movs	r7, #0
 8001cdc:	4016      	ands	r6, r2
 8001cde:	d009      	beq.n	8001cf4 <__aeabi_dmul+0x4c0>
 8001ce0:	200f      	movs	r0, #15
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	4010      	ands	r0, r2
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	2804      	cmp	r0, #4
 8001cea:	d1b9      	bne.n	8001c60 <__aeabi_dmul+0x42c>
 8001cec:	0022      	movs	r2, r4
 8001cee:	075e      	lsls	r6, r3, #29
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	0b1f      	lsrs	r7, r3, #12
 8001cf4:	08d2      	lsrs	r2, r2, #3
 8001cf6:	4316      	orrs	r6, r2
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e606      	b.n	800190a <__aeabi_dmul+0xd6>
 8001cfc:	2780      	movs	r7, #128	; 0x80
 8001cfe:	033f      	lsls	r7, r7, #12
 8001d00:	431f      	orrs	r7, r3
 8001d02:	033f      	lsls	r7, r7, #12
 8001d04:	0b3f      	lsrs	r7, r7, #12
 8001d06:	0016      	movs	r6, r2
 8001d08:	4b00      	ldr	r3, [pc, #0]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001d0a:	e5fe      	b.n	800190a <__aeabi_dmul+0xd6>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	0000041e 	.word	0x0000041e
 8001d14:	0000043e 	.word	0x0000043e

08001d18 <__aeabi_dsub>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	464e      	mov	r6, r9
 8001d1e:	4645      	mov	r5, r8
 8001d20:	46de      	mov	lr, fp
 8001d22:	000c      	movs	r4, r1
 8001d24:	0309      	lsls	r1, r1, #12
 8001d26:	b5e0      	push	{r5, r6, r7, lr}
 8001d28:	0a49      	lsrs	r1, r1, #9
 8001d2a:	0f46      	lsrs	r6, r0, #29
 8001d2c:	005f      	lsls	r7, r3, #1
 8001d2e:	4331      	orrs	r1, r6
 8001d30:	031e      	lsls	r6, r3, #12
 8001d32:	0fdb      	lsrs	r3, r3, #31
 8001d34:	0a76      	lsrs	r6, r6, #9
 8001d36:	469b      	mov	fp, r3
 8001d38:	0f53      	lsrs	r3, r2, #29
 8001d3a:	4333      	orrs	r3, r6
 8001d3c:	4ec8      	ldr	r6, [pc, #800]	; (8002060 <__aeabi_dsub+0x348>)
 8001d3e:	0065      	lsls	r5, r4, #1
 8001d40:	00c0      	lsls	r0, r0, #3
 8001d42:	0fe4      	lsrs	r4, r4, #31
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	0d6d      	lsrs	r5, r5, #21
 8001d48:	46a2      	mov	sl, r4
 8001d4a:	4681      	mov	r9, r0
 8001d4c:	0d7f      	lsrs	r7, r7, #21
 8001d4e:	469c      	mov	ip, r3
 8001d50:	4690      	mov	r8, r2
 8001d52:	42b7      	cmp	r7, r6
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x40>
 8001d56:	e0b9      	b.n	8001ecc <__aeabi_dsub+0x1b4>
 8001d58:	465b      	mov	r3, fp
 8001d5a:	2601      	movs	r6, #1
 8001d5c:	4073      	eors	r3, r6
 8001d5e:	469b      	mov	fp, r3
 8001d60:	1bee      	subs	r6, r5, r7
 8001d62:	45a3      	cmp	fp, r4
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x50>
 8001d66:	e083      	b.n	8001e70 <__aeabi_dsub+0x158>
 8001d68:	2e00      	cmp	r6, #0
 8001d6a:	dd63      	ble.n	8001e34 <__aeabi_dsub+0x11c>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x5a>
 8001d70:	e0b1      	b.n	8001ed6 <__aeabi_dsub+0x1be>
 8001d72:	4663      	mov	r3, ip
 8001d74:	4313      	orrs	r3, r2
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dsub+0x62>
 8001d78:	e123      	b.n	8001fc2 <__aeabi_dsub+0x2aa>
 8001d7a:	1e73      	subs	r3, r6, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x6a>
 8001d80:	e1ba      	b.n	80020f8 <__aeabi_dsub+0x3e0>
 8001d82:	1a86      	subs	r6, r0, r2
 8001d84:	4663      	mov	r3, ip
 8001d86:	42b0      	cmp	r0, r6
 8001d88:	4180      	sbcs	r0, r0
 8001d8a:	2501      	movs	r5, #1
 8001d8c:	1ac9      	subs	r1, r1, r3
 8001d8e:	4240      	negs	r0, r0
 8001d90:	1a09      	subs	r1, r1, r0
 8001d92:	020b      	lsls	r3, r1, #8
 8001d94:	d400      	bmi.n	8001d98 <__aeabi_dsub+0x80>
 8001d96:	e147      	b.n	8002028 <__aeabi_dsub+0x310>
 8001d98:	0249      	lsls	r1, r1, #9
 8001d9a:	0a4b      	lsrs	r3, r1, #9
 8001d9c:	4698      	mov	r8, r3
 8001d9e:	4643      	mov	r3, r8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d100      	bne.n	8001da6 <__aeabi_dsub+0x8e>
 8001da4:	e189      	b.n	80020ba <__aeabi_dsub+0x3a2>
 8001da6:	4640      	mov	r0, r8
 8001da8:	f000 fc2a 	bl	8002600 <__clzsi2>
 8001dac:	0003      	movs	r3, r0
 8001dae:	3b08      	subs	r3, #8
 8001db0:	2b1f      	cmp	r3, #31
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dsub+0x9e>
 8001db4:	e17c      	b.n	80020b0 <__aeabi_dsub+0x398>
 8001db6:	2220      	movs	r2, #32
 8001db8:	0030      	movs	r0, r6
 8001dba:	1ad2      	subs	r2, r2, r3
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	40d0      	lsrs	r0, r2
 8001dc0:	4099      	lsls	r1, r3
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	409e      	lsls	r6, r3
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	429d      	cmp	r5, r3
 8001dca:	dd00      	ble.n	8001dce <__aeabi_dsub+0xb6>
 8001dcc:	e16a      	b.n	80020a4 <__aeabi_dsub+0x38c>
 8001dce:	1b5d      	subs	r5, r3, r5
 8001dd0:	1c6b      	adds	r3, r5, #1
 8001dd2:	2b1f      	cmp	r3, #31
 8001dd4:	dd00      	ble.n	8001dd8 <__aeabi_dsub+0xc0>
 8001dd6:	e194      	b.n	8002102 <__aeabi_dsub+0x3ea>
 8001dd8:	2120      	movs	r1, #32
 8001dda:	0010      	movs	r0, r2
 8001ddc:	0035      	movs	r5, r6
 8001dde:	1ac9      	subs	r1, r1, r3
 8001de0:	408e      	lsls	r6, r1
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	4088      	lsls	r0, r1
 8001de6:	40dd      	lsrs	r5, r3
 8001de8:	1e71      	subs	r1, r6, #1
 8001dea:	418e      	sbcs	r6, r1
 8001dec:	0011      	movs	r1, r2
 8001dee:	2207      	movs	r2, #7
 8001df0:	4328      	orrs	r0, r5
 8001df2:	2500      	movs	r5, #0
 8001df4:	4306      	orrs	r6, r0
 8001df6:	4032      	ands	r2, r6
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d009      	beq.n	8001e10 <__aeabi_dsub+0xf8>
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	4033      	ands	r3, r6
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <__aeabi_dsub+0xf8>
 8001e04:	1d33      	adds	r3, r6, #4
 8001e06:	42b3      	cmp	r3, r6
 8001e08:	41b6      	sbcs	r6, r6
 8001e0a:	4276      	negs	r6, r6
 8001e0c:	1989      	adds	r1, r1, r6
 8001e0e:	001e      	movs	r6, r3
 8001e10:	020b      	lsls	r3, r1, #8
 8001e12:	d400      	bmi.n	8001e16 <__aeabi_dsub+0xfe>
 8001e14:	e23d      	b.n	8002292 <__aeabi_dsub+0x57a>
 8001e16:	1c6a      	adds	r2, r5, #1
 8001e18:	4b91      	ldr	r3, [pc, #580]	; (8002060 <__aeabi_dsub+0x348>)
 8001e1a:	0555      	lsls	r5, r2, #21
 8001e1c:	0d6d      	lsrs	r5, r5, #21
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x10c>
 8001e22:	e119      	b.n	8002058 <__aeabi_dsub+0x340>
 8001e24:	4a8f      	ldr	r2, [pc, #572]	; (8002064 <__aeabi_dsub+0x34c>)
 8001e26:	08f6      	lsrs	r6, r6, #3
 8001e28:	400a      	ands	r2, r1
 8001e2a:	0757      	lsls	r7, r2, #29
 8001e2c:	0252      	lsls	r2, r2, #9
 8001e2e:	4337      	orrs	r7, r6
 8001e30:	0b12      	lsrs	r2, r2, #12
 8001e32:	e09b      	b.n	8001f6c <__aeabi_dsub+0x254>
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x122>
 8001e38:	e0c5      	b.n	8001fc6 <__aeabi_dsub+0x2ae>
 8001e3a:	1c6e      	adds	r6, r5, #1
 8001e3c:	0576      	lsls	r6, r6, #21
 8001e3e:	0d76      	lsrs	r6, r6, #21
 8001e40:	2e01      	cmp	r6, #1
 8001e42:	dc00      	bgt.n	8001e46 <__aeabi_dsub+0x12e>
 8001e44:	e148      	b.n	80020d8 <__aeabi_dsub+0x3c0>
 8001e46:	4667      	mov	r7, ip
 8001e48:	1a86      	subs	r6, r0, r2
 8001e4a:	1bcb      	subs	r3, r1, r7
 8001e4c:	42b0      	cmp	r0, r6
 8001e4e:	41bf      	sbcs	r7, r7
 8001e50:	427f      	negs	r7, r7
 8001e52:	46b8      	mov	r8, r7
 8001e54:	001f      	movs	r7, r3
 8001e56:	4643      	mov	r3, r8
 8001e58:	1aff      	subs	r7, r7, r3
 8001e5a:	003b      	movs	r3, r7
 8001e5c:	46b8      	mov	r8, r7
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	d500      	bpl.n	8001e64 <__aeabi_dsub+0x14c>
 8001e62:	e15f      	b.n	8002124 <__aeabi_dsub+0x40c>
 8001e64:	4337      	orrs	r7, r6
 8001e66:	d19a      	bne.n	8001d9e <__aeabi_dsub+0x86>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	e079      	b.n	8001f64 <__aeabi_dsub+0x24c>
 8001e70:	2e00      	cmp	r6, #0
 8001e72:	dc00      	bgt.n	8001e76 <__aeabi_dsub+0x15e>
 8001e74:	e0fa      	b.n	800206c <__aeabi_dsub+0x354>
 8001e76:	2f00      	cmp	r7, #0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x164>
 8001e7a:	e08d      	b.n	8001f98 <__aeabi_dsub+0x280>
 8001e7c:	4b78      	ldr	r3, [pc, #480]	; (8002060 <__aeabi_dsub+0x348>)
 8001e7e:	429d      	cmp	r5, r3
 8001e80:	d067      	beq.n	8001f52 <__aeabi_dsub+0x23a>
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	4667      	mov	r7, ip
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	431f      	orrs	r7, r3
 8001e8a:	46bc      	mov	ip, r7
 8001e8c:	2e38      	cmp	r6, #56	; 0x38
 8001e8e:	dc00      	bgt.n	8001e92 <__aeabi_dsub+0x17a>
 8001e90:	e152      	b.n	8002138 <__aeabi_dsub+0x420>
 8001e92:	4663      	mov	r3, ip
 8001e94:	4313      	orrs	r3, r2
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	4193      	sbcs	r3, r2
 8001e9a:	181e      	adds	r6, r3, r0
 8001e9c:	4286      	cmp	r6, r0
 8001e9e:	4180      	sbcs	r0, r0
 8001ea0:	4240      	negs	r0, r0
 8001ea2:	1809      	adds	r1, r1, r0
 8001ea4:	020b      	lsls	r3, r1, #8
 8001ea6:	d400      	bmi.n	8001eaa <__aeabi_dsub+0x192>
 8001ea8:	e0be      	b.n	8002028 <__aeabi_dsub+0x310>
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <__aeabi_dsub+0x348>)
 8001eac:	3501      	adds	r5, #1
 8001eae:	429d      	cmp	r5, r3
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x19c>
 8001eb2:	e0d2      	b.n	800205a <__aeabi_dsub+0x342>
 8001eb4:	4a6b      	ldr	r2, [pc, #428]	; (8002064 <__aeabi_dsub+0x34c>)
 8001eb6:	0873      	lsrs	r3, r6, #1
 8001eb8:	400a      	ands	r2, r1
 8001eba:	2101      	movs	r1, #1
 8001ebc:	400e      	ands	r6, r1
 8001ebe:	431e      	orrs	r6, r3
 8001ec0:	0851      	lsrs	r1, r2, #1
 8001ec2:	07d3      	lsls	r3, r2, #31
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	431e      	orrs	r6, r3
 8001ec8:	4032      	ands	r2, r6
 8001eca:	e795      	b.n	8001df8 <__aeabi_dsub+0xe0>
 8001ecc:	001e      	movs	r6, r3
 8001ece:	4316      	orrs	r6, r2
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_dsub+0x1bc>
 8001ed2:	e745      	b.n	8001d60 <__aeabi_dsub+0x48>
 8001ed4:	e740      	b.n	8001d58 <__aeabi_dsub+0x40>
 8001ed6:	4b62      	ldr	r3, [pc, #392]	; (8002060 <__aeabi_dsub+0x348>)
 8001ed8:	429d      	cmp	r5, r3
 8001eda:	d03a      	beq.n	8001f52 <__aeabi_dsub+0x23a>
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	4667      	mov	r7, ip
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	431f      	orrs	r7, r3
 8001ee4:	46bc      	mov	ip, r7
 8001ee6:	2e38      	cmp	r6, #56	; 0x38
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_dsub+0x1d4>
 8001eea:	e0eb      	b.n	80020c4 <__aeabi_dsub+0x3ac>
 8001eec:	2e1f      	cmp	r6, #31
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_dsub+0x1da>
 8001ef0:	e13a      	b.n	8002168 <__aeabi_dsub+0x450>
 8001ef2:	0033      	movs	r3, r6
 8001ef4:	4667      	mov	r7, ip
 8001ef6:	3b20      	subs	r3, #32
 8001ef8:	40df      	lsrs	r7, r3
 8001efa:	003b      	movs	r3, r7
 8001efc:	2e20      	cmp	r6, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x1f4>
 8001f00:	2740      	movs	r7, #64	; 0x40
 8001f02:	1bbf      	subs	r7, r7, r6
 8001f04:	4666      	mov	r6, ip
 8001f06:	40be      	lsls	r6, r7
 8001f08:	4332      	orrs	r2, r6
 8001f0a:	4690      	mov	r8, r2
 8001f0c:	4646      	mov	r6, r8
 8001f0e:	1e72      	subs	r2, r6, #1
 8001f10:	4196      	sbcs	r6, r2
 8001f12:	4333      	orrs	r3, r6
 8001f14:	e0da      	b.n	80020cc <__aeabi_dsub+0x3b4>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dsub+0x204>
 8001f1a:	e214      	b.n	8002346 <__aeabi_dsub+0x62e>
 8001f1c:	4663      	mov	r3, ip
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x20c>
 8001f22:	e168      	b.n	80021f6 <__aeabi_dsub+0x4de>
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	074e      	lsls	r6, r1, #29
 8001f28:	08c0      	lsrs	r0, r0, #3
 8001f2a:	08c9      	lsrs	r1, r1, #3
 8001f2c:	031b      	lsls	r3, r3, #12
 8001f2e:	4306      	orrs	r6, r0
 8001f30:	4219      	tst	r1, r3
 8001f32:	d008      	beq.n	8001f46 <__aeabi_dsub+0x22e>
 8001f34:	4660      	mov	r0, ip
 8001f36:	08c0      	lsrs	r0, r0, #3
 8001f38:	4218      	tst	r0, r3
 8001f3a:	d104      	bne.n	8001f46 <__aeabi_dsub+0x22e>
 8001f3c:	4663      	mov	r3, ip
 8001f3e:	0001      	movs	r1, r0
 8001f40:	08d2      	lsrs	r2, r2, #3
 8001f42:	075e      	lsls	r6, r3, #29
 8001f44:	4316      	orrs	r6, r2
 8001f46:	00f3      	lsls	r3, r6, #3
 8001f48:	4699      	mov	r9, r3
 8001f4a:	00c9      	lsls	r1, r1, #3
 8001f4c:	0f72      	lsrs	r2, r6, #29
 8001f4e:	4d44      	ldr	r5, [pc, #272]	; (8002060 <__aeabi_dsub+0x348>)
 8001f50:	4311      	orrs	r1, r2
 8001f52:	464b      	mov	r3, r9
 8001f54:	08de      	lsrs	r6, r3, #3
 8001f56:	4b42      	ldr	r3, [pc, #264]	; (8002060 <__aeabi_dsub+0x348>)
 8001f58:	074f      	lsls	r7, r1, #29
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	08ca      	lsrs	r2, r1, #3
 8001f5e:	429d      	cmp	r5, r3
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x24c>
 8001f62:	e06e      	b.n	8002042 <__aeabi_dsub+0x32a>
 8001f64:	0312      	lsls	r2, r2, #12
 8001f66:	056d      	lsls	r5, r5, #21
 8001f68:	0b12      	lsrs	r2, r2, #12
 8001f6a:	0d6d      	lsrs	r5, r5, #21
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	0312      	lsls	r2, r2, #12
 8001f70:	0b13      	lsrs	r3, r2, #12
 8001f72:	0d0a      	lsrs	r2, r1, #20
 8001f74:	0512      	lsls	r2, r2, #20
 8001f76:	431a      	orrs	r2, r3
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <__aeabi_dsub+0x350>)
 8001f7a:	052d      	lsls	r5, r5, #20
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	432b      	orrs	r3, r5
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	07e4      	lsls	r4, r4, #31
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	4323      	orrs	r3, r4
 8001f88:	0038      	movs	r0, r7
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	bc3c      	pop	{r2, r3, r4, r5}
 8001f8e:	4690      	mov	r8, r2
 8001f90:	4699      	mov	r9, r3
 8001f92:	46a2      	mov	sl, r4
 8001f94:	46ab      	mov	fp, r5
 8001f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f98:	4663      	mov	r3, ip
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	d011      	beq.n	8001fc2 <__aeabi_dsub+0x2aa>
 8001f9e:	1e73      	subs	r3, r6, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dsub+0x28e>
 8001fa4:	e107      	b.n	80021b6 <__aeabi_dsub+0x49e>
 8001fa6:	1886      	adds	r6, r0, r2
 8001fa8:	4286      	cmp	r6, r0
 8001faa:	4180      	sbcs	r0, r0
 8001fac:	4461      	add	r1, ip
 8001fae:	4240      	negs	r0, r0
 8001fb0:	1809      	adds	r1, r1, r0
 8001fb2:	2501      	movs	r5, #1
 8001fb4:	020b      	lsls	r3, r1, #8
 8001fb6:	d537      	bpl.n	8002028 <__aeabi_dsub+0x310>
 8001fb8:	2502      	movs	r5, #2
 8001fba:	e77b      	b.n	8001eb4 <__aeabi_dsub+0x19c>
 8001fbc:	003e      	movs	r6, r7
 8001fbe:	4661      	mov	r1, ip
 8001fc0:	4691      	mov	r9, r2
 8001fc2:	0035      	movs	r5, r6
 8001fc4:	e7c5      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8001fc6:	465c      	mov	r4, fp
 8001fc8:	2d00      	cmp	r5, #0
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x2b6>
 8001fcc:	e0e1      	b.n	8002192 <__aeabi_dsub+0x47a>
 8001fce:	000b      	movs	r3, r1
 8001fd0:	4303      	orrs	r3, r0
 8001fd2:	d0f3      	beq.n	8001fbc <__aeabi_dsub+0x2a4>
 8001fd4:	1c73      	adds	r3, r6, #1
 8001fd6:	d100      	bne.n	8001fda <__aeabi_dsub+0x2c2>
 8001fd8:	e1ac      	b.n	8002334 <__aeabi_dsub+0x61c>
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <__aeabi_dsub+0x348>)
 8001fdc:	429f      	cmp	r7, r3
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x2ca>
 8001fe0:	e13a      	b.n	8002258 <__aeabi_dsub+0x540>
 8001fe2:	43f3      	mvns	r3, r6
 8001fe4:	2b38      	cmp	r3, #56	; 0x38
 8001fe6:	dd00      	ble.n	8001fea <__aeabi_dsub+0x2d2>
 8001fe8:	e16f      	b.n	80022ca <__aeabi_dsub+0x5b2>
 8001fea:	2b1f      	cmp	r3, #31
 8001fec:	dd00      	ble.n	8001ff0 <__aeabi_dsub+0x2d8>
 8001fee:	e18c      	b.n	800230a <__aeabi_dsub+0x5f2>
 8001ff0:	2520      	movs	r5, #32
 8001ff2:	000e      	movs	r6, r1
 8001ff4:	1aed      	subs	r5, r5, r3
 8001ff6:	40ae      	lsls	r6, r5
 8001ff8:	46b0      	mov	r8, r6
 8001ffa:	0006      	movs	r6, r0
 8001ffc:	46aa      	mov	sl, r5
 8001ffe:	40de      	lsrs	r6, r3
 8002000:	4645      	mov	r5, r8
 8002002:	4335      	orrs	r5, r6
 8002004:	002e      	movs	r6, r5
 8002006:	4655      	mov	r5, sl
 8002008:	40d9      	lsrs	r1, r3
 800200a:	40a8      	lsls	r0, r5
 800200c:	4663      	mov	r3, ip
 800200e:	1e45      	subs	r5, r0, #1
 8002010:	41a8      	sbcs	r0, r5
 8002012:	1a5b      	subs	r3, r3, r1
 8002014:	469c      	mov	ip, r3
 8002016:	4330      	orrs	r0, r6
 8002018:	1a16      	subs	r6, r2, r0
 800201a:	42b2      	cmp	r2, r6
 800201c:	4192      	sbcs	r2, r2
 800201e:	4663      	mov	r3, ip
 8002020:	4252      	negs	r2, r2
 8002022:	1a99      	subs	r1, r3, r2
 8002024:	003d      	movs	r5, r7
 8002026:	e6b4      	b.n	8001d92 <__aeabi_dsub+0x7a>
 8002028:	2207      	movs	r2, #7
 800202a:	4032      	ands	r2, r6
 800202c:	2a00      	cmp	r2, #0
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x31a>
 8002030:	e6e4      	b.n	8001dfc <__aeabi_dsub+0xe4>
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <__aeabi_dsub+0x348>)
 8002034:	08f6      	lsrs	r6, r6, #3
 8002036:	074f      	lsls	r7, r1, #29
 8002038:	4337      	orrs	r7, r6
 800203a:	08ca      	lsrs	r2, r1, #3
 800203c:	429d      	cmp	r5, r3
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x32a>
 8002040:	e790      	b.n	8001f64 <__aeabi_dsub+0x24c>
 8002042:	003b      	movs	r3, r7
 8002044:	4313      	orrs	r3, r2
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x332>
 8002048:	e1a6      	b.n	8002398 <__aeabi_dsub+0x680>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	031b      	lsls	r3, r3, #12
 800204e:	431a      	orrs	r2, r3
 8002050:	0312      	lsls	r2, r2, #12
 8002052:	0b12      	lsrs	r2, r2, #12
 8002054:	4d02      	ldr	r5, [pc, #8]	; (8002060 <__aeabi_dsub+0x348>)
 8002056:	e789      	b.n	8001f6c <__aeabi_dsub+0x254>
 8002058:	0015      	movs	r5, r2
 800205a:	2200      	movs	r2, #0
 800205c:	2700      	movs	r7, #0
 800205e:	e785      	b.n	8001f6c <__aeabi_dsub+0x254>
 8002060:	000007ff 	.word	0x000007ff
 8002064:	ff7fffff 	.word	0xff7fffff
 8002068:	800fffff 	.word	0x800fffff
 800206c:	2e00      	cmp	r6, #0
 800206e:	d000      	beq.n	8002072 <__aeabi_dsub+0x35a>
 8002070:	e0c7      	b.n	8002202 <__aeabi_dsub+0x4ea>
 8002072:	1c6b      	adds	r3, r5, #1
 8002074:	055e      	lsls	r6, r3, #21
 8002076:	0d76      	lsrs	r6, r6, #21
 8002078:	2e01      	cmp	r6, #1
 800207a:	dc00      	bgt.n	800207e <__aeabi_dsub+0x366>
 800207c:	e0f0      	b.n	8002260 <__aeabi_dsub+0x548>
 800207e:	4dc8      	ldr	r5, [pc, #800]	; (80023a0 <__aeabi_dsub+0x688>)
 8002080:	42ab      	cmp	r3, r5
 8002082:	d100      	bne.n	8002086 <__aeabi_dsub+0x36e>
 8002084:	e0b9      	b.n	80021fa <__aeabi_dsub+0x4e2>
 8002086:	1885      	adds	r5, r0, r2
 8002088:	000a      	movs	r2, r1
 800208a:	4285      	cmp	r5, r0
 800208c:	4189      	sbcs	r1, r1
 800208e:	4462      	add	r2, ip
 8002090:	4249      	negs	r1, r1
 8002092:	1851      	adds	r1, r2, r1
 8002094:	2207      	movs	r2, #7
 8002096:	07ce      	lsls	r6, r1, #31
 8002098:	086d      	lsrs	r5, r5, #1
 800209a:	432e      	orrs	r6, r5
 800209c:	0849      	lsrs	r1, r1, #1
 800209e:	4032      	ands	r2, r6
 80020a0:	001d      	movs	r5, r3
 80020a2:	e6a9      	b.n	8001df8 <__aeabi_dsub+0xe0>
 80020a4:	49bf      	ldr	r1, [pc, #764]	; (80023a4 <__aeabi_dsub+0x68c>)
 80020a6:	1aed      	subs	r5, r5, r3
 80020a8:	4011      	ands	r1, r2
 80020aa:	2207      	movs	r2, #7
 80020ac:	4032      	ands	r2, r6
 80020ae:	e6a3      	b.n	8001df8 <__aeabi_dsub+0xe0>
 80020b0:	0032      	movs	r2, r6
 80020b2:	3828      	subs	r0, #40	; 0x28
 80020b4:	4082      	lsls	r2, r0
 80020b6:	2600      	movs	r6, #0
 80020b8:	e686      	b.n	8001dc8 <__aeabi_dsub+0xb0>
 80020ba:	0030      	movs	r0, r6
 80020bc:	f000 faa0 	bl	8002600 <__clzsi2>
 80020c0:	3020      	adds	r0, #32
 80020c2:	e673      	b.n	8001dac <__aeabi_dsub+0x94>
 80020c4:	4663      	mov	r3, ip
 80020c6:	4313      	orrs	r3, r2
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	4193      	sbcs	r3, r2
 80020cc:	1ac6      	subs	r6, r0, r3
 80020ce:	42b0      	cmp	r0, r6
 80020d0:	4180      	sbcs	r0, r0
 80020d2:	4240      	negs	r0, r0
 80020d4:	1a09      	subs	r1, r1, r0
 80020d6:	e65c      	b.n	8001d92 <__aeabi_dsub+0x7a>
 80020d8:	000e      	movs	r6, r1
 80020da:	4667      	mov	r7, ip
 80020dc:	4306      	orrs	r6, r0
 80020de:	4317      	orrs	r7, r2
 80020e0:	2d00      	cmp	r5, #0
 80020e2:	d15e      	bne.n	80021a2 <__aeabi_dsub+0x48a>
 80020e4:	2e00      	cmp	r6, #0
 80020e6:	d000      	beq.n	80020ea <__aeabi_dsub+0x3d2>
 80020e8:	e0f3      	b.n	80022d2 <__aeabi_dsub+0x5ba>
 80020ea:	2f00      	cmp	r7, #0
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x3d8>
 80020ee:	e11e      	b.n	800232e <__aeabi_dsub+0x616>
 80020f0:	465c      	mov	r4, fp
 80020f2:	4661      	mov	r1, ip
 80020f4:	4691      	mov	r9, r2
 80020f6:	e72c      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80020f8:	4fa9      	ldr	r7, [pc, #676]	; (80023a0 <__aeabi_dsub+0x688>)
 80020fa:	42be      	cmp	r6, r7
 80020fc:	d07b      	beq.n	80021f6 <__aeabi_dsub+0x4de>
 80020fe:	001e      	movs	r6, r3
 8002100:	e6f1      	b.n	8001ee6 <__aeabi_dsub+0x1ce>
 8002102:	0010      	movs	r0, r2
 8002104:	3d1f      	subs	r5, #31
 8002106:	40e8      	lsrs	r0, r5
 8002108:	2b20      	cmp	r3, #32
 800210a:	d003      	beq.n	8002114 <__aeabi_dsub+0x3fc>
 800210c:	2140      	movs	r1, #64	; 0x40
 800210e:	1acb      	subs	r3, r1, r3
 8002110:	409a      	lsls	r2, r3
 8002112:	4316      	orrs	r6, r2
 8002114:	1e73      	subs	r3, r6, #1
 8002116:	419e      	sbcs	r6, r3
 8002118:	2207      	movs	r2, #7
 800211a:	4306      	orrs	r6, r0
 800211c:	4032      	ands	r2, r6
 800211e:	2100      	movs	r1, #0
 8002120:	2500      	movs	r5, #0
 8002122:	e783      	b.n	800202c <__aeabi_dsub+0x314>
 8002124:	1a16      	subs	r6, r2, r0
 8002126:	4663      	mov	r3, ip
 8002128:	42b2      	cmp	r2, r6
 800212a:	4180      	sbcs	r0, r0
 800212c:	1a59      	subs	r1, r3, r1
 800212e:	4240      	negs	r0, r0
 8002130:	1a0b      	subs	r3, r1, r0
 8002132:	4698      	mov	r8, r3
 8002134:	465c      	mov	r4, fp
 8002136:	e632      	b.n	8001d9e <__aeabi_dsub+0x86>
 8002138:	2e1f      	cmp	r6, #31
 800213a:	dd00      	ble.n	800213e <__aeabi_dsub+0x426>
 800213c:	e0ab      	b.n	8002296 <__aeabi_dsub+0x57e>
 800213e:	2720      	movs	r7, #32
 8002140:	1bbb      	subs	r3, r7, r6
 8002142:	469a      	mov	sl, r3
 8002144:	4663      	mov	r3, ip
 8002146:	4657      	mov	r7, sl
 8002148:	40bb      	lsls	r3, r7
 800214a:	4699      	mov	r9, r3
 800214c:	0013      	movs	r3, r2
 800214e:	464f      	mov	r7, r9
 8002150:	40f3      	lsrs	r3, r6
 8002152:	431f      	orrs	r7, r3
 8002154:	003b      	movs	r3, r7
 8002156:	4657      	mov	r7, sl
 8002158:	40ba      	lsls	r2, r7
 800215a:	1e57      	subs	r7, r2, #1
 800215c:	41ba      	sbcs	r2, r7
 800215e:	4313      	orrs	r3, r2
 8002160:	4662      	mov	r2, ip
 8002162:	40f2      	lsrs	r2, r6
 8002164:	1889      	adds	r1, r1, r2
 8002166:	e698      	b.n	8001e9a <__aeabi_dsub+0x182>
 8002168:	2720      	movs	r7, #32
 800216a:	1bbb      	subs	r3, r7, r6
 800216c:	469a      	mov	sl, r3
 800216e:	4663      	mov	r3, ip
 8002170:	4657      	mov	r7, sl
 8002172:	40bb      	lsls	r3, r7
 8002174:	4699      	mov	r9, r3
 8002176:	0013      	movs	r3, r2
 8002178:	464f      	mov	r7, r9
 800217a:	40f3      	lsrs	r3, r6
 800217c:	431f      	orrs	r7, r3
 800217e:	003b      	movs	r3, r7
 8002180:	4657      	mov	r7, sl
 8002182:	40ba      	lsls	r2, r7
 8002184:	1e57      	subs	r7, r2, #1
 8002186:	41ba      	sbcs	r2, r7
 8002188:	4313      	orrs	r3, r2
 800218a:	4662      	mov	r2, ip
 800218c:	40f2      	lsrs	r2, r6
 800218e:	1a89      	subs	r1, r1, r2
 8002190:	e79c      	b.n	80020cc <__aeabi_dsub+0x3b4>
 8002192:	4b83      	ldr	r3, [pc, #524]	; (80023a0 <__aeabi_dsub+0x688>)
 8002194:	429f      	cmp	r7, r3
 8002196:	d05f      	beq.n	8002258 <__aeabi_dsub+0x540>
 8002198:	2580      	movs	r5, #128	; 0x80
 800219a:	042d      	lsls	r5, r5, #16
 800219c:	4273      	negs	r3, r6
 800219e:	4329      	orrs	r1, r5
 80021a0:	e720      	b.n	8001fe4 <__aeabi_dsub+0x2cc>
 80021a2:	2e00      	cmp	r6, #0
 80021a4:	d10c      	bne.n	80021c0 <__aeabi_dsub+0x4a8>
 80021a6:	2f00      	cmp	r7, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x494>
 80021aa:	e0d0      	b.n	800234e <__aeabi_dsub+0x636>
 80021ac:	465c      	mov	r4, fp
 80021ae:	4661      	mov	r1, ip
 80021b0:	4691      	mov	r9, r2
 80021b2:	4d7b      	ldr	r5, [pc, #492]	; (80023a0 <__aeabi_dsub+0x688>)
 80021b4:	e6cd      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80021b6:	4f7a      	ldr	r7, [pc, #488]	; (80023a0 <__aeabi_dsub+0x688>)
 80021b8:	42be      	cmp	r6, r7
 80021ba:	d01c      	beq.n	80021f6 <__aeabi_dsub+0x4de>
 80021bc:	001e      	movs	r6, r3
 80021be:	e665      	b.n	8001e8c <__aeabi_dsub+0x174>
 80021c0:	2f00      	cmp	r7, #0
 80021c2:	d018      	beq.n	80021f6 <__aeabi_dsub+0x4de>
 80021c4:	08c0      	lsrs	r0, r0, #3
 80021c6:	074e      	lsls	r6, r1, #29
 80021c8:	4306      	orrs	r6, r0
 80021ca:	2080      	movs	r0, #128	; 0x80
 80021cc:	08c9      	lsrs	r1, r1, #3
 80021ce:	0300      	lsls	r0, r0, #12
 80021d0:	4201      	tst	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dsub+0x4ce>
 80021d4:	4663      	mov	r3, ip
 80021d6:	08dc      	lsrs	r4, r3, #3
 80021d8:	4204      	tst	r4, r0
 80021da:	d104      	bne.n	80021e6 <__aeabi_dsub+0x4ce>
 80021dc:	0021      	movs	r1, r4
 80021de:	46da      	mov	sl, fp
 80021e0:	08d2      	lsrs	r2, r2, #3
 80021e2:	075e      	lsls	r6, r3, #29
 80021e4:	4316      	orrs	r6, r2
 80021e6:	00f3      	lsls	r3, r6, #3
 80021e8:	4699      	mov	r9, r3
 80021ea:	2401      	movs	r4, #1
 80021ec:	4653      	mov	r3, sl
 80021ee:	00c9      	lsls	r1, r1, #3
 80021f0:	0f72      	lsrs	r2, r6, #29
 80021f2:	4311      	orrs	r1, r2
 80021f4:	401c      	ands	r4, r3
 80021f6:	4d6a      	ldr	r5, [pc, #424]	; (80023a0 <__aeabi_dsub+0x688>)
 80021f8:	e6ab      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80021fa:	001d      	movs	r5, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	2700      	movs	r7, #0
 8002200:	e6b4      	b.n	8001f6c <__aeabi_dsub+0x254>
 8002202:	2d00      	cmp	r5, #0
 8002204:	d159      	bne.n	80022ba <__aeabi_dsub+0x5a2>
 8002206:	000b      	movs	r3, r1
 8002208:	4303      	orrs	r3, r0
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x4f6>
 800220c:	e6d6      	b.n	8001fbc <__aeabi_dsub+0x2a4>
 800220e:	1c73      	adds	r3, r6, #1
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x4fc>
 8002212:	e0b2      	b.n	800237a <__aeabi_dsub+0x662>
 8002214:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <__aeabi_dsub+0x688>)
 8002216:	429f      	cmp	r7, r3
 8002218:	d01e      	beq.n	8002258 <__aeabi_dsub+0x540>
 800221a:	43f3      	mvns	r3, r6
 800221c:	2b38      	cmp	r3, #56	; 0x38
 800221e:	dc6f      	bgt.n	8002300 <__aeabi_dsub+0x5e8>
 8002220:	2b1f      	cmp	r3, #31
 8002222:	dd00      	ble.n	8002226 <__aeabi_dsub+0x50e>
 8002224:	e097      	b.n	8002356 <__aeabi_dsub+0x63e>
 8002226:	2520      	movs	r5, #32
 8002228:	000e      	movs	r6, r1
 800222a:	1aed      	subs	r5, r5, r3
 800222c:	40ae      	lsls	r6, r5
 800222e:	46b0      	mov	r8, r6
 8002230:	0006      	movs	r6, r0
 8002232:	46aa      	mov	sl, r5
 8002234:	40de      	lsrs	r6, r3
 8002236:	4645      	mov	r5, r8
 8002238:	4335      	orrs	r5, r6
 800223a:	002e      	movs	r6, r5
 800223c:	4655      	mov	r5, sl
 800223e:	40a8      	lsls	r0, r5
 8002240:	40d9      	lsrs	r1, r3
 8002242:	1e45      	subs	r5, r0, #1
 8002244:	41a8      	sbcs	r0, r5
 8002246:	448c      	add	ip, r1
 8002248:	4306      	orrs	r6, r0
 800224a:	18b6      	adds	r6, r6, r2
 800224c:	4296      	cmp	r6, r2
 800224e:	4192      	sbcs	r2, r2
 8002250:	4251      	negs	r1, r2
 8002252:	4461      	add	r1, ip
 8002254:	003d      	movs	r5, r7
 8002256:	e625      	b.n	8001ea4 <__aeabi_dsub+0x18c>
 8002258:	003d      	movs	r5, r7
 800225a:	4661      	mov	r1, ip
 800225c:	4691      	mov	r9, r2
 800225e:	e678      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8002260:	000b      	movs	r3, r1
 8002262:	4303      	orrs	r3, r0
 8002264:	2d00      	cmp	r5, #0
 8002266:	d000      	beq.n	800226a <__aeabi_dsub+0x552>
 8002268:	e655      	b.n	8001f16 <__aeabi_dsub+0x1fe>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f5      	beq.n	800225a <__aeabi_dsub+0x542>
 800226e:	4663      	mov	r3, ip
 8002270:	4313      	orrs	r3, r2
 8002272:	d100      	bne.n	8002276 <__aeabi_dsub+0x55e>
 8002274:	e66d      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8002276:	1886      	adds	r6, r0, r2
 8002278:	4286      	cmp	r6, r0
 800227a:	4180      	sbcs	r0, r0
 800227c:	4461      	add	r1, ip
 800227e:	4240      	negs	r0, r0
 8002280:	1809      	adds	r1, r1, r0
 8002282:	2200      	movs	r2, #0
 8002284:	020b      	lsls	r3, r1, #8
 8002286:	d400      	bmi.n	800228a <__aeabi_dsub+0x572>
 8002288:	e6d0      	b.n	800202c <__aeabi_dsub+0x314>
 800228a:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <__aeabi_dsub+0x68c>)
 800228c:	3501      	adds	r5, #1
 800228e:	4019      	ands	r1, r3
 8002290:	e5b2      	b.n	8001df8 <__aeabi_dsub+0xe0>
 8002292:	46b1      	mov	r9, r6
 8002294:	e65d      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8002296:	0033      	movs	r3, r6
 8002298:	4667      	mov	r7, ip
 800229a:	3b20      	subs	r3, #32
 800229c:	40df      	lsrs	r7, r3
 800229e:	003b      	movs	r3, r7
 80022a0:	2e20      	cmp	r6, #32
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dsub+0x598>
 80022a4:	2740      	movs	r7, #64	; 0x40
 80022a6:	1bbf      	subs	r7, r7, r6
 80022a8:	4666      	mov	r6, ip
 80022aa:	40be      	lsls	r6, r7
 80022ac:	4332      	orrs	r2, r6
 80022ae:	4690      	mov	r8, r2
 80022b0:	4646      	mov	r6, r8
 80022b2:	1e72      	subs	r2, r6, #1
 80022b4:	4196      	sbcs	r6, r2
 80022b6:	4333      	orrs	r3, r6
 80022b8:	e5ef      	b.n	8001e9a <__aeabi_dsub+0x182>
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <__aeabi_dsub+0x688>)
 80022bc:	429f      	cmp	r7, r3
 80022be:	d0cb      	beq.n	8002258 <__aeabi_dsub+0x540>
 80022c0:	2580      	movs	r5, #128	; 0x80
 80022c2:	042d      	lsls	r5, r5, #16
 80022c4:	4273      	negs	r3, r6
 80022c6:	4329      	orrs	r1, r5
 80022c8:	e7a8      	b.n	800221c <__aeabi_dsub+0x504>
 80022ca:	4308      	orrs	r0, r1
 80022cc:	1e41      	subs	r1, r0, #1
 80022ce:	4188      	sbcs	r0, r1
 80022d0:	e6a2      	b.n	8002018 <__aeabi_dsub+0x300>
 80022d2:	2f00      	cmp	r7, #0
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x5c0>
 80022d6:	e63c      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80022d8:	4663      	mov	r3, ip
 80022da:	1a86      	subs	r6, r0, r2
 80022dc:	1acf      	subs	r7, r1, r3
 80022de:	42b0      	cmp	r0, r6
 80022e0:	419b      	sbcs	r3, r3
 80022e2:	425b      	negs	r3, r3
 80022e4:	1afb      	subs	r3, r7, r3
 80022e6:	4698      	mov	r8, r3
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	d54e      	bpl.n	800238a <__aeabi_dsub+0x672>
 80022ec:	1a16      	subs	r6, r2, r0
 80022ee:	4663      	mov	r3, ip
 80022f0:	42b2      	cmp	r2, r6
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	1a59      	subs	r1, r3, r1
 80022f6:	4252      	negs	r2, r2
 80022f8:	1a89      	subs	r1, r1, r2
 80022fa:	465c      	mov	r4, fp
 80022fc:	2200      	movs	r2, #0
 80022fe:	e57b      	b.n	8001df8 <__aeabi_dsub+0xe0>
 8002300:	4301      	orrs	r1, r0
 8002302:	000e      	movs	r6, r1
 8002304:	1e71      	subs	r1, r6, #1
 8002306:	418e      	sbcs	r6, r1
 8002308:	e79f      	b.n	800224a <__aeabi_dsub+0x532>
 800230a:	001d      	movs	r5, r3
 800230c:	000e      	movs	r6, r1
 800230e:	3d20      	subs	r5, #32
 8002310:	40ee      	lsrs	r6, r5
 8002312:	46b0      	mov	r8, r6
 8002314:	2b20      	cmp	r3, #32
 8002316:	d004      	beq.n	8002322 <__aeabi_dsub+0x60a>
 8002318:	2540      	movs	r5, #64	; 0x40
 800231a:	1aeb      	subs	r3, r5, r3
 800231c:	4099      	lsls	r1, r3
 800231e:	4308      	orrs	r0, r1
 8002320:	4681      	mov	r9, r0
 8002322:	4648      	mov	r0, r9
 8002324:	4643      	mov	r3, r8
 8002326:	1e41      	subs	r1, r0, #1
 8002328:	4188      	sbcs	r0, r1
 800232a:	4318      	orrs	r0, r3
 800232c:	e674      	b.n	8002018 <__aeabi_dsub+0x300>
 800232e:	2200      	movs	r2, #0
 8002330:	2400      	movs	r4, #0
 8002332:	e617      	b.n	8001f64 <__aeabi_dsub+0x24c>
 8002334:	1a16      	subs	r6, r2, r0
 8002336:	4663      	mov	r3, ip
 8002338:	42b2      	cmp	r2, r6
 800233a:	4192      	sbcs	r2, r2
 800233c:	1a59      	subs	r1, r3, r1
 800233e:	4252      	negs	r2, r2
 8002340:	1a89      	subs	r1, r1, r2
 8002342:	003d      	movs	r5, r7
 8002344:	e525      	b.n	8001d92 <__aeabi_dsub+0x7a>
 8002346:	4661      	mov	r1, ip
 8002348:	4691      	mov	r9, r2
 800234a:	4d15      	ldr	r5, [pc, #84]	; (80023a0 <__aeabi_dsub+0x688>)
 800234c:	e601      	b.n	8001f52 <__aeabi_dsub+0x23a>
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	2400      	movs	r4, #0
 8002352:	0312      	lsls	r2, r2, #12
 8002354:	e679      	b.n	800204a <__aeabi_dsub+0x332>
 8002356:	001d      	movs	r5, r3
 8002358:	000e      	movs	r6, r1
 800235a:	3d20      	subs	r5, #32
 800235c:	40ee      	lsrs	r6, r5
 800235e:	46b0      	mov	r8, r6
 8002360:	2b20      	cmp	r3, #32
 8002362:	d004      	beq.n	800236e <__aeabi_dsub+0x656>
 8002364:	2540      	movs	r5, #64	; 0x40
 8002366:	1aeb      	subs	r3, r5, r3
 8002368:	4099      	lsls	r1, r3
 800236a:	4308      	orrs	r0, r1
 800236c:	4681      	mov	r9, r0
 800236e:	464e      	mov	r6, r9
 8002370:	4643      	mov	r3, r8
 8002372:	1e71      	subs	r1, r6, #1
 8002374:	418e      	sbcs	r6, r1
 8002376:	431e      	orrs	r6, r3
 8002378:	e767      	b.n	800224a <__aeabi_dsub+0x532>
 800237a:	1886      	adds	r6, r0, r2
 800237c:	4296      	cmp	r6, r2
 800237e:	419b      	sbcs	r3, r3
 8002380:	4461      	add	r1, ip
 8002382:	425b      	negs	r3, r3
 8002384:	18c9      	adds	r1, r1, r3
 8002386:	003d      	movs	r5, r7
 8002388:	e58c      	b.n	8001ea4 <__aeabi_dsub+0x18c>
 800238a:	4647      	mov	r7, r8
 800238c:	4337      	orrs	r7, r6
 800238e:	d0ce      	beq.n	800232e <__aeabi_dsub+0x616>
 8002390:	2207      	movs	r2, #7
 8002392:	4641      	mov	r1, r8
 8002394:	4032      	ands	r2, r6
 8002396:	e649      	b.n	800202c <__aeabi_dsub+0x314>
 8002398:	2700      	movs	r7, #0
 800239a:	003a      	movs	r2, r7
 800239c:	e5e6      	b.n	8001f6c <__aeabi_dsub+0x254>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	000007ff 	.word	0x000007ff
 80023a4:	ff7fffff 	.word	0xff7fffff

080023a8 <__aeabi_dcmpun>:
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	4e0c      	ldr	r6, [pc, #48]	; (80023dc <__aeabi_dcmpun+0x34>)
 80023ac:	030d      	lsls	r5, r1, #12
 80023ae:	031c      	lsls	r4, r3, #12
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	0b2d      	lsrs	r5, r5, #12
 80023b6:	0d49      	lsrs	r1, r1, #21
 80023b8:	0b24      	lsrs	r4, r4, #12
 80023ba:	0d5b      	lsrs	r3, r3, #21
 80023bc:	42b1      	cmp	r1, r6
 80023be:	d008      	beq.n	80023d2 <__aeabi_dcmpun+0x2a>
 80023c0:	4906      	ldr	r1, [pc, #24]	; (80023dc <__aeabi_dcmpun+0x34>)
 80023c2:	2000      	movs	r0, #0
 80023c4:	428b      	cmp	r3, r1
 80023c6:	d103      	bne.n	80023d0 <__aeabi_dcmpun+0x28>
 80023c8:	4314      	orrs	r4, r2
 80023ca:	0020      	movs	r0, r4
 80023cc:	1e44      	subs	r4, r0, #1
 80023ce:	41a0      	sbcs	r0, r4
 80023d0:	bd70      	pop	{r4, r5, r6, pc}
 80023d2:	4305      	orrs	r5, r0
 80023d4:	2001      	movs	r0, #1
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d1fa      	bne.n	80023d0 <__aeabi_dcmpun+0x28>
 80023da:	e7f1      	b.n	80023c0 <__aeabi_dcmpun+0x18>
 80023dc:	000007ff 	.word	0x000007ff

080023e0 <__aeabi_i2d>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d02d      	beq.n	8002442 <__aeabi_i2d+0x62>
 80023e6:	17c3      	asrs	r3, r0, #31
 80023e8:	18c5      	adds	r5, r0, r3
 80023ea:	405d      	eors	r5, r3
 80023ec:	0fc4      	lsrs	r4, r0, #31
 80023ee:	0028      	movs	r0, r5
 80023f0:	f000 f906 	bl	8002600 <__clzsi2>
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <__aeabi_i2d+0x6c>)
 80023f6:	1a1b      	subs	r3, r3, r0
 80023f8:	055b      	lsls	r3, r3, #21
 80023fa:	0d5b      	lsrs	r3, r3, #21
 80023fc:	280a      	cmp	r0, #10
 80023fe:	dd15      	ble.n	800242c <__aeabi_i2d+0x4c>
 8002400:	380b      	subs	r0, #11
 8002402:	4085      	lsls	r5, r0
 8002404:	2200      	movs	r2, #0
 8002406:	032d      	lsls	r5, r5, #12
 8002408:	0b2d      	lsrs	r5, r5, #12
 800240a:	2100      	movs	r1, #0
 800240c:	0010      	movs	r0, r2
 800240e:	032d      	lsls	r5, r5, #12
 8002410:	0d0a      	lsrs	r2, r1, #20
 8002412:	0b2d      	lsrs	r5, r5, #12
 8002414:	0512      	lsls	r2, r2, #20
 8002416:	432a      	orrs	r2, r5
 8002418:	4d0d      	ldr	r5, [pc, #52]	; (8002450 <__aeabi_i2d+0x70>)
 800241a:	051b      	lsls	r3, r3, #20
 800241c:	402a      	ands	r2, r5
 800241e:	4313      	orrs	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	07e4      	lsls	r4, r4, #31
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	4323      	orrs	r3, r4
 8002428:	0019      	movs	r1, r3
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	0002      	movs	r2, r0
 800242e:	0029      	movs	r1, r5
 8002430:	3215      	adds	r2, #21
 8002432:	4091      	lsls	r1, r2
 8002434:	000a      	movs	r2, r1
 8002436:	210b      	movs	r1, #11
 8002438:	1a08      	subs	r0, r1, r0
 800243a:	40c5      	lsrs	r5, r0
 800243c:	032d      	lsls	r5, r5, #12
 800243e:	0b2d      	lsrs	r5, r5, #12
 8002440:	e7e3      	b.n	800240a <__aeabi_i2d+0x2a>
 8002442:	2400      	movs	r4, #0
 8002444:	2300      	movs	r3, #0
 8002446:	2500      	movs	r5, #0
 8002448:	2200      	movs	r2, #0
 800244a:	e7de      	b.n	800240a <__aeabi_i2d+0x2a>
 800244c:	0000041e 	.word	0x0000041e
 8002450:	800fffff 	.word	0x800fffff

08002454 <__aeabi_f2d>:
 8002454:	0041      	lsls	r1, r0, #1
 8002456:	0e09      	lsrs	r1, r1, #24
 8002458:	1c4b      	adds	r3, r1, #1
 800245a:	b570      	push	{r4, r5, r6, lr}
 800245c:	b2db      	uxtb	r3, r3
 800245e:	0246      	lsls	r6, r0, #9
 8002460:	0a75      	lsrs	r5, r6, #9
 8002462:	0fc4      	lsrs	r4, r0, #31
 8002464:	2b01      	cmp	r3, #1
 8002466:	dd14      	ble.n	8002492 <__aeabi_f2d+0x3e>
 8002468:	23e0      	movs	r3, #224	; 0xe0
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	076d      	lsls	r5, r5, #29
 800246e:	0b36      	lsrs	r6, r6, #12
 8002470:	18cb      	adds	r3, r1, r3
 8002472:	2100      	movs	r1, #0
 8002474:	0d0a      	lsrs	r2, r1, #20
 8002476:	0028      	movs	r0, r5
 8002478:	0512      	lsls	r2, r2, #20
 800247a:	4d1c      	ldr	r5, [pc, #112]	; (80024ec <__aeabi_f2d+0x98>)
 800247c:	4332      	orrs	r2, r6
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	402a      	ands	r2, r5
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	4313      	orrs	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	07e4      	lsls	r4, r4, #31
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	4323      	orrs	r3, r4
 800248e:	0019      	movs	r1, r3
 8002490:	bd70      	pop	{r4, r5, r6, pc}
 8002492:	2900      	cmp	r1, #0
 8002494:	d114      	bne.n	80024c0 <__aeabi_f2d+0x6c>
 8002496:	2d00      	cmp	r5, #0
 8002498:	d01e      	beq.n	80024d8 <__aeabi_f2d+0x84>
 800249a:	0028      	movs	r0, r5
 800249c:	f000 f8b0 	bl	8002600 <__clzsi2>
 80024a0:	280a      	cmp	r0, #10
 80024a2:	dc1c      	bgt.n	80024de <__aeabi_f2d+0x8a>
 80024a4:	230b      	movs	r3, #11
 80024a6:	002a      	movs	r2, r5
 80024a8:	1a1b      	subs	r3, r3, r0
 80024aa:	40da      	lsrs	r2, r3
 80024ac:	0003      	movs	r3, r0
 80024ae:	3315      	adds	r3, #21
 80024b0:	409d      	lsls	r5, r3
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <__aeabi_f2d+0x9c>)
 80024b4:	0312      	lsls	r2, r2, #12
 80024b6:	1a1b      	subs	r3, r3, r0
 80024b8:	055b      	lsls	r3, r3, #21
 80024ba:	0b16      	lsrs	r6, r2, #12
 80024bc:	0d5b      	lsrs	r3, r3, #21
 80024be:	e7d8      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	d006      	beq.n	80024d2 <__aeabi_f2d+0x7e>
 80024c4:	0b32      	lsrs	r2, r6, #12
 80024c6:	2680      	movs	r6, #128	; 0x80
 80024c8:	0336      	lsls	r6, r6, #12
 80024ca:	076d      	lsls	r5, r5, #29
 80024cc:	4316      	orrs	r6, r2
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <__aeabi_f2d+0xa0>)
 80024d0:	e7cf      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <__aeabi_f2d+0xa0>)
 80024d4:	2600      	movs	r6, #0
 80024d6:	e7cc      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024d8:	2300      	movs	r3, #0
 80024da:	2600      	movs	r6, #0
 80024dc:	e7c9      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024de:	0003      	movs	r3, r0
 80024e0:	002a      	movs	r2, r5
 80024e2:	3b0b      	subs	r3, #11
 80024e4:	409a      	lsls	r2, r3
 80024e6:	2500      	movs	r5, #0
 80024e8:	e7e3      	b.n	80024b2 <__aeabi_f2d+0x5e>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	800fffff 	.word	0x800fffff
 80024f0:	00000389 	.word	0x00000389
 80024f4:	000007ff 	.word	0x000007ff

080024f8 <__aeabi_d2f>:
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	004c      	lsls	r4, r1, #1
 80024fc:	0d64      	lsrs	r4, r4, #21
 80024fe:	030b      	lsls	r3, r1, #12
 8002500:	1c62      	adds	r2, r4, #1
 8002502:	0a5b      	lsrs	r3, r3, #9
 8002504:	0f46      	lsrs	r6, r0, #29
 8002506:	0552      	lsls	r2, r2, #21
 8002508:	0fc9      	lsrs	r1, r1, #31
 800250a:	431e      	orrs	r6, r3
 800250c:	00c5      	lsls	r5, r0, #3
 800250e:	0d52      	lsrs	r2, r2, #21
 8002510:	2a01      	cmp	r2, #1
 8002512:	dd29      	ble.n	8002568 <__aeabi_d2f+0x70>
 8002514:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <__aeabi_d2f+0xfc>)
 8002516:	18e7      	adds	r7, r4, r3
 8002518:	2ffe      	cmp	r7, #254	; 0xfe
 800251a:	dc1c      	bgt.n	8002556 <__aeabi_d2f+0x5e>
 800251c:	2f00      	cmp	r7, #0
 800251e:	dd3b      	ble.n	8002598 <__aeabi_d2f+0xa0>
 8002520:	0180      	lsls	r0, r0, #6
 8002522:	1e43      	subs	r3, r0, #1
 8002524:	4198      	sbcs	r0, r3
 8002526:	2207      	movs	r2, #7
 8002528:	00f3      	lsls	r3, r6, #3
 800252a:	0f6d      	lsrs	r5, r5, #29
 800252c:	4303      	orrs	r3, r0
 800252e:	432b      	orrs	r3, r5
 8002530:	401a      	ands	r2, r3
 8002532:	2a00      	cmp	r2, #0
 8002534:	d004      	beq.n	8002540 <__aeabi_d2f+0x48>
 8002536:	220f      	movs	r2, #15
 8002538:	401a      	ands	r2, r3
 800253a:	2a04      	cmp	r2, #4
 800253c:	d000      	beq.n	8002540 <__aeabi_d2f+0x48>
 800253e:	3304      	adds	r3, #4
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	04d2      	lsls	r2, r2, #19
 8002544:	401a      	ands	r2, r3
 8002546:	d024      	beq.n	8002592 <__aeabi_d2f+0x9a>
 8002548:	3701      	adds	r7, #1
 800254a:	b2fa      	uxtb	r2, r7
 800254c:	2fff      	cmp	r7, #255	; 0xff
 800254e:	d002      	beq.n	8002556 <__aeabi_d2f+0x5e>
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	0a58      	lsrs	r0, r3, #9
 8002554:	e001      	b.n	800255a <__aeabi_d2f+0x62>
 8002556:	22ff      	movs	r2, #255	; 0xff
 8002558:	2000      	movs	r0, #0
 800255a:	0240      	lsls	r0, r0, #9
 800255c:	05d2      	lsls	r2, r2, #23
 800255e:	0a40      	lsrs	r0, r0, #9
 8002560:	07c9      	lsls	r1, r1, #31
 8002562:	4310      	orrs	r0, r2
 8002564:	4308      	orrs	r0, r1
 8002566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002568:	4335      	orrs	r5, r6
 800256a:	2c00      	cmp	r4, #0
 800256c:	d104      	bne.n	8002578 <__aeabi_d2f+0x80>
 800256e:	2d00      	cmp	r5, #0
 8002570:	d10a      	bne.n	8002588 <__aeabi_d2f+0x90>
 8002572:	2200      	movs	r2, #0
 8002574:	2000      	movs	r0, #0
 8002576:	e7f0      	b.n	800255a <__aeabi_d2f+0x62>
 8002578:	2d00      	cmp	r5, #0
 800257a:	d0ec      	beq.n	8002556 <__aeabi_d2f+0x5e>
 800257c:	2080      	movs	r0, #128	; 0x80
 800257e:	03c0      	lsls	r0, r0, #15
 8002580:	4330      	orrs	r0, r6
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	e7e9      	b.n	800255a <__aeabi_d2f+0x62>
 8002586:	2400      	movs	r4, #0
 8002588:	2300      	movs	r3, #0
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	0a58      	lsrs	r0, r3, #9
 800258e:	b2e2      	uxtb	r2, r4
 8002590:	e7e3      	b.n	800255a <__aeabi_d2f+0x62>
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	003c      	movs	r4, r7
 8002596:	e7f8      	b.n	800258a <__aeabi_d2f+0x92>
 8002598:	003b      	movs	r3, r7
 800259a:	3317      	adds	r3, #23
 800259c:	dbf3      	blt.n	8002586 <__aeabi_d2f+0x8e>
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	4333      	orrs	r3, r6
 80025a4:	261e      	movs	r6, #30
 80025a6:	1bf6      	subs	r6, r6, r7
 80025a8:	2e1f      	cmp	r6, #31
 80025aa:	dd14      	ble.n	80025d6 <__aeabi_d2f+0xde>
 80025ac:	2202      	movs	r2, #2
 80025ae:	4252      	negs	r2, r2
 80025b0:	1bd7      	subs	r7, r2, r7
 80025b2:	001a      	movs	r2, r3
 80025b4:	40fa      	lsrs	r2, r7
 80025b6:	0017      	movs	r7, r2
 80025b8:	2e20      	cmp	r6, #32
 80025ba:	d004      	beq.n	80025c6 <__aeabi_d2f+0xce>
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <__aeabi_d2f+0x100>)
 80025be:	4694      	mov	ip, r2
 80025c0:	4464      	add	r4, ip
 80025c2:	40a3      	lsls	r3, r4
 80025c4:	431d      	orrs	r5, r3
 80025c6:	002b      	movs	r3, r5
 80025c8:	1e5d      	subs	r5, r3, #1
 80025ca:	41ab      	sbcs	r3, r5
 80025cc:	2207      	movs	r2, #7
 80025ce:	433b      	orrs	r3, r7
 80025d0:	401a      	ands	r2, r3
 80025d2:	2700      	movs	r7, #0
 80025d4:	e7ad      	b.n	8002532 <__aeabi_d2f+0x3a>
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <__aeabi_d2f+0x104>)
 80025d8:	0028      	movs	r0, r5
 80025da:	18a2      	adds	r2, r4, r2
 80025dc:	4095      	lsls	r5, r2
 80025de:	4093      	lsls	r3, r2
 80025e0:	1e6c      	subs	r4, r5, #1
 80025e2:	41a5      	sbcs	r5, r4
 80025e4:	40f0      	lsrs	r0, r6
 80025e6:	2207      	movs	r2, #7
 80025e8:	432b      	orrs	r3, r5
 80025ea:	4303      	orrs	r3, r0
 80025ec:	401a      	ands	r2, r3
 80025ee:	2700      	movs	r7, #0
 80025f0:	e79f      	b.n	8002532 <__aeabi_d2f+0x3a>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	fffffc80 	.word	0xfffffc80
 80025f8:	fffffca2 	.word	0xfffffca2
 80025fc:	fffffc82 	.word	0xfffffc82

08002600 <__clzsi2>:
 8002600:	211c      	movs	r1, #28
 8002602:	2301      	movs	r3, #1
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	4298      	cmp	r0, r3
 8002608:	d301      	bcc.n	800260e <__clzsi2+0xe>
 800260a:	0c00      	lsrs	r0, r0, #16
 800260c:	3910      	subs	r1, #16
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	4298      	cmp	r0, r3
 8002612:	d301      	bcc.n	8002618 <__clzsi2+0x18>
 8002614:	0a00      	lsrs	r0, r0, #8
 8002616:	3908      	subs	r1, #8
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	4298      	cmp	r0, r3
 800261c:	d301      	bcc.n	8002622 <__clzsi2+0x22>
 800261e:	0900      	lsrs	r0, r0, #4
 8002620:	3904      	subs	r1, #4
 8002622:	a202      	add	r2, pc, #8	; (adr r2, 800262c <__clzsi2+0x2c>)
 8002624:	5c10      	ldrb	r0, [r2, r0]
 8002626:	1840      	adds	r0, r0, r1
 8002628:	4770      	bx	lr
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	02020304 	.word	0x02020304
 8002630:	01010101 	.word	0x01010101
	...

0800263c <__clzdi2>:
 800263c:	b510      	push	{r4, lr}
 800263e:	2900      	cmp	r1, #0
 8002640:	d103      	bne.n	800264a <__clzdi2+0xe>
 8002642:	f7ff ffdd 	bl	8002600 <__clzsi2>
 8002646:	3020      	adds	r0, #32
 8002648:	e002      	b.n	8002650 <__clzdi2+0x14>
 800264a:	1c08      	adds	r0, r1, #0
 800264c:	f7ff ffd8 	bl	8002600 <__clzsi2>
 8002650:	bd10      	pop	{r4, pc}
 8002652:	46c0      	nop			; (mov r8, r8)

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b093      	sub	sp, #76	; 0x4c
 8002658:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800265a:	f001 f92f 	bl	80038bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800265e:	f000 f81f 	bl	80026a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002662:	f000 f9b5 	bl	80029d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002666:	f000 f8d7 	bl	8002818 <MX_SPI1_Init>
  MX_TIM2_Init();
 800266a:	f000 f90d 	bl	8002888 <MX_TIM2_Init>
  MX_I2C1_Init();
 800266e:	f000 f893 	bl	8002798 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002672:	f000 f97d 	bl	8002970 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002676:	f000 f881 	bl	800277c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  struct bme280_dev bme280_device;
  int8_t rslt = BME280_OK;
 800267a:	2147      	movs	r1, #71	; 0x47
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
  bme280_device.dev_id = BME280_I2C_ADDR_PRIM;
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2276      	movs	r2, #118	; 0x76
 8002686:	705a      	strb	r2, [r3, #1]
  bme280_device.intf = BME280_I2C_INTF;
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	2201      	movs	r2, #1
 800268c:	709a      	strb	r2, [r3, #2]
  // TODO: Create our read, write, and delay_ms functions
//  bme280_device.read = ?
//  bme280_device.write = ?
//  bme280_delay_ms = ?
  rslt = bme280_init(&bme280_device);
 800268e:	187c      	adds	r4, r7, r1
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fdb1 	bl	80031fa <bme280_init>
 8002698:	0003      	movs	r3, r0
 800269a:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800269c:	e7fe      	b.n	800269c <main+0x48>
	...

080026a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b09f      	sub	sp, #124	; 0x7c
 80026a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a6:	2440      	movs	r4, #64	; 0x40
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	0018      	movs	r0, r3
 80026ac:	2338      	movs	r3, #56	; 0x38
 80026ae:	001a      	movs	r2, r3
 80026b0:	2100      	movs	r1, #0
 80026b2:	f004 fd55 	bl	8007160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b6:	232c      	movs	r3, #44	; 0x2c
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	0018      	movs	r0, r3
 80026bc:	2314      	movs	r3, #20
 80026be:	001a      	movs	r2, r3
 80026c0:	2100      	movs	r1, #0
 80026c2:	f004 fd4d 	bl	8007160 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	0018      	movs	r0, r3
 80026ca:	2328      	movs	r3, #40	; 0x28
 80026cc:	001a      	movs	r2, r3
 80026ce:	2100      	movs	r1, #0
 80026d0:	f004 fd46 	bl	8007160 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <SystemClock_Config+0xd4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <SystemClock_Config+0xd8>)
 80026da:	401a      	ands	r2, r3
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <SystemClock_Config+0xd4>)
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0109      	lsls	r1, r1, #4
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026e6:	0021      	movs	r1, r4
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	2210      	movs	r2, #16
 80026ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	2201      	movs	r2, #1
 80026f2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2200      	movs	r2, #0
 80026f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	22a0      	movs	r2, #160	; 0xa0
 80026fe:	0212      	lsls	r2, r2, #8
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	2200      	movs	r2, #0
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002708:	187b      	adds	r3, r7, r1
 800270a:	0018      	movs	r0, r3
 800270c:	f001 fce0 	bl	80040d0 <HAL_RCC_OscConfig>
 8002710:	1e03      	subs	r3, r0, #0
 8002712:	d001      	beq.n	8002718 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002714:	f000 fa08 	bl	8002b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	187b      	adds	r3, r7, r1
 800271c:	220f      	movs	r2, #15
 800271e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2100      	movs	r1, #0
 800273c:	0018      	movs	r0, r3
 800273e:	f002 f897 	bl	8004870 <HAL_RCC_ClockConfig>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d001      	beq.n	800274a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002746:	f000 f9ef 	bl	8002b28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	220a      	movs	r2, #10
 800274e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	0018      	movs	r0, r3
 8002760:	f002 fa6a 	bl	8004c38 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002768:	f000 f9de 	bl	8002b28 <Error_Handler>
  }
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b01f      	add	sp, #124	; 0x7c
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	40007000 	.word	0x40007000
 8002778:	ffffe7ff 	.word	0xffffe7ff

0800277c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002780:	2200      	movs	r2, #0
 8002782:	2101      	movs	r1, #1
 8002784:	200f      	movs	r0, #15
 8002786:	f001 f995 	bl	8003ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800278a:	200f      	movs	r0, #15
 800278c:	f001 f9a7 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <MX_I2C1_Init+0x78>)
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <MX_I2C1_Init+0x7c>)
 80027a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <MX_I2C1_Init+0x78>)
 80027a4:	22e1      	movs	r2, #225	; 0xe1
 80027a6:	00d2      	lsls	r2, r2, #3
 80027a8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <MX_I2C1_Init+0x78>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <MX_I2C1_Init+0x78>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <MX_I2C1_Init+0x78>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_I2C1_Init+0x78>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <MX_I2C1_Init+0x78>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <MX_I2C1_Init+0x78>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <MX_I2C1_Init+0x78>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <MX_I2C1_Init+0x78>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f001 fb4c 	bl	8003e74 <HAL_I2C_Init>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027e0:	f000 f9a2 	bl	8002b28 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <MX_I2C1_Init+0x78>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	0018      	movs	r0, r3
 80027ea:	f001 fbd9 	bl	8003fa0 <HAL_I2CEx_ConfigAnalogFilter>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d001      	beq.n	80027f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80027f2:	f000 f999 	bl	8002b28 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_I2C1_Init+0x78>)
 80027f8:	2100      	movs	r1, #0
 80027fa:	0018      	movs	r0, r3
 80027fc:	f001 fc1c 	bl	8004038 <HAL_I2CEx_ConfigDigitalFilter>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002804:	f000 f990 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	2000008c 	.word	0x2000008c
 8002814:	40005400 	.word	0x40005400

08002818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_SPI1_Init+0x68>)
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <MX_SPI1_Init+0x6c>)
 8002820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <MX_SPI1_Init+0x68>)
 8002824:	2282      	movs	r2, #130	; 0x82
 8002826:	0052      	lsls	r2, r2, #1
 8002828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <MX_SPI1_Init+0x68>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_SPI1_Init+0x68>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <MX_SPI1_Init+0x68>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_SPI1_Init+0x68>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <MX_SPI1_Init+0x68>)
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	02d2      	lsls	r2, r2, #11
 8002848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <MX_SPI1_Init+0x68>)
 800284c:	2238      	movs	r2, #56	; 0x38
 800284e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_SPI1_Init+0x68>)
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <MX_SPI1_Init+0x68>)
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_SPI1_Init+0x68>)
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <MX_SPI1_Init+0x68>)
 8002864:	2207      	movs	r2, #7
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <MX_SPI1_Init+0x68>)
 800286a:	0018      	movs	r0, r3
 800286c:	f002 fb58 	bl	8004f20 <HAL_SPI_Init>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d001      	beq.n	8002878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002874:	f000 f958 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	200000d8 	.word	0x200000d8
 8002884:	40013000 	.word	0x40013000

08002888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288e:	2320      	movs	r3, #32
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	0018      	movs	r0, r3
 8002894:	2310      	movs	r3, #16
 8002896:	001a      	movs	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f004 fc61 	bl	8007160 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800289e:	230c      	movs	r3, #12
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	0018      	movs	r0, r3
 80028a4:	2314      	movs	r3, #20
 80028a6:	001a      	movs	r2, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	f004 fc59 	bl	8007160 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	0018      	movs	r0, r3
 80028b2:	2308      	movs	r3, #8
 80028b4:	001a      	movs	r2, r3
 80028b6:	2100      	movs	r1, #0
 80028b8:	f004 fc52 	bl	8007160 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <MX_TIM2_Init+0xdc>)
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	05d2      	lsls	r2, r2, #23
 80028c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 80028c4:	4b27      	ldr	r3, [pc, #156]	; (8002964 <MX_TIM2_Init+0xdc>)
 80028c6:	4a28      	ldr	r2, [pc, #160]	; (8002968 <MX_TIM2_Init+0xe0>)
 80028c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <MX_TIM2_Init+0xdc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <MX_TIM2_Init+0xdc>)
 80028d2:	4a26      	ldr	r2, [pc, #152]	; (800296c <MX_TIM2_Init+0xe4>)
 80028d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <MX_TIM2_Init+0xdc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <MX_TIM2_Init+0xdc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <MX_TIM2_Init+0xdc>)
 80028e4:	0018      	movs	r0, r3
 80028e6:	f003 f8c4 	bl	8005a72 <HAL_TIM_Base_Init>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80028ee:	f000 f91b 	bl	8002b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f2:	2120      	movs	r1, #32
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	0152      	lsls	r2, r2, #5
 80028fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028fc:	187a      	adds	r2, r7, r1
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <MX_TIM2_Init+0xdc>)
 8002900:	0011      	movs	r1, r2
 8002902:	0018      	movs	r0, r3
 8002904:	f003 f9ec 	bl	8005ce0 <HAL_TIM_ConfigClockSource>
 8002908:	1e03      	subs	r3, r0, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800290c:	f000 f90c 	bl	8002b28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002910:	210c      	movs	r1, #12
 8002912:	187b      	adds	r3, r7, r1
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800291e:	187a      	adds	r2, r7, r1
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <MX_TIM2_Init+0xdc>)
 8002922:	0011      	movs	r1, r2
 8002924:	0018      	movs	r0, r3
 8002926:	f003 fa99 	bl	8005e5c <HAL_TIM_SlaveConfigSynchro>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800292e:	f000 f8fb 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2200      	movs	r2, #0
 800293c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800293e:	1d3a      	adds	r2, r7, #4
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <MX_TIM2_Init+0xdc>)
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f003 fc73 	bl	8006230 <HAL_TIMEx_MasterConfigSynchronization>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800294e:	f000 f8eb 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <MX_TIM2_Init+0xdc>)
 8002954:	0018      	movs	r0, r3
 8002956:	f003 f8b8 	bl	8005aca <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b00c      	add	sp, #48	; 0x30
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20000130 	.word	0x20000130
 8002968:	00001b58 	.word	0x00001b58
 800296c:	00000bb8 	.word	0x00000bb8

08002970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002976:	4a15      	ldr	r2, [pc, #84]	; (80029cc <MX_USART2_UART_Init+0x5c>)
 8002978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 11520;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 800297c:	22b4      	movs	r2, #180	; 0xb4
 800297e:	0192      	lsls	r2, r2, #6
 8002980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 8002996:	220c      	movs	r2, #12
 8002998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <MX_USART2_UART_Init+0x58>)
 80029b4:	0018      	movs	r0, r3
 80029b6:	f003 fc7f 	bl	80062b8 <HAL_UART_Init>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d001      	beq.n	80029c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029be:	f000 f8b3 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000016c 	.word	0x2000016c
 80029cc:	40004400 	.word	0x40004400

080029d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b08b      	sub	sp, #44	; 0x2c
 80029d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	2414      	movs	r4, #20
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	0018      	movs	r0, r3
 80029dc:	2314      	movs	r3, #20
 80029de:	001a      	movs	r2, r3
 80029e0:	2100      	movs	r1, #0
 80029e2:	f004 fbbd 	bl	8007160 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e6:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <MX_GPIO_Init+0x144>)
 80029e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <MX_GPIO_Init+0x144>)
 80029ec:	2104      	movs	r1, #4
 80029ee:	430a      	orrs	r2, r1
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029f2:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <MX_GPIO_Init+0x144>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	2204      	movs	r2, #4
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029fe:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	4b44      	ldr	r3, [pc, #272]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	430a      	orrs	r2, r1
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	4013      	ands	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a22:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	2201      	movs	r2, #1
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a34:	2102      	movs	r1, #2
 8002a36:	430a      	orrs	r2, r1
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <MX_GPIO_Init+0x144>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 8002a46:	23a0      	movs	r3, #160	; 0xa0
 8002a48:	05db      	lsls	r3, r3, #23
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2120      	movs	r1, #32
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f001 f9e0 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <MX_GPIO_Init+0x148>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	2110      	movs	r1, #16
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f001 f9da 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 8002a60:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <MX_GPIO_Init+0x148>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	2120      	movs	r1, #32
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 f9d4 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8002a6c:	492b      	ldr	r1, [pc, #172]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <MX_GPIO_Init+0x150>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f001 f9ce 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0192      	lsls	r2, r2, #6
 8002a7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <MX_GPIO_Init+0x154>)
 8002a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	193b      	adds	r3, r7, r4
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <MX_GPIO_Init+0x148>)
 8002a90:	0019      	movs	r1, r3
 8002a92:	0010      	movs	r0, r2
 8002a94:	f001 f840 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8002a98:	193b      	adds	r3, r7, r4
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	193a      	adds	r2, r7, r4
 8002ab2:	23a0      	movs	r3, #160	; 0xa0
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f001 f82d 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8002abe:	0021      	movs	r1, r4
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2230      	movs	r2, #48	; 0x30
 8002ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2201      	movs	r2, #1
 8002aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad8:	000c      	movs	r4, r1
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <MX_GPIO_Init+0x148>)
 8002ade:	0019      	movs	r1, r3
 8002ae0:	0010      	movs	r0, r2
 8002ae2:	f001 f819 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 8002ae6:	0021      	movs	r1, r4
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002aec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2201      	movs	r2, #1
 8002af2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <MX_GPIO_Init+0x150>)
 8002b04:	0019      	movs	r1, r3
 8002b06:	0010      	movs	r0, r2
 8002b08:	f001 f806 	bl	8003b18 <HAL_GPIO_Init>

}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b00b      	add	sp, #44	; 0x2c
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	50000800 	.word	0x50000800
 8002b1c:	00002001 	.word	0x00002001
 8002b20:	50000400 	.word	0x50000400
 8002b24:	10210000 	.word	0x10210000

08002b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_MspInit+0x24>)
 8002b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_MspInit+0x24>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	430a      	orrs	r2, r1
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <HAL_MspInit+0x24>)
 8002b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_MspInit+0x24>)
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0549      	lsls	r1, r1, #21
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	230c      	movs	r3, #12
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	0018      	movs	r0, r3
 8002b6a:	2314      	movs	r3, #20
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f004 faf6 	bl	8007160 <memset>
  if(hi2c->Instance==I2C1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_I2C_MspInit+0x80>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12a      	bne.n	8002bd4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_I2C_MspInit+0x84>)
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_I2C_MspInit+0x84>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_I2C_MspInit+0x84>)
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b96:	210c      	movs	r1, #12
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	22c0      	movs	r2, #192	; 0xc0
 8002b9c:	00d2      	lsls	r2, r2, #3
 8002b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2212      	movs	r2, #18
 8002ba4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2206      	movs	r2, #6
 8002bb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	187a      	adds	r2, r7, r1
 8002bba:	23a0      	movs	r3, #160	; 0xa0
 8002bbc:	05db      	lsls	r3, r3, #23
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f000 ffa9 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_I2C_MspInit+0x84>)
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_I2C_MspInit+0x84>)
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	0389      	lsls	r1, r1, #14
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b008      	add	sp, #32
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40005400 	.word	0x40005400
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b08b      	sub	sp, #44	; 0x2c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	2314      	movs	r3, #20
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	2314      	movs	r3, #20
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f004 fab2 	bl	8007160 <memset>
  if(hspi->Instance==SPI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <HAL_SPI_MspInit+0xc4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d14b      	bne.n	8002c9e <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0a:	4b28      	ldr	r3, [pc, #160]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	0149      	lsls	r1, r1, #5
 8002c10:	430a      	orrs	r2, r1
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	2201      	movs	r2, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c32:	2102      	movs	r1, #2
 8002c34:	430a      	orrs	r2, r1
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_SPI_MspInit+0xc8>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002c44:	2414      	movs	r4, #20
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	22d0      	movs	r2, #208	; 0xd0
 8002c4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	2202      	movs	r2, #2
 8002c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	193a      	adds	r2, r7, r4
 8002c66:	23a0      	movs	r3, #160	; 0xa0
 8002c68:	05db      	lsls	r3, r3, #23
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 ff53 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8002c72:	0021      	movs	r1, r4
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2208      	movs	r2, #8
 8002c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <HAL_SPI_MspInit+0xcc>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f000 ff3d 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b00b      	add	sp, #44	; 0x2c
 8002ca4:	bd90      	pop	{r4, r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40013000 	.word	0x40013000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	50000400 	.word	0x50000400

08002cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	05db      	lsls	r3, r3, #23
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d105      	bne.n	8002cd4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_TIM_Base_MspInit+0x28>)
 8002cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_TIM_Base_MspInit+0x28>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	230c      	movs	r3, #12
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	0018      	movs	r0, r3
 8002cee:	2314      	movs	r3, #20
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	f004 fa34 	bl	8007160 <memset>
  if(huart->Instance==USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_UART_MspInit+0x80>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d129      	bne.n	8002d56 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_UART_MspInit+0x84>)
 8002d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <HAL_UART_MspInit+0x84>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0289      	lsls	r1, r1, #10
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_UART_MspInit+0x84>)
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_UART_MspInit+0x84>)
 8002d16:	2101      	movs	r1, #1
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_UART_MspInit+0x84>)
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2201      	movs	r2, #1
 8002d22:	4013      	ands	r3, r2
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d28:	210c      	movs	r1, #12
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	220c      	movs	r2, #12
 8002d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2202      	movs	r2, #2
 8002d34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2204      	movs	r2, #4
 8002d46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	187a      	adds	r2, r7, r1
 8002d4a:	23a0      	movs	r3, #160	; 0xa0
 8002d4c:	05db      	lsls	r3, r3, #23
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 fee1 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b008      	add	sp, #32
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	40004400 	.word	0x40004400
 8002d64:	40021000 	.word	0x40021000

08002d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <HardFault_Handler+0x4>

08002d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed_digital = 0;
 8002d9e:	2416      	movs	r4, #22
 8002da0:	193b      	adds	r3, r7, r4
 8002da2:	2200      	movs	r2, #0
 8002da4:	801a      	strh	r2, [r3, #0]
  uint16_t wind_temp_digital = 0;
 8002da6:	2514      	movs	r5, #20
 8002da8:	197b      	adds	r3, r7, r5
 8002daa:	2200      	movs	r2, #0
 8002dac:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch2 = 0;
 8002dae:	2612      	movs	r6, #18
 8002db0:	19bb      	adds	r3, r7, r6
 8002db2:	2200      	movs	r2, #0
 8002db4:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch3 = 0;
 8002db6:	2310      	movs	r3, #16
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2200      	movs	r2, #0
 8002dbc:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch4 = 0;
 8002dbe:	220e      	movs	r2, #14
 8002dc0:	18bb      	adds	r3, r7, r2
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch5 = 0;
 8002dc6:	210c      	movs	r1, #12
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2200      	movs	r2, #0
 8002dcc:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch6 = 0;
 8002dce:	200a      	movs	r0, #10
 8002dd0:	183b      	adds	r3, r7, r0
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch7 = 0;
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2200      	movs	r2, #0
 8002ddc:	801a      	strh	r2, [r3, #0]
  uint16_t tph_data = 0;
 8002dde:	221e      	movs	r2, #30
 8002de0:	18bb      	adds	r3, r7, r2
 8002de2:	2200      	movs	r2, #0
 8002de4:	801a      	strh	r2, [r3, #0]
  uint8_t wifi_data = 0;
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
  uint8_t wifi_data1 = 0;
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
  uint8_t a = 'A';
 8002df2:	1d7b      	adds	r3, r7, #5
 8002df4:	2241      	movs	r2, #65	; 0x41
 8002df6:	701a      	strb	r2, [r3, #0]
  uint8_t t = 'T';
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2254      	movs	r2, #84	; 0x54
 8002dfc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <TIM2_IRQHandler+0x118>)
 8002e00:	0018      	movs	r0, r3
 8002e02:	f002 fe84 	bl	8005b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Toggle_User_LED();
 8002e06:	f000 f857 	bl	8002eb8 <Toggle_User_LED>

  /* Read ADC Wind Speed Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_SPEED_CH, &wind_speed_digital);
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	2080      	movs	r0, #128	; 0x80
 8002e10:	f000 f880 	bl	8002f14 <Read_ADC>

  /* Read ADC Wind Temp Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_TEMP_CH, &wind_temp_digital);
 8002e14:	197b      	adds	r3, r7, r5
 8002e16:	0019      	movs	r1, r3
 8002e18:	2090      	movs	r0, #144	; 0x90
 8002e1a:	f000 f87b 	bl	8002f14 <Read_ADC>

  Read_ADC((uint8_t) ADC_DIN_CH2, &din_ch2);
 8002e1e:	19bb      	adds	r3, r7, r6
 8002e20:	0019      	movs	r1, r3
 8002e22:	20a0      	movs	r0, #160	; 0xa0
 8002e24:	f000 f876 	bl	8002f14 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH3, &din_ch3);
 8002e28:	2310      	movs	r3, #16
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	20b0      	movs	r0, #176	; 0xb0
 8002e30:	f000 f870 	bl	8002f14 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH4, &din_ch4);
 8002e34:	220e      	movs	r2, #14
 8002e36:	18bb      	adds	r3, r7, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	20c0      	movs	r0, #192	; 0xc0
 8002e3c:	f000 f86a 	bl	8002f14 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH5, &din_ch5);
 8002e40:	210c      	movs	r1, #12
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	0019      	movs	r1, r3
 8002e46:	20d0      	movs	r0, #208	; 0xd0
 8002e48:	f000 f864 	bl	8002f14 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH6, &din_ch6);
 8002e4c:	200a      	movs	r0, #10
 8002e4e:	183b      	adds	r3, r7, r0
 8002e50:	0019      	movs	r1, r3
 8002e52:	20e0      	movs	r0, #224	; 0xe0
 8002e54:	f000 f85e 	bl	8002f14 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH7, &din_ch7);
 8002e58:	2308      	movs	r3, #8
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	20f0      	movs	r0, #240	; 0xf0
 8002e60:	f000 f858 	bl	8002f14 <Read_ADC>

  HAL_UART_Transmit_IT(&huart2, &a, sizeof(uint16_t));
 8002e64:	1d79      	adds	r1, r7, #5
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <TIM2_IRQHandler+0x11c>)
 8002e68:	2202      	movs	r2, #2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f003 fa78 	bl	8006360 <HAL_UART_Transmit_IT>
  HAL_UART_Transmit_IT(&huart2, &t, sizeof(uint16_t));
 8002e70:	1d39      	adds	r1, r7, #4
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <TIM2_IRQHandler+0x11c>)
 8002e74:	2202      	movs	r2, #2
 8002e76:	0018      	movs	r0, r3
 8002e78:	f003 fa72 	bl	8006360 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &wifi_data, sizeof(uint16_t));
 8002e7c:	1df9      	adds	r1, r7, #7
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <TIM2_IRQHandler+0x11c>)
 8002e80:	2202      	movs	r2, #2
 8002e82:	0018      	movs	r0, r3
 8002e84:	f003 fada 	bl	800643c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &wifi_data1, sizeof(uint16_t));
 8002e88:	1db9      	adds	r1, r7, #6
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <TIM2_IRQHandler+0x11c>)
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f003 fad4 	bl	800643c <HAL_UART_Receive_IT>
//  // TODO: Read from Sensor
//  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
//  /* Toggle SS2 High to un-select sensor */

  /* Calculations Done Here */
  float wind_speed = calculate_wind_speed(wind_speed_digital, wind_temp_digital);
 8002e94:	193b      	adds	r3, r7, r4
 8002e96:	881a      	ldrh	r2, [r3, #0]
 8002e98:	197b      	adds	r3, r7, r5
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	0010      	movs	r0, r2
 8002ea0:	f000 f89e 	bl	8002fe0 <calculate_wind_speed>
 8002ea4:	1c03      	adds	r3, r0, #0
 8002ea6:	61bb      	str	r3, [r7, #24]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b009      	add	sp, #36	; 0x24
 8002eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb0:	20000130 	.word	0x20000130
 8002eb4:	2000016c 	.word	0x2000016c

08002eb8 <Toggle_User_LED>:
/* USER CODE BEGIN 1 */
/**
 * 	@brief Toggle LED
 */
void Toggle_User_LED()
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8002ebc:	23a0      	movs	r3, #160	; 0xa0
 8002ebe:	05db      	lsls	r3, r3, #23
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 ffc3 	bl	8003e4e <HAL_GPIO_TogglePin>
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <Toggle_ADC_Chip_Select>:

/**
 * 	@brief Toggle ADC Chip Select Pin
 */
void Toggle_ADC_Chip_Select()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ADC_CS_GPIO_Port, ADC_CS_PIN);
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <Toggle_ADC_Chip_Select+0x14>)
 8002ed6:	2110      	movs	r1, #16
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f000 ffb8 	bl	8003e4e <HAL_GPIO_TogglePin>
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	50000800 	.word	0x50000800

08002ee8 <HAL_SPI_Transmit_Start>:

/**
 * 	@brief Transmit Start Bit in HAL SPI
 */
void HAL_SPI_Transmit_Start()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
	uint8_t adc_start = (uint8_t) ADC_START_BIT;
 8002eee:	1dfb      	adds	r3, r7, #7
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &adc_start, sizeof(adc_start), SPI_TIMEOUT);
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_SPI_Transmit_Start+0x24>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1df9      	adds	r1, r7, #7
 8002efa:	4805      	ldr	r0, [pc, #20]	; (8002f10 <HAL_SPI_Transmit_Start+0x28>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	f002 f879 	bl	8004ff4 <HAL_SPI_Transmit>
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b002      	add	sp, #8
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	08008298 	.word	0x08008298
 8002f10:	200000d8 	.word	0x200000d8

08002f14 <Read_ADC>:
 * 	@brief Read MCP3008 ADC based on given channel enum.
 *	Output is set to the pointer of a uint16_t set in the parameters.
 *	Output will be set to 0 before setting the ADC Value to it.
 */
void Read_ADC(uint8_t adc_ch_select, uint16_t *output)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_1 = 0;
 8002f22:	240f      	movs	r4, #15
 8002f24:	193b      	adds	r3, r7, r4
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_2 = 0;
 8002f2a:	250e      	movs	r5, #14
 8002f2c:	197b      	adds	r3, r7, r5
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
	/* Set output to 0 */
	*output = 0;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	801a      	strh	r2, [r3, #0]

	/* Toggle SS0 Pin (CS) Low to use ADC */
	Toggle_ADC_Chip_Select();
 8002f38:	f7ff ffca 	bl	8002ed0 <Toggle_ADC_Chip_Select>
	/* Send to DIN CH0 Select */
	HAL_SPI_Transmit_Start();
 8002f3c:	f7ff ffd4 	bl	8002ee8 <HAL_SPI_Transmit_Start>
	HAL_SPI_TransmitReceive(&hspi1, &adc_ch_select, &adc_byte_1, sizeof(adc_ch_select), SPI_TIMEOUT);
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <Read_ADC+0x78>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	193a      	adds	r2, r7, r4
 8002f46:	1df9      	adds	r1, r7, #7
 8002f48:	4811      	ldr	r0, [pc, #68]	; (8002f90 <Read_ADC+0x7c>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f002 fabd 	bl	80054cc <HAL_SPI_TransmitReceive>
	/* Read from Dout of ADC */
	HAL_SPI_Receive(&hspi1, &adc_byte_2, sizeof(adc_byte_2), SPI_TIMEOUT);
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <Read_ADC+0x78>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	1979      	adds	r1, r7, r5
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <Read_ADC+0x7c>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f002 f998 	bl	8005290 <HAL_SPI_Receive>
	/* Toggle SS0 High (CS) to signify we're done with a round of the ADC */
	Toggle_ADC_Chip_Select();
 8002f60:	f7ff ffb6 	bl	8002ed0 <Toggle_ADC_Chip_Select>
	/* Set Output to adc_value */
	*output = ADC_16_TO_10_BIT(adc_byte_1, adc_byte_2);
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	b21a      	sxth	r2, r3
 8002f6c:	197b      	adds	r3, r7, r5
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	059b      	lsls	r3, r3, #22
 8002f7a:	0d9b      	lsrs	r3, r3, #22
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	801a      	strh	r2, [r3, #0]
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	08008298 	.word	0x08008298
 8002f90:	200000d8 	.word	0x200000d8

08002f94 <adc_to_voltage>:
/**
 * 	@brief Function handles converting adc value to a voltage.
 * 	Call reverse_and_shift_adc_value before hand.
 */
static float adc_to_voltage(uint16_t adc_value)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	1dbb      	adds	r3, r7, #6
 8002f9e:	801a      	strh	r2, [r3, #0]
	return 5.0 * adc_value / 1024;;
 8002fa0:	1dbb      	adds	r3, r7, #6
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fa1b 	bl	80023e0 <__aeabi_i2d>
 8002faa:	2200      	movs	r2, #0
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <adc_to_voltage+0x44>)
 8002fae:	f7fe fc41 	bl	8001834 <__aeabi_dmul>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	000c      	movs	r4, r1
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	0021      	movs	r1, r4
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <adc_to_voltage+0x48>)
 8002fbe:	f7fe f82f 	bl	8001020 <__aeabi_ddiv>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	000c      	movs	r4, r1
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	0021      	movs	r1, r4
 8002fca:	f7ff fa95 	bl	80024f8 <__aeabi_d2f>
 8002fce:	1c03      	adds	r3, r0, #0
}
 8002fd0:	1c18      	adds	r0, r3, #0
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b003      	add	sp, #12
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	40140000 	.word	0x40140000
 8002fdc:	40900000 	.word	0x40900000

08002fe0 <calculate_wind_speed>:
 *	TODO: Wait 40 seconds until we do the first measurement to let the wind sensor stabilize
 *	TODO: Use the Bosch sensor for ambiant temperature instead of the onboard Modern Device Sensor
 * 	https://moderndevice.com/uncategorized/calibrating-rev-p-wind-sensor-new-regression/?preview=true
 */
static float calculate_wind_speed(uint16_t wind_speed_adc, uint16_t wind_temp_adc)
{
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	1dbb      	adds	r3, r7, #6
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	1c0a      	adds	r2, r1, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
	// Calculate Vin from ADC
	float wind_speed_vout = adc_to_voltage(wind_speed_adc);
 8002ff2:	1dbb      	adds	r3, r7, #6
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7ff ffcc 	bl	8002f94 <adc_to_voltage>
 8002ffc:	1c03      	adds	r3, r0, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
	float wind_temp_vout = adc_to_voltage(wind_temp_adc);
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ffc5 	bl	8002f94 <adc_to_voltage>
 800300a:	1c03      	adds	r3, r0, #0
 800300c:	61bb      	str	r3, [r7, #24]

	// Zero Voltage not set, set here
	// TODO: Check if 40 seconds of operation have passed before we decided to set the zero voltage.
	if (zero_voltage == -1) {
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <calculate_wind_speed+0x114>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4939      	ldr	r1, [pc, #228]	; (80030f8 <calculate_wind_speed+0x118>)
 8003014:	1c18      	adds	r0, r3, #0
 8003016:	f7fd f94d 	bl	80002b4 <__aeabi_fcmpeq>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d002      	beq.n	8003024 <calculate_wind_speed+0x44>
		zero_voltage = wind_speed_vout;
 800301e:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <calculate_wind_speed+0x114>)
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	601a      	str	r2, [r3, #0]
	}

	// Calculate Ambient Temperature in Celsius
	float TempAmb = (wind_temp_vout - 0.400) / 0.0195;
 8003024:	69b8      	ldr	r0, [r7, #24]
 8003026:	f7ff fa15 	bl	8002454 <__aeabi_f2d>
 800302a:	4a34      	ldr	r2, [pc, #208]	; (80030fc <calculate_wind_speed+0x11c>)
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <calculate_wind_speed+0x120>)
 800302e:	f7fe fe73 	bl	8001d18 <__aeabi_dsub>
 8003032:	0003      	movs	r3, r0
 8003034:	000c      	movs	r4, r1
 8003036:	0018      	movs	r0, r3
 8003038:	0021      	movs	r1, r4
 800303a:	4a32      	ldr	r2, [pc, #200]	; (8003104 <calculate_wind_speed+0x124>)
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <calculate_wind_speed+0x128>)
 800303e:	f7fd ffef 	bl	8001020 <__aeabi_ddiv>
 8003042:	0003      	movs	r3, r0
 8003044:	000c      	movs	r4, r1
 8003046:	0018      	movs	r0, r3
 8003048:	0021      	movs	r1, r4
 800304a:	f7ff fa55 	bl	80024f8 <__aeabi_d2f>
 800304e:	1c03      	adds	r3, r0, #0
 8003050:	617b      	str	r3, [r7, #20]
	float zero = zero_voltage;
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <calculate_wind_speed+0x114>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	613b      	str	r3, [r7, #16]

	// Calculate the Wind Speed in MPH
	float wind_speed = (wind_speed_vout - zero_voltage) / (3.038517 * pow(TempAmb, 0.115157));
 8003058:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <calculate_wind_speed+0x114>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1c19      	adds	r1, r3, #0
 800305e:	69f8      	ldr	r0, [r7, #28]
 8003060:	f7fd fafe 	bl	8000660 <__aeabi_fsub>
 8003064:	1c03      	adds	r3, r0, #0
 8003066:	1c18      	adds	r0, r3, #0
 8003068:	f7ff f9f4 	bl	8002454 <__aeabi_f2d>
 800306c:	0005      	movs	r5, r0
 800306e:	000e      	movs	r6, r1
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7ff f9ef 	bl	8002454 <__aeabi_f2d>
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <calculate_wind_speed+0x12c>)
 8003078:	4c25      	ldr	r4, [pc, #148]	; (8003110 <calculate_wind_speed+0x130>)
 800307a:	001a      	movs	r2, r3
 800307c:	0023      	movs	r3, r4
 800307e:	f004 f877 	bl	8007170 <pow>
 8003082:	4a24      	ldr	r2, [pc, #144]	; (8003114 <calculate_wind_speed+0x134>)
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <calculate_wind_speed+0x138>)
 8003086:	f7fe fbd5 	bl	8001834 <__aeabi_dmul>
 800308a:	0003      	movs	r3, r0
 800308c:	000c      	movs	r4, r1
 800308e:	001a      	movs	r2, r3
 8003090:	0023      	movs	r3, r4
 8003092:	0028      	movs	r0, r5
 8003094:	0031      	movs	r1, r6
 8003096:	f7fd ffc3 	bl	8001020 <__aeabi_ddiv>
 800309a:	0003      	movs	r3, r0
 800309c:	000c      	movs	r4, r1
 800309e:	0018      	movs	r0, r3
 80030a0:	0021      	movs	r1, r4
 80030a2:	f7ff fa29 	bl	80024f8 <__aeabi_d2f>
 80030a6:	1c03      	adds	r3, r0, #0
 80030a8:	60fb      	str	r3, [r7, #12]
	wind_speed /= 0.087288;
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff f9d2 	bl	8002454 <__aeabi_f2d>
 80030b0:	4a1a      	ldr	r2, [pc, #104]	; (800311c <calculate_wind_speed+0x13c>)
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <calculate_wind_speed+0x140>)
 80030b4:	f7fd ffb4 	bl	8001020 <__aeabi_ddiv>
 80030b8:	0003      	movs	r3, r0
 80030ba:	000c      	movs	r4, r1
 80030bc:	0018      	movs	r0, r3
 80030be:	0021      	movs	r1, r4
 80030c0:	f7ff fa1a 	bl	80024f8 <__aeabi_d2f>
 80030c4:	1c03      	adds	r3, r0, #0
 80030c6:	60fb      	str	r3, [r7, #12]
	wind_speed = pow(wind_speed, 3.009364);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff f9c3 	bl	8002454 <__aeabi_f2d>
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <calculate_wind_speed+0x144>)
 80030d0:	4c15      	ldr	r4, [pc, #84]	; (8003128 <calculate_wind_speed+0x148>)
 80030d2:	001a      	movs	r2, r3
 80030d4:	0023      	movs	r3, r4
 80030d6:	f004 f84b 	bl	8007170 <pow>
 80030da:	0003      	movs	r3, r0
 80030dc:	000c      	movs	r4, r1
 80030de:	0018      	movs	r0, r3
 80030e0:	0021      	movs	r1, r4
 80030e2:	f7ff fa09 	bl	80024f8 <__aeabi_d2f>
 80030e6:	1c03      	adds	r3, r0, #0
 80030e8:	60fb      	str	r3, [r7, #12]
	return wind_speed;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	1c18      	adds	r0, r3, #0
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b009      	add	sp, #36	; 0x24
 80030f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f4:	20000000 	.word	0x20000000
 80030f8:	bf800000 	.word	0xbf800000
 80030fc:	9999999a 	.word	0x9999999a
 8003100:	3fd99999 	.word	0x3fd99999
 8003104:	d916872b 	.word	0xd916872b
 8003108:	3f93f7ce 	.word	0x3f93f7ce
 800310c:	dce7cd03 	.word	0xdce7cd03
 8003110:	3fbd7aed 	.word	0x3fbd7aed
 8003114:	003ab863 	.word	0x003ab863
 8003118:	40084ee2 	.word	0x40084ee2
 800311c:	a1554fbe 	.word	0xa1554fbe
 8003120:	3fb65881 	.word	0x3fb65881
 8003124:	6ece13f5 	.word	0x6ece13f5
 8003128:	4008132d 	.word	0x4008132d

0800312c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <SystemInit+0x64>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <SystemInit+0x64>)
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	0049      	lsls	r1, r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <SystemInit+0x64>)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b13      	ldr	r3, [pc, #76]	; (8003190 <SystemInit+0x64>)
 8003144:	4913      	ldr	r1, [pc, #76]	; (8003194 <SystemInit+0x68>)
 8003146:	400a      	ands	r2, r1
 8003148:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <SystemInit+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <SystemInit+0x64>)
 8003150:	4911      	ldr	r1, [pc, #68]	; (8003198 <SystemInit+0x6c>)
 8003152:	400a      	ands	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <SystemInit+0x64>)
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <SystemInit+0x64>)
 800315c:	2101      	movs	r1, #1
 800315e:	438a      	bics	r2, r1
 8003160:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <SystemInit+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <SystemInit+0x64>)
 8003168:	490c      	ldr	r1, [pc, #48]	; (800319c <SystemInit+0x70>)
 800316a:	400a      	ands	r2, r1
 800316c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <SystemInit+0x64>)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <SystemInit+0x64>)
 8003174:	490a      	ldr	r1, [pc, #40]	; (80031a0 <SystemInit+0x74>)
 8003176:	400a      	ands	r2, r1
 8003178:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SystemInit+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <SystemInit+0x78>)
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	0512      	lsls	r2, r2, #20
 8003186:	609a      	str	r2, [r3, #8]
#endif
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	40021000 	.word	0x40021000
 8003194:	88ff400c 	.word	0x88ff400c
 8003198:	fef6fff6 	.word	0xfef6fff6
 800319c:	fffbffff 	.word	0xfffbffff
 80031a0:	ff02ffff 	.word	0xff02ffff
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80031aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80031ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031ae:	e003      	b.n	80031b8 <LoopCopyDataInit>

080031b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80031b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031b6:	3104      	adds	r1, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80031b8:	480b      	ldr	r0, [pc, #44]	; (80031e8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <LoopForever+0xe>)
  adds  r2, r0, r1
 80031bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031c0:	d3f6      	bcc.n	80031b0 <CopyDataInit>
  ldr  r2, =_sbss
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80031c4:	e002      	b.n	80031cc <LoopFillZerobss>

080031c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80031c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80031c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ca:	3204      	adds	r2, #4

080031cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <LoopForever+0x16>)
  cmp  r2, r3
 80031ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031d0:	d3f9      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80031d2:	f7ff ffab 	bl	800312c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d6:	f003 ff9f 	bl	8007118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031da:	f7ff fa3b 	bl	8002654 <main>

080031de <LoopForever>:

LoopForever:
    b LoopForever
 80031de:	e7fe      	b.n	80031de <LoopForever>
   ldr   r0, =_estack
 80031e0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80031e4:	08008360 	.word	0x08008360
  ldr  r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031ec:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80031f0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80031f4:	200001f0 	.word	0x200001f0

080031f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC1_COMP_IRQHandler>

080031fa <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80031fa:	b5b0      	push	{r4, r5, r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8003202:	230e      	movs	r3, #14
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2205      	movs	r2, #5
 8003208:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 800320a:	230d      	movs	r3, #13
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003212:	250f      	movs	r5, #15
 8003214:	197c      	adds	r4, r7, r5
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 fb2b 	bl	8003874 <null_ptr_check>
 800321e:	0003      	movs	r3, r0
 8003220:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003222:	197b      	adds	r3, r7, r5
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b25b      	sxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d14a      	bne.n	80032c2 <bme280_init+0xc8>
    {
        while (try_count)
 800322c:	e039      	b.n	80032a2 <bme280_init+0xa8>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800322e:	250f      	movs	r5, #15
 8003230:	197c      	adds	r4, r7, r5
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	220d      	movs	r2, #13
 8003236:	18b9      	adds	r1, r7, r2
 8003238:	2201      	movs	r2, #1
 800323a:	20d0      	movs	r0, #208	; 0xd0
 800323c:	f000 f849 	bl	80032d2 <bme280_get_regs>
 8003240:	0003      	movs	r3, r0
 8003242:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8003244:	197b      	adds	r3, r7, r5
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b25b      	sxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11f      	bne.n	800328e <bme280_init+0x94>
 800324e:	230d      	movs	r3, #13
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b60      	cmp	r3, #96	; 0x60
 8003256:	d11a      	bne.n	800328e <bme280_init+0x94>
            {
                dev->chip_id = chip_id;
 8003258:	230d      	movs	r3, #13
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8003262:	250f      	movs	r5, #15
 8003264:	197c      	adds	r4, r7, r5
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 f912 	bl	8003492 <bme280_soft_reset>
 800326e:	0003      	movs	r3, r0
 8003270:	7023      	strb	r3, [r4, #0]
                if (rslt == BME280_OK)
 8003272:	197b      	adds	r3, r7, r5
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b25b      	sxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d118      	bne.n	80032ae <bme280_init+0xb4>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800327c:	230f      	movs	r3, #15
 800327e:	18fc      	adds	r4, r7, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 f96d 	bl	8003562 <get_calib_data>
 8003288:	0003      	movs	r3, r0
 800328a:	7023      	strb	r3, [r4, #0]
                }
                break;
 800328c:	e00f      	b.n	80032ae <bme280_init+0xb4>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2001      	movs	r0, #1
 8003294:	4798      	blx	r3
            --try_count;
 8003296:	220e      	movs	r2, #14
 8003298:	18bb      	adds	r3, r7, r2
 800329a:	18ba      	adds	r2, r7, r2
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	3a01      	subs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
        while (try_count)
 80032a2:	230e      	movs	r3, #14
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1c0      	bne.n	800322e <bme280_init+0x34>
 80032ac:	e000      	b.n	80032b0 <bme280_init+0xb6>
                break;
 80032ae:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 80032b0:	230e      	movs	r3, #14
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <bme280_init+0xc8>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80032ba:	230f      	movs	r3, #15
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	22fe      	movs	r2, #254	; 0xfe
 80032c0:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 80032c2:	230f      	movs	r3, #15
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b25b      	sxtb	r3, r3
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bdb0      	pop	{r4, r5, r7, pc}

080032d2 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80032d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	0011      	movs	r1, r2
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	230f      	movs	r3, #15
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	1c02      	adds	r2, r0, #0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	230c      	movs	r3, #12
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	1c0a      	adds	r2, r1, #0
 80032ec:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80032ee:	2517      	movs	r5, #23
 80032f0:	197c      	adds	r4, r7, r5
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 fabd 	bl	8003874 <null_ptr_check>
 80032fa:	0003      	movs	r3, r0
 80032fc:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80032fe:	197b      	adds	r3, r7, r5
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b25b      	sxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d126      	bne.n	8003356 <bme280_get_regs+0x84>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	789b      	ldrb	r3, [r3, #2]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d007      	beq.n	8003320 <bme280_get_regs+0x4e>
        {
            reg_addr = reg_addr | 0x80;
 8003310:	220f      	movs	r2, #15
 8003312:	18bb      	adds	r3, r7, r2
 8003314:	18ba      	adds	r2, r7, r2
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	4249      	negs	r1, r1
 800331c:	430a      	orrs	r2, r1
 800331e:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685d      	ldr	r5, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7858      	ldrb	r0, [r3, #1]
 8003328:	2317      	movs	r3, #23
 800332a:	18fc      	adds	r4, r7, r3
 800332c:	220c      	movs	r2, #12
 800332e:	18bb      	adds	r3, r7, r2
 8003330:	881e      	ldrh	r6, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	210f      	movs	r1, #15
 8003336:	187b      	adds	r3, r7, r1
 8003338:	7819      	ldrb	r1, [r3, #0]
 800333a:	0033      	movs	r3, r6
 800333c:	47a8      	blx	r5
 800333e:	0003      	movs	r3, r0
 8003340:	7023      	strb	r3, [r4, #0]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8003342:	2317      	movs	r3, #23
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b25b      	sxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <bme280_get_regs+0x84>
        {
            rslt = BME280_E_COMM_FAIL;
 800334e:	2317      	movs	r3, #23
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	22fc      	movs	r2, #252	; 0xfc
 8003354:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003356:	2317      	movs	r3, #23
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b25b      	sxtb	r3, r3
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b007      	add	sp, #28
 8003364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003366 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003368:	b08d      	sub	sp, #52	; 0x34
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8003376:	1dfb      	adds	r3, r7, #7
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b0a      	cmp	r3, #10
 800337c:	d902      	bls.n	8003384 <bme280_set_regs+0x1e>
    {
        len = 10;
 800337e:	1dfb      	adds	r3, r7, #7
 8003380:	220a      	movs	r2, #10
 8003382:	701a      	strb	r2, [r3, #0]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003384:	252f      	movs	r5, #47	; 0x2f
 8003386:	197c      	adds	r4, r7, r5
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fa72 	bl	8003874 <null_ptr_check>
 8003390:	0003      	movs	r3, r0
 8003392:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003394:	197b      	adds	r3, r7, r5
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b25b      	sxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d16b      	bne.n	8003476 <bme280_set_regs+0x110>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d068      	beq.n	8003476 <bme280_set_regs+0x110>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d065      	beq.n	8003476 <bme280_set_regs+0x110>
    {
        if (len != 0)
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d05c      	beq.n	800346c <bme280_set_regs+0x106>
        {
            temp_buff[0] = reg_data[0];
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	2314      	movs	r3, #20
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	789b      	ldrb	r3, [r3, #2]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d01e      	beq.n	8003402 <bme280_set_regs+0x9c>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80033c4:	232b      	movs	r3, #43	; 0x2b
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e012      	b.n	80033f4 <bme280_set_regs+0x8e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80033ce:	202b      	movs	r0, #43	; 0x2b
 80033d0:	183b      	adds	r3, r7, r0
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	18d3      	adds	r3, r2, r3
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	183b      	adds	r3, r7, r0
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	18cb      	adds	r3, r1, r3
 80033e2:	217f      	movs	r1, #127	; 0x7f
 80033e4:	400a      	ands	r2, r1
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80033ea:	183b      	adds	r3, r7, r0
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	3201      	adds	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	232b      	movs	r3, #43	; 0x2b
 80033f6:	18fa      	adds	r2, r7, r3
 80033f8:	1dfb      	adds	r3, r7, #7
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d3e5      	bcc.n	80033ce <bme280_set_regs+0x68>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d911      	bls.n	800342e <bme280_set_regs+0xc8>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	2114      	movs	r1, #20
 8003412:	1879      	adds	r1, r7, r1
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f8f1 	bl	80035fc <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	18db      	adds	r3, r3, r3
 8003422:	b29a      	uxth	r2, r3
 8003424:	232c      	movs	r3, #44	; 0x2c
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	3a01      	subs	r2, #1
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	e004      	b.n	8003438 <bme280_set_regs+0xd2>
            }
            else
            {
                temp_len = len;
 800342e:	232c      	movs	r3, #44	; 0x2c
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	1dfa      	adds	r2, r7, #7
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	801a      	strh	r2, [r3, #0]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689d      	ldr	r5, [r3, #8]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	7858      	ldrb	r0, [r3, #1]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	7819      	ldrb	r1, [r3, #0]
 8003444:	262f      	movs	r6, #47	; 0x2f
 8003446:	19bc      	adds	r4, r7, r6
 8003448:	232c      	movs	r3, #44	; 0x2c
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	2214      	movs	r2, #20
 8003450:	18ba      	adds	r2, r7, r2
 8003452:	47a8      	blx	r5
 8003454:	0003      	movs	r3, r0
 8003456:	7023      	strb	r3, [r4, #0]

            /* Check for communication error */
            if (rslt != BME280_OK)
 8003458:	19bb      	adds	r3, r7, r6
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b25b      	sxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <bme280_set_regs+0x11a>
            {
                rslt = BME280_E_COMM_FAIL;
 8003462:	232f      	movs	r3, #47	; 0x2f
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	22fc      	movs	r2, #252	; 0xfc
 8003468:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800346a:	e009      	b.n	8003480 <bme280_set_regs+0x11a>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800346c:	232f      	movs	r3, #47	; 0x2f
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	22fd      	movs	r2, #253	; 0xfd
 8003472:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8003474:	e004      	b.n	8003480 <bme280_set_regs+0x11a>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003476:	232f      	movs	r3, #47	; 0x2f
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	22ff      	movs	r2, #255	; 0xff
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e000      	b.n	8003482 <bme280_set_regs+0x11c>
        if (len != 0)
 8003480:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8003482:	232f      	movs	r3, #47	; 0x2f
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b25b      	sxtb	r3, r3
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b00d      	add	sp, #52	; 0x34
 8003490:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003492 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003492:	b5b0      	push	{r4, r5, r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 800349a:	230d      	movs	r3, #13
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	22e0      	movs	r2, #224	; 0xe0
 80034a0:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 80034a2:	230c      	movs	r3, #12
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 80034aa:	230e      	movs	r3, #14
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	2205      	movs	r2, #5
 80034b0:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80034b2:	230b      	movs	r3, #11
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	22b6      	movs	r2, #182	; 0xb6
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80034ba:	250f      	movs	r5, #15
 80034bc:	197c      	adds	r4, r7, r5
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f9d7 	bl	8003874 <null_ptr_check>
 80034c6:	0003      	movs	r3, r0
 80034c8:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80034ca:	197b      	adds	r3, r7, r5
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d13e      	bne.n	8003552 <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80034d4:	250f      	movs	r5, #15
 80034d6:	197c      	adds	r4, r7, r5
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	220b      	movs	r2, #11
 80034dc:	18b9      	adds	r1, r7, r2
 80034de:	220d      	movs	r2, #13
 80034e0:	18b8      	adds	r0, r7, r2
 80034e2:	2201      	movs	r2, #1
 80034e4:	f7ff ff3f 	bl	8003366 <bme280_set_regs>
 80034e8:	0003      	movs	r3, r0
 80034ea:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 80034ec:	197b      	adds	r3, r7, r5
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d12d      	bne.n	8003552 <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2002      	movs	r0, #2
 80034fc:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80034fe:	250f      	movs	r5, #15
 8003500:	197c      	adds	r4, r7, r5
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	220c      	movs	r2, #12
 8003506:	18b9      	adds	r1, r7, r2
 8003508:	2201      	movs	r2, #1
 800350a:	20f3      	movs	r0, #243	; 0xf3
 800350c:	f7ff fee1 	bl	80032d2 <bme280_get_regs>
 8003510:	0003      	movs	r3, r0
 8003512:	7023      	strb	r3, [r4, #0]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8003514:	197b      	adds	r3, r7, r5
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b25b      	sxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10e      	bne.n	800353c <bme280_soft_reset+0xaa>
 800351e:	220e      	movs	r2, #14
 8003520:	18bb      	adds	r3, r7, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	18ba      	adds	r2, r7, r2
 8003526:	1e59      	subs	r1, r3, #1
 8003528:	7011      	strb	r1, [r2, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <bme280_soft_reset+0xaa>
 800352e:	230c      	movs	r3, #12
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	001a      	movs	r2, r3
 8003536:	2301      	movs	r3, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d1dc      	bne.n	80034f6 <bme280_soft_reset+0x64>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 800353c:	230c      	movs	r3, #12
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	001a      	movs	r2, r3
 8003544:	2301      	movs	r3, #1
 8003546:	4013      	ands	r3, r2
 8003548:	d003      	beq.n	8003552 <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800354a:	230f      	movs	r3, #15
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	22fa      	movs	r2, #250	; 0xfa
 8003550:	701a      	strb	r2, [r3, #0]
            }

        }
    }

    return rslt;
 8003552:	230f      	movs	r3, #15
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b25b      	sxtb	r3, r3
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bdb0      	pop	{r4, r5, r7, pc}

08003562 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8003562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003564:	b08b      	sub	sp, #44	; 0x2c
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800356a:	2526      	movs	r5, #38	; 0x26
 800356c:	197b      	adds	r3, r7, r5
 800356e:	2288      	movs	r2, #136	; 0x88
 8003570:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8003572:	260c      	movs	r6, #12
 8003574:	19bb      	adds	r3, r7, r6
 8003576:	0018      	movs	r0, r3
 8003578:	231a      	movs	r3, #26
 800357a:	001a      	movs	r2, r3
 800357c:	2100      	movs	r1, #0
 800357e:	f003 fdef 	bl	8007160 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8003582:	2327      	movs	r3, #39	; 0x27
 8003584:	18fc      	adds	r4, r7, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	19b9      	adds	r1, r7, r6
 800358a:	197b      	adds	r3, r7, r5
 800358c:	7818      	ldrb	r0, [r3, #0]
 800358e:	0013      	movs	r3, r2
 8003590:	221a      	movs	r2, #26
 8003592:	f7ff fe9e 	bl	80032d2 <bme280_get_regs>
 8003596:	0003      	movs	r3, r0
 8003598:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800359a:	2327      	movs	r3, #39	; 0x27
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d122      	bne.n	80035ec <get_calib_data+0x8a>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	250c      	movs	r5, #12
 80035aa:	197b      	adds	r3, r7, r5
 80035ac:	0011      	movs	r1, r2
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f85b 	bl	800366a <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80035b4:	2026      	movs	r0, #38	; 0x26
 80035b6:	183b      	adds	r3, r7, r0
 80035b8:	22e1      	movs	r2, #225	; 0xe1
 80035ba:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80035bc:	2627      	movs	r6, #39	; 0x27
 80035be:	19bc      	adds	r4, r7, r6
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	1979      	adds	r1, r7, r5
 80035c4:	183b      	adds	r3, r7, r0
 80035c6:	7818      	ldrb	r0, [r3, #0]
 80035c8:	0013      	movs	r3, r2
 80035ca:	2207      	movs	r2, #7
 80035cc:	f7ff fe81 	bl	80032d2 <bme280_get_regs>
 80035d0:	0003      	movs	r3, r0
 80035d2:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80035d4:	19bb      	adds	r3, r7, r6
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <get_calib_data+0x8a>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	230c      	movs	r3, #12
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	0011      	movs	r1, r2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f8ec 	bl	80037c4 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80035ec:	2327      	movs	r3, #39	; 0x27
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b25b      	sxtb	r3, r3
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b00b      	add	sp, #44	; 0x2c
 80035fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035fc <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	001a      	movs	r2, r3
 800360a:	1cfb      	adds	r3, r7, #3
 800360c:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 800360e:	2317      	movs	r3, #23
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e01d      	b.n	8003654 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003618:	2017      	movs	r0, #23
 800361a:	183b      	adds	r3, r7, r0
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	18d2      	adds	r2, r2, r3
 8003622:	183b      	adds	r3, r7, r0
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	3b01      	subs	r3, #1
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	18cb      	adds	r3, r1, r3
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003632:	183b      	adds	r3, r7, r0
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	18d2      	adds	r2, r2, r3
 800363a:	183b      	adds	r3, r7, r0
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	0019      	movs	r1, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	185b      	adds	r3, r3, r1
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800364a:	183b      	adds	r3, r7, r0
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	183b      	adds	r3, r7, r0
 8003650:	3201      	adds	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	2317      	movs	r3, #23
 8003656:	18fa      	adds	r2, r7, r3
 8003658:	1cfb      	adds	r3, r7, #3
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d3da      	bcc.n	8003618 <interleave_reg_addr+0x1c>
    }
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b006      	add	sp, #24
 8003668:	bd80      	pop	{r7, pc}

0800366a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	3310      	adds	r3, #16
 8003678:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3301      	adds	r3, #1
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b21b      	sxth	r3, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	b21b      	sxth	r3, r3
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3303      	adds	r3, #3
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	b21a      	sxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3302      	adds	r3, #2
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3305      	adds	r3, #5
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	b21a      	sxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b21b      	sxth	r3, r3
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b21a      	sxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3307      	adds	r3, #7
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	b21a      	sxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3306      	adds	r3, #6
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b21b      	sxth	r3, r3
 80036da:	4313      	orrs	r3, r2
 80036dc:	b21b      	sxth	r3, r3
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3309      	adds	r3, #9
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	b21a      	sxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3308      	adds	r3, #8
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	4313      	orrs	r3, r2
 80036f8:	b21a      	sxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	330b      	adds	r3, #11
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	b21a      	sxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	330a      	adds	r3, #10
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b21b      	sxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	b21a      	sxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	330d      	adds	r3, #13
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	b21a      	sxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	330c      	adds	r3, #12
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b21b      	sxth	r3, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	b21a      	sxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	330f      	adds	r3, #15
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	b21a      	sxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	330e      	adds	r3, #14
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b21b      	sxth	r3, r3
 8003744:	4313      	orrs	r3, r2
 8003746:	b21a      	sxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3311      	adds	r3, #17
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	b21a      	sxth	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3310      	adds	r3, #16
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	b21b      	sxth	r3, r3
 800375e:	4313      	orrs	r3, r2
 8003760:	b21a      	sxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3313      	adds	r3, #19
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	b21a      	sxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3312      	adds	r3, #18
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b21b      	sxth	r3, r3
 8003778:	4313      	orrs	r3, r2
 800377a:	b21a      	sxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3315      	adds	r3, #21
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	b21a      	sxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3314      	adds	r3, #20
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b21b      	sxth	r3, r3
 8003792:	4313      	orrs	r3, r2
 8003794:	b21a      	sxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3317      	adds	r3, #23
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	b21a      	sxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3316      	adds	r3, #22
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b21a      	sxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7e5a      	ldrb	r2, [r3, #25]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	761a      	strb	r2, [r3, #24]
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	3310      	adds	r3, #16
 80037d2:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3301      	adds	r3, #1
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	b21a      	sxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	b21b      	sxth	r3, r3
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b21a      	sxth	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	789a      	ldrb	r2, [r3, #2]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3303      	adds	r3, #3
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	b29a      	uxth	r2, r3
 8003802:	2012      	movs	r0, #18
 8003804:	183b      	adds	r3, r7, r0
 8003806:	801a      	strh	r2, [r3, #0]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b21a      	sxth	r2, r3
 8003810:	2410      	movs	r4, #16
 8003812:	193b      	adds	r3, r7, r4
 8003814:	210f      	movs	r1, #15
 8003816:	400a      	ands	r2, r1
 8003818:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800381a:	183a      	adds	r2, r7, r0
 800381c:	193b      	adds	r3, r7, r4
 800381e:	8812      	ldrh	r2, [r2, #0]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	b21a      	sxth	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3305      	adds	r3, #5
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b25b      	sxtb	r3, r3
 8003832:	b29b      	uxth	r3, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	b29a      	uxth	r2, r3
 8003838:	210e      	movs	r1, #14
 800383a:	187b      	adds	r3, r7, r1
 800383c:	801a      	strh	r2, [r3, #0]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	b2da      	uxtb	r2, r3
 8003848:	200c      	movs	r0, #12
 800384a:	183b      	adds	r3, r7, r0
 800384c:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800384e:	187a      	adds	r2, r7, r1
 8003850:	183b      	adds	r3, r7, r0
 8003852:	8812      	ldrh	r2, [r2, #0]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	b21a      	sxth	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3306      	adds	r3, #6
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b259      	sxtb	r1, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2222      	movs	r2, #34	; 0x22
 800386a:	5499      	strb	r1, [r3, r2]
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b007      	add	sp, #28
 8003872:	bd90      	pop	{r4, r7, pc}

08003874 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <null_ptr_check+0x26>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <null_ptr_check+0x26>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <null_ptr_check+0x26>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800389a:	230f      	movs	r3, #15
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e003      	b.n	80038ac <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80038a4:	230f      	movs	r3, #15
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80038ac:	230f      	movs	r3, #15
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25b      	sxtb	r3, r3
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_Init+0x3c>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_Init+0x3c>)
 80038ce:	2140      	movs	r1, #64	; 0x40
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038d4:	2000      	movs	r0, #0
 80038d6:	f000 f811 	bl	80038fc <HAL_InitTick>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80038de:	1dfb      	adds	r3, r7, #7
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e001      	b.n	80038ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038e6:	f7ff f925 	bl	8002b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038ea:	1dfb      	adds	r3, r7, #7
 80038ec:	781b      	ldrb	r3, [r3, #0]
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b002      	add	sp, #8
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	40022000 	.word	0x40022000

080038fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003904:	230f      	movs	r3, #15
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_InitTick+0x50>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	23fa      	movs	r3, #250	; 0xfa
 8003912:	0099      	lsls	r1, r3, #2
 8003914:	0010      	movs	r0, r2
 8003916:	f7fc fbf7 	bl	8000108 <__udivsi3>
 800391a:	0003      	movs	r3, r0
 800391c:	0018      	movs	r0, r3
 800391e:	f000 f8ee 	bl	8003afe <HAL_SYSTICK_Config>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d004      	beq.n	8003930 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8003926:	230f      	movs	r3, #15
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e006      	b.n	800393e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	2301      	movs	r3, #1
 8003934:	425b      	negs	r3, r3
 8003936:	2200      	movs	r2, #0
 8003938:	0018      	movs	r0, r3
 800393a:	f000 f8bb 	bl	8003ab4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800393e:	230f      	movs	r3, #15
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	781b      	ldrb	r3, [r3, #0]
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000004 	.word	0x20000004

08003950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  return uwTick;
 8003954:	4b02      	ldr	r3, [pc, #8]	; (8003960 <HAL_GetTick+0x10>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	200001ec 	.word	0x200001ec

08003964 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003970:	1dfb      	adds	r3, r7, #7
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	001a      	movs	r2, r3
 8003976:	231f      	movs	r3, #31
 8003978:	401a      	ands	r2, r3
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <NVIC_EnableIRQ+0x28>)
 800397c:	2101      	movs	r1, #1
 800397e:	4091      	lsls	r1, r2
 8003980:	000a      	movs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}
 800398c:	e000e100 	.word	0xe000e100

08003990 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	0002      	movs	r2, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b7f      	cmp	r3, #127	; 0x7f
 80039a4:	d932      	bls.n	8003a0c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039a6:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <NVIC_SetPriority+0xd4>)
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	0019      	movs	r1, r3
 80039ae:	230f      	movs	r3, #15
 80039b0:	400b      	ands	r3, r1
 80039b2:	3b08      	subs	r3, #8
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3306      	adds	r3, #6
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	18d3      	adds	r3, r2, r3
 80039bc:	3304      	adds	r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	1dfa      	adds	r2, r7, #7
 80039c2:	7812      	ldrb	r2, [r2, #0]
 80039c4:	0011      	movs	r1, r2
 80039c6:	2203      	movs	r2, #3
 80039c8:	400a      	ands	r2, r1
 80039ca:	00d2      	lsls	r2, r2, #3
 80039cc:	21ff      	movs	r1, #255	; 0xff
 80039ce:	4091      	lsls	r1, r2
 80039d0:	000a      	movs	r2, r1
 80039d2:	43d2      	mvns	r2, r2
 80039d4:	401a      	ands	r2, r3
 80039d6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	019b      	lsls	r3, r3, #6
 80039dc:	22ff      	movs	r2, #255	; 0xff
 80039de:	401a      	ands	r2, r3
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	0018      	movs	r0, r3
 80039e6:	2303      	movs	r3, #3
 80039e8:	4003      	ands	r3, r0
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ee:	481d      	ldr	r0, [pc, #116]	; (8003a64 <NVIC_SetPriority+0xd4>)
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	001c      	movs	r4, r3
 80039f6:	230f      	movs	r3, #15
 80039f8:	4023      	ands	r3, r4
 80039fa:	3b08      	subs	r3, #8
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	430a      	orrs	r2, r1
 8003a00:	3306      	adds	r3, #6
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	18c3      	adds	r3, r0, r3
 8003a06:	3304      	adds	r3, #4
 8003a08:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a0a:	e027      	b.n	8003a5c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <NVIC_SetPriority+0xd8>)
 8003a0e:	1dfb      	adds	r3, r7, #7
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	33c0      	adds	r3, #192	; 0xc0
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	589b      	ldr	r3, [r3, r2]
 8003a1c:	1dfa      	adds	r2, r7, #7
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	0011      	movs	r1, r2
 8003a22:	2203      	movs	r2, #3
 8003a24:	400a      	ands	r2, r1
 8003a26:	00d2      	lsls	r2, r2, #3
 8003a28:	21ff      	movs	r1, #255	; 0xff
 8003a2a:	4091      	lsls	r1, r2
 8003a2c:	000a      	movs	r2, r1
 8003a2e:	43d2      	mvns	r2, r2
 8003a30:	401a      	ands	r2, r3
 8003a32:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	019b      	lsls	r3, r3, #6
 8003a38:	22ff      	movs	r2, #255	; 0xff
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	1dfb      	adds	r3, r7, #7
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	0018      	movs	r0, r3
 8003a42:	2303      	movs	r3, #3
 8003a44:	4003      	ands	r3, r0
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a4a:	4807      	ldr	r0, [pc, #28]	; (8003a68 <NVIC_SetPriority+0xd8>)
 8003a4c:	1dfb      	adds	r3, r7, #7
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	b25b      	sxtb	r3, r3
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	430a      	orrs	r2, r1
 8003a56:	33c0      	adds	r3, #192	; 0xc0
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	501a      	str	r2, [r3, r0]
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b003      	add	sp, #12
 8003a62:	bd90      	pop	{r4, r7, pc}
 8003a64:	e000ed00 	.word	0xe000ed00
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <SysTick_Config+0x40>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e010      	b.n	8003aa4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <SysTick_Config+0x44>)
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	3a01      	subs	r2, #1
 8003a88:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	425b      	negs	r3, r3
 8003a8e:	2103      	movs	r1, #3
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7ff ff7d 	bl	8003990 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <SysTick_Config+0x44>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <SysTick_Config+0x44>)
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	00ffffff 	.word	0x00ffffff
 8003ab0:	e000e010 	.word	0xe000e010

08003ab4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	210f      	movs	r1, #15
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	1c02      	adds	r2, r0, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7ff ff5d 	bl	8003990 <NVIC_SetPriority>
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7ff ff37 	bl	8003964 <NVIC_EnableIRQ>
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff ffaf 	bl	8003a6c <SysTick_Config>
 8003b0e:	0003      	movs	r3, r0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b2e:	e155      	b.n	8003ddc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4091      	lsls	r1, r2
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d100      	bne.n	8003b48 <HAL_GPIO_Init+0x30>
 8003b46:	e146      	b.n	8003dd6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x40>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b12      	cmp	r3, #18
 8003b56:	d123      	bne.n	8003ba0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	0092      	lsls	r2, r2, #2
 8003b62:	58d3      	ldr	r3, [r2, r3]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2207      	movs	r2, #7
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	409a      	lsls	r2, r3
 8003b72:	0013      	movs	r3, r2
 8003b74:	43da      	mvns	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2107      	movs	r1, #7
 8003b84:	400b      	ands	r3, r1
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	0013      	movs	r3, r2
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	08da      	lsrs	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3208      	adds	r2, #8
 8003b9a:	0092      	lsls	r2, r2, #2
 8003b9c:	6939      	ldr	r1, [r7, #16]
 8003b9e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_GPIO_Init+0xa8>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d007      	beq.n	8003bc0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bb4:	2b11      	cmp	r3, #17
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b12      	cmp	r3, #18
 8003bbe:	d130      	bne.n	8003c22 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	0013      	movs	r3, r2
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	409a      	lsls	r2, r3
 8003be2:	0013      	movs	r3, r2
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	0013      	movs	r3, r2
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
 8003c14:	0013      	movs	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	0013      	movs	r3, r2
 8003c32:	43da      	mvns	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	401a      	ands	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	43da      	mvns	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	0013      	movs	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	055b      	lsls	r3, r3, #21
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d100      	bne.n	8003c94 <HAL_GPIO_Init+0x17c>
 8003c92:	e0a0      	b.n	8003dd6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c94:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c98:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca0:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_GPIO_Init+0x2e0>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	589b      	ldr	r3, [r3, r2]
 8003cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	0013      	movs	r3, r2
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	23a0      	movs	r3, #160	; 0xa0
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d01f      	beq.n	8003d0e <HAL_GPIO_Init+0x1f6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <HAL_GPIO_Init+0x2e4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d019      	beq.n	8003d0a <HAL_GPIO_Init+0x1f2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_GPIO_Init+0x1ee>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a48      	ldr	r2, [pc, #288]	; (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00d      	beq.n	8003d02 <HAL_GPIO_Init+0x1ea>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a47      	ldr	r2, [pc, #284]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x1e6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a46      	ldr	r2, [pc, #280]	; (8003e0c <HAL_GPIO_Init+0x2f4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_GPIO_Init+0x1e2>
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	e00a      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003cfa:	2306      	movs	r3, #6
 8003cfc:	e008      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003cfe:	2304      	movs	r3, #4
 8003d00:	e006      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d02:	2303      	movs	r3, #3
 8003d04:	e004      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e002      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	2103      	movs	r1, #3
 8003d14:	400a      	ands	r2, r1
 8003d16:	0092      	lsls	r2, r2, #2
 8003d18:	4093      	lsls	r3, r2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d20:	4935      	ldr	r1, [pc, #212]	; (8003df8 <HAL_GPIO_Init+0x2e0>)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	089b      	lsrs	r3, r3, #2
 8003d26:	3302      	adds	r3, #2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d2e:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43da      	mvns	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	025b      	lsls	r3, r3, #9
 8003d46:	4013      	ands	r3, r2
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d52:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003d58:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	43da      	mvns	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	029b      	lsls	r3, r3, #10
 8003d70:	4013      	ands	r3, r2
 8003d72:	d003      	beq.n	8003d7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d82:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	035b      	lsls	r3, r3, #13
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003dac:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	43da      	mvns	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	039b      	lsls	r3, r3, #14
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	40da      	lsrs	r2, r3
 8003de4:	1e13      	subs	r3, r2, #0
 8003de6:	d000      	beq.n	8003dea <HAL_GPIO_Init+0x2d2>
 8003de8:	e6a2      	b.n	8003b30 <HAL_GPIO_Init+0x18>
  }
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b006      	add	sp, #24
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	50000400 	.word	0x50000400
 8003e00:	50000800 	.word	0x50000800
 8003e04:	50000c00 	.word	0x50000c00
 8003e08:	50001000 	.word	0x50001000
 8003e0c:	50001c00 	.word	0x50001c00
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	0008      	movs	r0, r1
 8003e1e:	0011      	movs	r1, r2
 8003e20:	1cbb      	adds	r3, r7, #2
 8003e22:	1c02      	adds	r2, r0, #0
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	1c7b      	adds	r3, r7, #1
 8003e28:	1c0a      	adds	r2, r1, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003e2c:	1c7b      	adds	r3, r7, #1
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e34:	1cbb      	adds	r3, r7, #2
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003e3c:	e003      	b.n	8003e46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003e3e:	1cbb      	adds	r3, r7, #2
 8003e40:	881a      	ldrh	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b002      	add	sp, #8
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	000a      	movs	r2, r1
 8003e58:	1cbb      	adds	r3, r7, #2
 8003e5a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	1cbb      	adds	r3, r7, #2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	405a      	eors	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	615a      	str	r2, [r3, #20]
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e082      	b.n	8003f8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d107      	bne.n	8003ea2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2240      	movs	r2, #64	; 0x40
 8003e96:	2100      	movs	r1, #0
 8003e98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7fe fe5d 	bl	8002b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2241      	movs	r2, #65	; 0x41
 8003ea6:	2124      	movs	r1, #36	; 0x24
 8003ea8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	438a      	bics	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4934      	ldr	r1, [pc, #208]	; (8003f94 <HAL_I2C_Init+0x120>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4931      	ldr	r1, [pc, #196]	; (8003f98 <HAL_I2C_Init+0x124>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d108      	bne.n	8003ef2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	0209      	lsls	r1, r1, #8
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	e007      	b.n	8003f02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2184      	movs	r1, #132	; 0x84
 8003efc:	0209      	lsls	r1, r1, #8
 8003efe:	430a      	orrs	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d104      	bne.n	8003f14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	0112      	lsls	r2, r2, #4
 8003f12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	491f      	ldr	r1, [pc, #124]	; (8003f9c <HAL_I2C_Init+0x128>)
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	491a      	ldr	r1, [pc, #104]	; (8003f98 <HAL_I2C_Init+0x124>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	0011      	movs	r1, r2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	021a      	lsls	r2, r3, #8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69d9      	ldr	r1, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1a      	ldr	r2, [r3, #32]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2241      	movs	r2, #65	; 0x41
 8003f78:	2120      	movs	r1, #32
 8003f7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2242      	movs	r2, #66	; 0x42
 8003f86:	2100      	movs	r1, #0
 8003f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	f0ffffff 	.word	0xf0ffffff
 8003f98:	ffff7fff 	.word	0xffff7fff
 8003f9c:	02008000 	.word	0x02008000

08003fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2241      	movs	r2, #65	; 0x41
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d138      	bne.n	8004028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2240      	movs	r2, #64	; 0x40
 8003fba:	5c9b      	ldrb	r3, [r3, r2]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e032      	b.n	800402a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2240      	movs	r2, #64	; 0x40
 8003fc8:	2101      	movs	r1, #1
 8003fca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2241      	movs	r2, #65	; 0x41
 8003fd0:	2124      	movs	r1, #36	; 0x24
 8003fd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2101      	movs	r1, #1
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4911      	ldr	r1, [pc, #68]	; (8004034 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2241      	movs	r2, #65	; 0x41
 8004018:	2120      	movs	r1, #32
 800401a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b002      	add	sp, #8
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	ffffefff 	.word	0xffffefff

08004038 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2241      	movs	r2, #65	; 0x41
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	d139      	bne.n	80040c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2240      	movs	r2, #64	; 0x40
 8004052:	5c9b      	ldrb	r3, [r3, r2]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004058:	2302      	movs	r3, #2
 800405a:	e033      	b.n	80040c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2240      	movs	r2, #64	; 0x40
 8004060:	2101      	movs	r1, #1
 8004062:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2241      	movs	r2, #65	; 0x41
 8004068:	2124      	movs	r1, #36	; 0x24
 800406a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2101      	movs	r1, #1
 8004078:	438a      	bics	r2, r1
 800407a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a11      	ldr	r2, [pc, #68]	; (80040cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2241      	movs	r2, #65	; 0x41
 80040b2:	2120      	movs	r1, #32
 80040b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2240      	movs	r2, #64	; 0x40
 80040ba:	2100      	movs	r1, #0
 80040bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
  }
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	fffff0ff 	.word	0xfffff0ff

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b5b0      	push	{r4, r5, r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f000 fbbc 	bl	800485c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e4:	4bc8      	ldr	r3, [pc, #800]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	220c      	movs	r2, #12
 80040ea:	4013      	ands	r3, r2
 80040ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ee:	4bc6      	ldr	r3, [pc, #792]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	025b      	lsls	r3, r3, #9
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	4013      	ands	r3, r2
 8004102:	d100      	bne.n	8004106 <HAL_RCC_OscConfig+0x36>
 8004104:	e07e      	b.n	8004204 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d007      	beq.n	800411c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d112      	bne.n	8004138 <HAL_RCC_OscConfig+0x68>
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	025b      	lsls	r3, r3, #9
 8004118:	429a      	cmp	r2, r3
 800411a:	d10d      	bne.n	8004138 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	4bba      	ldr	r3, [pc, #744]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	029b      	lsls	r3, r3, #10
 8004124:	4013      	ands	r3, r2
 8004126:	d100      	bne.n	800412a <HAL_RCC_OscConfig+0x5a>
 8004128:	e06b      	b.n	8004202 <HAL_RCC_OscConfig+0x132>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d167      	bne.n	8004202 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f000 fb92 	bl	800485c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	025b      	lsls	r3, r3, #9
 8004140:	429a      	cmp	r2, r3
 8004142:	d107      	bne.n	8004154 <HAL_RCC_OscConfig+0x84>
 8004144:	4bb0      	ldr	r3, [pc, #704]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4baf      	ldr	r3, [pc, #700]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	0249      	lsls	r1, r1, #9
 800414e:	430a      	orrs	r2, r1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e027      	b.n	80041a4 <HAL_RCC_OscConfig+0xd4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	23a0      	movs	r3, #160	; 0xa0
 800415a:	02db      	lsls	r3, r3, #11
 800415c:	429a      	cmp	r2, r3
 800415e:	d10e      	bne.n	800417e <HAL_RCC_OscConfig+0xae>
 8004160:	4ba9      	ldr	r3, [pc, #676]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4ba8      	ldr	r3, [pc, #672]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	02c9      	lsls	r1, r1, #11
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	4ba6      	ldr	r3, [pc, #664]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4ba5      	ldr	r3, [pc, #660]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	0249      	lsls	r1, r1, #9
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e012      	b.n	80041a4 <HAL_RCC_OscConfig+0xd4>
 800417e:	4ba2      	ldr	r3, [pc, #648]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4ba1      	ldr	r3, [pc, #644]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004184:	49a1      	ldr	r1, [pc, #644]	; (800440c <HAL_RCC_OscConfig+0x33c>)
 8004186:	400a      	ands	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	4b9f      	ldr	r3, [pc, #636]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	025b      	lsls	r3, r3, #9
 8004192:	4013      	ands	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4b9b      	ldr	r3, [pc, #620]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b9a      	ldr	r3, [pc, #616]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800419e:	499c      	ldr	r1, [pc, #624]	; (8004410 <HAL_RCC_OscConfig+0x340>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7ff fbd0 	bl	8003950 <HAL_GetTick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b4:	e009      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b6:	f7ff fbcb 	bl	8003950 <HAL_GetTick>
 80041ba:	0002      	movs	r2, r0
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d902      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	f000 fb49 	bl	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ca:	4b8f      	ldr	r3, [pc, #572]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	4013      	ands	r3, r2
 80041d4:	d0ef      	beq.n	80041b6 <HAL_RCC_OscConfig+0xe6>
 80041d6:	e015      	b.n	8004204 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7ff fbba 	bl	8003950 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e2:	f7ff fbb5 	bl	8003950 <HAL_GetTick>
 80041e6:	0002      	movs	r2, r0
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b64      	cmp	r3, #100	; 0x64
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e333      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f4:	4b84      	ldr	r3, [pc, #528]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	029b      	lsls	r3, r3, #10
 80041fc:	4013      	ands	r3, r2
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x112>
 8004200:	e000      	b.n	8004204 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004202:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2202      	movs	r2, #2
 800420a:	4013      	ands	r3, r2
 800420c:	d100      	bne.n	8004210 <HAL_RCC_OscConfig+0x140>
 800420e:	e098      	b.n	8004342 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2220      	movs	r2, #32
 800421a:	4013      	ands	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800421e:	4b7a      	ldr	r3, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b79      	ldr	r3, [pc, #484]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004224:	2120      	movs	r1, #32
 8004226:	430a      	orrs	r2, r1
 8004228:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	2220      	movs	r2, #32
 800422e:	4393      	bics	r3, r2
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d005      	beq.n	8004244 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d13d      	bne.n	80042ba <HAL_RCC_OscConfig+0x1ea>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d13a      	bne.n	80042ba <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004244:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2204      	movs	r2, #4
 800424a:	4013      	ands	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_RCC_OscConfig+0x188>
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e301      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a6d      	ldr	r2, [pc, #436]	; (8004414 <HAL_RCC_OscConfig+0x344>)
 800425e:	4013      	ands	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	021a      	lsls	r2, r3, #8
 8004268:	4b67      	ldr	r3, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800426e:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2209      	movs	r2, #9
 8004274:	4393      	bics	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	430a      	orrs	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004280:	f000 fc20 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004284:	0001      	movs	r1, r0
 8004286:	4b60      	ldr	r3, [pc, #384]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	220f      	movs	r2, #15
 800428e:	4013      	ands	r3, r2
 8004290:	4a61      	ldr	r2, [pc, #388]	; (8004418 <HAL_RCC_OscConfig+0x348>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	000a      	movs	r2, r1
 8004296:	40da      	lsrs	r2, r3
 8004298:	4b60      	ldr	r3, [pc, #384]	; (800441c <HAL_RCC_OscConfig+0x34c>)
 800429a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800429c:	2513      	movs	r5, #19
 800429e:	197c      	adds	r4, r7, r5
 80042a0:	2000      	movs	r0, #0
 80042a2:	f7ff fb2b 	bl	80038fc <HAL_InitTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80042aa:	197b      	adds	r3, r7, r5
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d047      	beq.n	8004342 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80042b2:	2313      	movs	r3, #19
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	e2d0      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d027      	beq.n	8004310 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042c0:	4b51      	ldr	r3, [pc, #324]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2209      	movs	r2, #9
 80042c6:	4393      	bics	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7ff fb3d 	bl	8003950 <HAL_GetTick>
 80042d6:	0003      	movs	r3, r0
 80042d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042dc:	f7ff fb38 	bl	8003950 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e2b6      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2204      	movs	r2, #4
 80042f4:	4013      	ands	r3, r2
 80042f6:	d0f1      	beq.n	80042dc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4a45      	ldr	r2, [pc, #276]	; (8004414 <HAL_RCC_OscConfig+0x344>)
 80042fe:	4013      	ands	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	021a      	lsls	r2, r3, #8
 8004308:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	e018      	b.n	8004342 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004310:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b3c      	ldr	r3, [pc, #240]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004316:	2101      	movs	r1, #1
 8004318:	438a      	bics	r2, r1
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7ff fb18 	bl	8003950 <HAL_GetTick>
 8004320:	0003      	movs	r3, r0
 8004322:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004326:	f7ff fb13 	bl	8003950 <HAL_GetTick>
 800432a:	0002      	movs	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e291      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2204      	movs	r2, #4
 800433e:	4013      	ands	r3, r2
 8004340:	d1f1      	bne.n	8004326 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2210      	movs	r2, #16
 8004348:	4013      	ands	r3, r2
 800434a:	d100      	bne.n	800434e <HAL_RCC_OscConfig+0x27e>
 800434c:	e09f      	b.n	800448e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d13f      	bne.n	80043d4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004354:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4013      	ands	r3, r2
 800435e:	d005      	beq.n	800436c <HAL_RCC_OscConfig+0x29c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e277      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a2b      	ldr	r2, [pc, #172]	; (8004420 <HAL_RCC_OscConfig+0x350>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	0a19      	lsrs	r1, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	061a      	lsls	r2, r3, #24
 800438e:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	0b5b      	lsrs	r3, r3, #13
 800439a:	3301      	adds	r3, #1
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	0212      	lsls	r2, r2, #8
 80043a0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	091b      	lsrs	r3, r3, #4
 80043a8:	210f      	movs	r1, #15
 80043aa:	400b      	ands	r3, r1
 80043ac:	491a      	ldr	r1, [pc, #104]	; (8004418 <HAL_RCC_OscConfig+0x348>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <HAL_RCC_OscConfig+0x34c>)
 80043b4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80043b6:	2513      	movs	r5, #19
 80043b8:	197c      	adds	r4, r7, r5
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7ff fa9e 	bl	80038fc <HAL_InitTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80043c4:	197b      	adds	r3, r7, r5
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d060      	beq.n	800448e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80043cc:	2313      	movs	r3, #19
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	e243      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03e      	beq.n	800445a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x338>)
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	0049      	lsls	r1, r1, #1
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7ff fab1 	bl	8003950 <HAL_GetTick>
 80043ee:	0003      	movs	r3, r0
 80043f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043f2:	e017      	b.n	8004424 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f4:	f7ff faac 	bl	8003950 <HAL_GetTick>
 80043f8:	0002      	movs	r2, r0
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d910      	bls.n	8004424 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e22a      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	40021000 	.word	0x40021000
 800440c:	fffeffff 	.word	0xfffeffff
 8004410:	fffbffff 	.word	0xfffbffff
 8004414:	ffffe0ff 	.word	0xffffe0ff
 8004418:	0800829c 	.word	0x0800829c
 800441c:	20000004 	.word	0x20000004
 8004420:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004424:	4bc6      	ldr	r3, [pc, #792]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4013      	ands	r3, r2
 800442e:	d0e1      	beq.n	80043f4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004430:	4bc3      	ldr	r3, [pc, #780]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4ac3      	ldr	r2, [pc, #780]	; (8004744 <HAL_RCC_OscConfig+0x674>)
 8004436:	4013      	ands	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443e:	4bc0      	ldr	r3, [pc, #768]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004444:	4bbe      	ldr	r3, [pc, #760]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	0a19      	lsrs	r1, r3, #8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	061a      	lsls	r2, r3, #24
 8004452:	4bbb      	ldr	r3, [pc, #748]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	e019      	b.n	800448e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800445a:	4bb9      	ldr	r3, [pc, #740]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4bb8      	ldr	r3, [pc, #736]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004460:	49b9      	ldr	r1, [pc, #740]	; (8004748 <HAL_RCC_OscConfig+0x678>)
 8004462:	400a      	ands	r2, r1
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7ff fa73 	bl	8003950 <HAL_GetTick>
 800446a:	0003      	movs	r3, r0
 800446c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004470:	f7ff fa6e 	bl	8003950 <HAL_GetTick>
 8004474:	0002      	movs	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1ec      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004482:	4baf      	ldr	r3, [pc, #700]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4013      	ands	r3, r2
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2208      	movs	r2, #8
 8004494:	4013      	ands	r3, r2
 8004496:	d036      	beq.n	8004506 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d019      	beq.n	80044d4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a0:	4ba7      	ldr	r3, [pc, #668]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80044a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a4:	4ba6      	ldr	r3, [pc, #664]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80044a6:	2101      	movs	r1, #1
 80044a8:	430a      	orrs	r2, r1
 80044aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ac:	f7ff fa50 	bl	8003950 <HAL_GetTick>
 80044b0:	0003      	movs	r3, r0
 80044b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b6:	f7ff fa4b 	bl	8003950 <HAL_GetTick>
 80044ba:	0002      	movs	r2, r0
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e1c9      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044c8:	4b9d      	ldr	r3, [pc, #628]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80044ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d0f1      	beq.n	80044b6 <HAL_RCC_OscConfig+0x3e6>
 80044d2:	e018      	b.n	8004506 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d4:	4b9a      	ldr	r3, [pc, #616]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80044d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d8:	4b99      	ldr	r3, [pc, #612]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80044da:	2101      	movs	r1, #1
 80044dc:	438a      	bics	r2, r1
 80044de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e0:	f7ff fa36 	bl	8003950 <HAL_GetTick>
 80044e4:	0003      	movs	r3, r0
 80044e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ea:	f7ff fa31 	bl	8003950 <HAL_GetTick>
 80044ee:	0002      	movs	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e1af      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044fc:	4b90      	ldr	r3, [pc, #576]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	2202      	movs	r2, #2
 8004502:	4013      	ands	r3, r2
 8004504:	d1f1      	bne.n	80044ea <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2204      	movs	r2, #4
 800450c:	4013      	ands	r3, r2
 800450e:	d100      	bne.n	8004512 <HAL_RCC_OscConfig+0x442>
 8004510:	e0af      	b.n	8004672 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2323      	movs	r3, #35	; 0x23
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451a:	4b89      	ldr	r3, [pc, #548]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 800451c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	055b      	lsls	r3, r3, #21
 8004522:	4013      	ands	r3, r2
 8004524:	d10a      	bne.n	800453c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	4b86      	ldr	r3, [pc, #536]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452a:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	0549      	lsls	r1, r1, #21
 8004530:	430a      	orrs	r2, r1
 8004532:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004534:	2323      	movs	r3, #35	; 0x23
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	4b83      	ldr	r3, [pc, #524]	; (800474c <HAL_RCC_OscConfig+0x67c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4013      	ands	r3, r2
 8004546:	d11a      	bne.n	800457e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004548:	4b80      	ldr	r3, [pc, #512]	; (800474c <HAL_RCC_OscConfig+0x67c>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b7f      	ldr	r3, [pc, #508]	; (800474c <HAL_RCC_OscConfig+0x67c>)
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	0049      	lsls	r1, r1, #1
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7ff f9fb 	bl	8003950 <HAL_GetTick>
 800455a:	0003      	movs	r3, r0
 800455c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7ff f9f6 	bl	8003950 <HAL_GetTick>
 8004564:	0002      	movs	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e174      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCC_OscConfig+0x67c>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4013      	ands	r3, r2
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	429a      	cmp	r2, r3
 8004588:	d107      	bne.n	800459a <HAL_RCC_OscConfig+0x4ca>
 800458a:	4b6d      	ldr	r3, [pc, #436]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 800458c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800458e:	4b6c      	ldr	r3, [pc, #432]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	0049      	lsls	r1, r1, #1
 8004594:	430a      	orrs	r2, r1
 8004596:	651a      	str	r2, [r3, #80]	; 0x50
 8004598:	e031      	b.n	80045fe <HAL_RCC_OscConfig+0x52e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x4ec>
 80045a2:	4b67      	ldr	r3, [pc, #412]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a6:	4b66      	ldr	r3, [pc, #408]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045a8:	4967      	ldr	r1, [pc, #412]	; (8004748 <HAL_RCC_OscConfig+0x678>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	651a      	str	r2, [r3, #80]	; 0x50
 80045ae:	4b64      	ldr	r3, [pc, #400]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045b4:	4966      	ldr	r1, [pc, #408]	; (8004750 <HAL_RCC_OscConfig+0x680>)
 80045b6:	400a      	ands	r2, r1
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50
 80045ba:	e020      	b.n	80045fe <HAL_RCC_OscConfig+0x52e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	23a0      	movs	r3, #160	; 0xa0
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d10e      	bne.n	80045e6 <HAL_RCC_OscConfig+0x516>
 80045c8:	4b5d      	ldr	r3, [pc, #372]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045cc:	4b5c      	ldr	r3, [pc, #368]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	00c9      	lsls	r1, r1, #3
 80045d2:	430a      	orrs	r2, r1
 80045d4:	651a      	str	r2, [r3, #80]	; 0x50
 80045d6:	4b5a      	ldr	r3, [pc, #360]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045da:	4b59      	ldr	r3, [pc, #356]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	0049      	lsls	r1, r1, #1
 80045e0:	430a      	orrs	r2, r1
 80045e2:	651a      	str	r2, [r3, #80]	; 0x50
 80045e4:	e00b      	b.n	80045fe <HAL_RCC_OscConfig+0x52e>
 80045e6:	4b56      	ldr	r3, [pc, #344]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ea:	4b55      	ldr	r3, [pc, #340]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045ec:	4956      	ldr	r1, [pc, #344]	; (8004748 <HAL_RCC_OscConfig+0x678>)
 80045ee:	400a      	ands	r2, r1
 80045f0:	651a      	str	r2, [r3, #80]	; 0x50
 80045f2:	4b53      	ldr	r3, [pc, #332]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f6:	4b52      	ldr	r3, [pc, #328]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80045f8:	4955      	ldr	r1, [pc, #340]	; (8004750 <HAL_RCC_OscConfig+0x680>)
 80045fa:	400a      	ands	r2, r1
 80045fc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d015      	beq.n	8004632 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7ff f9a3 	bl	8003950 <HAL_GetTick>
 800460a:	0003      	movs	r3, r0
 800460c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800460e:	e009      	b.n	8004624 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7ff f99e 	bl	8003950 <HAL_GetTick>
 8004614:	0002      	movs	r2, r0
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	4a4e      	ldr	r2, [pc, #312]	; (8004754 <HAL_RCC_OscConfig+0x684>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e11b      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004624:	4b46      	ldr	r3, [pc, #280]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4013      	ands	r3, r2
 800462e:	d0ef      	beq.n	8004610 <HAL_RCC_OscConfig+0x540>
 8004630:	e014      	b.n	800465c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7ff f98d 	bl	8003950 <HAL_GetTick>
 8004636:	0003      	movs	r3, r0
 8004638:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800463a:	e009      	b.n	8004650 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7ff f988 	bl	8003950 <HAL_GetTick>
 8004640:	0002      	movs	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	4a43      	ldr	r2, [pc, #268]	; (8004754 <HAL_RCC_OscConfig+0x684>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e105      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004650:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4013      	ands	r3, r2
 800465a:	d1ef      	bne.n	800463c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800465c:	2323      	movs	r3, #35	; 0x23
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b36      	ldr	r3, [pc, #216]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	4b35      	ldr	r3, [pc, #212]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 800466c:	493a      	ldr	r1, [pc, #232]	; (8004758 <HAL_RCC_OscConfig+0x688>)
 800466e:	400a      	ands	r2, r1
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2220      	movs	r2, #32
 8004678:	4013      	ands	r3, r2
 800467a:	d049      	beq.n	8004710 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d026      	beq.n	80046d2 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004684:	4b2e      	ldr	r3, [pc, #184]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 800468a:	2101      	movs	r1, #1
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004696:	2101      	movs	r1, #1
 8004698:	430a      	orrs	r2, r1
 800469a:	635a      	str	r2, [r3, #52]	; 0x34
 800469c:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_RCC_OscConfig+0x68c>)
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	4b2e      	ldr	r3, [pc, #184]	; (800475c <HAL_RCC_OscConfig+0x68c>)
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	0189      	lsls	r1, r1, #6
 80046a6:	430a      	orrs	r2, r1
 80046a8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7ff f951 	bl	8003950 <HAL_GetTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b4:	f7ff f94c 	bl	8003950 <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0ca      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2202      	movs	r2, #2
 80046cc:	4013      	ands	r3, r2
 80046ce:	d0f1      	beq.n	80046b4 <HAL_RCC_OscConfig+0x5e4>
 80046d0:	e01e      	b.n	8004710 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 80046d8:	2101      	movs	r1, #1
 80046da:	438a      	bics	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_RCC_OscConfig+0x68c>)
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_RCC_OscConfig+0x68c>)
 80046e4:	491e      	ldr	r1, [pc, #120]	; (8004760 <HAL_RCC_OscConfig+0x690>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7ff f931 	bl	8003950 <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f4:	f7ff f92c 	bl	8003950 <HAL_GetTick>
 80046f8:	0002      	movs	r2, r0
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0aa      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2202      	movs	r2, #2
 800470c:	4013      	ands	r3, r2
 800470e:	d1f1      	bne.n	80046f4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d100      	bne.n	800471a <HAL_RCC_OscConfig+0x64a>
 8004718:	e09f      	b.n	800485a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d100      	bne.n	8004722 <HAL_RCC_OscConfig+0x652>
 8004720:	e078      	b.n	8004814 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	2b02      	cmp	r3, #2
 8004728:	d159      	bne.n	80047de <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_RCC_OscConfig+0x670>)
 8004730:	490c      	ldr	r1, [pc, #48]	; (8004764 <HAL_RCC_OscConfig+0x694>)
 8004732:	400a      	ands	r2, r1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7ff f90b 	bl	8003950 <HAL_GetTick>
 800473a:	0003      	movs	r3, r0
 800473c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800473e:	e01c      	b.n	800477a <HAL_RCC_OscConfig+0x6aa>
 8004740:	40021000 	.word	0x40021000
 8004744:	ffff1fff 	.word	0xffff1fff
 8004748:	fffffeff 	.word	0xfffffeff
 800474c:	40007000 	.word	0x40007000
 8004750:	fffffbff 	.word	0xfffffbff
 8004754:	00001388 	.word	0x00001388
 8004758:	efffffff 	.word	0xefffffff
 800475c:	40010000 	.word	0x40010000
 8004760:	ffffdfff 	.word	0xffffdfff
 8004764:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7ff f8f2 	bl	8003950 <HAL_GetTick>
 800476c:	0002      	movs	r2, r0
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e070      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800477a:	4b3a      	ldr	r3, [pc, #232]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	049b      	lsls	r3, r3, #18
 8004782:	4013      	ands	r3, r2
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004786:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4a37      	ldr	r2, [pc, #220]	; (8004868 <HAL_RCC_OscConfig+0x798>)
 800478c:	4013      	ands	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	431a      	orrs	r2, r3
 80047a0:	4b30      	ldr	r3, [pc, #192]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 80047a2:	430a      	orrs	r2, r1
 80047a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a6:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	0449      	lsls	r1, r1, #17
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7ff f8cc 	bl	8003950 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047be:	f7ff f8c7 	bl	8003950 <HAL_GetTick>
 80047c2:	0002      	movs	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e045      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	049b      	lsls	r3, r3, #18
 80047d8:	4013      	ands	r3, r2
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x6ee>
 80047dc:	e03d      	b.n	800485a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 80047e4:	4921      	ldr	r1, [pc, #132]	; (800486c <HAL_RCC_OscConfig+0x79c>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7ff f8b1 	bl	8003950 <HAL_GetTick>
 80047ee:	0003      	movs	r3, r0
 80047f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f4:	f7ff f8ac 	bl	8003950 <HAL_GetTick>
 80047f8:	0002      	movs	r2, r0
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e02a      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004806:	4b17      	ldr	r3, [pc, #92]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	049b      	lsls	r3, r3, #18
 800480e:	4013      	ands	r3, r2
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x724>
 8004812:	e022      	b.n	800485a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e01d      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004820:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_RCC_OscConfig+0x794>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	025b      	lsls	r3, r3, #9
 800482c:	401a      	ands	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	429a      	cmp	r2, r3
 8004834:	d10f      	bne.n	8004856 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	23f0      	movs	r3, #240	; 0xf0
 800483a:	039b      	lsls	r3, r3, #14
 800483c:	401a      	ands	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d107      	bne.n	8004856 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	23c0      	movs	r3, #192	; 0xc0
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	401a      	ands	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b00a      	add	sp, #40	; 0x28
 8004862:	bdb0      	pop	{r4, r5, r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	ff02ffff 	.word	0xff02ffff
 800486c:	feffffff 	.word	0xfeffffff

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b5b0      	push	{r4, r5, r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e10d      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004884:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2201      	movs	r2, #1
 800488a:	4013      	ands	r3, r2
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d911      	bls.n	80048b6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2201      	movs	r2, #1
 8004898:	4393      	bics	r3, r2
 800489a:	0019      	movs	r1, r3
 800489c:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a4:	4b80      	ldr	r3, [pc, #512]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d001      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e0f4      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2202      	movs	r2, #2
 80048bc:	4013      	ands	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b7a      	ldr	r3, [pc, #488]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	22f0      	movs	r2, #240	; 0xf0
 80048c6:	4393      	bics	r3, r2
 80048c8:	0019      	movs	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	4b77      	ldr	r3, [pc, #476]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 80048d0:	430a      	orrs	r2, r1
 80048d2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2201      	movs	r2, #1
 80048da:	4013      	ands	r3, r2
 80048dc:	d100      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x70>
 80048de:	e089      	b.n	80049f4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048e8:	4b70      	ldr	r3, [pc, #448]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	4013      	ands	r3, r2
 80048f2:	d120      	bne.n	8004936 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0d3      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004900:	4b6a      	ldr	r3, [pc, #424]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	049b      	lsls	r3, r3, #18
 8004908:	4013      	ands	r3, r2
 800490a:	d114      	bne.n	8004936 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0c7      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d106      	bne.n	8004926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004918:	4b64      	ldr	r3, [pc, #400]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2204      	movs	r2, #4
 800491e:	4013      	ands	r3, r2
 8004920:	d109      	bne.n	8004936 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0bc      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4013      	ands	r3, r2
 8004930:	d101      	bne.n	8004936 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0b4      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004936:	4b5d      	ldr	r3, [pc, #372]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2203      	movs	r2, #3
 800493c:	4393      	bics	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4b59      	ldr	r3, [pc, #356]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004946:	430a      	orrs	r2, r1
 8004948:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800494a:	f7ff f801 	bl	8003950 <HAL_GetTick>
 800494e:	0003      	movs	r3, r0
 8004950:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d111      	bne.n	800497e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800495a:	e009      	b.n	8004970 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7fe fff8 	bl	8003950 <HAL_GetTick>
 8004960:	0002      	movs	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	4a52      	ldr	r2, [pc, #328]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e097      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004970:	4b4e      	ldr	r3, [pc, #312]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	220c      	movs	r2, #12
 8004976:	4013      	ands	r3, r2
 8004978:	2b08      	cmp	r3, #8
 800497a:	d1ef      	bne.n	800495c <HAL_RCC_ClockConfig+0xec>
 800497c:	e03a      	b.n	80049f4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b03      	cmp	r3, #3
 8004984:	d111      	bne.n	80049aa <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004986:	e009      	b.n	800499c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fe ffe2 	bl	8003950 <HAL_GetTick>
 800498c:	0002      	movs	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	4a47      	ldr	r2, [pc, #284]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e081      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800499c:	4b43      	ldr	r3, [pc, #268]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	220c      	movs	r2, #12
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d1ef      	bne.n	8004988 <HAL_RCC_ClockConfig+0x118>
 80049a8:	e024      	b.n	80049f4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d11b      	bne.n	80049ea <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b2:	e009      	b.n	80049c8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fe ffcc 	bl	8003950 <HAL_GetTick>
 80049b8:	0002      	movs	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a3c      	ldr	r2, [pc, #240]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e06b      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c8:	4b38      	ldr	r3, [pc, #224]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	220c      	movs	r2, #12
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d1ef      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x144>
 80049d4:	e00e      	b.n	80049f4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d6:	f7fe ffbb 	bl	8003950 <HAL_GetTick>
 80049da:	0002      	movs	r2, r0
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	4a33      	ldr	r2, [pc, #204]	; (8004ab0 <HAL_RCC_ClockConfig+0x240>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e05a      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80049ea:	4b30      	ldr	r3, [pc, #192]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	220c      	movs	r2, #12
 80049f0:	4013      	ands	r3, r2
 80049f2:	d1f0      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f4:	4b2c      	ldr	r3, [pc, #176]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2201      	movs	r2, #1
 80049fa:	4013      	ands	r3, r2
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d211      	bcs.n	8004a26 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2201      	movs	r2, #1
 8004a08:	4393      	bics	r3, r2
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_ClockConfig+0x238>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e03c      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_RCC_ClockConfig+0x244>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a40:	430a      	orrs	r2, r1
 8004a42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_RCC_ClockConfig+0x248>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00da      	lsls	r2, r3, #3
 8004a5e:	4b13      	ldr	r3, [pc, #76]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a60:	430a      	orrs	r2, r1
 8004a62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a64:	f000 f82e 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004a68:	0001      	movs	r1, r0
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_RCC_ClockConfig+0x23c>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	220f      	movs	r2, #15
 8004a72:	4013      	ands	r3, r2
 8004a74:	4a11      	ldr	r2, [pc, #68]	; (8004abc <HAL_RCC_ClockConfig+0x24c>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	000a      	movs	r2, r1
 8004a7a:	40da      	lsrs	r2, r3
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <HAL_RCC_ClockConfig+0x250>)
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004a80:	250b      	movs	r5, #11
 8004a82:	197c      	adds	r4, r7, r5
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7fe ff39 	bl	80038fc <HAL_InitTick>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004a8e:	197b      	adds	r3, r7, r5
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004a96:	230b      	movs	r3, #11
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b004      	add	sp, #16
 8004aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	00001388 	.word	0x00001388
 8004ab4:	fffff8ff 	.word	0xfffff8ff
 8004ab8:	ffffc7ff 	.word	0xffffc7ff
 8004abc:	0800829c 	.word	0x0800829c
 8004ac0:	20000004 	.word	0x20000004

08004ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004aca:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	220c      	movs	r2, #12
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d00e      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d00f      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d157      	bne.n	8004b92 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004ae2:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d002      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004aec:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aee:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004af0:	e05d      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8004af2:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004af4:	613b      	str	r3, [r7, #16]
      break;
 8004af6:	e05a      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004af8:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004afa:	613b      	str	r3, [r7, #16]
      break;
 8004afc:	e057      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	0c9b      	lsrs	r3, r3, #18
 8004b02:	220f      	movs	r2, #15
 8004b04:	4013      	ands	r3, r2
 8004b06:	4a30      	ldr	r2, [pc, #192]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b08:	5cd3      	ldrb	r3, [r2, r3]
 8004b0a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	0d9b      	lsrs	r3, r3, #22
 8004b10:	2203      	movs	r2, #3
 8004b12:	4013      	ands	r3, r2
 8004b14:	3301      	adds	r3, #1
 8004b16:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	025b      	lsls	r3, r3, #9
 8004b20:	4013      	ands	r3, r2
 8004b22:	d00f      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	000a      	movs	r2, r1
 8004b28:	0152      	lsls	r2, r2, #5
 8004b2a:	1a52      	subs	r2, r2, r1
 8004b2c:	0193      	lsls	r3, r2, #6
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	185b      	adds	r3, r3, r1
 8004b34:	025b      	lsls	r3, r3, #9
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7fb fae5 	bl	8000108 <__udivsi3>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e023      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b44:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d00f      	beq.n	8004b6e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	000a      	movs	r2, r1
 8004b52:	0152      	lsls	r2, r2, #5
 8004b54:	1a52      	subs	r2, r2, r1
 8004b56:	0193      	lsls	r3, r2, #6
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	185b      	adds	r3, r3, r1
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fb fad0 	bl	8000108 <__udivsi3>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e00e      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	000a      	movs	r2, r1
 8004b72:	0152      	lsls	r2, r2, #5
 8004b74:	1a52      	subs	r2, r2, r1
 8004b76:	0193      	lsls	r3, r2, #6
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	185b      	adds	r3, r3, r1
 8004b7e:	029b      	lsls	r3, r3, #10
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7fb fac0 	bl	8000108 <__udivsi3>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	613b      	str	r3, [r7, #16]
      break;
 8004b90:	e00d      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	0b5b      	lsrs	r3, r3, #13
 8004b98:	2207      	movs	r2, #7
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	0212      	lsls	r2, r2, #8
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	0013      	movs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
      break;
 8004bac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004bae:	693b      	ldr	r3, [r7, #16]
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b006      	add	sp, #24
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	003d0900 	.word	0x003d0900
 8004bc0:	00f42400 	.word	0x00f42400
 8004bc4:	007a1200 	.word	0x007a1200
 8004bc8:	080082b4 	.word	0x080082b4

08004bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd0:	4b02      	ldr	r3, [pc, #8]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	20000004 	.word	0x20000004

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004be4:	f7ff fff2 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004be8:	0001      	movs	r1, r0
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bf6:	5cd3      	ldrb	r3, [r2, r3]
 8004bf8:	40d9      	lsrs	r1, r3
 8004bfa:	000b      	movs	r3, r1
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	40021000 	.word	0x40021000
 8004c08:	080082ac 	.word	0x080082ac

08004c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c10:	f7ff ffdc 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004c14:	0001      	movs	r1, r0
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	0adb      	lsrs	r3, r3, #11
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	4013      	ands	r3, r2
 8004c20:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	40d9      	lsrs	r1, r3
 8004c26:	000b      	movs	r3, r1
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	40021000 	.word	0x40021000
 8004c34:	080082ac 	.word	0x080082ac

08004c38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2220      	movs	r2, #32
 8004c46:	4013      	ands	r3, r2
 8004c48:	d106      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	4013      	ands	r3, r2
 8004c54:	d100      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004c56:	e0dd      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004c58:	2317      	movs	r3, #23
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c60:	4ba4      	ldr	r3, [pc, #656]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	055b      	lsls	r3, r3, #21
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d10a      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4ba1      	ldr	r3, [pc, #644]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c70:	4ba0      	ldr	r3, [pc, #640]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	0549      	lsls	r1, r1, #21
 8004c76:	430a      	orrs	r2, r1
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c7a:	2317      	movs	r3, #23
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b9d      	ldr	r3, [pc, #628]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d11a      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b9a      	ldr	r3, [pc, #616]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b99      	ldr	r3, [pc, #612]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	0049      	lsls	r1, r1, #1
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fe fe58 	bl	8003950 <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fe fe53 	bl	8003950 <HAL_GetTick>
 8004caa:	0002      	movs	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b64      	cmp	r3, #100	; 0x64
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e118      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	4b8f      	ldr	r3, [pc, #572]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004cc4:	4b8b      	ldr	r3, [pc, #556]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	23c0      	movs	r3, #192	; 0xc0
 8004cca:	039b      	lsls	r3, r3, #14
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	23c0      	movs	r3, #192	; 0xc0
 8004cd6:	039b      	lsls	r3, r3, #14
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	23c0      	movs	r3, #192	; 0xc0
 8004ce6:	039b      	lsls	r3, r3, #14
 8004ce8:	4013      	ands	r3, r2
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d013      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	23c0      	movs	r3, #192	; 0xc0
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	23c0      	movs	r3, #192	; 0xc0
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d10a      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d02:	4b7c      	ldr	r3, [pc, #496]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	029b      	lsls	r3, r3, #10
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	029b      	lsls	r3, r3, #10
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d101      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0e8      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d18:	4b76      	ldr	r3, [pc, #472]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d1c:	23c0      	movs	r3, #192	; 0xc0
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	4013      	ands	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d049      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	23c0      	movs	r3, #192	; 0xc0
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	4013      	ands	r3, r2
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d004      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	4013      	ands	r3, r2
 8004d42:	d10d      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	23c0      	movs	r3, #192	; 0xc0
 8004d4a:	029b      	lsls	r3, r3, #10
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d034      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d02e      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d60:	4b64      	ldr	r3, [pc, #400]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d64:	4a65      	ldr	r2, [pc, #404]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d6a:	4b62      	ldr	r3, [pc, #392]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6e:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d70:	2180      	movs	r1, #128	; 0x80
 8004d72:	0309      	lsls	r1, r1, #12
 8004d74:	430a      	orrs	r2, r1
 8004d76:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d78:	4b5e      	ldr	r3, [pc, #376]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d7c:	4b5d      	ldr	r3, [pc, #372]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d7e:	4960      	ldr	r1, [pc, #384]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004d84:	4b5b      	ldr	r3, [pc, #364]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4013      	ands	r3, r2
 8004d92:	d014      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fe fddc 	bl	8003950 <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d9c:	e009      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fe fdd7 	bl	8003950 <HAL_GetTick>
 8004da2:	0002      	movs	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	4a56      	ldr	r2, [pc, #344]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e09b      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db2:	4b50      	ldr	r3, [pc, #320]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d0ef      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	23c0      	movs	r3, #192	; 0xc0
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	23c0      	movs	r3, #192	; 0xc0
 8004dca:	029b      	lsls	r3, r3, #10
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d10c      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004dd0:	4b48      	ldr	r3, [pc, #288]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a4c      	ldr	r2, [pc, #304]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	23c0      	movs	r3, #192	; 0xc0
 8004de0:	039b      	lsls	r3, r3, #14
 8004de2:	401a      	ands	r2, r3
 8004de4:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004de6:	430a      	orrs	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	23c0      	movs	r3, #192	; 0xc0
 8004df4:	029b      	lsls	r3, r3, #10
 8004df6:	401a      	ands	r2, r3
 8004df8:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dfe:	2317      	movs	r3, #23
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e08:	4b3a      	ldr	r3, [pc, #232]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0c:	4b39      	ldr	r3, [pc, #228]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e0e:	493f      	ldr	r1, [pc, #252]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e1e:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e22:	2203      	movs	r2, #3
 8004e24:	4393      	bics	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2202      	movs	r2, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e40:	220c      	movs	r2, #12
 8004e42:	4393      	bics	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2204      	movs	r2, #4
 8004e56:	4013      	ands	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e5a:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	4b22      	ldr	r3, [pc, #136]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2208      	movs	r2, #8
 8004e74:	4013      	ands	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7c:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	0019      	movs	r1, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4013      	ands	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e98:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9c:	4a17      	ldr	r2, [pc, #92]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2240      	movs	r2, #64	; 0x40
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	0019      	movs	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	4a10      	ldr	r2, [pc, #64]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b006      	add	sp, #24
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	fffcffff 	.word	0xfffcffff
 8004f00:	fff7ffff 	.word	0xfff7ffff
 8004f04:	00001388 	.word	0x00001388
 8004f08:	ffcfffff 	.word	0xffcfffff
 8004f0c:	efffffff 	.word	0xefffffff
 8004f10:	fffff3ff 	.word	0xfffff3ff
 8004f14:	ffffcfff 	.word	0xffffcfff
 8004f18:	fbffffff 	.word	0xfbffffff
 8004f1c:	fff3ffff 	.word	0xfff3ffff

08004f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e059      	b.n	8004fe6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2251      	movs	r2, #81	; 0x51
 8004f3c:	5c9b      	ldrb	r3, [r3, r2]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2250      	movs	r2, #80	; 0x50
 8004f48:	2100      	movs	r1, #0
 8004f4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7fd fe48 	bl	8002be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2251      	movs	r2, #81	; 0x51
 8004f58:	2102      	movs	r1, #2
 8004f5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2140      	movs	r1, #64	; 0x40
 8004f68:	438a      	bics	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6999      	ldr	r1, [r3, #24]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	400b      	ands	r3, r1
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	0011      	movs	r1, r2
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4907      	ldr	r1, [pc, #28]	; (8004ff0 <HAL_SPI_Init+0xd0>)
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2251      	movs	r2, #81	; 0x51
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b002      	add	sp, #8
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	fffff7ff 	.word	0xfffff7ff

08004ff4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005004:	231f      	movs	r3, #31
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2250      	movs	r2, #80	; 0x50
 8005010:	5c9b      	ldrb	r3, [r3, r2]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_SPI_Transmit+0x26>
 8005016:	2302      	movs	r3, #2
 8005018:	e136      	b.n	8005288 <HAL_SPI_Transmit+0x294>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2250      	movs	r2, #80	; 0x50
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005022:	f7fe fc95 	bl	8003950 <HAL_GetTick>
 8005026:	0003      	movs	r3, r0
 8005028:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800502a:	2316      	movs	r3, #22
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	1dba      	adds	r2, r7, #6
 8005030:	8812      	ldrh	r2, [r2, #0]
 8005032:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2251      	movs	r2, #81	; 0x51
 8005038:	5c9b      	ldrb	r3, [r3, r2]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d004      	beq.n	800504a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005040:	231f      	movs	r3, #31
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	2202      	movs	r2, #2
 8005046:	701a      	strb	r2, [r3, #0]
    goto error;
 8005048:	e113      	b.n	8005272 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_SPI_Transmit+0x64>
 8005050:	1dbb      	adds	r3, r7, #6
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005058:	231f      	movs	r3, #31
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005060:	e107      	b.n	8005272 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2251      	movs	r2, #81	; 0x51
 8005066:	2103      	movs	r1, #3
 8005068:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1dba      	adds	r2, r7, #6
 800507a:	8812      	ldrh	r2, [r2, #0]
 800507c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1dba      	adds	r2, r7, #6
 8005082:	8812      	ldrh	r2, [r2, #0]
 8005084:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d108      	bne.n	80050c2 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	01c9      	lsls	r1, r1, #7
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2240      	movs	r2, #64	; 0x40
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2140      	movs	r1, #64	; 0x40
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d14e      	bne.n	800518a <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_SPI_Transmit+0x10a>
 80050f4:	2316      	movs	r3, #22
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d13f      	bne.n	800517e <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	881a      	ldrh	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005122:	e02c      	b.n	800517e <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2202      	movs	r2, #2
 800512c:	4013      	ands	r3, r2
 800512e:	2b02      	cmp	r3, #2
 8005130:	d112      	bne.n	8005158 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	881a      	ldrh	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36
 8005156:	e012      	b.n	800517e <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005158:	f7fe fbfa 	bl	8003950 <HAL_GetTick>
 800515c:	0002      	movs	r2, r0
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d802      	bhi.n	800516e <HAL_SPI_Transmit+0x17a>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	d102      	bne.n	8005174 <HAL_SPI_Transmit+0x180>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8005174:	231f      	movs	r3, #31
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	2203      	movs	r2, #3
 800517a:	701a      	strb	r2, [r3, #0]
          goto error;
 800517c:	e079      	b.n	8005272 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1cd      	bne.n	8005124 <HAL_SPI_Transmit+0x130>
 8005188:	e04f      	b.n	800522a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_SPI_Transmit+0x1a8>
 8005192:	2316      	movs	r3, #22
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d141      	bne.n	8005220 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051c2:	e02d      	b.n	8005220 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2202      	movs	r2, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d113      	bne.n	80051fa <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	7812      	ldrb	r2, [r2, #0]
 80051de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80051f8:	e012      	b.n	8005220 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051fa:	f7fe fba9 	bl	8003950 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d802      	bhi.n	8005210 <HAL_SPI_Transmit+0x21c>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	d102      	bne.n	8005216 <HAL_SPI_Transmit+0x222>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8005216:	231f      	movs	r3, #31
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	2203      	movs	r2, #3
 800521c:	701a      	strb	r2, [r3, #0]
          goto error;
 800521e:	e028      	b.n	8005272 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1cc      	bne.n	80051c4 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	0018      	movs	r0, r3
 8005232:	f000 fbe1 	bl	80059f8 <SPI_EndRxTxTransaction>
 8005236:	1e03      	subs	r3, r0, #0
 8005238:	d002      	beq.n	8005240 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005266:	231f      	movs	r3, #31
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e000      	b.n	8005272 <HAL_SPI_Transmit+0x27e>
  }

error:
 8005270:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2251      	movs	r2, #81	; 0x51
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2250      	movs	r2, #80	; 0x50
 800527e:	2100      	movs	r1, #0
 8005280:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005282:	231f      	movs	r3, #31
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	781b      	ldrb	r3, [r3, #0]
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b008      	add	sp, #32
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b590      	push	{r4, r7, lr}
 8005292:	b089      	sub	sp, #36	; 0x24
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	1dbb      	adds	r3, r7, #6
 800529e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052a0:	2317      	movs	r3, #23
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	2382      	movs	r3, #130	; 0x82
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d113      	bne.n	80052dc <HAL_SPI_Receive+0x4c>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10f      	bne.n	80052dc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2251      	movs	r2, #81	; 0x51
 80052c0:	2104      	movs	r1, #4
 80052c2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052c4:	1dbb      	adds	r3, r7, #6
 80052c6:	881c      	ldrh	r4, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	0023      	movs	r3, r4
 80052d4:	f000 f8fa 	bl	80054cc <HAL_SPI_TransmitReceive>
 80052d8:	0003      	movs	r3, r0
 80052da:	e0f1      	b.n	80054c0 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2250      	movs	r2, #80	; 0x50
 80052e0:	5c9b      	ldrb	r3, [r3, r2]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_SPI_Receive+0x5a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0ea      	b.n	80054c0 <HAL_SPI_Receive+0x230>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2250      	movs	r2, #80	; 0x50
 80052ee:	2101      	movs	r1, #1
 80052f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052f2:	f7fe fb2d 	bl	8003950 <HAL_GetTick>
 80052f6:	0003      	movs	r3, r0
 80052f8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2251      	movs	r2, #81	; 0x51
 80052fe:	5c9b      	ldrb	r3, [r3, r2]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d004      	beq.n	8005310 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005306:	2317      	movs	r3, #23
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	2202      	movs	r2, #2
 800530c:	701a      	strb	r2, [r3, #0]
    goto error;
 800530e:	e0cc      	b.n	80054aa <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_SPI_Receive+0x8e>
 8005316:	1dbb      	adds	r3, r7, #6
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800531e:	2317      	movs	r3, #23
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	2201      	movs	r2, #1
 8005324:	701a      	strb	r2, [r3, #0]
    goto error;
 8005326:	e0c0      	b.n	80054aa <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2251      	movs	r2, #81	; 0x51
 800532c:	2104      	movs	r1, #4
 800532e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1dba      	adds	r2, r7, #6
 8005340:	8812      	ldrh	r2, [r2, #0]
 8005342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1dba      	adds	r2, r7, #6
 8005348:	8812      	ldrh	r2, [r2, #0]
 800534a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	429a      	cmp	r2, r3
 8005374:	d107      	bne.n	8005386 <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4951      	ldr	r1, [pc, #324]	; (80054c8 <HAL_SPI_Receive+0x238>)
 8005382:	400a      	ands	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2240      	movs	r2, #64	; 0x40
 800538e:	4013      	ands	r3, r2
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d007      	beq.n	80053a4 <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2140      	movs	r1, #64	; 0x40
 80053a0:	430a      	orrs	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d164      	bne.n	8005476 <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053ac:	e02f      	b.n	800540e <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2201      	movs	r2, #1
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d115      	bne.n	80053e8 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	001a      	movs	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	7812      	ldrb	r2, [r2, #0]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e6:	e012      	b.n	800540e <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e8:	f7fe fab2 	bl	8003950 <HAL_GetTick>
 80053ec:	0002      	movs	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d802      	bhi.n	80053fe <HAL_SPI_Receive+0x16e>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	3301      	adds	r3, #1
 80053fc:	d102      	bne.n	8005404 <HAL_SPI_Receive+0x174>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 8005404:	2317      	movs	r3, #23
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2203      	movs	r2, #3
 800540a:	701a      	strb	r2, [r3, #0]
          goto error;
 800540c:	e04d      	b.n	80054aa <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ca      	bne.n	80053ae <HAL_SPI_Receive+0x11e>
 8005418:	e032      	b.n	8005480 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2201      	movs	r2, #1
 8005422:	4013      	ands	r3, r2
 8005424:	2b01      	cmp	r3, #1
 8005426:	d113      	bne.n	8005450 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	b292      	uxth	r2, r2
 8005434:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	1c9a      	adds	r2, r3, #2
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800544e:	e012      	b.n	8005476 <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005450:	f7fe fa7e 	bl	8003950 <HAL_GetTick>
 8005454:	0002      	movs	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d802      	bhi.n	8005466 <HAL_SPI_Receive+0x1d6>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	d102      	bne.n	800546c <HAL_SPI_Receive+0x1dc>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 800546c:	2317      	movs	r3, #23
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	2203      	movs	r2, #3
 8005472:	701a      	strb	r2, [r3, #0]
          goto error;
 8005474:	e019      	b.n	80054aa <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1cc      	bne.n	800541a <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	0018      	movs	r0, r3
 8005488:	f000 fa4c 	bl	8005924 <SPI_EndRxTransaction>
 800548c:	1e03      	subs	r3, r0, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 800549e:	2317      	movs	r3, #23
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e000      	b.n	80054aa <HAL_SPI_Receive+0x21a>
  }

error :
 80054a8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2251      	movs	r2, #81	; 0x51
 80054ae:	2101      	movs	r1, #1
 80054b0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2250      	movs	r2, #80	; 0x50
 80054b6:	2100      	movs	r1, #0
 80054b8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80054ba:	2317      	movs	r3, #23
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	781b      	ldrb	r3, [r3, #0]
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b007      	add	sp, #28
 80054c6:	bd90      	pop	{r4, r7, pc}
 80054c8:	ffffbfff 	.word	0xffffbfff

080054cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	; 0x30
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	001a      	movs	r2, r3
 80054da:	1cbb      	adds	r3, r7, #2
 80054dc:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054de:	2301      	movs	r3, #1
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054e2:	232b      	movs	r3, #43	; 0x2b
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2250      	movs	r2, #80	; 0x50
 80054ee:	5c9b      	ldrb	r3, [r3, r2]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_SPI_TransmitReceive+0x2c>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e1a1      	b.n	800583c <HAL_SPI_TransmitReceive+0x370>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2250      	movs	r2, #80	; 0x50
 80054fc:	2101      	movs	r1, #1
 80054fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005500:	f7fe fa26 	bl	8003950 <HAL_GetTick>
 8005504:	0003      	movs	r3, r0
 8005506:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005508:	2023      	movs	r0, #35	; 0x23
 800550a:	183b      	adds	r3, r7, r0
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	2151      	movs	r1, #81	; 0x51
 8005510:	5c52      	ldrb	r2, [r2, r1]
 8005512:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800551a:	231a      	movs	r3, #26
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	1cba      	adds	r2, r7, #2
 8005520:	8812      	ldrh	r2, [r2, #0]
 8005522:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005524:	183b      	adds	r3, r7, r0
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d012      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x86>
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	2382      	movs	r3, #130	; 0x82
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	429a      	cmp	r2, r3
 8005534:	d108      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x7c>
 800553e:	2323      	movs	r3, #35	; 0x23
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d004      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8005548:	232b      	movs	r3, #43	; 0x2b
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2202      	movs	r2, #2
 800554e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005550:	e169      	b.n	8005826 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <HAL_SPI_TransmitReceive+0x9a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_SPI_TransmitReceive+0x9a>
 800555e:	1cbb      	adds	r3, r7, #2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8005566:	232b      	movs	r3, #43	; 0x2b
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
    goto error;
 800556e:	e15a      	b.n	8005826 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2251      	movs	r2, #81	; 0x51
 8005574:	5c9b      	ldrb	r3, [r3, r2]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b04      	cmp	r3, #4
 800557a:	d003      	beq.n	8005584 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2251      	movs	r2, #81	; 0x51
 8005580:	2105      	movs	r1, #5
 8005582:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1cba      	adds	r2, r7, #2
 8005594:	8812      	ldrh	r2, [r2, #0]
 8005596:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1cba      	adds	r2, r7, #2
 800559c:	8812      	ldrh	r2, [r2, #0]
 800559e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1cba      	adds	r2, r7, #2
 80055aa:	8812      	ldrh	r2, [r2, #0]
 80055ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1cba      	adds	r2, r7, #2
 80055b2:	8812      	ldrh	r2, [r2, #0]
 80055b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2240      	movs	r2, #64	; 0x40
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d007      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2140      	movs	r1, #64	; 0x40
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d000      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x122>
 80055ec:	e07a      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_SPI_TransmitReceive+0x134>
 80055f6:	231a      	movs	r3, #26
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d166      	bne.n	80056ce <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	881a      	ldrh	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005624:	e053      	b.n	80056ce <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2202      	movs	r2, #2
 800562e:	4013      	ands	r3, r2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d11b      	bne.n	800566c <HAL_SPI_TransmitReceive+0x1a0>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_SPI_TransmitReceive+0x1a0>
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d113      	bne.n	800566c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	881a      	ldrh	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	1c9a      	adds	r2, r3, #2
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2201      	movs	r2, #1
 8005674:	4013      	ands	r3, r2
 8005676:	2b01      	cmp	r3, #1
 8005678:	d119      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x1e2>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d014      	beq.n	80056ae <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	b292      	uxth	r2, r2
 8005690:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056aa:	2301      	movs	r3, #1
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056ae:	f7fe f94f 	bl	8003950 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d807      	bhi.n	80056ce <HAL_SPI_TransmitReceive+0x202>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	3301      	adds	r3, #1
 80056c2:	d004      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80056c4:	232b      	movs	r3, #43	; 0x2b
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2203      	movs	r2, #3
 80056ca:	701a      	strb	r2, [r3, #0]
        goto error;
 80056cc:	e0ab      	b.n	8005826 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1a6      	bne.n	8005626 <HAL_SPI_TransmitReceive+0x15a>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1a1      	bne.n	8005626 <HAL_SPI_TransmitReceive+0x15a>
 80056e2:	e07f      	b.n	80057e4 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x22c>
 80056ec:	231a      	movs	r3, #26
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d000      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x22c>
 80056f6:	e06b      	b.n	80057d0 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	7812      	ldrb	r2, [r2, #0]
 8005704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800571e:	e057      	b.n	80057d0 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2202      	movs	r2, #2
 8005728:	4013      	ands	r3, r2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d11c      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x29c>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <HAL_SPI_TransmitReceive+0x29c>
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d114      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2201      	movs	r2, #1
 8005770:	4013      	ands	r3, r2
 8005772:	2b01      	cmp	r3, #1
 8005774:	d119      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x2de>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d014      	beq.n	80057aa <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057a6:	2301      	movs	r3, #1
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057aa:	f7fe f8d1 	bl	8003950 <HAL_GetTick>
 80057ae:	0002      	movs	r2, r0
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d802      	bhi.n	80057c0 <HAL_SPI_TransmitReceive+0x2f4>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	3301      	adds	r3, #1
 80057be:	d102      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x2fa>
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80057c6:	232b      	movs	r3, #43	; 0x2b
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	2203      	movs	r2, #3
 80057cc:	701a      	strb	r2, [r3, #0]
        goto error;
 80057ce:	e02a      	b.n	8005826 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1a2      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x254>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d19d      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 f904 	bl	80059f8 <SPI_EndRxTxTransaction>
 80057f0:	1e03      	subs	r3, r0, #0
 80057f2:	d007      	beq.n	8005804 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80057f4:	232b      	movs	r3, #43	; 0x2b
 80057f6:	18fb      	adds	r3, r7, r3
 80057f8:	2201      	movs	r2, #1
 80057fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005802:	e010      	b.n	8005826 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	e000      	b.n	8005826 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8005824:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2251      	movs	r2, #81	; 0x51
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2250      	movs	r2, #80	; 0x50
 8005832:	2100      	movs	r1, #0
 8005834:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005836:	232b      	movs	r3, #43	; 0x2b
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	781b      	ldrb	r3, [r3, #0]
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b00c      	add	sp, #48	; 0x30
 8005842:	bd80      	pop	{r7, pc}

08005844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	1dfb      	adds	r3, r7, #7
 8005852:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005854:	e050      	b.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	d04d      	beq.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800585c:	f7fe f878 	bl	8003950 <HAL_GetTick>
 8005860:	0002      	movs	r2, r0
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d902      	bls.n	8005872 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d142      	bne.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	21e0      	movs	r1, #224	; 0xe0
 800587e:	438a      	bics	r2, r1
 8005880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	2382      	movs	r3, #130	; 0x82
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	429a      	cmp	r2, r3
 800588c:	d113      	bne.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0x72>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	429a      	cmp	r2, r3
 8005898:	d005      	beq.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	2380      	movs	r3, #128	; 0x80
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d107      	bne.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	438a      	bics	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	429a      	cmp	r2, r3
 80058c0:	d110      	bne.n	80058e4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4914      	ldr	r1, [pc, #80]	; (8005920 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2180      	movs	r1, #128	; 0x80
 80058de:	0189      	lsls	r1, r1, #6
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2251      	movs	r2, #81	; 0x51
 80058e8:	2101      	movs	r1, #1
 80058ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2250      	movs	r2, #80	; 0x50
 80058f0:	2100      	movs	r1, #0
 80058f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e00f      	b.n	8005918 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4013      	ands	r3, r2
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	425a      	negs	r2, r3
 8005908:	4153      	adcs	r3, r2
 800590a:	b2db      	uxtb	r3, r3
 800590c:	001a      	movs	r2, r3
 800590e:	1dfb      	adds	r3, r7, #7
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d19f      	bne.n	8005856 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	b004      	add	sp, #16
 800591e:	bd80      	pop	{r7, pc}
 8005920:	ffffdfff 	.word	0xffffdfff

08005924 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	2382      	movs	r3, #130	; 0x82
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	429a      	cmp	r2, r3
 800593a:	d113      	bne.n	8005964 <SPI_EndRxTransaction+0x40>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	429a      	cmp	r2, r3
 8005946:	d005      	beq.n	8005954 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	429a      	cmp	r2, r3
 8005952:	d107      	bne.n	8005964 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2140      	movs	r1, #64	; 0x40
 8005960:	438a      	bics	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	2382      	movs	r3, #130	; 0x82
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	429a      	cmp	r2, r3
 800596e:	d12b      	bne.n	80059c8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	429a      	cmp	r2, r3
 800597a:	d012      	beq.n	80059a2 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	0013      	movs	r3, r2
 8005986:	2200      	movs	r2, #0
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	f7ff ff5b 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 800598e:	1e03      	subs	r3, r0, #0
 8005990:	d02d      	beq.n	80059ee <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	2220      	movs	r2, #32
 8005998:	431a      	orrs	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e026      	b.n	80059f0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	0013      	movs	r3, r2
 80059ac:	2200      	movs	r2, #0
 80059ae:	2101      	movs	r1, #1
 80059b0:	f7ff ff48 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 80059b4:	1e03      	subs	r3, r0, #0
 80059b6:	d01a      	beq.n	80059ee <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	2220      	movs	r2, #32
 80059be:	431a      	orrs	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e013      	b.n	80059f0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	0013      	movs	r3, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	2101      	movs	r1, #1
 80059d6:	f7ff ff35 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 80059da:	1e03      	subs	r3, r0, #0
 80059dc:	d007      	beq.n	80059ee <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	2220      	movs	r2, #32
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e000      	b.n	80059f0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	0018      	movs	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b004      	add	sp, #16
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	2382      	movs	r3, #130	; 0x82
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d112      	bne.n	8005a36 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	0013      	movs	r3, r2
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	f7ff ff11 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d020      	beq.n	8005a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e019      	b.n	8005a6a <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2251      	movs	r2, #81	; 0x51
 8005a3a:	5c9b      	ldrb	r3, [r3, r2]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d112      	bne.n	8005a68 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	0013      	movs	r3, r2
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2101      	movs	r1, #1
 8005a50:	f7ff fef8 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 8005a54:	1e03      	subs	r3, r0, #0
 8005a56:	d007      	beq.n	8005a68 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e000      	b.n	8005a6a <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b004      	add	sp, #16
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e01e      	b.n	8005ac2 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2239      	movs	r2, #57	; 0x39
 8005a88:	5c9b      	ldrb	r3, [r3, r2]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d107      	bne.n	8005aa0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2238      	movs	r2, #56	; 0x38
 8005a94:	2100      	movs	r1, #0
 8005a96:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7fd f90a 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2239      	movs	r2, #57	; 0x39
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	0010      	movs	r0, r2
 8005ab4:	f000 fa40 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2239      	movs	r2, #57	; 0x39
 8005abc:	2101      	movs	r1, #1
 8005abe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b002      	add	sp, #8
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2101      	movs	r1, #1
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2207      	movs	r2, #7
 8005aea:	4013      	ands	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d007      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2101      	movs	r1, #1
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	0018      	movs	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b004      	add	sp, #16
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d124      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d11d      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2203      	movs	r2, #3
 8005b38:	4252      	negs	r2, r2
 8005b3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2203      	movs	r2, #3
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 f9d9 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005b56:	e007      	b.n	8005b68 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f9cc 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	0018      	movs	r0, r3
 8005b64:	f000 f9d8 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2204      	movs	r2, #4
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d125      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	2204      	movs	r2, #4
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d11e      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2205      	movs	r2, #5
 8005b90:	4252      	negs	r2, r2
 8005b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	23c0      	movs	r3, #192	; 0xc0
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 f9ac 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e007      	b.n	8005bc2 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 f99f 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 f9ab 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2208      	movs	r2, #8
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d124      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d11d      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2209      	movs	r2, #9
 8005bea:	4252      	negs	r2, r2
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 f980 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e007      	b.n	8005c1a <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f973 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 f97f 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2210      	movs	r2, #16
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d125      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	2210      	movs	r2, #16
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d11e      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2211      	movs	r2, #17
 8005c42:	4252      	negs	r2, r2
 8005c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69da      	ldr	r2, [r3, #28]
 8005c52:	23c0      	movs	r3, #192	; 0xc0
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4013      	ands	r3, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f000 f953 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005c62:	e007      	b.n	8005c74 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f000 f946 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f000 f952 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2201      	movs	r2, #1
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10f      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d108      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	4252      	negs	r2, r2
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 f920 	bl	8005ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d10f      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	2240      	movs	r2, #64	; 0x40
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d108      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2241      	movs	r2, #65	; 0x41
 8005cca:	4252      	negs	r2, r2
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 f929 	bl	8005f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b002      	add	sp, #8
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2238      	movs	r2, #56	; 0x38
 8005cee:	5c9b      	ldrb	r3, [r3, r2]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_ConfigClockSource+0x18>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e0ab      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x170>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2238      	movs	r2, #56	; 0x38
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2239      	movs	r2, #57	; 0x39
 8005d04:	2102      	movs	r1, #2
 8005d06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2277      	movs	r2, #119	; 0x77
 8005d14:	4393      	bics	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a4f      	ldr	r2, [pc, #316]	; (8005e58 <HAL_TIM_ConfigClockSource+0x178>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d100      	bne.n	8005d32 <HAL_TIM_ConfigClockSource+0x52>
 8005d30:	e06b      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x12a>
 8005d32:	d80e      	bhi.n	8005d52 <HAL_TIM_ConfigClockSource+0x72>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d100      	bne.n	8005d3a <HAL_TIM_ConfigClockSource+0x5a>
 8005d38:	e077      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x14a>
 8005d3a:	d803      	bhi.n	8005d44 <HAL_TIM_ConfigClockSource+0x64>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d100      	bne.n	8005d42 <HAL_TIM_ConfigClockSource+0x62>
 8005d40:	e073      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005d42:	e07c      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d100      	bne.n	8005d4a <HAL_TIM_ConfigClockSource+0x6a>
 8005d48:	e06f      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x14a>
 8005d4a:	2b30      	cmp	r3, #48	; 0x30
 8005d4c:	d100      	bne.n	8005d50 <HAL_TIM_ConfigClockSource+0x70>
 8005d4e:	e06c      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005d50:	e075      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005d52:	2b70      	cmp	r3, #112	; 0x70
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0x94>
 8005d56:	d804      	bhi.n	8005d62 <HAL_TIM_ConfigClockSource+0x82>
 8005d58:	2b50      	cmp	r3, #80	; 0x50
 8005d5a:	d036      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0xea>
 8005d5c:	2b60      	cmp	r3, #96	; 0x60
 8005d5e:	d044      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005d60:	e06d      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005d62:	2280      	movs	r2, #128	; 0x80
 8005d64:	0152      	lsls	r2, r2, #5
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d068      	beq.n	8005e3c <HAL_TIM_ConfigClockSource+0x15c>
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	0192      	lsls	r2, r2, #6
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d017      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8005d72:	e064      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6899      	ldr	r1, [r3, #8]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f000 fa34 	bl	80061f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2277      	movs	r2, #119	; 0x77
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	609a      	str	r2, [r3, #8]
      break;
 8005da0:	e04d      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6899      	ldr	r1, [r3, #8]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f000 fa1d 	bl	80061f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	01c9      	lsls	r1, r1, #7
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]
      break;
 8005dc8:	e039      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6859      	ldr	r1, [r3, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	001a      	movs	r2, r3
 8005dd8:	f000 f990 	bl	80060fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2150      	movs	r1, #80	; 0x50
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 f9ea 	bl	80061bc <TIM_ITRx_SetConfig>
      break;
 8005de8:	e029      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6859      	ldr	r1, [r3, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	001a      	movs	r2, r3
 8005df8:	f000 f9ae 	bl	8006158 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2160      	movs	r1, #96	; 0x60
 8005e02:	0018      	movs	r0, r3
 8005e04:	f000 f9da 	bl	80061bc <TIM_ITRx_SetConfig>
      break;
 8005e08:	e019      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	001a      	movs	r2, r3
 8005e18:	f000 f970 	bl	80060fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2140      	movs	r1, #64	; 0x40
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f9ca 	bl	80061bc <TIM_ITRx_SetConfig>
      break;
 8005e28:	e009      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	0019      	movs	r1, r3
 8005e34:	0010      	movs	r0, r2
 8005e36:	f000 f9c1 	bl	80061bc <TIM_ITRx_SetConfig>
      break;
 8005e3a:	e000      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005e3c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2239      	movs	r2, #57	; 0x39
 8005e42:	2101      	movs	r1, #1
 8005e44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2238      	movs	r2, #56	; 0x38
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	0018      	movs	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b004      	add	sp, #16
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	ffff00ff 	.word	0xffff00ff

08005e5c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2238      	movs	r2, #56	; 0x38
 8005e6a:	5c9b      	ldrb	r3, [r3, r2]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e032      	b.n	8005eda <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2238      	movs	r2, #56	; 0x38
 8005e78:	2101      	movs	r1, #1
 8005e7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2239      	movs	r2, #57	; 0x39
 8005e80:	2102      	movs	r1, #2
 8005e82:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0011      	movs	r1, r2
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f8b2 	bl	8005ff4 <TIM_SlaveTimer_SetConfig>
 8005e90:	1e03      	subs	r3, r0, #0
 8005e92:	d009      	beq.n	8005ea8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2239      	movs	r2, #57	; 0x39
 8005e98:	2101      	movs	r1, #1
 8005e9a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2238      	movs	r2, #56	; 0x38
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e018      	b.n	8005eda <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2140      	movs	r1, #64	; 0x40
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4908      	ldr	r1, [pc, #32]	; (8005ee4 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005ec4:	400a      	ands	r2, r1
 8005ec6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2239      	movs	r2, #57	; 0x39
 8005ecc:	2101      	movs	r1, #1
 8005ece:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2238      	movs	r2, #56	; 0x38
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	0018      	movs	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b002      	add	sp, #8
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	ffffbfff 	.word	0xffffbfff

08005ee8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b002      	add	sp, #8
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f00:	46c0      	nop			; (mov r8, r8)
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b002      	add	sp, #8
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f10:	46c0      	nop			; (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b002      	add	sp, #8
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f20:	46c0      	nop			; (mov r8, r8)
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b002      	add	sp, #8
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f30:	46c0      	nop			; (mov r8, r8)
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b002      	add	sp, #8
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	05db      	lsls	r3, r3, #23
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d00b      	beq.n	8005f6a <TIM_Base_SetConfig+0x32>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <TIM_Base_SetConfig+0xac>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_Base_SetConfig+0x32>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a22      	ldr	r2, [pc, #136]	; (8005fe8 <TIM_Base_SetConfig+0xb0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_Base_SetConfig+0x32>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a21      	ldr	r2, [pc, #132]	; (8005fec <TIM_Base_SetConfig+0xb4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2270      	movs	r2, #112	; 0x70
 8005f6e:	4393      	bics	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	2380      	movs	r3, #128	; 0x80
 8005f80:	05db      	lsls	r3, r3, #23
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d00b      	beq.n	8005f9e <TIM_Base_SetConfig+0x66>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a16      	ldr	r2, [pc, #88]	; (8005fe4 <TIM_Base_SetConfig+0xac>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d007      	beq.n	8005f9e <TIM_Base_SetConfig+0x66>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <TIM_Base_SetConfig+0xb0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_Base_SetConfig+0x66>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <TIM_Base_SetConfig+0xb4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d108      	bne.n	8005fb0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a13      	ldr	r2, [pc, #76]	; (8005ff0 <TIM_Base_SetConfig+0xb8>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	4393      	bics	r3, r2
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	615a      	str	r2, [r3, #20]
}
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b004      	add	sp, #16
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40010800 	.word	0x40010800
 8005fec:	40011400 	.word	0x40011400
 8005ff0:	fffffcff 	.word	0xfffffcff

08005ff4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2270      	movs	r2, #112	; 0x70
 800600a:	4393      	bics	r3, r2
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2207      	movs	r2, #7
 800601c:	4393      	bics	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b30      	cmp	r3, #48	; 0x30
 8006038:	d05a      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0xfc>
 800603a:	d806      	bhi.n	800604a <TIM_SlaveTimer_SetConfig+0x56>
 800603c:	2b10      	cmp	r3, #16
 800603e:	d057      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0xfc>
 8006040:	2b20      	cmp	r3, #32
 8006042:	d055      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0xfc>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d053      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006048:	e053      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800604a:	2b50      	cmp	r3, #80	; 0x50
 800604c:	d03c      	beq.n	80060c8 <TIM_SlaveTimer_SetConfig+0xd4>
 800604e:	d802      	bhi.n	8006056 <TIM_SlaveTimer_SetConfig+0x62>
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	d010      	beq.n	8006076 <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8006054:	e04d      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8006056:	2b60      	cmp	r3, #96	; 0x60
 8006058:	d040      	beq.n	80060dc <TIM_SlaveTimer_SetConfig+0xe8>
 800605a:	2b70      	cmp	r3, #112	; 0x70
 800605c:	d000      	beq.n	8006060 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 800605e:	e048      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68d9      	ldr	r1, [r3, #12]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f000 f8be 	bl	80061f0 <TIM_ETR_SetConfig>
      break;
 8006074:	e03d      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b05      	cmp	r3, #5
 800607c:	d101      	bne.n	8006082 <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e038      	b.n	80060f4 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2101      	movs	r1, #1
 8006096:	438a      	bics	r2, r1
 8006098:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	22f0      	movs	r2, #240	; 0xf0
 80060a6:	4393      	bics	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
      break;
 80060c6:	e014      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6899      	ldr	r1, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	001a      	movs	r2, r3
 80060d6:	f000 f811 	bl	80060fc <TIM_TI1_ConfigInputStage>
      break;
 80060da:	e00a      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	001a      	movs	r2, r3
 80060ea:	f000 f835 	bl	8006158 <TIM_TI2_ConfigInputStage>
      break;
 80060ee:	e000      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 80060f0:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b006      	add	sp, #24
 80060fa:	bd80      	pop	{r7, pc}

080060fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	2201      	movs	r2, #1
 8006114:	4393      	bics	r3, r2
 8006116:	001a      	movs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	22f0      	movs	r2, #240	; 0xf0
 8006126:	4393      	bics	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	220a      	movs	r2, #10
 8006138:	4393      	bics	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	621a      	str	r2, [r3, #32]
}
 8006150:	46c0      	nop			; (mov r8, r8)
 8006152:	46bd      	mov	sp, r7
 8006154:	b006      	add	sp, #24
 8006156:	bd80      	pop	{r7, pc}

08006158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	2210      	movs	r2, #16
 800616a:	4393      	bics	r3, r2
 800616c:	001a      	movs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4a0d      	ldr	r2, [pc, #52]	; (80061b8 <TIM_TI2_ConfigInputStage+0x60>)
 8006182:	4013      	ands	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	031b      	lsls	r3, r3, #12
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	22a0      	movs	r2, #160	; 0xa0
 8006194:	4393      	bics	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b006      	add	sp, #24
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	ffff0fff 	.word	0xffff0fff

080061bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2270      	movs	r2, #112	; 0x70
 80061d0:	4393      	bics	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	2207      	movs	r2, #7
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	609a      	str	r2, [r3, #8]
}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b004      	add	sp, #16
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4a09      	ldr	r2, [pc, #36]	; (800622c <TIM_ETR_SetConfig+0x3c>)
 8006208:	4013      	ands	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b006      	add	sp, #24
 800622a:	bd80      	pop	{r7, pc}
 800622c:	ffff00ff 	.word	0xffff00ff

08006230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2238      	movs	r2, #56	; 0x38
 800623e:	5c9b      	ldrb	r3, [r3, r2]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e032      	b.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2238      	movs	r2, #56	; 0x38
 800624c:	2101      	movs	r1, #1
 800624e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2239      	movs	r2, #57	; 0x39
 8006254:	2102      	movs	r1, #2
 8006256:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2270      	movs	r2, #112	; 0x70
 800626c:	4393      	bics	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2280      	movs	r2, #128	; 0x80
 800627e:	4393      	bics	r3, r2
 8006280:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4313      	orrs	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2239      	movs	r2, #57	; 0x39
 80062a0:	2101      	movs	r1, #1
 80062a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2238      	movs	r2, #56	; 0x38
 80062a8:	2100      	movs	r1, #0
 80062aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	0018      	movs	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b004      	add	sp, #16
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e044      	b.n	8006354 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d107      	bne.n	80062e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2270      	movs	r2, #112	; 0x70
 80062d6:	2100      	movs	r1, #0
 80062d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0018      	movs	r0, r3
 80062de:	f7fc fcff 	bl	8002ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2224      	movs	r2, #36	; 0x24
 80062e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2101      	movs	r1, #1
 80062f4:	438a      	bics	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 f95e 	bl	80065bc <UART_SetConfig>
 8006300:	0003      	movs	r3, r0
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e024      	b.n	8006354 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f000 fc85 	bl	8006c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	490d      	ldr	r1, [pc, #52]	; (800635c <HAL_UART_Init+0xa4>)
 8006326:	400a      	ands	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	212a      	movs	r1, #42	; 0x2a
 8006336:	438a      	bics	r2, r1
 8006338:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2101      	movs	r1, #1
 8006346:	430a      	orrs	r2, r1
 8006348:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	0018      	movs	r0, r3
 800634e:	f000 fd1d 	bl	8006d8c <UART_CheckIdleState>
 8006352:	0003      	movs	r3, r0
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}
 800635c:	ffffb7ff 	.word	0xffffb7ff

08006360 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	1dbb      	adds	r3, r7, #6
 800636c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006372:	2b20      	cmp	r3, #32
 8006374:	d158      	bne.n	8006428 <HAL_UART_Transmit_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_UART_Transmit_IT+0x24>
 800637c:	1dbb      	adds	r3, r7, #6
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e050      	b.n	800642a <HAL_UART_Transmit_IT+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	015b      	lsls	r3, r3, #5
 8006390:	429a      	cmp	r2, r3
 8006392:	d109      	bne.n	80063a8 <HAL_UART_Transmit_IT+0x48>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1) != 0)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2201      	movs	r2, #1
 80063a0:	4013      	ands	r3, r2
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e040      	b.n	800642a <HAL_UART_Transmit_IT+0xca>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2270      	movs	r2, #112	; 0x70
 80063ac:	5c9b      	ldrb	r3, [r3, r2]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Transmit_IT+0x56>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e039      	b.n	800642a <HAL_UART_Transmit_IT+0xca>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2270      	movs	r2, #112	; 0x70
 80063ba:	2101      	movs	r1, #1
 80063bc:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1dba      	adds	r2, r7, #6
 80063c8:	2150      	movs	r1, #80	; 0x50
 80063ca:	8812      	ldrh	r2, [r2, #0]
 80063cc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1dba      	adds	r2, r7, #6
 80063d2:	2152      	movs	r1, #82	; 0x52
 80063d4:	8812      	ldrh	r2, [r2, #0]
 80063d6:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2221      	movs	r2, #33	; 0x21
 80063e8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	015b      	lsls	r3, r3, #5
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d107      	bne.n	8006406 <HAL_UART_Transmit_IT+0xa6>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <HAL_UART_Transmit_IT+0xa6>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a0c      	ldr	r2, [pc, #48]	; (8006434 <HAL_UART_Transmit_IT+0xd4>)
 8006402:	665a      	str	r2, [r3, #100]	; 0x64
 8006404:	e002      	b.n	800640c <HAL_UART_Transmit_IT+0xac>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a0b      	ldr	r2, [pc, #44]	; (8006438 <HAL_UART_Transmit_IT+0xd8>)
 800640a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2270      	movs	r2, #112	; 0x70
 8006410:	2100      	movs	r1, #0
 8006412:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <HAL_UART_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006428:	2302      	movs	r3, #2
  }
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b004      	add	sp, #16
 8006430:	bd80      	pop	{r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	08006f1b 	.word	0x08006f1b
 8006438:	08006ead 	.word	0x08006ead

0800643c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	1dbb      	adds	r3, r7, #6
 8006448:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800644e:	2b20      	cmp	r3, #32
 8006450:	d000      	beq.n	8006454 <HAL_UART_Receive_IT+0x18>
 8006452:	e09f      	b.n	8006594 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_UART_Receive_IT+0x26>
 800645a:	1dbb      	adds	r3, r7, #6
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e097      	b.n	8006596 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	2380      	movs	r3, #128	; 0x80
 800646c:	015b      	lsls	r3, r3, #5
 800646e:	429a      	cmp	r2, r3
 8006470:	d109      	bne.n	8006486 <HAL_UART_Receive_IT+0x4a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2201      	movs	r2, #1
 800647e:	4013      	ands	r3, r2
 8006480:	d001      	beq.n	8006486 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e087      	b.n	8006596 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2270      	movs	r2, #112	; 0x70
 800648a:	5c9b      	ldrb	r3, [r3, r2]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_UART_Receive_IT+0x58>
 8006490:	2302      	movs	r3, #2
 8006492:	e080      	b.n	8006596 <HAL_UART_Receive_IT+0x15a>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2270      	movs	r2, #112	; 0x70
 8006498:	2101      	movs	r1, #1
 800649a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1dba      	adds	r2, r7, #6
 80064a6:	2158      	movs	r1, #88	; 0x58
 80064a8:	8812      	ldrh	r2, [r2, #0]
 80064aa:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1dba      	adds	r2, r7, #6
 80064b0:	215a      	movs	r1, #90	; 0x5a
 80064b2:	8812      	ldrh	r2, [r2, #0]
 80064b4:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	015b      	lsls	r3, r3, #5
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d10d      	bne.n	80064e4 <HAL_UART_Receive_IT+0xa8>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <HAL_UART_Receive_IT+0x9e>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	225c      	movs	r2, #92	; 0x5c
 80064d4:	4932      	ldr	r1, [pc, #200]	; (80065a0 <HAL_UART_Receive_IT+0x164>)
 80064d6:	5299      	strh	r1, [r3, r2]
 80064d8:	e02e      	b.n	8006538 <HAL_UART_Receive_IT+0xfc>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	225c      	movs	r2, #92	; 0x5c
 80064de:	21ff      	movs	r1, #255	; 0xff
 80064e0:	5299      	strh	r1, [r3, r2]
 80064e2:	e029      	b.n	8006538 <HAL_UART_Receive_IT+0xfc>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10d      	bne.n	8006508 <HAL_UART_Receive_IT+0xcc>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <HAL_UART_Receive_IT+0xc2>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	225c      	movs	r2, #92	; 0x5c
 80064f8:	21ff      	movs	r1, #255	; 0xff
 80064fa:	5299      	strh	r1, [r3, r2]
 80064fc:	e01c      	b.n	8006538 <HAL_UART_Receive_IT+0xfc>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	225c      	movs	r2, #92	; 0x5c
 8006502:	217f      	movs	r1, #127	; 0x7f
 8006504:	5299      	strh	r1, [r3, r2]
 8006506:	e017      	b.n	8006538 <HAL_UART_Receive_IT+0xfc>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	2380      	movs	r3, #128	; 0x80
 800650e:	055b      	lsls	r3, r3, #21
 8006510:	429a      	cmp	r2, r3
 8006512:	d10d      	bne.n	8006530 <HAL_UART_Receive_IT+0xf4>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <HAL_UART_Receive_IT+0xea>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	225c      	movs	r2, #92	; 0x5c
 8006520:	217f      	movs	r1, #127	; 0x7f
 8006522:	5299      	strh	r1, [r3, r2]
 8006524:	e008      	b.n	8006538 <HAL_UART_Receive_IT+0xfc>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	225c      	movs	r2, #92	; 0x5c
 800652a:	213f      	movs	r1, #63	; 0x3f
 800652c:	5299      	strh	r1, [r3, r2]
 800652e:	e003      	b.n	8006538 <HAL_UART_Receive_IT+0xfc>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	225c      	movs	r2, #92	; 0x5c
 8006534:	2100      	movs	r1, #0
 8006536:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2222      	movs	r2, #34	; 0x22
 8006542:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2101      	movs	r1, #1
 8006550:	430a      	orrs	r2, r1
 8006552:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	015b      	lsls	r3, r3, #5
 800655c:	429a      	cmp	r2, r3
 800655e:	d107      	bne.n	8006570 <HAL_UART_Receive_IT+0x134>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <HAL_UART_Receive_IT+0x168>)
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
 800656e:	e002      	b.n	8006576 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a0d      	ldr	r2, [pc, #52]	; (80065a8 <HAL_UART_Receive_IT+0x16c>)
 8006574:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2270      	movs	r2, #112	; 0x70
 800657a:	2100      	movs	r1, #0
 800657c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2190      	movs	r1, #144	; 0x90
 800658a:	0049      	lsls	r1, r1, #1
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e000      	b.n	8006596 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
  }
}
 8006596:	0018      	movs	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	b004      	add	sp, #16
 800659c:	bd80      	pop	{r7, pc}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	000001ff 	.word	0x000001ff
 80065a4:	08007051 	.word	0x08007051
 80065a8:	08006f95 	.word	0x08006f95

080065ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b002      	add	sp, #8
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065bc:	b5b0      	push	{r4, r5, r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80065c4:	231b      	movs	r3, #27
 80065c6:	2218      	movs	r2, #24
 80065c8:	4694      	mov	ip, r2
 80065ca:	44bc      	add	ip, r7
 80065cc:	4463      	add	r3, ip
 80065ce:	2210      	movs	r2, #16
 80065d0:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80065d6:	2313      	movs	r3, #19
 80065d8:	2218      	movs	r2, #24
 80065da:	4694      	mov	ip, r2
 80065dc:	44bc      	add	ip, r7
 80065de:	4463      	add	r3, ip
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	431a      	orrs	r2, r3
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4aca      	ldr	r2, [pc, #808]	; (8006930 <UART_SetConfig+0x374>)
 8006608:	4013      	ands	r3, r2
 800660a:	0019      	movs	r1, r3
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006612:	430a      	orrs	r2, r1
 8006614:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4ac5      	ldr	r2, [pc, #788]	; (8006934 <UART_SetConfig+0x378>)
 800661e:	4013      	ands	r3, r2
 8006620:	0019      	movs	r1, r3
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4abf      	ldr	r2, [pc, #764]	; (8006938 <UART_SetConfig+0x37c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006644:	4313      	orrs	r3, r2
 8006646:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4abb      	ldr	r2, [pc, #748]	; (800693c <UART_SetConfig+0x380>)
 8006650:	4013      	ands	r3, r2
 8006652:	0019      	movs	r1, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800665a:	430a      	orrs	r2, r1
 800665c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4ab7      	ldr	r2, [pc, #732]	; (8006940 <UART_SetConfig+0x384>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d134      	bne.n	80066d2 <UART_SetConfig+0x116>
 8006668:	4bb6      	ldr	r3, [pc, #728]	; (8006944 <UART_SetConfig+0x388>)
 800666a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666c:	2203      	movs	r2, #3
 800666e:	4013      	ands	r3, r2
 8006670:	2b01      	cmp	r3, #1
 8006672:	d015      	beq.n	80066a0 <UART_SetConfig+0xe4>
 8006674:	d304      	bcc.n	8006680 <UART_SetConfig+0xc4>
 8006676:	2b02      	cmp	r3, #2
 8006678:	d00a      	beq.n	8006690 <UART_SetConfig+0xd4>
 800667a:	2b03      	cmp	r3, #3
 800667c:	d018      	beq.n	80066b0 <UART_SetConfig+0xf4>
 800667e:	e01f      	b.n	80066c0 <UART_SetConfig+0x104>
 8006680:	231b      	movs	r3, #27
 8006682:	2218      	movs	r2, #24
 8006684:	4694      	mov	ip, r2
 8006686:	44bc      	add	ip, r7
 8006688:	4463      	add	r3, ip
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e0c5      	b.n	800681c <UART_SetConfig+0x260>
 8006690:	231b      	movs	r3, #27
 8006692:	2218      	movs	r2, #24
 8006694:	4694      	mov	ip, r2
 8006696:	44bc      	add	ip, r7
 8006698:	4463      	add	r3, ip
 800669a:	2202      	movs	r2, #2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e0bd      	b.n	800681c <UART_SetConfig+0x260>
 80066a0:	231b      	movs	r3, #27
 80066a2:	2218      	movs	r2, #24
 80066a4:	4694      	mov	ip, r2
 80066a6:	44bc      	add	ip, r7
 80066a8:	4463      	add	r3, ip
 80066aa:	2204      	movs	r2, #4
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e0b5      	b.n	800681c <UART_SetConfig+0x260>
 80066b0:	231b      	movs	r3, #27
 80066b2:	2218      	movs	r2, #24
 80066b4:	4694      	mov	ip, r2
 80066b6:	44bc      	add	ip, r7
 80066b8:	4463      	add	r3, ip
 80066ba:	2208      	movs	r2, #8
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e0ad      	b.n	800681c <UART_SetConfig+0x260>
 80066c0:	231b      	movs	r3, #27
 80066c2:	2218      	movs	r2, #24
 80066c4:	4694      	mov	ip, r2
 80066c6:	44bc      	add	ip, r7
 80066c8:	4463      	add	r3, ip
 80066ca:	2210      	movs	r2, #16
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	e0a4      	b.n	800681c <UART_SetConfig+0x260>
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a9c      	ldr	r2, [pc, #624]	; (8006948 <UART_SetConfig+0x38c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d137      	bne.n	800674c <UART_SetConfig+0x190>
 80066dc:	4b99      	ldr	r3, [pc, #612]	; (8006944 <UART_SetConfig+0x388>)
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	220c      	movs	r2, #12
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d018      	beq.n	800671a <UART_SetConfig+0x15e>
 80066e8:	d802      	bhi.n	80066f0 <UART_SetConfig+0x134>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <UART_SetConfig+0x13e>
 80066ee:	e024      	b.n	800673a <UART_SetConfig+0x17e>
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d00a      	beq.n	800670a <UART_SetConfig+0x14e>
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d018      	beq.n	800672a <UART_SetConfig+0x16e>
 80066f8:	e01f      	b.n	800673a <UART_SetConfig+0x17e>
 80066fa:	231b      	movs	r3, #27
 80066fc:	2218      	movs	r2, #24
 80066fe:	4694      	mov	ip, r2
 8006700:	44bc      	add	ip, r7
 8006702:	4463      	add	r3, ip
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	e088      	b.n	800681c <UART_SetConfig+0x260>
 800670a:	231b      	movs	r3, #27
 800670c:	2218      	movs	r2, #24
 800670e:	4694      	mov	ip, r2
 8006710:	44bc      	add	ip, r7
 8006712:	4463      	add	r3, ip
 8006714:	2202      	movs	r2, #2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	e080      	b.n	800681c <UART_SetConfig+0x260>
 800671a:	231b      	movs	r3, #27
 800671c:	2218      	movs	r2, #24
 800671e:	4694      	mov	ip, r2
 8006720:	44bc      	add	ip, r7
 8006722:	4463      	add	r3, ip
 8006724:	2204      	movs	r2, #4
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	e078      	b.n	800681c <UART_SetConfig+0x260>
 800672a:	231b      	movs	r3, #27
 800672c:	2218      	movs	r2, #24
 800672e:	4694      	mov	ip, r2
 8006730:	44bc      	add	ip, r7
 8006732:	4463      	add	r3, ip
 8006734:	2208      	movs	r2, #8
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e070      	b.n	800681c <UART_SetConfig+0x260>
 800673a:	231b      	movs	r3, #27
 800673c:	2218      	movs	r2, #24
 800673e:	4694      	mov	ip, r2
 8006740:	44bc      	add	ip, r7
 8006742:	4463      	add	r3, ip
 8006744:	2210      	movs	r2, #16
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	e067      	b.n	800681c <UART_SetConfig+0x260>
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a7e      	ldr	r2, [pc, #504]	; (800694c <UART_SetConfig+0x390>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d107      	bne.n	8006766 <UART_SetConfig+0x1aa>
 8006756:	231b      	movs	r3, #27
 8006758:	2218      	movs	r2, #24
 800675a:	4694      	mov	ip, r2
 800675c:	44bc      	add	ip, r7
 800675e:	4463      	add	r3, ip
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e05a      	b.n	800681c <UART_SetConfig+0x260>
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a79      	ldr	r2, [pc, #484]	; (8006950 <UART_SetConfig+0x394>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d107      	bne.n	8006780 <UART_SetConfig+0x1c4>
 8006770:	231b      	movs	r3, #27
 8006772:	2218      	movs	r2, #24
 8006774:	4694      	mov	ip, r2
 8006776:	44bc      	add	ip, r7
 8006778:	4463      	add	r3, ip
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e04d      	b.n	800681c <UART_SetConfig+0x260>
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a6c      	ldr	r2, [pc, #432]	; (8006938 <UART_SetConfig+0x37c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d141      	bne.n	800680e <UART_SetConfig+0x252>
 800678a:	4b6e      	ldr	r3, [pc, #440]	; (8006944 <UART_SetConfig+0x388>)
 800678c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800678e:	23c0      	movs	r3, #192	; 0xc0
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	4013      	ands	r3, r2
 8006794:	2280      	movs	r2, #128	; 0x80
 8006796:	00d2      	lsls	r2, r2, #3
 8006798:	4293      	cmp	r3, r2
 800679a:	d01f      	beq.n	80067dc <UART_SetConfig+0x220>
 800679c:	2280      	movs	r2, #128	; 0x80
 800679e:	00d2      	lsls	r2, r2, #3
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d802      	bhi.n	80067aa <UART_SetConfig+0x1ee>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d009      	beq.n	80067bc <UART_SetConfig+0x200>
 80067a8:	e028      	b.n	80067fc <UART_SetConfig+0x240>
 80067aa:	2280      	movs	r2, #128	; 0x80
 80067ac:	0112      	lsls	r2, r2, #4
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00c      	beq.n	80067cc <UART_SetConfig+0x210>
 80067b2:	22c0      	movs	r2, #192	; 0xc0
 80067b4:	0112      	lsls	r2, r2, #4
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <UART_SetConfig+0x230>
 80067ba:	e01f      	b.n	80067fc <UART_SetConfig+0x240>
 80067bc:	231b      	movs	r3, #27
 80067be:	2218      	movs	r2, #24
 80067c0:	4694      	mov	ip, r2
 80067c2:	44bc      	add	ip, r7
 80067c4:	4463      	add	r3, ip
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e027      	b.n	800681c <UART_SetConfig+0x260>
 80067cc:	231b      	movs	r3, #27
 80067ce:	2218      	movs	r2, #24
 80067d0:	4694      	mov	ip, r2
 80067d2:	44bc      	add	ip, r7
 80067d4:	4463      	add	r3, ip
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e01f      	b.n	800681c <UART_SetConfig+0x260>
 80067dc:	231b      	movs	r3, #27
 80067de:	2218      	movs	r2, #24
 80067e0:	4694      	mov	ip, r2
 80067e2:	44bc      	add	ip, r7
 80067e4:	4463      	add	r3, ip
 80067e6:	2204      	movs	r2, #4
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	e017      	b.n	800681c <UART_SetConfig+0x260>
 80067ec:	231b      	movs	r3, #27
 80067ee:	2218      	movs	r2, #24
 80067f0:	4694      	mov	ip, r2
 80067f2:	44bc      	add	ip, r7
 80067f4:	4463      	add	r3, ip
 80067f6:	2208      	movs	r2, #8
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	e00f      	b.n	800681c <UART_SetConfig+0x260>
 80067fc:	231b      	movs	r3, #27
 80067fe:	2218      	movs	r2, #24
 8006800:	4694      	mov	ip, r2
 8006802:	44bc      	add	ip, r7
 8006804:	4463      	add	r3, ip
 8006806:	2210      	movs	r2, #16
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	e006      	b.n	800681c <UART_SetConfig+0x260>
 800680e:	231b      	movs	r3, #27
 8006810:	2218      	movs	r2, #24
 8006812:	4694      	mov	ip, r2
 8006814:	44bc      	add	ip, r7
 8006816:	4463      	add	r3, ip
 8006818:	2210      	movs	r2, #16
 800681a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a45      	ldr	r2, [pc, #276]	; (8006938 <UART_SetConfig+0x37c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d000      	beq.n	8006828 <UART_SetConfig+0x26c>
 8006826:	e09d      	b.n	8006964 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006828:	231b      	movs	r3, #27
 800682a:	2218      	movs	r2, #24
 800682c:	4694      	mov	ip, r2
 800682e:	44bc      	add	ip, r7
 8006830:	4463      	add	r3, ip
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d00d      	beq.n	8006854 <UART_SetConfig+0x298>
 8006838:	dc02      	bgt.n	8006840 <UART_SetConfig+0x284>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <UART_SetConfig+0x28e>
 800683e:	e01d      	b.n	800687c <UART_SetConfig+0x2c0>
 8006840:	2b04      	cmp	r3, #4
 8006842:	d012      	beq.n	800686a <UART_SetConfig+0x2ae>
 8006844:	2b08      	cmp	r3, #8
 8006846:	d015      	beq.n	8006874 <UART_SetConfig+0x2b8>
 8006848:	e018      	b.n	800687c <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800684a:	f7fe f9c9 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 800684e:	0003      	movs	r3, r0
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006852:	e01b      	b.n	800688c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006854:	4b3b      	ldr	r3, [pc, #236]	; (8006944 <UART_SetConfig+0x388>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2210      	movs	r2, #16
 800685a:	4013      	ands	r3, r2
 800685c:	d002      	beq.n	8006864 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800685e:	4b3d      	ldr	r3, [pc, #244]	; (8006954 <UART_SetConfig+0x398>)
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8006862:	e013      	b.n	800688c <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006864:	4b3c      	ldr	r3, [pc, #240]	; (8006958 <UART_SetConfig+0x39c>)
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006868:	e010      	b.n	800688c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800686a:	f7fe f92b 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 800686e:	0003      	movs	r3, r0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006872:	e00b      	b.n	800688c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006874:	2380      	movs	r3, #128	; 0x80
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800687a:	e007      	b.n	800688c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800687c:	2313      	movs	r3, #19
 800687e:	2218      	movs	r2, #24
 8006880:	4694      	mov	ip, r2
 8006882:	44bc      	add	ip, r7
 8006884:	4463      	add	r3, ip
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
        break;
 800688a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d100      	bne.n	8006894 <UART_SetConfig+0x2d8>
 8006892:	e1a6      	b.n	8006be2 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	0013      	movs	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	189b      	adds	r3, r3, r2
 800689e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d305      	bcc.n	80068b0 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d907      	bls.n	80068c0 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80068b0:	2313      	movs	r3, #19
 80068b2:	2218      	movs	r2, #24
 80068b4:	4694      	mov	ip, r2
 80068b6:	44bc      	add	ip, r7
 80068b8:	4463      	add	r3, ip
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e190      	b.n	8006be2 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	6939      	ldr	r1, [r7, #16]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	000b      	movs	r3, r1
 80068ce:	0e1b      	lsrs	r3, r3, #24
 80068d0:	0010      	movs	r0, r2
 80068d2:	0205      	lsls	r5, r0, #8
 80068d4:	431d      	orrs	r5, r3
 80068d6:	000b      	movs	r3, r1
 80068d8:	021c      	lsls	r4, r3, #8
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	68b8      	ldr	r0, [r7, #8]
 80068e8:	68f9      	ldr	r1, [r7, #12]
 80068ea:	1900      	adds	r0, r0, r4
 80068ec:	4169      	adcs	r1, r5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	607b      	str	r3, [r7, #4]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f7f9 fd08 	bl	8000310 <__aeabi_uldivmod>
 8006900:	0003      	movs	r3, r0
 8006902:	000c      	movs	r4, r1
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	4a14      	ldr	r2, [pc, #80]	; (800695c <UART_SetConfig+0x3a0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d908      	bls.n	8006920 <UART_SetConfig+0x364>
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <UART_SetConfig+0x3a4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d804      	bhi.n	8006920 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	e160      	b.n	8006be2 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8006920:	2313      	movs	r3, #19
 8006922:	2218      	movs	r2, #24
 8006924:	4694      	mov	ip, r2
 8006926:	44bc      	add	ip, r7
 8006928:	4463      	add	r3, ip
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e158      	b.n	8006be2 <UART_SetConfig+0x626>
 8006930:	efff69f3 	.word	0xefff69f3
 8006934:	ffffcfff 	.word	0xffffcfff
 8006938:	40004800 	.word	0x40004800
 800693c:	fffff4ff 	.word	0xfffff4ff
 8006940:	40013800 	.word	0x40013800
 8006944:	40021000 	.word	0x40021000
 8006948:	40004400 	.word	0x40004400
 800694c:	40004c00 	.word	0x40004c00
 8006950:	40005000 	.word	0x40005000
 8006954:	003d0900 	.word	0x003d0900
 8006958:	00f42400 	.word	0x00f42400
 800695c:	000002ff 	.word	0x000002ff
 8006960:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	429a      	cmp	r2, r3
 800696e:	d000      	beq.n	8006972 <UART_SetConfig+0x3b6>
 8006970:	e0a9      	b.n	8006ac6 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8006972:	231b      	movs	r3, #27
 8006974:	2218      	movs	r2, #24
 8006976:	4694      	mov	ip, r2
 8006978:	44bc      	add	ip, r7
 800697a:	4463      	add	r3, ip
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b08      	cmp	r3, #8
 8006980:	d86d      	bhi.n	8006a5e <UART_SetConfig+0x4a2>
 8006982:	009a      	lsls	r2, r3, #2
 8006984:	4b9f      	ldr	r3, [pc, #636]	; (8006c04 <UART_SetConfig+0x648>)
 8006986:	18d3      	adds	r3, r2, r3
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800698c:	f7fe f928 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8006990:	0003      	movs	r3, r0
 8006992:	005a      	lsls	r2, r3, #1
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	18d2      	adds	r2, r2, r3
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	0019      	movs	r1, r3
 80069a2:	0010      	movs	r0, r2
 80069a4:	f7f9 fbb0 	bl	8000108 <__udivsi3>
 80069a8:	0003      	movs	r3, r0
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069ae:	e05e      	b.n	8006a6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80069b0:	f7fe f92c 	bl	8004c0c <HAL_RCC_GetPCLK2Freq>
 80069b4:	0003      	movs	r3, r0
 80069b6:	005a      	lsls	r2, r3, #1
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	18d2      	adds	r2, r2, r3
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	0019      	movs	r1, r3
 80069c6:	0010      	movs	r0, r2
 80069c8:	f7f9 fb9e 	bl	8000108 <__udivsi3>
 80069cc:	0003      	movs	r3, r0
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069d2:	e04c      	b.n	8006a6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069d4:	4b8c      	ldr	r3, [pc, #560]	; (8006c08 <UART_SetConfig+0x64c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2210      	movs	r2, #16
 80069da:	4013      	ands	r3, r2
 80069dc:	d00e      	beq.n	80069fc <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	4a89      	ldr	r2, [pc, #548]	; (8006c0c <UART_SetConfig+0x650>)
 80069e6:	189a      	adds	r2, r3, r2
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	0019      	movs	r1, r3
 80069ee:	0010      	movs	r0, r2
 80069f0:	f7f9 fb8a 	bl	8000108 <__udivsi3>
 80069f4:	0003      	movs	r3, r0
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80069fa:	e038      	b.n	8006a6e <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	4a83      	ldr	r2, [pc, #524]	; (8006c10 <UART_SetConfig+0x654>)
 8006a04:	189a      	adds	r2, r3, r2
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	0010      	movs	r0, r2
 8006a0e:	f7f9 fb7b 	bl	8000108 <__udivsi3>
 8006a12:	0003      	movs	r3, r0
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a18:	e029      	b.n	8006a6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006a1a:	f7fe f853 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	005a      	lsls	r2, r3, #1
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	18d2      	adds	r2, r2, r3
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	0019      	movs	r1, r3
 8006a30:	0010      	movs	r0, r2
 8006a32:	f7f9 fb69 	bl	8000108 <__udivsi3>
 8006a36:	0003      	movs	r3, r0
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a3c:	e017      	b.n	8006a6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	2280      	movs	r2, #128	; 0x80
 8006a46:	0252      	lsls	r2, r2, #9
 8006a48:	189a      	adds	r2, r3, r2
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	0019      	movs	r1, r3
 8006a50:	0010      	movs	r0, r2
 8006a52:	f7f9 fb59 	bl	8000108 <__udivsi3>
 8006a56:	0003      	movs	r3, r0
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a5c:	e007      	b.n	8006a6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006a5e:	2313      	movs	r3, #19
 8006a60:	2218      	movs	r2, #24
 8006a62:	4694      	mov	ip, r2
 8006a64:	44bc      	add	ip, r7
 8006a66:	4463      	add	r3, ip
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
        break;
 8006a6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2b0f      	cmp	r3, #15
 8006a72:	d920      	bls.n	8006ab6 <UART_SetConfig+0x4fa>
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	4a67      	ldr	r2, [pc, #412]	; (8006c14 <UART_SetConfig+0x658>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d81c      	bhi.n	8006ab6 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	200a      	movs	r0, #10
 8006a82:	2418      	movs	r4, #24
 8006a84:	193b      	adds	r3, r7, r4
 8006a86:	181b      	adds	r3, r3, r0
 8006a88:	210f      	movs	r1, #15
 8006a8a:	438a      	bics	r2, r1
 8006a8c:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2207      	movs	r2, #7
 8006a96:	4013      	ands	r3, r2
 8006a98:	b299      	uxth	r1, r3
 8006a9a:	193b      	adds	r3, r7, r4
 8006a9c:	181b      	adds	r3, r3, r0
 8006a9e:	193a      	adds	r2, r7, r4
 8006aa0:	1812      	adds	r2, r2, r0
 8006aa2:	8812      	ldrh	r2, [r2, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	193a      	adds	r2, r7, r4
 8006aae:	1812      	adds	r2, r2, r0
 8006ab0:	8812      	ldrh	r2, [r2, #0]
 8006ab2:	60da      	str	r2, [r3, #12]
 8006ab4:	e095      	b.n	8006be2 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8006ab6:	2313      	movs	r3, #19
 8006ab8:	2218      	movs	r2, #24
 8006aba:	4694      	mov	ip, r2
 8006abc:	44bc      	add	ip, r7
 8006abe:	4463      	add	r3, ip
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	e08d      	b.n	8006be2 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8006ac6:	231b      	movs	r3, #27
 8006ac8:	2218      	movs	r2, #24
 8006aca:	4694      	mov	ip, r2
 8006acc:	44bc      	add	ip, r7
 8006ace:	4463      	add	r3, ip
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d86a      	bhi.n	8006bac <UART_SetConfig+0x5f0>
 8006ad6:	009a      	lsls	r2, r3, #2
 8006ad8:	4b4f      	ldr	r3, [pc, #316]	; (8006c18 <UART_SetConfig+0x65c>)
 8006ada:	18d3      	adds	r3, r2, r3
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006ae0:	f7fe f87e 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8006ae4:	0002      	movs	r2, r0
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	18d2      	adds	r2, r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	0019      	movs	r1, r3
 8006af4:	0010      	movs	r0, r2
 8006af6:	f7f9 fb07 	bl	8000108 <__udivsi3>
 8006afa:	0003      	movs	r3, r0
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b00:	e05c      	b.n	8006bbc <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006b02:	f7fe f883 	bl	8004c0c <HAL_RCC_GetPCLK2Freq>
 8006b06:	0002      	movs	r2, r0
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	18d2      	adds	r2, r2, r3
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	0019      	movs	r1, r3
 8006b16:	0010      	movs	r0, r2
 8006b18:	f7f9 faf6 	bl	8000108 <__udivsi3>
 8006b1c:	0003      	movs	r3, r0
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b22:	e04b      	b.n	8006bbc <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b24:	4b38      	ldr	r3, [pc, #224]	; (8006c08 <UART_SetConfig+0x64c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2210      	movs	r2, #16
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	4a39      	ldr	r2, [pc, #228]	; (8006c1c <UART_SetConfig+0x660>)
 8006b36:	189a      	adds	r2, r3, r2
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	0010      	movs	r0, r2
 8006b40:	f7f9 fae2 	bl	8000108 <__udivsi3>
 8006b44:	0003      	movs	r3, r0
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8006b4a:	e037      	b.n	8006bbc <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	4a33      	ldr	r2, [pc, #204]	; (8006c20 <UART_SetConfig+0x664>)
 8006b54:	189a      	adds	r2, r3, r2
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	0019      	movs	r1, r3
 8006b5c:	0010      	movs	r0, r2
 8006b5e:	f7f9 fad3 	bl	8000108 <__udivsi3>
 8006b62:	0003      	movs	r3, r0
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b68:	e028      	b.n	8006bbc <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006b6a:	f7fd ffab 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8006b6e:	0002      	movs	r2, r0
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	18d2      	adds	r2, r2, r3
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	0019      	movs	r1, r3
 8006b7e:	0010      	movs	r0, r2
 8006b80:	f7f9 fac2 	bl	8000108 <__udivsi3>
 8006b84:	0003      	movs	r3, r0
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b8a:	e017      	b.n	8006bbc <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	085b      	lsrs	r3, r3, #1
 8006b92:	2280      	movs	r2, #128	; 0x80
 8006b94:	0212      	lsls	r2, r2, #8
 8006b96:	189a      	adds	r2, r3, r2
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	0019      	movs	r1, r3
 8006b9e:	0010      	movs	r0, r2
 8006ba0:	f7f9 fab2 	bl	8000108 <__udivsi3>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006baa:	e007      	b.n	8006bbc <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006bac:	2313      	movs	r3, #19
 8006bae:	2218      	movs	r2, #24
 8006bb0:	4694      	mov	ip, r2
 8006bb2:	44bc      	add	ip, r7
 8006bb4:	4463      	add	r3, ip
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	701a      	strb	r2, [r3, #0]
        break;
 8006bba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	d908      	bls.n	8006bd4 <UART_SetConfig+0x618>
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <UART_SetConfig+0x658>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d804      	bhi.n	8006bd4 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	e006      	b.n	8006be2 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8006bd4:	2313      	movs	r3, #19
 8006bd6:	2218      	movs	r2, #24
 8006bd8:	4694      	mov	ip, r2
 8006bda:	44bc      	add	ip, r7
 8006bdc:	4463      	add	r3, ip
 8006bde:	2201      	movs	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2200      	movs	r2, #0
 8006be6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	2200      	movs	r2, #0
 8006bec:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006bee:	2313      	movs	r3, #19
 8006bf0:	2218      	movs	r2, #24
 8006bf2:	4694      	mov	ip, r2
 8006bf4:	44bc      	add	ip, r7
 8006bf6:	4463      	add	r3, ip
 8006bf8:	781b      	ldrb	r3, [r3, #0]
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b00e      	add	sp, #56	; 0x38
 8006c00:	bdb0      	pop	{r4, r5, r7, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	080082c0 	.word	0x080082c0
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	007a1200 	.word	0x007a1200
 8006c10:	01e84800 	.word	0x01e84800
 8006c14:	0000ffff 	.word	0x0000ffff
 8006c18:	080082e4 	.word	0x080082e4
 8006c1c:	003d0900 	.word	0x003d0900
 8006c20:	00f42400 	.word	0x00f42400

08006c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	2201      	movs	r2, #1
 8006c32:	4013      	ands	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <UART_AdvFeatureConfig+0x144>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	0019      	movs	r1, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	2202      	movs	r2, #2
 8006c54:	4013      	ands	r3, r2
 8006c56:	d00b      	beq.n	8006c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	4a43      	ldr	r2, [pc, #268]	; (8006d6c <UART_AdvFeatureConfig+0x148>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	0019      	movs	r1, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	2204      	movs	r2, #4
 8006c76:	4013      	ands	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a3b      	ldr	r2, [pc, #236]	; (8006d70 <UART_AdvFeatureConfig+0x14c>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	0019      	movs	r1, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2208      	movs	r2, #8
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4a34      	ldr	r2, [pc, #208]	; (8006d74 <UART_AdvFeatureConfig+0x150>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	0019      	movs	r1, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	2210      	movs	r2, #16
 8006cba:	4013      	ands	r3, r2
 8006cbc:	d00b      	beq.n	8006cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4a2c      	ldr	r2, [pc, #176]	; (8006d78 <UART_AdvFeatureConfig+0x154>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	0019      	movs	r1, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	2220      	movs	r2, #32
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <UART_AdvFeatureConfig+0x158>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	0019      	movs	r1, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	2240      	movs	r2, #64	; 0x40
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d01d      	beq.n	8006d3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <UART_AdvFeatureConfig+0x15c>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	0019      	movs	r1, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d1e:	2380      	movs	r3, #128	; 0x80
 8006d20:	035b      	lsls	r3, r3, #13
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d10b      	bne.n	8006d3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a15      	ldr	r2, [pc, #84]	; (8006d84 <UART_AdvFeatureConfig+0x160>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	0019      	movs	r1, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	2280      	movs	r2, #128	; 0x80
 8006d44:	4013      	ands	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4a0e      	ldr	r2, [pc, #56]	; (8006d88 <UART_AdvFeatureConfig+0x164>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	0019      	movs	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }
}
 8006d60:	46c0      	nop			; (mov r8, r8)
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	fffdffff 	.word	0xfffdffff
 8006d6c:	fffeffff 	.word	0xfffeffff
 8006d70:	fffbffff 	.word	0xfffbffff
 8006d74:	ffff7fff 	.word	0xffff7fff
 8006d78:	ffffefff 	.word	0xffffefff
 8006d7c:	ffffdfff 	.word	0xffffdfff
 8006d80:	ffefffff 	.word	0xffefffff
 8006d84:	ff9fffff 	.word	0xff9fffff
 8006d88:	fff7ffff 	.word	0xfff7ffff

08006d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d9a:	f7fc fdd9 	bl	8003950 <HAL_GetTick>
 8006d9e:	0003      	movs	r3, r0
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2208      	movs	r2, #8
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d10d      	bne.n	8006dcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	2380      	movs	r3, #128	; 0x80
 8006db4:	0399      	lsls	r1, r3, #14
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <UART_CheckIdleState+0x88>)
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	0013      	movs	r3, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f000 f82a 	bl	8006e18 <UART_WaitOnFlagUntilTimeout>
 8006dc4:	1e03      	subs	r3, r0, #0
 8006dc6:	d001      	beq.n	8006dcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e01f      	b.n	8006e0c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d10d      	bne.n	8006df6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	03d9      	lsls	r1, r3, #15
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <UART_CheckIdleState+0x88>)
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	0013      	movs	r3, r2
 8006de8:	2200      	movs	r2, #0
 8006dea:	f000 f815 	bl	8006e18 <UART_WaitOnFlagUntilTimeout>
 8006dee:	1e03      	subs	r3, r0, #0
 8006df0:	d001      	beq.n	8006df6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e00a      	b.n	8006e0c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2270      	movs	r2, #112	; 0x70
 8006e06:	2100      	movs	r1, #0
 8006e08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	b004      	add	sp, #16
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	01ffffff 	.word	0x01ffffff

08006e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	1dfb      	adds	r3, r7, #7
 8006e26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e28:	e029      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	d026      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e30:	f7fc fd8e 	bl	8003950 <HAL_GetTick>
 8006e34:	0002      	movs	r2, r0
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d302      	bcc.n	8006e46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d11b      	bne.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4915      	ldr	r1, [pc, #84]	; (8006ea8 <UART_WaitOnFlagUntilTimeout+0x90>)
 8006e52:	400a      	ands	r2, r1
 8006e54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2101      	movs	r1, #1
 8006e62:	438a      	bics	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2270      	movs	r2, #112	; 0x70
 8006e76:	2100      	movs	r1, #0
 8006e78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e00f      	b.n	8006e9e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	4013      	ands	r3, r2
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	425a      	negs	r2, r3
 8006e8e:	4153      	adcs	r3, r2
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	001a      	movs	r2, r3
 8006e94:	1dfb      	adds	r3, r7, #7
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d0c6      	beq.n	8006e2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b004      	add	sp, #16
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	fffffe5f 	.word	0xfffffe5f

08006eac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb8:	2b21      	cmp	r3, #33	; 0x21
 8006eba:	d12a      	bne.n	8006f12 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2252      	movs	r2, #82	; 0x52
 8006ec0:	5a9b      	ldrh	r3, [r3, r2]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d110      	bne.n	8006eea <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2180      	movs	r1, #128	; 0x80
 8006ed4:	438a      	bics	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2140      	movs	r1, #64	; 0x40
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006ee8:	e013      	b.n	8006f12 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eee:	781a      	ldrb	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2252      	movs	r2, #82	; 0x52
 8006f04:	5a9b      	ldrh	r3, [r3, r2]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b299      	uxth	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2252      	movs	r2, #82	; 0x52
 8006f10:	5299      	strh	r1, [r3, r2]
}
 8006f12:	46c0      	nop			; (mov r8, r8)
 8006f14:	46bd      	mov	sp, r7
 8006f16:	b002      	add	sp, #8
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f26:	2b21      	cmp	r3, #33	; 0x21
 8006f28:	d12f      	bne.n	8006f8a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2252      	movs	r2, #82	; 0x52
 8006f2e:	5a9b      	ldrh	r3, [r3, r2]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d110      	bne.n	8006f58 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	438a      	bics	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2140      	movs	r1, #64	; 0x40
 8006f52:	430a      	orrs	r2, r1
 8006f54:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006f56:	e018      	b.n	8006f8a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	001a      	movs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	05d2      	lsls	r2, r2, #23
 8006f6a:	0dd2      	lsrs	r2, r2, #23
 8006f6c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f72:	1c9a      	adds	r2, r3, #2
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2252      	movs	r2, #82	; 0x52
 8006f7c:	5a9b      	ldrh	r3, [r3, r2]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b299      	uxth	r1, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2252      	movs	r2, #82	; 0x52
 8006f88:	5299      	strh	r1, [r3, r2]
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b004      	add	sp, #16
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f9c:	230e      	movs	r3, #14
 8006f9e:	18fb      	adds	r3, r7, r3
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	215c      	movs	r1, #92	; 0x5c
 8006fa4:	5a52      	ldrh	r2, [r2, r1]
 8006fa6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fac:	2b22      	cmp	r3, #34	; 0x22
 8006fae:	d140      	bne.n	8007032 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fb6:	210c      	movs	r1, #12
 8006fb8:	187b      	adds	r3, r7, r1
 8006fba:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fbc:	187b      	adds	r3, r7, r1
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	230e      	movs	r3, #14
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b2d9      	uxtb	r1, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	400a      	ands	r2, r1
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	225a      	movs	r2, #90	; 0x5a
 8006fe2:	5a9b      	ldrh	r3, [r3, r2]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b299      	uxth	r1, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	225a      	movs	r2, #90	; 0x5a
 8006fee:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	225a      	movs	r2, #90	; 0x5a
 8006ff4:	5a9b      	ldrh	r3, [r3, r2]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d122      	bne.n	8007042 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4911      	ldr	r1, [pc, #68]	; (800704c <UART_RxISR_8BIT+0xb8>)
 8007008:	400a      	ands	r2, r1
 800700a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2101      	movs	r1, #1
 8007018:	438a      	bics	r2, r1
 800701a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	0018      	movs	r0, r3
 800702c:	f7ff fabe 	bl	80065ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007030:	e007      	b.n	8007042 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2108      	movs	r1, #8
 800703e:	430a      	orrs	r2, r1
 8007040:	619a      	str	r2, [r3, #24]
}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	46bd      	mov	sp, r7
 8007046:	b004      	add	sp, #16
 8007048:	bd80      	pop	{r7, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	fffffedf 	.word	0xfffffedf

08007050 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007058:	230e      	movs	r3, #14
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	215c      	movs	r1, #92	; 0x5c
 8007060:	5a52      	ldrh	r2, [r2, r1]
 8007062:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007068:	2b22      	cmp	r3, #34	; 0x22
 800706a:	d140      	bne.n	80070ee <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007072:	210c      	movs	r1, #12
 8007074:	187b      	adds	r3, r7, r1
 8007076:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800707e:	187b      	adds	r3, r7, r1
 8007080:	220e      	movs	r2, #14
 8007082:	18ba      	adds	r2, r7, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	8812      	ldrh	r2, [r2, #0]
 8007088:	4013      	ands	r3, r2
 800708a:	b29a      	uxth	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007094:	1c9a      	adds	r2, r3, #2
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	225a      	movs	r2, #90	; 0x5a
 800709e:	5a9b      	ldrh	r3, [r3, r2]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b299      	uxth	r1, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	225a      	movs	r2, #90	; 0x5a
 80070aa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	225a      	movs	r2, #90	; 0x5a
 80070b0:	5a9b      	ldrh	r3, [r3, r2]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d122      	bne.n	80070fe <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4911      	ldr	r1, [pc, #68]	; (8007108 <UART_RxISR_16BIT+0xb8>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2101      	movs	r1, #1
 80070d4:	438a      	bics	r2, r1
 80070d6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	0018      	movs	r0, r3
 80070e8:	f7ff fa60 	bl	80065ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070ec:	e007      	b.n	80070fe <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2108      	movs	r1, #8
 80070fa:	430a      	orrs	r2, r1
 80070fc:	619a      	str	r2, [r3, #24]
}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	46bd      	mov	sp, r7
 8007102:	b004      	add	sp, #16
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	fffffedf 	.word	0xfffffedf

0800710c <__errno>:
 800710c:	4b01      	ldr	r3, [pc, #4]	; (8007114 <__errno+0x8>)
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	4770      	bx	lr
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	20000008 	.word	0x20000008

08007118 <__libc_init_array>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	2600      	movs	r6, #0
 800711c:	4d0c      	ldr	r5, [pc, #48]	; (8007150 <__libc_init_array+0x38>)
 800711e:	4c0d      	ldr	r4, [pc, #52]	; (8007154 <__libc_init_array+0x3c>)
 8007120:	1b64      	subs	r4, r4, r5
 8007122:	10a4      	asrs	r4, r4, #2
 8007124:	42a6      	cmp	r6, r4
 8007126:	d109      	bne.n	800713c <__libc_init_array+0x24>
 8007128:	2600      	movs	r6, #0
 800712a:	f001 f867 	bl	80081fc <_init>
 800712e:	4d0a      	ldr	r5, [pc, #40]	; (8007158 <__libc_init_array+0x40>)
 8007130:	4c0a      	ldr	r4, [pc, #40]	; (800715c <__libc_init_array+0x44>)
 8007132:	1b64      	subs	r4, r4, r5
 8007134:	10a4      	asrs	r4, r4, #2
 8007136:	42a6      	cmp	r6, r4
 8007138:	d105      	bne.n	8007146 <__libc_init_array+0x2e>
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	00b3      	lsls	r3, r6, #2
 800713e:	58eb      	ldr	r3, [r5, r3]
 8007140:	4798      	blx	r3
 8007142:	3601      	adds	r6, #1
 8007144:	e7ee      	b.n	8007124 <__libc_init_array+0xc>
 8007146:	00b3      	lsls	r3, r6, #2
 8007148:	58eb      	ldr	r3, [r5, r3]
 800714a:	4798      	blx	r3
 800714c:	3601      	adds	r6, #1
 800714e:	e7f2      	b.n	8007136 <__libc_init_array+0x1e>
 8007150:	08008358 	.word	0x08008358
 8007154:	08008358 	.word	0x08008358
 8007158:	08008358 	.word	0x08008358
 800715c:	0800835c 	.word	0x0800835c

08007160 <memset>:
 8007160:	0003      	movs	r3, r0
 8007162:	1812      	adds	r2, r2, r0
 8007164:	4293      	cmp	r3, r2
 8007166:	d100      	bne.n	800716a <memset+0xa>
 8007168:	4770      	bx	lr
 800716a:	7019      	strb	r1, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	e7f9      	b.n	8007164 <memset+0x4>

08007170 <pow>:
 8007170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007172:	2400      	movs	r4, #0
 8007174:	b091      	sub	sp, #68	; 0x44
 8007176:	001f      	movs	r7, r3
 8007178:	9000      	str	r0, [sp, #0]
 800717a:	9101      	str	r1, [sp, #4]
 800717c:	0016      	movs	r6, r2
 800717e:	f000 f98d 	bl	800749c <__ieee754_pow>
 8007182:	4bbe      	ldr	r3, [pc, #760]	; (800747c <pow+0x30c>)
 8007184:	9002      	str	r0, [sp, #8]
 8007186:	9103      	str	r1, [sp, #12]
 8007188:	571c      	ldrsb	r4, [r3, r4]
 800718a:	1c63      	adds	r3, r4, #1
 800718c:	d100      	bne.n	8007190 <pow+0x20>
 800718e:	e0d4      	b.n	800733a <pow+0x1ca>
 8007190:	0032      	movs	r2, r6
 8007192:	003b      	movs	r3, r7
 8007194:	0030      	movs	r0, r6
 8007196:	0039      	movs	r1, r7
 8007198:	f7fb f906 	bl	80023a8 <__aeabi_dcmpun>
 800719c:	1e05      	subs	r5, r0, #0
 800719e:	d000      	beq.n	80071a2 <pow+0x32>
 80071a0:	e0cb      	b.n	800733a <pow+0x1ca>
 80071a2:	9a00      	ldr	r2, [sp, #0]
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	0010      	movs	r0, r2
 80071a8:	0019      	movs	r1, r3
 80071aa:	f7fb f8fd 	bl	80023a8 <__aeabi_dcmpun>
 80071ae:	2200      	movs	r2, #0
 80071b0:	9005      	str	r0, [sp, #20]
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d01e      	beq.n	80071f4 <pow+0x84>
 80071b6:	2300      	movs	r3, #0
 80071b8:	0030      	movs	r0, r6
 80071ba:	0039      	movs	r1, r7
 80071bc:	f7f9 f840 	bl	8000240 <__aeabi_dcmpeq>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d100      	bne.n	80071c6 <pow+0x56>
 80071c4:	e0b9      	b.n	800733a <pow+0x1ca>
 80071c6:	2301      	movs	r3, #1
 80071c8:	9306      	str	r3, [sp, #24]
 80071ca:	4bad      	ldr	r3, [pc, #692]	; (8007480 <pow+0x310>)
 80071cc:	950e      	str	r5, [sp, #56]	; 0x38
 80071ce:	9307      	str	r3, [sp, #28]
 80071d0:	9a00      	ldr	r2, [sp, #0]
 80071d2:	9b01      	ldr	r3, [sp, #4]
 80071d4:	9208      	str	r2, [sp, #32]
 80071d6:	9309      	str	r3, [sp, #36]	; 0x24
 80071d8:	2200      	movs	r2, #0
 80071da:	4baa      	ldr	r3, [pc, #680]	; (8007484 <pow+0x314>)
 80071dc:	960a      	str	r6, [sp, #40]	; 0x28
 80071de:	970b      	str	r7, [sp, #44]	; 0x2c
 80071e0:	920c      	str	r2, [sp, #48]	; 0x30
 80071e2:	930d      	str	r3, [sp, #52]	; 0x34
 80071e4:	2c02      	cmp	r4, #2
 80071e6:	d033      	beq.n	8007250 <pow+0xe0>
 80071e8:	a806      	add	r0, sp, #24
 80071ea:	f000 ff0b 	bl	8008004 <matherr>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d125      	bne.n	800723e <pow+0xce>
 80071f2:	e059      	b.n	80072a8 <pow+0x138>
 80071f4:	2300      	movs	r3, #0
 80071f6:	9800      	ldr	r0, [sp, #0]
 80071f8:	9901      	ldr	r1, [sp, #4]
 80071fa:	f7f9 f821 	bl	8000240 <__aeabi_dcmpeq>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d057      	beq.n	80072b2 <pow+0x142>
 8007202:	2200      	movs	r2, #0
 8007204:	2300      	movs	r3, #0
 8007206:	0030      	movs	r0, r6
 8007208:	0039      	movs	r1, r7
 800720a:	f7f9 f819 	bl	8000240 <__aeabi_dcmpeq>
 800720e:	1e05      	subs	r5, r0, #0
 8007210:	d021      	beq.n	8007256 <pow+0xe6>
 8007212:	2301      	movs	r3, #1
 8007214:	9306      	str	r3, [sp, #24]
 8007216:	4b9a      	ldr	r3, [pc, #616]	; (8007480 <pow+0x310>)
 8007218:	960a      	str	r6, [sp, #40]	; 0x28
 800721a:	970b      	str	r7, [sp, #44]	; 0x2c
 800721c:	9307      	str	r3, [sp, #28]
 800721e:	9b05      	ldr	r3, [sp, #20]
 8007220:	930e      	str	r3, [sp, #56]	; 0x38
 8007222:	9a00      	ldr	r2, [sp, #0]
 8007224:	9b01      	ldr	r3, [sp, #4]
 8007226:	9208      	str	r2, [sp, #32]
 8007228:	9309      	str	r3, [sp, #36]	; 0x24
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	920c      	str	r2, [sp, #48]	; 0x30
 8007230:	930d      	str	r3, [sp, #52]	; 0x34
 8007232:	2c00      	cmp	r4, #0
 8007234:	d0d8      	beq.n	80071e8 <pow+0x78>
 8007236:	2200      	movs	r2, #0
 8007238:	4b92      	ldr	r3, [pc, #584]	; (8007484 <pow+0x314>)
 800723a:	920c      	str	r2, [sp, #48]	; 0x30
 800723c:	930d      	str	r3, [sp, #52]	; 0x34
 800723e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <pow+0xe0>
 8007246:	f7ff ff61 	bl	800710c <__errno>
 800724a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	6003      	str	r3, [r0, #0]
 8007250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007252:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007254:	e06f      	b.n	8007336 <pow+0x1c6>
 8007256:	0030      	movs	r0, r6
 8007258:	0039      	movs	r1, r7
 800725a:	f000 fecb 	bl	8007ff4 <finite>
 800725e:	2800      	cmp	r0, #0
 8007260:	d06b      	beq.n	800733a <pow+0x1ca>
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	0030      	movs	r0, r6
 8007268:	0039      	movs	r1, r7
 800726a:	f7f8 ffef 	bl	800024c <__aeabi_dcmplt>
 800726e:	2800      	cmp	r0, #0
 8007270:	d063      	beq.n	800733a <pow+0x1ca>
 8007272:	2301      	movs	r3, #1
 8007274:	9306      	str	r3, [sp, #24]
 8007276:	4b82      	ldr	r3, [pc, #520]	; (8007480 <pow+0x310>)
 8007278:	950e      	str	r5, [sp, #56]	; 0x38
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	9c01      	ldr	r4, [sp, #4]
 8007280:	9308      	str	r3, [sp, #32]
 8007282:	9409      	str	r4, [sp, #36]	; 0x24
 8007284:	4b7d      	ldr	r3, [pc, #500]	; (800747c <pow+0x30c>)
 8007286:	960a      	str	r6, [sp, #40]	; 0x28
 8007288:	970b      	str	r7, [sp, #44]	; 0x2c
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	b25b      	sxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <pow+0x12c>
 8007292:	2300      	movs	r3, #0
 8007294:	2400      	movs	r4, #0
 8007296:	930c      	str	r3, [sp, #48]	; 0x30
 8007298:	940d      	str	r4, [sp, #52]	; 0x34
 800729a:	e7a5      	b.n	80071e8 <pow+0x78>
 800729c:	2000      	movs	r0, #0
 800729e:	497a      	ldr	r1, [pc, #488]	; (8007488 <pow+0x318>)
 80072a0:	900c      	str	r0, [sp, #48]	; 0x30
 80072a2:	910d      	str	r1, [sp, #52]	; 0x34
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d19f      	bne.n	80071e8 <pow+0x78>
 80072a8:	f7ff ff30 	bl	800710c <__errno>
 80072ac:	2321      	movs	r3, #33	; 0x21
 80072ae:	6003      	str	r3, [r0, #0]
 80072b0:	e7c5      	b.n	800723e <pow+0xce>
 80072b2:	9802      	ldr	r0, [sp, #8]
 80072b4:	9903      	ldr	r1, [sp, #12]
 80072b6:	f000 fe9d 	bl	8007ff4 <finite>
 80072ba:	9005      	str	r0, [sp, #20]
 80072bc:	2800      	cmp	r0, #0
 80072be:	d000      	beq.n	80072c2 <pow+0x152>
 80072c0:	e0a5      	b.n	800740e <pow+0x29e>
 80072c2:	9800      	ldr	r0, [sp, #0]
 80072c4:	9901      	ldr	r1, [sp, #4]
 80072c6:	f000 fe95 	bl	8007ff4 <finite>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d100      	bne.n	80072d0 <pow+0x160>
 80072ce:	e09e      	b.n	800740e <pow+0x29e>
 80072d0:	0030      	movs	r0, r6
 80072d2:	0039      	movs	r1, r7
 80072d4:	f000 fe8e 	bl	8007ff4 <finite>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d100      	bne.n	80072de <pow+0x16e>
 80072dc:	e097      	b.n	800740e <pow+0x29e>
 80072de:	2500      	movs	r5, #0
 80072e0:	4b66      	ldr	r3, [pc, #408]	; (800747c <pow+0x30c>)
 80072e2:	ac06      	add	r4, sp, #24
 80072e4:	575d      	ldrsb	r5, [r3, r5]
 80072e6:	9a02      	ldr	r2, [sp, #8]
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	0019      	movs	r1, r3
 80072ec:	0010      	movs	r0, r2
 80072ee:	f7fb f85b 	bl	80023a8 <__aeabi_dcmpun>
 80072f2:	4b63      	ldr	r3, [pc, #396]	; (8007480 <pow+0x310>)
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d031      	beq.n	800735c <pow+0x1ec>
 80072f8:	2201      	movs	r2, #1
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	9b05      	ldr	r3, [sp, #20]
 80072fe:	9206      	str	r2, [sp, #24]
 8007300:	6223      	str	r3, [r4, #32]
 8007302:	6126      	str	r6, [r4, #16]
 8007304:	6167      	str	r7, [r4, #20]
 8007306:	9a00      	ldr	r2, [sp, #0]
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	60a2      	str	r2, [r4, #8]
 800730c:	60e3      	str	r3, [r4, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	2300      	movs	r3, #0
 8007312:	2d00      	cmp	r5, #0
 8007314:	d115      	bne.n	8007342 <pow+0x1d2>
 8007316:	61a2      	str	r2, [r4, #24]
 8007318:	61e3      	str	r3, [r4, #28]
 800731a:	0020      	movs	r0, r4
 800731c:	f000 fe72 	bl	8008004 <matherr>
 8007320:	2800      	cmp	r0, #0
 8007322:	d016      	beq.n	8007352 <pow+0x1e2>
 8007324:	6a23      	ldr	r3, [r4, #32]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <pow+0x1c2>
 800732a:	f7ff feef 	bl	800710c <__errno>
 800732e:	6a23      	ldr	r3, [r4, #32]
 8007330:	6003      	str	r3, [r0, #0]
 8007332:	69a3      	ldr	r3, [r4, #24]
 8007334:	69e4      	ldr	r4, [r4, #28]
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	9403      	str	r4, [sp, #12]
 800733a:	9802      	ldr	r0, [sp, #8]
 800733c:	9903      	ldr	r1, [sp, #12]
 800733e:	b011      	add	sp, #68	; 0x44
 8007340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007342:	0010      	movs	r0, r2
 8007344:	0019      	movs	r1, r3
 8007346:	f7f9 fe6b 	bl	8001020 <__aeabi_ddiv>
 800734a:	61a0      	str	r0, [r4, #24]
 800734c:	61e1      	str	r1, [r4, #28]
 800734e:	2d02      	cmp	r5, #2
 8007350:	d1e3      	bne.n	800731a <pow+0x1aa>
 8007352:	f7ff fedb 	bl	800710c <__errno>
 8007356:	2321      	movs	r3, #33	; 0x21
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	e7e3      	b.n	8007324 <pow+0x1b4>
 800735c:	2203      	movs	r2, #3
 800735e:	6126      	str	r6, [r4, #16]
 8007360:	6167      	str	r7, [r4, #20]
 8007362:	9206      	str	r2, [sp, #24]
 8007364:	6063      	str	r3, [r4, #4]
 8007366:	6220      	str	r0, [r4, #32]
 8007368:	9a00      	ldr	r2, [sp, #0]
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	0030      	movs	r0, r6
 800736e:	60a2      	str	r2, [r4, #8]
 8007370:	60e3      	str	r3, [r4, #12]
 8007372:	0039      	movs	r1, r7
 8007374:	2200      	movs	r2, #0
 8007376:	4b45      	ldr	r3, [pc, #276]	; (800748c <pow+0x31c>)
 8007378:	f7fa fa5c 	bl	8001834 <__aeabi_dmul>
 800737c:	0006      	movs	r6, r0
 800737e:	000f      	movs	r7, r1
 8007380:	2d00      	cmp	r5, #0
 8007382:	d124      	bne.n	80073ce <pow+0x25e>
 8007384:	9800      	ldr	r0, [sp, #0]
 8007386:	9901      	ldr	r1, [sp, #4]
 8007388:	22e0      	movs	r2, #224	; 0xe0
 800738a:	4b41      	ldr	r3, [pc, #260]	; (8007490 <pow+0x320>)
 800738c:	0612      	lsls	r2, r2, #24
 800738e:	61a2      	str	r2, [r4, #24]
 8007390:	61e3      	str	r3, [r4, #28]
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	f7f8 ff59 	bl	800024c <__aeabi_dcmplt>
 800739a:	2800      	cmp	r0, #0
 800739c:	d030      	beq.n	8007400 <pow+0x290>
 800739e:	0030      	movs	r0, r6
 80073a0:	0039      	movs	r1, r7
 80073a2:	f000 fe37 	bl	8008014 <rint>
 80073a6:	0032      	movs	r2, r6
 80073a8:	003b      	movs	r3, r7
 80073aa:	f7f8 ff49 	bl	8000240 <__aeabi_dcmpeq>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d104      	bne.n	80073bc <pow+0x24c>
 80073b2:	22e0      	movs	r2, #224	; 0xe0
 80073b4:	4b37      	ldr	r3, [pc, #220]	; (8007494 <pow+0x324>)
 80073b6:	0612      	lsls	r2, r2, #24
 80073b8:	61a2      	str	r2, [r4, #24]
 80073ba:	61e3      	str	r3, [r4, #28]
 80073bc:	4b2f      	ldr	r3, [pc, #188]	; (800747c <pow+0x30c>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b25b      	sxtb	r3, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d11c      	bne.n	8007400 <pow+0x290>
 80073c6:	f7ff fea1 	bl	800710c <__errno>
 80073ca:	2322      	movs	r3, #34	; 0x22
 80073cc:	e7c4      	b.n	8007358 <pow+0x1e8>
 80073ce:	2200      	movs	r2, #0
 80073d0:	9800      	ldr	r0, [sp, #0]
 80073d2:	9901      	ldr	r1, [sp, #4]
 80073d4:	4b30      	ldr	r3, [pc, #192]	; (8007498 <pow+0x328>)
 80073d6:	61a2      	str	r2, [r4, #24]
 80073d8:	61e3      	str	r3, [r4, #28]
 80073da:	2200      	movs	r2, #0
 80073dc:	2300      	movs	r3, #0
 80073de:	f7f8 ff35 	bl	800024c <__aeabi_dcmplt>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d0ea      	beq.n	80073bc <pow+0x24c>
 80073e6:	0030      	movs	r0, r6
 80073e8:	0039      	movs	r1, r7
 80073ea:	f000 fe13 	bl	8008014 <rint>
 80073ee:	0032      	movs	r2, r6
 80073f0:	003b      	movs	r3, r7
 80073f2:	f7f8 ff25 	bl	8000240 <__aeabi_dcmpeq>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1e0      	bne.n	80073bc <pow+0x24c>
 80073fa:	2200      	movs	r2, #0
 80073fc:	4b22      	ldr	r3, [pc, #136]	; (8007488 <pow+0x318>)
 80073fe:	e7db      	b.n	80073b8 <pow+0x248>
 8007400:	0020      	movs	r0, r4
 8007402:	f000 fdff 	bl	8008004 <matherr>
 8007406:	2800      	cmp	r0, #0
 8007408:	d000      	beq.n	800740c <pow+0x29c>
 800740a:	e78b      	b.n	8007324 <pow+0x1b4>
 800740c:	e7db      	b.n	80073c6 <pow+0x256>
 800740e:	2200      	movs	r2, #0
 8007410:	9802      	ldr	r0, [sp, #8]
 8007412:	9903      	ldr	r1, [sp, #12]
 8007414:	2300      	movs	r3, #0
 8007416:	f7f8 ff13 	bl	8000240 <__aeabi_dcmpeq>
 800741a:	2800      	cmp	r0, #0
 800741c:	d100      	bne.n	8007420 <pow+0x2b0>
 800741e:	e78c      	b.n	800733a <pow+0x1ca>
 8007420:	9800      	ldr	r0, [sp, #0]
 8007422:	9901      	ldr	r1, [sp, #4]
 8007424:	f000 fde6 	bl	8007ff4 <finite>
 8007428:	2800      	cmp	r0, #0
 800742a:	d100      	bne.n	800742e <pow+0x2be>
 800742c:	e785      	b.n	800733a <pow+0x1ca>
 800742e:	0030      	movs	r0, r6
 8007430:	0039      	movs	r1, r7
 8007432:	f000 fddf 	bl	8007ff4 <finite>
 8007436:	2800      	cmp	r0, #0
 8007438:	d100      	bne.n	800743c <pow+0x2cc>
 800743a:	e77e      	b.n	800733a <pow+0x1ca>
 800743c:	2304      	movs	r3, #4
 800743e:	9306      	str	r3, [sp, #24]
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <pow+0x310>)
 8007442:	960a      	str	r6, [sp, #40]	; 0x28
 8007444:	970b      	str	r7, [sp, #44]	; 0x2c
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	2300      	movs	r3, #0
 800744a:	930e      	str	r3, [sp, #56]	; 0x38
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	9c01      	ldr	r4, [sp, #4]
 8007450:	9308      	str	r3, [sp, #32]
 8007452:	9409      	str	r4, [sp, #36]	; 0x24
 8007454:	2300      	movs	r3, #0
 8007456:	2400      	movs	r4, #0
 8007458:	930c      	str	r3, [sp, #48]	; 0x30
 800745a:	940d      	str	r4, [sp, #52]	; 0x34
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <pow+0x30c>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	b25b      	sxtb	r3, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d103      	bne.n	800746e <pow+0x2fe>
 8007466:	f7ff fe51 	bl	800710c <__errno>
 800746a:	2322      	movs	r3, #34	; 0x22
 800746c:	e71f      	b.n	80072ae <pow+0x13e>
 800746e:	a806      	add	r0, sp, #24
 8007470:	f000 fdc8 	bl	8008004 <matherr>
 8007474:	2800      	cmp	r0, #0
 8007476:	d000      	beq.n	800747a <pow+0x30a>
 8007478:	e6e1      	b.n	800723e <pow+0xce>
 800747a:	e7f4      	b.n	8007466 <pow+0x2f6>
 800747c:	2000006c 	.word	0x2000006c
 8007480:	08008308 	.word	0x08008308
 8007484:	3ff00000 	.word	0x3ff00000
 8007488:	fff00000 	.word	0xfff00000
 800748c:	3fe00000 	.word	0x3fe00000
 8007490:	47efffff 	.word	0x47efffff
 8007494:	c7efffff 	.word	0xc7efffff
 8007498:	7ff00000 	.word	0x7ff00000

0800749c <__ieee754_pow>:
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749e:	b095      	sub	sp, #84	; 0x54
 80074a0:	9202      	str	r2, [sp, #8]
 80074a2:	9303      	str	r3, [sp, #12]
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	000e      	movs	r6, r1
 80074a8:	9902      	ldr	r1, [sp, #8]
 80074aa:	005d      	lsls	r5, r3, #1
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	000b      	movs	r3, r1
 80074b0:	086d      	lsrs	r5, r5, #1
 80074b2:	0007      	movs	r7, r0
 80074b4:	432b      	orrs	r3, r5
 80074b6:	d101      	bne.n	80074bc <__ieee754_pow+0x20>
 80074b8:	f000 fcad 	bl	8007e16 <__ieee754_pow+0x97a>
 80074bc:	4b7e      	ldr	r3, [pc, #504]	; (80076b8 <__ieee754_pow+0x21c>)
 80074be:	0074      	lsls	r4, r6, #1
 80074c0:	9608      	str	r6, [sp, #32]
 80074c2:	9000      	str	r0, [sp, #0]
 80074c4:	0864      	lsrs	r4, r4, #1
 80074c6:	469c      	mov	ip, r3
 80074c8:	429c      	cmp	r4, r3
 80074ca:	dc0b      	bgt.n	80074e4 <__ieee754_pow+0x48>
 80074cc:	d104      	bne.n	80074d8 <__ieee754_pow+0x3c>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d108      	bne.n	80074e4 <__ieee754_pow+0x48>
 80074d2:	42a5      	cmp	r5, r4
 80074d4:	dc0c      	bgt.n	80074f0 <__ieee754_pow+0x54>
 80074d6:	e001      	b.n	80074dc <__ieee754_pow+0x40>
 80074d8:	429d      	cmp	r5, r3
 80074da:	dc03      	bgt.n	80074e4 <__ieee754_pow+0x48>
 80074dc:	4565      	cmp	r5, ip
 80074de:	d10d      	bne.n	80074fc <__ieee754_pow+0x60>
 80074e0:	2900      	cmp	r1, #0
 80074e2:	d00b      	beq.n	80074fc <__ieee754_pow+0x60>
 80074e4:	4b75      	ldr	r3, [pc, #468]	; (80076bc <__ieee754_pow+0x220>)
 80074e6:	18e4      	adds	r4, r4, r3
 80074e8:	4327      	orrs	r7, r4
 80074ea:	d101      	bne.n	80074f0 <__ieee754_pow+0x54>
 80074ec:	f000 fc93 	bl	8007e16 <__ieee754_pow+0x97a>
 80074f0:	4873      	ldr	r0, [pc, #460]	; (80076c0 <__ieee754_pow+0x224>)
 80074f2:	f000 fd89 	bl	8008008 <nan>
 80074f6:	9000      	str	r0, [sp, #0]
 80074f8:	9101      	str	r1, [sp, #4]
 80074fa:	e061      	b.n	80075c0 <__ieee754_pow+0x124>
 80074fc:	2300      	movs	r3, #0
 80074fe:	9306      	str	r3, [sp, #24]
 8007500:	2e00      	cmp	r6, #0
 8007502:	da17      	bge.n	8007534 <__ieee754_pow+0x98>
 8007504:	4a6f      	ldr	r2, [pc, #444]	; (80076c4 <__ieee754_pow+0x228>)
 8007506:	4295      	cmp	r5, r2
 8007508:	dc4d      	bgt.n	80075a6 <__ieee754_pow+0x10a>
 800750a:	4a6f      	ldr	r2, [pc, #444]	; (80076c8 <__ieee754_pow+0x22c>)
 800750c:	4295      	cmp	r5, r2
 800750e:	dd11      	ble.n	8007534 <__ieee754_pow+0x98>
 8007510:	4b6e      	ldr	r3, [pc, #440]	; (80076cc <__ieee754_pow+0x230>)
 8007512:	152a      	asrs	r2, r5, #20
 8007514:	18d2      	adds	r2, r2, r3
 8007516:	2a14      	cmp	r2, #20
 8007518:	dd25      	ble.n	8007566 <__ieee754_pow+0xca>
 800751a:	2034      	movs	r0, #52	; 0x34
 800751c:	1a82      	subs	r2, r0, r2
 800751e:	9802      	ldr	r0, [sp, #8]
 8007520:	40d0      	lsrs	r0, r2
 8007522:	0003      	movs	r3, r0
 8007524:	4093      	lsls	r3, r2
 8007526:	428b      	cmp	r3, r1
 8007528:	d104      	bne.n	8007534 <__ieee754_pow+0x98>
 800752a:	2201      	movs	r2, #1
 800752c:	4010      	ands	r0, r2
 800752e:	1892      	adds	r2, r2, r2
 8007530:	1a13      	subs	r3, r2, r0
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	2900      	cmp	r1, #0
 8007536:	d15e      	bne.n	80075f6 <__ieee754_pow+0x15a>
 8007538:	4565      	cmp	r5, ip
 800753a:	d123      	bne.n	8007584 <__ieee754_pow+0xe8>
 800753c:	4b5f      	ldr	r3, [pc, #380]	; (80076bc <__ieee754_pow+0x220>)
 800753e:	18e3      	adds	r3, r4, r3
 8007540:	431f      	orrs	r7, r3
 8007542:	d101      	bne.n	8007548 <__ieee754_pow+0xac>
 8007544:	f000 fc67 	bl	8007e16 <__ieee754_pow+0x97a>
 8007548:	4b5f      	ldr	r3, [pc, #380]	; (80076c8 <__ieee754_pow+0x22c>)
 800754a:	429c      	cmp	r4, r3
 800754c:	dd2d      	ble.n	80075aa <__ieee754_pow+0x10e>
 800754e:	9b02      	ldr	r3, [sp, #8]
 8007550:	9c03      	ldr	r4, [sp, #12]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	9401      	str	r4, [sp, #4]
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	da31      	bge.n	80075c0 <__ieee754_pow+0x124>
 800755c:	2300      	movs	r3, #0
 800755e:	2400      	movs	r4, #0
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	9401      	str	r4, [sp, #4]
 8007564:	e02c      	b.n	80075c0 <__ieee754_pow+0x124>
 8007566:	2900      	cmp	r1, #0
 8007568:	d145      	bne.n	80075f6 <__ieee754_pow+0x15a>
 800756a:	2314      	movs	r3, #20
 800756c:	1a9a      	subs	r2, r3, r2
 800756e:	002b      	movs	r3, r5
 8007570:	4113      	asrs	r3, r2
 8007572:	0019      	movs	r1, r3
 8007574:	4091      	lsls	r1, r2
 8007576:	42a9      	cmp	r1, r5
 8007578:	d104      	bne.n	8007584 <__ieee754_pow+0xe8>
 800757a:	2201      	movs	r2, #1
 800757c:	4013      	ands	r3, r2
 800757e:	1892      	adds	r2, r2, r2
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	9306      	str	r3, [sp, #24]
 8007584:	4b52      	ldr	r3, [pc, #328]	; (80076d0 <__ieee754_pow+0x234>)
 8007586:	429d      	cmp	r5, r3
 8007588:	d11e      	bne.n	80075c8 <__ieee754_pow+0x12c>
 800758a:	0038      	movs	r0, r7
 800758c:	0031      	movs	r1, r6
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	9000      	str	r0, [sp, #0]
 8007592:	9101      	str	r1, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	da13      	bge.n	80075c0 <__ieee754_pow+0x124>
 8007598:	003a      	movs	r2, r7
 800759a:	0033      	movs	r3, r6
 800759c:	2000      	movs	r0, #0
 800759e:	494c      	ldr	r1, [pc, #304]	; (80076d0 <__ieee754_pow+0x234>)
 80075a0:	f7f9 fd3e 	bl	8001020 <__aeabi_ddiv>
 80075a4:	e7a7      	b.n	80074f6 <__ieee754_pow+0x5a>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e7c3      	b.n	8007532 <__ieee754_pow+0x96>
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dad5      	bge.n	800755c <__ieee754_pow+0xc0>
 80075b0:	2280      	movs	r2, #128	; 0x80
 80075b2:	0612      	lsls	r2, r2, #24
 80075b4:	4694      	mov	ip, r2
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	4463      	add	r3, ip
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	9800      	ldr	r0, [sp, #0]
 80075c2:	9901      	ldr	r1, [sp, #4]
 80075c4:	b015      	add	sp, #84	; 0x54
 80075c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	05db      	lsls	r3, r3, #23
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d106      	bne.n	80075e0 <__ieee754_pow+0x144>
 80075d2:	003a      	movs	r2, r7
 80075d4:	0033      	movs	r3, r6
 80075d6:	0038      	movs	r0, r7
 80075d8:	0031      	movs	r1, r6
 80075da:	f7fa f92b 	bl	8001834 <__aeabi_dmul>
 80075de:	e78a      	b.n	80074f6 <__ieee754_pow+0x5a>
 80075e0:	4b3c      	ldr	r3, [pc, #240]	; (80076d4 <__ieee754_pow+0x238>)
 80075e2:	9a04      	ldr	r2, [sp, #16]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d106      	bne.n	80075f6 <__ieee754_pow+0x15a>
 80075e8:	2e00      	cmp	r6, #0
 80075ea:	db04      	blt.n	80075f6 <__ieee754_pow+0x15a>
 80075ec:	0038      	movs	r0, r7
 80075ee:	0031      	movs	r1, r6
 80075f0:	f000 fc4a 	bl	8007e88 <__ieee754_sqrt>
 80075f4:	e77f      	b.n	80074f6 <__ieee754_pow+0x5a>
 80075f6:	0038      	movs	r0, r7
 80075f8:	0031      	movs	r1, r6
 80075fa:	f000 fcf7 	bl	8007fec <fabs>
 80075fe:	9000      	str	r0, [sp, #0]
 8007600:	9101      	str	r1, [sp, #4]
 8007602:	2f00      	cmp	r7, #0
 8007604:	d12e      	bne.n	8007664 <__ieee754_pow+0x1c8>
 8007606:	2c00      	cmp	r4, #0
 8007608:	d004      	beq.n	8007614 <__ieee754_pow+0x178>
 800760a:	4a31      	ldr	r2, [pc, #196]	; (80076d0 <__ieee754_pow+0x234>)
 800760c:	00b3      	lsls	r3, r6, #2
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	4293      	cmp	r3, r2
 8007612:	d127      	bne.n	8007664 <__ieee754_pow+0x1c8>
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da07      	bge.n	800762a <__ieee754_pow+0x18e>
 800761a:	9a00      	ldr	r2, [sp, #0]
 800761c:	9b01      	ldr	r3, [sp, #4]
 800761e:	2000      	movs	r0, #0
 8007620:	492b      	ldr	r1, [pc, #172]	; (80076d0 <__ieee754_pow+0x234>)
 8007622:	f7f9 fcfd 	bl	8001020 <__aeabi_ddiv>
 8007626:	9000      	str	r0, [sp, #0]
 8007628:	9101      	str	r1, [sp, #4]
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dac7      	bge.n	80075c0 <__ieee754_pow+0x124>
 8007630:	4b22      	ldr	r3, [pc, #136]	; (80076bc <__ieee754_pow+0x220>)
 8007632:	18e4      	adds	r4, r4, r3
 8007634:	9b06      	ldr	r3, [sp, #24]
 8007636:	431c      	orrs	r4, r3
 8007638:	d108      	bne.n	800764c <__ieee754_pow+0x1b0>
 800763a:	9a00      	ldr	r2, [sp, #0]
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	0010      	movs	r0, r2
 8007640:	0019      	movs	r1, r3
 8007642:	f7fa fb69 	bl	8001d18 <__aeabi_dsub>
 8007646:	0002      	movs	r2, r0
 8007648:	000b      	movs	r3, r1
 800764a:	e7a9      	b.n	80075a0 <__ieee754_pow+0x104>
 800764c:	9b06      	ldr	r3, [sp, #24]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d1b6      	bne.n	80075c0 <__ieee754_pow+0x124>
 8007652:	9800      	ldr	r0, [sp, #0]
 8007654:	2180      	movs	r1, #128	; 0x80
 8007656:	0002      	movs	r2, r0
 8007658:	9801      	ldr	r0, [sp, #4]
 800765a:	0609      	lsls	r1, r1, #24
 800765c:	1843      	adds	r3, r0, r1
 800765e:	9200      	str	r2, [sp, #0]
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	e7ad      	b.n	80075c0 <__ieee754_pow+0x124>
 8007664:	0ff3      	lsrs	r3, r6, #31
 8007666:	3b01      	subs	r3, #1
 8007668:	9310      	str	r3, [sp, #64]	; 0x40
 800766a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800766c:	9b06      	ldr	r3, [sp, #24]
 800766e:	4313      	orrs	r3, r2
 8007670:	d104      	bne.n	800767c <__ieee754_pow+0x1e0>
 8007672:	003a      	movs	r2, r7
 8007674:	0033      	movs	r3, r6
 8007676:	0038      	movs	r0, r7
 8007678:	0031      	movs	r1, r6
 800767a:	e7e2      	b.n	8007642 <__ieee754_pow+0x1a6>
 800767c:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <__ieee754_pow+0x23c>)
 800767e:	429d      	cmp	r5, r3
 8007680:	dc00      	bgt.n	8007684 <__ieee754_pow+0x1e8>
 8007682:	e0f7      	b.n	8007874 <__ieee754_pow+0x3d8>
 8007684:	4b15      	ldr	r3, [pc, #84]	; (80076dc <__ieee754_pow+0x240>)
 8007686:	429d      	cmp	r5, r3
 8007688:	dd0b      	ble.n	80076a2 <__ieee754_pow+0x206>
 800768a:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <__ieee754_pow+0x22c>)
 800768c:	429c      	cmp	r4, r3
 800768e:	dc0e      	bgt.n	80076ae <__ieee754_pow+0x212>
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	db00      	blt.n	8007698 <__ieee754_pow+0x1fc>
 8007696:	e761      	b.n	800755c <__ieee754_pow+0xc0>
 8007698:	4a11      	ldr	r2, [pc, #68]	; (80076e0 <__ieee754_pow+0x244>)
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <__ieee754_pow+0x248>)
 800769c:	0010      	movs	r0, r2
 800769e:	0019      	movs	r1, r3
 80076a0:	e79b      	b.n	80075da <__ieee754_pow+0x13e>
 80076a2:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <__ieee754_pow+0x24c>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	ddf3      	ble.n	8007690 <__ieee754_pow+0x1f4>
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <__ieee754_pow+0x234>)
 80076aa:	429c      	cmp	r4, r3
 80076ac:	dd1e      	ble.n	80076ec <__ieee754_pow+0x250>
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dcf1      	bgt.n	8007698 <__ieee754_pow+0x1fc>
 80076b4:	e752      	b.n	800755c <__ieee754_pow+0xc0>
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	7ff00000 	.word	0x7ff00000
 80076bc:	c0100000 	.word	0xc0100000
 80076c0:	0800830b 	.word	0x0800830b
 80076c4:	433fffff 	.word	0x433fffff
 80076c8:	3fefffff 	.word	0x3fefffff
 80076cc:	fffffc01 	.word	0xfffffc01
 80076d0:	3ff00000 	.word	0x3ff00000
 80076d4:	3fe00000 	.word	0x3fe00000
 80076d8:	41e00000 	.word	0x41e00000
 80076dc:	43f00000 	.word	0x43f00000
 80076e0:	8800759c 	.word	0x8800759c
 80076e4:	7e37e43c 	.word	0x7e37e43c
 80076e8:	3feffffe 	.word	0x3feffffe
 80076ec:	2200      	movs	r2, #0
 80076ee:	9800      	ldr	r0, [sp, #0]
 80076f0:	9901      	ldr	r1, [sp, #4]
 80076f2:	4b52      	ldr	r3, [pc, #328]	; (800783c <__ieee754_pow+0x3a0>)
 80076f4:	f7fa fb10 	bl	8001d18 <__aeabi_dsub>
 80076f8:	22c0      	movs	r2, #192	; 0xc0
 80076fa:	4b51      	ldr	r3, [pc, #324]	; (8007840 <__ieee754_pow+0x3a4>)
 80076fc:	05d2      	lsls	r2, r2, #23
 80076fe:	0006      	movs	r6, r0
 8007700:	000f      	movs	r7, r1
 8007702:	f7fa f897 	bl	8001834 <__aeabi_dmul>
 8007706:	4a4f      	ldr	r2, [pc, #316]	; (8007844 <__ieee754_pow+0x3a8>)
 8007708:	9000      	str	r0, [sp, #0]
 800770a:	9101      	str	r1, [sp, #4]
 800770c:	4b4e      	ldr	r3, [pc, #312]	; (8007848 <__ieee754_pow+0x3ac>)
 800770e:	0030      	movs	r0, r6
 8007710:	0039      	movs	r1, r7
 8007712:	f7fa f88f 	bl	8001834 <__aeabi_dmul>
 8007716:	2200      	movs	r2, #0
 8007718:	9004      	str	r0, [sp, #16]
 800771a:	9105      	str	r1, [sp, #20]
 800771c:	4b4b      	ldr	r3, [pc, #300]	; (800784c <__ieee754_pow+0x3b0>)
 800771e:	0030      	movs	r0, r6
 8007720:	0039      	movs	r1, r7
 8007722:	f7fa f887 	bl	8001834 <__aeabi_dmul>
 8007726:	0002      	movs	r2, r0
 8007728:	000b      	movs	r3, r1
 800772a:	4849      	ldr	r0, [pc, #292]	; (8007850 <__ieee754_pow+0x3b4>)
 800772c:	4949      	ldr	r1, [pc, #292]	; (8007854 <__ieee754_pow+0x3b8>)
 800772e:	f7fa faf3 	bl	8001d18 <__aeabi_dsub>
 8007732:	0032      	movs	r2, r6
 8007734:	003b      	movs	r3, r7
 8007736:	f7fa f87d 	bl	8001834 <__aeabi_dmul>
 800773a:	0002      	movs	r2, r0
 800773c:	000b      	movs	r3, r1
 800773e:	2000      	movs	r0, #0
 8007740:	4945      	ldr	r1, [pc, #276]	; (8007858 <__ieee754_pow+0x3bc>)
 8007742:	f7fa fae9 	bl	8001d18 <__aeabi_dsub>
 8007746:	0032      	movs	r2, r6
 8007748:	0004      	movs	r4, r0
 800774a:	000d      	movs	r5, r1
 800774c:	003b      	movs	r3, r7
 800774e:	0030      	movs	r0, r6
 8007750:	0039      	movs	r1, r7
 8007752:	f7fa f86f 	bl	8001834 <__aeabi_dmul>
 8007756:	0002      	movs	r2, r0
 8007758:	000b      	movs	r3, r1
 800775a:	0020      	movs	r0, r4
 800775c:	0029      	movs	r1, r5
 800775e:	f7fa f869 	bl	8001834 <__aeabi_dmul>
 8007762:	4a3e      	ldr	r2, [pc, #248]	; (800785c <__ieee754_pow+0x3c0>)
 8007764:	4b36      	ldr	r3, [pc, #216]	; (8007840 <__ieee754_pow+0x3a4>)
 8007766:	f7fa f865 	bl	8001834 <__aeabi_dmul>
 800776a:	0002      	movs	r2, r0
 800776c:	000b      	movs	r3, r1
 800776e:	9804      	ldr	r0, [sp, #16]
 8007770:	9905      	ldr	r1, [sp, #20]
 8007772:	f7fa fad1 	bl	8001d18 <__aeabi_dsub>
 8007776:	0002      	movs	r2, r0
 8007778:	000b      	movs	r3, r1
 800777a:	0004      	movs	r4, r0
 800777c:	000d      	movs	r5, r1
 800777e:	9800      	ldr	r0, [sp, #0]
 8007780:	9901      	ldr	r1, [sp, #4]
 8007782:	f7f9 f931 	bl	80009e8 <__aeabi_dadd>
 8007786:	9a00      	ldr	r2, [sp, #0]
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	2000      	movs	r0, #0
 800778c:	9004      	str	r0, [sp, #16]
 800778e:	9105      	str	r1, [sp, #20]
 8007790:	f7fa fac2 	bl	8001d18 <__aeabi_dsub>
 8007794:	0002      	movs	r2, r0
 8007796:	000b      	movs	r3, r1
 8007798:	0020      	movs	r0, r4
 800779a:	0029      	movs	r1, r5
 800779c:	f7fa fabc 	bl	8001d18 <__aeabi_dsub>
 80077a0:	9b06      	ldr	r3, [sp, #24]
 80077a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077a4:	3b01      	subs	r3, #1
 80077a6:	0006      	movs	r6, r0
 80077a8:	000f      	movs	r7, r1
 80077aa:	4313      	orrs	r3, r2
 80077ac:	d000      	beq.n	80077b0 <__ieee754_pow+0x314>
 80077ae:	e1de      	b.n	8007b6e <__ieee754_pow+0x6d2>
 80077b0:	2300      	movs	r3, #0
 80077b2:	4c2b      	ldr	r4, [pc, #172]	; (8007860 <__ieee754_pow+0x3c4>)
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	9401      	str	r4, [sp, #4]
 80077b8:	9c02      	ldr	r4, [sp, #8]
 80077ba:	9d03      	ldr	r5, [sp, #12]
 80077bc:	9802      	ldr	r0, [sp, #8]
 80077be:	9903      	ldr	r1, [sp, #12]
 80077c0:	2400      	movs	r4, #0
 80077c2:	002b      	movs	r3, r5
 80077c4:	0022      	movs	r2, r4
 80077c6:	f7fa faa7 	bl	8001d18 <__aeabi_dsub>
 80077ca:	9a04      	ldr	r2, [sp, #16]
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	f7fa f831 	bl	8001834 <__aeabi_dmul>
 80077d2:	9a02      	ldr	r2, [sp, #8]
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	9006      	str	r0, [sp, #24]
 80077d8:	9107      	str	r1, [sp, #28]
 80077da:	0030      	movs	r0, r6
 80077dc:	0039      	movs	r1, r7
 80077de:	f7fa f829 	bl	8001834 <__aeabi_dmul>
 80077e2:	0002      	movs	r2, r0
 80077e4:	000b      	movs	r3, r1
 80077e6:	9806      	ldr	r0, [sp, #24]
 80077e8:	9907      	ldr	r1, [sp, #28]
 80077ea:	f7f9 f8fd 	bl	80009e8 <__aeabi_dadd>
 80077ee:	0022      	movs	r2, r4
 80077f0:	002b      	movs	r3, r5
 80077f2:	9006      	str	r0, [sp, #24]
 80077f4:	9107      	str	r1, [sp, #28]
 80077f6:	9804      	ldr	r0, [sp, #16]
 80077f8:	9905      	ldr	r1, [sp, #20]
 80077fa:	f7fa f81b 	bl	8001834 <__aeabi_dmul>
 80077fe:	0006      	movs	r6, r0
 8007800:	000f      	movs	r7, r1
 8007802:	000b      	movs	r3, r1
 8007804:	0002      	movs	r2, r0
 8007806:	9806      	ldr	r0, [sp, #24]
 8007808:	9907      	ldr	r1, [sp, #28]
 800780a:	9604      	str	r6, [sp, #16]
 800780c:	9705      	str	r7, [sp, #20]
 800780e:	f7f9 f8eb 	bl	80009e8 <__aeabi_dadd>
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <__ieee754_pow+0x3c8>)
 8007814:	0005      	movs	r5, r0
 8007816:	000c      	movs	r4, r1
 8007818:	9108      	str	r1, [sp, #32]
 800781a:	4299      	cmp	r1, r3
 800781c:	dc00      	bgt.n	8007820 <__ieee754_pow+0x384>
 800781e:	e2d8      	b.n	8007dd2 <__ieee754_pow+0x936>
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <__ieee754_pow+0x3cc>)
 8007822:	18cb      	adds	r3, r1, r3
 8007824:	4303      	orrs	r3, r0
 8007826:	d100      	bne.n	800782a <__ieee754_pow+0x38e>
 8007828:	e1da      	b.n	8007be0 <__ieee754_pow+0x744>
 800782a:	9800      	ldr	r0, [sp, #0]
 800782c:	9901      	ldr	r1, [sp, #4]
 800782e:	4a0f      	ldr	r2, [pc, #60]	; (800786c <__ieee754_pow+0x3d0>)
 8007830:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <__ieee754_pow+0x3d4>)
 8007832:	f7f9 ffff 	bl	8001834 <__aeabi_dmul>
 8007836:	4a0d      	ldr	r2, [pc, #52]	; (800786c <__ieee754_pow+0x3d0>)
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <__ieee754_pow+0x3d4>)
 800783a:	e6ce      	b.n	80075da <__ieee754_pow+0x13e>
 800783c:	3ff00000 	.word	0x3ff00000
 8007840:	3ff71547 	.word	0x3ff71547
 8007844:	f85ddf44 	.word	0xf85ddf44
 8007848:	3e54ae0b 	.word	0x3e54ae0b
 800784c:	3fd00000 	.word	0x3fd00000
 8007850:	55555555 	.word	0x55555555
 8007854:	3fd55555 	.word	0x3fd55555
 8007858:	3fe00000 	.word	0x3fe00000
 800785c:	652b82fe 	.word	0x652b82fe
 8007860:	bff00000 	.word	0xbff00000
 8007864:	408fffff 	.word	0x408fffff
 8007868:	bf700000 	.word	0xbf700000
 800786c:	8800759c 	.word	0x8800759c
 8007870:	7e37e43c 	.word	0x7e37e43c
 8007874:	4bbf      	ldr	r3, [pc, #764]	; (8007b74 <__ieee754_pow+0x6d8>)
 8007876:	2200      	movs	r2, #0
 8007878:	429c      	cmp	r4, r3
 800787a:	dc0a      	bgt.n	8007892 <__ieee754_pow+0x3f6>
 800787c:	9800      	ldr	r0, [sp, #0]
 800787e:	9901      	ldr	r1, [sp, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	4bbd      	ldr	r3, [pc, #756]	; (8007b78 <__ieee754_pow+0x6dc>)
 8007884:	f7f9 ffd6 	bl	8001834 <__aeabi_dmul>
 8007888:	2235      	movs	r2, #53	; 0x35
 800788a:	9000      	str	r0, [sp, #0]
 800788c:	9101      	str	r1, [sp, #4]
 800788e:	9c01      	ldr	r4, [sp, #4]
 8007890:	4252      	negs	r2, r2
 8007892:	49ba      	ldr	r1, [pc, #744]	; (8007b7c <__ieee754_pow+0x6e0>)
 8007894:	1523      	asrs	r3, r4, #20
 8007896:	185b      	adds	r3, r3, r1
 8007898:	189b      	adds	r3, r3, r2
 800789a:	0324      	lsls	r4, r4, #12
 800789c:	4db8      	ldr	r5, [pc, #736]	; (8007b80 <__ieee754_pow+0x6e4>)
 800789e:	4ab9      	ldr	r2, [pc, #740]	; (8007b84 <__ieee754_pow+0x6e8>)
 80078a0:	930d      	str	r3, [sp, #52]	; 0x34
 80078a2:	0b23      	lsrs	r3, r4, #12
 80078a4:	431d      	orrs	r5, r3
 80078a6:	2400      	movs	r4, #0
 80078a8:	4293      	cmp	r3, r2
 80078aa:	dd09      	ble.n	80078c0 <__ieee754_pow+0x424>
 80078ac:	4ab6      	ldr	r2, [pc, #728]	; (8007b88 <__ieee754_pow+0x6ec>)
 80078ae:	3401      	adds	r4, #1
 80078b0:	4293      	cmp	r3, r2
 80078b2:	dd05      	ble.n	80078c0 <__ieee754_pow+0x424>
 80078b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b6:	191b      	adds	r3, r3, r4
 80078b8:	2400      	movs	r4, #0
 80078ba:	930d      	str	r3, [sp, #52]	; 0x34
 80078bc:	4bb3      	ldr	r3, [pc, #716]	; (8007b8c <__ieee754_pow+0x6f0>)
 80078be:	18ed      	adds	r5, r5, r3
 80078c0:	9800      	ldr	r0, [sp, #0]
 80078c2:	9901      	ldr	r1, [sp, #4]
 80078c4:	0029      	movs	r1, r5
 80078c6:	00e3      	lsls	r3, r4, #3
 80078c8:	9311      	str	r3, [sp, #68]	; 0x44
 80078ca:	4bb1      	ldr	r3, [pc, #708]	; (8007b90 <__ieee754_pow+0x6f4>)
 80078cc:	00e2      	lsls	r2, r4, #3
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	900e      	str	r0, [sp, #56]	; 0x38
 80078d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80078d8:	920a      	str	r2, [sp, #40]	; 0x28
 80078da:	930b      	str	r3, [sp, #44]	; 0x2c
 80078dc:	f7fa fa1c 	bl	8001d18 <__aeabi_dsub>
 80078e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e4:	0006      	movs	r6, r0
 80078e6:	000f      	movs	r7, r1
 80078e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078ec:	f7f9 f87c 	bl	80009e8 <__aeabi_dadd>
 80078f0:	0002      	movs	r2, r0
 80078f2:	000b      	movs	r3, r1
 80078f4:	2000      	movs	r0, #0
 80078f6:	49a2      	ldr	r1, [pc, #648]	; (8007b80 <__ieee754_pow+0x6e4>)
 80078f8:	f7f9 fb92 	bl	8001020 <__aeabi_ddiv>
 80078fc:	9012      	str	r0, [sp, #72]	; 0x48
 80078fe:	9113      	str	r1, [sp, #76]	; 0x4c
 8007900:	0002      	movs	r2, r0
 8007902:	000b      	movs	r3, r1
 8007904:	0030      	movs	r0, r6
 8007906:	0039      	movs	r1, r7
 8007908:	f7f9 ff94 	bl	8001834 <__aeabi_dmul>
 800790c:	9008      	str	r0, [sp, #32]
 800790e:	9109      	str	r1, [sp, #36]	; 0x24
 8007910:	9a08      	ldr	r2, [sp, #32]
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	9204      	str	r2, [sp, #16]
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	2300      	movs	r3, #0
 800791c:	0589      	lsls	r1, r1, #22
 800791e:	106d      	asrs	r5, r5, #1
 8007920:	430d      	orrs	r5, r1
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	9a04      	ldr	r2, [sp, #16]
 8007928:	9b05      	ldr	r3, [sp, #20]
 800792a:	9200      	str	r2, [sp, #0]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	0309      	lsls	r1, r1, #12
 8007932:	186d      	adds	r5, r5, r1
 8007934:	04a4      	lsls	r4, r4, #18
 8007936:	192b      	adds	r3, r5, r4
 8007938:	9800      	ldr	r0, [sp, #0]
 800793a:	9901      	ldr	r1, [sp, #4]
 800793c:	0014      	movs	r4, r2
 800793e:	001d      	movs	r5, r3
 8007940:	f7f9 ff78 	bl	8001834 <__aeabi_dmul>
 8007944:	0002      	movs	r2, r0
 8007946:	000b      	movs	r3, r1
 8007948:	0030      	movs	r0, r6
 800794a:	0039      	movs	r1, r7
 800794c:	f7fa f9e4 	bl	8001d18 <__aeabi_dsub>
 8007950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007954:	0006      	movs	r6, r0
 8007956:	000f      	movs	r7, r1
 8007958:	0020      	movs	r0, r4
 800795a:	0029      	movs	r1, r5
 800795c:	f7fa f9dc 	bl	8001d18 <__aeabi_dsub>
 8007960:	0002      	movs	r2, r0
 8007962:	000b      	movs	r3, r1
 8007964:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007966:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007968:	f7fa f9d6 	bl	8001d18 <__aeabi_dsub>
 800796c:	9a00      	ldr	r2, [sp, #0]
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	f7f9 ff60 	bl	8001834 <__aeabi_dmul>
 8007974:	0002      	movs	r2, r0
 8007976:	000b      	movs	r3, r1
 8007978:	0030      	movs	r0, r6
 800797a:	0039      	movs	r1, r7
 800797c:	f7fa f9cc 	bl	8001d18 <__aeabi_dsub>
 8007980:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007982:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007984:	f7f9 ff56 	bl	8001834 <__aeabi_dmul>
 8007988:	9a08      	ldr	r2, [sp, #32]
 800798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798c:	900a      	str	r0, [sp, #40]	; 0x28
 800798e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007990:	0010      	movs	r0, r2
 8007992:	0019      	movs	r1, r3
 8007994:	f7f9 ff4e 	bl	8001834 <__aeabi_dmul>
 8007998:	0006      	movs	r6, r0
 800799a:	000f      	movs	r7, r1
 800799c:	4a7d      	ldr	r2, [pc, #500]	; (8007b94 <__ieee754_pow+0x6f8>)
 800799e:	4b7e      	ldr	r3, [pc, #504]	; (8007b98 <__ieee754_pow+0x6fc>)
 80079a0:	f7f9 ff48 	bl	8001834 <__aeabi_dmul>
 80079a4:	4a7d      	ldr	r2, [pc, #500]	; (8007b9c <__ieee754_pow+0x700>)
 80079a6:	4b7e      	ldr	r3, [pc, #504]	; (8007ba0 <__ieee754_pow+0x704>)
 80079a8:	f7f9 f81e 	bl	80009e8 <__aeabi_dadd>
 80079ac:	0032      	movs	r2, r6
 80079ae:	003b      	movs	r3, r7
 80079b0:	f7f9 ff40 	bl	8001834 <__aeabi_dmul>
 80079b4:	4a7b      	ldr	r2, [pc, #492]	; (8007ba4 <__ieee754_pow+0x708>)
 80079b6:	4b7c      	ldr	r3, [pc, #496]	; (8007ba8 <__ieee754_pow+0x70c>)
 80079b8:	f7f9 f816 	bl	80009e8 <__aeabi_dadd>
 80079bc:	0032      	movs	r2, r6
 80079be:	003b      	movs	r3, r7
 80079c0:	f7f9 ff38 	bl	8001834 <__aeabi_dmul>
 80079c4:	4a79      	ldr	r2, [pc, #484]	; (8007bac <__ieee754_pow+0x710>)
 80079c6:	4b7a      	ldr	r3, [pc, #488]	; (8007bb0 <__ieee754_pow+0x714>)
 80079c8:	f7f9 f80e 	bl	80009e8 <__aeabi_dadd>
 80079cc:	0032      	movs	r2, r6
 80079ce:	003b      	movs	r3, r7
 80079d0:	f7f9 ff30 	bl	8001834 <__aeabi_dmul>
 80079d4:	4a77      	ldr	r2, [pc, #476]	; (8007bb4 <__ieee754_pow+0x718>)
 80079d6:	4b78      	ldr	r3, [pc, #480]	; (8007bb8 <__ieee754_pow+0x71c>)
 80079d8:	f7f9 f806 	bl	80009e8 <__aeabi_dadd>
 80079dc:	0032      	movs	r2, r6
 80079de:	003b      	movs	r3, r7
 80079e0:	f7f9 ff28 	bl	8001834 <__aeabi_dmul>
 80079e4:	4a75      	ldr	r2, [pc, #468]	; (8007bbc <__ieee754_pow+0x720>)
 80079e6:	4b76      	ldr	r3, [pc, #472]	; (8007bc0 <__ieee754_pow+0x724>)
 80079e8:	f7f8 fffe 	bl	80009e8 <__aeabi_dadd>
 80079ec:	0032      	movs	r2, r6
 80079ee:	0004      	movs	r4, r0
 80079f0:	000d      	movs	r5, r1
 80079f2:	003b      	movs	r3, r7
 80079f4:	0030      	movs	r0, r6
 80079f6:	0039      	movs	r1, r7
 80079f8:	f7f9 ff1c 	bl	8001834 <__aeabi_dmul>
 80079fc:	0002      	movs	r2, r0
 80079fe:	000b      	movs	r3, r1
 8007a00:	0020      	movs	r0, r4
 8007a02:	0029      	movs	r1, r5
 8007a04:	f7f9 ff16 	bl	8001834 <__aeabi_dmul>
 8007a08:	9a00      	ldr	r2, [sp, #0]
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	0004      	movs	r4, r0
 8007a0e:	000d      	movs	r5, r1
 8007a10:	9808      	ldr	r0, [sp, #32]
 8007a12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a14:	f7f8 ffe8 	bl	80009e8 <__aeabi_dadd>
 8007a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1c:	f7f9 ff0a 	bl	8001834 <__aeabi_dmul>
 8007a20:	0022      	movs	r2, r4
 8007a22:	002b      	movs	r3, r5
 8007a24:	f7f8 ffe0 	bl	80009e8 <__aeabi_dadd>
 8007a28:	9a00      	ldr	r2, [sp, #0]
 8007a2a:	9b01      	ldr	r3, [sp, #4]
 8007a2c:	900e      	str	r0, [sp, #56]	; 0x38
 8007a2e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a30:	0010      	movs	r0, r2
 8007a32:	0019      	movs	r1, r3
 8007a34:	f7f9 fefe 	bl	8001834 <__aeabi_dmul>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4b62      	ldr	r3, [pc, #392]	; (8007bc4 <__ieee754_pow+0x728>)
 8007a3c:	0004      	movs	r4, r0
 8007a3e:	000d      	movs	r5, r1
 8007a40:	f7f8 ffd2 	bl	80009e8 <__aeabi_dadd>
 8007a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a48:	f7f8 ffce 	bl	80009e8 <__aeabi_dadd>
 8007a4c:	9e04      	ldr	r6, [sp, #16]
 8007a4e:	000f      	movs	r7, r1
 8007a50:	0032      	movs	r2, r6
 8007a52:	000b      	movs	r3, r1
 8007a54:	9800      	ldr	r0, [sp, #0]
 8007a56:	9901      	ldr	r1, [sp, #4]
 8007a58:	f7f9 feec 	bl	8001834 <__aeabi_dmul>
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	9000      	str	r0, [sp, #0]
 8007a60:	9101      	str	r1, [sp, #4]
 8007a62:	4b58      	ldr	r3, [pc, #352]	; (8007bc4 <__ieee754_pow+0x728>)
 8007a64:	0030      	movs	r0, r6
 8007a66:	0039      	movs	r1, r7
 8007a68:	f7fa f956 	bl	8001d18 <__aeabi_dsub>
 8007a6c:	0022      	movs	r2, r4
 8007a6e:	002b      	movs	r3, r5
 8007a70:	f7fa f952 	bl	8001d18 <__aeabi_dsub>
 8007a74:	0002      	movs	r2, r0
 8007a76:	000b      	movs	r3, r1
 8007a78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a7c:	f7fa f94c 	bl	8001d18 <__aeabi_dsub>
 8007a80:	9a08      	ldr	r2, [sp, #32]
 8007a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a84:	f7f9 fed6 	bl	8001834 <__aeabi_dmul>
 8007a88:	0032      	movs	r2, r6
 8007a8a:	0004      	movs	r4, r0
 8007a8c:	000d      	movs	r5, r1
 8007a8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a92:	003b      	movs	r3, r7
 8007a94:	f7f9 fece 	bl	8001834 <__aeabi_dmul>
 8007a98:	0002      	movs	r2, r0
 8007a9a:	000b      	movs	r3, r1
 8007a9c:	0020      	movs	r0, r4
 8007a9e:	0029      	movs	r1, r5
 8007aa0:	f7f8 ffa2 	bl	80009e8 <__aeabi_dadd>
 8007aa4:	0004      	movs	r4, r0
 8007aa6:	000d      	movs	r5, r1
 8007aa8:	0002      	movs	r2, r0
 8007aaa:	000b      	movs	r3, r1
 8007aac:	9800      	ldr	r0, [sp, #0]
 8007aae:	9901      	ldr	r1, [sp, #4]
 8007ab0:	f7f8 ff9a 	bl	80009e8 <__aeabi_dadd>
 8007ab4:	22e0      	movs	r2, #224	; 0xe0
 8007ab6:	9e04      	ldr	r6, [sp, #16]
 8007ab8:	0612      	lsls	r2, r2, #24
 8007aba:	4b43      	ldr	r3, [pc, #268]	; (8007bc8 <__ieee754_pow+0x72c>)
 8007abc:	0030      	movs	r0, r6
 8007abe:	000f      	movs	r7, r1
 8007ac0:	f7f9 feb8 	bl	8001834 <__aeabi_dmul>
 8007ac4:	9008      	str	r0, [sp, #32]
 8007ac6:	9109      	str	r1, [sp, #36]	; 0x24
 8007ac8:	9a00      	ldr	r2, [sp, #0]
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	0030      	movs	r0, r6
 8007ace:	0039      	movs	r1, r7
 8007ad0:	f7fa f922 	bl	8001d18 <__aeabi_dsub>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	000b      	movs	r3, r1
 8007ad8:	0020      	movs	r0, r4
 8007ada:	0029      	movs	r1, r5
 8007adc:	f7fa f91c 	bl	8001d18 <__aeabi_dsub>
 8007ae0:	4a3a      	ldr	r2, [pc, #232]	; (8007bcc <__ieee754_pow+0x730>)
 8007ae2:	4b39      	ldr	r3, [pc, #228]	; (8007bc8 <__ieee754_pow+0x72c>)
 8007ae4:	f7f9 fea6 	bl	8001834 <__aeabi_dmul>
 8007ae8:	4a39      	ldr	r2, [pc, #228]	; (8007bd0 <__ieee754_pow+0x734>)
 8007aea:	0004      	movs	r4, r0
 8007aec:	000d      	movs	r5, r1
 8007aee:	4b39      	ldr	r3, [pc, #228]	; (8007bd4 <__ieee754_pow+0x738>)
 8007af0:	0030      	movs	r0, r6
 8007af2:	0039      	movs	r1, r7
 8007af4:	f7f9 fe9e 	bl	8001834 <__aeabi_dmul>
 8007af8:	0002      	movs	r2, r0
 8007afa:	000b      	movs	r3, r1
 8007afc:	0020      	movs	r0, r4
 8007afe:	0029      	movs	r1, r5
 8007b00:	f7f8 ff72 	bl	80009e8 <__aeabi_dadd>
 8007b04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007b06:	4b34      	ldr	r3, [pc, #208]	; (8007bd8 <__ieee754_pow+0x73c>)
 8007b08:	189b      	adds	r3, r3, r2
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f7f8 ff6b 	bl	80009e8 <__aeabi_dadd>
 8007b12:	9000      	str	r0, [sp, #0]
 8007b14:	9101      	str	r1, [sp, #4]
 8007b16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b18:	f7fa fc62 	bl	80023e0 <__aeabi_i2d>
 8007b1c:	0004      	movs	r4, r0
 8007b1e:	000d      	movs	r5, r1
 8007b20:	9808      	ldr	r0, [sp, #32]
 8007b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007b26:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <__ieee754_pow+0x740>)
 8007b28:	189b      	adds	r3, r3, r2
 8007b2a:	681e      	ldr	r6, [r3, #0]
 8007b2c:	685f      	ldr	r7, [r3, #4]
 8007b2e:	9a00      	ldr	r2, [sp, #0]
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	f7f8 ff59 	bl	80009e8 <__aeabi_dadd>
 8007b36:	0032      	movs	r2, r6
 8007b38:	003b      	movs	r3, r7
 8007b3a:	f7f8 ff55 	bl	80009e8 <__aeabi_dadd>
 8007b3e:	0022      	movs	r2, r4
 8007b40:	002b      	movs	r3, r5
 8007b42:	f7f8 ff51 	bl	80009e8 <__aeabi_dadd>
 8007b46:	9804      	ldr	r0, [sp, #16]
 8007b48:	0022      	movs	r2, r4
 8007b4a:	002b      	movs	r3, r5
 8007b4c:	9004      	str	r0, [sp, #16]
 8007b4e:	9105      	str	r1, [sp, #20]
 8007b50:	f7fa f8e2 	bl	8001d18 <__aeabi_dsub>
 8007b54:	0032      	movs	r2, r6
 8007b56:	003b      	movs	r3, r7
 8007b58:	f7fa f8de 	bl	8001d18 <__aeabi_dsub>
 8007b5c:	9a08      	ldr	r2, [sp, #32]
 8007b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b60:	f7fa f8da 	bl	8001d18 <__aeabi_dsub>
 8007b64:	0002      	movs	r2, r0
 8007b66:	000b      	movs	r3, r1
 8007b68:	9800      	ldr	r0, [sp, #0]
 8007b6a:	9901      	ldr	r1, [sp, #4]
 8007b6c:	e616      	b.n	800779c <__ieee754_pow+0x300>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4c03      	ldr	r4, [pc, #12]	; (8007b80 <__ieee754_pow+0x6e4>)
 8007b72:	e61f      	b.n	80077b4 <__ieee754_pow+0x318>
 8007b74:	000fffff 	.word	0x000fffff
 8007b78:	43400000 	.word	0x43400000
 8007b7c:	fffffc01 	.word	0xfffffc01
 8007b80:	3ff00000 	.word	0x3ff00000
 8007b84:	0003988e 	.word	0x0003988e
 8007b88:	000bb679 	.word	0x000bb679
 8007b8c:	fff00000 	.word	0xfff00000
 8007b90:	08008310 	.word	0x08008310
 8007b94:	4a454eef 	.word	0x4a454eef
 8007b98:	3fca7e28 	.word	0x3fca7e28
 8007b9c:	93c9db65 	.word	0x93c9db65
 8007ba0:	3fcd864a 	.word	0x3fcd864a
 8007ba4:	a91d4101 	.word	0xa91d4101
 8007ba8:	3fd17460 	.word	0x3fd17460
 8007bac:	518f264d 	.word	0x518f264d
 8007bb0:	3fd55555 	.word	0x3fd55555
 8007bb4:	db6fabff 	.word	0xdb6fabff
 8007bb8:	3fdb6db6 	.word	0x3fdb6db6
 8007bbc:	33333303 	.word	0x33333303
 8007bc0:	3fe33333 	.word	0x3fe33333
 8007bc4:	40080000 	.word	0x40080000
 8007bc8:	3feec709 	.word	0x3feec709
 8007bcc:	dc3a03fd 	.word	0xdc3a03fd
 8007bd0:	145b01f5 	.word	0x145b01f5
 8007bd4:	be3e2fe0 	.word	0xbe3e2fe0
 8007bd8:	08008330 	.word	0x08008330
 8007bdc:	08008320 	.word	0x08008320
 8007be0:	4a8f      	ldr	r2, [pc, #572]	; (8007e20 <__ieee754_pow+0x984>)
 8007be2:	4b90      	ldr	r3, [pc, #576]	; (8007e24 <__ieee754_pow+0x988>)
 8007be4:	9806      	ldr	r0, [sp, #24]
 8007be6:	9907      	ldr	r1, [sp, #28]
 8007be8:	f7f8 fefe 	bl	80009e8 <__aeabi_dadd>
 8007bec:	0032      	movs	r2, r6
 8007bee:	9002      	str	r0, [sp, #8]
 8007bf0:	9103      	str	r1, [sp, #12]
 8007bf2:	003b      	movs	r3, r7
 8007bf4:	0028      	movs	r0, r5
 8007bf6:	0021      	movs	r1, r4
 8007bf8:	f7fa f88e 	bl	8001d18 <__aeabi_dsub>
 8007bfc:	0002      	movs	r2, r0
 8007bfe:	000b      	movs	r3, r1
 8007c00:	9802      	ldr	r0, [sp, #8]
 8007c02:	9903      	ldr	r1, [sp, #12]
 8007c04:	f7f8 fb36 	bl	8000274 <__aeabi_dcmpgt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d000      	beq.n	8007c0e <__ieee754_pow+0x772>
 8007c0c:	e60d      	b.n	800782a <__ieee754_pow+0x38e>
 8007c0e:	2100      	movs	r1, #0
 8007c10:	4a85      	ldr	r2, [pc, #532]	; (8007e28 <__ieee754_pow+0x98c>)
 8007c12:	0063      	lsls	r3, r4, #1
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	9102      	str	r1, [sp, #8]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	dd25      	ble.n	8007c68 <__ieee754_pow+0x7cc>
 8007c1c:	4a83      	ldr	r2, [pc, #524]	; (8007e2c <__ieee754_pow+0x990>)
 8007c1e:	151b      	asrs	r3, r3, #20
 8007c20:	189b      	adds	r3, r3, r2
 8007c22:	2280      	movs	r2, #128	; 0x80
 8007c24:	0352      	lsls	r2, r2, #13
 8007c26:	4694      	mov	ip, r2
 8007c28:	411a      	asrs	r2, r3
 8007c2a:	1914      	adds	r4, r2, r4
 8007c2c:	0060      	lsls	r0, r4, #1
 8007c2e:	4b80      	ldr	r3, [pc, #512]	; (8007e30 <__ieee754_pow+0x994>)
 8007c30:	0d40      	lsrs	r0, r0, #21
 8007c32:	4d80      	ldr	r5, [pc, #512]	; (8007e34 <__ieee754_pow+0x998>)
 8007c34:	18c0      	adds	r0, r0, r3
 8007c36:	4105      	asrs	r5, r0
 8007c38:	0021      	movs	r1, r4
 8007c3a:	43a9      	bics	r1, r5
 8007c3c:	000b      	movs	r3, r1
 8007c3e:	4661      	mov	r1, ip
 8007c40:	0324      	lsls	r4, r4, #12
 8007c42:	0b24      	lsrs	r4, r4, #12
 8007c44:	4321      	orrs	r1, r4
 8007c46:	2414      	movs	r4, #20
 8007c48:	1a20      	subs	r0, r4, r0
 8007c4a:	4101      	asrs	r1, r0
 8007c4c:	9102      	str	r1, [sp, #8]
 8007c4e:	9908      	ldr	r1, [sp, #32]
 8007c50:	2200      	movs	r2, #0
 8007c52:	2900      	cmp	r1, #0
 8007c54:	da02      	bge.n	8007c5c <__ieee754_pow+0x7c0>
 8007c56:	9902      	ldr	r1, [sp, #8]
 8007c58:	4249      	negs	r1, r1
 8007c5a:	9102      	str	r1, [sp, #8]
 8007c5c:	0030      	movs	r0, r6
 8007c5e:	0039      	movs	r1, r7
 8007c60:	f7fa f85a 	bl	8001d18 <__aeabi_dsub>
 8007c64:	9004      	str	r0, [sp, #16]
 8007c66:	9105      	str	r1, [sp, #20]
 8007c68:	9a06      	ldr	r2, [sp, #24]
 8007c6a:	9b07      	ldr	r3, [sp, #28]
 8007c6c:	9804      	ldr	r0, [sp, #16]
 8007c6e:	9905      	ldr	r1, [sp, #20]
 8007c70:	2600      	movs	r6, #0
 8007c72:	f7f8 feb9 	bl	80009e8 <__aeabi_dadd>
 8007c76:	2200      	movs	r2, #0
 8007c78:	4b6f      	ldr	r3, [pc, #444]	; (8007e38 <__ieee754_pow+0x99c>)
 8007c7a:	0030      	movs	r0, r6
 8007c7c:	000f      	movs	r7, r1
 8007c7e:	f7f9 fdd9 	bl	8001834 <__aeabi_dmul>
 8007c82:	9a04      	ldr	r2, [sp, #16]
 8007c84:	9b05      	ldr	r3, [sp, #20]
 8007c86:	9008      	str	r0, [sp, #32]
 8007c88:	9109      	str	r1, [sp, #36]	; 0x24
 8007c8a:	0030      	movs	r0, r6
 8007c8c:	0039      	movs	r1, r7
 8007c8e:	f7fa f843 	bl	8001d18 <__aeabi_dsub>
 8007c92:	0002      	movs	r2, r0
 8007c94:	000b      	movs	r3, r1
 8007c96:	9806      	ldr	r0, [sp, #24]
 8007c98:	9907      	ldr	r1, [sp, #28]
 8007c9a:	f7fa f83d 	bl	8001d18 <__aeabi_dsub>
 8007c9e:	4a67      	ldr	r2, [pc, #412]	; (8007e3c <__ieee754_pow+0x9a0>)
 8007ca0:	4b67      	ldr	r3, [pc, #412]	; (8007e40 <__ieee754_pow+0x9a4>)
 8007ca2:	f7f9 fdc7 	bl	8001834 <__aeabi_dmul>
 8007ca6:	4a67      	ldr	r2, [pc, #412]	; (8007e44 <__ieee754_pow+0x9a8>)
 8007ca8:	0004      	movs	r4, r0
 8007caa:	000d      	movs	r5, r1
 8007cac:	4b66      	ldr	r3, [pc, #408]	; (8007e48 <__ieee754_pow+0x9ac>)
 8007cae:	0030      	movs	r0, r6
 8007cb0:	0039      	movs	r1, r7
 8007cb2:	f7f9 fdbf 	bl	8001834 <__aeabi_dmul>
 8007cb6:	0002      	movs	r2, r0
 8007cb8:	000b      	movs	r3, r1
 8007cba:	0020      	movs	r0, r4
 8007cbc:	0029      	movs	r1, r5
 8007cbe:	f7f8 fe93 	bl	80009e8 <__aeabi_dadd>
 8007cc2:	0004      	movs	r4, r0
 8007cc4:	000d      	movs	r5, r1
 8007cc6:	0002      	movs	r2, r0
 8007cc8:	000b      	movs	r3, r1
 8007cca:	9808      	ldr	r0, [sp, #32]
 8007ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cce:	f7f8 fe8b 	bl	80009e8 <__aeabi_dadd>
 8007cd2:	9a08      	ldr	r2, [sp, #32]
 8007cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd6:	0006      	movs	r6, r0
 8007cd8:	000f      	movs	r7, r1
 8007cda:	f7fa f81d 	bl	8001d18 <__aeabi_dsub>
 8007cde:	0002      	movs	r2, r0
 8007ce0:	000b      	movs	r3, r1
 8007ce2:	0020      	movs	r0, r4
 8007ce4:	0029      	movs	r1, r5
 8007ce6:	f7fa f817 	bl	8001d18 <__aeabi_dsub>
 8007cea:	0032      	movs	r2, r6
 8007cec:	9004      	str	r0, [sp, #16]
 8007cee:	9105      	str	r1, [sp, #20]
 8007cf0:	003b      	movs	r3, r7
 8007cf2:	0030      	movs	r0, r6
 8007cf4:	0039      	movs	r1, r7
 8007cf6:	f7f9 fd9d 	bl	8001834 <__aeabi_dmul>
 8007cfa:	0004      	movs	r4, r0
 8007cfc:	000d      	movs	r5, r1
 8007cfe:	4a53      	ldr	r2, [pc, #332]	; (8007e4c <__ieee754_pow+0x9b0>)
 8007d00:	4b53      	ldr	r3, [pc, #332]	; (8007e50 <__ieee754_pow+0x9b4>)
 8007d02:	f7f9 fd97 	bl	8001834 <__aeabi_dmul>
 8007d06:	4a53      	ldr	r2, [pc, #332]	; (8007e54 <__ieee754_pow+0x9b8>)
 8007d08:	4b53      	ldr	r3, [pc, #332]	; (8007e58 <__ieee754_pow+0x9bc>)
 8007d0a:	f7fa f805 	bl	8001d18 <__aeabi_dsub>
 8007d0e:	0022      	movs	r2, r4
 8007d10:	002b      	movs	r3, r5
 8007d12:	f7f9 fd8f 	bl	8001834 <__aeabi_dmul>
 8007d16:	4a51      	ldr	r2, [pc, #324]	; (8007e5c <__ieee754_pow+0x9c0>)
 8007d18:	4b51      	ldr	r3, [pc, #324]	; (8007e60 <__ieee754_pow+0x9c4>)
 8007d1a:	f7f8 fe65 	bl	80009e8 <__aeabi_dadd>
 8007d1e:	0022      	movs	r2, r4
 8007d20:	002b      	movs	r3, r5
 8007d22:	f7f9 fd87 	bl	8001834 <__aeabi_dmul>
 8007d26:	4a4f      	ldr	r2, [pc, #316]	; (8007e64 <__ieee754_pow+0x9c8>)
 8007d28:	4b4f      	ldr	r3, [pc, #316]	; (8007e68 <__ieee754_pow+0x9cc>)
 8007d2a:	f7f9 fff5 	bl	8001d18 <__aeabi_dsub>
 8007d2e:	0022      	movs	r2, r4
 8007d30:	002b      	movs	r3, r5
 8007d32:	f7f9 fd7f 	bl	8001834 <__aeabi_dmul>
 8007d36:	4a4d      	ldr	r2, [pc, #308]	; (8007e6c <__ieee754_pow+0x9d0>)
 8007d38:	4b4d      	ldr	r3, [pc, #308]	; (8007e70 <__ieee754_pow+0x9d4>)
 8007d3a:	f7f8 fe55 	bl	80009e8 <__aeabi_dadd>
 8007d3e:	0022      	movs	r2, r4
 8007d40:	002b      	movs	r3, r5
 8007d42:	f7f9 fd77 	bl	8001834 <__aeabi_dmul>
 8007d46:	0002      	movs	r2, r0
 8007d48:	000b      	movs	r3, r1
 8007d4a:	0030      	movs	r0, r6
 8007d4c:	0039      	movs	r1, r7
 8007d4e:	f7f9 ffe3 	bl	8001d18 <__aeabi_dsub>
 8007d52:	0004      	movs	r4, r0
 8007d54:	000d      	movs	r5, r1
 8007d56:	0002      	movs	r2, r0
 8007d58:	000b      	movs	r3, r1
 8007d5a:	0030      	movs	r0, r6
 8007d5c:	0039      	movs	r1, r7
 8007d5e:	f7f9 fd69 	bl	8001834 <__aeabi_dmul>
 8007d62:	2380      	movs	r3, #128	; 0x80
 8007d64:	9006      	str	r0, [sp, #24]
 8007d66:	9107      	str	r1, [sp, #28]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	05db      	lsls	r3, r3, #23
 8007d6c:	0020      	movs	r0, r4
 8007d6e:	0029      	movs	r1, r5
 8007d70:	f7f9 ffd2 	bl	8001d18 <__aeabi_dsub>
 8007d74:	0002      	movs	r2, r0
 8007d76:	000b      	movs	r3, r1
 8007d78:	9806      	ldr	r0, [sp, #24]
 8007d7a:	9907      	ldr	r1, [sp, #28]
 8007d7c:	f7f9 f950 	bl	8001020 <__aeabi_ddiv>
 8007d80:	9a04      	ldr	r2, [sp, #16]
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	0004      	movs	r4, r0
 8007d86:	000d      	movs	r5, r1
 8007d88:	0030      	movs	r0, r6
 8007d8a:	0039      	movs	r1, r7
 8007d8c:	f7f9 fd52 	bl	8001834 <__aeabi_dmul>
 8007d90:	9a04      	ldr	r2, [sp, #16]
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	f7f8 fe28 	bl	80009e8 <__aeabi_dadd>
 8007d98:	0002      	movs	r2, r0
 8007d9a:	000b      	movs	r3, r1
 8007d9c:	0020      	movs	r0, r4
 8007d9e:	0029      	movs	r1, r5
 8007da0:	f7f9 ffba 	bl	8001d18 <__aeabi_dsub>
 8007da4:	0032      	movs	r2, r6
 8007da6:	003b      	movs	r3, r7
 8007da8:	f7f9 ffb6 	bl	8001d18 <__aeabi_dsub>
 8007dac:	0002      	movs	r2, r0
 8007dae:	000b      	movs	r3, r1
 8007db0:	2000      	movs	r0, #0
 8007db2:	4930      	ldr	r1, [pc, #192]	; (8007e74 <__ieee754_pow+0x9d8>)
 8007db4:	f7f9 ffb0 	bl	8001d18 <__aeabi_dsub>
 8007db8:	9b02      	ldr	r3, [sp, #8]
 8007dba:	051b      	lsls	r3, r3, #20
 8007dbc:	185b      	adds	r3, r3, r1
 8007dbe:	151a      	asrs	r2, r3, #20
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	dc26      	bgt.n	8007e12 <__ieee754_pow+0x976>
 8007dc4:	9a02      	ldr	r2, [sp, #8]
 8007dc6:	f000 f9ad 	bl	8008124 <scalbn>
 8007dca:	9a00      	ldr	r2, [sp, #0]
 8007dcc:	9b01      	ldr	r3, [sp, #4]
 8007dce:	f7ff fc04 	bl	80075da <__ieee754_pow+0x13e>
 8007dd2:	4a29      	ldr	r2, [pc, #164]	; (8007e78 <__ieee754_pow+0x9dc>)
 8007dd4:	004b      	lsls	r3, r1, #1
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	dc00      	bgt.n	8007dde <__ieee754_pow+0x942>
 8007ddc:	e717      	b.n	8007c0e <__ieee754_pow+0x772>
 8007dde:	4b27      	ldr	r3, [pc, #156]	; (8007e7c <__ieee754_pow+0x9e0>)
 8007de0:	18cb      	adds	r3, r1, r3
 8007de2:	4303      	orrs	r3, r0
 8007de4:	d009      	beq.n	8007dfa <__ieee754_pow+0x95e>
 8007de6:	9800      	ldr	r0, [sp, #0]
 8007de8:	9901      	ldr	r1, [sp, #4]
 8007dea:	4a25      	ldr	r2, [pc, #148]	; (8007e80 <__ieee754_pow+0x9e4>)
 8007dec:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <__ieee754_pow+0x9e8>)
 8007dee:	f7f9 fd21 	bl	8001834 <__aeabi_dmul>
 8007df2:	4a23      	ldr	r2, [pc, #140]	; (8007e80 <__ieee754_pow+0x9e4>)
 8007df4:	4b23      	ldr	r3, [pc, #140]	; (8007e84 <__ieee754_pow+0x9e8>)
 8007df6:	f7ff fbf0 	bl	80075da <__ieee754_pow+0x13e>
 8007dfa:	0032      	movs	r2, r6
 8007dfc:	003b      	movs	r3, r7
 8007dfe:	f7f9 ff8b 	bl	8001d18 <__aeabi_dsub>
 8007e02:	9a06      	ldr	r2, [sp, #24]
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	f7f8 fa3f 	bl	8000288 <__aeabi_dcmpge>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d100      	bne.n	8007e10 <__ieee754_pow+0x974>
 8007e0e:	e6fe      	b.n	8007c0e <__ieee754_pow+0x772>
 8007e10:	e7e9      	b.n	8007de6 <__ieee754_pow+0x94a>
 8007e12:	0019      	movs	r1, r3
 8007e14:	e7d9      	b.n	8007dca <__ieee754_pow+0x92e>
 8007e16:	2300      	movs	r3, #0
 8007e18:	4c16      	ldr	r4, [pc, #88]	; (8007e74 <__ieee754_pow+0x9d8>)
 8007e1a:	f7ff fba1 	bl	8007560 <__ieee754_pow+0xc4>
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	652b82fe 	.word	0x652b82fe
 8007e24:	3c971547 	.word	0x3c971547
 8007e28:	3fe00000 	.word	0x3fe00000
 8007e2c:	fffffc02 	.word	0xfffffc02
 8007e30:	fffffc01 	.word	0xfffffc01
 8007e34:	000fffff 	.word	0x000fffff
 8007e38:	3fe62e43 	.word	0x3fe62e43
 8007e3c:	fefa39ef 	.word	0xfefa39ef
 8007e40:	3fe62e42 	.word	0x3fe62e42
 8007e44:	0ca86c39 	.word	0x0ca86c39
 8007e48:	be205c61 	.word	0xbe205c61
 8007e4c:	72bea4d0 	.word	0x72bea4d0
 8007e50:	3e663769 	.word	0x3e663769
 8007e54:	c5d26bf1 	.word	0xc5d26bf1
 8007e58:	3ebbbd41 	.word	0x3ebbbd41
 8007e5c:	af25de2c 	.word	0xaf25de2c
 8007e60:	3f11566a 	.word	0x3f11566a
 8007e64:	16bebd93 	.word	0x16bebd93
 8007e68:	3f66c16c 	.word	0x3f66c16c
 8007e6c:	5555553e 	.word	0x5555553e
 8007e70:	3fc55555 	.word	0x3fc55555
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	4090cbff 	.word	0x4090cbff
 8007e7c:	3f6f3400 	.word	0x3f6f3400
 8007e80:	c2f8f359 	.word	0xc2f8f359
 8007e84:	01a56e1f 	.word	0x01a56e1f

08007e88 <__ieee754_sqrt>:
 8007e88:	4b55      	ldr	r3, [pc, #340]	; (8007fe0 <__ieee754_sqrt+0x158>)
 8007e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	0005      	movs	r5, r0
 8007e90:	000c      	movs	r4, r1
 8007e92:	400a      	ands	r2, r1
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d10f      	bne.n	8007eb8 <__ieee754_sqrt+0x30>
 8007e98:	0002      	movs	r2, r0
 8007e9a:	000b      	movs	r3, r1
 8007e9c:	f7f9 fcca 	bl	8001834 <__aeabi_dmul>
 8007ea0:	0002      	movs	r2, r0
 8007ea2:	000b      	movs	r3, r1
 8007ea4:	0028      	movs	r0, r5
 8007ea6:	0021      	movs	r1, r4
 8007ea8:	f7f8 fd9e 	bl	80009e8 <__aeabi_dadd>
 8007eac:	0005      	movs	r5, r0
 8007eae:	000c      	movs	r4, r1
 8007eb0:	0028      	movs	r0, r5
 8007eb2:	0021      	movs	r1, r4
 8007eb4:	b003      	add	sp, #12
 8007eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb8:	0002      	movs	r2, r0
 8007eba:	2900      	cmp	r1, #0
 8007ebc:	dc10      	bgt.n	8007ee0 <__ieee754_sqrt+0x58>
 8007ebe:	004b      	lsls	r3, r1, #1
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	4303      	orrs	r3, r0
 8007ec4:	d0f4      	beq.n	8007eb0 <__ieee754_sqrt+0x28>
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	4281      	cmp	r1, r0
 8007eca:	d100      	bne.n	8007ece <__ieee754_sqrt+0x46>
 8007ecc:	e07f      	b.n	8007fce <__ieee754_sqrt+0x146>
 8007ece:	000b      	movs	r3, r1
 8007ed0:	0028      	movs	r0, r5
 8007ed2:	f7f9 ff21 	bl	8001d18 <__aeabi_dsub>
 8007ed6:	0002      	movs	r2, r0
 8007ed8:	000b      	movs	r3, r1
 8007eda:	f7f9 f8a1 	bl	8001020 <__aeabi_ddiv>
 8007ede:	e7e5      	b.n	8007eac <__ieee754_sqrt+0x24>
 8007ee0:	1508      	asrs	r0, r1, #20
 8007ee2:	d074      	beq.n	8007fce <__ieee754_sqrt+0x146>
 8007ee4:	4b3f      	ldr	r3, [pc, #252]	; (8007fe4 <__ieee754_sqrt+0x15c>)
 8007ee6:	0309      	lsls	r1, r1, #12
 8007ee8:	18c0      	adds	r0, r0, r3
 8007eea:	2380      	movs	r3, #128	; 0x80
 8007eec:	0b09      	lsrs	r1, r1, #12
 8007eee:	035b      	lsls	r3, r3, #13
 8007ef0:	4319      	orrs	r1, r3
 8007ef2:	07c3      	lsls	r3, r0, #31
 8007ef4:	d503      	bpl.n	8007efe <__ieee754_sqrt+0x76>
 8007ef6:	0fd3      	lsrs	r3, r2, #31
 8007ef8:	0049      	lsls	r1, r1, #1
 8007efa:	18c9      	adds	r1, r1, r3
 8007efc:	0052      	lsls	r2, r2, #1
 8007efe:	2400      	movs	r4, #0
 8007f00:	1043      	asrs	r3, r0, #1
 8007f02:	0049      	lsls	r1, r1, #1
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2580      	movs	r5, #128	; 0x80
 8007f08:	0fd3      	lsrs	r3, r2, #31
 8007f0a:	18cb      	adds	r3, r1, r3
 8007f0c:	0020      	movs	r0, r4
 8007f0e:	2116      	movs	r1, #22
 8007f10:	0052      	lsls	r2, r2, #1
 8007f12:	03ad      	lsls	r5, r5, #14
 8007f14:	1946      	adds	r6, r0, r5
 8007f16:	429e      	cmp	r6, r3
 8007f18:	dc02      	bgt.n	8007f20 <__ieee754_sqrt+0x98>
 8007f1a:	1970      	adds	r0, r6, r5
 8007f1c:	1b9b      	subs	r3, r3, r6
 8007f1e:	1964      	adds	r4, r4, r5
 8007f20:	0fd6      	lsrs	r6, r2, #31
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	3901      	subs	r1, #1
 8007f26:	199b      	adds	r3, r3, r6
 8007f28:	0052      	lsls	r2, r2, #1
 8007f2a:	086d      	lsrs	r5, r5, #1
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	d1f1      	bne.n	8007f14 <__ieee754_sqrt+0x8c>
 8007f30:	2520      	movs	r5, #32
 8007f32:	2680      	movs	r6, #128	; 0x80
 8007f34:	46ac      	mov	ip, r5
 8007f36:	9100      	str	r1, [sp, #0]
 8007f38:	0636      	lsls	r6, r6, #24
 8007f3a:	9d00      	ldr	r5, [sp, #0]
 8007f3c:	1977      	adds	r7, r6, r5
 8007f3e:	4283      	cmp	r3, r0
 8007f40:	dc02      	bgt.n	8007f48 <__ieee754_sqrt+0xc0>
 8007f42:	d112      	bne.n	8007f6a <__ieee754_sqrt+0xe2>
 8007f44:	4297      	cmp	r7, r2
 8007f46:	d810      	bhi.n	8007f6a <__ieee754_sqrt+0xe2>
 8007f48:	19bd      	adds	r5, r7, r6
 8007f4a:	9500      	str	r5, [sp, #0]
 8007f4c:	0005      	movs	r5, r0
 8007f4e:	2f00      	cmp	r7, #0
 8007f50:	da03      	bge.n	8007f5a <__ieee754_sqrt+0xd2>
 8007f52:	9d00      	ldr	r5, [sp, #0]
 8007f54:	43ed      	mvns	r5, r5
 8007f56:	0fed      	lsrs	r5, r5, #31
 8007f58:	1945      	adds	r5, r0, r5
 8007f5a:	1a1b      	subs	r3, r3, r0
 8007f5c:	42ba      	cmp	r2, r7
 8007f5e:	4180      	sbcs	r0, r0
 8007f60:	4240      	negs	r0, r0
 8007f62:	1a1b      	subs	r3, r3, r0
 8007f64:	0028      	movs	r0, r5
 8007f66:	1bd2      	subs	r2, r2, r7
 8007f68:	1989      	adds	r1, r1, r6
 8007f6a:	0fd5      	lsrs	r5, r2, #31
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	18eb      	adds	r3, r5, r3
 8007f70:	2501      	movs	r5, #1
 8007f72:	426d      	negs	r5, r5
 8007f74:	44ac      	add	ip, r5
 8007f76:	4665      	mov	r5, ip
 8007f78:	0052      	lsls	r2, r2, #1
 8007f7a:	0876      	lsrs	r6, r6, #1
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	d1dc      	bne.n	8007f3a <__ieee754_sqrt+0xb2>
 8007f80:	4313      	orrs	r3, r2
 8007f82:	d003      	beq.n	8007f8c <__ieee754_sqrt+0x104>
 8007f84:	1c4b      	adds	r3, r1, #1
 8007f86:	d127      	bne.n	8007fd8 <__ieee754_sqrt+0x150>
 8007f88:	4661      	mov	r1, ip
 8007f8a:	3401      	adds	r4, #1
 8007f8c:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <__ieee754_sqrt+0x160>)
 8007f8e:	1060      	asrs	r0, r4, #1
 8007f90:	18c0      	adds	r0, r0, r3
 8007f92:	0849      	lsrs	r1, r1, #1
 8007f94:	07e3      	lsls	r3, r4, #31
 8007f96:	d502      	bpl.n	8007f9e <__ieee754_sqrt+0x116>
 8007f98:	2380      	movs	r3, #128	; 0x80
 8007f9a:	061b      	lsls	r3, r3, #24
 8007f9c:	4319      	orrs	r1, r3
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	000d      	movs	r5, r1
 8007fa2:	051c      	lsls	r4, r3, #20
 8007fa4:	1823      	adds	r3, r4, r0
 8007fa6:	001c      	movs	r4, r3
 8007fa8:	e782      	b.n	8007eb0 <__ieee754_sqrt+0x28>
 8007faa:	0ad1      	lsrs	r1, r2, #11
 8007fac:	3b15      	subs	r3, #21
 8007fae:	0552      	lsls	r2, r2, #21
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d0fa      	beq.n	8007faa <__ieee754_sqrt+0x122>
 8007fb4:	2480      	movs	r4, #128	; 0x80
 8007fb6:	0364      	lsls	r4, r4, #13
 8007fb8:	4221      	tst	r1, r4
 8007fba:	d00a      	beq.n	8007fd2 <__ieee754_sqrt+0x14a>
 8007fbc:	2420      	movs	r4, #32
 8007fbe:	0016      	movs	r6, r2
 8007fc0:	1a24      	subs	r4, r4, r0
 8007fc2:	40e6      	lsrs	r6, r4
 8007fc4:	1e45      	subs	r5, r0, #1
 8007fc6:	4082      	lsls	r2, r0
 8007fc8:	4331      	orrs	r1, r6
 8007fca:	1b58      	subs	r0, r3, r5
 8007fcc:	e78a      	b.n	8007ee4 <__ieee754_sqrt+0x5c>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e7ee      	b.n	8007fb0 <__ieee754_sqrt+0x128>
 8007fd2:	0049      	lsls	r1, r1, #1
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	e7ef      	b.n	8007fb8 <__ieee754_sqrt+0x130>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	3101      	adds	r1, #1
 8007fdc:	4399      	bics	r1, r3
 8007fde:	e7d5      	b.n	8007f8c <__ieee754_sqrt+0x104>
 8007fe0:	7ff00000 	.word	0x7ff00000
 8007fe4:	fffffc01 	.word	0xfffffc01
 8007fe8:	3fe00000 	.word	0x3fe00000

08007fec <fabs>:
 8007fec:	0049      	lsls	r1, r1, #1
 8007fee:	084b      	lsrs	r3, r1, #1
 8007ff0:	0019      	movs	r1, r3
 8007ff2:	4770      	bx	lr

08007ff4 <finite>:
 8007ff4:	0048      	lsls	r0, r1, #1
 8007ff6:	4b02      	ldr	r3, [pc, #8]	; (8008000 <finite+0xc>)
 8007ff8:	0840      	lsrs	r0, r0, #1
 8007ffa:	18c0      	adds	r0, r0, r3
 8007ffc:	0fc0      	lsrs	r0, r0, #31
 8007ffe:	4770      	bx	lr
 8008000:	80100000 	.word	0x80100000

08008004 <matherr>:
 8008004:	2000      	movs	r0, #0
 8008006:	4770      	bx	lr

08008008 <nan>:
 8008008:	2000      	movs	r0, #0
 800800a:	4901      	ldr	r1, [pc, #4]	; (8008010 <nan+0x8>)
 800800c:	4770      	bx	lr
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	7ff80000 	.word	0x7ff80000

08008014 <rint>:
 8008014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008016:	004a      	lsls	r2, r1, #1
 8008018:	4e3e      	ldr	r6, [pc, #248]	; (8008114 <rint+0x100>)
 800801a:	0d52      	lsrs	r2, r2, #21
 800801c:	b085      	sub	sp, #20
 800801e:	1996      	adds	r6, r2, r6
 8008020:	000d      	movs	r5, r1
 8008022:	9101      	str	r1, [sp, #4]
 8008024:	0003      	movs	r3, r0
 8008026:	0fcc      	lsrs	r4, r1, #31
 8008028:	2e13      	cmp	r6, #19
 800802a:	dc57      	bgt.n	80080dc <rint+0xc8>
 800802c:	2e00      	cmp	r6, #0
 800802e:	da2a      	bge.n	8008086 <rint+0x72>
 8008030:	004a      	lsls	r2, r1, #1
 8008032:	0852      	lsrs	r2, r2, #1
 8008034:	4302      	orrs	r2, r0
 8008036:	d024      	beq.n	8008082 <rint+0x6e>
 8008038:	030a      	lsls	r2, r1, #12
 800803a:	0b12      	lsrs	r2, r2, #12
 800803c:	4302      	orrs	r2, r0
 800803e:	4253      	negs	r3, r2
 8008040:	4313      	orrs	r3, r2
 8008042:	2280      	movs	r2, #128	; 0x80
 8008044:	0c4d      	lsrs	r5, r1, #17
 8008046:	0312      	lsls	r2, r2, #12
 8008048:	0b1b      	lsrs	r3, r3, #12
 800804a:	4013      	ands	r3, r2
 800804c:	046d      	lsls	r5, r5, #17
 800804e:	432b      	orrs	r3, r5
 8008050:	0019      	movs	r1, r3
 8008052:	4b31      	ldr	r3, [pc, #196]	; (8008118 <rint+0x104>)
 8008054:	00e2      	lsls	r2, r4, #3
 8008056:	189b      	adds	r3, r3, r2
 8008058:	681e      	ldr	r6, [r3, #0]
 800805a:	685f      	ldr	r7, [r3, #4]
 800805c:	0002      	movs	r2, r0
 800805e:	000b      	movs	r3, r1
 8008060:	0030      	movs	r0, r6
 8008062:	0039      	movs	r1, r7
 8008064:	f7f8 fcc0 	bl	80009e8 <__aeabi_dadd>
 8008068:	9002      	str	r0, [sp, #8]
 800806a:	9103      	str	r1, [sp, #12]
 800806c:	9802      	ldr	r0, [sp, #8]
 800806e:	9903      	ldr	r1, [sp, #12]
 8008070:	003b      	movs	r3, r7
 8008072:	0032      	movs	r2, r6
 8008074:	f7f9 fe50 	bl	8001d18 <__aeabi_dsub>
 8008078:	004b      	lsls	r3, r1, #1
 800807a:	085b      	lsrs	r3, r3, #1
 800807c:	07e4      	lsls	r4, r4, #31
 800807e:	4323      	orrs	r3, r4
 8008080:	0019      	movs	r1, r3
 8008082:	b005      	add	sp, #20
 8008084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008086:	4a25      	ldr	r2, [pc, #148]	; (800811c <rint+0x108>)
 8008088:	4132      	asrs	r2, r6
 800808a:	0017      	movs	r7, r2
 800808c:	400f      	ands	r7, r1
 800808e:	4307      	orrs	r7, r0
 8008090:	d0f7      	beq.n	8008082 <rint+0x6e>
 8008092:	0852      	lsrs	r2, r2, #1
 8008094:	0011      	movs	r1, r2
 8008096:	4029      	ands	r1, r5
 8008098:	430b      	orrs	r3, r1
 800809a:	d00a      	beq.n	80080b2 <rint+0x9e>
 800809c:	2300      	movs	r3, #0
 800809e:	2e13      	cmp	r6, #19
 80080a0:	d101      	bne.n	80080a6 <rint+0x92>
 80080a2:	2380      	movs	r3, #128	; 0x80
 80080a4:	061b      	lsls	r3, r3, #24
 80080a6:	2780      	movs	r7, #128	; 0x80
 80080a8:	02ff      	lsls	r7, r7, #11
 80080aa:	4137      	asrs	r7, r6
 80080ac:	4395      	bics	r5, r2
 80080ae:	432f      	orrs	r7, r5
 80080b0:	9701      	str	r7, [sp, #4]
 80080b2:	9901      	ldr	r1, [sp, #4]
 80080b4:	001a      	movs	r2, r3
 80080b6:	000b      	movs	r3, r1
 80080b8:	4917      	ldr	r1, [pc, #92]	; (8008118 <rint+0x104>)
 80080ba:	00e4      	lsls	r4, r4, #3
 80080bc:	190c      	adds	r4, r1, r4
 80080be:	6865      	ldr	r5, [r4, #4]
 80080c0:	6824      	ldr	r4, [r4, #0]
 80080c2:	0020      	movs	r0, r4
 80080c4:	0029      	movs	r1, r5
 80080c6:	f7f8 fc8f 	bl	80009e8 <__aeabi_dadd>
 80080ca:	9002      	str	r0, [sp, #8]
 80080cc:	9103      	str	r1, [sp, #12]
 80080ce:	9802      	ldr	r0, [sp, #8]
 80080d0:	9903      	ldr	r1, [sp, #12]
 80080d2:	0022      	movs	r2, r4
 80080d4:	002b      	movs	r3, r5
 80080d6:	f7f9 fe1f 	bl	8001d18 <__aeabi_dsub>
 80080da:	e7d2      	b.n	8008082 <rint+0x6e>
 80080dc:	2e33      	cmp	r6, #51	; 0x33
 80080de:	dd08      	ble.n	80080f2 <rint+0xde>
 80080e0:	2380      	movs	r3, #128	; 0x80
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	429e      	cmp	r6, r3
 80080e6:	d1cc      	bne.n	8008082 <rint+0x6e>
 80080e8:	0002      	movs	r2, r0
 80080ea:	000b      	movs	r3, r1
 80080ec:	f7f8 fc7c 	bl	80009e8 <__aeabi_dadd>
 80080f0:	e7c7      	b.n	8008082 <rint+0x6e>
 80080f2:	2601      	movs	r6, #1
 80080f4:	4d0a      	ldr	r5, [pc, #40]	; (8008120 <rint+0x10c>)
 80080f6:	4276      	negs	r6, r6
 80080f8:	1952      	adds	r2, r2, r5
 80080fa:	40d6      	lsrs	r6, r2
 80080fc:	4206      	tst	r6, r0
 80080fe:	d0c0      	beq.n	8008082 <rint+0x6e>
 8008100:	0876      	lsrs	r6, r6, #1
 8008102:	4206      	tst	r6, r0
 8008104:	d0d5      	beq.n	80080b2 <rint+0x9e>
 8008106:	2180      	movs	r1, #128	; 0x80
 8008108:	05c9      	lsls	r1, r1, #23
 800810a:	4111      	asrs	r1, r2
 800810c:	43b3      	bics	r3, r6
 800810e:	430b      	orrs	r3, r1
 8008110:	e7cf      	b.n	80080b2 <rint+0x9e>
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	fffffc01 	.word	0xfffffc01
 8008118:	08008340 	.word	0x08008340
 800811c:	000fffff 	.word	0x000fffff
 8008120:	fffffbed 	.word	0xfffffbed

08008124 <scalbn>:
 8008124:	004b      	lsls	r3, r1, #1
 8008126:	b570      	push	{r4, r5, r6, lr}
 8008128:	0d5b      	lsrs	r3, r3, #21
 800812a:	0014      	movs	r4, r2
 800812c:	000a      	movs	r2, r1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10d      	bne.n	800814e <scalbn+0x2a>
 8008132:	004b      	lsls	r3, r1, #1
 8008134:	085b      	lsrs	r3, r3, #1
 8008136:	4303      	orrs	r3, r0
 8008138:	d010      	beq.n	800815c <scalbn+0x38>
 800813a:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <scalbn+0x9c>)
 800813c:	2200      	movs	r2, #0
 800813e:	f7f9 fb79 	bl	8001834 <__aeabi_dmul>
 8008142:	4b20      	ldr	r3, [pc, #128]	; (80081c4 <scalbn+0xa0>)
 8008144:	429c      	cmp	r4, r3
 8008146:	da0a      	bge.n	800815e <scalbn+0x3a>
 8008148:	4a1f      	ldr	r2, [pc, #124]	; (80081c8 <scalbn+0xa4>)
 800814a:	4b20      	ldr	r3, [pc, #128]	; (80081cc <scalbn+0xa8>)
 800814c:	e017      	b.n	800817e <scalbn+0x5a>
 800814e:	4d20      	ldr	r5, [pc, #128]	; (80081d0 <scalbn+0xac>)
 8008150:	42ab      	cmp	r3, r5
 8008152:	d108      	bne.n	8008166 <scalbn+0x42>
 8008154:	0002      	movs	r2, r0
 8008156:	000b      	movs	r3, r1
 8008158:	f7f8 fc46 	bl	80009e8 <__aeabi_dadd>
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	000a      	movs	r2, r1
 8008160:	004b      	lsls	r3, r1, #1
 8008162:	0d5b      	lsrs	r3, r3, #21
 8008164:	3b36      	subs	r3, #54	; 0x36
 8008166:	4d1b      	ldr	r5, [pc, #108]	; (80081d4 <scalbn+0xb0>)
 8008168:	18e3      	adds	r3, r4, r3
 800816a:	42ab      	cmp	r3, r5
 800816c:	dd0a      	ble.n	8008184 <scalbn+0x60>
 800816e:	0002      	movs	r2, r0
 8008170:	000b      	movs	r3, r1
 8008172:	4819      	ldr	r0, [pc, #100]	; (80081d8 <scalbn+0xb4>)
 8008174:	4919      	ldr	r1, [pc, #100]	; (80081dc <scalbn+0xb8>)
 8008176:	f000 f839 	bl	80081ec <copysign>
 800817a:	4a17      	ldr	r2, [pc, #92]	; (80081d8 <scalbn+0xb4>)
 800817c:	4b17      	ldr	r3, [pc, #92]	; (80081dc <scalbn+0xb8>)
 800817e:	f7f9 fb59 	bl	8001834 <__aeabi_dmul>
 8008182:	e7eb      	b.n	800815c <scalbn+0x38>
 8008184:	2b00      	cmp	r3, #0
 8008186:	dd05      	ble.n	8008194 <scalbn+0x70>
 8008188:	4c15      	ldr	r4, [pc, #84]	; (80081e0 <scalbn+0xbc>)
 800818a:	051b      	lsls	r3, r3, #20
 800818c:	4022      	ands	r2, r4
 800818e:	431a      	orrs	r2, r3
 8008190:	0011      	movs	r1, r2
 8008192:	e7e3      	b.n	800815c <scalbn+0x38>
 8008194:	001d      	movs	r5, r3
 8008196:	3535      	adds	r5, #53	; 0x35
 8008198:	da09      	bge.n	80081ae <scalbn+0x8a>
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <scalbn+0xc0>)
 800819c:	0002      	movs	r2, r0
 800819e:	429c      	cmp	r4, r3
 80081a0:	dce6      	bgt.n	8008170 <scalbn+0x4c>
 80081a2:	000b      	movs	r3, r1
 80081a4:	4808      	ldr	r0, [pc, #32]	; (80081c8 <scalbn+0xa4>)
 80081a6:	4909      	ldr	r1, [pc, #36]	; (80081cc <scalbn+0xa8>)
 80081a8:	f000 f820 	bl	80081ec <copysign>
 80081ac:	e7cc      	b.n	8008148 <scalbn+0x24>
 80081ae:	4c0c      	ldr	r4, [pc, #48]	; (80081e0 <scalbn+0xbc>)
 80081b0:	3336      	adds	r3, #54	; 0x36
 80081b2:	4022      	ands	r2, r4
 80081b4:	051b      	lsls	r3, r3, #20
 80081b6:	4313      	orrs	r3, r2
 80081b8:	0019      	movs	r1, r3
 80081ba:	2200      	movs	r2, #0
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <scalbn+0xc4>)
 80081be:	e7de      	b.n	800817e <scalbn+0x5a>
 80081c0:	43500000 	.word	0x43500000
 80081c4:	ffff3cb0 	.word	0xffff3cb0
 80081c8:	c2f8f359 	.word	0xc2f8f359
 80081cc:	01a56e1f 	.word	0x01a56e1f
 80081d0:	000007ff 	.word	0x000007ff
 80081d4:	000007fe 	.word	0x000007fe
 80081d8:	8800759c 	.word	0x8800759c
 80081dc:	7e37e43c 	.word	0x7e37e43c
 80081e0:	800fffff 	.word	0x800fffff
 80081e4:	0000c350 	.word	0x0000c350
 80081e8:	3c900000 	.word	0x3c900000

080081ec <copysign>:
 80081ec:	b530      	push	{r4, r5, lr}
 80081ee:	004a      	lsls	r2, r1, #1
 80081f0:	0fdb      	lsrs	r3, r3, #31
 80081f2:	07db      	lsls	r3, r3, #31
 80081f4:	0852      	lsrs	r2, r2, #1
 80081f6:	431a      	orrs	r2, r3
 80081f8:	0011      	movs	r1, r2
 80081fa:	bd30      	pop	{r4, r5, pc}

080081fc <_init>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr

08008208 <_fini>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820e:	bc08      	pop	{r3}
 8008210:	469e      	mov	lr, r3
 8008212:	4770      	bx	lr
