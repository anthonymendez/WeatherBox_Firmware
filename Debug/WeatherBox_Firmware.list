
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022cc  080022cc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080022cc  080022cc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022cc  080022cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022cc  080022cc  000122cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080022d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000004  080022d8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080022d8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086af  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001490  00000000  00000000  000286db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  00029b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001363a  00000000  00000000  0002ad98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ebe  00000000  00000000  0003e3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007aed9  00000000  00000000  00045290  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002178  00000000  00000000  000c01e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002298 	.word	0x08002298

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002298 	.word	0x08002298

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb26 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80a 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f916 	bl	800045c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f868 	bl	8000304 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000234:	f000 f89e 	bl	8000374 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000238:	f000 f856 	bl	80002e8 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x1c>
	...

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b095      	sub	sp, #84	; 0x54
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	2418      	movs	r4, #24
 8000248:	193b      	adds	r3, r7, r4
 800024a:	0018      	movs	r0, r3
 800024c:	2338      	movs	r3, #56	; 0x38
 800024e:	001a      	movs	r2, r3
 8000250:	2100      	movs	r1, #0
 8000252:	f002 f819 	bl	8002288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	0018      	movs	r0, r3
 800025a:	2314      	movs	r3, #20
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f002 f812 	bl	8002288 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000264:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <SystemClock_Config+0xa0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a1e      	ldr	r2, [pc, #120]	; (80002e4 <SystemClock_Config+0xa4>)
 800026a:	401a      	ands	r2, r3
 800026c:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <SystemClock_Config+0xa0>)
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	0109      	lsls	r1, r1, #4
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000276:	0021      	movs	r1, r4
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2210      	movs	r2, #16
 800027c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2201      	movs	r2, #1
 8000282:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2200      	movs	r2, #0
 8000288:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	22a0      	movs	r2, #160	; 0xa0
 800028e:	0212      	lsls	r2, r2, #8
 8000290:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	187b      	adds	r3, r7, r1
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fdc6 	bl	8000e2c <HAL_RCC_OscConfig>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002a4:	f000 f996 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	220f      	movs	r2, #15
 80002ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f97e 	bl	80015cc <HAL_RCC_ClockConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002d4:	f000 f97e 	bl	80005d4 <Error_Handler>
  }
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b015      	add	sp, #84	; 0x54
 80002de:	bd90      	pop	{r4, r7, pc}
 80002e0:	40007000 	.word	0x40007000
 80002e4:	ffffe7ff 	.word	0xffffe7ff

080002e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	200f      	movs	r0, #15
 80002f2:	f000 fbbb 	bl	8000a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80002f6:	200f      	movs	r0, #15
 80002f8:	f000 fbcd 	bl	8000a96 <HAL_NVIC_EnableIRQ>
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_SPI1_Init+0x68>)
 800030a:	4a19      	ldr	r2, [pc, #100]	; (8000370 <MX_SPI1_Init+0x6c>)
 800030c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_SPI1_Init+0x68>)
 8000310:	2282      	movs	r2, #130	; 0x82
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_SPI1_Init+0x68>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_SPI1_Init+0x68>)
 800031e:	2280      	movs	r2, #128	; 0x80
 8000320:	0112      	lsls	r2, r2, #4
 8000322:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <MX_SPI1_Init+0x68>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_SPI1_Init+0x68>)
 800032c:	2200      	movs	r2, #0
 800032e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_SPI1_Init+0x68>)
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	02d2      	lsls	r2, r2, #11
 8000336:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <MX_SPI1_Init+0x68>)
 800033a:	2230      	movs	r2, #48	; 0x30
 800033c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_SPI1_Init+0x68>)
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_SPI1_Init+0x68>)
 8000346:	2200      	movs	r2, #0
 8000348:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_SPI1_Init+0x68>)
 800034c:	2200      	movs	r2, #0
 800034e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_SPI1_Init+0x68>)
 8000352:	2207      	movs	r2, #7
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <MX_SPI1_Init+0x68>)
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fae5 	bl	8001928 <HAL_SPI_Init>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000362:	f000 f937 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000020 	.word	0x20000020
 8000370:	40013000 	.word	0x40013000

08000374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08c      	sub	sp, #48	; 0x30
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	2320      	movs	r3, #32
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	0018      	movs	r0, r3
 8000380:	2310      	movs	r3, #16
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f001 ff7f 	bl	8002288 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800038a:	230c      	movs	r3, #12
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	0018      	movs	r0, r3
 8000390:	2314      	movs	r3, #20
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f001 ff77 	bl	8002288 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	0018      	movs	r0, r3
 800039e:	2308      	movs	r3, #8
 80003a0:	001a      	movs	r2, r3
 80003a2:	2100      	movs	r1, #0
 80003a4:	f001 ff70 	bl	8002288 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	05d2      	lsls	r2, r2, #23
 80003ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003b2:	4a28      	ldr	r2, [pc, #160]	; (8000454 <MX_TIM2_Init+0xe0>)
 80003b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003be:	4a26      	ldr	r2, [pc, #152]	; (8000458 <MX_TIM2_Init+0xe4>)
 80003c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c2:	4b23      	ldr	r3, [pc, #140]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ce:	4b20      	ldr	r3, [pc, #128]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fb13 	bl	80019fc <HAL_TIM_Base_Init>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003da:	f000 f8fb 	bl	80005d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003de:	2120      	movs	r1, #32
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	0152      	lsls	r2, r2, #5
 80003e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003e8:	187a      	adds	r2, r7, r1
 80003ea:	4b19      	ldr	r3, [pc, #100]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 fc3a 	bl	8001c68 <HAL_TIM_ConfigClockSource>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80003f8:	f000 f8ec 	bl	80005d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80003fc:	210c      	movs	r1, #12
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800040a:	187a      	adds	r2, r7, r1
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_TIM2_Init+0xdc>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fce7 	bl	8001de4 <HAL_TIM_SlaveConfigSynchro>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800041a:	f000 f8db 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800042a:	1d3a      	adds	r2, r7, #4
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_TIM2_Init+0xdc>)
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fec1 	bl	80021b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800043a:	f000 f8cb 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <MX_TIM2_Init+0xdc>)
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fb07 	bl	8001a54 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b00c      	add	sp, #48	; 0x30
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000078 	.word	0x20000078
 8000454:	00001b58 	.word	0x00001b58
 8000458:	00000bb8 	.word	0x00000bb8

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b08b      	sub	sp, #44	; 0x2c
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	2414      	movs	r4, #20
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2314      	movs	r3, #20
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f001 ff0b 	bl	8002288 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b53      	ldr	r3, [pc, #332]	; (80005c0 <MX_GPIO_Init+0x164>)
 8000474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000476:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <MX_GPIO_Init+0x164>)
 8000478:	2104      	movs	r1, #4
 800047a:	430a      	orrs	r2, r1
 800047c:	62da      	str	r2, [r3, #44]	; 0x2c
 800047e:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <MX_GPIO_Init+0x164>)
 8000480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000482:	2204      	movs	r2, #4
 8000484:	4013      	ands	r3, r2
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800048a:	4b4d      	ldr	r3, [pc, #308]	; (80005c0 <MX_GPIO_Init+0x164>)
 800048c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800048e:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <MX_GPIO_Init+0x164>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	430a      	orrs	r2, r1
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
 8000496:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <MX_GPIO_Init+0x164>)
 8000498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b47      	ldr	r3, [pc, #284]	; (80005c0 <MX_GPIO_Init+0x164>)
 80004a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a6:	4b46      	ldr	r3, [pc, #280]	; (80005c0 <MX_GPIO_Init+0x164>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	4b44      	ldr	r3, [pc, #272]	; (80005c0 <MX_GPIO_Init+0x164>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b41      	ldr	r3, [pc, #260]	; (80005c0 <MX_GPIO_Init+0x164>)
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004be:	4b40      	ldr	r3, [pc, #256]	; (80005c0 <MX_GPIO_Init+0x164>)
 80004c0:	2102      	movs	r1, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	4b3e      	ldr	r3, [pc, #248]	; (80005c0 <MX_GPIO_Init+0x164>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	2202      	movs	r2, #2
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fc76 	bl	8000dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SS0_Pin|SS1_Pin, GPIO_PIN_RESET);
 80004e0:	4b38      	ldr	r3, [pc, #224]	; (80005c4 <MX_GPIO_Init+0x168>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	2130      	movs	r1, #48	; 0x30
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fc70 	bl	8000dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 80004ec:	4936      	ldr	r1, [pc, #216]	; (80005c8 <MX_GPIO_Init+0x16c>)
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <MX_GPIO_Init+0x170>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fc6a 	bl	8000dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	0192      	lsls	r2, r2, #6
 80004fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	4a33      	ldr	r2, [pc, #204]	; (80005d0 <MX_GPIO_Init+0x174>)
 8000504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800050c:	193b      	adds	r3, r7, r4
 800050e:	4a2d      	ldr	r2, [pc, #180]	; (80005c4 <MX_GPIO_Init+0x168>)
 8000510:	0019      	movs	r1, r3
 8000512:	0010      	movs	r0, r2
 8000514:	f000 fadc 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2202      	movs	r2, #2
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2203      	movs	r2, #3
 800052e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2204      	movs	r2, #4
 8000534:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	193a      	adds	r2, r7, r4
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fac6 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2220      	movs	r2, #32
 8000548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2201      	movs	r2, #1
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 800055c:	193a      	adds	r2, r7, r4
 800055e:	23a0      	movs	r3, #160	; 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	0011      	movs	r1, r2
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fab3 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000584:	000c      	movs	r4, r1
 8000586:	187b      	adds	r3, r7, r1
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <MX_GPIO_Init+0x168>)
 800058a:	0019      	movs	r1, r3
 800058c:	0010      	movs	r0, r2
 800058e:	f000 fa9f 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 8000592:	0021      	movs	r1, r4
 8000594:	187b      	adds	r3, r7, r1
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <MX_GPIO_Init+0x16c>)
 8000598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2201      	movs	r2, #1
 800059e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <MX_GPIO_Init+0x170>)
 80005b0:	0019      	movs	r1, r3
 80005b2:	0010      	movs	r0, r2
 80005b4:	f000 fa8c 	bl	8000ad0 <HAL_GPIO_Init>

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b00b      	add	sp, #44	; 0x2c
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	50000800 	.word	0x50000800
 80005c8:	00002001 	.word	0x00002001
 80005cc:	50000400 	.word	0x50000400
 80005d0:	10210000 	.word	0x10210000

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_MspInit+0x24>)
 80005e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_MspInit+0x24>)
 80005ea:	2101      	movs	r1, #1
 80005ec:	430a      	orrs	r2, r1
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_MspInit+0x24>)
 80005f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_MspInit+0x24>)
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0549      	lsls	r1, r1, #21
 80005fa:	430a      	orrs	r2, r1
 80005fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	2314      	movs	r3, #20
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	0018      	movs	r0, r3
 8000616:	2314      	movs	r3, #20
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f001 fe34 	bl	8002288 <memset>
  if(hspi->Instance==SPI1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a29      	ldr	r2, [pc, #164]	; (80006cc <HAL_SPI_MspInit+0xc4>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d14b      	bne.n	80006c2 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800062a:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 800062c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0149      	lsls	r1, r1, #5
 8000634:	430a      	orrs	r2, r1
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 800063a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 800063e:	2101      	movs	r1, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 8000646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000648:	2201      	movs	r2, #1
 800064a:	4013      	ands	r3, r2
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 8000652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 8000656:	2102      	movs	r1, #2
 8000658:	430a      	orrs	r2, r1
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_SPI_MspInit+0xc8>)
 800065e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000660:	2202      	movs	r2, #2
 8000662:	4013      	ands	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000668:	2414      	movs	r4, #20
 800066a:	193b      	adds	r3, r7, r4
 800066c:	22d0      	movs	r2, #208	; 0xd0
 800066e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2202      	movs	r2, #2
 8000674:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2203      	movs	r2, #3
 8000680:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	193a      	adds	r2, r7, r4
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fa1d 	bl	8000ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2208      	movs	r2, #8
 800069c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2202      	movs	r2, #2
 80006a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2203      	movs	r2, #3
 80006ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <HAL_SPI_MspInit+0xcc>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f000 fa07 	bl	8000ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b00b      	add	sp, #44	; 0x2c
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40013000 	.word	0x40013000
 80006d0:	40021000 	.word	0x40021000
 80006d4:	50000400 	.word	0x50000400

080006d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d105      	bne.n	80006f8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <HAL_TIM_Base_MspInit+0x28>)
 80006ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_TIM_Base_MspInit+0x28>)
 80006f2:	2101      	movs	r1, #1
 80006f4:	430a      	orrs	r2, r1
 80006f6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <TIM2_IRQHandler+0x64>)
 800073c:	0018      	movs	r0, r3
 800073e:	f001 f9ab 	bl	8001a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  int delay = 500;
 8000742:	23fa      	movs	r3, #250	; 0xfa
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
  /* Toggle LED to signify interrupt */
  HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2120      	movs	r1, #32
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fb59 	bl	8000e06 <HAL_GPIO_TogglePin>

  /* Toggle SS0 Pin Low to select sensor */
  HAL_GPIO_TogglePin(SS0_GPIO_Port, SS0_Pin);
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <TIM2_IRQHandler+0x68>)
 8000756:	2110      	movs	r1, #16
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fb54 	bl	8000e06 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(SS0_GPIO_Port, SS0_Pin);
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <TIM2_IRQHandler+0x68>)
 8000760:	2110      	movs	r1, #16
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fb4f 	bl	8000e06 <HAL_GPIO_TogglePin>
  /* Toggle SS0 High to un-select sensor */

  HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <TIM2_IRQHandler+0x68>)
 800076a:	2120      	movs	r1, #32
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fb4a 	bl	8000e06 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <TIM2_IRQHandler+0x68>)
 8000774:	2120      	movs	r1, #32
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fb45 	bl	8000e06 <HAL_GPIO_TogglePin>

  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <TIM2_IRQHandler+0x6c>)
 800077e:	2101      	movs	r1, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fb40 	bl	8000e06 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <TIM2_IRQHandler+0x6c>)
 8000788:	2101      	movs	r1, #1
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fb3b 	bl	8000e06 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b002      	add	sp, #8
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000078 	.word	0x20000078
 800079c:	50000800 	.word	0x50000800
 80007a0:	50000400 	.word	0x50000400

080007a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <SystemInit+0x64>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <SystemInit+0x64>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0049      	lsls	r1, r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <SystemInit+0x64>)
 80007b8:	68da      	ldr	r2, [r3, #12]
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <SystemInit+0x64>)
 80007bc:	4913      	ldr	r1, [pc, #76]	; (800080c <SystemInit+0x68>)
 80007be:	400a      	ands	r2, r1
 80007c0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <SystemInit+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <SystemInit+0x64>)
 80007c8:	4911      	ldr	r1, [pc, #68]	; (8000810 <SystemInit+0x6c>)
 80007ca:	400a      	ands	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <SystemInit+0x64>)
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <SystemInit+0x64>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	438a      	bics	r2, r1
 80007d8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <SystemInit+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <SystemInit+0x64>)
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <SystemInit+0x70>)
 80007e2:	400a      	ands	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <SystemInit+0x64>)
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <SystemInit+0x64>)
 80007ec:	490a      	ldr	r1, [pc, #40]	; (8000818 <SystemInit+0x74>)
 80007ee:	400a      	ands	r2, r1
 80007f0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SystemInit+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <SystemInit+0x78>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	0512      	lsls	r2, r2, #20
 80007fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000
 800080c:	88ff400c 	.word	0x88ff400c
 8000810:	fef6fff6 	.word	0xfef6fff6
 8000814:	fffbffff 	.word	0xfffbffff
 8000818:	ff02ffff 	.word	0xff02ffff
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000822:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000826:	e003      	b.n	8000830 <LoopCopyDataInit>

08000828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800082a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800082c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800082e:	3104      	adds	r1, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000838:	d3f6      	bcc.n	8000828 <CopyDataInit>
  ldr  r2, =_sbss
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <LoopForever+0x12>)
  b  LoopFillZerobss
 800083c:	e002      	b.n	8000844 <LoopFillZerobss>

0800083e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800083e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000840:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000842:	3204      	adds	r2, #4

08000844 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <LoopForever+0x16>)
  cmp  r2, r3
 8000846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000848:	d3f9      	bcc.n	800083e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800084a:	f7ff ffab 	bl	80007a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f001 fcf7 	bl	8002240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000852:	f7ff fce5 	bl	8000220 <main>

08000856 <LoopForever>:

LoopForever:
    b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
   ldr   r0, =_estack
 8000858:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800085c:	080022d4 	.word	0x080022d4
  ldr  r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000864:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000868:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800086c:	200000b8 	.word	0x200000b8

08000870 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_COMP_IRQHandler>
	...

08000874 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_Init+0x3c>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_Init+0x3c>)
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	430a      	orrs	r2, r1
 800088a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800088c:	2000      	movs	r0, #0
 800088e:	f000 f811 	bl	80008b4 <HAL_InitTick>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d003      	beq.n	800089e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e001      	b.n	80008a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800089e:	f7ff fe9f 	bl	80005e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008bc:	230f      	movs	r3, #15
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_InitTick+0x50>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	23fa      	movs	r3, #250	; 0xfa
 80008ca:	0099      	lsls	r1, r3, #2
 80008cc:	0010      	movs	r0, r2
 80008ce:	f7ff fc1b 	bl	8000108 <__udivsi3>
 80008d2:	0003      	movs	r3, r0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 f8ee 	bl	8000ab6 <HAL_SYSTICK_Config>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d004      	beq.n	80008e8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80008de:	230f      	movs	r3, #15
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e006      	b.n	80008f6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	2301      	movs	r3, #1
 80008ec:	425b      	negs	r3, r3
 80008ee:	2200      	movs	r2, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 f8bb 	bl	8000a6c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80008f6:	230f      	movs	r3, #15
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b004      	add	sp, #16
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	200000b4 	.word	0x200000b4

0800091c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	001a      	movs	r2, r3
 800092e:	231f      	movs	r3, #31
 8000930:	401a      	ands	r2, r3
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <NVIC_EnableIRQ+0x28>)
 8000934:	2101      	movs	r1, #1
 8000936:	4091      	lsls	r1, r2
 8000938:	000a      	movs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}
 8000944:	e000e100 	.word	0xe000e100

08000948 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b7f      	cmp	r3, #127	; 0x7f
 800095c:	d932      	bls.n	80009c4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <NVIC_SetPriority+0xd4>)
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	0019      	movs	r1, r3
 8000966:	230f      	movs	r3, #15
 8000968:	400b      	ands	r3, r1
 800096a:	3b08      	subs	r3, #8
 800096c:	089b      	lsrs	r3, r3, #2
 800096e:	3306      	adds	r3, #6
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	18d3      	adds	r3, r2, r3
 8000974:	3304      	adds	r3, #4
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1dfa      	adds	r2, r7, #7
 800097a:	7812      	ldrb	r2, [r2, #0]
 800097c:	0011      	movs	r1, r2
 800097e:	2203      	movs	r2, #3
 8000980:	400a      	ands	r2, r1
 8000982:	00d2      	lsls	r2, r2, #3
 8000984:	21ff      	movs	r1, #255	; 0xff
 8000986:	4091      	lsls	r1, r2
 8000988:	000a      	movs	r2, r1
 800098a:	43d2      	mvns	r2, r2
 800098c:	401a      	ands	r2, r3
 800098e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	019b      	lsls	r3, r3, #6
 8000994:	22ff      	movs	r2, #255	; 0xff
 8000996:	401a      	ands	r2, r3
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0018      	movs	r0, r3
 800099e:	2303      	movs	r3, #3
 80009a0:	4003      	ands	r3, r0
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a6:	481d      	ldr	r0, [pc, #116]	; (8000a1c <NVIC_SetPriority+0xd4>)
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001c      	movs	r4, r3
 80009ae:	230f      	movs	r3, #15
 80009b0:	4023      	ands	r3, r4
 80009b2:	3b08      	subs	r3, #8
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	3306      	adds	r3, #6
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	18c3      	adds	r3, r0, r3
 80009be:	3304      	adds	r3, #4
 80009c0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009c2:	e027      	b.n	8000a14 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <NVIC_SetPriority+0xd8>)
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	33c0      	adds	r3, #192	; 0xc0
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	589b      	ldr	r3, [r3, r2]
 80009d4:	1dfa      	adds	r2, r7, #7
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	0011      	movs	r1, r2
 80009da:	2203      	movs	r2, #3
 80009dc:	400a      	ands	r2, r1
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	21ff      	movs	r1, #255	; 0xff
 80009e2:	4091      	lsls	r1, r2
 80009e4:	000a      	movs	r2, r1
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	401a      	ands	r2, r3
 80009ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	019b      	lsls	r3, r3, #6
 80009f0:	22ff      	movs	r2, #255	; 0xff
 80009f2:	401a      	ands	r2, r3
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0018      	movs	r0, r3
 80009fa:	2303      	movs	r3, #3
 80009fc:	4003      	ands	r3, r0
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <NVIC_SetPriority+0xd8>)
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	33c0      	adds	r3, #192	; 0xc0
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	501a      	str	r2, [r3, r0]
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b003      	add	sp, #12
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	e000ed00 	.word	0xe000ed00
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <SysTick_Config+0x40>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d901      	bls.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e010      	b.n	8000a5c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <SysTick_Config+0x44>)
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	3a01      	subs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	2301      	movs	r3, #1
 8000a44:	425b      	negs	r3, r3
 8000a46:	2103      	movs	r1, #3
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff7d 	bl	8000948 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SysTick_Config+0x44>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SysTick_Config+0x44>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	00ffffff 	.word	0x00ffffff
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	210f      	movs	r1, #15
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	1c02      	adds	r2, r0, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff ff5d 	bl	8000948 <NVIC_SetPriority>
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff37 	bl	800091c <NVIC_EnableIRQ>
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff ffaf 	bl	8000a24 <SysTick_Config>
 8000ac6:	0003      	movs	r3, r0
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ae6:	e155      	b.n	8000d94 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2101      	movs	r1, #1
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	4091      	lsls	r1, r2
 8000af2:	000a      	movs	r2, r1
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d100      	bne.n	8000b00 <HAL_GPIO_Init+0x30>
 8000afe:	e146      	b.n	8000d8e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x40>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b12      	cmp	r3, #18
 8000b0e:	d123      	bne.n	8000b58 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	08da      	lsrs	r2, r3, #3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3208      	adds	r2, #8
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	58d3      	ldr	r3, [r2, r3]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2207      	movs	r2, #7
 8000b22:	4013      	ands	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	220f      	movs	r2, #15
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	691a      	ldr	r2, [r3, #16]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	2107      	movs	r1, #7
 8000b3c:	400b      	ands	r3, r1
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	08da      	lsrs	r2, r3, #3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3208      	adds	r2, #8
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d00b      	beq.n	8000b78 <HAL_GPIO_Init+0xa8>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d007      	beq.n	8000b78 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6c:	2b11      	cmp	r3, #17
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d130      	bne.n	8000bda <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	409a      	lsls	r2, r3
 8000b86:	0013      	movs	r3, r2
 8000b88:	43da      	mvns	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	055b      	lsls	r3, r3, #21
 8000c46:	4013      	ands	r3, r2
 8000c48:	d100      	bne.n	8000c4c <HAL_GPIO_Init+0x17c>
 8000c4a:	e0a0      	b.n	8000d8e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4c:	4b57      	ldr	r3, [pc, #348]	; (8000dac <HAL_GPIO_Init+0x2dc>)
 8000c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c50:	4b56      	ldr	r3, [pc, #344]	; (8000dac <HAL_GPIO_Init+0x2dc>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	430a      	orrs	r2, r1
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c58:	4a55      	ldr	r2, [pc, #340]	; (8000db0 <HAL_GPIO_Init+0x2e0>)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	589b      	ldr	r3, [r3, r2]
 8000c64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	409a      	lsls	r2, r3
 8000c72:	0013      	movs	r3, r2
 8000c74:	43da      	mvns	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	23a0      	movs	r3, #160	; 0xa0
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d01f      	beq.n	8000cc6 <HAL_GPIO_Init+0x1f6>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4a      	ldr	r2, [pc, #296]	; (8000db4 <HAL_GPIO_Init+0x2e4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d019      	beq.n	8000cc2 <HAL_GPIO_Init+0x1f2>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a49      	ldr	r2, [pc, #292]	; (8000db8 <HAL_GPIO_Init+0x2e8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d013      	beq.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a48      	ldr	r2, [pc, #288]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d00d      	beq.n	8000cba <HAL_GPIO_Init+0x1ea>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a47      	ldr	r2, [pc, #284]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_GPIO_Init+0x1e6>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a46      	ldr	r2, [pc, #280]	; (8000dc4 <HAL_GPIO_Init+0x2f4>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_GPIO_Init+0x1e2>
 8000cae:	2305      	movs	r3, #5
 8000cb0:	e00a      	b.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	e008      	b.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e004      	b.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	2103      	movs	r1, #3
 8000ccc:	400a      	ands	r2, r1
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cd8:	4935      	ldr	r1, [pc, #212]	; (8000db0 <HAL_GPIO_Init+0x2e0>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	035b      	lsls	r3, r3, #13
 8000d52:	4013      	ands	r3, r2
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	039b      	lsls	r3, r3, #14
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	40da      	lsrs	r2, r3
 8000d9c:	1e13      	subs	r3, r2, #0
 8000d9e:	d000      	beq.n	8000da2 <HAL_GPIO_Init+0x2d2>
 8000da0:	e6a2      	b.n	8000ae8 <HAL_GPIO_Init+0x18>
  }
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b006      	add	sp, #24
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	50000400 	.word	0x50000400
 8000db8:	50000800 	.word	0x50000800
 8000dbc:	50000c00 	.word	0x50000c00
 8000dc0:	50001000 	.word	0x50001000
 8000dc4:	50001c00 	.word	0x50001c00
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	1cbb      	adds	r3, r7, #2
 8000dda:	1c02      	adds	r2, r0, #0
 8000ddc:	801a      	strh	r2, [r3, #0]
 8000dde:	1c7b      	adds	r3, r7, #1
 8000de0:	1c0a      	adds	r2, r1, #0
 8000de2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000de4:	1c7b      	adds	r3, r7, #1
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dec:	1cbb      	adds	r3, r7, #2
 8000dee:	881a      	ldrh	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000df4:	e003      	b.n	8000dfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000df6:	1cbb      	adds	r3, r7, #2
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	000a      	movs	r2, r1
 8000e10:	1cbb      	adds	r3, r7, #2
 8000e12:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	1cbb      	adds	r3, r7, #2
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	405a      	eors	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	615a      	str	r2, [r3, #20]
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f000 fbbc 	bl	80015b8 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e40:	4bc8      	ldr	r3, [pc, #800]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	220c      	movs	r2, #12
 8000e46:	4013      	ands	r3, r2
 8000e48:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e4a:	4bc6      	ldr	r3, [pc, #792]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d100      	bne.n	8000e62 <HAL_RCC_OscConfig+0x36>
 8000e60:	e07e      	b.n	8000f60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d007      	beq.n	8000e78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2b0c      	cmp	r3, #12
 8000e6c:	d112      	bne.n	8000e94 <HAL_RCC_OscConfig+0x68>
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	025b      	lsls	r3, r3, #9
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d10d      	bne.n	8000e94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	4bba      	ldr	r3, [pc, #744]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	4013      	ands	r3, r2
 8000e82:	d100      	bne.n	8000e86 <HAL_RCC_OscConfig+0x5a>
 8000e84:	e06b      	b.n	8000f5e <HAL_RCC_OscConfig+0x132>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d167      	bne.n	8000f5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f000 fb92 	bl	80015b8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	025b      	lsls	r3, r3, #9
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d107      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x84>
 8000ea0:	4bb0      	ldr	r3, [pc, #704]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4baf      	ldr	r3, [pc, #700]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	0249      	lsls	r1, r1, #9
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e027      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	23a0      	movs	r3, #160	; 0xa0
 8000eb6:	02db      	lsls	r3, r3, #11
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d10e      	bne.n	8000eda <HAL_RCC_OscConfig+0xae>
 8000ebc:	4ba9      	ldr	r3, [pc, #676]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4ba8      	ldr	r3, [pc, #672]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	02c9      	lsls	r1, r1, #11
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	4ba6      	ldr	r3, [pc, #664]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4ba5      	ldr	r3, [pc, #660]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	0249      	lsls	r1, r1, #9
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e012      	b.n	8000f00 <HAL_RCC_OscConfig+0xd4>
 8000eda:	4ba2      	ldr	r3, [pc, #648]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4ba1      	ldr	r3, [pc, #644]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ee0:	49a1      	ldr	r1, [pc, #644]	; (8001168 <HAL_RCC_OscConfig+0x33c>)
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4b9f      	ldr	r3, [pc, #636]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4b9b      	ldr	r3, [pc, #620]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b9a      	ldr	r3, [pc, #616]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000efa:	499c      	ldr	r1, [pc, #624]	; (800116c <HAL_RCC_OscConfig+0x340>)
 8000efc:	400a      	ands	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d015      	beq.n	8000f34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fcfe 	bl	8000908 <HAL_GetTick>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f10:	e009      	b.n	8000f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f12:	f7ff fcf9 	bl	8000908 <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b64      	cmp	r3, #100	; 0x64
 8000f1e:	d902      	bls.n	8000f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	f000 fb49 	bl	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f26:	4b8f      	ldr	r3, [pc, #572]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d0ef      	beq.n	8000f12 <HAL_RCC_OscConfig+0xe6>
 8000f32:	e015      	b.n	8000f60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fce8 	bl	8000908 <HAL_GetTick>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fce3 	bl	8000908 <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b64      	cmp	r3, #100	; 0x64
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e333      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f50:	4b84      	ldr	r3, [pc, #528]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	029b      	lsls	r3, r3, #10
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x112>
 8000f5c:	e000      	b.n	8000f60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2202      	movs	r2, #2
 8000f66:	4013      	ands	r3, r2
 8000f68:	d100      	bne.n	8000f6c <HAL_RCC_OscConfig+0x140>
 8000f6a:	e098      	b.n	800109e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	2220      	movs	r2, #32
 8000f76:	4013      	ands	r3, r2
 8000f78:	d009      	beq.n	8000f8e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000f7a:	4b7a      	ldr	r3, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b79      	ldr	r3, [pc, #484]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000f80:	2120      	movs	r1, #32
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	2220      	movs	r2, #32
 8000f8a:	4393      	bics	r3, r2
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0c      	cmp	r3, #12
 8000f98:	d13d      	bne.n	8001016 <HAL_RCC_OscConfig+0x1ea>
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d13a      	bne.n	8001016 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000fa0:	4b70      	ldr	r3, [pc, #448]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d004      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x188>
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e301      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4a6d      	ldr	r2, [pc, #436]	; (8001170 <HAL_RCC_OscConfig+0x344>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	021a      	lsls	r2, r3, #8
 8000fc4:	4b67      	ldr	r3, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fca:	4b66      	ldr	r3, [pc, #408]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2209      	movs	r2, #9
 8000fd0:	4393      	bics	r3, r2
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	4b63      	ldr	r3, [pc, #396]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fdc:	f000 fc20 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 8000fe0:	0001      	movs	r1, r0
 8000fe2:	4b60      	ldr	r3, [pc, #384]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	220f      	movs	r2, #15
 8000fea:	4013      	ands	r3, r2
 8000fec:	4a61      	ldr	r2, [pc, #388]	; (8001174 <HAL_RCC_OscConfig+0x348>)
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	40da      	lsrs	r2, r3
 8000ff4:	4b60      	ldr	r3, [pc, #384]	; (8001178 <HAL_RCC_OscConfig+0x34c>)
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000ff8:	2513      	movs	r5, #19
 8000ffa:	197c      	adds	r4, r7, r5
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fc59 	bl	80008b4 <HAL_InitTick>
 8001002:	0003      	movs	r3, r0
 8001004:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001006:	197b      	adds	r3, r7, r5
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d047      	beq.n	800109e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800100e:	2313      	movs	r3, #19
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	e2d0      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	2b00      	cmp	r3, #0
 800101a:	d027      	beq.n	800106c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800101c:	4b51      	ldr	r3, [pc, #324]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2209      	movs	r2, #9
 8001022:	4393      	bics	r3, r2
 8001024:	0019      	movs	r1, r3
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8001028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102a:	430a      	orrs	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fc6b 	bl	8000908 <HAL_GetTick>
 8001032:	0003      	movs	r3, r0
 8001034:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff fc66 	bl	8000908 <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e2b6      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2204      	movs	r2, #4
 8001050:	4013      	ands	r3, r2
 8001052:	d0f1      	beq.n	8001038 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_RCC_OscConfig+0x344>)
 800105a:	4013      	ands	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	021a      	lsls	r2, r3, #8
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	e018      	b.n	800109e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106c:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8001072:	2101      	movs	r1, #1
 8001074:	438a      	bics	r2, r1
 8001076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc46 	bl	8000908 <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fc41 	bl	8000908 <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e291      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	4013      	ands	r3, r2
 800109c:	d1f1      	bne.n	8001082 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2210      	movs	r2, #16
 80010a4:	4013      	ands	r3, r2
 80010a6:	d100      	bne.n	80010aa <HAL_RCC_OscConfig+0x27e>
 80010a8:	e09f      	b.n	80011ea <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d13f      	bne.n	8001130 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_OscConfig+0x29c>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e277      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a2b      	ldr	r2, [pc, #172]	; (800117c <HAL_RCC_OscConfig+0x350>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	0019      	movs	r1, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 80010d8:	430a      	orrs	r2, r1
 80010da:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	0a19      	lsrs	r1, r3, #8
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	061a      	lsls	r2, r3, #24
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	0b5b      	lsrs	r3, r3, #13
 80010f6:	3301      	adds	r3, #1
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0212      	lsls	r2, r2, #8
 80010fc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	210f      	movs	r1, #15
 8001106:	400b      	ands	r3, r1
 8001108:	491a      	ldr	r1, [pc, #104]	; (8001174 <HAL_RCC_OscConfig+0x348>)
 800110a:	5ccb      	ldrb	r3, [r1, r3]
 800110c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_RCC_OscConfig+0x34c>)
 8001110:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001112:	2513      	movs	r5, #19
 8001114:	197c      	adds	r4, r7, r5
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fbcc 	bl	80008b4 <HAL_InitTick>
 800111c:	0003      	movs	r3, r0
 800111e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001120:	197b      	adds	r3, r7, r5
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d060      	beq.n	80011ea <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001128:	2313      	movs	r3, #19
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	e243      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d03e      	beq.n	80011b6 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_RCC_OscConfig+0x338>)
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	0049      	lsls	r1, r1, #1
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fbdf 	bl	8000908 <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800114e:	e017      	b.n	8001180 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001150:	f7ff fbda 	bl	8000908 <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d910      	bls.n	8001180 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e22a      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40021000 	.word	0x40021000
 8001168:	fffeffff 	.word	0xfffeffff
 800116c:	fffbffff 	.word	0xfffbffff
 8001170:	ffffe0ff 	.word	0xffffe0ff
 8001174:	080022b0 	.word	0x080022b0
 8001178:	20000000 	.word	0x20000000
 800117c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001180:	4bc6      	ldr	r3, [pc, #792]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d0e1      	beq.n	8001150 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118c:	4bc3      	ldr	r3, [pc, #780]	; (800149c <HAL_RCC_OscConfig+0x670>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4ac3      	ldr	r2, [pc, #780]	; (80014a0 <HAL_RCC_OscConfig+0x674>)
 8001192:	4013      	ands	r3, r2
 8001194:	0019      	movs	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800119a:	4bc0      	ldr	r3, [pc, #768]	; (800149c <HAL_RCC_OscConfig+0x670>)
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a0:	4bbe      	ldr	r3, [pc, #760]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	0a19      	lsrs	r1, r3, #8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	061a      	lsls	r2, r3, #24
 80011ae:	4bbb      	ldr	r3, [pc, #748]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	e019      	b.n	80011ea <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011b6:	4bb9      	ldr	r3, [pc, #740]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4bb8      	ldr	r3, [pc, #736]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80011bc:	49b9      	ldr	r1, [pc, #740]	; (80014a4 <HAL_RCC_OscConfig+0x678>)
 80011be:	400a      	ands	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fba1 	bl	8000908 <HAL_GetTick>
 80011c6:	0003      	movs	r3, r0
 80011c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011cc:	f7ff fb9c 	bl	8000908 <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e1ec      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011de:	4baf      	ldr	r3, [pc, #700]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2208      	movs	r2, #8
 80011f0:	4013      	ands	r3, r2
 80011f2:	d036      	beq.n	8001262 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d019      	beq.n	8001230 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fc:	4ba7      	ldr	r3, [pc, #668]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80011fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001200:	4ba6      	ldr	r3, [pc, #664]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001202:	2101      	movs	r1, #1
 8001204:	430a      	orrs	r2, r1
 8001206:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001208:	f7ff fb7e 	bl	8000908 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001212:	f7ff fb79 	bl	8000908 <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e1c9      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001224:	4b9d      	ldr	r3, [pc, #628]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001228:	2202      	movs	r2, #2
 800122a:	4013      	ands	r3, r2
 800122c:	d0f1      	beq.n	8001212 <HAL_RCC_OscConfig+0x3e6>
 800122e:	e018      	b.n	8001262 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001230:	4b9a      	ldr	r3, [pc, #616]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001234:	4b99      	ldr	r3, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fb64 	bl	8000908 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff fb5f 	bl	8000908 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e1af      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001258:	4b90      	ldr	r3, [pc, #576]	; (800149c <HAL_RCC_OscConfig+0x670>)
 800125a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d1f1      	bne.n	8001246 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2204      	movs	r2, #4
 8001268:	4013      	ands	r3, r2
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x442>
 800126c:	e0af      	b.n	80013ce <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2323      	movs	r3, #35	; 0x23
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b89      	ldr	r3, [pc, #548]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	055b      	lsls	r3, r3, #21
 800127e:	4013      	ands	r3, r2
 8001280:	d10a      	bne.n	8001298 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b86      	ldr	r3, [pc, #536]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001286:	4b85      	ldr	r3, [pc, #532]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	0549      	lsls	r1, r1, #21
 800128c:	430a      	orrs	r2, r1
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001290:	2323      	movs	r3, #35	; 0x23
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	4b83      	ldr	r3, [pc, #524]	; (80014a8 <HAL_RCC_OscConfig+0x67c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4013      	ands	r3, r2
 80012a2:	d11a      	bne.n	80012da <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a4:	4b80      	ldr	r3, [pc, #512]	; (80014a8 <HAL_RCC_OscConfig+0x67c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b7f      	ldr	r3, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x67c>)
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0049      	lsls	r1, r1, #1
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb29 	bl	8000908 <HAL_GetTick>
 80012b6:	0003      	movs	r3, r0
 80012b8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012bc:	f7ff fb24 	bl	8000908 <HAL_GetTick>
 80012c0:	0002      	movs	r2, r0
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e174      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <HAL_RCC_OscConfig+0x67c>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_OscConfig+0x4ca>
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80012e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ea:	4b6c      	ldr	r3, [pc, #432]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0049      	lsls	r1, r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	651a      	str	r2, [r3, #80]	; 0x50
 80012f4:	e031      	b.n	800135a <HAL_RCC_OscConfig+0x52e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x4ec>
 80012fe:	4b67      	ldr	r3, [pc, #412]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001302:	4b66      	ldr	r3, [pc, #408]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001304:	4967      	ldr	r1, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x678>)
 8001306:	400a      	ands	r2, r1
 8001308:	651a      	str	r2, [r3, #80]	; 0x50
 800130a:	4b64      	ldr	r3, [pc, #400]	; (800149c <HAL_RCC_OscConfig+0x670>)
 800130c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001310:	4966      	ldr	r1, [pc, #408]	; (80014ac <HAL_RCC_OscConfig+0x680>)
 8001312:	400a      	ands	r2, r1
 8001314:	651a      	str	r2, [r3, #80]	; 0x50
 8001316:	e020      	b.n	800135a <HAL_RCC_OscConfig+0x52e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	23a0      	movs	r3, #160	; 0xa0
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	429a      	cmp	r2, r3
 8001322:	d10e      	bne.n	8001342 <HAL_RCC_OscConfig+0x516>
 8001324:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001328:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x670>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	00c9      	lsls	r1, r1, #3
 800132e:	430a      	orrs	r2, r1
 8001330:	651a      	str	r2, [r3, #80]	; 0x50
 8001332:	4b5a      	ldr	r3, [pc, #360]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001336:	4b59      	ldr	r3, [pc, #356]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0049      	lsls	r1, r1, #1
 800133c:	430a      	orrs	r2, r1
 800133e:	651a      	str	r2, [r3, #80]	; 0x50
 8001340:	e00b      	b.n	800135a <HAL_RCC_OscConfig+0x52e>
 8001342:	4b56      	ldr	r3, [pc, #344]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001346:	4b55      	ldr	r3, [pc, #340]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001348:	4956      	ldr	r1, [pc, #344]	; (80014a4 <HAL_RCC_OscConfig+0x678>)
 800134a:	400a      	ands	r2, r1
 800134c:	651a      	str	r2, [r3, #80]	; 0x50
 800134e:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001354:	4955      	ldr	r1, [pc, #340]	; (80014ac <HAL_RCC_OscConfig+0x680>)
 8001356:	400a      	ands	r2, r1
 8001358:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d015      	beq.n	800138e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7ff fad1 	bl	8000908 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800136a:	e009      	b.n	8001380 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff facc 	bl	8000908 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_RCC_OscConfig+0x684>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e11b      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d0ef      	beq.n	800136c <HAL_RCC_OscConfig+0x540>
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fabb 	bl	8000908 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001396:	e009      	b.n	80013ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fab6 	bl	8000908 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a43      	ldr	r2, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x684>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e105      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80013ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	d1ef      	bne.n	8001398 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013b8:	2323      	movs	r3, #35	; 0x23
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80013c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80013c8:	493a      	ldr	r1, [pc, #232]	; (80014b4 <HAL_RCC_OscConfig+0x688>)
 80013ca:	400a      	ands	r2, r1
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2220      	movs	r2, #32
 80013d4:	4013      	ands	r3, r2
 80013d6:	d049      	beq.n	800146c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d026      	beq.n	800142e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80013ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x670>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_RCC_OscConfig+0x68c>)
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_RCC_OscConfig+0x68c>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0189      	lsls	r1, r1, #6
 8001402:	430a      	orrs	r2, r1
 8001404:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fa7f 	bl	8000908 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001410:	f7ff fa7a 	bl	8000908 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e0ca      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2202      	movs	r2, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d0f1      	beq.n	8001410 <HAL_RCC_OscConfig+0x5e4>
 800142c:	e01e      	b.n	800146c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001434:	2101      	movs	r1, #1
 8001436:	438a      	bics	r2, r1
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <HAL_RCC_OscConfig+0x68c>)
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_RCC_OscConfig+0x68c>)
 8001440:	491e      	ldr	r1, [pc, #120]	; (80014bc <HAL_RCC_OscConfig+0x690>)
 8001442:	400a      	ands	r2, r1
 8001444:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fa5f 	bl	8000908 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001450:	f7ff fa5a 	bl	8000908 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0aa      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d1f1      	bne.n	8001450 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	2b00      	cmp	r3, #0
 8001472:	d100      	bne.n	8001476 <HAL_RCC_OscConfig+0x64a>
 8001474:	e09f      	b.n	80015b6 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x652>
 800147c:	e078      	b.n	8001570 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	2b02      	cmp	r3, #2
 8001484:	d159      	bne.n	800153a <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_OscConfig+0x670>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_OscConfig+0x670>)
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <HAL_RCC_OscConfig+0x694>)
 800148e:	400a      	ands	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fa39 	bl	8000908 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800149a:	e01c      	b.n	80014d6 <HAL_RCC_OscConfig+0x6aa>
 800149c:	40021000 	.word	0x40021000
 80014a0:	ffff1fff 	.word	0xffff1fff
 80014a4:	fffffeff 	.word	0xfffffeff
 80014a8:	40007000 	.word	0x40007000
 80014ac:	fffffbff 	.word	0xfffffbff
 80014b0:	00001388 	.word	0x00001388
 80014b4:	efffffff 	.word	0xefffffff
 80014b8:	40010000 	.word	0x40010000
 80014bc:	ffffdfff 	.word	0xffffdfff
 80014c0:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fa20 	bl	8000908 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e070      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	049b      	lsls	r3, r3, #18
 80014de:	4013      	ands	r3, r2
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <HAL_RCC_OscConfig+0x798>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	0019      	movs	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fa:	431a      	orrs	r2, r3
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001502:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0449      	lsls	r1, r1, #17
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff f9fa 	bl	8000908 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff f9f5 	bl	8000908 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e045      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	049b      	lsls	r3, r3, #18
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x6ee>
 8001538:	e03d      	b.n	80015b6 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 8001540:	4921      	ldr	r1, [pc, #132]	; (80015c8 <HAL_RCC_OscConfig+0x79c>)
 8001542:	400a      	ands	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff f9df 	bl	8000908 <HAL_GetTick>
 800154a:	0003      	movs	r3, r0
 800154c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff f9da 	bl	8000908 <HAL_GetTick>
 8001554:	0002      	movs	r2, r0
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e02a      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	049b      	lsls	r3, r3, #18
 800156a:	4013      	ands	r3, r2
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x724>
 800156e:	e022      	b.n	80015b6 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_RCC_OscConfig+0x794>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	401a      	ands	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	429a      	cmp	r2, r3
 8001590:	d10f      	bne.n	80015b2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	23f0      	movs	r3, #240	; 0xf0
 8001596:	039b      	lsls	r3, r3, #14
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	23c0      	movs	r3, #192	; 0xc0
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	401a      	ands	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b00a      	add	sp, #40	; 0x28
 80015be:	bdb0      	pop	{r4, r5, r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	ff02ffff 	.word	0xff02ffff
 80015c8:	feffffff 	.word	0xfeffffff

080015cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e10d      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b88      	ldr	r3, [pc, #544]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d911      	bls.n	8001612 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b85      	ldr	r3, [pc, #532]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	4393      	bics	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	4b82      	ldr	r3, [pc, #520]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0f4      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d009      	beq.n	8001630 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	22f0      	movs	r2, #240	; 0xf0
 8001622:	4393      	bics	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	4b77      	ldr	r3, [pc, #476]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	d100      	bne.n	800163c <HAL_RCC_ClockConfig+0x70>
 800163a:	e089      	b.n	8001750 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d107      	bne.n	8001654 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001644:	4b70      	ldr	r3, [pc, #448]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	4013      	ands	r3, r2
 800164e:	d120      	bne.n	8001692 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d3      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d107      	bne.n	800166c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800165c:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	049b      	lsls	r3, r3, #18
 8001664:	4013      	ands	r3, r2
 8001666:	d114      	bne.n	8001692 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0c7      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001674:	4b64      	ldr	r3, [pc, #400]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2204      	movs	r2, #4
 800167a:	4013      	ands	r3, r2
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0bc      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001682:	4b61      	ldr	r3, [pc, #388]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0b4      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2203      	movs	r2, #3
 8001698:	4393      	bics	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a6:	f7ff f92f 	bl	8000908 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d111      	bne.n	80016da <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b6:	e009      	b.n	80016cc <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b8:	f7ff f926 	bl	8000908 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e097      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016cc:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	220c      	movs	r2, #12
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d1ef      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xec>
 80016d8:	e03a      	b.n	8001750 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d111      	bne.n	8001706 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e2:	e009      	b.n	80016f8 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff f910 	bl	8000908 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e081      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f8:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	220c      	movs	r2, #12
 80016fe:	4013      	ands	r3, r2
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d1ef      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x118>
 8001704:	e024      	b.n	8001750 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d11b      	bne.n	8001746 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800170e:	e009      	b.n	8001724 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f8fa 	bl	8000908 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	4a3c      	ldr	r2, [pc, #240]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e06b      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001724:	4b38      	ldr	r3, [pc, #224]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	220c      	movs	r2, #12
 800172a:	4013      	ands	r3, r2
 800172c:	2b04      	cmp	r3, #4
 800172e:	d1ef      	bne.n	8001710 <HAL_RCC_ClockConfig+0x144>
 8001730:	e00e      	b.n	8001750 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001732:	f7ff f8e9 	bl	8000908 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a33      	ldr	r2, [pc, #204]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e05a      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	220c      	movs	r2, #12
 800174c:	4013      	ands	r3, r2
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d211      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x238>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e03c      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001792:	4013      	ands	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 800179c:	430a      	orrs	r2, r1
 800179e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2208      	movs	r2, #8
 80017a6:	4013      	ands	r3, r2
 80017a8:	d00a      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_RCC_ClockConfig+0x248>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	00da      	lsls	r2, r3, #3
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c0:	f000 f82e 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80017c4:	0001      	movs	r1, r0
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_RCC_ClockConfig+0x23c>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	220f      	movs	r2, #15
 80017ce:	4013      	ands	r3, r2
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_RCC_ClockConfig+0x24c>)
 80017d2:	5cd3      	ldrb	r3, [r2, r3]
 80017d4:	000a      	movs	r2, r1
 80017d6:	40da      	lsrs	r2, r3
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_ClockConfig+0x250>)
 80017da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80017dc:	250b      	movs	r5, #11
 80017de:	197c      	adds	r4, r7, r5
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff f867 	bl	80008b4 <HAL_InitTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017ea:	197b      	adds	r3, r7, r5
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80017f2:	230b      	movs	r3, #11
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	e000      	b.n	80017fc <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b004      	add	sp, #16
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	40022000 	.word	0x40022000
 8001808:	40021000 	.word	0x40021000
 800180c:	00001388 	.word	0x00001388
 8001810:	fffff8ff 	.word	0xfffff8ff
 8001814:	ffffc7ff 	.word	0xffffc7ff
 8001818:	080022b0 	.word	0x080022b0
 800181c:	20000000 	.word	0x20000000

08001820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	220c      	movs	r2, #12
 8001830:	4013      	ands	r3, r2
 8001832:	2b08      	cmp	r3, #8
 8001834:	d00e      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x34>
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d00f      	beq.n	800185a <HAL_RCC_GetSysClockFreq+0x3a>
 800183a:	2b04      	cmp	r3, #4
 800183c:	d157      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2210      	movs	r2, #16
 8001844:	4013      	ands	r3, r2
 8001846:	d002      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001848:	4b33      	ldr	r3, [pc, #204]	; (8001918 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800184c:	e05d      	b.n	800190a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001850:	613b      	str	r3, [r7, #16]
      break;
 8001852:	e05a      	b.n	800190a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_RCC_GetSysClockFreq+0x100>)
 8001856:	613b      	str	r3, [r7, #16]
      break;
 8001858:	e057      	b.n	800190a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	0c9b      	lsrs	r3, r3, #18
 800185e:	220f      	movs	r2, #15
 8001860:	4013      	ands	r3, r2
 8001862:	4a30      	ldr	r2, [pc, #192]	; (8001924 <HAL_RCC_GetSysClockFreq+0x104>)
 8001864:	5cd3      	ldrb	r3, [r2, r3]
 8001866:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	0d9b      	lsrs	r3, r3, #22
 800186c:	2203      	movs	r2, #3
 800186e:	4013      	ands	r3, r2
 8001870:	3301      	adds	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	025b      	lsls	r3, r3, #9
 800187c:	4013      	ands	r3, r2
 800187e:	d00f      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	000a      	movs	r2, r1
 8001884:	0152      	lsls	r2, r2, #5
 8001886:	1a52      	subs	r2, r2, r1
 8001888:	0193      	lsls	r3, r2, #6
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	185b      	adds	r3, r3, r1
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f7fe fc37 	bl	8000108 <__udivsi3>
 800189a:	0003      	movs	r3, r0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e023      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2210      	movs	r2, #16
 80018a6:	4013      	ands	r3, r2
 80018a8:	d00f      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	000a      	movs	r2, r1
 80018ae:	0152      	lsls	r2, r2, #5
 80018b0:	1a52      	subs	r2, r2, r1
 80018b2:	0193      	lsls	r3, r2, #6
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	185b      	adds	r3, r3, r1
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	0018      	movs	r0, r3
 80018c0:	f7fe fc22 	bl	8000108 <__udivsi3>
 80018c4:	0003      	movs	r3, r0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00e      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	000a      	movs	r2, r1
 80018ce:	0152      	lsls	r2, r2, #5
 80018d0:	1a52      	subs	r2, r2, r1
 80018d2:	0193      	lsls	r3, r2, #6
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	185b      	adds	r3, r3, r1
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	0018      	movs	r0, r3
 80018e0:	f7fe fc12 	bl	8000108 <__udivsi3>
 80018e4:	0003      	movs	r3, r0
 80018e6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
      break;
 80018ec:	e00d      	b.n	800190a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0b5b      	lsrs	r3, r3, #13
 80018f4:	2207      	movs	r2, #7
 80018f6:	4013      	ands	r3, r2
 80018f8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	0212      	lsls	r2, r2, #8
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
      break;
 8001908:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800190a:	693b      	ldr	r3, [r7, #16]
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b006      	add	sp, #24
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	003d0900 	.word	0x003d0900
 800191c:	00f42400 	.word	0x00f42400
 8001920:	007a1200 	.word	0x007a1200
 8001924:	080022c0 	.word	0x080022c0

08001928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e059      	b.n	80019ee <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2251      	movs	r2, #81	; 0x51
 8001944:	5c9b      	ldrb	r3, [r3, r2]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2250      	movs	r2, #80	; 0x50
 8001950:	2100      	movs	r1, #0
 8001952:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0018      	movs	r0, r3
 8001958:	f7fe fe56 	bl	8000608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2251      	movs	r2, #81	; 0x51
 8001960:	2102      	movs	r1, #2
 8001962:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2140      	movs	r1, #64	; 0x40
 8001970:	438a      	bics	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6999      	ldr	r1, [r3, #24]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	400b      	ands	r3, r1
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	0011      	movs	r1, r2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <HAL_SPI_Init+0xd0>)
 80019da:	400a      	ands	r2, r1
 80019dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2251      	movs	r2, #81	; 0x51
 80019e8:	2101      	movs	r1, #1
 80019ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	fffff7ff 	.word	0xfffff7ff

080019fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e01e      	b.n	8001a4c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2239      	movs	r2, #57	; 0x39
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2238      	movs	r2, #56	; 0x38
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7fe fe57 	bl	80006d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2239      	movs	r2, #57	; 0x39
 8001a2e:	2102      	movs	r1, #2
 8001a30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	f000 fa3f 	bl	8001ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2239      	movs	r2, #57	; 0x39
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b002      	add	sp, #8
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2101      	movs	r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2207      	movs	r2, #7
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d007      	beq.n	8001a8e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d124      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d11d      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d004      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 f9d8 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001ae0:	e007      	b.n	8001af2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f9cb 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 f9d7 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2204      	movs	r2, #4
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d125      	bne.n	8001b52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d11e      	bne.n	8001b52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2205      	movs	r2, #5
 8001b1a:	4252      	negs	r2, r2
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 f9ab 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001b3a:	e007      	b.n	8001b4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 f99e 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 f9aa 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d124      	bne.n	8001baa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2208      	movs	r2, #8
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d11d      	bne.n	8001baa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2209      	movs	r2, #9
 8001b74:	4252      	negs	r2, r2
 8001b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2203      	movs	r2, #3
 8001b86:	4013      	ands	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 f97f 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001b92:	e007      	b.n	8001ba4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f972 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 f97e 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d125      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d11e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2211      	movs	r2, #17
 8001bcc:	4252      	negs	r2, r2
 8001bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69da      	ldr	r2, [r3, #28]
 8001bdc:	23c0      	movs	r3, #192	; 0xc0
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d004      	beq.n	8001bee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 f952 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e007      	b.n	8001bfe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 f945 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 f951 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10f      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4252      	negs	r2, r2
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 f91f 	bl	8001e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b40      	cmp	r3, #64	; 0x40
 8001c3e:	d10f      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d108      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2241      	movs	r2, #65	; 0x41
 8001c54:	4252      	negs	r2, r2
 8001c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 f928 	bl	8001eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2238      	movs	r2, #56	; 0x38
 8001c76:	5c9b      	ldrb	r3, [r3, r2]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_TIM_ConfigClockSource+0x18>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e0ab      	b.n	8001dd8 <HAL_TIM_ConfigClockSource+0x170>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2238      	movs	r2, #56	; 0x38
 8001c84:	2101      	movs	r1, #1
 8001c86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2239      	movs	r2, #57	; 0x39
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2277      	movs	r2, #119	; 0x77
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_TIM_ConfigClockSource+0x178>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d100      	bne.n	8001cba <HAL_TIM_ConfigClockSource+0x52>
 8001cb8:	e06b      	b.n	8001d92 <HAL_TIM_ConfigClockSource+0x12a>
 8001cba:	d80e      	bhi.n	8001cda <HAL_TIM_ConfigClockSource+0x72>
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d100      	bne.n	8001cc2 <HAL_TIM_ConfigClockSource+0x5a>
 8001cc0:	e077      	b.n	8001db2 <HAL_TIM_ConfigClockSource+0x14a>
 8001cc2:	d803      	bhi.n	8001ccc <HAL_TIM_ConfigClockSource+0x64>
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d100      	bne.n	8001cca <HAL_TIM_ConfigClockSource+0x62>
 8001cc8:	e073      	b.n	8001db2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001cca:	e07c      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d100      	bne.n	8001cd2 <HAL_TIM_ConfigClockSource+0x6a>
 8001cd0:	e06f      	b.n	8001db2 <HAL_TIM_ConfigClockSource+0x14a>
 8001cd2:	2b30      	cmp	r3, #48	; 0x30
 8001cd4:	d100      	bne.n	8001cd8 <HAL_TIM_ConfigClockSource+0x70>
 8001cd6:	e06c      	b.n	8001db2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001cd8:	e075      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001cda:	2b70      	cmp	r3, #112	; 0x70
 8001cdc:	d00e      	beq.n	8001cfc <HAL_TIM_ConfigClockSource+0x94>
 8001cde:	d804      	bhi.n	8001cea <HAL_TIM_ConfigClockSource+0x82>
 8001ce0:	2b50      	cmp	r3, #80	; 0x50
 8001ce2:	d036      	beq.n	8001d52 <HAL_TIM_ConfigClockSource+0xea>
 8001ce4:	2b60      	cmp	r3, #96	; 0x60
 8001ce6:	d044      	beq.n	8001d72 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001ce8:	e06d      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	0152      	lsls	r2, r2, #5
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d068      	beq.n	8001dc4 <HAL_TIM_ConfigClockSource+0x15c>
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	0192      	lsls	r2, r2, #6
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d017      	beq.n	8001d2a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001cfa:	e064      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6899      	ldr	r1, [r3, #8]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f000 fa34 	bl	8002178 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2277      	movs	r2, #119	; 0x77
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	609a      	str	r2, [r3, #8]
      break;
 8001d28:	e04d      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6899      	ldr	r1, [r3, #8]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f000 fa1d 	bl	8002178 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	01c9      	lsls	r1, r1, #7
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]
      break;
 8001d50:	e039      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	001a      	movs	r2, r3
 8001d60:	f000 f990 	bl	8002084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2150      	movs	r1, #80	; 0x50
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f9ea 	bl	8002144 <TIM_ITRx_SetConfig>
      break;
 8001d70:	e029      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	001a      	movs	r2, r3
 8001d80:	f000 f9ae 	bl	80020e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2160      	movs	r1, #96	; 0x60
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 f9da 	bl	8002144 <TIM_ITRx_SetConfig>
      break;
 8001d90:	e019      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	001a      	movs	r2, r3
 8001da0:	f000 f970 	bl	8002084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 f9ca 	bl	8002144 <TIM_ITRx_SetConfig>
      break;
 8001db0:	e009      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0019      	movs	r1, r3
 8001dbc:	0010      	movs	r0, r2
 8001dbe:	f000 f9c1 	bl	8002144 <TIM_ITRx_SetConfig>
      break;
 8001dc2:	e000      	b.n	8001dc6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001dc4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2239      	movs	r2, #57	; 0x39
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2238      	movs	r2, #56	; 0x38
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b004      	add	sp, #16
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	ffff00ff 	.word	0xffff00ff

08001de4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2238      	movs	r2, #56	; 0x38
 8001df2:	5c9b      	ldrb	r3, [r3, r2]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_TIM_SlaveConfigSynchro+0x18>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e032      	b.n	8001e62 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2238      	movs	r2, #56	; 0x38
 8001e00:	2101      	movs	r1, #1
 8001e02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2239      	movs	r2, #57	; 0x39
 8001e08:	2102      	movs	r1, #2
 8001e0a:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f8b2 	bl	8001f7c <TIM_SlaveTimer_SetConfig>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2239      	movs	r2, #57	; 0x39
 8001e20:	2101      	movs	r1, #1
 8001e22:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2238      	movs	r2, #56	; 0x38
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e018      	b.n	8001e62 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <HAL_TIM_SlaveConfigSynchro+0x88>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2239      	movs	r2, #57	; 0x39
 8001e54:	2101      	movs	r1, #1
 8001e56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2238      	movs	r2, #56	; 0x38
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	ffffbfff 	.word	0xffffbfff

08001e70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d00b      	beq.n	8001ef2 <TIM_Base_SetConfig+0x32>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <TIM_Base_SetConfig+0xac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <TIM_Base_SetConfig+0x32>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <TIM_Base_SetConfig+0xb0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <TIM_Base_SetConfig+0x32>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <TIM_Base_SetConfig+0xb4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2270      	movs	r2, #112	; 0x70
 8001ef6:	4393      	bics	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d00b      	beq.n	8001f26 <TIM_Base_SetConfig+0x66>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <TIM_Base_SetConfig+0xac>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <TIM_Base_SetConfig+0x66>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <TIM_Base_SetConfig+0xb0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_Base_SetConfig+0x66>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <TIM_Base_SetConfig+0xb4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <TIM_Base_SetConfig+0xb8>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	001a      	movs	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	615a      	str	r2, [r3, #20]
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40010800 	.word	0x40010800
 8001f74:	40011400 	.word	0x40011400
 8001f78:	fffffcff 	.word	0xfffffcff

08001f7c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2270      	movs	r2, #112	; 0x70
 8001f92:	4393      	bics	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b30      	cmp	r3, #48	; 0x30
 8001fc0:	d05a      	beq.n	8002078 <TIM_SlaveTimer_SetConfig+0xfc>
 8001fc2:	d806      	bhi.n	8001fd2 <TIM_SlaveTimer_SetConfig+0x56>
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d057      	beq.n	8002078 <TIM_SlaveTimer_SetConfig+0xfc>
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d055      	beq.n	8002078 <TIM_SlaveTimer_SetConfig+0xfc>
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d053      	beq.n	8002078 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8001fd0:	e053      	b.n	800207a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8001fd2:	2b50      	cmp	r3, #80	; 0x50
 8001fd4:	d03c      	beq.n	8002050 <TIM_SlaveTimer_SetConfig+0xd4>
 8001fd6:	d802      	bhi.n	8001fde <TIM_SlaveTimer_SetConfig+0x62>
 8001fd8:	2b40      	cmp	r3, #64	; 0x40
 8001fda:	d010      	beq.n	8001ffe <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8001fdc:	e04d      	b.n	800207a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8001fde:	2b60      	cmp	r3, #96	; 0x60
 8001fe0:	d040      	beq.n	8002064 <TIM_SlaveTimer_SetConfig+0xe8>
 8001fe2:	2b70      	cmp	r3, #112	; 0x70
 8001fe4:	d000      	beq.n	8001fe8 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8001fe6:	e048      	b.n	800207a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68d9      	ldr	r1, [r3, #12]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f000 f8be 	bl	8002178 <TIM_ETR_SetConfig>
      break;
 8001ffc:	e03d      	b.n	800207a <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d101      	bne.n	800200a <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e038      	b.n	800207c <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	438a      	bics	r2, r1
 8002020:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	22f0      	movs	r2, #240	; 0xf0
 800202e:	4393      	bics	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	621a      	str	r2, [r3, #32]
      break;
 800204e:	e014      	b.n	800207a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6899      	ldr	r1, [r3, #8]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	001a      	movs	r2, r3
 800205e:	f000 f811 	bl	8002084 <TIM_TI1_ConfigInputStage>
      break;
 8002062:	e00a      	b.n	800207a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	001a      	movs	r2, r3
 8002072:	f000 f835 	bl	80020e0 <TIM_TI2_ConfigInputStage>
      break;
 8002076:	e000      	b.n	800207a <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8002078:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b006      	add	sp, #24
 8002082:	bd80      	pop	{r7, pc}

08002084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	2201      	movs	r2, #1
 800209c:	4393      	bics	r3, r2
 800209e:	001a      	movs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	22f0      	movs	r2, #240	; 0xf0
 80020ae:	4393      	bics	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	220a      	movs	r2, #10
 80020c0:	4393      	bics	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	621a      	str	r2, [r3, #32]
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b006      	add	sp, #24
 80020de:	bd80      	pop	{r7, pc}

080020e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	2210      	movs	r2, #16
 80020f2:	4393      	bics	r3, r2
 80020f4:	001a      	movs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <TIM_TI2_ConfigInputStage+0x60>)
 800210a:	4013      	ands	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	031b      	lsls	r3, r3, #12
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	22a0      	movs	r2, #160	; 0xa0
 800211c:	4393      	bics	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	621a      	str	r2, [r3, #32]
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b006      	add	sp, #24
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	ffff0fff 	.word	0xffff0fff

08002144 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2270      	movs	r2, #112	; 0x70
 8002158:	4393      	bics	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	2207      	movs	r2, #7
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	609a      	str	r2, [r3, #8]
}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <TIM_ETR_SetConfig+0x3c>)
 8002190:	4013      	ands	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	021a      	lsls	r2, r3, #8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	431a      	orrs	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b006      	add	sp, #24
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	ffff00ff 	.word	0xffff00ff

080021b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2238      	movs	r2, #56	; 0x38
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e032      	b.n	8002236 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2238      	movs	r2, #56	; 0x38
 80021d4:	2101      	movs	r1, #1
 80021d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2239      	movs	r2, #57	; 0x39
 80021dc:	2102      	movs	r1, #2
 80021de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2270      	movs	r2, #112	; 0x70
 80021f4:	4393      	bics	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	4393      	bics	r3, r2
 8002208:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4313      	orrs	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2239      	movs	r2, #57	; 0x39
 8002228:	2101      	movs	r1, #1
 800222a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2238      	movs	r2, #56	; 0x38
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <__libc_init_array>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	2600      	movs	r6, #0
 8002244:	4d0c      	ldr	r5, [pc, #48]	; (8002278 <__libc_init_array+0x38>)
 8002246:	4c0d      	ldr	r4, [pc, #52]	; (800227c <__libc_init_array+0x3c>)
 8002248:	1b64      	subs	r4, r4, r5
 800224a:	10a4      	asrs	r4, r4, #2
 800224c:	42a6      	cmp	r6, r4
 800224e:	d109      	bne.n	8002264 <__libc_init_array+0x24>
 8002250:	2600      	movs	r6, #0
 8002252:	f000 f821 	bl	8002298 <_init>
 8002256:	4d0a      	ldr	r5, [pc, #40]	; (8002280 <__libc_init_array+0x40>)
 8002258:	4c0a      	ldr	r4, [pc, #40]	; (8002284 <__libc_init_array+0x44>)
 800225a:	1b64      	subs	r4, r4, r5
 800225c:	10a4      	asrs	r4, r4, #2
 800225e:	42a6      	cmp	r6, r4
 8002260:	d105      	bne.n	800226e <__libc_init_array+0x2e>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	00b3      	lsls	r3, r6, #2
 8002266:	58eb      	ldr	r3, [r5, r3]
 8002268:	4798      	blx	r3
 800226a:	3601      	adds	r6, #1
 800226c:	e7ee      	b.n	800224c <__libc_init_array+0xc>
 800226e:	00b3      	lsls	r3, r6, #2
 8002270:	58eb      	ldr	r3, [r5, r3]
 8002272:	4798      	blx	r3
 8002274:	3601      	adds	r6, #1
 8002276:	e7f2      	b.n	800225e <__libc_init_array+0x1e>
 8002278:	080022cc 	.word	0x080022cc
 800227c:	080022cc 	.word	0x080022cc
 8002280:	080022cc 	.word	0x080022cc
 8002284:	080022d0 	.word	0x080022d0

08002288 <memset>:
 8002288:	0003      	movs	r3, r0
 800228a:	1812      	adds	r2, r2, r0
 800228c:	4293      	cmp	r3, r2
 800228e:	d100      	bne.n	8002292 <memset+0xa>
 8002290:	4770      	bx	lr
 8002292:	7019      	strb	r1, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	e7f9      	b.n	800228c <memset+0x4>

08002298 <_init>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr

080022a4 <_fini>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr
