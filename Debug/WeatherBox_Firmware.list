
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007b30  08007b30  00017b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c68  08007c68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c70  08007c70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08007ce8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08007ce8  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e761  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e5d  00000000  00000000  0002e7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00030658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  000315c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147cf  00000000  00000000  00032440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b25e  00000000  00000000  00046c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081d9d  00000000  00000000  00051e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d3c  00000000  00000000  000d3c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007b18 	.word	0x08007b18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08007b18 	.word	0x08007b18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fa97 	bl	8001764 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f9ef 	bl	8001624 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fa89 	bl	8001764 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fa7f 	bl	8001764 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fa11 	bl	800169c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fa07 	bl	800169c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f98b 	bl	80005c0 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f90d 	bl	80004d4 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f97d 	bl	80005c0 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f973 	bl	80005c0 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f91b 	bl	8000524 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f911 	bl	8000524 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_uldivmod>:
 8000310:	2b00      	cmp	r3, #0
 8000312:	d111      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000314:	2a00      	cmp	r2, #0
 8000316:	d10f      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000318:	2900      	cmp	r1, #0
 800031a:	d100      	bne.n	800031e <__aeabi_uldivmod+0xe>
 800031c:	2800      	cmp	r0, #0
 800031e:	d002      	beq.n	8000326 <__aeabi_uldivmod+0x16>
 8000320:	2100      	movs	r1, #0
 8000322:	43c9      	mvns	r1, r1
 8000324:	1c08      	adds	r0, r1, #0
 8000326:	b407      	push	{r0, r1, r2}
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <__aeabi_uldivmod+0x24>)
 800032a:	a102      	add	r1, pc, #8	; (adr r1, 8000334 <__aeabi_uldivmod+0x24>)
 800032c:	1840      	adds	r0, r0, r1
 800032e:	9002      	str	r0, [sp, #8]
 8000330:	bd03      	pop	{r0, r1, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	fffffee9 	.word	0xfffffee9
 8000338:	b403      	push	{r0, r1}
 800033a:	4668      	mov	r0, sp
 800033c:	b501      	push	{r0, lr}
 800033e:	9802      	ldr	r0, [sp, #8]
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	9b01      	ldr	r3, [sp, #4]
 8000346:	469e      	mov	lr, r3
 8000348:	b002      	add	sp, #8
 800034a:	bc0c      	pop	{r2, r3}
 800034c:	4770      	bx	lr
 800034e:	46c0      	nop			; (mov r8, r8)

08000350 <__udivmoddi4>:
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	464f      	mov	r7, r9
 8000354:	4646      	mov	r6, r8
 8000356:	46d6      	mov	lr, sl
 8000358:	b5c0      	push	{r6, r7, lr}
 800035a:	0004      	movs	r4, r0
 800035c:	b082      	sub	sp, #8
 800035e:	000d      	movs	r5, r1
 8000360:	4691      	mov	r9, r2
 8000362:	4698      	mov	r8, r3
 8000364:	428b      	cmp	r3, r1
 8000366:	d82f      	bhi.n	80003c8 <__udivmoddi4+0x78>
 8000368:	d02c      	beq.n	80003c4 <__udivmoddi4+0x74>
 800036a:	4641      	mov	r1, r8
 800036c:	4648      	mov	r0, r9
 800036e:	f002 f965 	bl	800263c <__clzdi2>
 8000372:	0029      	movs	r1, r5
 8000374:	0006      	movs	r6, r0
 8000376:	0020      	movs	r0, r4
 8000378:	f002 f960 	bl	800263c <__clzdi2>
 800037c:	1a33      	subs	r3, r6, r0
 800037e:	469c      	mov	ip, r3
 8000380:	3b20      	subs	r3, #32
 8000382:	469a      	mov	sl, r3
 8000384:	d500      	bpl.n	8000388 <__udivmoddi4+0x38>
 8000386:	e076      	b.n	8000476 <__udivmoddi4+0x126>
 8000388:	464b      	mov	r3, r9
 800038a:	4652      	mov	r2, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001f      	movs	r7, r3
 8000390:	464b      	mov	r3, r9
 8000392:	4662      	mov	r2, ip
 8000394:	4093      	lsls	r3, r2
 8000396:	001e      	movs	r6, r3
 8000398:	42af      	cmp	r7, r5
 800039a:	d828      	bhi.n	80003ee <__udivmoddi4+0x9e>
 800039c:	d025      	beq.n	80003ea <__udivmoddi4+0x9a>
 800039e:	4653      	mov	r3, sl
 80003a0:	1ba4      	subs	r4, r4, r6
 80003a2:	41bd      	sbcs	r5, r7
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	da00      	bge.n	80003aa <__udivmoddi4+0x5a>
 80003a8:	e07b      	b.n	80004a2 <__udivmoddi4+0x152>
 80003aa:	2200      	movs	r2, #0
 80003ac:	2300      	movs	r3, #0
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	2301      	movs	r3, #1
 80003b4:	4652      	mov	r2, sl
 80003b6:	4093      	lsls	r3, r2
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2301      	movs	r3, #1
 80003bc:	4662      	mov	r2, ip
 80003be:	4093      	lsls	r3, r2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	e018      	b.n	80003f6 <__udivmoddi4+0xa6>
 80003c4:	4282      	cmp	r2, r0
 80003c6:	d9d0      	bls.n	800036a <__udivmoddi4+0x1a>
 80003c8:	2200      	movs	r2, #0
 80003ca:	2300      	movs	r3, #0
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <__udivmoddi4+0x8a>
 80003d6:	601c      	str	r4, [r3, #0]
 80003d8:	605d      	str	r5, [r3, #4]
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	b002      	add	sp, #8
 80003e0:	bc1c      	pop	{r2, r3, r4}
 80003e2:	4690      	mov	r8, r2
 80003e4:	4699      	mov	r9, r3
 80003e6:	46a2      	mov	sl, r4
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	42a3      	cmp	r3, r4
 80003ec:	d9d7      	bls.n	800039e <__udivmoddi4+0x4e>
 80003ee:	2200      	movs	r2, #0
 80003f0:	2300      	movs	r3, #0
 80003f2:	9200      	str	r2, [sp, #0]
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	4663      	mov	r3, ip
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0e9      	beq.n	80003d0 <__udivmoddi4+0x80>
 80003fc:	07fb      	lsls	r3, r7, #31
 80003fe:	4698      	mov	r8, r3
 8000400:	4641      	mov	r1, r8
 8000402:	0872      	lsrs	r2, r6, #1
 8000404:	430a      	orrs	r2, r1
 8000406:	087b      	lsrs	r3, r7, #1
 8000408:	4666      	mov	r6, ip
 800040a:	e00e      	b.n	800042a <__udivmoddi4+0xda>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d101      	bne.n	8000414 <__udivmoddi4+0xc4>
 8000410:	42a2      	cmp	r2, r4
 8000412:	d80c      	bhi.n	800042e <__udivmoddi4+0xde>
 8000414:	1aa4      	subs	r4, r4, r2
 8000416:	419d      	sbcs	r5, r3
 8000418:	2001      	movs	r0, #1
 800041a:	1924      	adds	r4, r4, r4
 800041c:	416d      	adcs	r5, r5
 800041e:	2100      	movs	r1, #0
 8000420:	3e01      	subs	r6, #1
 8000422:	1824      	adds	r4, r4, r0
 8000424:	414d      	adcs	r5, r1
 8000426:	2e00      	cmp	r6, #0
 8000428:	d006      	beq.n	8000438 <__udivmoddi4+0xe8>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d9ee      	bls.n	800040c <__udivmoddi4+0xbc>
 800042e:	3e01      	subs	r6, #1
 8000430:	1924      	adds	r4, r4, r4
 8000432:	416d      	adcs	r5, r5
 8000434:	2e00      	cmp	r6, #0
 8000436:	d1f8      	bne.n	800042a <__udivmoddi4+0xda>
 8000438:	9800      	ldr	r0, [sp, #0]
 800043a:	9901      	ldr	r1, [sp, #4]
 800043c:	4653      	mov	r3, sl
 800043e:	1900      	adds	r0, r0, r4
 8000440:	4169      	adcs	r1, r5
 8000442:	2b00      	cmp	r3, #0
 8000444:	db23      	blt.n	800048e <__udivmoddi4+0x13e>
 8000446:	002b      	movs	r3, r5
 8000448:	4652      	mov	r2, sl
 800044a:	40d3      	lsrs	r3, r2
 800044c:	002a      	movs	r2, r5
 800044e:	4664      	mov	r4, ip
 8000450:	40e2      	lsrs	r2, r4
 8000452:	001c      	movs	r4, r3
 8000454:	4653      	mov	r3, sl
 8000456:	0015      	movs	r5, r2
 8000458:	2b00      	cmp	r3, #0
 800045a:	db2d      	blt.n	80004b8 <__udivmoddi4+0x168>
 800045c:	0026      	movs	r6, r4
 800045e:	4657      	mov	r7, sl
 8000460:	40be      	lsls	r6, r7
 8000462:	0033      	movs	r3, r6
 8000464:	0026      	movs	r6, r4
 8000466:	4667      	mov	r7, ip
 8000468:	40be      	lsls	r6, r7
 800046a:	0032      	movs	r2, r6
 800046c:	1a80      	subs	r0, r0, r2
 800046e:	4199      	sbcs	r1, r3
 8000470:	9000      	str	r0, [sp, #0]
 8000472:	9101      	str	r1, [sp, #4]
 8000474:	e7ac      	b.n	80003d0 <__udivmoddi4+0x80>
 8000476:	4662      	mov	r2, ip
 8000478:	2320      	movs	r3, #32
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	464a      	mov	r2, r9
 800047e:	40da      	lsrs	r2, r3
 8000480:	4661      	mov	r1, ip
 8000482:	0013      	movs	r3, r2
 8000484:	4642      	mov	r2, r8
 8000486:	408a      	lsls	r2, r1
 8000488:	0017      	movs	r7, r2
 800048a:	431f      	orrs	r7, r3
 800048c:	e780      	b.n	8000390 <__udivmoddi4+0x40>
 800048e:	4662      	mov	r2, ip
 8000490:	2320      	movs	r3, #32
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	002a      	movs	r2, r5
 8000496:	4666      	mov	r6, ip
 8000498:	409a      	lsls	r2, r3
 800049a:	0023      	movs	r3, r4
 800049c:	40f3      	lsrs	r3, r6
 800049e:	4313      	orrs	r3, r2
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0xfc>
 80004a2:	4662      	mov	r2, ip
 80004a4:	2320      	movs	r3, #32
 80004a6:	2100      	movs	r1, #0
 80004a8:	1a9b      	subs	r3, r3, r2
 80004aa:	2200      	movs	r2, #0
 80004ac:	9100      	str	r1, [sp, #0]
 80004ae:	9201      	str	r2, [sp, #4]
 80004b0:	2201      	movs	r2, #1
 80004b2:	40da      	lsrs	r2, r3
 80004b4:	9201      	str	r2, [sp, #4]
 80004b6:	e780      	b.n	80003ba <__udivmoddi4+0x6a>
 80004b8:	2320      	movs	r3, #32
 80004ba:	4662      	mov	r2, ip
 80004bc:	0026      	movs	r6, r4
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	40de      	lsrs	r6, r3
 80004c2:	002f      	movs	r7, r5
 80004c4:	46b0      	mov	r8, r6
 80004c6:	4666      	mov	r6, ip
 80004c8:	40b7      	lsls	r7, r6
 80004ca:	4646      	mov	r6, r8
 80004cc:	003b      	movs	r3, r7
 80004ce:	4333      	orrs	r3, r6
 80004d0:	e7c8      	b.n	8000464 <__udivmoddi4+0x114>
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__eqsf2>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	0042      	lsls	r2, r0, #1
 80004d8:	024e      	lsls	r6, r1, #9
 80004da:	004c      	lsls	r4, r1, #1
 80004dc:	0245      	lsls	r5, r0, #9
 80004de:	0a6d      	lsrs	r5, r5, #9
 80004e0:	0e12      	lsrs	r2, r2, #24
 80004e2:	0fc3      	lsrs	r3, r0, #31
 80004e4:	0a76      	lsrs	r6, r6, #9
 80004e6:	0e24      	lsrs	r4, r4, #24
 80004e8:	0fc9      	lsrs	r1, r1, #31
 80004ea:	2aff      	cmp	r2, #255	; 0xff
 80004ec:	d00f      	beq.n	800050e <__eqsf2+0x3a>
 80004ee:	2cff      	cmp	r4, #255	; 0xff
 80004f0:	d011      	beq.n	8000516 <__eqsf2+0x42>
 80004f2:	2001      	movs	r0, #1
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d000      	beq.n	80004fa <__eqsf2+0x26>
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	42b5      	cmp	r5, r6
 80004fc:	d1fc      	bne.n	80004f8 <__eqsf2+0x24>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d00d      	beq.n	800051e <__eqsf2+0x4a>
 8000502:	2a00      	cmp	r2, #0
 8000504:	d1f8      	bne.n	80004f8 <__eqsf2+0x24>
 8000506:	0028      	movs	r0, r5
 8000508:	1e45      	subs	r5, r0, #1
 800050a:	41a8      	sbcs	r0, r5
 800050c:	e7f4      	b.n	80004f8 <__eqsf2+0x24>
 800050e:	2001      	movs	r0, #1
 8000510:	2d00      	cmp	r5, #0
 8000512:	d1f1      	bne.n	80004f8 <__eqsf2+0x24>
 8000514:	e7eb      	b.n	80004ee <__eqsf2+0x1a>
 8000516:	2001      	movs	r0, #1
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1ed      	bne.n	80004f8 <__eqsf2+0x24>
 800051c:	e7e9      	b.n	80004f2 <__eqsf2+0x1e>
 800051e:	2000      	movs	r0, #0
 8000520:	e7ea      	b.n	80004f8 <__eqsf2+0x24>
 8000522:	46c0      	nop			; (mov r8, r8)

08000524 <__gesf2>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	004a      	lsls	r2, r1, #1
 8000528:	024e      	lsls	r6, r1, #9
 800052a:	0245      	lsls	r5, r0, #9
 800052c:	0044      	lsls	r4, r0, #1
 800052e:	0a6d      	lsrs	r5, r5, #9
 8000530:	0e24      	lsrs	r4, r4, #24
 8000532:	0fc3      	lsrs	r3, r0, #31
 8000534:	0a76      	lsrs	r6, r6, #9
 8000536:	0e12      	lsrs	r2, r2, #24
 8000538:	0fc9      	lsrs	r1, r1, #31
 800053a:	2cff      	cmp	r4, #255	; 0xff
 800053c:	d015      	beq.n	800056a <__gesf2+0x46>
 800053e:	2aff      	cmp	r2, #255	; 0xff
 8000540:	d00e      	beq.n	8000560 <__gesf2+0x3c>
 8000542:	2c00      	cmp	r4, #0
 8000544:	d115      	bne.n	8000572 <__gesf2+0x4e>
 8000546:	2a00      	cmp	r2, #0
 8000548:	d101      	bne.n	800054e <__gesf2+0x2a>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d01c      	beq.n	8000588 <__gesf2+0x64>
 800054e:	2d00      	cmp	r5, #0
 8000550:	d014      	beq.n	800057c <__gesf2+0x58>
 8000552:	428b      	cmp	r3, r1
 8000554:	d027      	beq.n	80005a6 <__gesf2+0x82>
 8000556:	2002      	movs	r0, #2
 8000558:	3b01      	subs	r3, #1
 800055a:	4018      	ands	r0, r3
 800055c:	3801      	subs	r0, #1
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	2e00      	cmp	r6, #0
 8000562:	d0ee      	beq.n	8000542 <__gesf2+0x1e>
 8000564:	2002      	movs	r0, #2
 8000566:	4240      	negs	r0, r0
 8000568:	e7f9      	b.n	800055e <__gesf2+0x3a>
 800056a:	2d00      	cmp	r5, #0
 800056c:	d1fa      	bne.n	8000564 <__gesf2+0x40>
 800056e:	2aff      	cmp	r2, #255	; 0xff
 8000570:	d00e      	beq.n	8000590 <__gesf2+0x6c>
 8000572:	2a00      	cmp	r2, #0
 8000574:	d10e      	bne.n	8000594 <__gesf2+0x70>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d0ed      	beq.n	8000556 <__gesf2+0x32>
 800057a:	e00b      	b.n	8000594 <__gesf2+0x70>
 800057c:	2301      	movs	r3, #1
 800057e:	3901      	subs	r1, #1
 8000580:	4399      	bics	r1, r3
 8000582:	0008      	movs	r0, r1
 8000584:	3001      	adds	r0, #1
 8000586:	e7ea      	b.n	800055e <__gesf2+0x3a>
 8000588:	2000      	movs	r0, #0
 800058a:	2d00      	cmp	r5, #0
 800058c:	d0e7      	beq.n	800055e <__gesf2+0x3a>
 800058e:	e7e2      	b.n	8000556 <__gesf2+0x32>
 8000590:	2e00      	cmp	r6, #0
 8000592:	d1e7      	bne.n	8000564 <__gesf2+0x40>
 8000594:	428b      	cmp	r3, r1
 8000596:	d1de      	bne.n	8000556 <__gesf2+0x32>
 8000598:	4294      	cmp	r4, r2
 800059a:	dd05      	ble.n	80005a8 <__gesf2+0x84>
 800059c:	2102      	movs	r1, #2
 800059e:	1e58      	subs	r0, r3, #1
 80005a0:	4008      	ands	r0, r1
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7db      	b.n	800055e <__gesf2+0x3a>
 80005a6:	2400      	movs	r4, #0
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	dc04      	bgt.n	80005b6 <__gesf2+0x92>
 80005ac:	42b5      	cmp	r5, r6
 80005ae:	d8d2      	bhi.n	8000556 <__gesf2+0x32>
 80005b0:	2000      	movs	r0, #0
 80005b2:	42b5      	cmp	r5, r6
 80005b4:	d2d3      	bcs.n	800055e <__gesf2+0x3a>
 80005b6:	1e58      	subs	r0, r3, #1
 80005b8:	2301      	movs	r3, #1
 80005ba:	4398      	bics	r0, r3
 80005bc:	3001      	adds	r0, #1
 80005be:	e7ce      	b.n	800055e <__gesf2+0x3a>

080005c0 <__lesf2>:
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	0042      	lsls	r2, r0, #1
 80005c4:	0244      	lsls	r4, r0, #9
 80005c6:	024d      	lsls	r5, r1, #9
 80005c8:	0fc3      	lsrs	r3, r0, #31
 80005ca:	0048      	lsls	r0, r1, #1
 80005cc:	0a64      	lsrs	r4, r4, #9
 80005ce:	0e12      	lsrs	r2, r2, #24
 80005d0:	0a6d      	lsrs	r5, r5, #9
 80005d2:	0e00      	lsrs	r0, r0, #24
 80005d4:	0fc9      	lsrs	r1, r1, #31
 80005d6:	2aff      	cmp	r2, #255	; 0xff
 80005d8:	d012      	beq.n	8000600 <__lesf2+0x40>
 80005da:	28ff      	cmp	r0, #255	; 0xff
 80005dc:	d00c      	beq.n	80005f8 <__lesf2+0x38>
 80005de:	2a00      	cmp	r2, #0
 80005e0:	d112      	bne.n	8000608 <__lesf2+0x48>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d119      	bne.n	800061a <__lesf2+0x5a>
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d117      	bne.n	800061a <__lesf2+0x5a>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d02b      	beq.n	8000646 <__lesf2+0x86>
 80005ee:	2002      	movs	r0, #2
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4018      	ands	r0, r3
 80005f4:	3801      	subs	r0, #1
 80005f6:	e026      	b.n	8000646 <__lesf2+0x86>
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	d0f0      	beq.n	80005de <__lesf2+0x1e>
 80005fc:	2002      	movs	r0, #2
 80005fe:	e022      	b.n	8000646 <__lesf2+0x86>
 8000600:	2c00      	cmp	r4, #0
 8000602:	d1fb      	bne.n	80005fc <__lesf2+0x3c>
 8000604:	28ff      	cmp	r0, #255	; 0xff
 8000606:	d01f      	beq.n	8000648 <__lesf2+0x88>
 8000608:	2800      	cmp	r0, #0
 800060a:	d11f      	bne.n	800064c <__lesf2+0x8c>
 800060c:	2d00      	cmp	r5, #0
 800060e:	d11d      	bne.n	800064c <__lesf2+0x8c>
 8000610:	2002      	movs	r0, #2
 8000612:	3b01      	subs	r3, #1
 8000614:	4018      	ands	r0, r3
 8000616:	3801      	subs	r0, #1
 8000618:	e015      	b.n	8000646 <__lesf2+0x86>
 800061a:	2c00      	cmp	r4, #0
 800061c:	d00e      	beq.n	800063c <__lesf2+0x7c>
 800061e:	428b      	cmp	r3, r1
 8000620:	d1e5      	bne.n	80005ee <__lesf2+0x2e>
 8000622:	2200      	movs	r2, #0
 8000624:	4290      	cmp	r0, r2
 8000626:	dc04      	bgt.n	8000632 <__lesf2+0x72>
 8000628:	42ac      	cmp	r4, r5
 800062a:	d8e0      	bhi.n	80005ee <__lesf2+0x2e>
 800062c:	2000      	movs	r0, #0
 800062e:	42ac      	cmp	r4, r5
 8000630:	d209      	bcs.n	8000646 <__lesf2+0x86>
 8000632:	1e58      	subs	r0, r3, #1
 8000634:	2301      	movs	r3, #1
 8000636:	4398      	bics	r0, r3
 8000638:	3001      	adds	r0, #1
 800063a:	e004      	b.n	8000646 <__lesf2+0x86>
 800063c:	2301      	movs	r3, #1
 800063e:	3901      	subs	r1, #1
 8000640:	4399      	bics	r1, r3
 8000642:	0008      	movs	r0, r1
 8000644:	3001      	adds	r0, #1
 8000646:	bd30      	pop	{r4, r5, pc}
 8000648:	2d00      	cmp	r5, #0
 800064a:	d1d7      	bne.n	80005fc <__lesf2+0x3c>
 800064c:	428b      	cmp	r3, r1
 800064e:	d1ce      	bne.n	80005ee <__lesf2+0x2e>
 8000650:	4282      	cmp	r2, r0
 8000652:	dde7      	ble.n	8000624 <__lesf2+0x64>
 8000654:	2102      	movs	r1, #2
 8000656:	1e58      	subs	r0, r3, #1
 8000658:	4008      	ands	r0, r1
 800065a:	3801      	subs	r0, #1
 800065c:	e7f3      	b.n	8000646 <__lesf2+0x86>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__aeabi_fsub>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	4647      	mov	r7, r8
 8000664:	46ce      	mov	lr, r9
 8000666:	0044      	lsls	r4, r0, #1
 8000668:	0fc2      	lsrs	r2, r0, #31
 800066a:	b580      	push	{r7, lr}
 800066c:	0247      	lsls	r7, r0, #9
 800066e:	0248      	lsls	r0, r1, #9
 8000670:	0a40      	lsrs	r0, r0, #9
 8000672:	4684      	mov	ip, r0
 8000674:	4666      	mov	r6, ip
 8000676:	0048      	lsls	r0, r1, #1
 8000678:	0a7f      	lsrs	r7, r7, #9
 800067a:	0e24      	lsrs	r4, r4, #24
 800067c:	00f6      	lsls	r6, r6, #3
 800067e:	0025      	movs	r5, r4
 8000680:	4690      	mov	r8, r2
 8000682:	00fb      	lsls	r3, r7, #3
 8000684:	0e00      	lsrs	r0, r0, #24
 8000686:	0fc9      	lsrs	r1, r1, #31
 8000688:	46b1      	mov	r9, r6
 800068a:	28ff      	cmp	r0, #255	; 0xff
 800068c:	d100      	bne.n	8000690 <__aeabi_fsub+0x30>
 800068e:	e085      	b.n	800079c <__aeabi_fsub+0x13c>
 8000690:	2601      	movs	r6, #1
 8000692:	4071      	eors	r1, r6
 8000694:	1a26      	subs	r6, r4, r0
 8000696:	4291      	cmp	r1, r2
 8000698:	d057      	beq.n	800074a <__aeabi_fsub+0xea>
 800069a:	2e00      	cmp	r6, #0
 800069c:	dd43      	ble.n	8000726 <__aeabi_fsub+0xc6>
 800069e:	2800      	cmp	r0, #0
 80006a0:	d000      	beq.n	80006a4 <__aeabi_fsub+0x44>
 80006a2:	e07f      	b.n	80007a4 <__aeabi_fsub+0x144>
 80006a4:	4649      	mov	r1, r9
 80006a6:	2900      	cmp	r1, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fsub+0x4c>
 80006aa:	e0aa      	b.n	8000802 <__aeabi_fsub+0x1a2>
 80006ac:	3e01      	subs	r6, #1
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fsub+0x54>
 80006b2:	e0f7      	b.n	80008a4 <__aeabi_fsub+0x244>
 80006b4:	1a5b      	subs	r3, r3, r1
 80006b6:	015a      	lsls	r2, r3, #5
 80006b8:	d400      	bmi.n	80006bc <__aeabi_fsub+0x5c>
 80006ba:	e08b      	b.n	80007d4 <__aeabi_fsub+0x174>
 80006bc:	019b      	lsls	r3, r3, #6
 80006be:	099c      	lsrs	r4, r3, #6
 80006c0:	0020      	movs	r0, r4
 80006c2:	f001 ff9d 	bl	8002600 <__clzsi2>
 80006c6:	3805      	subs	r0, #5
 80006c8:	4084      	lsls	r4, r0
 80006ca:	4285      	cmp	r5, r0
 80006cc:	dd00      	ble.n	80006d0 <__aeabi_fsub+0x70>
 80006ce:	e0d3      	b.n	8000878 <__aeabi_fsub+0x218>
 80006d0:	1b45      	subs	r5, r0, r5
 80006d2:	0023      	movs	r3, r4
 80006d4:	2020      	movs	r0, #32
 80006d6:	3501      	adds	r5, #1
 80006d8:	40eb      	lsrs	r3, r5
 80006da:	1b45      	subs	r5, r0, r5
 80006dc:	40ac      	lsls	r4, r5
 80006de:	1e62      	subs	r2, r4, #1
 80006e0:	4194      	sbcs	r4, r2
 80006e2:	4323      	orrs	r3, r4
 80006e4:	2407      	movs	r4, #7
 80006e6:	2500      	movs	r5, #0
 80006e8:	401c      	ands	r4, r3
 80006ea:	2201      	movs	r2, #1
 80006ec:	4641      	mov	r1, r8
 80006ee:	400a      	ands	r2, r1
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d004      	beq.n	80006fe <__aeabi_fsub+0x9e>
 80006f4:	210f      	movs	r1, #15
 80006f6:	4019      	ands	r1, r3
 80006f8:	2904      	cmp	r1, #4
 80006fa:	d000      	beq.n	80006fe <__aeabi_fsub+0x9e>
 80006fc:	3304      	adds	r3, #4
 80006fe:	0159      	lsls	r1, r3, #5
 8000700:	d400      	bmi.n	8000704 <__aeabi_fsub+0xa4>
 8000702:	e080      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000704:	3501      	adds	r5, #1
 8000706:	b2ec      	uxtb	r4, r5
 8000708:	2dff      	cmp	r5, #255	; 0xff
 800070a:	d000      	beq.n	800070e <__aeabi_fsub+0xae>
 800070c:	e0a3      	b.n	8000856 <__aeabi_fsub+0x1f6>
 800070e:	24ff      	movs	r4, #255	; 0xff
 8000710:	2300      	movs	r3, #0
 8000712:	025b      	lsls	r3, r3, #9
 8000714:	05e4      	lsls	r4, r4, #23
 8000716:	0a58      	lsrs	r0, r3, #9
 8000718:	07d2      	lsls	r2, r2, #31
 800071a:	4320      	orrs	r0, r4
 800071c:	4310      	orrs	r0, r2
 800071e:	bc0c      	pop	{r2, r3}
 8000720:	4690      	mov	r8, r2
 8000722:	4699      	mov	r9, r3
 8000724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000726:	2e00      	cmp	r6, #0
 8000728:	d174      	bne.n	8000814 <__aeabi_fsub+0x1b4>
 800072a:	1c60      	adds	r0, r4, #1
 800072c:	b2c0      	uxtb	r0, r0
 800072e:	2801      	cmp	r0, #1
 8000730:	dc00      	bgt.n	8000734 <__aeabi_fsub+0xd4>
 8000732:	e0a7      	b.n	8000884 <__aeabi_fsub+0x224>
 8000734:	464a      	mov	r2, r9
 8000736:	1a9c      	subs	r4, r3, r2
 8000738:	0162      	lsls	r2, r4, #5
 800073a:	d500      	bpl.n	800073e <__aeabi_fsub+0xde>
 800073c:	e0b6      	b.n	80008ac <__aeabi_fsub+0x24c>
 800073e:	2c00      	cmp	r4, #0
 8000740:	d1be      	bne.n	80006c0 <__aeabi_fsub+0x60>
 8000742:	2200      	movs	r2, #0
 8000744:	2400      	movs	r4, #0
 8000746:	2300      	movs	r3, #0
 8000748:	e7e3      	b.n	8000712 <__aeabi_fsub+0xb2>
 800074a:	2e00      	cmp	r6, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fsub+0xf0>
 800074e:	e085      	b.n	800085c <__aeabi_fsub+0x1fc>
 8000750:	2800      	cmp	r0, #0
 8000752:	d046      	beq.n	80007e2 <__aeabi_fsub+0x182>
 8000754:	2cff      	cmp	r4, #255	; 0xff
 8000756:	d049      	beq.n	80007ec <__aeabi_fsub+0x18c>
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	4648      	mov	r0, r9
 800075c:	04d2      	lsls	r2, r2, #19
 800075e:	4310      	orrs	r0, r2
 8000760:	4681      	mov	r9, r0
 8000762:	2201      	movs	r2, #1
 8000764:	2e1b      	cmp	r6, #27
 8000766:	dc09      	bgt.n	800077c <__aeabi_fsub+0x11c>
 8000768:	2020      	movs	r0, #32
 800076a:	464c      	mov	r4, r9
 800076c:	1b80      	subs	r0, r0, r6
 800076e:	4084      	lsls	r4, r0
 8000770:	464a      	mov	r2, r9
 8000772:	0020      	movs	r0, r4
 8000774:	40f2      	lsrs	r2, r6
 8000776:	1e44      	subs	r4, r0, #1
 8000778:	41a0      	sbcs	r0, r4
 800077a:	4302      	orrs	r2, r0
 800077c:	189b      	adds	r3, r3, r2
 800077e:	015a      	lsls	r2, r3, #5
 8000780:	d528      	bpl.n	80007d4 <__aeabi_fsub+0x174>
 8000782:	3501      	adds	r5, #1
 8000784:	2dff      	cmp	r5, #255	; 0xff
 8000786:	d100      	bne.n	800078a <__aeabi_fsub+0x12a>
 8000788:	e0a8      	b.n	80008dc <__aeabi_fsub+0x27c>
 800078a:	2201      	movs	r2, #1
 800078c:	2407      	movs	r4, #7
 800078e:	4994      	ldr	r1, [pc, #592]	; (80009e0 <__aeabi_fsub+0x380>)
 8000790:	401a      	ands	r2, r3
 8000792:	085b      	lsrs	r3, r3, #1
 8000794:	400b      	ands	r3, r1
 8000796:	4313      	orrs	r3, r2
 8000798:	401c      	ands	r4, r3
 800079a:	e7a6      	b.n	80006ea <__aeabi_fsub+0x8a>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d000      	beq.n	80007a2 <__aeabi_fsub+0x142>
 80007a0:	e778      	b.n	8000694 <__aeabi_fsub+0x34>
 80007a2:	e775      	b.n	8000690 <__aeabi_fsub+0x30>
 80007a4:	2cff      	cmp	r4, #255	; 0xff
 80007a6:	d054      	beq.n	8000852 <__aeabi_fsub+0x1f2>
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	4649      	mov	r1, r9
 80007ac:	04d2      	lsls	r2, r2, #19
 80007ae:	4311      	orrs	r1, r2
 80007b0:	4689      	mov	r9, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	2e1b      	cmp	r6, #27
 80007b6:	dc09      	bgt.n	80007cc <__aeabi_fsub+0x16c>
 80007b8:	2120      	movs	r1, #32
 80007ba:	4648      	mov	r0, r9
 80007bc:	1b89      	subs	r1, r1, r6
 80007be:	4088      	lsls	r0, r1
 80007c0:	464a      	mov	r2, r9
 80007c2:	0001      	movs	r1, r0
 80007c4:	40f2      	lsrs	r2, r6
 80007c6:	1e48      	subs	r0, r1, #1
 80007c8:	4181      	sbcs	r1, r0
 80007ca:	430a      	orrs	r2, r1
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	015a      	lsls	r2, r3, #5
 80007d0:	d500      	bpl.n	80007d4 <__aeabi_fsub+0x174>
 80007d2:	e773      	b.n	80006bc <__aeabi_fsub+0x5c>
 80007d4:	2201      	movs	r2, #1
 80007d6:	4641      	mov	r1, r8
 80007d8:	400a      	ands	r2, r1
 80007da:	0759      	lsls	r1, r3, #29
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fsub+0x180>
 80007de:	e789      	b.n	80006f4 <__aeabi_fsub+0x94>
 80007e0:	e011      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80007e2:	4648      	mov	r0, r9
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d158      	bne.n	800089a <__aeabi_fsub+0x23a>
 80007e8:	2cff      	cmp	r4, #255	; 0xff
 80007ea:	d10c      	bne.n	8000806 <__aeabi_fsub+0x1a6>
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fsub+0x194>
 80007f2:	e78c      	b.n	800070e <__aeabi_fsub+0xae>
 80007f4:	2080      	movs	r0, #128	; 0x80
 80007f6:	03c0      	lsls	r0, r0, #15
 80007f8:	4303      	orrs	r3, r0
 80007fa:	025b      	lsls	r3, r3, #9
 80007fc:	0a5b      	lsrs	r3, r3, #9
 80007fe:	24ff      	movs	r4, #255	; 0xff
 8000800:	e787      	b.n	8000712 <__aeabi_fsub+0xb2>
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d025      	beq.n	8000852 <__aeabi_fsub+0x1f2>
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d0f0      	beq.n	80007ee <__aeabi_fsub+0x18e>
 800080c:	025b      	lsls	r3, r3, #9
 800080e:	0a5b      	lsrs	r3, r3, #9
 8000810:	b2ec      	uxtb	r4, r5
 8000812:	e77e      	b.n	8000712 <__aeabi_fsub+0xb2>
 8000814:	2c00      	cmp	r4, #0
 8000816:	d04d      	beq.n	80008b4 <__aeabi_fsub+0x254>
 8000818:	28ff      	cmp	r0, #255	; 0xff
 800081a:	d018      	beq.n	800084e <__aeabi_fsub+0x1ee>
 800081c:	2480      	movs	r4, #128	; 0x80
 800081e:	04e4      	lsls	r4, r4, #19
 8000820:	4272      	negs	r2, r6
 8000822:	4323      	orrs	r3, r4
 8000824:	2a1b      	cmp	r2, #27
 8000826:	dd00      	ble.n	800082a <__aeabi_fsub+0x1ca>
 8000828:	e0c4      	b.n	80009b4 <__aeabi_fsub+0x354>
 800082a:	001c      	movs	r4, r3
 800082c:	2520      	movs	r5, #32
 800082e:	40d4      	lsrs	r4, r2
 8000830:	1aaa      	subs	r2, r5, r2
 8000832:	4093      	lsls	r3, r2
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	4323      	orrs	r3, r4
 800083a:	464a      	mov	r2, r9
 800083c:	0005      	movs	r5, r0
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	4688      	mov	r8, r1
 8000842:	e738      	b.n	80006b6 <__aeabi_fsub+0x56>
 8000844:	1c72      	adds	r2, r6, #1
 8000846:	d0f8      	beq.n	800083a <__aeabi_fsub+0x1da>
 8000848:	43f2      	mvns	r2, r6
 800084a:	28ff      	cmp	r0, #255	; 0xff
 800084c:	d1ea      	bne.n	8000824 <__aeabi_fsub+0x1c4>
 800084e:	000a      	movs	r2, r1
 8000850:	464b      	mov	r3, r9
 8000852:	25ff      	movs	r5, #255	; 0xff
 8000854:	e7d7      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000856:	019b      	lsls	r3, r3, #6
 8000858:	0a5b      	lsrs	r3, r3, #9
 800085a:	e75a      	b.n	8000712 <__aeabi_fsub+0xb2>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d141      	bne.n	80008e4 <__aeabi_fsub+0x284>
 8000860:	1c65      	adds	r5, r4, #1
 8000862:	b2e9      	uxtb	r1, r5
 8000864:	2901      	cmp	r1, #1
 8000866:	dd45      	ble.n	80008f4 <__aeabi_fsub+0x294>
 8000868:	2dff      	cmp	r5, #255	; 0xff
 800086a:	d100      	bne.n	800086e <__aeabi_fsub+0x20e>
 800086c:	e74f      	b.n	800070e <__aeabi_fsub+0xae>
 800086e:	2407      	movs	r4, #7
 8000870:	444b      	add	r3, r9
 8000872:	085b      	lsrs	r3, r3, #1
 8000874:	401c      	ands	r4, r3
 8000876:	e738      	b.n	80006ea <__aeabi_fsub+0x8a>
 8000878:	2207      	movs	r2, #7
 800087a:	4b5a      	ldr	r3, [pc, #360]	; (80009e4 <__aeabi_fsub+0x384>)
 800087c:	1a2d      	subs	r5, r5, r0
 800087e:	4023      	ands	r3, r4
 8000880:	4014      	ands	r4, r2
 8000882:	e732      	b.n	80006ea <__aeabi_fsub+0x8a>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d11d      	bne.n	80008c4 <__aeabi_fsub+0x264>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d17a      	bne.n	8000982 <__aeabi_fsub+0x322>
 800088c:	464b      	mov	r3, r9
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fsub+0x234>
 8000892:	e091      	b.n	80009b8 <__aeabi_fsub+0x358>
 8000894:	000a      	movs	r2, r1
 8000896:	2500      	movs	r5, #0
 8000898:	e7b5      	b.n	8000806 <__aeabi_fsub+0x1a6>
 800089a:	3e01      	subs	r6, #1
 800089c:	2e00      	cmp	r6, #0
 800089e:	d119      	bne.n	80008d4 <__aeabi_fsub+0x274>
 80008a0:	444b      	add	r3, r9
 80008a2:	e76c      	b.n	800077e <__aeabi_fsub+0x11e>
 80008a4:	2cff      	cmp	r4, #255	; 0xff
 80008a6:	d184      	bne.n	80007b2 <__aeabi_fsub+0x152>
 80008a8:	25ff      	movs	r5, #255	; 0xff
 80008aa:	e7ac      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80008ac:	464a      	mov	r2, r9
 80008ae:	4688      	mov	r8, r1
 80008b0:	1ad4      	subs	r4, r2, r3
 80008b2:	e705      	b.n	80006c0 <__aeabi_fsub+0x60>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1c5      	bne.n	8000844 <__aeabi_fsub+0x1e4>
 80008b8:	000a      	movs	r2, r1
 80008ba:	28ff      	cmp	r0, #255	; 0xff
 80008bc:	d0c8      	beq.n	8000850 <__aeabi_fsub+0x1f0>
 80008be:	0005      	movs	r5, r0
 80008c0:	464b      	mov	r3, r9
 80008c2:	e7a0      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d149      	bne.n	800095c <__aeabi_fsub+0x2fc>
 80008c8:	464b      	mov	r3, r9
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d077      	beq.n	80009be <__aeabi_fsub+0x35e>
 80008ce:	000a      	movs	r2, r1
 80008d0:	25ff      	movs	r5, #255	; 0xff
 80008d2:	e798      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80008d4:	2cff      	cmp	r4, #255	; 0xff
 80008d6:	d000      	beq.n	80008da <__aeabi_fsub+0x27a>
 80008d8:	e743      	b.n	8000762 <__aeabi_fsub+0x102>
 80008da:	e787      	b.n	80007ec <__aeabi_fsub+0x18c>
 80008dc:	000a      	movs	r2, r1
 80008de:	24ff      	movs	r4, #255	; 0xff
 80008e0:	2300      	movs	r3, #0
 80008e2:	e716      	b.n	8000712 <__aeabi_fsub+0xb2>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d115      	bne.n	8000914 <__aeabi_fsub+0x2b4>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d157      	bne.n	800099c <__aeabi_fsub+0x33c>
 80008ec:	28ff      	cmp	r0, #255	; 0xff
 80008ee:	d1e6      	bne.n	80008be <__aeabi_fsub+0x25e>
 80008f0:	464b      	mov	r3, r9
 80008f2:	e77b      	b.n	80007ec <__aeabi_fsub+0x18c>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d120      	bne.n	800093a <__aeabi_fsub+0x2da>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d057      	beq.n	80009ac <__aeabi_fsub+0x34c>
 80008fc:	4649      	mov	r1, r9
 80008fe:	2900      	cmp	r1, #0
 8000900:	d053      	beq.n	80009aa <__aeabi_fsub+0x34a>
 8000902:	444b      	add	r3, r9
 8000904:	015a      	lsls	r2, r3, #5
 8000906:	d568      	bpl.n	80009da <__aeabi_fsub+0x37a>
 8000908:	2407      	movs	r4, #7
 800090a:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <__aeabi_fsub+0x384>)
 800090c:	401c      	ands	r4, r3
 800090e:	2501      	movs	r5, #1
 8000910:	4013      	ands	r3, r2
 8000912:	e6ea      	b.n	80006ea <__aeabi_fsub+0x8a>
 8000914:	28ff      	cmp	r0, #255	; 0xff
 8000916:	d0eb      	beq.n	80008f0 <__aeabi_fsub+0x290>
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	04d2      	lsls	r2, r2, #19
 800091c:	4276      	negs	r6, r6
 800091e:	4313      	orrs	r3, r2
 8000920:	2e1b      	cmp	r6, #27
 8000922:	dc53      	bgt.n	80009cc <__aeabi_fsub+0x36c>
 8000924:	2520      	movs	r5, #32
 8000926:	1bad      	subs	r5, r5, r6
 8000928:	001a      	movs	r2, r3
 800092a:	40ab      	lsls	r3, r5
 800092c:	40f2      	lsrs	r2, r6
 800092e:	1e5c      	subs	r4, r3, #1
 8000930:	41a3      	sbcs	r3, r4
 8000932:	4313      	orrs	r3, r2
 8000934:	444b      	add	r3, r9
 8000936:	0005      	movs	r5, r0
 8000938:	e721      	b.n	800077e <__aeabi_fsub+0x11e>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0d8      	beq.n	80008f0 <__aeabi_fsub+0x290>
 800093e:	4649      	mov	r1, r9
 8000940:	2900      	cmp	r1, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fsub+0x2e6>
 8000944:	e752      	b.n	80007ec <__aeabi_fsub+0x18c>
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	03c9      	lsls	r1, r1, #15
 800094a:	420f      	tst	r7, r1
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x2f0>
 800094e:	e74d      	b.n	80007ec <__aeabi_fsub+0x18c>
 8000950:	4660      	mov	r0, ip
 8000952:	4208      	tst	r0, r1
 8000954:	d000      	beq.n	8000958 <__aeabi_fsub+0x2f8>
 8000956:	e749      	b.n	80007ec <__aeabi_fsub+0x18c>
 8000958:	464b      	mov	r3, r9
 800095a:	e747      	b.n	80007ec <__aeabi_fsub+0x18c>
 800095c:	4648      	mov	r0, r9
 800095e:	25ff      	movs	r5, #255	; 0xff
 8000960:	2800      	cmp	r0, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x306>
 8000964:	e74f      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	03d2      	lsls	r2, r2, #15
 800096a:	4217      	tst	r7, r2
 800096c:	d004      	beq.n	8000978 <__aeabi_fsub+0x318>
 800096e:	4660      	mov	r0, ip
 8000970:	4210      	tst	r0, r2
 8000972:	d101      	bne.n	8000978 <__aeabi_fsub+0x318>
 8000974:	464b      	mov	r3, r9
 8000976:	4688      	mov	r8, r1
 8000978:	2201      	movs	r2, #1
 800097a:	4641      	mov	r1, r8
 800097c:	25ff      	movs	r5, #255	; 0xff
 800097e:	400a      	ands	r2, r1
 8000980:	e741      	b.n	8000806 <__aeabi_fsub+0x1a6>
 8000982:	4648      	mov	r0, r9
 8000984:	2800      	cmp	r0, #0
 8000986:	d01f      	beq.n	80009c8 <__aeabi_fsub+0x368>
 8000988:	1a1a      	subs	r2, r3, r0
 800098a:	0150      	lsls	r0, r2, #5
 800098c:	d520      	bpl.n	80009d0 <__aeabi_fsub+0x370>
 800098e:	464a      	mov	r2, r9
 8000990:	2407      	movs	r4, #7
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	401c      	ands	r4, r3
 8000996:	4688      	mov	r8, r1
 8000998:	2500      	movs	r5, #0
 800099a:	e6a6      	b.n	80006ea <__aeabi_fsub+0x8a>
 800099c:	1c74      	adds	r4, r6, #1
 800099e:	d0c9      	beq.n	8000934 <__aeabi_fsub+0x2d4>
 80009a0:	43f6      	mvns	r6, r6
 80009a2:	28ff      	cmp	r0, #255	; 0xff
 80009a4:	d1bc      	bne.n	8000920 <__aeabi_fsub+0x2c0>
 80009a6:	464b      	mov	r3, r9
 80009a8:	e720      	b.n	80007ec <__aeabi_fsub+0x18c>
 80009aa:	4699      	mov	r9, r3
 80009ac:	464b      	mov	r3, r9
 80009ae:	2500      	movs	r5, #0
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	e72b      	b.n	800080c <__aeabi_fsub+0x1ac>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e740      	b.n	800083a <__aeabi_fsub+0x1da>
 80009b8:	2200      	movs	r2, #0
 80009ba:	2300      	movs	r3, #0
 80009bc:	e6a9      	b.n	8000712 <__aeabi_fsub+0xb2>
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	2200      	movs	r2, #0
 80009c2:	03db      	lsls	r3, r3, #15
 80009c4:	24ff      	movs	r4, #255	; 0xff
 80009c6:	e6a4      	b.n	8000712 <__aeabi_fsub+0xb2>
 80009c8:	2500      	movs	r5, #0
 80009ca:	e71c      	b.n	8000806 <__aeabi_fsub+0x1a6>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e7b1      	b.n	8000934 <__aeabi_fsub+0x2d4>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d0f1      	beq.n	80009b8 <__aeabi_fsub+0x358>
 80009d4:	0013      	movs	r3, r2
 80009d6:	2500      	movs	r5, #0
 80009d8:	e6fc      	b.n	80007d4 <__aeabi_fsub+0x174>
 80009da:	2500      	movs	r5, #0
 80009dc:	e6fa      	b.n	80007d4 <__aeabi_fsub+0x174>
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	7dffffff 	.word	0x7dffffff
 80009e4:	fbffffff 	.word	0xfbffffff

080009e8 <__aeabi_dadd>:
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	464f      	mov	r7, r9
 80009ec:	4646      	mov	r6, r8
 80009ee:	46d6      	mov	lr, sl
 80009f0:	000c      	movs	r4, r1
 80009f2:	0309      	lsls	r1, r1, #12
 80009f4:	b5c0      	push	{r6, r7, lr}
 80009f6:	0a49      	lsrs	r1, r1, #9
 80009f8:	0f47      	lsrs	r7, r0, #29
 80009fa:	005e      	lsls	r6, r3, #1
 80009fc:	4339      	orrs	r1, r7
 80009fe:	031f      	lsls	r7, r3, #12
 8000a00:	0fdb      	lsrs	r3, r3, #31
 8000a02:	469c      	mov	ip, r3
 8000a04:	0065      	lsls	r5, r4, #1
 8000a06:	0a7b      	lsrs	r3, r7, #9
 8000a08:	0f57      	lsrs	r7, r2, #29
 8000a0a:	431f      	orrs	r7, r3
 8000a0c:	0d6d      	lsrs	r5, r5, #21
 8000a0e:	0fe4      	lsrs	r4, r4, #31
 8000a10:	0d76      	lsrs	r6, r6, #21
 8000a12:	46a1      	mov	r9, r4
 8000a14:	00c0      	lsls	r0, r0, #3
 8000a16:	46b8      	mov	r8, r7
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	1bab      	subs	r3, r5, r6
 8000a1c:	4564      	cmp	r4, ip
 8000a1e:	d07b      	beq.n	8000b18 <__aeabi_dadd+0x130>
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dd5f      	ble.n	8000ae4 <__aeabi_dadd+0xfc>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x42>
 8000a28:	e0a4      	b.n	8000b74 <__aeabi_dadd+0x18c>
 8000a2a:	003e      	movs	r6, r7
 8000a2c:	4316      	orrs	r6, r2
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x4a>
 8000a30:	e112      	b.n	8000c58 <__aeabi_dadd+0x270>
 8000a32:	1e5e      	subs	r6, r3, #1
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x52>
 8000a38:	e19e      	b.n	8000d78 <__aeabi_dadd+0x390>
 8000a3a:	1a87      	subs	r7, r0, r2
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	42b8      	cmp	r0, r7
 8000a40:	4180      	sbcs	r0, r0
 8000a42:	2501      	movs	r5, #1
 8000a44:	1ac9      	subs	r1, r1, r3
 8000a46:	4240      	negs	r0, r0
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	020b      	lsls	r3, r1, #8
 8000a4c:	d400      	bmi.n	8000a50 <__aeabi_dadd+0x68>
 8000a4e:	e131      	b.n	8000cb4 <__aeabi_dadd+0x2cc>
 8000a50:	0249      	lsls	r1, r1, #9
 8000a52:	0a4e      	lsrs	r6, r1, #9
 8000a54:	2e00      	cmp	r6, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x72>
 8000a58:	e16e      	b.n	8000d38 <__aeabi_dadd+0x350>
 8000a5a:	0030      	movs	r0, r6
 8000a5c:	f001 fdd0 	bl	8002600 <__clzsi2>
 8000a60:	0003      	movs	r3, r0
 8000a62:	3b08      	subs	r3, #8
 8000a64:	2b1f      	cmp	r3, #31
 8000a66:	dd00      	ble.n	8000a6a <__aeabi_dadd+0x82>
 8000a68:	e161      	b.n	8000d2e <__aeabi_dadd+0x346>
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	0039      	movs	r1, r7
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	409e      	lsls	r6, r3
 8000a72:	40d1      	lsrs	r1, r2
 8000a74:	409f      	lsls	r7, r3
 8000a76:	430e      	orrs	r6, r1
 8000a78:	429d      	cmp	r5, r3
 8000a7a:	dd00      	ble.n	8000a7e <__aeabi_dadd+0x96>
 8000a7c:	e151      	b.n	8000d22 <__aeabi_dadd+0x33a>
 8000a7e:	1b5d      	subs	r5, r3, r5
 8000a80:	1c6b      	adds	r3, r5, #1
 8000a82:	2b1f      	cmp	r3, #31
 8000a84:	dd00      	ble.n	8000a88 <__aeabi_dadd+0xa0>
 8000a86:	e17c      	b.n	8000d82 <__aeabi_dadd+0x39a>
 8000a88:	2120      	movs	r1, #32
 8000a8a:	1ac9      	subs	r1, r1, r3
 8000a8c:	003d      	movs	r5, r7
 8000a8e:	0030      	movs	r0, r6
 8000a90:	408f      	lsls	r7, r1
 8000a92:	4088      	lsls	r0, r1
 8000a94:	40dd      	lsrs	r5, r3
 8000a96:	1e79      	subs	r1, r7, #1
 8000a98:	418f      	sbcs	r7, r1
 8000a9a:	0031      	movs	r1, r6
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	4328      	orrs	r0, r5
 8000aa0:	40d9      	lsrs	r1, r3
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	4307      	orrs	r7, r0
 8000aa6:	403a      	ands	r2, r7
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d009      	beq.n	8000ac0 <__aeabi_dadd+0xd8>
 8000aac:	230f      	movs	r3, #15
 8000aae:	403b      	ands	r3, r7
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d005      	beq.n	8000ac0 <__aeabi_dadd+0xd8>
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	42bb      	cmp	r3, r7
 8000ab8:	41bf      	sbcs	r7, r7
 8000aba:	427f      	negs	r7, r7
 8000abc:	19c9      	adds	r1, r1, r7
 8000abe:	001f      	movs	r7, r3
 8000ac0:	020b      	lsls	r3, r1, #8
 8000ac2:	d400      	bmi.n	8000ac6 <__aeabi_dadd+0xde>
 8000ac4:	e226      	b.n	8000f14 <__aeabi_dadd+0x52c>
 8000ac6:	1c6a      	adds	r2, r5, #1
 8000ac8:	4bc6      	ldr	r3, [pc, #792]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000aca:	0555      	lsls	r5, r2, #21
 8000acc:	0d6d      	lsrs	r5, r5, #21
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0xec>
 8000ad2:	e106      	b.n	8000ce2 <__aeabi_dadd+0x2fa>
 8000ad4:	4ac4      	ldr	r2, [pc, #784]	; (8000de8 <__aeabi_dadd+0x400>)
 8000ad6:	08ff      	lsrs	r7, r7, #3
 8000ad8:	400a      	ands	r2, r1
 8000ada:	0753      	lsls	r3, r2, #29
 8000adc:	0252      	lsls	r2, r2, #9
 8000ade:	433b      	orrs	r3, r7
 8000ae0:	0b12      	lsrs	r2, r2, #12
 8000ae2:	e08e      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x102>
 8000ae8:	e0b8      	b.n	8000c5c <__aeabi_dadd+0x274>
 8000aea:	1c6b      	adds	r3, r5, #1
 8000aec:	055b      	lsls	r3, r3, #21
 8000aee:	0d5b      	lsrs	r3, r3, #21
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	dc00      	bgt.n	8000af6 <__aeabi_dadd+0x10e>
 8000af4:	e130      	b.n	8000d58 <__aeabi_dadd+0x370>
 8000af6:	1a87      	subs	r7, r0, r2
 8000af8:	4643      	mov	r3, r8
 8000afa:	42b8      	cmp	r0, r7
 8000afc:	41b6      	sbcs	r6, r6
 8000afe:	1acb      	subs	r3, r1, r3
 8000b00:	4276      	negs	r6, r6
 8000b02:	1b9e      	subs	r6, r3, r6
 8000b04:	0233      	lsls	r3, r6, #8
 8000b06:	d500      	bpl.n	8000b0a <__aeabi_dadd+0x122>
 8000b08:	e14c      	b.n	8000da4 <__aeabi_dadd+0x3bc>
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	4333      	orrs	r3, r6
 8000b0e:	d1a1      	bne.n	8000a54 <__aeabi_dadd+0x6c>
 8000b10:	2200      	movs	r2, #0
 8000b12:	2400      	movs	r4, #0
 8000b14:	2500      	movs	r5, #0
 8000b16:	e070      	b.n	8000bfa <__aeabi_dadd+0x212>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dc00      	bgt.n	8000b1e <__aeabi_dadd+0x136>
 8000b1c:	e0e5      	b.n	8000cea <__aeabi_dadd+0x302>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x13c>
 8000b22:	e083      	b.n	8000c2c <__aeabi_dadd+0x244>
 8000b24:	4eaf      	ldr	r6, [pc, #700]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000b26:	42b5      	cmp	r5, r6
 8000b28:	d060      	beq.n	8000bec <__aeabi_dadd+0x204>
 8000b2a:	2680      	movs	r6, #128	; 0x80
 8000b2c:	0436      	lsls	r6, r6, #16
 8000b2e:	4337      	orrs	r7, r6
 8000b30:	46b8      	mov	r8, r7
 8000b32:	2b38      	cmp	r3, #56	; 0x38
 8000b34:	dc00      	bgt.n	8000b38 <__aeabi_dadd+0x150>
 8000b36:	e13e      	b.n	8000db6 <__aeabi_dadd+0x3ce>
 8000b38:	4643      	mov	r3, r8
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	001f      	movs	r7, r3
 8000b3e:	1e7a      	subs	r2, r7, #1
 8000b40:	4197      	sbcs	r7, r2
 8000b42:	183f      	adds	r7, r7, r0
 8000b44:	4287      	cmp	r7, r0
 8000b46:	4180      	sbcs	r0, r0
 8000b48:	4240      	negs	r0, r0
 8000b4a:	1809      	adds	r1, r1, r0
 8000b4c:	020b      	lsls	r3, r1, #8
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_dadd+0x16a>
 8000b50:	e0b0      	b.n	8000cb4 <__aeabi_dadd+0x2cc>
 8000b52:	4ba4      	ldr	r3, [pc, #656]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000b54:	3501      	adds	r5, #1
 8000b56:	429d      	cmp	r5, r3
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x174>
 8000b5a:	e0c3      	b.n	8000ce4 <__aeabi_dadd+0x2fc>
 8000b5c:	4aa2      	ldr	r2, [pc, #648]	; (8000de8 <__aeabi_dadd+0x400>)
 8000b5e:	087b      	lsrs	r3, r7, #1
 8000b60:	400a      	ands	r2, r1
 8000b62:	2101      	movs	r1, #1
 8000b64:	400f      	ands	r7, r1
 8000b66:	431f      	orrs	r7, r3
 8000b68:	0851      	lsrs	r1, r2, #1
 8000b6a:	07d3      	lsls	r3, r2, #31
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	431f      	orrs	r7, r3
 8000b70:	403a      	ands	r2, r7
 8000b72:	e799      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000b74:	4e9b      	ldr	r6, [pc, #620]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000b76:	42b5      	cmp	r5, r6
 8000b78:	d038      	beq.n	8000bec <__aeabi_dadd+0x204>
 8000b7a:	2680      	movs	r6, #128	; 0x80
 8000b7c:	0436      	lsls	r6, r6, #16
 8000b7e:	4337      	orrs	r7, r6
 8000b80:	46b8      	mov	r8, r7
 8000b82:	2b38      	cmp	r3, #56	; 0x38
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dadd+0x1a0>
 8000b86:	e0dc      	b.n	8000d42 <__aeabi_dadd+0x35a>
 8000b88:	2b1f      	cmp	r3, #31
 8000b8a:	dc00      	bgt.n	8000b8e <__aeabi_dadd+0x1a6>
 8000b8c:	e130      	b.n	8000df0 <__aeabi_dadd+0x408>
 8000b8e:	001e      	movs	r6, r3
 8000b90:	4647      	mov	r7, r8
 8000b92:	3e20      	subs	r6, #32
 8000b94:	40f7      	lsrs	r7, r6
 8000b96:	46bc      	mov	ip, r7
 8000b98:	2b20      	cmp	r3, #32
 8000b9a:	d004      	beq.n	8000ba6 <__aeabi_dadd+0x1be>
 8000b9c:	2640      	movs	r6, #64	; 0x40
 8000b9e:	1af3      	subs	r3, r6, r3
 8000ba0:	4646      	mov	r6, r8
 8000ba2:	409e      	lsls	r6, r3
 8000ba4:	4332      	orrs	r2, r6
 8000ba6:	0017      	movs	r7, r2
 8000ba8:	4663      	mov	r3, ip
 8000baa:	1e7a      	subs	r2, r7, #1
 8000bac:	4197      	sbcs	r7, r2
 8000bae:	431f      	orrs	r7, r3
 8000bb0:	e0cc      	b.n	8000d4c <__aeabi_dadd+0x364>
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0x1d0>
 8000bb6:	e204      	b.n	8000fc2 <__aeabi_dadd+0x5da>
 8000bb8:	4643      	mov	r3, r8
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dadd+0x1d8>
 8000bbe:	e159      	b.n	8000e74 <__aeabi_dadd+0x48c>
 8000bc0:	074b      	lsls	r3, r1, #29
 8000bc2:	08c0      	lsrs	r0, r0, #3
 8000bc4:	4318      	orrs	r0, r3
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	08c9      	lsrs	r1, r1, #3
 8000bca:	031b      	lsls	r3, r3, #12
 8000bcc:	4219      	tst	r1, r3
 8000bce:	d008      	beq.n	8000be2 <__aeabi_dadd+0x1fa>
 8000bd0:	4645      	mov	r5, r8
 8000bd2:	08ed      	lsrs	r5, r5, #3
 8000bd4:	421d      	tst	r5, r3
 8000bd6:	d104      	bne.n	8000be2 <__aeabi_dadd+0x1fa>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	08d0      	lsrs	r0, r2, #3
 8000bdc:	0759      	lsls	r1, r3, #29
 8000bde:	4308      	orrs	r0, r1
 8000be0:	0029      	movs	r1, r5
 8000be2:	0f42      	lsrs	r2, r0, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	4d7f      	ldr	r5, [pc, #508]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000be8:	4311      	orrs	r1, r2
 8000bea:	00c0      	lsls	r0, r0, #3
 8000bec:	074b      	lsls	r3, r1, #29
 8000bee:	08ca      	lsrs	r2, r1, #3
 8000bf0:	497c      	ldr	r1, [pc, #496]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000bf2:	08c0      	lsrs	r0, r0, #3
 8000bf4:	4303      	orrs	r3, r0
 8000bf6:	428d      	cmp	r5, r1
 8000bf8:	d068      	beq.n	8000ccc <__aeabi_dadd+0x2e4>
 8000bfa:	0312      	lsls	r2, r2, #12
 8000bfc:	056d      	lsls	r5, r5, #21
 8000bfe:	0b12      	lsrs	r2, r2, #12
 8000c00:	0d6d      	lsrs	r5, r5, #21
 8000c02:	2100      	movs	r1, #0
 8000c04:	0312      	lsls	r2, r2, #12
 8000c06:	0018      	movs	r0, r3
 8000c08:	0b13      	lsrs	r3, r2, #12
 8000c0a:	0d0a      	lsrs	r2, r1, #20
 8000c0c:	0512      	lsls	r2, r2, #20
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	4b76      	ldr	r3, [pc, #472]	; (8000dec <__aeabi_dadd+0x404>)
 8000c12:	052d      	lsls	r5, r5, #20
 8000c14:	4013      	ands	r3, r2
 8000c16:	432b      	orrs	r3, r5
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	07e4      	lsls	r4, r4, #31
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	4323      	orrs	r3, r4
 8000c20:	0019      	movs	r1, r3
 8000c22:	bc1c      	pop	{r2, r3, r4}
 8000c24:	4690      	mov	r8, r2
 8000c26:	4699      	mov	r9, r3
 8000c28:	46a2      	mov	sl, r4
 8000c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2c:	003e      	movs	r6, r7
 8000c2e:	4316      	orrs	r6, r2
 8000c30:	d012      	beq.n	8000c58 <__aeabi_dadd+0x270>
 8000c32:	1e5e      	subs	r6, r3, #1
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_dadd+0x252>
 8000c38:	e100      	b.n	8000e3c <__aeabi_dadd+0x454>
 8000c3a:	1887      	adds	r7, r0, r2
 8000c3c:	4287      	cmp	r7, r0
 8000c3e:	4180      	sbcs	r0, r0
 8000c40:	4441      	add	r1, r8
 8000c42:	4240      	negs	r0, r0
 8000c44:	1809      	adds	r1, r1, r0
 8000c46:	2501      	movs	r5, #1
 8000c48:	020b      	lsls	r3, r1, #8
 8000c4a:	d533      	bpl.n	8000cb4 <__aeabi_dadd+0x2cc>
 8000c4c:	2502      	movs	r5, #2
 8000c4e:	e785      	b.n	8000b5c <__aeabi_dadd+0x174>
 8000c50:	4664      	mov	r4, ip
 8000c52:	0033      	movs	r3, r6
 8000c54:	4641      	mov	r1, r8
 8000c56:	0010      	movs	r0, r2
 8000c58:	001d      	movs	r5, r3
 8000c5a:	e7c7      	b.n	8000bec <__aeabi_dadd+0x204>
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_dadd+0x27a>
 8000c60:	e0da      	b.n	8000e18 <__aeabi_dadd+0x430>
 8000c62:	000c      	movs	r4, r1
 8000c64:	4304      	orrs	r4, r0
 8000c66:	d0f3      	beq.n	8000c50 <__aeabi_dadd+0x268>
 8000c68:	1c5c      	adds	r4, r3, #1
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x286>
 8000c6c:	e19f      	b.n	8000fae <__aeabi_dadd+0x5c6>
 8000c6e:	4c5d      	ldr	r4, [pc, #372]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dadd+0x28e>
 8000c74:	e12f      	b.n	8000ed6 <__aeabi_dadd+0x4ee>
 8000c76:	43db      	mvns	r3, r3
 8000c78:	2b38      	cmp	r3, #56	; 0x38
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dadd+0x296>
 8000c7c:	e166      	b.n	8000f4c <__aeabi_dadd+0x564>
 8000c7e:	2b1f      	cmp	r3, #31
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dadd+0x29c>
 8000c82:	e183      	b.n	8000f8c <__aeabi_dadd+0x5a4>
 8000c84:	2420      	movs	r4, #32
 8000c86:	0005      	movs	r5, r0
 8000c88:	1ae4      	subs	r4, r4, r3
 8000c8a:	000f      	movs	r7, r1
 8000c8c:	40dd      	lsrs	r5, r3
 8000c8e:	40d9      	lsrs	r1, r3
 8000c90:	40a0      	lsls	r0, r4
 8000c92:	4643      	mov	r3, r8
 8000c94:	40a7      	lsls	r7, r4
 8000c96:	1a5b      	subs	r3, r3, r1
 8000c98:	1e44      	subs	r4, r0, #1
 8000c9a:	41a0      	sbcs	r0, r4
 8000c9c:	4698      	mov	r8, r3
 8000c9e:	432f      	orrs	r7, r5
 8000ca0:	4338      	orrs	r0, r7
 8000ca2:	1a17      	subs	r7, r2, r0
 8000ca4:	42ba      	cmp	r2, r7
 8000ca6:	4192      	sbcs	r2, r2
 8000ca8:	4643      	mov	r3, r8
 8000caa:	4252      	negs	r2, r2
 8000cac:	1a99      	subs	r1, r3, r2
 8000cae:	4664      	mov	r4, ip
 8000cb0:	0035      	movs	r5, r6
 8000cb2:	e6ca      	b.n	8000a4a <__aeabi_dadd+0x62>
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	403a      	ands	r2, r7
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dadd+0x2d6>
 8000cbc:	e6f6      	b.n	8000aac <__aeabi_dadd+0xc4>
 8000cbe:	074b      	lsls	r3, r1, #29
 8000cc0:	08ca      	lsrs	r2, r1, #3
 8000cc2:	4948      	ldr	r1, [pc, #288]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000cc4:	08ff      	lsrs	r7, r7, #3
 8000cc6:	433b      	orrs	r3, r7
 8000cc8:	428d      	cmp	r5, r1
 8000cca:	d196      	bne.n	8000bfa <__aeabi_dadd+0x212>
 8000ccc:	0019      	movs	r1, r3
 8000cce:	4311      	orrs	r1, r2
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x2ec>
 8000cd2:	e19e      	b.n	8001012 <__aeabi_dadd+0x62a>
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0309      	lsls	r1, r1, #12
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	0312      	lsls	r2, r2, #12
 8000cdc:	0b12      	lsrs	r2, r2, #12
 8000cde:	4d41      	ldr	r5, [pc, #260]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000ce0:	e78f      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000ce2:	0015      	movs	r5, r2
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e78b      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_dadd+0x308>
 8000cee:	e0c7      	b.n	8000e80 <__aeabi_dadd+0x498>
 8000cf0:	1c6b      	adds	r3, r5, #1
 8000cf2:	055f      	lsls	r7, r3, #21
 8000cf4:	0d7f      	lsrs	r7, r7, #21
 8000cf6:	2f01      	cmp	r7, #1
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_dadd+0x314>
 8000cfa:	e0f1      	b.n	8000ee0 <__aeabi_dadd+0x4f8>
 8000cfc:	4d39      	ldr	r5, [pc, #228]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000cfe:	42ab      	cmp	r3, r5
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x31c>
 8000d02:	e0b9      	b.n	8000e78 <__aeabi_dadd+0x490>
 8000d04:	1885      	adds	r5, r0, r2
 8000d06:	000a      	movs	r2, r1
 8000d08:	4285      	cmp	r5, r0
 8000d0a:	4189      	sbcs	r1, r1
 8000d0c:	4442      	add	r2, r8
 8000d0e:	4249      	negs	r1, r1
 8000d10:	1851      	adds	r1, r2, r1
 8000d12:	2207      	movs	r2, #7
 8000d14:	07cf      	lsls	r7, r1, #31
 8000d16:	086d      	lsrs	r5, r5, #1
 8000d18:	432f      	orrs	r7, r5
 8000d1a:	0849      	lsrs	r1, r1, #1
 8000d1c:	403a      	ands	r2, r7
 8000d1e:	001d      	movs	r5, r3
 8000d20:	e6c2      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000d22:	2207      	movs	r2, #7
 8000d24:	4930      	ldr	r1, [pc, #192]	; (8000de8 <__aeabi_dadd+0x400>)
 8000d26:	1aed      	subs	r5, r5, r3
 8000d28:	4031      	ands	r1, r6
 8000d2a:	403a      	ands	r2, r7
 8000d2c:	e6bc      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000d2e:	003e      	movs	r6, r7
 8000d30:	3828      	subs	r0, #40	; 0x28
 8000d32:	4086      	lsls	r6, r0
 8000d34:	2700      	movs	r7, #0
 8000d36:	e69f      	b.n	8000a78 <__aeabi_dadd+0x90>
 8000d38:	0038      	movs	r0, r7
 8000d3a:	f001 fc61 	bl	8002600 <__clzsi2>
 8000d3e:	3020      	adds	r0, #32
 8000d40:	e68e      	b.n	8000a60 <__aeabi_dadd+0x78>
 8000d42:	4643      	mov	r3, r8
 8000d44:	4313      	orrs	r3, r2
 8000d46:	001f      	movs	r7, r3
 8000d48:	1e7a      	subs	r2, r7, #1
 8000d4a:	4197      	sbcs	r7, r2
 8000d4c:	1bc7      	subs	r7, r0, r7
 8000d4e:	42b8      	cmp	r0, r7
 8000d50:	4180      	sbcs	r0, r0
 8000d52:	4240      	negs	r0, r0
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	e678      	b.n	8000a4a <__aeabi_dadd+0x62>
 8000d58:	000e      	movs	r6, r1
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	4306      	orrs	r6, r0
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d161      	bne.n	8000e28 <__aeabi_dadd+0x440>
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d000      	beq.n	8000d6a <__aeabi_dadd+0x382>
 8000d68:	e0f4      	b.n	8000f54 <__aeabi_dadd+0x56c>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x388>
 8000d6e:	e11b      	b.n	8000fa8 <__aeabi_dadd+0x5c0>
 8000d70:	4664      	mov	r4, ip
 8000d72:	0039      	movs	r1, r7
 8000d74:	0010      	movs	r0, r2
 8000d76:	e739      	b.n	8000bec <__aeabi_dadd+0x204>
 8000d78:	4f1a      	ldr	r7, [pc, #104]	; (8000de4 <__aeabi_dadd+0x3fc>)
 8000d7a:	42bb      	cmp	r3, r7
 8000d7c:	d07a      	beq.n	8000e74 <__aeabi_dadd+0x48c>
 8000d7e:	0033      	movs	r3, r6
 8000d80:	e6ff      	b.n	8000b82 <__aeabi_dadd+0x19a>
 8000d82:	0030      	movs	r0, r6
 8000d84:	3d1f      	subs	r5, #31
 8000d86:	40e8      	lsrs	r0, r5
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d003      	beq.n	8000d94 <__aeabi_dadd+0x3ac>
 8000d8c:	2140      	movs	r1, #64	; 0x40
 8000d8e:	1acb      	subs	r3, r1, r3
 8000d90:	409e      	lsls	r6, r3
 8000d92:	4337      	orrs	r7, r6
 8000d94:	1e7b      	subs	r3, r7, #1
 8000d96:	419f      	sbcs	r7, r3
 8000d98:	2207      	movs	r2, #7
 8000d9a:	4307      	orrs	r7, r0
 8000d9c:	403a      	ands	r2, r7
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	e789      	b.n	8000cb8 <__aeabi_dadd+0x2d0>
 8000da4:	1a17      	subs	r7, r2, r0
 8000da6:	4643      	mov	r3, r8
 8000da8:	42ba      	cmp	r2, r7
 8000daa:	41b6      	sbcs	r6, r6
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	4276      	negs	r6, r6
 8000db0:	1b8e      	subs	r6, r1, r6
 8000db2:	4664      	mov	r4, ip
 8000db4:	e64e      	b.n	8000a54 <__aeabi_dadd+0x6c>
 8000db6:	2b1f      	cmp	r3, #31
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_dadd+0x3d4>
 8000dba:	e0ad      	b.n	8000f18 <__aeabi_dadd+0x530>
 8000dbc:	2620      	movs	r6, #32
 8000dbe:	4647      	mov	r7, r8
 8000dc0:	1af6      	subs	r6, r6, r3
 8000dc2:	40b7      	lsls	r7, r6
 8000dc4:	46b9      	mov	r9, r7
 8000dc6:	0017      	movs	r7, r2
 8000dc8:	46b2      	mov	sl, r6
 8000dca:	40df      	lsrs	r7, r3
 8000dcc:	464e      	mov	r6, r9
 8000dce:	433e      	orrs	r6, r7
 8000dd0:	0037      	movs	r7, r6
 8000dd2:	4656      	mov	r6, sl
 8000dd4:	40b2      	lsls	r2, r6
 8000dd6:	1e56      	subs	r6, r2, #1
 8000dd8:	41b2      	sbcs	r2, r6
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	4642      	mov	r2, r8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	1889      	adds	r1, r1, r2
 8000de2:	e6ae      	b.n	8000b42 <__aeabi_dadd+0x15a>
 8000de4:	000007ff 	.word	0x000007ff
 8000de8:	ff7fffff 	.word	0xff7fffff
 8000dec:	800fffff 	.word	0x800fffff
 8000df0:	2620      	movs	r6, #32
 8000df2:	4647      	mov	r7, r8
 8000df4:	1af6      	subs	r6, r6, r3
 8000df6:	40b7      	lsls	r7, r6
 8000df8:	46b9      	mov	r9, r7
 8000dfa:	0017      	movs	r7, r2
 8000dfc:	46b2      	mov	sl, r6
 8000dfe:	40df      	lsrs	r7, r3
 8000e00:	464e      	mov	r6, r9
 8000e02:	433e      	orrs	r6, r7
 8000e04:	0037      	movs	r7, r6
 8000e06:	4656      	mov	r6, sl
 8000e08:	40b2      	lsls	r2, r6
 8000e0a:	1e56      	subs	r6, r2, #1
 8000e0c:	41b2      	sbcs	r2, r6
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	4642      	mov	r2, r8
 8000e12:	40da      	lsrs	r2, r3
 8000e14:	1a89      	subs	r1, r1, r2
 8000e16:	e799      	b.n	8000d4c <__aeabi_dadd+0x364>
 8000e18:	4c7f      	ldr	r4, [pc, #508]	; (8001018 <__aeabi_dadd+0x630>)
 8000e1a:	42a6      	cmp	r6, r4
 8000e1c:	d05b      	beq.n	8000ed6 <__aeabi_dadd+0x4ee>
 8000e1e:	2480      	movs	r4, #128	; 0x80
 8000e20:	0424      	lsls	r4, r4, #16
 8000e22:	425b      	negs	r3, r3
 8000e24:	4321      	orrs	r1, r4
 8000e26:	e727      	b.n	8000c78 <__aeabi_dadd+0x290>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d10c      	bne.n	8000e46 <__aeabi_dadd+0x45e>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x44a>
 8000e30:	e0cb      	b.n	8000fca <__aeabi_dadd+0x5e2>
 8000e32:	4664      	mov	r4, ip
 8000e34:	0039      	movs	r1, r7
 8000e36:	0010      	movs	r0, r2
 8000e38:	4d77      	ldr	r5, [pc, #476]	; (8001018 <__aeabi_dadd+0x630>)
 8000e3a:	e6d7      	b.n	8000bec <__aeabi_dadd+0x204>
 8000e3c:	4f76      	ldr	r7, [pc, #472]	; (8001018 <__aeabi_dadd+0x630>)
 8000e3e:	42bb      	cmp	r3, r7
 8000e40:	d018      	beq.n	8000e74 <__aeabi_dadd+0x48c>
 8000e42:	0033      	movs	r3, r6
 8000e44:	e675      	b.n	8000b32 <__aeabi_dadd+0x14a>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d014      	beq.n	8000e74 <__aeabi_dadd+0x48c>
 8000e4a:	074b      	lsls	r3, r1, #29
 8000e4c:	08c0      	lsrs	r0, r0, #3
 8000e4e:	4318      	orrs	r0, r3
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	08c9      	lsrs	r1, r1, #3
 8000e54:	031b      	lsls	r3, r3, #12
 8000e56:	4219      	tst	r1, r3
 8000e58:	d007      	beq.n	8000e6a <__aeabi_dadd+0x482>
 8000e5a:	08fc      	lsrs	r4, r7, #3
 8000e5c:	421c      	tst	r4, r3
 8000e5e:	d104      	bne.n	8000e6a <__aeabi_dadd+0x482>
 8000e60:	0779      	lsls	r1, r7, #29
 8000e62:	08d0      	lsrs	r0, r2, #3
 8000e64:	4308      	orrs	r0, r1
 8000e66:	46e1      	mov	r9, ip
 8000e68:	0021      	movs	r1, r4
 8000e6a:	464c      	mov	r4, r9
 8000e6c:	0f42      	lsrs	r2, r0, #29
 8000e6e:	00c9      	lsls	r1, r1, #3
 8000e70:	4311      	orrs	r1, r2
 8000e72:	00c0      	lsls	r0, r0, #3
 8000e74:	4d68      	ldr	r5, [pc, #416]	; (8001018 <__aeabi_dadd+0x630>)
 8000e76:	e6b9      	b.n	8000bec <__aeabi_dadd+0x204>
 8000e78:	001d      	movs	r5, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e6c0      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d15b      	bne.n	8000f3c <__aeabi_dadd+0x554>
 8000e84:	000d      	movs	r5, r1
 8000e86:	4305      	orrs	r5, r0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dadd+0x4a4>
 8000e8a:	e6e2      	b.n	8000c52 <__aeabi_dadd+0x26a>
 8000e8c:	1c5d      	adds	r5, r3, #1
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_dadd+0x4aa>
 8000e90:	e0b0      	b.n	8000ff4 <__aeabi_dadd+0x60c>
 8000e92:	4d61      	ldr	r5, [pc, #388]	; (8001018 <__aeabi_dadd+0x630>)
 8000e94:	42ae      	cmp	r6, r5
 8000e96:	d01f      	beq.n	8000ed8 <__aeabi_dadd+0x4f0>
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	2b38      	cmp	r3, #56	; 0x38
 8000e9c:	dc71      	bgt.n	8000f82 <__aeabi_dadd+0x59a>
 8000e9e:	2b1f      	cmp	r3, #31
 8000ea0:	dd00      	ble.n	8000ea4 <__aeabi_dadd+0x4bc>
 8000ea2:	e096      	b.n	8000fd2 <__aeabi_dadd+0x5ea>
 8000ea4:	2520      	movs	r5, #32
 8000ea6:	000f      	movs	r7, r1
 8000ea8:	1aed      	subs	r5, r5, r3
 8000eaa:	40af      	lsls	r7, r5
 8000eac:	46b9      	mov	r9, r7
 8000eae:	0007      	movs	r7, r0
 8000eb0:	46aa      	mov	sl, r5
 8000eb2:	40df      	lsrs	r7, r3
 8000eb4:	464d      	mov	r5, r9
 8000eb6:	433d      	orrs	r5, r7
 8000eb8:	002f      	movs	r7, r5
 8000eba:	4655      	mov	r5, sl
 8000ebc:	40a8      	lsls	r0, r5
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	1e45      	subs	r5, r0, #1
 8000ec2:	41a8      	sbcs	r0, r5
 8000ec4:	4488      	add	r8, r1
 8000ec6:	4307      	orrs	r7, r0
 8000ec8:	18bf      	adds	r7, r7, r2
 8000eca:	4297      	cmp	r7, r2
 8000ecc:	4192      	sbcs	r2, r2
 8000ece:	4251      	negs	r1, r2
 8000ed0:	4441      	add	r1, r8
 8000ed2:	0035      	movs	r5, r6
 8000ed4:	e63a      	b.n	8000b4c <__aeabi_dadd+0x164>
 8000ed6:	4664      	mov	r4, ip
 8000ed8:	0035      	movs	r5, r6
 8000eda:	4641      	mov	r1, r8
 8000edc:	0010      	movs	r0, r2
 8000ede:	e685      	b.n	8000bec <__aeabi_dadd+0x204>
 8000ee0:	000b      	movs	r3, r1
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x502>
 8000ee8:	e663      	b.n	8000bb2 <__aeabi_dadd+0x1ca>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f5      	beq.n	8000eda <__aeabi_dadd+0x4f2>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x50e>
 8000ef4:	e67a      	b.n	8000bec <__aeabi_dadd+0x204>
 8000ef6:	1887      	adds	r7, r0, r2
 8000ef8:	4287      	cmp	r7, r0
 8000efa:	4180      	sbcs	r0, r0
 8000efc:	2207      	movs	r2, #7
 8000efe:	4441      	add	r1, r8
 8000f00:	4240      	negs	r0, r0
 8000f02:	1809      	adds	r1, r1, r0
 8000f04:	403a      	ands	r2, r7
 8000f06:	020b      	lsls	r3, r1, #8
 8000f08:	d400      	bmi.n	8000f0c <__aeabi_dadd+0x524>
 8000f0a:	e6d5      	b.n	8000cb8 <__aeabi_dadd+0x2d0>
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <__aeabi_dadd+0x634>)
 8000f0e:	3501      	adds	r5, #1
 8000f10:	4019      	ands	r1, r3
 8000f12:	e5c9      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000f14:	0038      	movs	r0, r7
 8000f16:	e669      	b.n	8000bec <__aeabi_dadd+0x204>
 8000f18:	001e      	movs	r6, r3
 8000f1a:	4647      	mov	r7, r8
 8000f1c:	3e20      	subs	r6, #32
 8000f1e:	40f7      	lsrs	r7, r6
 8000f20:	46bc      	mov	ip, r7
 8000f22:	2b20      	cmp	r3, #32
 8000f24:	d004      	beq.n	8000f30 <__aeabi_dadd+0x548>
 8000f26:	2640      	movs	r6, #64	; 0x40
 8000f28:	1af3      	subs	r3, r6, r3
 8000f2a:	4646      	mov	r6, r8
 8000f2c:	409e      	lsls	r6, r3
 8000f2e:	4332      	orrs	r2, r6
 8000f30:	0017      	movs	r7, r2
 8000f32:	4663      	mov	r3, ip
 8000f34:	1e7a      	subs	r2, r7, #1
 8000f36:	4197      	sbcs	r7, r2
 8000f38:	431f      	orrs	r7, r3
 8000f3a:	e602      	b.n	8000b42 <__aeabi_dadd+0x15a>
 8000f3c:	4d36      	ldr	r5, [pc, #216]	; (8001018 <__aeabi_dadd+0x630>)
 8000f3e:	42ae      	cmp	r6, r5
 8000f40:	d0ca      	beq.n	8000ed8 <__aeabi_dadd+0x4f0>
 8000f42:	2580      	movs	r5, #128	; 0x80
 8000f44:	042d      	lsls	r5, r5, #16
 8000f46:	425b      	negs	r3, r3
 8000f48:	4329      	orrs	r1, r5
 8000f4a:	e7a6      	b.n	8000e9a <__aeabi_dadd+0x4b2>
 8000f4c:	4308      	orrs	r0, r1
 8000f4e:	1e41      	subs	r1, r0, #1
 8000f50:	4188      	sbcs	r0, r1
 8000f52:	e6a6      	b.n	8000ca2 <__aeabi_dadd+0x2ba>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dadd+0x572>
 8000f58:	e648      	b.n	8000bec <__aeabi_dadd+0x204>
 8000f5a:	1a87      	subs	r7, r0, r2
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	42b8      	cmp	r0, r7
 8000f60:	41b6      	sbcs	r6, r6
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	4276      	negs	r6, r6
 8000f66:	1b9e      	subs	r6, r3, r6
 8000f68:	0233      	lsls	r3, r6, #8
 8000f6a:	d54b      	bpl.n	8001004 <__aeabi_dadd+0x61c>
 8000f6c:	1a17      	subs	r7, r2, r0
 8000f6e:	4643      	mov	r3, r8
 8000f70:	42ba      	cmp	r2, r7
 8000f72:	4192      	sbcs	r2, r2
 8000f74:	1a59      	subs	r1, r3, r1
 8000f76:	4252      	negs	r2, r2
 8000f78:	1a89      	subs	r1, r1, r2
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	4664      	mov	r4, ip
 8000f7e:	403a      	ands	r2, r7
 8000f80:	e592      	b.n	8000aa8 <__aeabi_dadd+0xc0>
 8000f82:	4301      	orrs	r1, r0
 8000f84:	000f      	movs	r7, r1
 8000f86:	1e79      	subs	r1, r7, #1
 8000f88:	418f      	sbcs	r7, r1
 8000f8a:	e79d      	b.n	8000ec8 <__aeabi_dadd+0x4e0>
 8000f8c:	001c      	movs	r4, r3
 8000f8e:	000f      	movs	r7, r1
 8000f90:	3c20      	subs	r4, #32
 8000f92:	40e7      	lsrs	r7, r4
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	d003      	beq.n	8000fa0 <__aeabi_dadd+0x5b8>
 8000f98:	2440      	movs	r4, #64	; 0x40
 8000f9a:	1ae3      	subs	r3, r4, r3
 8000f9c:	4099      	lsls	r1, r3
 8000f9e:	4308      	orrs	r0, r1
 8000fa0:	1e41      	subs	r1, r0, #1
 8000fa2:	4188      	sbcs	r0, r1
 8000fa4:	4338      	orrs	r0, r7
 8000fa6:	e67c      	b.n	8000ca2 <__aeabi_dadd+0x2ba>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2400      	movs	r4, #0
 8000fac:	e625      	b.n	8000bfa <__aeabi_dadd+0x212>
 8000fae:	1a17      	subs	r7, r2, r0
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	42ba      	cmp	r2, r7
 8000fb4:	4192      	sbcs	r2, r2
 8000fb6:	1a59      	subs	r1, r3, r1
 8000fb8:	4252      	negs	r2, r2
 8000fba:	1a89      	subs	r1, r1, r2
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	0035      	movs	r5, r6
 8000fc0:	e543      	b.n	8000a4a <__aeabi_dadd+0x62>
 8000fc2:	4641      	mov	r1, r8
 8000fc4:	0010      	movs	r0, r2
 8000fc6:	4d14      	ldr	r5, [pc, #80]	; (8001018 <__aeabi_dadd+0x630>)
 8000fc8:	e610      	b.n	8000bec <__aeabi_dadd+0x204>
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	2400      	movs	r4, #0
 8000fce:	0312      	lsls	r2, r2, #12
 8000fd0:	e680      	b.n	8000cd4 <__aeabi_dadd+0x2ec>
 8000fd2:	001d      	movs	r5, r3
 8000fd4:	000f      	movs	r7, r1
 8000fd6:	3d20      	subs	r5, #32
 8000fd8:	40ef      	lsrs	r7, r5
 8000fda:	46bc      	mov	ip, r7
 8000fdc:	2b20      	cmp	r3, #32
 8000fde:	d003      	beq.n	8000fe8 <__aeabi_dadd+0x600>
 8000fe0:	2540      	movs	r5, #64	; 0x40
 8000fe2:	1aeb      	subs	r3, r5, r3
 8000fe4:	4099      	lsls	r1, r3
 8000fe6:	4308      	orrs	r0, r1
 8000fe8:	0007      	movs	r7, r0
 8000fea:	4663      	mov	r3, ip
 8000fec:	1e78      	subs	r0, r7, #1
 8000fee:	4187      	sbcs	r7, r0
 8000ff0:	431f      	orrs	r7, r3
 8000ff2:	e769      	b.n	8000ec8 <__aeabi_dadd+0x4e0>
 8000ff4:	1887      	adds	r7, r0, r2
 8000ff6:	4297      	cmp	r7, r2
 8000ff8:	419b      	sbcs	r3, r3
 8000ffa:	4441      	add	r1, r8
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	18c9      	adds	r1, r1, r3
 8001000:	0035      	movs	r5, r6
 8001002:	e5a3      	b.n	8000b4c <__aeabi_dadd+0x164>
 8001004:	003b      	movs	r3, r7
 8001006:	4333      	orrs	r3, r6
 8001008:	d0ce      	beq.n	8000fa8 <__aeabi_dadd+0x5c0>
 800100a:	2207      	movs	r2, #7
 800100c:	0031      	movs	r1, r6
 800100e:	403a      	ands	r2, r7
 8001010:	e652      	b.n	8000cb8 <__aeabi_dadd+0x2d0>
 8001012:	2300      	movs	r3, #0
 8001014:	001a      	movs	r2, r3
 8001016:	e5f4      	b.n	8000c02 <__aeabi_dadd+0x21a>
 8001018:	000007ff 	.word	0x000007ff
 800101c:	ff7fffff 	.word	0xff7fffff

08001020 <__aeabi_ddiv>:
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	4657      	mov	r7, sl
 8001024:	46de      	mov	lr, fp
 8001026:	464e      	mov	r6, r9
 8001028:	4645      	mov	r5, r8
 800102a:	b5e0      	push	{r5, r6, r7, lr}
 800102c:	4683      	mov	fp, r0
 800102e:	0007      	movs	r7, r0
 8001030:	030e      	lsls	r6, r1, #12
 8001032:	0048      	lsls	r0, r1, #1
 8001034:	b085      	sub	sp, #20
 8001036:	4692      	mov	sl, r2
 8001038:	001c      	movs	r4, r3
 800103a:	0b36      	lsrs	r6, r6, #12
 800103c:	0d40      	lsrs	r0, r0, #21
 800103e:	0fcd      	lsrs	r5, r1, #31
 8001040:	2800      	cmp	r0, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x26>
 8001044:	e09d      	b.n	8001182 <__aeabi_ddiv+0x162>
 8001046:	4b95      	ldr	r3, [pc, #596]	; (800129c <__aeabi_ddiv+0x27c>)
 8001048:	4298      	cmp	r0, r3
 800104a:	d039      	beq.n	80010c0 <__aeabi_ddiv+0xa0>
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	00f6      	lsls	r6, r6, #3
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	431e      	orrs	r6, r3
 8001054:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <__aeabi_ddiv+0x280>)
 8001056:	0f7b      	lsrs	r3, r7, #29
 8001058:	4333      	orrs	r3, r6
 800105a:	4699      	mov	r9, r3
 800105c:	4694      	mov	ip, r2
 800105e:	0003      	movs	r3, r0
 8001060:	4463      	add	r3, ip
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2600      	movs	r6, #0
 8001068:	00ff      	lsls	r7, r7, #3
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	0323      	lsls	r3, r4, #12
 800106e:	0b1b      	lsrs	r3, r3, #12
 8001070:	4698      	mov	r8, r3
 8001072:	0063      	lsls	r3, r4, #1
 8001074:	0fe4      	lsrs	r4, r4, #31
 8001076:	4652      	mov	r2, sl
 8001078:	0d5b      	lsrs	r3, r3, #21
 800107a:	9401      	str	r4, [sp, #4]
 800107c:	d100      	bne.n	8001080 <__aeabi_ddiv+0x60>
 800107e:	e0b3      	b.n	80011e8 <__aeabi_ddiv+0x1c8>
 8001080:	4986      	ldr	r1, [pc, #536]	; (800129c <__aeabi_ddiv+0x27c>)
 8001082:	428b      	cmp	r3, r1
 8001084:	d100      	bne.n	8001088 <__aeabi_ddiv+0x68>
 8001086:	e09e      	b.n	80011c6 <__aeabi_ddiv+0x1a6>
 8001088:	4642      	mov	r2, r8
 800108a:	00d1      	lsls	r1, r2, #3
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0412      	lsls	r2, r2, #16
 8001090:	430a      	orrs	r2, r1
 8001092:	4651      	mov	r1, sl
 8001094:	0f49      	lsrs	r1, r1, #29
 8001096:	4311      	orrs	r1, r2
 8001098:	468b      	mov	fp, r1
 800109a:	4981      	ldr	r1, [pc, #516]	; (80012a0 <__aeabi_ddiv+0x280>)
 800109c:	4652      	mov	r2, sl
 800109e:	468c      	mov	ip, r1
 80010a0:	9900      	ldr	r1, [sp, #0]
 80010a2:	4463      	add	r3, ip
 80010a4:	1acb      	subs	r3, r1, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	002b      	movs	r3, r5
 80010ae:	4063      	eors	r3, r4
 80010b0:	469a      	mov	sl, r3
 80010b2:	2e0f      	cmp	r6, #15
 80010b4:	d900      	bls.n	80010b8 <__aeabi_ddiv+0x98>
 80010b6:	e105      	b.n	80012c4 <__aeabi_ddiv+0x2a4>
 80010b8:	4b7a      	ldr	r3, [pc, #488]	; (80012a4 <__aeabi_ddiv+0x284>)
 80010ba:	00b6      	lsls	r6, r6, #2
 80010bc:	599b      	ldr	r3, [r3, r6]
 80010be:	469f      	mov	pc, r3
 80010c0:	465b      	mov	r3, fp
 80010c2:	4333      	orrs	r3, r6
 80010c4:	4699      	mov	r9, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_ddiv+0xaa>
 80010c8:	e0b8      	b.n	800123c <__aeabi_ddiv+0x21c>
 80010ca:	2302      	movs	r3, #2
 80010cc:	2608      	movs	r6, #8
 80010ce:	2700      	movs	r7, #0
 80010d0:	9000      	str	r0, [sp, #0]
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	e7ca      	b.n	800106c <__aeabi_ddiv+0x4c>
 80010d6:	46cb      	mov	fp, r9
 80010d8:	003a      	movs	r2, r7
 80010da:	9902      	ldr	r1, [sp, #8]
 80010dc:	9501      	str	r5, [sp, #4]
 80010de:	9b01      	ldr	r3, [sp, #4]
 80010e0:	469a      	mov	sl, r3
 80010e2:	2902      	cmp	r1, #2
 80010e4:	d027      	beq.n	8001136 <__aeabi_ddiv+0x116>
 80010e6:	2903      	cmp	r1, #3
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0xcc>
 80010ea:	e280      	b.n	80015ee <__aeabi_ddiv+0x5ce>
 80010ec:	2901      	cmp	r1, #1
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x15a>
 80010f0:	496d      	ldr	r1, [pc, #436]	; (80012a8 <__aeabi_ddiv+0x288>)
 80010f2:	9b00      	ldr	r3, [sp, #0]
 80010f4:	468c      	mov	ip, r1
 80010f6:	4463      	add	r3, ip
 80010f8:	001c      	movs	r4, r3
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	dd38      	ble.n	8001170 <__aeabi_ddiv+0x150>
 80010fe:	0753      	lsls	r3, r2, #29
 8001100:	d000      	beq.n	8001104 <__aeabi_ddiv+0xe4>
 8001102:	e213      	b.n	800152c <__aeabi_ddiv+0x50c>
 8001104:	08d2      	lsrs	r2, r2, #3
 8001106:	465b      	mov	r3, fp
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	d509      	bpl.n	8001120 <__aeabi_ddiv+0x100>
 800110c:	4659      	mov	r1, fp
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <__aeabi_ddiv+0x28c>)
 8001110:	4019      	ands	r1, r3
 8001112:	468b      	mov	fp, r1
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	00c9      	lsls	r1, r1, #3
 8001118:	468c      	mov	ip, r1
 800111a:	9b00      	ldr	r3, [sp, #0]
 800111c:	4463      	add	r3, ip
 800111e:	001c      	movs	r4, r3
 8001120:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <__aeabi_ddiv+0x290>)
 8001122:	429c      	cmp	r4, r3
 8001124:	dc07      	bgt.n	8001136 <__aeabi_ddiv+0x116>
 8001126:	465b      	mov	r3, fp
 8001128:	0564      	lsls	r4, r4, #21
 800112a:	075f      	lsls	r7, r3, #29
 800112c:	025b      	lsls	r3, r3, #9
 800112e:	4317      	orrs	r7, r2
 8001130:	0b1b      	lsrs	r3, r3, #12
 8001132:	0d62      	lsrs	r2, r4, #21
 8001134:	e002      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001136:	2300      	movs	r3, #0
 8001138:	2700      	movs	r7, #0
 800113a:	4a58      	ldr	r2, [pc, #352]	; (800129c <__aeabi_ddiv+0x27c>)
 800113c:	2100      	movs	r1, #0
 800113e:	031b      	lsls	r3, r3, #12
 8001140:	0b1c      	lsrs	r4, r3, #12
 8001142:	0d0b      	lsrs	r3, r1, #20
 8001144:	051b      	lsls	r3, r3, #20
 8001146:	4323      	orrs	r3, r4
 8001148:	0514      	lsls	r4, r2, #20
 800114a:	4a5a      	ldr	r2, [pc, #360]	; (80012b4 <__aeabi_ddiv+0x294>)
 800114c:	0038      	movs	r0, r7
 800114e:	4013      	ands	r3, r2
 8001150:	431c      	orrs	r4, r3
 8001152:	4653      	mov	r3, sl
 8001154:	0064      	lsls	r4, r4, #1
 8001156:	07db      	lsls	r3, r3, #31
 8001158:	0864      	lsrs	r4, r4, #1
 800115a:	431c      	orrs	r4, r3
 800115c:	0021      	movs	r1, r4
 800115e:	b005      	add	sp, #20
 8001160:	bc3c      	pop	{r2, r3, r4, r5}
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	46a2      	mov	sl, r4
 8001168:	46ab      	mov	fp, r5
 800116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116c:	2201      	movs	r2, #1
 800116e:	4252      	negs	r2, r2
 8001170:	2301      	movs	r3, #1
 8001172:	1b1b      	subs	r3, r3, r4
 8001174:	2b38      	cmp	r3, #56	; 0x38
 8001176:	dc00      	bgt.n	800117a <__aeabi_ddiv+0x15a>
 8001178:	e1ad      	b.n	80014d6 <__aeabi_ddiv+0x4b6>
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	2700      	movs	r7, #0
 8001180:	e7dc      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001182:	465b      	mov	r3, fp
 8001184:	4333      	orrs	r3, r6
 8001186:	4699      	mov	r9, r3
 8001188:	d05e      	beq.n	8001248 <__aeabi_ddiv+0x228>
 800118a:	2e00      	cmp	r6, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_ddiv+0x170>
 800118e:	e18a      	b.n	80014a6 <__aeabi_ddiv+0x486>
 8001190:	0030      	movs	r0, r6
 8001192:	f001 fa35 	bl	8002600 <__clzsi2>
 8001196:	0003      	movs	r3, r0
 8001198:	3b0b      	subs	r3, #11
 800119a:	2b1c      	cmp	r3, #28
 800119c:	dd00      	ble.n	80011a0 <__aeabi_ddiv+0x180>
 800119e:	e17b      	b.n	8001498 <__aeabi_ddiv+0x478>
 80011a0:	221d      	movs	r2, #29
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	465a      	mov	r2, fp
 80011a6:	0001      	movs	r1, r0
 80011a8:	40da      	lsrs	r2, r3
 80011aa:	3908      	subs	r1, #8
 80011ac:	408e      	lsls	r6, r1
 80011ae:	0013      	movs	r3, r2
 80011b0:	465f      	mov	r7, fp
 80011b2:	4333      	orrs	r3, r6
 80011b4:	4699      	mov	r9, r3
 80011b6:	408f      	lsls	r7, r1
 80011b8:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <__aeabi_ddiv+0x298>)
 80011ba:	2600      	movs	r6, #0
 80011bc:	1a1b      	subs	r3, r3, r0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	e752      	b.n	800106c <__aeabi_ddiv+0x4c>
 80011c6:	4641      	mov	r1, r8
 80011c8:	4653      	mov	r3, sl
 80011ca:	430b      	orrs	r3, r1
 80011cc:	493b      	ldr	r1, [pc, #236]	; (80012bc <__aeabi_ddiv+0x29c>)
 80011ce:	469b      	mov	fp, r3
 80011d0:	468c      	mov	ip, r1
 80011d2:	9b00      	ldr	r3, [sp, #0]
 80011d4:	4463      	add	r3, ip
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	465b      	mov	r3, fp
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d13b      	bne.n	8001256 <__aeabi_ddiv+0x236>
 80011de:	2302      	movs	r3, #2
 80011e0:	2200      	movs	r2, #0
 80011e2:	431e      	orrs	r6, r3
 80011e4:	2102      	movs	r1, #2
 80011e6:	e761      	b.n	80010ac <__aeabi_ddiv+0x8c>
 80011e8:	4643      	mov	r3, r8
 80011ea:	4313      	orrs	r3, r2
 80011ec:	469b      	mov	fp, r3
 80011ee:	d037      	beq.n	8001260 <__aeabi_ddiv+0x240>
 80011f0:	4643      	mov	r3, r8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x1d8>
 80011f6:	e162      	b.n	80014be <__aeabi_ddiv+0x49e>
 80011f8:	4640      	mov	r0, r8
 80011fa:	f001 fa01 	bl	8002600 <__clzsi2>
 80011fe:	0003      	movs	r3, r0
 8001200:	3b0b      	subs	r3, #11
 8001202:	2b1c      	cmp	r3, #28
 8001204:	dd00      	ble.n	8001208 <__aeabi_ddiv+0x1e8>
 8001206:	e153      	b.n	80014b0 <__aeabi_ddiv+0x490>
 8001208:	0002      	movs	r2, r0
 800120a:	4641      	mov	r1, r8
 800120c:	3a08      	subs	r2, #8
 800120e:	4091      	lsls	r1, r2
 8001210:	4688      	mov	r8, r1
 8001212:	211d      	movs	r1, #29
 8001214:	1acb      	subs	r3, r1, r3
 8001216:	4651      	mov	r1, sl
 8001218:	40d9      	lsrs	r1, r3
 800121a:	000b      	movs	r3, r1
 800121c:	4641      	mov	r1, r8
 800121e:	430b      	orrs	r3, r1
 8001220:	469b      	mov	fp, r3
 8001222:	4653      	mov	r3, sl
 8001224:	4093      	lsls	r3, r2
 8001226:	001a      	movs	r2, r3
 8001228:	9b00      	ldr	r3, [sp, #0]
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <__aeabi_ddiv+0x2a0>)
 800122c:	469c      	mov	ip, r3
 800122e:	4460      	add	r0, ip
 8001230:	0003      	movs	r3, r0
 8001232:	468c      	mov	ip, r1
 8001234:	4463      	add	r3, ip
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2100      	movs	r1, #0
 800123a:	e737      	b.n	80010ac <__aeabi_ddiv+0x8c>
 800123c:	2303      	movs	r3, #3
 800123e:	46b1      	mov	r9, r6
 8001240:	9000      	str	r0, [sp, #0]
 8001242:	260c      	movs	r6, #12
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	e711      	b.n	800106c <__aeabi_ddiv+0x4c>
 8001248:	2300      	movs	r3, #0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	2604      	movs	r6, #4
 8001250:	2700      	movs	r7, #0
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	e70a      	b.n	800106c <__aeabi_ddiv+0x4c>
 8001256:	2303      	movs	r3, #3
 8001258:	46c3      	mov	fp, r8
 800125a:	431e      	orrs	r6, r3
 800125c:	2103      	movs	r1, #3
 800125e:	e725      	b.n	80010ac <__aeabi_ddiv+0x8c>
 8001260:	3301      	adds	r3, #1
 8001262:	431e      	orrs	r6, r3
 8001264:	2200      	movs	r2, #0
 8001266:	2101      	movs	r1, #1
 8001268:	e720      	b.n	80010ac <__aeabi_ddiv+0x8c>
 800126a:	2300      	movs	r3, #0
 800126c:	469a      	mov	sl, r3
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	2700      	movs	r7, #0
 8001272:	031b      	lsls	r3, r3, #12
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <__aeabi_ddiv+0x27c>)
 8001276:	e761      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	4649      	mov	r1, r9
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	4219      	tst	r1, r3
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x264>
 8001282:	e0e2      	b.n	800144a <__aeabi_ddiv+0x42a>
 8001284:	4659      	mov	r1, fp
 8001286:	4219      	tst	r1, r3
 8001288:	d000      	beq.n	800128c <__aeabi_ddiv+0x26c>
 800128a:	e0de      	b.n	800144a <__aeabi_ddiv+0x42a>
 800128c:	430b      	orrs	r3, r1
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	0017      	movs	r7, r2
 8001292:	0b1b      	lsrs	r3, r3, #12
 8001294:	46a2      	mov	sl, r4
 8001296:	4a01      	ldr	r2, [pc, #4]	; (800129c <__aeabi_ddiv+0x27c>)
 8001298:	e750      	b.n	800113c <__aeabi_ddiv+0x11c>
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	000007ff 	.word	0x000007ff
 80012a0:	fffffc01 	.word	0xfffffc01
 80012a4:	08007b30 	.word	0x08007b30
 80012a8:	000003ff 	.word	0x000003ff
 80012ac:	feffffff 	.word	0xfeffffff
 80012b0:	000007fe 	.word	0x000007fe
 80012b4:	800fffff 	.word	0x800fffff
 80012b8:	fffffc0d 	.word	0xfffffc0d
 80012bc:	fffff801 	.word	0xfffff801
 80012c0:	000003f3 	.word	0x000003f3
 80012c4:	45d9      	cmp	r9, fp
 80012c6:	d900      	bls.n	80012ca <__aeabi_ddiv+0x2aa>
 80012c8:	e0cb      	b.n	8001462 <__aeabi_ddiv+0x442>
 80012ca:	d100      	bne.n	80012ce <__aeabi_ddiv+0x2ae>
 80012cc:	e0c6      	b.n	800145c <__aeabi_ddiv+0x43c>
 80012ce:	003c      	movs	r4, r7
 80012d0:	4648      	mov	r0, r9
 80012d2:	2700      	movs	r7, #0
 80012d4:	9b00      	ldr	r3, [sp, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	465b      	mov	r3, fp
 80012dc:	0e16      	lsrs	r6, r2, #24
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	431e      	orrs	r6, r3
 80012e2:	0213      	lsls	r3, r2, #8
 80012e4:	4698      	mov	r8, r3
 80012e6:	0433      	lsls	r3, r6, #16
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	4699      	mov	r9, r3
 80012ec:	0c31      	lsrs	r1, r6, #16
 80012ee:	9101      	str	r1, [sp, #4]
 80012f0:	f7fe ff90 	bl	8000214 <__aeabi_uidivmod>
 80012f4:	464a      	mov	r2, r9
 80012f6:	4342      	muls	r2, r0
 80012f8:	040b      	lsls	r3, r1, #16
 80012fa:	0c21      	lsrs	r1, r4, #16
 80012fc:	0005      	movs	r5, r0
 80012fe:	4319      	orrs	r1, r3
 8001300:	428a      	cmp	r2, r1
 8001302:	d907      	bls.n	8001314 <__aeabi_ddiv+0x2f4>
 8001304:	1989      	adds	r1, r1, r6
 8001306:	3d01      	subs	r5, #1
 8001308:	428e      	cmp	r6, r1
 800130a:	d803      	bhi.n	8001314 <__aeabi_ddiv+0x2f4>
 800130c:	428a      	cmp	r2, r1
 800130e:	d901      	bls.n	8001314 <__aeabi_ddiv+0x2f4>
 8001310:	1e85      	subs	r5, r0, #2
 8001312:	1989      	adds	r1, r1, r6
 8001314:	1a88      	subs	r0, r1, r2
 8001316:	9901      	ldr	r1, [sp, #4]
 8001318:	f7fe ff7c 	bl	8000214 <__aeabi_uidivmod>
 800131c:	0409      	lsls	r1, r1, #16
 800131e:	468c      	mov	ip, r1
 8001320:	464a      	mov	r2, r9
 8001322:	0421      	lsls	r1, r4, #16
 8001324:	4664      	mov	r4, ip
 8001326:	4342      	muls	r2, r0
 8001328:	0c09      	lsrs	r1, r1, #16
 800132a:	0003      	movs	r3, r0
 800132c:	4321      	orrs	r1, r4
 800132e:	428a      	cmp	r2, r1
 8001330:	d904      	bls.n	800133c <__aeabi_ddiv+0x31c>
 8001332:	1989      	adds	r1, r1, r6
 8001334:	3b01      	subs	r3, #1
 8001336:	428e      	cmp	r6, r1
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x31c>
 800133a:	e0f1      	b.n	8001520 <__aeabi_ddiv+0x500>
 800133c:	042d      	lsls	r5, r5, #16
 800133e:	431d      	orrs	r5, r3
 8001340:	46ab      	mov	fp, r5
 8001342:	4643      	mov	r3, r8
 8001344:	1a89      	subs	r1, r1, r2
 8001346:	4642      	mov	r2, r8
 8001348:	0c28      	lsrs	r0, r5, #16
 800134a:	0412      	lsls	r2, r2, #16
 800134c:	0c1d      	lsrs	r5, r3, #16
 800134e:	465b      	mov	r3, fp
 8001350:	0c14      	lsrs	r4, r2, #16
 8001352:	0022      	movs	r2, r4
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	0c1b      	lsrs	r3, r3, #16
 8001358:	435a      	muls	r2, r3
 800135a:	9403      	str	r4, [sp, #12]
 800135c:	436b      	muls	r3, r5
 800135e:	4344      	muls	r4, r0
 8001360:	9502      	str	r5, [sp, #8]
 8001362:	4368      	muls	r0, r5
 8001364:	191b      	adds	r3, r3, r4
 8001366:	0c15      	lsrs	r5, r2, #16
 8001368:	18eb      	adds	r3, r5, r3
 800136a:	429c      	cmp	r4, r3
 800136c:	d903      	bls.n	8001376 <__aeabi_ddiv+0x356>
 800136e:	2480      	movs	r4, #128	; 0x80
 8001370:	0264      	lsls	r4, r4, #9
 8001372:	46a4      	mov	ip, r4
 8001374:	4460      	add	r0, ip
 8001376:	0c1c      	lsrs	r4, r3, #16
 8001378:	0415      	lsls	r5, r2, #16
 800137a:	041b      	lsls	r3, r3, #16
 800137c:	0c2d      	lsrs	r5, r5, #16
 800137e:	1820      	adds	r0, r4, r0
 8001380:	195d      	adds	r5, r3, r5
 8001382:	4281      	cmp	r1, r0
 8001384:	d377      	bcc.n	8001476 <__aeabi_ddiv+0x456>
 8001386:	d073      	beq.n	8001470 <__aeabi_ddiv+0x450>
 8001388:	1a0c      	subs	r4, r1, r0
 800138a:	4aa2      	ldr	r2, [pc, #648]	; (8001614 <__aeabi_ddiv+0x5f4>)
 800138c:	1b7d      	subs	r5, r7, r5
 800138e:	42af      	cmp	r7, r5
 8001390:	41bf      	sbcs	r7, r7
 8001392:	4694      	mov	ip, r2
 8001394:	9b00      	ldr	r3, [sp, #0]
 8001396:	427f      	negs	r7, r7
 8001398:	4463      	add	r3, ip
 800139a:	1be0      	subs	r0, r4, r7
 800139c:	001c      	movs	r4, r3
 800139e:	4286      	cmp	r6, r0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_ddiv+0x384>
 80013a2:	e0db      	b.n	800155c <__aeabi_ddiv+0x53c>
 80013a4:	9901      	ldr	r1, [sp, #4]
 80013a6:	f7fe ff35 	bl	8000214 <__aeabi_uidivmod>
 80013aa:	464a      	mov	r2, r9
 80013ac:	4342      	muls	r2, r0
 80013ae:	040b      	lsls	r3, r1, #16
 80013b0:	0c29      	lsrs	r1, r5, #16
 80013b2:	0007      	movs	r7, r0
 80013b4:	4319      	orrs	r1, r3
 80013b6:	428a      	cmp	r2, r1
 80013b8:	d907      	bls.n	80013ca <__aeabi_ddiv+0x3aa>
 80013ba:	1989      	adds	r1, r1, r6
 80013bc:	3f01      	subs	r7, #1
 80013be:	428e      	cmp	r6, r1
 80013c0:	d803      	bhi.n	80013ca <__aeabi_ddiv+0x3aa>
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d901      	bls.n	80013ca <__aeabi_ddiv+0x3aa>
 80013c6:	1e87      	subs	r7, r0, #2
 80013c8:	1989      	adds	r1, r1, r6
 80013ca:	1a88      	subs	r0, r1, r2
 80013cc:	9901      	ldr	r1, [sp, #4]
 80013ce:	f7fe ff21 	bl	8000214 <__aeabi_uidivmod>
 80013d2:	0409      	lsls	r1, r1, #16
 80013d4:	464a      	mov	r2, r9
 80013d6:	4689      	mov	r9, r1
 80013d8:	0429      	lsls	r1, r5, #16
 80013da:	464d      	mov	r5, r9
 80013dc:	4342      	muls	r2, r0
 80013de:	0c09      	lsrs	r1, r1, #16
 80013e0:	0003      	movs	r3, r0
 80013e2:	4329      	orrs	r1, r5
 80013e4:	428a      	cmp	r2, r1
 80013e6:	d907      	bls.n	80013f8 <__aeabi_ddiv+0x3d8>
 80013e8:	1989      	adds	r1, r1, r6
 80013ea:	3b01      	subs	r3, #1
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d803      	bhi.n	80013f8 <__aeabi_ddiv+0x3d8>
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d901      	bls.n	80013f8 <__aeabi_ddiv+0x3d8>
 80013f4:	1e83      	subs	r3, r0, #2
 80013f6:	1989      	adds	r1, r1, r6
 80013f8:	043f      	lsls	r7, r7, #16
 80013fa:	1a89      	subs	r1, r1, r2
 80013fc:	003a      	movs	r2, r7
 80013fe:	9f03      	ldr	r7, [sp, #12]
 8001400:	431a      	orrs	r2, r3
 8001402:	0038      	movs	r0, r7
 8001404:	0413      	lsls	r3, r2, #16
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	4358      	muls	r0, r3
 800140a:	4681      	mov	r9, r0
 800140c:	9802      	ldr	r0, [sp, #8]
 800140e:	0c15      	lsrs	r5, r2, #16
 8001410:	436f      	muls	r7, r5
 8001412:	4343      	muls	r3, r0
 8001414:	4345      	muls	r5, r0
 8001416:	4648      	mov	r0, r9
 8001418:	0c00      	lsrs	r0, r0, #16
 800141a:	4684      	mov	ip, r0
 800141c:	19db      	adds	r3, r3, r7
 800141e:	4463      	add	r3, ip
 8001420:	429f      	cmp	r7, r3
 8001422:	d903      	bls.n	800142c <__aeabi_ddiv+0x40c>
 8001424:	2080      	movs	r0, #128	; 0x80
 8001426:	0240      	lsls	r0, r0, #9
 8001428:	4684      	mov	ip, r0
 800142a:	4465      	add	r5, ip
 800142c:	4648      	mov	r0, r9
 800142e:	0c1f      	lsrs	r7, r3, #16
 8001430:	0400      	lsls	r0, r0, #16
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	0c00      	lsrs	r0, r0, #16
 8001436:	197d      	adds	r5, r7, r5
 8001438:	1818      	adds	r0, r3, r0
 800143a:	42a9      	cmp	r1, r5
 800143c:	d200      	bcs.n	8001440 <__aeabi_ddiv+0x420>
 800143e:	e084      	b.n	800154a <__aeabi_ddiv+0x52a>
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x424>
 8001442:	e07f      	b.n	8001544 <__aeabi_ddiv+0x524>
 8001444:	2301      	movs	r3, #1
 8001446:	431a      	orrs	r2, r3
 8001448:	e657      	b.n	80010fa <__aeabi_ddiv+0xda>
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	464a      	mov	r2, r9
 800144e:	031b      	lsls	r3, r3, #12
 8001450:	4313      	orrs	r3, r2
 8001452:	031b      	lsls	r3, r3, #12
 8001454:	0b1b      	lsrs	r3, r3, #12
 8001456:	46aa      	mov	sl, r5
 8001458:	4a6f      	ldr	r2, [pc, #444]	; (8001618 <__aeabi_ddiv+0x5f8>)
 800145a:	e66f      	b.n	800113c <__aeabi_ddiv+0x11c>
 800145c:	42ba      	cmp	r2, r7
 800145e:	d900      	bls.n	8001462 <__aeabi_ddiv+0x442>
 8001460:	e735      	b.n	80012ce <__aeabi_ddiv+0x2ae>
 8001462:	464b      	mov	r3, r9
 8001464:	07dc      	lsls	r4, r3, #31
 8001466:	0858      	lsrs	r0, r3, #1
 8001468:	087b      	lsrs	r3, r7, #1
 800146a:	431c      	orrs	r4, r3
 800146c:	07ff      	lsls	r7, r7, #31
 800146e:	e734      	b.n	80012da <__aeabi_ddiv+0x2ba>
 8001470:	2400      	movs	r4, #0
 8001472:	42af      	cmp	r7, r5
 8001474:	d289      	bcs.n	800138a <__aeabi_ddiv+0x36a>
 8001476:	4447      	add	r7, r8
 8001478:	4547      	cmp	r7, r8
 800147a:	41a4      	sbcs	r4, r4
 800147c:	465b      	mov	r3, fp
 800147e:	4264      	negs	r4, r4
 8001480:	19a4      	adds	r4, r4, r6
 8001482:	1864      	adds	r4, r4, r1
 8001484:	3b01      	subs	r3, #1
 8001486:	42a6      	cmp	r6, r4
 8001488:	d21e      	bcs.n	80014c8 <__aeabi_ddiv+0x4a8>
 800148a:	42a0      	cmp	r0, r4
 800148c:	d86d      	bhi.n	800156a <__aeabi_ddiv+0x54a>
 800148e:	d100      	bne.n	8001492 <__aeabi_ddiv+0x472>
 8001490:	e0b6      	b.n	8001600 <__aeabi_ddiv+0x5e0>
 8001492:	1a24      	subs	r4, r4, r0
 8001494:	469b      	mov	fp, r3
 8001496:	e778      	b.n	800138a <__aeabi_ddiv+0x36a>
 8001498:	0003      	movs	r3, r0
 800149a:	465a      	mov	r2, fp
 800149c:	3b28      	subs	r3, #40	; 0x28
 800149e:	409a      	lsls	r2, r3
 80014a0:	2700      	movs	r7, #0
 80014a2:	4691      	mov	r9, r2
 80014a4:	e688      	b.n	80011b8 <__aeabi_ddiv+0x198>
 80014a6:	4658      	mov	r0, fp
 80014a8:	f001 f8aa 	bl	8002600 <__clzsi2>
 80014ac:	3020      	adds	r0, #32
 80014ae:	e672      	b.n	8001196 <__aeabi_ddiv+0x176>
 80014b0:	0003      	movs	r3, r0
 80014b2:	4652      	mov	r2, sl
 80014b4:	3b28      	subs	r3, #40	; 0x28
 80014b6:	409a      	lsls	r2, r3
 80014b8:	4693      	mov	fp, r2
 80014ba:	2200      	movs	r2, #0
 80014bc:	e6b4      	b.n	8001228 <__aeabi_ddiv+0x208>
 80014be:	4650      	mov	r0, sl
 80014c0:	f001 f89e 	bl	8002600 <__clzsi2>
 80014c4:	3020      	adds	r0, #32
 80014c6:	e69a      	b.n	80011fe <__aeabi_ddiv+0x1de>
 80014c8:	42a6      	cmp	r6, r4
 80014ca:	d1e2      	bne.n	8001492 <__aeabi_ddiv+0x472>
 80014cc:	45b8      	cmp	r8, r7
 80014ce:	d9dc      	bls.n	800148a <__aeabi_ddiv+0x46a>
 80014d0:	1a34      	subs	r4, r6, r0
 80014d2:	469b      	mov	fp, r3
 80014d4:	e759      	b.n	800138a <__aeabi_ddiv+0x36a>
 80014d6:	2b1f      	cmp	r3, #31
 80014d8:	dc65      	bgt.n	80015a6 <__aeabi_ddiv+0x586>
 80014da:	4c50      	ldr	r4, [pc, #320]	; (800161c <__aeabi_ddiv+0x5fc>)
 80014dc:	9900      	ldr	r1, [sp, #0]
 80014de:	46a4      	mov	ip, r4
 80014e0:	465c      	mov	r4, fp
 80014e2:	4461      	add	r1, ip
 80014e4:	0008      	movs	r0, r1
 80014e6:	408c      	lsls	r4, r1
 80014e8:	0011      	movs	r1, r2
 80014ea:	4082      	lsls	r2, r0
 80014ec:	40d9      	lsrs	r1, r3
 80014ee:	1e50      	subs	r0, r2, #1
 80014f0:	4182      	sbcs	r2, r0
 80014f2:	430c      	orrs	r4, r1
 80014f4:	4314      	orrs	r4, r2
 80014f6:	465a      	mov	r2, fp
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	0762      	lsls	r2, r4, #29
 80014fe:	d009      	beq.n	8001514 <__aeabi_ddiv+0x4f4>
 8001500:	220f      	movs	r2, #15
 8001502:	4022      	ands	r2, r4
 8001504:	2a04      	cmp	r2, #4
 8001506:	d005      	beq.n	8001514 <__aeabi_ddiv+0x4f4>
 8001508:	0022      	movs	r2, r4
 800150a:	1d14      	adds	r4, r2, #4
 800150c:	4294      	cmp	r4, r2
 800150e:	4189      	sbcs	r1, r1
 8001510:	4249      	negs	r1, r1
 8001512:	185b      	adds	r3, r3, r1
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	d562      	bpl.n	80015de <__aeabi_ddiv+0x5be>
 8001518:	2201      	movs	r2, #1
 800151a:	2300      	movs	r3, #0
 800151c:	2700      	movs	r7, #0
 800151e:	e60d      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001520:	428a      	cmp	r2, r1
 8001522:	d800      	bhi.n	8001526 <__aeabi_ddiv+0x506>
 8001524:	e70a      	b.n	800133c <__aeabi_ddiv+0x31c>
 8001526:	1e83      	subs	r3, r0, #2
 8001528:	1989      	adds	r1, r1, r6
 800152a:	e707      	b.n	800133c <__aeabi_ddiv+0x31c>
 800152c:	230f      	movs	r3, #15
 800152e:	4013      	ands	r3, r2
 8001530:	2b04      	cmp	r3, #4
 8001532:	d100      	bne.n	8001536 <__aeabi_ddiv+0x516>
 8001534:	e5e6      	b.n	8001104 <__aeabi_ddiv+0xe4>
 8001536:	1d17      	adds	r7, r2, #4
 8001538:	4297      	cmp	r7, r2
 800153a:	4192      	sbcs	r2, r2
 800153c:	4253      	negs	r3, r2
 800153e:	449b      	add	fp, r3
 8001540:	08fa      	lsrs	r2, r7, #3
 8001542:	e5e0      	b.n	8001106 <__aeabi_ddiv+0xe6>
 8001544:	2800      	cmp	r0, #0
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0x52a>
 8001548:	e5d7      	b.n	80010fa <__aeabi_ddiv+0xda>
 800154a:	1871      	adds	r1, r6, r1
 800154c:	1e53      	subs	r3, r2, #1
 800154e:	42b1      	cmp	r1, r6
 8001550:	d327      	bcc.n	80015a2 <__aeabi_ddiv+0x582>
 8001552:	42a9      	cmp	r1, r5
 8001554:	d315      	bcc.n	8001582 <__aeabi_ddiv+0x562>
 8001556:	d058      	beq.n	800160a <__aeabi_ddiv+0x5ea>
 8001558:	001a      	movs	r2, r3
 800155a:	e773      	b.n	8001444 <__aeabi_ddiv+0x424>
 800155c:	2b00      	cmp	r3, #0
 800155e:	dc00      	bgt.n	8001562 <__aeabi_ddiv+0x542>
 8001560:	e604      	b.n	800116c <__aeabi_ddiv+0x14c>
 8001562:	2301      	movs	r3, #1
 8001564:	2200      	movs	r2, #0
 8001566:	449b      	add	fp, r3
 8001568:	e5cd      	b.n	8001106 <__aeabi_ddiv+0xe6>
 800156a:	2302      	movs	r3, #2
 800156c:	4447      	add	r7, r8
 800156e:	4547      	cmp	r7, r8
 8001570:	4189      	sbcs	r1, r1
 8001572:	425b      	negs	r3, r3
 8001574:	469c      	mov	ip, r3
 8001576:	4249      	negs	r1, r1
 8001578:	1989      	adds	r1, r1, r6
 800157a:	190c      	adds	r4, r1, r4
 800157c:	44e3      	add	fp, ip
 800157e:	1a24      	subs	r4, r4, r0
 8001580:	e703      	b.n	800138a <__aeabi_ddiv+0x36a>
 8001582:	4643      	mov	r3, r8
 8001584:	005f      	lsls	r7, r3, #1
 8001586:	4547      	cmp	r7, r8
 8001588:	419b      	sbcs	r3, r3
 800158a:	46b8      	mov	r8, r7
 800158c:	425b      	negs	r3, r3
 800158e:	199e      	adds	r6, r3, r6
 8001590:	3a02      	subs	r2, #2
 8001592:	1989      	adds	r1, r1, r6
 8001594:	42a9      	cmp	r1, r5
 8001596:	d000      	beq.n	800159a <__aeabi_ddiv+0x57a>
 8001598:	e754      	b.n	8001444 <__aeabi_ddiv+0x424>
 800159a:	4540      	cmp	r0, r8
 800159c:	d000      	beq.n	80015a0 <__aeabi_ddiv+0x580>
 800159e:	e751      	b.n	8001444 <__aeabi_ddiv+0x424>
 80015a0:	e5ab      	b.n	80010fa <__aeabi_ddiv+0xda>
 80015a2:	001a      	movs	r2, r3
 80015a4:	e7f6      	b.n	8001594 <__aeabi_ddiv+0x574>
 80015a6:	211f      	movs	r1, #31
 80015a8:	465f      	mov	r7, fp
 80015aa:	4249      	negs	r1, r1
 80015ac:	1b0c      	subs	r4, r1, r4
 80015ae:	40e7      	lsrs	r7, r4
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d007      	beq.n	80015c4 <__aeabi_ddiv+0x5a4>
 80015b4:	491a      	ldr	r1, [pc, #104]	; (8001620 <__aeabi_ddiv+0x600>)
 80015b6:	9b00      	ldr	r3, [sp, #0]
 80015b8:	468c      	mov	ip, r1
 80015ba:	4463      	add	r3, ip
 80015bc:	0018      	movs	r0, r3
 80015be:	465b      	mov	r3, fp
 80015c0:	4083      	lsls	r3, r0
 80015c2:	431a      	orrs	r2, r3
 80015c4:	1e50      	subs	r0, r2, #1
 80015c6:	4182      	sbcs	r2, r0
 80015c8:	433a      	orrs	r2, r7
 80015ca:	2707      	movs	r7, #7
 80015cc:	2300      	movs	r3, #0
 80015ce:	4017      	ands	r7, r2
 80015d0:	d009      	beq.n	80015e6 <__aeabi_ddiv+0x5c6>
 80015d2:	210f      	movs	r1, #15
 80015d4:	2300      	movs	r3, #0
 80015d6:	4011      	ands	r1, r2
 80015d8:	0014      	movs	r4, r2
 80015da:	2904      	cmp	r1, #4
 80015dc:	d195      	bne.n	800150a <__aeabi_ddiv+0x4ea>
 80015de:	0022      	movs	r2, r4
 80015e0:	075f      	lsls	r7, r3, #29
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	0b1b      	lsrs	r3, r3, #12
 80015e6:	08d2      	lsrs	r2, r2, #3
 80015e8:	4317      	orrs	r7, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	e5a6      	b.n	800113c <__aeabi_ddiv+0x11c>
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	4659      	mov	r1, fp
 80015f2:	031b      	lsls	r3, r3, #12
 80015f4:	430b      	orrs	r3, r1
 80015f6:	031b      	lsls	r3, r3, #12
 80015f8:	0017      	movs	r7, r2
 80015fa:	0b1b      	lsrs	r3, r3, #12
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <__aeabi_ddiv+0x5f8>)
 80015fe:	e59d      	b.n	800113c <__aeabi_ddiv+0x11c>
 8001600:	42bd      	cmp	r5, r7
 8001602:	d8b2      	bhi.n	800156a <__aeabi_ddiv+0x54a>
 8001604:	469b      	mov	fp, r3
 8001606:	2400      	movs	r4, #0
 8001608:	e6bf      	b.n	800138a <__aeabi_ddiv+0x36a>
 800160a:	4580      	cmp	r8, r0
 800160c:	d3b9      	bcc.n	8001582 <__aeabi_ddiv+0x562>
 800160e:	001a      	movs	r2, r3
 8001610:	e7c3      	b.n	800159a <__aeabi_ddiv+0x57a>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000003ff 	.word	0x000003ff
 8001618:	000007ff 	.word	0x000007ff
 800161c:	0000041e 	.word	0x0000041e
 8001620:	0000043e 	.word	0x0000043e

08001624 <__eqdf2>:
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	464f      	mov	r7, r9
 8001628:	4646      	mov	r6, r8
 800162a:	46d6      	mov	lr, sl
 800162c:	4684      	mov	ip, r0
 800162e:	b5c0      	push	{r6, r7, lr}
 8001630:	4680      	mov	r8, r0
 8001632:	4e19      	ldr	r6, [pc, #100]	; (8001698 <__eqdf2+0x74>)
 8001634:	0318      	lsls	r0, r3, #12
 8001636:	030f      	lsls	r7, r1, #12
 8001638:	004d      	lsls	r5, r1, #1
 800163a:	0b00      	lsrs	r0, r0, #12
 800163c:	005c      	lsls	r4, r3, #1
 800163e:	4682      	mov	sl, r0
 8001640:	0b3f      	lsrs	r7, r7, #12
 8001642:	0d6d      	lsrs	r5, r5, #21
 8001644:	0fc9      	lsrs	r1, r1, #31
 8001646:	4691      	mov	r9, r2
 8001648:	0d64      	lsrs	r4, r4, #21
 800164a:	0fdb      	lsrs	r3, r3, #31
 800164c:	2001      	movs	r0, #1
 800164e:	42b5      	cmp	r5, r6
 8001650:	d00a      	beq.n	8001668 <__eqdf2+0x44>
 8001652:	42b4      	cmp	r4, r6
 8001654:	d003      	beq.n	800165e <__eqdf2+0x3a>
 8001656:	42a5      	cmp	r5, r4
 8001658:	d101      	bne.n	800165e <__eqdf2+0x3a>
 800165a:	4557      	cmp	r7, sl
 800165c:	d00c      	beq.n	8001678 <__eqdf2+0x54>
 800165e:	bc1c      	pop	{r2, r3, r4}
 8001660:	4690      	mov	r8, r2
 8001662:	4699      	mov	r9, r3
 8001664:	46a2      	mov	sl, r4
 8001666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001668:	4666      	mov	r6, ip
 800166a:	433e      	orrs	r6, r7
 800166c:	d1f7      	bne.n	800165e <__eqdf2+0x3a>
 800166e:	42ac      	cmp	r4, r5
 8001670:	d1f5      	bne.n	800165e <__eqdf2+0x3a>
 8001672:	4654      	mov	r4, sl
 8001674:	4314      	orrs	r4, r2
 8001676:	d1f2      	bne.n	800165e <__eqdf2+0x3a>
 8001678:	2001      	movs	r0, #1
 800167a:	45c8      	cmp	r8, r9
 800167c:	d1ef      	bne.n	800165e <__eqdf2+0x3a>
 800167e:	4299      	cmp	r1, r3
 8001680:	d007      	beq.n	8001692 <__eqdf2+0x6e>
 8001682:	2d00      	cmp	r5, #0
 8001684:	d1eb      	bne.n	800165e <__eqdf2+0x3a>
 8001686:	4663      	mov	r3, ip
 8001688:	431f      	orrs	r7, r3
 800168a:	0038      	movs	r0, r7
 800168c:	1e47      	subs	r7, r0, #1
 800168e:	41b8      	sbcs	r0, r7
 8001690:	e7e5      	b.n	800165e <__eqdf2+0x3a>
 8001692:	2000      	movs	r0, #0
 8001694:	e7e3      	b.n	800165e <__eqdf2+0x3a>
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	000007ff 	.word	0x000007ff

0800169c <__gedf2>:
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	464f      	mov	r7, r9
 80016a0:	4646      	mov	r6, r8
 80016a2:	46d6      	mov	lr, sl
 80016a4:	004d      	lsls	r5, r1, #1
 80016a6:	b5c0      	push	{r6, r7, lr}
 80016a8:	030e      	lsls	r6, r1, #12
 80016aa:	0fc9      	lsrs	r1, r1, #31
 80016ac:	468a      	mov	sl, r1
 80016ae:	492c      	ldr	r1, [pc, #176]	; (8001760 <__gedf2+0xc4>)
 80016b0:	031f      	lsls	r7, r3, #12
 80016b2:	005c      	lsls	r4, r3, #1
 80016b4:	4680      	mov	r8, r0
 80016b6:	0b36      	lsrs	r6, r6, #12
 80016b8:	0d6d      	lsrs	r5, r5, #21
 80016ba:	4691      	mov	r9, r2
 80016bc:	0b3f      	lsrs	r7, r7, #12
 80016be:	0d64      	lsrs	r4, r4, #21
 80016c0:	0fdb      	lsrs	r3, r3, #31
 80016c2:	428d      	cmp	r5, r1
 80016c4:	d01e      	beq.n	8001704 <__gedf2+0x68>
 80016c6:	428c      	cmp	r4, r1
 80016c8:	d016      	beq.n	80016f8 <__gedf2+0x5c>
 80016ca:	2d00      	cmp	r5, #0
 80016cc:	d11e      	bne.n	800170c <__gedf2+0x70>
 80016ce:	4330      	orrs	r0, r6
 80016d0:	4684      	mov	ip, r0
 80016d2:	2c00      	cmp	r4, #0
 80016d4:	d101      	bne.n	80016da <__gedf2+0x3e>
 80016d6:	433a      	orrs	r2, r7
 80016d8:	d023      	beq.n	8001722 <__gedf2+0x86>
 80016da:	4662      	mov	r2, ip
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d01a      	beq.n	8001716 <__gedf2+0x7a>
 80016e0:	459a      	cmp	sl, r3
 80016e2:	d029      	beq.n	8001738 <__gedf2+0x9c>
 80016e4:	4651      	mov	r1, sl
 80016e6:	2002      	movs	r0, #2
 80016e8:	3901      	subs	r1, #1
 80016ea:	4008      	ands	r0, r1
 80016ec:	3801      	subs	r0, #1
 80016ee:	bc1c      	pop	{r2, r3, r4}
 80016f0:	4690      	mov	r8, r2
 80016f2:	4699      	mov	r9, r3
 80016f4:	46a2      	mov	sl, r4
 80016f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f8:	0039      	movs	r1, r7
 80016fa:	4311      	orrs	r1, r2
 80016fc:	d0e5      	beq.n	80016ca <__gedf2+0x2e>
 80016fe:	2002      	movs	r0, #2
 8001700:	4240      	negs	r0, r0
 8001702:	e7f4      	b.n	80016ee <__gedf2+0x52>
 8001704:	4330      	orrs	r0, r6
 8001706:	d1fa      	bne.n	80016fe <__gedf2+0x62>
 8001708:	42ac      	cmp	r4, r5
 800170a:	d00f      	beq.n	800172c <__gedf2+0x90>
 800170c:	2c00      	cmp	r4, #0
 800170e:	d10f      	bne.n	8001730 <__gedf2+0x94>
 8001710:	433a      	orrs	r2, r7
 8001712:	d0e7      	beq.n	80016e4 <__gedf2+0x48>
 8001714:	e00c      	b.n	8001730 <__gedf2+0x94>
 8001716:	2201      	movs	r2, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	4393      	bics	r3, r2
 800171c:	0018      	movs	r0, r3
 800171e:	3001      	adds	r0, #1
 8001720:	e7e5      	b.n	80016ee <__gedf2+0x52>
 8001722:	4663      	mov	r3, ip
 8001724:	2000      	movs	r0, #0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0e1      	beq.n	80016ee <__gedf2+0x52>
 800172a:	e7db      	b.n	80016e4 <__gedf2+0x48>
 800172c:	433a      	orrs	r2, r7
 800172e:	d1e6      	bne.n	80016fe <__gedf2+0x62>
 8001730:	459a      	cmp	sl, r3
 8001732:	d1d7      	bne.n	80016e4 <__gedf2+0x48>
 8001734:	42a5      	cmp	r5, r4
 8001736:	dcd5      	bgt.n	80016e4 <__gedf2+0x48>
 8001738:	42a5      	cmp	r5, r4
 800173a:	db05      	blt.n	8001748 <__gedf2+0xac>
 800173c:	42be      	cmp	r6, r7
 800173e:	d8d1      	bhi.n	80016e4 <__gedf2+0x48>
 8001740:	d008      	beq.n	8001754 <__gedf2+0xb8>
 8001742:	2000      	movs	r0, #0
 8001744:	42be      	cmp	r6, r7
 8001746:	d2d2      	bcs.n	80016ee <__gedf2+0x52>
 8001748:	4650      	mov	r0, sl
 800174a:	2301      	movs	r3, #1
 800174c:	3801      	subs	r0, #1
 800174e:	4398      	bics	r0, r3
 8001750:	3001      	adds	r0, #1
 8001752:	e7cc      	b.n	80016ee <__gedf2+0x52>
 8001754:	45c8      	cmp	r8, r9
 8001756:	d8c5      	bhi.n	80016e4 <__gedf2+0x48>
 8001758:	2000      	movs	r0, #0
 800175a:	45c8      	cmp	r8, r9
 800175c:	d3f4      	bcc.n	8001748 <__gedf2+0xac>
 800175e:	e7c6      	b.n	80016ee <__gedf2+0x52>
 8001760:	000007ff 	.word	0x000007ff

08001764 <__ledf2>:
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	464f      	mov	r7, r9
 8001768:	4646      	mov	r6, r8
 800176a:	46d6      	mov	lr, sl
 800176c:	004d      	lsls	r5, r1, #1
 800176e:	b5c0      	push	{r6, r7, lr}
 8001770:	030e      	lsls	r6, r1, #12
 8001772:	0fc9      	lsrs	r1, r1, #31
 8001774:	468a      	mov	sl, r1
 8001776:	492e      	ldr	r1, [pc, #184]	; (8001830 <__ledf2+0xcc>)
 8001778:	031f      	lsls	r7, r3, #12
 800177a:	005c      	lsls	r4, r3, #1
 800177c:	4680      	mov	r8, r0
 800177e:	0b36      	lsrs	r6, r6, #12
 8001780:	0d6d      	lsrs	r5, r5, #21
 8001782:	4691      	mov	r9, r2
 8001784:	0b3f      	lsrs	r7, r7, #12
 8001786:	0d64      	lsrs	r4, r4, #21
 8001788:	0fdb      	lsrs	r3, r3, #31
 800178a:	428d      	cmp	r5, r1
 800178c:	d018      	beq.n	80017c0 <__ledf2+0x5c>
 800178e:	428c      	cmp	r4, r1
 8001790:	d011      	beq.n	80017b6 <__ledf2+0x52>
 8001792:	2d00      	cmp	r5, #0
 8001794:	d118      	bne.n	80017c8 <__ledf2+0x64>
 8001796:	4330      	orrs	r0, r6
 8001798:	4684      	mov	ip, r0
 800179a:	2c00      	cmp	r4, #0
 800179c:	d11e      	bne.n	80017dc <__ledf2+0x78>
 800179e:	433a      	orrs	r2, r7
 80017a0:	d11c      	bne.n	80017dc <__ledf2+0x78>
 80017a2:	4663      	mov	r3, ip
 80017a4:	2000      	movs	r0, #0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d030      	beq.n	800180c <__ledf2+0xa8>
 80017aa:	4651      	mov	r1, sl
 80017ac:	2002      	movs	r0, #2
 80017ae:	3901      	subs	r1, #1
 80017b0:	4008      	ands	r0, r1
 80017b2:	3801      	subs	r0, #1
 80017b4:	e02a      	b.n	800180c <__ledf2+0xa8>
 80017b6:	0039      	movs	r1, r7
 80017b8:	4311      	orrs	r1, r2
 80017ba:	d0ea      	beq.n	8001792 <__ledf2+0x2e>
 80017bc:	2002      	movs	r0, #2
 80017be:	e025      	b.n	800180c <__ledf2+0xa8>
 80017c0:	4330      	orrs	r0, r6
 80017c2:	d1fb      	bne.n	80017bc <__ledf2+0x58>
 80017c4:	42ac      	cmp	r4, r5
 80017c6:	d026      	beq.n	8001816 <__ledf2+0xb2>
 80017c8:	2c00      	cmp	r4, #0
 80017ca:	d126      	bne.n	800181a <__ledf2+0xb6>
 80017cc:	433a      	orrs	r2, r7
 80017ce:	d124      	bne.n	800181a <__ledf2+0xb6>
 80017d0:	4651      	mov	r1, sl
 80017d2:	2002      	movs	r0, #2
 80017d4:	3901      	subs	r1, #1
 80017d6:	4008      	ands	r0, r1
 80017d8:	3801      	subs	r0, #1
 80017da:	e017      	b.n	800180c <__ledf2+0xa8>
 80017dc:	4662      	mov	r2, ip
 80017de:	2a00      	cmp	r2, #0
 80017e0:	d00f      	beq.n	8001802 <__ledf2+0x9e>
 80017e2:	459a      	cmp	sl, r3
 80017e4:	d1e1      	bne.n	80017aa <__ledf2+0x46>
 80017e6:	42a5      	cmp	r5, r4
 80017e8:	db05      	blt.n	80017f6 <__ledf2+0x92>
 80017ea:	42be      	cmp	r6, r7
 80017ec:	d8dd      	bhi.n	80017aa <__ledf2+0x46>
 80017ee:	d019      	beq.n	8001824 <__ledf2+0xc0>
 80017f0:	2000      	movs	r0, #0
 80017f2:	42be      	cmp	r6, r7
 80017f4:	d20a      	bcs.n	800180c <__ledf2+0xa8>
 80017f6:	4650      	mov	r0, sl
 80017f8:	2301      	movs	r3, #1
 80017fa:	3801      	subs	r0, #1
 80017fc:	4398      	bics	r0, r3
 80017fe:	3001      	adds	r0, #1
 8001800:	e004      	b.n	800180c <__ledf2+0xa8>
 8001802:	2201      	movs	r2, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	4393      	bics	r3, r2
 8001808:	0018      	movs	r0, r3
 800180a:	3001      	adds	r0, #1
 800180c:	bc1c      	pop	{r2, r3, r4}
 800180e:	4690      	mov	r8, r2
 8001810:	4699      	mov	r9, r3
 8001812:	46a2      	mov	sl, r4
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001816:	433a      	orrs	r2, r7
 8001818:	d1d0      	bne.n	80017bc <__ledf2+0x58>
 800181a:	459a      	cmp	sl, r3
 800181c:	d1c5      	bne.n	80017aa <__ledf2+0x46>
 800181e:	42a5      	cmp	r5, r4
 8001820:	dcc3      	bgt.n	80017aa <__ledf2+0x46>
 8001822:	e7e0      	b.n	80017e6 <__ledf2+0x82>
 8001824:	45c8      	cmp	r8, r9
 8001826:	d8c0      	bhi.n	80017aa <__ledf2+0x46>
 8001828:	2000      	movs	r0, #0
 800182a:	45c8      	cmp	r8, r9
 800182c:	d3e3      	bcc.n	80017f6 <__ledf2+0x92>
 800182e:	e7ed      	b.n	800180c <__ledf2+0xa8>
 8001830:	000007ff 	.word	0x000007ff

08001834 <__aeabi_dmul>:
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	4657      	mov	r7, sl
 8001838:	46de      	mov	lr, fp
 800183a:	464e      	mov	r6, r9
 800183c:	4645      	mov	r5, r8
 800183e:	b5e0      	push	{r5, r6, r7, lr}
 8001840:	4683      	mov	fp, r0
 8001842:	0006      	movs	r6, r0
 8001844:	030f      	lsls	r7, r1, #12
 8001846:	0048      	lsls	r0, r1, #1
 8001848:	b087      	sub	sp, #28
 800184a:	4692      	mov	sl, r2
 800184c:	001d      	movs	r5, r3
 800184e:	0b3f      	lsrs	r7, r7, #12
 8001850:	0d40      	lsrs	r0, r0, #21
 8001852:	0fcc      	lsrs	r4, r1, #31
 8001854:	2800      	cmp	r0, #0
 8001856:	d100      	bne.n	800185a <__aeabi_dmul+0x26>
 8001858:	e06f      	b.n	800193a <__aeabi_dmul+0x106>
 800185a:	4bde      	ldr	r3, [pc, #888]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 800185c:	4298      	cmp	r0, r3
 800185e:	d038      	beq.n	80018d2 <__aeabi_dmul+0x9e>
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	00ff      	lsls	r7, r7, #3
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	431f      	orrs	r7, r3
 8001868:	0f73      	lsrs	r3, r6, #29
 800186a:	433b      	orrs	r3, r7
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	4bda      	ldr	r3, [pc, #872]	; (8001bd8 <__aeabi_dmul+0x3a4>)
 8001870:	2700      	movs	r7, #0
 8001872:	4699      	mov	r9, r3
 8001874:	2300      	movs	r3, #0
 8001876:	469b      	mov	fp, r3
 8001878:	00f6      	lsls	r6, r6, #3
 800187a:	4481      	add	r9, r0
 800187c:	032b      	lsls	r3, r5, #12
 800187e:	0069      	lsls	r1, r5, #1
 8001880:	0b1b      	lsrs	r3, r3, #12
 8001882:	4652      	mov	r2, sl
 8001884:	4698      	mov	r8, r3
 8001886:	0d49      	lsrs	r1, r1, #21
 8001888:	0fed      	lsrs	r5, r5, #31
 800188a:	2900      	cmp	r1, #0
 800188c:	d100      	bne.n	8001890 <__aeabi_dmul+0x5c>
 800188e:	e085      	b.n	800199c <__aeabi_dmul+0x168>
 8001890:	4bd0      	ldr	r3, [pc, #832]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 8001892:	4299      	cmp	r1, r3
 8001894:	d100      	bne.n	8001898 <__aeabi_dmul+0x64>
 8001896:	e073      	b.n	8001980 <__aeabi_dmul+0x14c>
 8001898:	4643      	mov	r3, r8
 800189a:	00da      	lsls	r2, r3, #3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	4313      	orrs	r3, r2
 80018a2:	4652      	mov	r2, sl
 80018a4:	48cc      	ldr	r0, [pc, #816]	; (8001bd8 <__aeabi_dmul+0x3a4>)
 80018a6:	0f52      	lsrs	r2, r2, #29
 80018a8:	4684      	mov	ip, r0
 80018aa:	4313      	orrs	r3, r2
 80018ac:	4652      	mov	r2, sl
 80018ae:	2000      	movs	r0, #0
 80018b0:	4461      	add	r1, ip
 80018b2:	00d2      	lsls	r2, r2, #3
 80018b4:	4489      	add	r9, r1
 80018b6:	0021      	movs	r1, r4
 80018b8:	4069      	eors	r1, r5
 80018ba:	9100      	str	r1, [sp, #0]
 80018bc:	468c      	mov	ip, r1
 80018be:	2101      	movs	r1, #1
 80018c0:	4449      	add	r1, r9
 80018c2:	468a      	mov	sl, r1
 80018c4:	2f0f      	cmp	r7, #15
 80018c6:	d900      	bls.n	80018ca <__aeabi_dmul+0x96>
 80018c8:	e090      	b.n	80019ec <__aeabi_dmul+0x1b8>
 80018ca:	49c4      	ldr	r1, [pc, #784]	; (8001bdc <__aeabi_dmul+0x3a8>)
 80018cc:	00bf      	lsls	r7, r7, #2
 80018ce:	59cf      	ldr	r7, [r1, r7]
 80018d0:	46bf      	mov	pc, r7
 80018d2:	465b      	mov	r3, fp
 80018d4:	433b      	orrs	r3, r7
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	d000      	beq.n	80018dc <__aeabi_dmul+0xa8>
 80018da:	e16a      	b.n	8001bb2 <__aeabi_dmul+0x37e>
 80018dc:	2302      	movs	r3, #2
 80018de:	2708      	movs	r7, #8
 80018e0:	2600      	movs	r6, #0
 80018e2:	4681      	mov	r9, r0
 80018e4:	469b      	mov	fp, r3
 80018e6:	e7c9      	b.n	800187c <__aeabi_dmul+0x48>
 80018e8:	0032      	movs	r2, r6
 80018ea:	4658      	mov	r0, fp
 80018ec:	9b01      	ldr	r3, [sp, #4]
 80018ee:	4661      	mov	r1, ip
 80018f0:	9100      	str	r1, [sp, #0]
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dmul+0xc4>
 80018f6:	e075      	b.n	80019e4 <__aeabi_dmul+0x1b0>
 80018f8:	2803      	cmp	r0, #3
 80018fa:	d100      	bne.n	80018fe <__aeabi_dmul+0xca>
 80018fc:	e1fe      	b.n	8001cfc <__aeabi_dmul+0x4c8>
 80018fe:	2801      	cmp	r0, #1
 8001900:	d000      	beq.n	8001904 <__aeabi_dmul+0xd0>
 8001902:	e12c      	b.n	8001b5e <__aeabi_dmul+0x32a>
 8001904:	2300      	movs	r3, #0
 8001906:	2700      	movs	r7, #0
 8001908:	2600      	movs	r6, #0
 800190a:	2500      	movs	r5, #0
 800190c:	033f      	lsls	r7, r7, #12
 800190e:	0d2a      	lsrs	r2, r5, #20
 8001910:	0b3f      	lsrs	r7, r7, #12
 8001912:	48b3      	ldr	r0, [pc, #716]	; (8001be0 <__aeabi_dmul+0x3ac>)
 8001914:	0512      	lsls	r2, r2, #20
 8001916:	433a      	orrs	r2, r7
 8001918:	4002      	ands	r2, r0
 800191a:	051b      	lsls	r3, r3, #20
 800191c:	4313      	orrs	r3, r2
 800191e:	9a00      	ldr	r2, [sp, #0]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	07d1      	lsls	r1, r2, #31
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	430b      	orrs	r3, r1
 8001928:	0030      	movs	r0, r6
 800192a:	0019      	movs	r1, r3
 800192c:	b007      	add	sp, #28
 800192e:	bc3c      	pop	{r2, r3, r4, r5}
 8001930:	4690      	mov	r8, r2
 8001932:	4699      	mov	r9, r3
 8001934:	46a2      	mov	sl, r4
 8001936:	46ab      	mov	fp, r5
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193a:	465b      	mov	r3, fp
 800193c:	433b      	orrs	r3, r7
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	d100      	bne.n	8001944 <__aeabi_dmul+0x110>
 8001942:	e12f      	b.n	8001ba4 <__aeabi_dmul+0x370>
 8001944:	2f00      	cmp	r7, #0
 8001946:	d100      	bne.n	800194a <__aeabi_dmul+0x116>
 8001948:	e1a5      	b.n	8001c96 <__aeabi_dmul+0x462>
 800194a:	0038      	movs	r0, r7
 800194c:	f000 fe58 	bl	8002600 <__clzsi2>
 8001950:	0003      	movs	r3, r0
 8001952:	3b0b      	subs	r3, #11
 8001954:	2b1c      	cmp	r3, #28
 8001956:	dd00      	ble.n	800195a <__aeabi_dmul+0x126>
 8001958:	e196      	b.n	8001c88 <__aeabi_dmul+0x454>
 800195a:	221d      	movs	r2, #29
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	465a      	mov	r2, fp
 8001960:	0001      	movs	r1, r0
 8001962:	40da      	lsrs	r2, r3
 8001964:	465e      	mov	r6, fp
 8001966:	3908      	subs	r1, #8
 8001968:	408f      	lsls	r7, r1
 800196a:	0013      	movs	r3, r2
 800196c:	408e      	lsls	r6, r1
 800196e:	433b      	orrs	r3, r7
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	4b9c      	ldr	r3, [pc, #624]	; (8001be4 <__aeabi_dmul+0x3b0>)
 8001974:	2700      	movs	r7, #0
 8001976:	1a1b      	subs	r3, r3, r0
 8001978:	4699      	mov	r9, r3
 800197a:	2300      	movs	r3, #0
 800197c:	469b      	mov	fp, r3
 800197e:	e77d      	b.n	800187c <__aeabi_dmul+0x48>
 8001980:	4641      	mov	r1, r8
 8001982:	4653      	mov	r3, sl
 8001984:	430b      	orrs	r3, r1
 8001986:	4993      	ldr	r1, [pc, #588]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 8001988:	468c      	mov	ip, r1
 800198a:	44e1      	add	r9, ip
 800198c:	2b00      	cmp	r3, #0
 800198e:	d000      	beq.n	8001992 <__aeabi_dmul+0x15e>
 8001990:	e11a      	b.n	8001bc8 <__aeabi_dmul+0x394>
 8001992:	2202      	movs	r2, #2
 8001994:	2002      	movs	r0, #2
 8001996:	4317      	orrs	r7, r2
 8001998:	2200      	movs	r2, #0
 800199a:	e78c      	b.n	80018b6 <__aeabi_dmul+0x82>
 800199c:	4313      	orrs	r3, r2
 800199e:	d100      	bne.n	80019a2 <__aeabi_dmul+0x16e>
 80019a0:	e10d      	b.n	8001bbe <__aeabi_dmul+0x38a>
 80019a2:	4643      	mov	r3, r8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d100      	bne.n	80019aa <__aeabi_dmul+0x176>
 80019a8:	e181      	b.n	8001cae <__aeabi_dmul+0x47a>
 80019aa:	4640      	mov	r0, r8
 80019ac:	f000 fe28 	bl	8002600 <__clzsi2>
 80019b0:	0002      	movs	r2, r0
 80019b2:	3a0b      	subs	r2, #11
 80019b4:	2a1c      	cmp	r2, #28
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dmul+0x186>
 80019b8:	e172      	b.n	8001ca0 <__aeabi_dmul+0x46c>
 80019ba:	0001      	movs	r1, r0
 80019bc:	4643      	mov	r3, r8
 80019be:	3908      	subs	r1, #8
 80019c0:	408b      	lsls	r3, r1
 80019c2:	4698      	mov	r8, r3
 80019c4:	231d      	movs	r3, #29
 80019c6:	1a9a      	subs	r2, r3, r2
 80019c8:	4653      	mov	r3, sl
 80019ca:	40d3      	lsrs	r3, r2
 80019cc:	001a      	movs	r2, r3
 80019ce:	4643      	mov	r3, r8
 80019d0:	4313      	orrs	r3, r2
 80019d2:	4652      	mov	r2, sl
 80019d4:	408a      	lsls	r2, r1
 80019d6:	4649      	mov	r1, r9
 80019d8:	1a08      	subs	r0, r1, r0
 80019da:	4982      	ldr	r1, [pc, #520]	; (8001be4 <__aeabi_dmul+0x3b0>)
 80019dc:	4689      	mov	r9, r1
 80019de:	4481      	add	r9, r0
 80019e0:	2000      	movs	r0, #0
 80019e2:	e768      	b.n	80018b6 <__aeabi_dmul+0x82>
 80019e4:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <__aeabi_dmul+0x3a0>)
 80019e6:	2700      	movs	r7, #0
 80019e8:	2600      	movs	r6, #0
 80019ea:	e78e      	b.n	800190a <__aeabi_dmul+0xd6>
 80019ec:	0c14      	lsrs	r4, r2, #16
 80019ee:	0412      	lsls	r2, r2, #16
 80019f0:	0c12      	lsrs	r2, r2, #16
 80019f2:	0011      	movs	r1, r2
 80019f4:	0c37      	lsrs	r7, r6, #16
 80019f6:	0436      	lsls	r6, r6, #16
 80019f8:	0c35      	lsrs	r5, r6, #16
 80019fa:	4379      	muls	r1, r7
 80019fc:	0028      	movs	r0, r5
 80019fe:	468c      	mov	ip, r1
 8001a00:	002e      	movs	r6, r5
 8001a02:	4360      	muls	r0, r4
 8001a04:	4460      	add	r0, ip
 8001a06:	4683      	mov	fp, r0
 8001a08:	4356      	muls	r6, r2
 8001a0a:	0021      	movs	r1, r4
 8001a0c:	0c30      	lsrs	r0, r6, #16
 8001a0e:	4680      	mov	r8, r0
 8001a10:	4658      	mov	r0, fp
 8001a12:	4379      	muls	r1, r7
 8001a14:	4440      	add	r0, r8
 8001a16:	9102      	str	r1, [sp, #8]
 8001a18:	4584      	cmp	ip, r0
 8001a1a:	d906      	bls.n	8001a2a <__aeabi_dmul+0x1f6>
 8001a1c:	4688      	mov	r8, r1
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0249      	lsls	r1, r1, #9
 8001a22:	468c      	mov	ip, r1
 8001a24:	44e0      	add	r8, ip
 8001a26:	4641      	mov	r1, r8
 8001a28:	9102      	str	r1, [sp, #8]
 8001a2a:	0436      	lsls	r6, r6, #16
 8001a2c:	0c01      	lsrs	r1, r0, #16
 8001a2e:	0c36      	lsrs	r6, r6, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	468b      	mov	fp, r1
 8001a34:	1981      	adds	r1, r0, r6
 8001a36:	0c1e      	lsrs	r6, r3, #16
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	9103      	str	r1, [sp, #12]
 8001a3e:	0019      	movs	r1, r3
 8001a40:	4379      	muls	r1, r7
 8001a42:	468c      	mov	ip, r1
 8001a44:	0028      	movs	r0, r5
 8001a46:	4375      	muls	r5, r6
 8001a48:	4465      	add	r5, ip
 8001a4a:	46a8      	mov	r8, r5
 8001a4c:	4358      	muls	r0, r3
 8001a4e:	0c05      	lsrs	r5, r0, #16
 8001a50:	4445      	add	r5, r8
 8001a52:	4377      	muls	r7, r6
 8001a54:	42a9      	cmp	r1, r5
 8001a56:	d903      	bls.n	8001a60 <__aeabi_dmul+0x22c>
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0249      	lsls	r1, r1, #9
 8001a5c:	468c      	mov	ip, r1
 8001a5e:	4467      	add	r7, ip
 8001a60:	0c29      	lsrs	r1, r5, #16
 8001a62:	468c      	mov	ip, r1
 8001a64:	0039      	movs	r1, r7
 8001a66:	0400      	lsls	r0, r0, #16
 8001a68:	0c00      	lsrs	r0, r0, #16
 8001a6a:	042d      	lsls	r5, r5, #16
 8001a6c:	182d      	adds	r5, r5, r0
 8001a6e:	4461      	add	r1, ip
 8001a70:	44ab      	add	fp, r5
 8001a72:	9105      	str	r1, [sp, #20]
 8001a74:	4659      	mov	r1, fp
 8001a76:	9104      	str	r1, [sp, #16]
 8001a78:	9901      	ldr	r1, [sp, #4]
 8001a7a:	040f      	lsls	r7, r1, #16
 8001a7c:	0c3f      	lsrs	r7, r7, #16
 8001a7e:	0c08      	lsrs	r0, r1, #16
 8001a80:	0039      	movs	r1, r7
 8001a82:	4351      	muls	r1, r2
 8001a84:	4342      	muls	r2, r0
 8001a86:	4690      	mov	r8, r2
 8001a88:	0002      	movs	r2, r0
 8001a8a:	468c      	mov	ip, r1
 8001a8c:	0c09      	lsrs	r1, r1, #16
 8001a8e:	468b      	mov	fp, r1
 8001a90:	4362      	muls	r2, r4
 8001a92:	437c      	muls	r4, r7
 8001a94:	4444      	add	r4, r8
 8001a96:	445c      	add	r4, fp
 8001a98:	45a0      	cmp	r8, r4
 8001a9a:	d903      	bls.n	8001aa4 <__aeabi_dmul+0x270>
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0249      	lsls	r1, r1, #9
 8001aa0:	4688      	mov	r8, r1
 8001aa2:	4442      	add	r2, r8
 8001aa4:	0c21      	lsrs	r1, r4, #16
 8001aa6:	4688      	mov	r8, r1
 8001aa8:	4661      	mov	r1, ip
 8001aaa:	0409      	lsls	r1, r1, #16
 8001aac:	0c09      	lsrs	r1, r1, #16
 8001aae:	468c      	mov	ip, r1
 8001ab0:	0039      	movs	r1, r7
 8001ab2:	4359      	muls	r1, r3
 8001ab4:	4343      	muls	r3, r0
 8001ab6:	4370      	muls	r0, r6
 8001ab8:	437e      	muls	r6, r7
 8001aba:	0c0f      	lsrs	r7, r1, #16
 8001abc:	18f6      	adds	r6, r6, r3
 8001abe:	0424      	lsls	r4, r4, #16
 8001ac0:	19be      	adds	r6, r7, r6
 8001ac2:	4464      	add	r4, ip
 8001ac4:	4442      	add	r2, r8
 8001ac6:	468c      	mov	ip, r1
 8001ac8:	42b3      	cmp	r3, r6
 8001aca:	d903      	bls.n	8001ad4 <__aeabi_dmul+0x2a0>
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	025b      	lsls	r3, r3, #9
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	4440      	add	r0, r8
 8001ad4:	9b02      	ldr	r3, [sp, #8]
 8001ad6:	4661      	mov	r1, ip
 8001ad8:	4698      	mov	r8, r3
 8001ada:	9b04      	ldr	r3, [sp, #16]
 8001adc:	0437      	lsls	r7, r6, #16
 8001ade:	4443      	add	r3, r8
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	45ab      	cmp	fp, r5
 8001ae4:	41ad      	sbcs	r5, r5
 8001ae6:	426b      	negs	r3, r5
 8001ae8:	040d      	lsls	r5, r1, #16
 8001aea:	9905      	ldr	r1, [sp, #20]
 8001aec:	0c2d      	lsrs	r5, r5, #16
 8001aee:	468c      	mov	ip, r1
 8001af0:	197f      	adds	r7, r7, r5
 8001af2:	4467      	add	r7, ip
 8001af4:	18fd      	adds	r5, r7, r3
 8001af6:	46a8      	mov	r8, r5
 8001af8:	465d      	mov	r5, fp
 8001afa:	192d      	adds	r5, r5, r4
 8001afc:	42a5      	cmp	r5, r4
 8001afe:	41a4      	sbcs	r4, r4
 8001b00:	4693      	mov	fp, r2
 8001b02:	4264      	negs	r4, r4
 8001b04:	46a4      	mov	ip, r4
 8001b06:	44c3      	add	fp, r8
 8001b08:	44dc      	add	ip, fp
 8001b0a:	428f      	cmp	r7, r1
 8001b0c:	41bf      	sbcs	r7, r7
 8001b0e:	4598      	cmp	r8, r3
 8001b10:	419b      	sbcs	r3, r3
 8001b12:	4593      	cmp	fp, r2
 8001b14:	4192      	sbcs	r2, r2
 8001b16:	45a4      	cmp	ip, r4
 8001b18:	41a4      	sbcs	r4, r4
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	427f      	negs	r7, r7
 8001b1e:	431f      	orrs	r7, r3
 8001b20:	0c36      	lsrs	r6, r6, #16
 8001b22:	4252      	negs	r2, r2
 8001b24:	4264      	negs	r4, r4
 8001b26:	19bf      	adds	r7, r7, r6
 8001b28:	4322      	orrs	r2, r4
 8001b2a:	18bf      	adds	r7, r7, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	1838      	adds	r0, r7, r0
 8001b30:	0243      	lsls	r3, r0, #9
 8001b32:	0dd2      	lsrs	r2, r2, #23
 8001b34:	9903      	ldr	r1, [sp, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	026a      	lsls	r2, r5, #9
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	1e50      	subs	r0, r2, #1
 8001b3e:	4182      	sbcs	r2, r0
 8001b40:	4661      	mov	r1, ip
 8001b42:	0ded      	lsrs	r5, r5, #23
 8001b44:	432a      	orrs	r2, r5
 8001b46:	024e      	lsls	r6, r1, #9
 8001b48:	4332      	orrs	r2, r6
 8001b4a:	01d9      	lsls	r1, r3, #7
 8001b4c:	d400      	bmi.n	8001b50 <__aeabi_dmul+0x31c>
 8001b4e:	e0b3      	b.n	8001cb8 <__aeabi_dmul+0x484>
 8001b50:	2601      	movs	r6, #1
 8001b52:	0850      	lsrs	r0, r2, #1
 8001b54:	4032      	ands	r2, r6
 8001b56:	4302      	orrs	r2, r0
 8001b58:	07de      	lsls	r6, r3, #31
 8001b5a:	4332      	orrs	r2, r6
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	4c22      	ldr	r4, [pc, #136]	; (8001be8 <__aeabi_dmul+0x3b4>)
 8001b60:	4454      	add	r4, sl
 8001b62:	2c00      	cmp	r4, #0
 8001b64:	dd62      	ble.n	8001c2c <__aeabi_dmul+0x3f8>
 8001b66:	0751      	lsls	r1, r2, #29
 8001b68:	d009      	beq.n	8001b7e <__aeabi_dmul+0x34a>
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	4010      	ands	r0, r2
 8001b6e:	2804      	cmp	r0, #4
 8001b70:	d005      	beq.n	8001b7e <__aeabi_dmul+0x34a>
 8001b72:	1d10      	adds	r0, r2, #4
 8001b74:	4290      	cmp	r0, r2
 8001b76:	4192      	sbcs	r2, r2
 8001b78:	4252      	negs	r2, r2
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	01d9      	lsls	r1, r3, #7
 8001b80:	d504      	bpl.n	8001b8c <__aeabi_dmul+0x358>
 8001b82:	2480      	movs	r4, #128	; 0x80
 8001b84:	4819      	ldr	r0, [pc, #100]	; (8001bec <__aeabi_dmul+0x3b8>)
 8001b86:	00e4      	lsls	r4, r4, #3
 8001b88:	4003      	ands	r3, r0
 8001b8a:	4454      	add	r4, sl
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <__aeabi_dmul+0x3bc>)
 8001b8e:	4284      	cmp	r4, r0
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_dmul+0x360>
 8001b92:	e727      	b.n	80019e4 <__aeabi_dmul+0x1b0>
 8001b94:	075e      	lsls	r6, r3, #29
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	08d2      	lsrs	r2, r2, #3
 8001b9a:	0b1f      	lsrs	r7, r3, #12
 8001b9c:	0563      	lsls	r3, r4, #21
 8001b9e:	4316      	orrs	r6, r2
 8001ba0:	0d5b      	lsrs	r3, r3, #21
 8001ba2:	e6b2      	b.n	800190a <__aeabi_dmul+0xd6>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	2704      	movs	r7, #4
 8001bac:	2600      	movs	r6, #0
 8001bae:	469b      	mov	fp, r3
 8001bb0:	e664      	b.n	800187c <__aeabi_dmul+0x48>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	9701      	str	r7, [sp, #4]
 8001bb6:	4681      	mov	r9, r0
 8001bb8:	270c      	movs	r7, #12
 8001bba:	469b      	mov	fp, r3
 8001bbc:	e65e      	b.n	800187c <__aeabi_dmul+0x48>
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4317      	orrs	r7, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	e676      	b.n	80018b6 <__aeabi_dmul+0x82>
 8001bc8:	2303      	movs	r3, #3
 8001bca:	2003      	movs	r0, #3
 8001bcc:	431f      	orrs	r7, r3
 8001bce:	4643      	mov	r3, r8
 8001bd0:	e671      	b.n	80018b6 <__aeabi_dmul+0x82>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	000007ff 	.word	0x000007ff
 8001bd8:	fffffc01 	.word	0xfffffc01
 8001bdc:	08007b70 	.word	0x08007b70
 8001be0:	800fffff 	.word	0x800fffff
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	000003ff 	.word	0x000003ff
 8001bec:	feffffff 	.word	0xfeffffff
 8001bf0:	000007fe 	.word	0x000007fe
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2780      	movs	r7, #128	; 0x80
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	033f      	lsls	r7, r7, #12
 8001bfc:	2600      	movs	r6, #0
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001c00:	e683      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c02:	9b01      	ldr	r3, [sp, #4]
 8001c04:	0032      	movs	r2, r6
 8001c06:	46a4      	mov	ip, r4
 8001c08:	4658      	mov	r0, fp
 8001c0a:	e670      	b.n	80018ee <__aeabi_dmul+0xba>
 8001c0c:	46ac      	mov	ip, r5
 8001c0e:	e66e      	b.n	80018ee <__aeabi_dmul+0xba>
 8001c10:	2780      	movs	r7, #128	; 0x80
 8001c12:	9901      	ldr	r1, [sp, #4]
 8001c14:	033f      	lsls	r7, r7, #12
 8001c16:	4239      	tst	r1, r7
 8001c18:	d02d      	beq.n	8001c76 <__aeabi_dmul+0x442>
 8001c1a:	423b      	tst	r3, r7
 8001c1c:	d12b      	bne.n	8001c76 <__aeabi_dmul+0x442>
 8001c1e:	431f      	orrs	r7, r3
 8001c20:	033f      	lsls	r7, r7, #12
 8001c22:	0b3f      	lsrs	r7, r7, #12
 8001c24:	9500      	str	r5, [sp, #0]
 8001c26:	0016      	movs	r6, r2
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001c2a:	e66e      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c2c:	2501      	movs	r5, #1
 8001c2e:	1b2d      	subs	r5, r5, r4
 8001c30:	2d38      	cmp	r5, #56	; 0x38
 8001c32:	dd00      	ble.n	8001c36 <__aeabi_dmul+0x402>
 8001c34:	e666      	b.n	8001904 <__aeabi_dmul+0xd0>
 8001c36:	2d1f      	cmp	r5, #31
 8001c38:	dc40      	bgt.n	8001cbc <__aeabi_dmul+0x488>
 8001c3a:	4835      	ldr	r0, [pc, #212]	; (8001d10 <__aeabi_dmul+0x4dc>)
 8001c3c:	001c      	movs	r4, r3
 8001c3e:	4450      	add	r0, sl
 8001c40:	0016      	movs	r6, r2
 8001c42:	4082      	lsls	r2, r0
 8001c44:	4084      	lsls	r4, r0
 8001c46:	40ee      	lsrs	r6, r5
 8001c48:	1e50      	subs	r0, r2, #1
 8001c4a:	4182      	sbcs	r2, r0
 8001c4c:	4334      	orrs	r4, r6
 8001c4e:	4314      	orrs	r4, r2
 8001c50:	40eb      	lsrs	r3, r5
 8001c52:	0762      	lsls	r2, r4, #29
 8001c54:	d009      	beq.n	8001c6a <__aeabi_dmul+0x436>
 8001c56:	220f      	movs	r2, #15
 8001c58:	4022      	ands	r2, r4
 8001c5a:	2a04      	cmp	r2, #4
 8001c5c:	d005      	beq.n	8001c6a <__aeabi_dmul+0x436>
 8001c5e:	0022      	movs	r2, r4
 8001c60:	1d14      	adds	r4, r2, #4
 8001c62:	4294      	cmp	r4, r2
 8001c64:	4180      	sbcs	r0, r0
 8001c66:	4240      	negs	r0, r0
 8001c68:	181b      	adds	r3, r3, r0
 8001c6a:	021a      	lsls	r2, r3, #8
 8001c6c:	d53e      	bpl.n	8001cec <__aeabi_dmul+0x4b8>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2700      	movs	r7, #0
 8001c72:	2600      	movs	r6, #0
 8001c74:	e649      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c76:	2780      	movs	r7, #128	; 0x80
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	033f      	lsls	r7, r7, #12
 8001c7c:	431f      	orrs	r7, r3
 8001c7e:	033f      	lsls	r7, r7, #12
 8001c80:	0b3f      	lsrs	r7, r7, #12
 8001c82:	9400      	str	r4, [sp, #0]
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001c86:	e640      	b.n	800190a <__aeabi_dmul+0xd6>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	465a      	mov	r2, fp
 8001c8c:	3b28      	subs	r3, #40	; 0x28
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	2600      	movs	r6, #0
 8001c92:	9201      	str	r2, [sp, #4]
 8001c94:	e66d      	b.n	8001972 <__aeabi_dmul+0x13e>
 8001c96:	4658      	mov	r0, fp
 8001c98:	f000 fcb2 	bl	8002600 <__clzsi2>
 8001c9c:	3020      	adds	r0, #32
 8001c9e:	e657      	b.n	8001950 <__aeabi_dmul+0x11c>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	4652      	mov	r2, sl
 8001ca4:	3b28      	subs	r3, #40	; 0x28
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	2200      	movs	r2, #0
 8001cac:	e693      	b.n	80019d6 <__aeabi_dmul+0x1a2>
 8001cae:	4650      	mov	r0, sl
 8001cb0:	f000 fca6 	bl	8002600 <__clzsi2>
 8001cb4:	3020      	adds	r0, #32
 8001cb6:	e67b      	b.n	80019b0 <__aeabi_dmul+0x17c>
 8001cb8:	46ca      	mov	sl, r9
 8001cba:	e750      	b.n	8001b5e <__aeabi_dmul+0x32a>
 8001cbc:	201f      	movs	r0, #31
 8001cbe:	001e      	movs	r6, r3
 8001cc0:	4240      	negs	r0, r0
 8001cc2:	1b04      	subs	r4, r0, r4
 8001cc4:	40e6      	lsrs	r6, r4
 8001cc6:	2d20      	cmp	r5, #32
 8001cc8:	d003      	beq.n	8001cd2 <__aeabi_dmul+0x49e>
 8001cca:	4c12      	ldr	r4, [pc, #72]	; (8001d14 <__aeabi_dmul+0x4e0>)
 8001ccc:	4454      	add	r4, sl
 8001cce:	40a3      	lsls	r3, r4
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	1e50      	subs	r0, r2, #1
 8001cd4:	4182      	sbcs	r2, r0
 8001cd6:	4332      	orrs	r2, r6
 8001cd8:	2607      	movs	r6, #7
 8001cda:	2700      	movs	r7, #0
 8001cdc:	4016      	ands	r6, r2
 8001cde:	d009      	beq.n	8001cf4 <__aeabi_dmul+0x4c0>
 8001ce0:	200f      	movs	r0, #15
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	4010      	ands	r0, r2
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	2804      	cmp	r0, #4
 8001cea:	d1b9      	bne.n	8001c60 <__aeabi_dmul+0x42c>
 8001cec:	0022      	movs	r2, r4
 8001cee:	075e      	lsls	r6, r3, #29
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	0b1f      	lsrs	r7, r3, #12
 8001cf4:	08d2      	lsrs	r2, r2, #3
 8001cf6:	4316      	orrs	r6, r2
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e606      	b.n	800190a <__aeabi_dmul+0xd6>
 8001cfc:	2780      	movs	r7, #128	; 0x80
 8001cfe:	033f      	lsls	r7, r7, #12
 8001d00:	431f      	orrs	r7, r3
 8001d02:	033f      	lsls	r7, r7, #12
 8001d04:	0b3f      	lsrs	r7, r7, #12
 8001d06:	0016      	movs	r6, r2
 8001d08:	4b00      	ldr	r3, [pc, #0]	; (8001d0c <__aeabi_dmul+0x4d8>)
 8001d0a:	e5fe      	b.n	800190a <__aeabi_dmul+0xd6>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	0000041e 	.word	0x0000041e
 8001d14:	0000043e 	.word	0x0000043e

08001d18 <__aeabi_dsub>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	464e      	mov	r6, r9
 8001d1e:	4645      	mov	r5, r8
 8001d20:	46de      	mov	lr, fp
 8001d22:	000c      	movs	r4, r1
 8001d24:	0309      	lsls	r1, r1, #12
 8001d26:	b5e0      	push	{r5, r6, r7, lr}
 8001d28:	0a49      	lsrs	r1, r1, #9
 8001d2a:	0f46      	lsrs	r6, r0, #29
 8001d2c:	005f      	lsls	r7, r3, #1
 8001d2e:	4331      	orrs	r1, r6
 8001d30:	031e      	lsls	r6, r3, #12
 8001d32:	0fdb      	lsrs	r3, r3, #31
 8001d34:	0a76      	lsrs	r6, r6, #9
 8001d36:	469b      	mov	fp, r3
 8001d38:	0f53      	lsrs	r3, r2, #29
 8001d3a:	4333      	orrs	r3, r6
 8001d3c:	4ec8      	ldr	r6, [pc, #800]	; (8002060 <__aeabi_dsub+0x348>)
 8001d3e:	0065      	lsls	r5, r4, #1
 8001d40:	00c0      	lsls	r0, r0, #3
 8001d42:	0fe4      	lsrs	r4, r4, #31
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	0d6d      	lsrs	r5, r5, #21
 8001d48:	46a2      	mov	sl, r4
 8001d4a:	4681      	mov	r9, r0
 8001d4c:	0d7f      	lsrs	r7, r7, #21
 8001d4e:	469c      	mov	ip, r3
 8001d50:	4690      	mov	r8, r2
 8001d52:	42b7      	cmp	r7, r6
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x40>
 8001d56:	e0b9      	b.n	8001ecc <__aeabi_dsub+0x1b4>
 8001d58:	465b      	mov	r3, fp
 8001d5a:	2601      	movs	r6, #1
 8001d5c:	4073      	eors	r3, r6
 8001d5e:	469b      	mov	fp, r3
 8001d60:	1bee      	subs	r6, r5, r7
 8001d62:	45a3      	cmp	fp, r4
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x50>
 8001d66:	e083      	b.n	8001e70 <__aeabi_dsub+0x158>
 8001d68:	2e00      	cmp	r6, #0
 8001d6a:	dd63      	ble.n	8001e34 <__aeabi_dsub+0x11c>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x5a>
 8001d70:	e0b1      	b.n	8001ed6 <__aeabi_dsub+0x1be>
 8001d72:	4663      	mov	r3, ip
 8001d74:	4313      	orrs	r3, r2
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dsub+0x62>
 8001d78:	e123      	b.n	8001fc2 <__aeabi_dsub+0x2aa>
 8001d7a:	1e73      	subs	r3, r6, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x6a>
 8001d80:	e1ba      	b.n	80020f8 <__aeabi_dsub+0x3e0>
 8001d82:	1a86      	subs	r6, r0, r2
 8001d84:	4663      	mov	r3, ip
 8001d86:	42b0      	cmp	r0, r6
 8001d88:	4180      	sbcs	r0, r0
 8001d8a:	2501      	movs	r5, #1
 8001d8c:	1ac9      	subs	r1, r1, r3
 8001d8e:	4240      	negs	r0, r0
 8001d90:	1a09      	subs	r1, r1, r0
 8001d92:	020b      	lsls	r3, r1, #8
 8001d94:	d400      	bmi.n	8001d98 <__aeabi_dsub+0x80>
 8001d96:	e147      	b.n	8002028 <__aeabi_dsub+0x310>
 8001d98:	0249      	lsls	r1, r1, #9
 8001d9a:	0a4b      	lsrs	r3, r1, #9
 8001d9c:	4698      	mov	r8, r3
 8001d9e:	4643      	mov	r3, r8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d100      	bne.n	8001da6 <__aeabi_dsub+0x8e>
 8001da4:	e189      	b.n	80020ba <__aeabi_dsub+0x3a2>
 8001da6:	4640      	mov	r0, r8
 8001da8:	f000 fc2a 	bl	8002600 <__clzsi2>
 8001dac:	0003      	movs	r3, r0
 8001dae:	3b08      	subs	r3, #8
 8001db0:	2b1f      	cmp	r3, #31
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dsub+0x9e>
 8001db4:	e17c      	b.n	80020b0 <__aeabi_dsub+0x398>
 8001db6:	2220      	movs	r2, #32
 8001db8:	0030      	movs	r0, r6
 8001dba:	1ad2      	subs	r2, r2, r3
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	40d0      	lsrs	r0, r2
 8001dc0:	4099      	lsls	r1, r3
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	409e      	lsls	r6, r3
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	429d      	cmp	r5, r3
 8001dca:	dd00      	ble.n	8001dce <__aeabi_dsub+0xb6>
 8001dcc:	e16a      	b.n	80020a4 <__aeabi_dsub+0x38c>
 8001dce:	1b5d      	subs	r5, r3, r5
 8001dd0:	1c6b      	adds	r3, r5, #1
 8001dd2:	2b1f      	cmp	r3, #31
 8001dd4:	dd00      	ble.n	8001dd8 <__aeabi_dsub+0xc0>
 8001dd6:	e194      	b.n	8002102 <__aeabi_dsub+0x3ea>
 8001dd8:	2120      	movs	r1, #32
 8001dda:	0010      	movs	r0, r2
 8001ddc:	0035      	movs	r5, r6
 8001dde:	1ac9      	subs	r1, r1, r3
 8001de0:	408e      	lsls	r6, r1
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	4088      	lsls	r0, r1
 8001de6:	40dd      	lsrs	r5, r3
 8001de8:	1e71      	subs	r1, r6, #1
 8001dea:	418e      	sbcs	r6, r1
 8001dec:	0011      	movs	r1, r2
 8001dee:	2207      	movs	r2, #7
 8001df0:	4328      	orrs	r0, r5
 8001df2:	2500      	movs	r5, #0
 8001df4:	4306      	orrs	r6, r0
 8001df6:	4032      	ands	r2, r6
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d009      	beq.n	8001e10 <__aeabi_dsub+0xf8>
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	4033      	ands	r3, r6
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <__aeabi_dsub+0xf8>
 8001e04:	1d33      	adds	r3, r6, #4
 8001e06:	42b3      	cmp	r3, r6
 8001e08:	41b6      	sbcs	r6, r6
 8001e0a:	4276      	negs	r6, r6
 8001e0c:	1989      	adds	r1, r1, r6
 8001e0e:	001e      	movs	r6, r3
 8001e10:	020b      	lsls	r3, r1, #8
 8001e12:	d400      	bmi.n	8001e16 <__aeabi_dsub+0xfe>
 8001e14:	e23d      	b.n	8002292 <__aeabi_dsub+0x57a>
 8001e16:	1c6a      	adds	r2, r5, #1
 8001e18:	4b91      	ldr	r3, [pc, #580]	; (8002060 <__aeabi_dsub+0x348>)
 8001e1a:	0555      	lsls	r5, r2, #21
 8001e1c:	0d6d      	lsrs	r5, r5, #21
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x10c>
 8001e22:	e119      	b.n	8002058 <__aeabi_dsub+0x340>
 8001e24:	4a8f      	ldr	r2, [pc, #572]	; (8002064 <__aeabi_dsub+0x34c>)
 8001e26:	08f6      	lsrs	r6, r6, #3
 8001e28:	400a      	ands	r2, r1
 8001e2a:	0757      	lsls	r7, r2, #29
 8001e2c:	0252      	lsls	r2, r2, #9
 8001e2e:	4337      	orrs	r7, r6
 8001e30:	0b12      	lsrs	r2, r2, #12
 8001e32:	e09b      	b.n	8001f6c <__aeabi_dsub+0x254>
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x122>
 8001e38:	e0c5      	b.n	8001fc6 <__aeabi_dsub+0x2ae>
 8001e3a:	1c6e      	adds	r6, r5, #1
 8001e3c:	0576      	lsls	r6, r6, #21
 8001e3e:	0d76      	lsrs	r6, r6, #21
 8001e40:	2e01      	cmp	r6, #1
 8001e42:	dc00      	bgt.n	8001e46 <__aeabi_dsub+0x12e>
 8001e44:	e148      	b.n	80020d8 <__aeabi_dsub+0x3c0>
 8001e46:	4667      	mov	r7, ip
 8001e48:	1a86      	subs	r6, r0, r2
 8001e4a:	1bcb      	subs	r3, r1, r7
 8001e4c:	42b0      	cmp	r0, r6
 8001e4e:	41bf      	sbcs	r7, r7
 8001e50:	427f      	negs	r7, r7
 8001e52:	46b8      	mov	r8, r7
 8001e54:	001f      	movs	r7, r3
 8001e56:	4643      	mov	r3, r8
 8001e58:	1aff      	subs	r7, r7, r3
 8001e5a:	003b      	movs	r3, r7
 8001e5c:	46b8      	mov	r8, r7
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	d500      	bpl.n	8001e64 <__aeabi_dsub+0x14c>
 8001e62:	e15f      	b.n	8002124 <__aeabi_dsub+0x40c>
 8001e64:	4337      	orrs	r7, r6
 8001e66:	d19a      	bne.n	8001d9e <__aeabi_dsub+0x86>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	e079      	b.n	8001f64 <__aeabi_dsub+0x24c>
 8001e70:	2e00      	cmp	r6, #0
 8001e72:	dc00      	bgt.n	8001e76 <__aeabi_dsub+0x15e>
 8001e74:	e0fa      	b.n	800206c <__aeabi_dsub+0x354>
 8001e76:	2f00      	cmp	r7, #0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x164>
 8001e7a:	e08d      	b.n	8001f98 <__aeabi_dsub+0x280>
 8001e7c:	4b78      	ldr	r3, [pc, #480]	; (8002060 <__aeabi_dsub+0x348>)
 8001e7e:	429d      	cmp	r5, r3
 8001e80:	d067      	beq.n	8001f52 <__aeabi_dsub+0x23a>
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	4667      	mov	r7, ip
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	431f      	orrs	r7, r3
 8001e8a:	46bc      	mov	ip, r7
 8001e8c:	2e38      	cmp	r6, #56	; 0x38
 8001e8e:	dc00      	bgt.n	8001e92 <__aeabi_dsub+0x17a>
 8001e90:	e152      	b.n	8002138 <__aeabi_dsub+0x420>
 8001e92:	4663      	mov	r3, ip
 8001e94:	4313      	orrs	r3, r2
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	4193      	sbcs	r3, r2
 8001e9a:	181e      	adds	r6, r3, r0
 8001e9c:	4286      	cmp	r6, r0
 8001e9e:	4180      	sbcs	r0, r0
 8001ea0:	4240      	negs	r0, r0
 8001ea2:	1809      	adds	r1, r1, r0
 8001ea4:	020b      	lsls	r3, r1, #8
 8001ea6:	d400      	bmi.n	8001eaa <__aeabi_dsub+0x192>
 8001ea8:	e0be      	b.n	8002028 <__aeabi_dsub+0x310>
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <__aeabi_dsub+0x348>)
 8001eac:	3501      	adds	r5, #1
 8001eae:	429d      	cmp	r5, r3
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x19c>
 8001eb2:	e0d2      	b.n	800205a <__aeabi_dsub+0x342>
 8001eb4:	4a6b      	ldr	r2, [pc, #428]	; (8002064 <__aeabi_dsub+0x34c>)
 8001eb6:	0873      	lsrs	r3, r6, #1
 8001eb8:	400a      	ands	r2, r1
 8001eba:	2101      	movs	r1, #1
 8001ebc:	400e      	ands	r6, r1
 8001ebe:	431e      	orrs	r6, r3
 8001ec0:	0851      	lsrs	r1, r2, #1
 8001ec2:	07d3      	lsls	r3, r2, #31
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	431e      	orrs	r6, r3
 8001ec8:	4032      	ands	r2, r6
 8001eca:	e795      	b.n	8001df8 <__aeabi_dsub+0xe0>
 8001ecc:	001e      	movs	r6, r3
 8001ece:	4316      	orrs	r6, r2
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_dsub+0x1bc>
 8001ed2:	e745      	b.n	8001d60 <__aeabi_dsub+0x48>
 8001ed4:	e740      	b.n	8001d58 <__aeabi_dsub+0x40>
 8001ed6:	4b62      	ldr	r3, [pc, #392]	; (8002060 <__aeabi_dsub+0x348>)
 8001ed8:	429d      	cmp	r5, r3
 8001eda:	d03a      	beq.n	8001f52 <__aeabi_dsub+0x23a>
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	4667      	mov	r7, ip
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	431f      	orrs	r7, r3
 8001ee4:	46bc      	mov	ip, r7
 8001ee6:	2e38      	cmp	r6, #56	; 0x38
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_dsub+0x1d4>
 8001eea:	e0eb      	b.n	80020c4 <__aeabi_dsub+0x3ac>
 8001eec:	2e1f      	cmp	r6, #31
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_dsub+0x1da>
 8001ef0:	e13a      	b.n	8002168 <__aeabi_dsub+0x450>
 8001ef2:	0033      	movs	r3, r6
 8001ef4:	4667      	mov	r7, ip
 8001ef6:	3b20      	subs	r3, #32
 8001ef8:	40df      	lsrs	r7, r3
 8001efa:	003b      	movs	r3, r7
 8001efc:	2e20      	cmp	r6, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x1f4>
 8001f00:	2740      	movs	r7, #64	; 0x40
 8001f02:	1bbf      	subs	r7, r7, r6
 8001f04:	4666      	mov	r6, ip
 8001f06:	40be      	lsls	r6, r7
 8001f08:	4332      	orrs	r2, r6
 8001f0a:	4690      	mov	r8, r2
 8001f0c:	4646      	mov	r6, r8
 8001f0e:	1e72      	subs	r2, r6, #1
 8001f10:	4196      	sbcs	r6, r2
 8001f12:	4333      	orrs	r3, r6
 8001f14:	e0da      	b.n	80020cc <__aeabi_dsub+0x3b4>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dsub+0x204>
 8001f1a:	e214      	b.n	8002346 <__aeabi_dsub+0x62e>
 8001f1c:	4663      	mov	r3, ip
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x20c>
 8001f22:	e168      	b.n	80021f6 <__aeabi_dsub+0x4de>
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	074e      	lsls	r6, r1, #29
 8001f28:	08c0      	lsrs	r0, r0, #3
 8001f2a:	08c9      	lsrs	r1, r1, #3
 8001f2c:	031b      	lsls	r3, r3, #12
 8001f2e:	4306      	orrs	r6, r0
 8001f30:	4219      	tst	r1, r3
 8001f32:	d008      	beq.n	8001f46 <__aeabi_dsub+0x22e>
 8001f34:	4660      	mov	r0, ip
 8001f36:	08c0      	lsrs	r0, r0, #3
 8001f38:	4218      	tst	r0, r3
 8001f3a:	d104      	bne.n	8001f46 <__aeabi_dsub+0x22e>
 8001f3c:	4663      	mov	r3, ip
 8001f3e:	0001      	movs	r1, r0
 8001f40:	08d2      	lsrs	r2, r2, #3
 8001f42:	075e      	lsls	r6, r3, #29
 8001f44:	4316      	orrs	r6, r2
 8001f46:	00f3      	lsls	r3, r6, #3
 8001f48:	4699      	mov	r9, r3
 8001f4a:	00c9      	lsls	r1, r1, #3
 8001f4c:	0f72      	lsrs	r2, r6, #29
 8001f4e:	4d44      	ldr	r5, [pc, #272]	; (8002060 <__aeabi_dsub+0x348>)
 8001f50:	4311      	orrs	r1, r2
 8001f52:	464b      	mov	r3, r9
 8001f54:	08de      	lsrs	r6, r3, #3
 8001f56:	4b42      	ldr	r3, [pc, #264]	; (8002060 <__aeabi_dsub+0x348>)
 8001f58:	074f      	lsls	r7, r1, #29
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	08ca      	lsrs	r2, r1, #3
 8001f5e:	429d      	cmp	r5, r3
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x24c>
 8001f62:	e06e      	b.n	8002042 <__aeabi_dsub+0x32a>
 8001f64:	0312      	lsls	r2, r2, #12
 8001f66:	056d      	lsls	r5, r5, #21
 8001f68:	0b12      	lsrs	r2, r2, #12
 8001f6a:	0d6d      	lsrs	r5, r5, #21
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	0312      	lsls	r2, r2, #12
 8001f70:	0b13      	lsrs	r3, r2, #12
 8001f72:	0d0a      	lsrs	r2, r1, #20
 8001f74:	0512      	lsls	r2, r2, #20
 8001f76:	431a      	orrs	r2, r3
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <__aeabi_dsub+0x350>)
 8001f7a:	052d      	lsls	r5, r5, #20
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	432b      	orrs	r3, r5
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	07e4      	lsls	r4, r4, #31
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	4323      	orrs	r3, r4
 8001f88:	0038      	movs	r0, r7
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	bc3c      	pop	{r2, r3, r4, r5}
 8001f8e:	4690      	mov	r8, r2
 8001f90:	4699      	mov	r9, r3
 8001f92:	46a2      	mov	sl, r4
 8001f94:	46ab      	mov	fp, r5
 8001f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f98:	4663      	mov	r3, ip
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	d011      	beq.n	8001fc2 <__aeabi_dsub+0x2aa>
 8001f9e:	1e73      	subs	r3, r6, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dsub+0x28e>
 8001fa4:	e107      	b.n	80021b6 <__aeabi_dsub+0x49e>
 8001fa6:	1886      	adds	r6, r0, r2
 8001fa8:	4286      	cmp	r6, r0
 8001faa:	4180      	sbcs	r0, r0
 8001fac:	4461      	add	r1, ip
 8001fae:	4240      	negs	r0, r0
 8001fb0:	1809      	adds	r1, r1, r0
 8001fb2:	2501      	movs	r5, #1
 8001fb4:	020b      	lsls	r3, r1, #8
 8001fb6:	d537      	bpl.n	8002028 <__aeabi_dsub+0x310>
 8001fb8:	2502      	movs	r5, #2
 8001fba:	e77b      	b.n	8001eb4 <__aeabi_dsub+0x19c>
 8001fbc:	003e      	movs	r6, r7
 8001fbe:	4661      	mov	r1, ip
 8001fc0:	4691      	mov	r9, r2
 8001fc2:	0035      	movs	r5, r6
 8001fc4:	e7c5      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8001fc6:	465c      	mov	r4, fp
 8001fc8:	2d00      	cmp	r5, #0
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x2b6>
 8001fcc:	e0e1      	b.n	8002192 <__aeabi_dsub+0x47a>
 8001fce:	000b      	movs	r3, r1
 8001fd0:	4303      	orrs	r3, r0
 8001fd2:	d0f3      	beq.n	8001fbc <__aeabi_dsub+0x2a4>
 8001fd4:	1c73      	adds	r3, r6, #1
 8001fd6:	d100      	bne.n	8001fda <__aeabi_dsub+0x2c2>
 8001fd8:	e1ac      	b.n	8002334 <__aeabi_dsub+0x61c>
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <__aeabi_dsub+0x348>)
 8001fdc:	429f      	cmp	r7, r3
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x2ca>
 8001fe0:	e13a      	b.n	8002258 <__aeabi_dsub+0x540>
 8001fe2:	43f3      	mvns	r3, r6
 8001fe4:	2b38      	cmp	r3, #56	; 0x38
 8001fe6:	dd00      	ble.n	8001fea <__aeabi_dsub+0x2d2>
 8001fe8:	e16f      	b.n	80022ca <__aeabi_dsub+0x5b2>
 8001fea:	2b1f      	cmp	r3, #31
 8001fec:	dd00      	ble.n	8001ff0 <__aeabi_dsub+0x2d8>
 8001fee:	e18c      	b.n	800230a <__aeabi_dsub+0x5f2>
 8001ff0:	2520      	movs	r5, #32
 8001ff2:	000e      	movs	r6, r1
 8001ff4:	1aed      	subs	r5, r5, r3
 8001ff6:	40ae      	lsls	r6, r5
 8001ff8:	46b0      	mov	r8, r6
 8001ffa:	0006      	movs	r6, r0
 8001ffc:	46aa      	mov	sl, r5
 8001ffe:	40de      	lsrs	r6, r3
 8002000:	4645      	mov	r5, r8
 8002002:	4335      	orrs	r5, r6
 8002004:	002e      	movs	r6, r5
 8002006:	4655      	mov	r5, sl
 8002008:	40d9      	lsrs	r1, r3
 800200a:	40a8      	lsls	r0, r5
 800200c:	4663      	mov	r3, ip
 800200e:	1e45      	subs	r5, r0, #1
 8002010:	41a8      	sbcs	r0, r5
 8002012:	1a5b      	subs	r3, r3, r1
 8002014:	469c      	mov	ip, r3
 8002016:	4330      	orrs	r0, r6
 8002018:	1a16      	subs	r6, r2, r0
 800201a:	42b2      	cmp	r2, r6
 800201c:	4192      	sbcs	r2, r2
 800201e:	4663      	mov	r3, ip
 8002020:	4252      	negs	r2, r2
 8002022:	1a99      	subs	r1, r3, r2
 8002024:	003d      	movs	r5, r7
 8002026:	e6b4      	b.n	8001d92 <__aeabi_dsub+0x7a>
 8002028:	2207      	movs	r2, #7
 800202a:	4032      	ands	r2, r6
 800202c:	2a00      	cmp	r2, #0
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x31a>
 8002030:	e6e4      	b.n	8001dfc <__aeabi_dsub+0xe4>
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <__aeabi_dsub+0x348>)
 8002034:	08f6      	lsrs	r6, r6, #3
 8002036:	074f      	lsls	r7, r1, #29
 8002038:	4337      	orrs	r7, r6
 800203a:	08ca      	lsrs	r2, r1, #3
 800203c:	429d      	cmp	r5, r3
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x32a>
 8002040:	e790      	b.n	8001f64 <__aeabi_dsub+0x24c>
 8002042:	003b      	movs	r3, r7
 8002044:	4313      	orrs	r3, r2
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x332>
 8002048:	e1a6      	b.n	8002398 <__aeabi_dsub+0x680>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	031b      	lsls	r3, r3, #12
 800204e:	431a      	orrs	r2, r3
 8002050:	0312      	lsls	r2, r2, #12
 8002052:	0b12      	lsrs	r2, r2, #12
 8002054:	4d02      	ldr	r5, [pc, #8]	; (8002060 <__aeabi_dsub+0x348>)
 8002056:	e789      	b.n	8001f6c <__aeabi_dsub+0x254>
 8002058:	0015      	movs	r5, r2
 800205a:	2200      	movs	r2, #0
 800205c:	2700      	movs	r7, #0
 800205e:	e785      	b.n	8001f6c <__aeabi_dsub+0x254>
 8002060:	000007ff 	.word	0x000007ff
 8002064:	ff7fffff 	.word	0xff7fffff
 8002068:	800fffff 	.word	0x800fffff
 800206c:	2e00      	cmp	r6, #0
 800206e:	d000      	beq.n	8002072 <__aeabi_dsub+0x35a>
 8002070:	e0c7      	b.n	8002202 <__aeabi_dsub+0x4ea>
 8002072:	1c6b      	adds	r3, r5, #1
 8002074:	055e      	lsls	r6, r3, #21
 8002076:	0d76      	lsrs	r6, r6, #21
 8002078:	2e01      	cmp	r6, #1
 800207a:	dc00      	bgt.n	800207e <__aeabi_dsub+0x366>
 800207c:	e0f0      	b.n	8002260 <__aeabi_dsub+0x548>
 800207e:	4dc8      	ldr	r5, [pc, #800]	; (80023a0 <__aeabi_dsub+0x688>)
 8002080:	42ab      	cmp	r3, r5
 8002082:	d100      	bne.n	8002086 <__aeabi_dsub+0x36e>
 8002084:	e0b9      	b.n	80021fa <__aeabi_dsub+0x4e2>
 8002086:	1885      	adds	r5, r0, r2
 8002088:	000a      	movs	r2, r1
 800208a:	4285      	cmp	r5, r0
 800208c:	4189      	sbcs	r1, r1
 800208e:	4462      	add	r2, ip
 8002090:	4249      	negs	r1, r1
 8002092:	1851      	adds	r1, r2, r1
 8002094:	2207      	movs	r2, #7
 8002096:	07ce      	lsls	r6, r1, #31
 8002098:	086d      	lsrs	r5, r5, #1
 800209a:	432e      	orrs	r6, r5
 800209c:	0849      	lsrs	r1, r1, #1
 800209e:	4032      	ands	r2, r6
 80020a0:	001d      	movs	r5, r3
 80020a2:	e6a9      	b.n	8001df8 <__aeabi_dsub+0xe0>
 80020a4:	49bf      	ldr	r1, [pc, #764]	; (80023a4 <__aeabi_dsub+0x68c>)
 80020a6:	1aed      	subs	r5, r5, r3
 80020a8:	4011      	ands	r1, r2
 80020aa:	2207      	movs	r2, #7
 80020ac:	4032      	ands	r2, r6
 80020ae:	e6a3      	b.n	8001df8 <__aeabi_dsub+0xe0>
 80020b0:	0032      	movs	r2, r6
 80020b2:	3828      	subs	r0, #40	; 0x28
 80020b4:	4082      	lsls	r2, r0
 80020b6:	2600      	movs	r6, #0
 80020b8:	e686      	b.n	8001dc8 <__aeabi_dsub+0xb0>
 80020ba:	0030      	movs	r0, r6
 80020bc:	f000 faa0 	bl	8002600 <__clzsi2>
 80020c0:	3020      	adds	r0, #32
 80020c2:	e673      	b.n	8001dac <__aeabi_dsub+0x94>
 80020c4:	4663      	mov	r3, ip
 80020c6:	4313      	orrs	r3, r2
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	4193      	sbcs	r3, r2
 80020cc:	1ac6      	subs	r6, r0, r3
 80020ce:	42b0      	cmp	r0, r6
 80020d0:	4180      	sbcs	r0, r0
 80020d2:	4240      	negs	r0, r0
 80020d4:	1a09      	subs	r1, r1, r0
 80020d6:	e65c      	b.n	8001d92 <__aeabi_dsub+0x7a>
 80020d8:	000e      	movs	r6, r1
 80020da:	4667      	mov	r7, ip
 80020dc:	4306      	orrs	r6, r0
 80020de:	4317      	orrs	r7, r2
 80020e0:	2d00      	cmp	r5, #0
 80020e2:	d15e      	bne.n	80021a2 <__aeabi_dsub+0x48a>
 80020e4:	2e00      	cmp	r6, #0
 80020e6:	d000      	beq.n	80020ea <__aeabi_dsub+0x3d2>
 80020e8:	e0f3      	b.n	80022d2 <__aeabi_dsub+0x5ba>
 80020ea:	2f00      	cmp	r7, #0
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x3d8>
 80020ee:	e11e      	b.n	800232e <__aeabi_dsub+0x616>
 80020f0:	465c      	mov	r4, fp
 80020f2:	4661      	mov	r1, ip
 80020f4:	4691      	mov	r9, r2
 80020f6:	e72c      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80020f8:	4fa9      	ldr	r7, [pc, #676]	; (80023a0 <__aeabi_dsub+0x688>)
 80020fa:	42be      	cmp	r6, r7
 80020fc:	d07b      	beq.n	80021f6 <__aeabi_dsub+0x4de>
 80020fe:	001e      	movs	r6, r3
 8002100:	e6f1      	b.n	8001ee6 <__aeabi_dsub+0x1ce>
 8002102:	0010      	movs	r0, r2
 8002104:	3d1f      	subs	r5, #31
 8002106:	40e8      	lsrs	r0, r5
 8002108:	2b20      	cmp	r3, #32
 800210a:	d003      	beq.n	8002114 <__aeabi_dsub+0x3fc>
 800210c:	2140      	movs	r1, #64	; 0x40
 800210e:	1acb      	subs	r3, r1, r3
 8002110:	409a      	lsls	r2, r3
 8002112:	4316      	orrs	r6, r2
 8002114:	1e73      	subs	r3, r6, #1
 8002116:	419e      	sbcs	r6, r3
 8002118:	2207      	movs	r2, #7
 800211a:	4306      	orrs	r6, r0
 800211c:	4032      	ands	r2, r6
 800211e:	2100      	movs	r1, #0
 8002120:	2500      	movs	r5, #0
 8002122:	e783      	b.n	800202c <__aeabi_dsub+0x314>
 8002124:	1a16      	subs	r6, r2, r0
 8002126:	4663      	mov	r3, ip
 8002128:	42b2      	cmp	r2, r6
 800212a:	4180      	sbcs	r0, r0
 800212c:	1a59      	subs	r1, r3, r1
 800212e:	4240      	negs	r0, r0
 8002130:	1a0b      	subs	r3, r1, r0
 8002132:	4698      	mov	r8, r3
 8002134:	465c      	mov	r4, fp
 8002136:	e632      	b.n	8001d9e <__aeabi_dsub+0x86>
 8002138:	2e1f      	cmp	r6, #31
 800213a:	dd00      	ble.n	800213e <__aeabi_dsub+0x426>
 800213c:	e0ab      	b.n	8002296 <__aeabi_dsub+0x57e>
 800213e:	2720      	movs	r7, #32
 8002140:	1bbb      	subs	r3, r7, r6
 8002142:	469a      	mov	sl, r3
 8002144:	4663      	mov	r3, ip
 8002146:	4657      	mov	r7, sl
 8002148:	40bb      	lsls	r3, r7
 800214a:	4699      	mov	r9, r3
 800214c:	0013      	movs	r3, r2
 800214e:	464f      	mov	r7, r9
 8002150:	40f3      	lsrs	r3, r6
 8002152:	431f      	orrs	r7, r3
 8002154:	003b      	movs	r3, r7
 8002156:	4657      	mov	r7, sl
 8002158:	40ba      	lsls	r2, r7
 800215a:	1e57      	subs	r7, r2, #1
 800215c:	41ba      	sbcs	r2, r7
 800215e:	4313      	orrs	r3, r2
 8002160:	4662      	mov	r2, ip
 8002162:	40f2      	lsrs	r2, r6
 8002164:	1889      	adds	r1, r1, r2
 8002166:	e698      	b.n	8001e9a <__aeabi_dsub+0x182>
 8002168:	2720      	movs	r7, #32
 800216a:	1bbb      	subs	r3, r7, r6
 800216c:	469a      	mov	sl, r3
 800216e:	4663      	mov	r3, ip
 8002170:	4657      	mov	r7, sl
 8002172:	40bb      	lsls	r3, r7
 8002174:	4699      	mov	r9, r3
 8002176:	0013      	movs	r3, r2
 8002178:	464f      	mov	r7, r9
 800217a:	40f3      	lsrs	r3, r6
 800217c:	431f      	orrs	r7, r3
 800217e:	003b      	movs	r3, r7
 8002180:	4657      	mov	r7, sl
 8002182:	40ba      	lsls	r2, r7
 8002184:	1e57      	subs	r7, r2, #1
 8002186:	41ba      	sbcs	r2, r7
 8002188:	4313      	orrs	r3, r2
 800218a:	4662      	mov	r2, ip
 800218c:	40f2      	lsrs	r2, r6
 800218e:	1a89      	subs	r1, r1, r2
 8002190:	e79c      	b.n	80020cc <__aeabi_dsub+0x3b4>
 8002192:	4b83      	ldr	r3, [pc, #524]	; (80023a0 <__aeabi_dsub+0x688>)
 8002194:	429f      	cmp	r7, r3
 8002196:	d05f      	beq.n	8002258 <__aeabi_dsub+0x540>
 8002198:	2580      	movs	r5, #128	; 0x80
 800219a:	042d      	lsls	r5, r5, #16
 800219c:	4273      	negs	r3, r6
 800219e:	4329      	orrs	r1, r5
 80021a0:	e720      	b.n	8001fe4 <__aeabi_dsub+0x2cc>
 80021a2:	2e00      	cmp	r6, #0
 80021a4:	d10c      	bne.n	80021c0 <__aeabi_dsub+0x4a8>
 80021a6:	2f00      	cmp	r7, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x494>
 80021aa:	e0d0      	b.n	800234e <__aeabi_dsub+0x636>
 80021ac:	465c      	mov	r4, fp
 80021ae:	4661      	mov	r1, ip
 80021b0:	4691      	mov	r9, r2
 80021b2:	4d7b      	ldr	r5, [pc, #492]	; (80023a0 <__aeabi_dsub+0x688>)
 80021b4:	e6cd      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80021b6:	4f7a      	ldr	r7, [pc, #488]	; (80023a0 <__aeabi_dsub+0x688>)
 80021b8:	42be      	cmp	r6, r7
 80021ba:	d01c      	beq.n	80021f6 <__aeabi_dsub+0x4de>
 80021bc:	001e      	movs	r6, r3
 80021be:	e665      	b.n	8001e8c <__aeabi_dsub+0x174>
 80021c0:	2f00      	cmp	r7, #0
 80021c2:	d018      	beq.n	80021f6 <__aeabi_dsub+0x4de>
 80021c4:	08c0      	lsrs	r0, r0, #3
 80021c6:	074e      	lsls	r6, r1, #29
 80021c8:	4306      	orrs	r6, r0
 80021ca:	2080      	movs	r0, #128	; 0x80
 80021cc:	08c9      	lsrs	r1, r1, #3
 80021ce:	0300      	lsls	r0, r0, #12
 80021d0:	4201      	tst	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dsub+0x4ce>
 80021d4:	4663      	mov	r3, ip
 80021d6:	08dc      	lsrs	r4, r3, #3
 80021d8:	4204      	tst	r4, r0
 80021da:	d104      	bne.n	80021e6 <__aeabi_dsub+0x4ce>
 80021dc:	0021      	movs	r1, r4
 80021de:	46da      	mov	sl, fp
 80021e0:	08d2      	lsrs	r2, r2, #3
 80021e2:	075e      	lsls	r6, r3, #29
 80021e4:	4316      	orrs	r6, r2
 80021e6:	00f3      	lsls	r3, r6, #3
 80021e8:	4699      	mov	r9, r3
 80021ea:	2401      	movs	r4, #1
 80021ec:	4653      	mov	r3, sl
 80021ee:	00c9      	lsls	r1, r1, #3
 80021f0:	0f72      	lsrs	r2, r6, #29
 80021f2:	4311      	orrs	r1, r2
 80021f4:	401c      	ands	r4, r3
 80021f6:	4d6a      	ldr	r5, [pc, #424]	; (80023a0 <__aeabi_dsub+0x688>)
 80021f8:	e6ab      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80021fa:	001d      	movs	r5, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	2700      	movs	r7, #0
 8002200:	e6b4      	b.n	8001f6c <__aeabi_dsub+0x254>
 8002202:	2d00      	cmp	r5, #0
 8002204:	d159      	bne.n	80022ba <__aeabi_dsub+0x5a2>
 8002206:	000b      	movs	r3, r1
 8002208:	4303      	orrs	r3, r0
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x4f6>
 800220c:	e6d6      	b.n	8001fbc <__aeabi_dsub+0x2a4>
 800220e:	1c73      	adds	r3, r6, #1
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x4fc>
 8002212:	e0b2      	b.n	800237a <__aeabi_dsub+0x662>
 8002214:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <__aeabi_dsub+0x688>)
 8002216:	429f      	cmp	r7, r3
 8002218:	d01e      	beq.n	8002258 <__aeabi_dsub+0x540>
 800221a:	43f3      	mvns	r3, r6
 800221c:	2b38      	cmp	r3, #56	; 0x38
 800221e:	dc6f      	bgt.n	8002300 <__aeabi_dsub+0x5e8>
 8002220:	2b1f      	cmp	r3, #31
 8002222:	dd00      	ble.n	8002226 <__aeabi_dsub+0x50e>
 8002224:	e097      	b.n	8002356 <__aeabi_dsub+0x63e>
 8002226:	2520      	movs	r5, #32
 8002228:	000e      	movs	r6, r1
 800222a:	1aed      	subs	r5, r5, r3
 800222c:	40ae      	lsls	r6, r5
 800222e:	46b0      	mov	r8, r6
 8002230:	0006      	movs	r6, r0
 8002232:	46aa      	mov	sl, r5
 8002234:	40de      	lsrs	r6, r3
 8002236:	4645      	mov	r5, r8
 8002238:	4335      	orrs	r5, r6
 800223a:	002e      	movs	r6, r5
 800223c:	4655      	mov	r5, sl
 800223e:	40a8      	lsls	r0, r5
 8002240:	40d9      	lsrs	r1, r3
 8002242:	1e45      	subs	r5, r0, #1
 8002244:	41a8      	sbcs	r0, r5
 8002246:	448c      	add	ip, r1
 8002248:	4306      	orrs	r6, r0
 800224a:	18b6      	adds	r6, r6, r2
 800224c:	4296      	cmp	r6, r2
 800224e:	4192      	sbcs	r2, r2
 8002250:	4251      	negs	r1, r2
 8002252:	4461      	add	r1, ip
 8002254:	003d      	movs	r5, r7
 8002256:	e625      	b.n	8001ea4 <__aeabi_dsub+0x18c>
 8002258:	003d      	movs	r5, r7
 800225a:	4661      	mov	r1, ip
 800225c:	4691      	mov	r9, r2
 800225e:	e678      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8002260:	000b      	movs	r3, r1
 8002262:	4303      	orrs	r3, r0
 8002264:	2d00      	cmp	r5, #0
 8002266:	d000      	beq.n	800226a <__aeabi_dsub+0x552>
 8002268:	e655      	b.n	8001f16 <__aeabi_dsub+0x1fe>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f5      	beq.n	800225a <__aeabi_dsub+0x542>
 800226e:	4663      	mov	r3, ip
 8002270:	4313      	orrs	r3, r2
 8002272:	d100      	bne.n	8002276 <__aeabi_dsub+0x55e>
 8002274:	e66d      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8002276:	1886      	adds	r6, r0, r2
 8002278:	4286      	cmp	r6, r0
 800227a:	4180      	sbcs	r0, r0
 800227c:	4461      	add	r1, ip
 800227e:	4240      	negs	r0, r0
 8002280:	1809      	adds	r1, r1, r0
 8002282:	2200      	movs	r2, #0
 8002284:	020b      	lsls	r3, r1, #8
 8002286:	d400      	bmi.n	800228a <__aeabi_dsub+0x572>
 8002288:	e6d0      	b.n	800202c <__aeabi_dsub+0x314>
 800228a:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <__aeabi_dsub+0x68c>)
 800228c:	3501      	adds	r5, #1
 800228e:	4019      	ands	r1, r3
 8002290:	e5b2      	b.n	8001df8 <__aeabi_dsub+0xe0>
 8002292:	46b1      	mov	r9, r6
 8002294:	e65d      	b.n	8001f52 <__aeabi_dsub+0x23a>
 8002296:	0033      	movs	r3, r6
 8002298:	4667      	mov	r7, ip
 800229a:	3b20      	subs	r3, #32
 800229c:	40df      	lsrs	r7, r3
 800229e:	003b      	movs	r3, r7
 80022a0:	2e20      	cmp	r6, #32
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dsub+0x598>
 80022a4:	2740      	movs	r7, #64	; 0x40
 80022a6:	1bbf      	subs	r7, r7, r6
 80022a8:	4666      	mov	r6, ip
 80022aa:	40be      	lsls	r6, r7
 80022ac:	4332      	orrs	r2, r6
 80022ae:	4690      	mov	r8, r2
 80022b0:	4646      	mov	r6, r8
 80022b2:	1e72      	subs	r2, r6, #1
 80022b4:	4196      	sbcs	r6, r2
 80022b6:	4333      	orrs	r3, r6
 80022b8:	e5ef      	b.n	8001e9a <__aeabi_dsub+0x182>
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <__aeabi_dsub+0x688>)
 80022bc:	429f      	cmp	r7, r3
 80022be:	d0cb      	beq.n	8002258 <__aeabi_dsub+0x540>
 80022c0:	2580      	movs	r5, #128	; 0x80
 80022c2:	042d      	lsls	r5, r5, #16
 80022c4:	4273      	negs	r3, r6
 80022c6:	4329      	orrs	r1, r5
 80022c8:	e7a8      	b.n	800221c <__aeabi_dsub+0x504>
 80022ca:	4308      	orrs	r0, r1
 80022cc:	1e41      	subs	r1, r0, #1
 80022ce:	4188      	sbcs	r0, r1
 80022d0:	e6a2      	b.n	8002018 <__aeabi_dsub+0x300>
 80022d2:	2f00      	cmp	r7, #0
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x5c0>
 80022d6:	e63c      	b.n	8001f52 <__aeabi_dsub+0x23a>
 80022d8:	4663      	mov	r3, ip
 80022da:	1a86      	subs	r6, r0, r2
 80022dc:	1acf      	subs	r7, r1, r3
 80022de:	42b0      	cmp	r0, r6
 80022e0:	419b      	sbcs	r3, r3
 80022e2:	425b      	negs	r3, r3
 80022e4:	1afb      	subs	r3, r7, r3
 80022e6:	4698      	mov	r8, r3
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	d54e      	bpl.n	800238a <__aeabi_dsub+0x672>
 80022ec:	1a16      	subs	r6, r2, r0
 80022ee:	4663      	mov	r3, ip
 80022f0:	42b2      	cmp	r2, r6
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	1a59      	subs	r1, r3, r1
 80022f6:	4252      	negs	r2, r2
 80022f8:	1a89      	subs	r1, r1, r2
 80022fa:	465c      	mov	r4, fp
 80022fc:	2200      	movs	r2, #0
 80022fe:	e57b      	b.n	8001df8 <__aeabi_dsub+0xe0>
 8002300:	4301      	orrs	r1, r0
 8002302:	000e      	movs	r6, r1
 8002304:	1e71      	subs	r1, r6, #1
 8002306:	418e      	sbcs	r6, r1
 8002308:	e79f      	b.n	800224a <__aeabi_dsub+0x532>
 800230a:	001d      	movs	r5, r3
 800230c:	000e      	movs	r6, r1
 800230e:	3d20      	subs	r5, #32
 8002310:	40ee      	lsrs	r6, r5
 8002312:	46b0      	mov	r8, r6
 8002314:	2b20      	cmp	r3, #32
 8002316:	d004      	beq.n	8002322 <__aeabi_dsub+0x60a>
 8002318:	2540      	movs	r5, #64	; 0x40
 800231a:	1aeb      	subs	r3, r5, r3
 800231c:	4099      	lsls	r1, r3
 800231e:	4308      	orrs	r0, r1
 8002320:	4681      	mov	r9, r0
 8002322:	4648      	mov	r0, r9
 8002324:	4643      	mov	r3, r8
 8002326:	1e41      	subs	r1, r0, #1
 8002328:	4188      	sbcs	r0, r1
 800232a:	4318      	orrs	r0, r3
 800232c:	e674      	b.n	8002018 <__aeabi_dsub+0x300>
 800232e:	2200      	movs	r2, #0
 8002330:	2400      	movs	r4, #0
 8002332:	e617      	b.n	8001f64 <__aeabi_dsub+0x24c>
 8002334:	1a16      	subs	r6, r2, r0
 8002336:	4663      	mov	r3, ip
 8002338:	42b2      	cmp	r2, r6
 800233a:	4192      	sbcs	r2, r2
 800233c:	1a59      	subs	r1, r3, r1
 800233e:	4252      	negs	r2, r2
 8002340:	1a89      	subs	r1, r1, r2
 8002342:	003d      	movs	r5, r7
 8002344:	e525      	b.n	8001d92 <__aeabi_dsub+0x7a>
 8002346:	4661      	mov	r1, ip
 8002348:	4691      	mov	r9, r2
 800234a:	4d15      	ldr	r5, [pc, #84]	; (80023a0 <__aeabi_dsub+0x688>)
 800234c:	e601      	b.n	8001f52 <__aeabi_dsub+0x23a>
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	2400      	movs	r4, #0
 8002352:	0312      	lsls	r2, r2, #12
 8002354:	e679      	b.n	800204a <__aeabi_dsub+0x332>
 8002356:	001d      	movs	r5, r3
 8002358:	000e      	movs	r6, r1
 800235a:	3d20      	subs	r5, #32
 800235c:	40ee      	lsrs	r6, r5
 800235e:	46b0      	mov	r8, r6
 8002360:	2b20      	cmp	r3, #32
 8002362:	d004      	beq.n	800236e <__aeabi_dsub+0x656>
 8002364:	2540      	movs	r5, #64	; 0x40
 8002366:	1aeb      	subs	r3, r5, r3
 8002368:	4099      	lsls	r1, r3
 800236a:	4308      	orrs	r0, r1
 800236c:	4681      	mov	r9, r0
 800236e:	464e      	mov	r6, r9
 8002370:	4643      	mov	r3, r8
 8002372:	1e71      	subs	r1, r6, #1
 8002374:	418e      	sbcs	r6, r1
 8002376:	431e      	orrs	r6, r3
 8002378:	e767      	b.n	800224a <__aeabi_dsub+0x532>
 800237a:	1886      	adds	r6, r0, r2
 800237c:	4296      	cmp	r6, r2
 800237e:	419b      	sbcs	r3, r3
 8002380:	4461      	add	r1, ip
 8002382:	425b      	negs	r3, r3
 8002384:	18c9      	adds	r1, r1, r3
 8002386:	003d      	movs	r5, r7
 8002388:	e58c      	b.n	8001ea4 <__aeabi_dsub+0x18c>
 800238a:	4647      	mov	r7, r8
 800238c:	4337      	orrs	r7, r6
 800238e:	d0ce      	beq.n	800232e <__aeabi_dsub+0x616>
 8002390:	2207      	movs	r2, #7
 8002392:	4641      	mov	r1, r8
 8002394:	4032      	ands	r2, r6
 8002396:	e649      	b.n	800202c <__aeabi_dsub+0x314>
 8002398:	2700      	movs	r7, #0
 800239a:	003a      	movs	r2, r7
 800239c:	e5e6      	b.n	8001f6c <__aeabi_dsub+0x254>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	000007ff 	.word	0x000007ff
 80023a4:	ff7fffff 	.word	0xff7fffff

080023a8 <__aeabi_dcmpun>:
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	4e0c      	ldr	r6, [pc, #48]	; (80023dc <__aeabi_dcmpun+0x34>)
 80023ac:	030d      	lsls	r5, r1, #12
 80023ae:	031c      	lsls	r4, r3, #12
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	0b2d      	lsrs	r5, r5, #12
 80023b6:	0d49      	lsrs	r1, r1, #21
 80023b8:	0b24      	lsrs	r4, r4, #12
 80023ba:	0d5b      	lsrs	r3, r3, #21
 80023bc:	42b1      	cmp	r1, r6
 80023be:	d008      	beq.n	80023d2 <__aeabi_dcmpun+0x2a>
 80023c0:	4906      	ldr	r1, [pc, #24]	; (80023dc <__aeabi_dcmpun+0x34>)
 80023c2:	2000      	movs	r0, #0
 80023c4:	428b      	cmp	r3, r1
 80023c6:	d103      	bne.n	80023d0 <__aeabi_dcmpun+0x28>
 80023c8:	4314      	orrs	r4, r2
 80023ca:	0020      	movs	r0, r4
 80023cc:	1e44      	subs	r4, r0, #1
 80023ce:	41a0      	sbcs	r0, r4
 80023d0:	bd70      	pop	{r4, r5, r6, pc}
 80023d2:	4305      	orrs	r5, r0
 80023d4:	2001      	movs	r0, #1
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d1fa      	bne.n	80023d0 <__aeabi_dcmpun+0x28>
 80023da:	e7f1      	b.n	80023c0 <__aeabi_dcmpun+0x18>
 80023dc:	000007ff 	.word	0x000007ff

080023e0 <__aeabi_i2d>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d02d      	beq.n	8002442 <__aeabi_i2d+0x62>
 80023e6:	17c3      	asrs	r3, r0, #31
 80023e8:	18c5      	adds	r5, r0, r3
 80023ea:	405d      	eors	r5, r3
 80023ec:	0fc4      	lsrs	r4, r0, #31
 80023ee:	0028      	movs	r0, r5
 80023f0:	f000 f906 	bl	8002600 <__clzsi2>
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <__aeabi_i2d+0x6c>)
 80023f6:	1a1b      	subs	r3, r3, r0
 80023f8:	055b      	lsls	r3, r3, #21
 80023fa:	0d5b      	lsrs	r3, r3, #21
 80023fc:	280a      	cmp	r0, #10
 80023fe:	dd15      	ble.n	800242c <__aeabi_i2d+0x4c>
 8002400:	380b      	subs	r0, #11
 8002402:	4085      	lsls	r5, r0
 8002404:	2200      	movs	r2, #0
 8002406:	032d      	lsls	r5, r5, #12
 8002408:	0b2d      	lsrs	r5, r5, #12
 800240a:	2100      	movs	r1, #0
 800240c:	0010      	movs	r0, r2
 800240e:	032d      	lsls	r5, r5, #12
 8002410:	0d0a      	lsrs	r2, r1, #20
 8002412:	0b2d      	lsrs	r5, r5, #12
 8002414:	0512      	lsls	r2, r2, #20
 8002416:	432a      	orrs	r2, r5
 8002418:	4d0d      	ldr	r5, [pc, #52]	; (8002450 <__aeabi_i2d+0x70>)
 800241a:	051b      	lsls	r3, r3, #20
 800241c:	402a      	ands	r2, r5
 800241e:	4313      	orrs	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	07e4      	lsls	r4, r4, #31
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	4323      	orrs	r3, r4
 8002428:	0019      	movs	r1, r3
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	0002      	movs	r2, r0
 800242e:	0029      	movs	r1, r5
 8002430:	3215      	adds	r2, #21
 8002432:	4091      	lsls	r1, r2
 8002434:	000a      	movs	r2, r1
 8002436:	210b      	movs	r1, #11
 8002438:	1a08      	subs	r0, r1, r0
 800243a:	40c5      	lsrs	r5, r0
 800243c:	032d      	lsls	r5, r5, #12
 800243e:	0b2d      	lsrs	r5, r5, #12
 8002440:	e7e3      	b.n	800240a <__aeabi_i2d+0x2a>
 8002442:	2400      	movs	r4, #0
 8002444:	2300      	movs	r3, #0
 8002446:	2500      	movs	r5, #0
 8002448:	2200      	movs	r2, #0
 800244a:	e7de      	b.n	800240a <__aeabi_i2d+0x2a>
 800244c:	0000041e 	.word	0x0000041e
 8002450:	800fffff 	.word	0x800fffff

08002454 <__aeabi_f2d>:
 8002454:	0041      	lsls	r1, r0, #1
 8002456:	0e09      	lsrs	r1, r1, #24
 8002458:	1c4b      	adds	r3, r1, #1
 800245a:	b570      	push	{r4, r5, r6, lr}
 800245c:	b2db      	uxtb	r3, r3
 800245e:	0246      	lsls	r6, r0, #9
 8002460:	0a75      	lsrs	r5, r6, #9
 8002462:	0fc4      	lsrs	r4, r0, #31
 8002464:	2b01      	cmp	r3, #1
 8002466:	dd14      	ble.n	8002492 <__aeabi_f2d+0x3e>
 8002468:	23e0      	movs	r3, #224	; 0xe0
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	076d      	lsls	r5, r5, #29
 800246e:	0b36      	lsrs	r6, r6, #12
 8002470:	18cb      	adds	r3, r1, r3
 8002472:	2100      	movs	r1, #0
 8002474:	0d0a      	lsrs	r2, r1, #20
 8002476:	0028      	movs	r0, r5
 8002478:	0512      	lsls	r2, r2, #20
 800247a:	4d1c      	ldr	r5, [pc, #112]	; (80024ec <__aeabi_f2d+0x98>)
 800247c:	4332      	orrs	r2, r6
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	402a      	ands	r2, r5
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	4313      	orrs	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	07e4      	lsls	r4, r4, #31
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	4323      	orrs	r3, r4
 800248e:	0019      	movs	r1, r3
 8002490:	bd70      	pop	{r4, r5, r6, pc}
 8002492:	2900      	cmp	r1, #0
 8002494:	d114      	bne.n	80024c0 <__aeabi_f2d+0x6c>
 8002496:	2d00      	cmp	r5, #0
 8002498:	d01e      	beq.n	80024d8 <__aeabi_f2d+0x84>
 800249a:	0028      	movs	r0, r5
 800249c:	f000 f8b0 	bl	8002600 <__clzsi2>
 80024a0:	280a      	cmp	r0, #10
 80024a2:	dc1c      	bgt.n	80024de <__aeabi_f2d+0x8a>
 80024a4:	230b      	movs	r3, #11
 80024a6:	002a      	movs	r2, r5
 80024a8:	1a1b      	subs	r3, r3, r0
 80024aa:	40da      	lsrs	r2, r3
 80024ac:	0003      	movs	r3, r0
 80024ae:	3315      	adds	r3, #21
 80024b0:	409d      	lsls	r5, r3
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <__aeabi_f2d+0x9c>)
 80024b4:	0312      	lsls	r2, r2, #12
 80024b6:	1a1b      	subs	r3, r3, r0
 80024b8:	055b      	lsls	r3, r3, #21
 80024ba:	0b16      	lsrs	r6, r2, #12
 80024bc:	0d5b      	lsrs	r3, r3, #21
 80024be:	e7d8      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	d006      	beq.n	80024d2 <__aeabi_f2d+0x7e>
 80024c4:	0b32      	lsrs	r2, r6, #12
 80024c6:	2680      	movs	r6, #128	; 0x80
 80024c8:	0336      	lsls	r6, r6, #12
 80024ca:	076d      	lsls	r5, r5, #29
 80024cc:	4316      	orrs	r6, r2
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <__aeabi_f2d+0xa0>)
 80024d0:	e7cf      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <__aeabi_f2d+0xa0>)
 80024d4:	2600      	movs	r6, #0
 80024d6:	e7cc      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024d8:	2300      	movs	r3, #0
 80024da:	2600      	movs	r6, #0
 80024dc:	e7c9      	b.n	8002472 <__aeabi_f2d+0x1e>
 80024de:	0003      	movs	r3, r0
 80024e0:	002a      	movs	r2, r5
 80024e2:	3b0b      	subs	r3, #11
 80024e4:	409a      	lsls	r2, r3
 80024e6:	2500      	movs	r5, #0
 80024e8:	e7e3      	b.n	80024b2 <__aeabi_f2d+0x5e>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	800fffff 	.word	0x800fffff
 80024f0:	00000389 	.word	0x00000389
 80024f4:	000007ff 	.word	0x000007ff

080024f8 <__aeabi_d2f>:
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	004c      	lsls	r4, r1, #1
 80024fc:	0d64      	lsrs	r4, r4, #21
 80024fe:	030b      	lsls	r3, r1, #12
 8002500:	1c62      	adds	r2, r4, #1
 8002502:	0a5b      	lsrs	r3, r3, #9
 8002504:	0f46      	lsrs	r6, r0, #29
 8002506:	0552      	lsls	r2, r2, #21
 8002508:	0fc9      	lsrs	r1, r1, #31
 800250a:	431e      	orrs	r6, r3
 800250c:	00c5      	lsls	r5, r0, #3
 800250e:	0d52      	lsrs	r2, r2, #21
 8002510:	2a01      	cmp	r2, #1
 8002512:	dd29      	ble.n	8002568 <__aeabi_d2f+0x70>
 8002514:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <__aeabi_d2f+0xfc>)
 8002516:	18e7      	adds	r7, r4, r3
 8002518:	2ffe      	cmp	r7, #254	; 0xfe
 800251a:	dc1c      	bgt.n	8002556 <__aeabi_d2f+0x5e>
 800251c:	2f00      	cmp	r7, #0
 800251e:	dd3b      	ble.n	8002598 <__aeabi_d2f+0xa0>
 8002520:	0180      	lsls	r0, r0, #6
 8002522:	1e43      	subs	r3, r0, #1
 8002524:	4198      	sbcs	r0, r3
 8002526:	2207      	movs	r2, #7
 8002528:	00f3      	lsls	r3, r6, #3
 800252a:	0f6d      	lsrs	r5, r5, #29
 800252c:	4303      	orrs	r3, r0
 800252e:	432b      	orrs	r3, r5
 8002530:	401a      	ands	r2, r3
 8002532:	2a00      	cmp	r2, #0
 8002534:	d004      	beq.n	8002540 <__aeabi_d2f+0x48>
 8002536:	220f      	movs	r2, #15
 8002538:	401a      	ands	r2, r3
 800253a:	2a04      	cmp	r2, #4
 800253c:	d000      	beq.n	8002540 <__aeabi_d2f+0x48>
 800253e:	3304      	adds	r3, #4
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	04d2      	lsls	r2, r2, #19
 8002544:	401a      	ands	r2, r3
 8002546:	d024      	beq.n	8002592 <__aeabi_d2f+0x9a>
 8002548:	3701      	adds	r7, #1
 800254a:	b2fa      	uxtb	r2, r7
 800254c:	2fff      	cmp	r7, #255	; 0xff
 800254e:	d002      	beq.n	8002556 <__aeabi_d2f+0x5e>
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	0a58      	lsrs	r0, r3, #9
 8002554:	e001      	b.n	800255a <__aeabi_d2f+0x62>
 8002556:	22ff      	movs	r2, #255	; 0xff
 8002558:	2000      	movs	r0, #0
 800255a:	0240      	lsls	r0, r0, #9
 800255c:	05d2      	lsls	r2, r2, #23
 800255e:	0a40      	lsrs	r0, r0, #9
 8002560:	07c9      	lsls	r1, r1, #31
 8002562:	4310      	orrs	r0, r2
 8002564:	4308      	orrs	r0, r1
 8002566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002568:	4335      	orrs	r5, r6
 800256a:	2c00      	cmp	r4, #0
 800256c:	d104      	bne.n	8002578 <__aeabi_d2f+0x80>
 800256e:	2d00      	cmp	r5, #0
 8002570:	d10a      	bne.n	8002588 <__aeabi_d2f+0x90>
 8002572:	2200      	movs	r2, #0
 8002574:	2000      	movs	r0, #0
 8002576:	e7f0      	b.n	800255a <__aeabi_d2f+0x62>
 8002578:	2d00      	cmp	r5, #0
 800257a:	d0ec      	beq.n	8002556 <__aeabi_d2f+0x5e>
 800257c:	2080      	movs	r0, #128	; 0x80
 800257e:	03c0      	lsls	r0, r0, #15
 8002580:	4330      	orrs	r0, r6
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	e7e9      	b.n	800255a <__aeabi_d2f+0x62>
 8002586:	2400      	movs	r4, #0
 8002588:	2300      	movs	r3, #0
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	0a58      	lsrs	r0, r3, #9
 800258e:	b2e2      	uxtb	r2, r4
 8002590:	e7e3      	b.n	800255a <__aeabi_d2f+0x62>
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	003c      	movs	r4, r7
 8002596:	e7f8      	b.n	800258a <__aeabi_d2f+0x92>
 8002598:	003b      	movs	r3, r7
 800259a:	3317      	adds	r3, #23
 800259c:	dbf3      	blt.n	8002586 <__aeabi_d2f+0x8e>
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	4333      	orrs	r3, r6
 80025a4:	261e      	movs	r6, #30
 80025a6:	1bf6      	subs	r6, r6, r7
 80025a8:	2e1f      	cmp	r6, #31
 80025aa:	dd14      	ble.n	80025d6 <__aeabi_d2f+0xde>
 80025ac:	2202      	movs	r2, #2
 80025ae:	4252      	negs	r2, r2
 80025b0:	1bd7      	subs	r7, r2, r7
 80025b2:	001a      	movs	r2, r3
 80025b4:	40fa      	lsrs	r2, r7
 80025b6:	0017      	movs	r7, r2
 80025b8:	2e20      	cmp	r6, #32
 80025ba:	d004      	beq.n	80025c6 <__aeabi_d2f+0xce>
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <__aeabi_d2f+0x100>)
 80025be:	4694      	mov	ip, r2
 80025c0:	4464      	add	r4, ip
 80025c2:	40a3      	lsls	r3, r4
 80025c4:	431d      	orrs	r5, r3
 80025c6:	002b      	movs	r3, r5
 80025c8:	1e5d      	subs	r5, r3, #1
 80025ca:	41ab      	sbcs	r3, r5
 80025cc:	2207      	movs	r2, #7
 80025ce:	433b      	orrs	r3, r7
 80025d0:	401a      	ands	r2, r3
 80025d2:	2700      	movs	r7, #0
 80025d4:	e7ad      	b.n	8002532 <__aeabi_d2f+0x3a>
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <__aeabi_d2f+0x104>)
 80025d8:	0028      	movs	r0, r5
 80025da:	18a2      	adds	r2, r4, r2
 80025dc:	4095      	lsls	r5, r2
 80025de:	4093      	lsls	r3, r2
 80025e0:	1e6c      	subs	r4, r5, #1
 80025e2:	41a5      	sbcs	r5, r4
 80025e4:	40f0      	lsrs	r0, r6
 80025e6:	2207      	movs	r2, #7
 80025e8:	432b      	orrs	r3, r5
 80025ea:	4303      	orrs	r3, r0
 80025ec:	401a      	ands	r2, r3
 80025ee:	2700      	movs	r7, #0
 80025f0:	e79f      	b.n	8002532 <__aeabi_d2f+0x3a>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	fffffc80 	.word	0xfffffc80
 80025f8:	fffffca2 	.word	0xfffffca2
 80025fc:	fffffc82 	.word	0xfffffc82

08002600 <__clzsi2>:
 8002600:	211c      	movs	r1, #28
 8002602:	2301      	movs	r3, #1
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	4298      	cmp	r0, r3
 8002608:	d301      	bcc.n	800260e <__clzsi2+0xe>
 800260a:	0c00      	lsrs	r0, r0, #16
 800260c:	3910      	subs	r1, #16
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	4298      	cmp	r0, r3
 8002612:	d301      	bcc.n	8002618 <__clzsi2+0x18>
 8002614:	0a00      	lsrs	r0, r0, #8
 8002616:	3908      	subs	r1, #8
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	4298      	cmp	r0, r3
 800261c:	d301      	bcc.n	8002622 <__clzsi2+0x22>
 800261e:	0900      	lsrs	r0, r0, #4
 8002620:	3904      	subs	r1, #4
 8002622:	a202      	add	r2, pc, #8	; (adr r2, 800262c <__clzsi2+0x2c>)
 8002624:	5c10      	ldrb	r0, [r2, r0]
 8002626:	1840      	adds	r0, r0, r1
 8002628:	4770      	bx	lr
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	02020304 	.word	0x02020304
 8002630:	01010101 	.word	0x01010101
	...

0800263c <__clzdi2>:
 800263c:	b510      	push	{r4, lr}
 800263e:	2900      	cmp	r1, #0
 8002640:	d103      	bne.n	800264a <__clzdi2+0xe>
 8002642:	f7ff ffdd 	bl	8002600 <__clzsi2>
 8002646:	3020      	adds	r0, #32
 8002648:	e002      	b.n	8002650 <__clzdi2+0x14>
 800264a:	1c08      	adds	r0, r1, #0
 800264c:	f7ff ffd8 	bl	8002600 <__clzsi2>
 8002650:	bd10      	pop	{r4, pc}
 8002652:	46c0      	nop			; (mov r8, r8)

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002658:	f000 fdbe 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800265c:	f000 f80e 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002660:	f000 f9a4 	bl	80029ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8002664:	f000 f8c6 	bl	80027f4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002668:	f000 f8fc 	bl	8002864 <MX_TIM2_Init>
  MX_I2C1_Init();
 800266c:	f000 f882 	bl	8002774 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002670:	f000 f96c 	bl	800294c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002674:	f000 f870 	bl	8002758 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002678:	e7fe      	b.n	8002678 <main+0x24>
	...

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b09f      	sub	sp, #124	; 0x7c
 8002680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002682:	2440      	movs	r4, #64	; 0x40
 8002684:	193b      	adds	r3, r7, r4
 8002686:	0018      	movs	r0, r3
 8002688:	2338      	movs	r3, #56	; 0x38
 800268a:	001a      	movs	r2, r3
 800268c:	2100      	movs	r1, #0
 800268e:	f004 f9f5 	bl	8006a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002692:	232c      	movs	r3, #44	; 0x2c
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	0018      	movs	r0, r3
 8002698:	2314      	movs	r3, #20
 800269a:	001a      	movs	r2, r3
 800269c:	2100      	movs	r1, #0
 800269e:	f004 f9ed 	bl	8006a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	0018      	movs	r0, r3
 80026a6:	2328      	movs	r3, #40	; 0x28
 80026a8:	001a      	movs	r2, r3
 80026aa:	2100      	movs	r1, #0
 80026ac:	f004 f9e6 	bl	8006a7c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <SystemClock_Config+0xd4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <SystemClock_Config+0xd8>)
 80026b6:	401a      	ands	r2, r3
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <SystemClock_Config+0xd4>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	0109      	lsls	r1, r1, #4
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026c2:	0021      	movs	r1, r4
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2210      	movs	r2, #16
 80026c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2201      	movs	r2, #1
 80026ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	22a0      	movs	r2, #160	; 0xa0
 80026da:	0212      	lsls	r2, r2, #8
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	0018      	movs	r0, r3
 80026e8:	f001 f980 	bl	80039ec <HAL_RCC_OscConfig>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80026f0:	f000 fa08 	bl	8002b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	220f      	movs	r2, #15
 80026fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002708:	187b      	adds	r3, r7, r1
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2100      	movs	r1, #0
 8002718:	0018      	movs	r0, r3
 800271a:	f001 fd37 	bl	800418c <HAL_RCC_ClockConfig>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002722:	f000 f9ef 	bl	8002b04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	220a      	movs	r2, #10
 800272a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	0018      	movs	r0, r3
 800273c:	f001 ff0a 	bl	8004554 <HAL_RCCEx_PeriphCLKConfig>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d001      	beq.n	8002748 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002744:	f000 f9de 	bl	8002b04 <Error_Handler>
  }
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b01f      	add	sp, #124	; 0x7c
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	40007000 	.word	0x40007000
 8002754:	ffffe7ff 	.word	0xffffe7ff

08002758 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2101      	movs	r1, #1
 8002760:	200f      	movs	r0, #15
 8002762:	f000 fe35 	bl	80033d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002766:	200f      	movs	r0, #15
 8002768:	f000 fe47 	bl	80033fa <HAL_NVIC_EnableIRQ>
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_I2C1_Init+0x78>)
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <MX_I2C1_Init+0x7c>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <MX_I2C1_Init+0x78>)
 8002780:	22e1      	movs	r2, #225	; 0xe1
 8002782:	00d2      	lsls	r2, r2, #3
 8002784:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <MX_I2C1_Init+0x78>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_I2C1_Init+0x78>)
 800278e:	2201      	movs	r2, #1
 8002790:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_I2C1_Init+0x78>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_I2C1_Init+0x78>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_I2C1_Init+0x78>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_I2C1_Init+0x78>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_I2C1_Init+0x78>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_I2C1_Init+0x78>)
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 ffec 	bl	8003790 <HAL_I2C_Init>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d001      	beq.n	80027c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027bc:	f000 f9a2 	bl	8002b04 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <MX_I2C1_Init+0x78>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 f879 	bl	80038bc <HAL_I2CEx_ConfigAnalogFilter>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80027ce:	f000 f999 	bl	8002b04 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_I2C1_Init+0x78>)
 80027d4:	2100      	movs	r1, #0
 80027d6:	0018      	movs	r0, r3
 80027d8:	f001 f8bc 	bl	8003954 <HAL_I2CEx_ConfigDigitalFilter>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80027e0:	f000 f990 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	2000008c 	.word	0x2000008c
 80027f0:	40005400 	.word	0x40005400

080027f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <MX_SPI1_Init+0x68>)
 80027fa:	4a19      	ldr	r2, [pc, #100]	; (8002860 <MX_SPI1_Init+0x6c>)
 80027fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <MX_SPI1_Init+0x68>)
 8002800:	2282      	movs	r2, #130	; 0x82
 8002802:	0052      	lsls	r2, r2, #1
 8002804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <MX_SPI1_Init+0x68>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <MX_SPI1_Init+0x68>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <MX_SPI1_Init+0x68>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <MX_SPI1_Init+0x68>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_SPI1_Init+0x68>)
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	02d2      	lsls	r2, r2, #11
 8002824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <MX_SPI1_Init+0x68>)
 8002828:	2238      	movs	r2, #56	; 0x38
 800282a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MX_SPI1_Init+0x68>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <MX_SPI1_Init+0x68>)
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <MX_SPI1_Init+0x68>)
 800283a:	2200      	movs	r2, #0
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <MX_SPI1_Init+0x68>)
 8002840:	2207      	movs	r2, #7
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <MX_SPI1_Init+0x68>)
 8002846:	0018      	movs	r0, r3
 8002848:	f001 fff8 	bl	800483c <HAL_SPI_Init>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002850:	f000 f958 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000118 	.word	0x20000118
 8002860:	40013000 	.word	0x40013000

08002864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286a:	2320      	movs	r3, #32
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	0018      	movs	r0, r3
 8002870:	2310      	movs	r3, #16
 8002872:	001a      	movs	r2, r3
 8002874:	2100      	movs	r1, #0
 8002876:	f004 f901 	bl	8006a7c <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800287a:	230c      	movs	r3, #12
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	0018      	movs	r0, r3
 8002880:	2314      	movs	r3, #20
 8002882:	001a      	movs	r2, r3
 8002884:	2100      	movs	r1, #0
 8002886:	f004 f8f9 	bl	8006a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	0018      	movs	r0, r3
 800288e:	2308      	movs	r3, #8
 8002890:	001a      	movs	r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	f004 f8f2 	bl	8006a7c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <MX_TIM2_Init+0xdc>)
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	05d2      	lsls	r2, r2, #23
 800289e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028a2:	4a28      	ldr	r2, [pc, #160]	; (8002944 <MX_TIM2_Init+0xe0>)
 80028a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028ae:	4a26      	ldr	r2, [pc, #152]	; (8002948 <MX_TIM2_Init+0xe4>)
 80028b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028c0:	0018      	movs	r0, r3
 80028c2:	f002 fd64 	bl	800538e <HAL_TIM_Base_Init>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80028ca:	f000 f91b 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ce:	2120      	movs	r1, #32
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	0152      	lsls	r2, r2, #5
 80028d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d8:	187a      	adds	r2, r7, r1
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028dc:	0011      	movs	r1, r2
 80028de:	0018      	movs	r0, r3
 80028e0:	f002 fe8c 	bl	80055fc <HAL_TIM_ConfigClockSource>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80028e8:	f000 f90c 	bl	8002b04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80028ec:	210c      	movs	r1, #12
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2200      	movs	r2, #0
 80028f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80028fa:	187a      	adds	r2, r7, r1
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f002 ff39 	bl	8005778 <HAL_TIM_SlaveConfigSynchro>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800290a:	f000 f8fb 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800291a:	1d3a      	adds	r2, r7, #4
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <MX_TIM2_Init+0xdc>)
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f003 f913 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800292a:	f000 f8eb 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <MX_TIM2_Init+0xdc>)
 8002930:	0018      	movs	r0, r3
 8002932:	f002 fd58 	bl	80053e6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b00c      	add	sp, #48	; 0x30
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	20000170 	.word	0x20000170
 8002944:	00001b58 	.word	0x00001b58
 8002948:	00000bb8 	.word	0x00000bb8

0800294c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002952:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <MX_USART2_UART_Init+0x5c>)
 8002954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 11520;
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002958:	22b4      	movs	r2, #180	; 0xb4
 800295a:	0192      	lsls	r2, r2, #6
 800295c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 800298a:	2200      	movs	r2, #0
 800298c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 8002990:	0018      	movs	r0, r3
 8002992:	f003 f91f 	bl	8005bd4 <HAL_UART_Init>
 8002996:	1e03      	subs	r3, r0, #0
 8002998:	d001      	beq.n	800299e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800299a:	f000 f8b3 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200001ac 	.word	0x200001ac
 80029a8:	40004400 	.word	0x40004400

080029ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08b      	sub	sp, #44	; 0x2c
 80029b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b2:	2414      	movs	r4, #20
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	0018      	movs	r0, r3
 80029b8:	2314      	movs	r3, #20
 80029ba:	001a      	movs	r2, r3
 80029bc:	2100      	movs	r1, #0
 80029be:	f004 f85d 	bl	8006a7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029c8:	2104      	movs	r1, #4
 80029ca:	430a      	orrs	r2, r1
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029da:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029de:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	430a      	orrs	r2, r1
 80029e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <MX_GPIO_Init+0x144>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <MX_GPIO_Init+0x144>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	2201      	movs	r2, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <MX_GPIO_Init+0x144>)
 8002a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <MX_GPIO_Init+0x144>)
 8002a10:	2102      	movs	r1, #2
 8002a12:	430a      	orrs	r2, r1
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a16:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <MX_GPIO_Init+0x144>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 8002a22:	23a0      	movs	r3, #160	; 0xa0
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 fe80 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <MX_GPIO_Init+0x148>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	2110      	movs	r1, #16
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fe7a 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <MX_GPIO_Init+0x148>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2120      	movs	r1, #32
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fe74 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8002a48:	492b      	ldr	r1, [pc, #172]	; (8002af8 <MX_GPIO_Init+0x14c>)
 8002a4a:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <MX_GPIO_Init+0x150>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fe6e 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	0192      	lsls	r2, r2, #6
 8002a5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <MX_GPIO_Init+0x154>)
 8002a60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <MX_GPIO_Init+0x148>)
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	0010      	movs	r0, r2
 8002a70:	f000 fce0 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	2220      	movs	r2, #32
 8002a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	193a      	adds	r2, r7, r4
 8002a8e:	23a0      	movs	r3, #160	; 0xa0
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	0011      	movs	r1, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 fccd 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8002a9a:	0021      	movs	r1, r4
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2230      	movs	r2, #48	; 0x30
 8002aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab4:	000c      	movs	r4, r1
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <MX_GPIO_Init+0x148>)
 8002aba:	0019      	movs	r1, r3
 8002abc:	0010      	movs	r0, r2
 8002abe:	f000 fcb9 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <MX_GPIO_Init+0x14c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2201      	movs	r2, #1
 8002ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <MX_GPIO_Init+0x150>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f000 fca6 	bl	8003434 <HAL_GPIO_Init>

}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b00b      	add	sp, #44	; 0x2c
 8002aee:	bd90      	pop	{r4, r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	50000800 	.word	0x50000800
 8002af8:	00002001 	.word	0x00002001
 8002afc:	50000400 	.word	0x50000400
 8002b00:	10210000 	.word	0x10210000

08002b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_MspInit+0x24>)
 8002b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_MspInit+0x24>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_MspInit+0x24>)
 8002b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_MspInit+0x24>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	0549      	lsls	r1, r1, #21
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000

08002b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	230c      	movs	r3, #12
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	0018      	movs	r0, r3
 8002b46:	2314      	movs	r3, #20
 8002b48:	001a      	movs	r2, r3
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	f003 ff96 	bl	8006a7c <memset>
  if(hi2c->Instance==I2C1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_I2C_MspInit+0x80>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12a      	bne.n	8002bb0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_I2C_MspInit+0x84>)
 8002b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_I2C_MspInit+0x84>)
 8002b60:	2101      	movs	r1, #1
 8002b62:	430a      	orrs	r2, r1
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_I2C_MspInit+0x84>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b72:	210c      	movs	r1, #12
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	22c0      	movs	r2, #192	; 0xc0
 8002b78:	00d2      	lsls	r2, r2, #3
 8002b7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	2212      	movs	r2, #18
 8002b80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2201      	movs	r2, #1
 8002b86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	2206      	movs	r2, #6
 8002b92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	187a      	adds	r2, r7, r1
 8002b96:	23a0      	movs	r3, #160	; 0xa0
 8002b98:	05db      	lsls	r3, r3, #23
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 fc49 	bl	8003434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_I2C_MspInit+0x84>)
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_I2C_MspInit+0x84>)
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	0389      	lsls	r1, r1, #14
 8002bac:	430a      	orrs	r2, r1
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b008      	add	sp, #32
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40005400 	.word	0x40005400
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b08b      	sub	sp, #44	; 0x2c
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	2314      	movs	r3, #20
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	0018      	movs	r0, r3
 8002bce:	2314      	movs	r3, #20
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	f003 ff52 	bl	8006a7c <memset>
  if(hspi->Instance==SPI1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_SPI_MspInit+0xc4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d14b      	bne.n	8002c7a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	0149      	lsls	r1, r1, #5
 8002bec:	430a      	orrs	r2, r1
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002c0e:	2102      	movs	r1, #2
 8002c10:	430a      	orrs	r2, r1
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c14:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <HAL_SPI_MspInit+0xc8>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002c20:	2414      	movs	r4, #20
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	22d0      	movs	r2, #208	; 0xd0
 8002c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	2203      	movs	r2, #3
 8002c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	193a      	adds	r2, r7, r4
 8002c42:	23a0      	movs	r3, #160	; 0xa0
 8002c44:	05db      	lsls	r3, r3, #23
 8002c46:	0011      	movs	r1, r2
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 fbf3 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8002c4e:	0021      	movs	r1, r4
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2208      	movs	r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2202      	movs	r2, #2
 8002c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2203      	movs	r2, #3
 8002c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	4a06      	ldr	r2, [pc, #24]	; (8002c8c <HAL_SPI_MspInit+0xcc>)
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f000 fbdd 	bl	8003434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b00b      	add	sp, #44	; 0x2c
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	40013000 	.word	0x40013000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	50000400 	.word	0x50000400

08002c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	05db      	lsls	r3, r3, #23
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d105      	bne.n	8002cb0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_TIM_Base_MspInit+0x28>)
 8002ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_TIM_Base_MspInit+0x28>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	430a      	orrs	r2, r1
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000

08002cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	0018      	movs	r0, r3
 8002cca:	2314      	movs	r3, #20
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f003 fed4 	bl	8006a7c <memset>
  if(huart->Instance==USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_UART_MspInit+0x80>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d129      	bne.n	8002d32 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_UART_MspInit+0x84>)
 8002ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_UART_MspInit+0x84>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0289      	lsls	r1, r1, #10
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_UART_MspInit+0x84>)
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_UART_MspInit+0x84>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_UART_MspInit+0x84>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d04:	210c      	movs	r1, #12
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	220c      	movs	r2, #12
 8002d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2202      	movs	r2, #2
 8002d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2204      	movs	r2, #4
 8002d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d24:	187a      	adds	r2, r7, r1
 8002d26:	23a0      	movs	r3, #160	; 0xa0
 8002d28:	05db      	lsls	r3, r3, #23
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 fb81 	bl	8003434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b008      	add	sp, #32
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40021000 	.word	0x40021000

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <HardFault_Handler+0x4>

08002d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed_digital = 0;
 8002d7a:	2416      	movs	r4, #22
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	801a      	strh	r2, [r3, #0]
  uint16_t wind_temp_digital = 0;
 8002d82:	2514      	movs	r5, #20
 8002d84:	197b      	adds	r3, r7, r5
 8002d86:	2200      	movs	r2, #0
 8002d88:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch2 = 0;
 8002d8a:	2612      	movs	r6, #18
 8002d8c:	19bb      	adds	r3, r7, r6
 8002d8e:	2200      	movs	r2, #0
 8002d90:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch3 = 0;
 8002d92:	2310      	movs	r3, #16
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2200      	movs	r2, #0
 8002d98:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch4 = 0;
 8002d9a:	220e      	movs	r2, #14
 8002d9c:	18bb      	adds	r3, r7, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch5 = 0;
 8002da2:	210c      	movs	r1, #12
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2200      	movs	r2, #0
 8002da8:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch6 = 0;
 8002daa:	200a      	movs	r0, #10
 8002dac:	183b      	adds	r3, r7, r0
 8002dae:	2200      	movs	r2, #0
 8002db0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch7 = 0;
 8002db2:	2308      	movs	r3, #8
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2200      	movs	r2, #0
 8002db8:	801a      	strh	r2, [r3, #0]
  uint16_t tph_data = 0;
 8002dba:	221e      	movs	r2, #30
 8002dbc:	18bb      	adds	r3, r7, r2
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
  uint8_t wifi_data = 0;
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
  uint8_t wifi_data1 = 0;
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
  uint8_t a = 'A';
 8002dce:	1d7b      	adds	r3, r7, #5
 8002dd0:	2241      	movs	r2, #65	; 0x41
 8002dd2:	701a      	strb	r2, [r3, #0]
  uint8_t t = 'T';
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2254      	movs	r2, #84	; 0x54
 8002dd8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <TIM2_IRQHandler+0x118>)
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f002 fb24 	bl	800542a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Toggle_User_LED();
 8002de2:	f000 f857 	bl	8002e94 <Toggle_User_LED>

  /* Read ADC Wind Speed Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_SPEED_CH, &wind_speed_digital);
 8002de6:	193b      	adds	r3, r7, r4
 8002de8:	0019      	movs	r1, r3
 8002dea:	2080      	movs	r0, #128	; 0x80
 8002dec:	f000 f880 	bl	8002ef0 <Read_ADC>

  /* Read ADC Wind Temp Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_TEMP_CH, &wind_temp_digital);
 8002df0:	197b      	adds	r3, r7, r5
 8002df2:	0019      	movs	r1, r3
 8002df4:	2090      	movs	r0, #144	; 0x90
 8002df6:	f000 f87b 	bl	8002ef0 <Read_ADC>

  Read_ADC((uint8_t) ADC_DIN_CH2, &din_ch2);
 8002dfa:	19bb      	adds	r3, r7, r6
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	20a0      	movs	r0, #160	; 0xa0
 8002e00:	f000 f876 	bl	8002ef0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH3, &din_ch3);
 8002e04:	2310      	movs	r3, #16
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	0019      	movs	r1, r3
 8002e0a:	20b0      	movs	r0, #176	; 0xb0
 8002e0c:	f000 f870 	bl	8002ef0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH4, &din_ch4);
 8002e10:	220e      	movs	r2, #14
 8002e12:	18bb      	adds	r3, r7, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	20c0      	movs	r0, #192	; 0xc0
 8002e18:	f000 f86a 	bl	8002ef0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH5, &din_ch5);
 8002e1c:	210c      	movs	r1, #12
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	0019      	movs	r1, r3
 8002e22:	20d0      	movs	r0, #208	; 0xd0
 8002e24:	f000 f864 	bl	8002ef0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH6, &din_ch6);
 8002e28:	200a      	movs	r0, #10
 8002e2a:	183b      	adds	r3, r7, r0
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	20e0      	movs	r0, #224	; 0xe0
 8002e30:	f000 f85e 	bl	8002ef0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH7, &din_ch7);
 8002e34:	2308      	movs	r3, #8
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	0019      	movs	r1, r3
 8002e3a:	20f0      	movs	r0, #240	; 0xf0
 8002e3c:	f000 f858 	bl	8002ef0 <Read_ADC>

  HAL_UART_Transmit_IT(&huart2, &a, sizeof(uint16_t));
 8002e40:	1d79      	adds	r1, r7, #5
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <TIM2_IRQHandler+0x11c>)
 8002e44:	2202      	movs	r2, #2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f002 ff18 	bl	8005c7c <HAL_UART_Transmit_IT>
  HAL_UART_Transmit_IT(&huart2, &t, sizeof(uint16_t));
 8002e4c:	1d39      	adds	r1, r7, #4
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <TIM2_IRQHandler+0x11c>)
 8002e50:	2202      	movs	r2, #2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f002 ff12 	bl	8005c7c <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &wifi_data, sizeof(uint16_t));
 8002e58:	1df9      	adds	r1, r7, #7
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <TIM2_IRQHandler+0x11c>)
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f002 ff7a 	bl	8005d58 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &wifi_data1, sizeof(uint16_t));
 8002e64:	1db9      	adds	r1, r7, #6
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <TIM2_IRQHandler+0x11c>)
 8002e68:	2202      	movs	r2, #2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f002 ff74 	bl	8005d58 <HAL_UART_Receive_IT>
//  // TODO: Read from Sensor
//  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
//  /* Toggle SS2 High to un-select sensor */

  /* Calculations Done Here */
  float wind_speed = calculate_wind_speed(wind_speed_digital, wind_temp_digital);
 8002e70:	193b      	adds	r3, r7, r4
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	197b      	adds	r3, r7, r5
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	0019      	movs	r1, r3
 8002e7a:	0010      	movs	r0, r2
 8002e7c:	f000 f89e 	bl	8002fbc <calculate_wind_speed>
 8002e80:	1c03      	adds	r3, r0, #0
 8002e82:	61bb      	str	r3, [r7, #24]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b009      	add	sp, #36	; 0x24
 8002e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8c:	20000170 	.word	0x20000170
 8002e90:	200001ac 	.word	0x200001ac

08002e94 <Toggle_User_LED>:
/* USER CODE BEGIN 1 */
/**
 * 	@brief Toggle LED
 */
void Toggle_User_LED()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8002e98:	23a0      	movs	r3, #160	; 0xa0
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 fc63 	bl	800376a <HAL_GPIO_TogglePin>
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <Toggle_ADC_Chip_Select>:

/**
 * 	@brief Toggle ADC Chip Select Pin
 */
void Toggle_ADC_Chip_Select()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ADC_CS_GPIO_Port, ADC_CS_PIN);
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <Toggle_ADC_Chip_Select+0x14>)
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 fc58 	bl	800376a <HAL_GPIO_TogglePin>
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	50000800 	.word	0x50000800

08002ec4 <HAL_SPI_Transmit_Start>:

/**
 * 	@brief Transmit Start Bit in HAL SPI
 */
void HAL_SPI_Transmit_Start()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	uint8_t adc_start = (uint8_t) ADC_START_BIT;
 8002eca:	1dfb      	adds	r3, r7, #7
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &adc_start, sizeof(adc_start), SPI_TIMEOUT);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_SPI_Transmit_Start+0x24>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	1df9      	adds	r1, r7, #7
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <HAL_SPI_Transmit_Start+0x28>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f001 fd19 	bl	8004910 <HAL_SPI_Transmit>
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	08007bb0 	.word	0x08007bb0
 8002eec:	20000118 	.word	0x20000118

08002ef0 <Read_ADC>:
 * 	@brief Read MCP3008 ADC based on given channel enum.
 *	Output is set to the pointer of a uint16_t set in the parameters.
 *	Output will be set to 0 before setting the ADC Value to it.
 */
void Read_ADC(uint8_t adc_ch_select, uint16_t *output)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_1 = 0;
 8002efe:	240f      	movs	r4, #15
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_2 = 0;
 8002f06:	250e      	movs	r5, #14
 8002f08:	197b      	adds	r3, r7, r5
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
	/* Set output to 0 */
	*output = 0;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	801a      	strh	r2, [r3, #0]

	/* Toggle SS0 Pin (CS) Low to use ADC */
	Toggle_ADC_Chip_Select();
 8002f14:	f7ff ffca 	bl	8002eac <Toggle_ADC_Chip_Select>
	/* Send to DIN CH0 Select */
	HAL_SPI_Transmit_Start();
 8002f18:	f7ff ffd4 	bl	8002ec4 <HAL_SPI_Transmit_Start>
	HAL_SPI_TransmitReceive(&hspi1, &adc_ch_select, &adc_byte_1, sizeof(adc_ch_select), SPI_TIMEOUT);
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <Read_ADC+0x78>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	193a      	adds	r2, r7, r4
 8002f22:	1df9      	adds	r1, r7, #7
 8002f24:	4811      	ldr	r0, [pc, #68]	; (8002f6c <Read_ADC+0x7c>)
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f001 ff5d 	bl	8004de8 <HAL_SPI_TransmitReceive>
	/* Read from Dout of ADC */
	HAL_SPI_Receive(&hspi1, &adc_byte_2, sizeof(adc_byte_2), SPI_TIMEOUT);
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <Read_ADC+0x78>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	1979      	adds	r1, r7, r5
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <Read_ADC+0x7c>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	f001 fe38 	bl	8004bac <HAL_SPI_Receive>
	/* Toggle SS0 High (CS) to signify we're done with a round of the ADC */
	Toggle_ADC_Chip_Select();
 8002f3c:	f7ff ffb6 	bl	8002eac <Toggle_ADC_Chip_Select>
	/* Set Output to adc_value */
	*output = ADC_16_TO_10_BIT(adc_byte_1, adc_byte_2);
 8002f40:	193b      	adds	r3, r7, r4
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	b21a      	sxth	r2, r3
 8002f48:	197b      	adds	r3, r7, r5
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	b21b      	sxth	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b21b      	sxth	r3, r3
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	059b      	lsls	r3, r3, #22
 8002f56:	0d9b      	lsrs	r3, r3, #22
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	801a      	strh	r2, [r3, #0]
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b004      	add	sp, #16
 8002f64:	bdb0      	pop	{r4, r5, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	08007bb0 	.word	0x08007bb0
 8002f6c:	20000118 	.word	0x20000118

08002f70 <adc_to_voltage>:
/**
 * 	@brief Function handles converting adc value to a voltage.
 * 	Call reverse_and_shift_adc_value before hand.
 */
static float adc_to_voltage(uint16_t adc_value)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	0002      	movs	r2, r0
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	801a      	strh	r2, [r3, #0]
	return 5.0 * adc_value / 1024;;
 8002f7c:	1dbb      	adds	r3, r7, #6
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff fa2d 	bl	80023e0 <__aeabi_i2d>
 8002f86:	2200      	movs	r2, #0
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <adc_to_voltage+0x44>)
 8002f8a:	f7fe fc53 	bl	8001834 <__aeabi_dmul>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	000c      	movs	r4, r1
 8002f92:	0018      	movs	r0, r3
 8002f94:	0021      	movs	r1, r4
 8002f96:	2200      	movs	r2, #0
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <adc_to_voltage+0x48>)
 8002f9a:	f7fe f841 	bl	8001020 <__aeabi_ddiv>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	000c      	movs	r4, r1
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	0021      	movs	r1, r4
 8002fa6:	f7ff faa7 	bl	80024f8 <__aeabi_d2f>
 8002faa:	1c03      	adds	r3, r0, #0
}
 8002fac:	1c18      	adds	r0, r3, #0
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b003      	add	sp, #12
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	40140000 	.word	0x40140000
 8002fb8:	40900000 	.word	0x40900000

08002fbc <calculate_wind_speed>:
 *	TODO: Wait 40 seconds until we do the first measurement to let the wind sensor stabilize
 *	TODO: Use the Bosch sensor for ambiant temperature instead of the onboard Modern Device Sensor
 * 	https://moderndevice.com/uncategorized/calibrating-rev-p-wind-sensor-new-regression/?preview=true
 */
static float calculate_wind_speed(uint16_t wind_speed_adc, uint16_t wind_temp_adc)
{
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	1dbb      	adds	r3, r7, #6
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	1c0a      	adds	r2, r1, #0
 8002fcc:	801a      	strh	r2, [r3, #0]
	// Calculate Vin from ADC
	float wind_speed_vout = adc_to_voltage(wind_speed_adc);
 8002fce:	1dbb      	adds	r3, r7, #6
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7ff ffcc 	bl	8002f70 <adc_to_voltage>
 8002fd8:	1c03      	adds	r3, r0, #0
 8002fda:	61fb      	str	r3, [r7, #28]
	float wind_temp_vout = adc_to_voltage(wind_temp_adc);
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff ffc5 	bl	8002f70 <adc_to_voltage>
 8002fe6:	1c03      	adds	r3, r0, #0
 8002fe8:	61bb      	str	r3, [r7, #24]

	// Zero Voltage not set, set here
	// TODO: Check if 40 seconds of operation have passed before we decided to set the zero voltage.
	if (zero_voltage == -1) {
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <calculate_wind_speed+0x114>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4939      	ldr	r1, [pc, #228]	; (80030d4 <calculate_wind_speed+0x118>)
 8002ff0:	1c18      	adds	r0, r3, #0
 8002ff2:	f7fd f95f 	bl	80002b4 <__aeabi_fcmpeq>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d002      	beq.n	8003000 <calculate_wind_speed+0x44>
		zero_voltage = wind_speed_vout;
 8002ffa:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <calculate_wind_speed+0x114>)
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	601a      	str	r2, [r3, #0]
	}

	// Calculate Ambient Temperature in Celsius
	float TempAmb = (wind_temp_vout - 0.400) / 0.0195;
 8003000:	69b8      	ldr	r0, [r7, #24]
 8003002:	f7ff fa27 	bl	8002454 <__aeabi_f2d>
 8003006:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <calculate_wind_speed+0x11c>)
 8003008:	4b34      	ldr	r3, [pc, #208]	; (80030dc <calculate_wind_speed+0x120>)
 800300a:	f7fe fe85 	bl	8001d18 <__aeabi_dsub>
 800300e:	0003      	movs	r3, r0
 8003010:	000c      	movs	r4, r1
 8003012:	0018      	movs	r0, r3
 8003014:	0021      	movs	r1, r4
 8003016:	4a32      	ldr	r2, [pc, #200]	; (80030e0 <calculate_wind_speed+0x124>)
 8003018:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <calculate_wind_speed+0x128>)
 800301a:	f7fe f801 	bl	8001020 <__aeabi_ddiv>
 800301e:	0003      	movs	r3, r0
 8003020:	000c      	movs	r4, r1
 8003022:	0018      	movs	r0, r3
 8003024:	0021      	movs	r1, r4
 8003026:	f7ff fa67 	bl	80024f8 <__aeabi_d2f>
 800302a:	1c03      	adds	r3, r0, #0
 800302c:	617b      	str	r3, [r7, #20]
	float zero = zero_voltage;
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <calculate_wind_speed+0x114>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]

	// Calculate the Wind Speed in MPH
	float wind_speed = (wind_speed_vout - zero_voltage) / (3.038517 * pow(TempAmb, 0.115157));
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <calculate_wind_speed+0x114>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1c19      	adds	r1, r3, #0
 800303a:	69f8      	ldr	r0, [r7, #28]
 800303c:	f7fd fb10 	bl	8000660 <__aeabi_fsub>
 8003040:	1c03      	adds	r3, r0, #0
 8003042:	1c18      	adds	r0, r3, #0
 8003044:	f7ff fa06 	bl	8002454 <__aeabi_f2d>
 8003048:	0005      	movs	r5, r0
 800304a:	000e      	movs	r6, r1
 800304c:	6978      	ldr	r0, [r7, #20]
 800304e:	f7ff fa01 	bl	8002454 <__aeabi_f2d>
 8003052:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <calculate_wind_speed+0x12c>)
 8003054:	4c25      	ldr	r4, [pc, #148]	; (80030ec <calculate_wind_speed+0x130>)
 8003056:	001a      	movs	r2, r3
 8003058:	0023      	movs	r3, r4
 800305a:	f003 fd17 	bl	8006a8c <pow>
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <calculate_wind_speed+0x134>)
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <calculate_wind_speed+0x138>)
 8003062:	f7fe fbe7 	bl	8001834 <__aeabi_dmul>
 8003066:	0003      	movs	r3, r0
 8003068:	000c      	movs	r4, r1
 800306a:	001a      	movs	r2, r3
 800306c:	0023      	movs	r3, r4
 800306e:	0028      	movs	r0, r5
 8003070:	0031      	movs	r1, r6
 8003072:	f7fd ffd5 	bl	8001020 <__aeabi_ddiv>
 8003076:	0003      	movs	r3, r0
 8003078:	000c      	movs	r4, r1
 800307a:	0018      	movs	r0, r3
 800307c:	0021      	movs	r1, r4
 800307e:	f7ff fa3b 	bl	80024f8 <__aeabi_d2f>
 8003082:	1c03      	adds	r3, r0, #0
 8003084:	60fb      	str	r3, [r7, #12]
	wind_speed /= 0.087288;
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff f9e4 	bl	8002454 <__aeabi_f2d>
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <calculate_wind_speed+0x13c>)
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <calculate_wind_speed+0x140>)
 8003090:	f7fd ffc6 	bl	8001020 <__aeabi_ddiv>
 8003094:	0003      	movs	r3, r0
 8003096:	000c      	movs	r4, r1
 8003098:	0018      	movs	r0, r3
 800309a:	0021      	movs	r1, r4
 800309c:	f7ff fa2c 	bl	80024f8 <__aeabi_d2f>
 80030a0:	1c03      	adds	r3, r0, #0
 80030a2:	60fb      	str	r3, [r7, #12]
	wind_speed = pow(wind_speed, 3.009364);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff f9d5 	bl	8002454 <__aeabi_f2d>
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <calculate_wind_speed+0x144>)
 80030ac:	4c15      	ldr	r4, [pc, #84]	; (8003104 <calculate_wind_speed+0x148>)
 80030ae:	001a      	movs	r2, r3
 80030b0:	0023      	movs	r3, r4
 80030b2:	f003 fceb 	bl	8006a8c <pow>
 80030b6:	0003      	movs	r3, r0
 80030b8:	000c      	movs	r4, r1
 80030ba:	0018      	movs	r0, r3
 80030bc:	0021      	movs	r1, r4
 80030be:	f7ff fa1b 	bl	80024f8 <__aeabi_d2f>
 80030c2:	1c03      	adds	r3, r0, #0
 80030c4:	60fb      	str	r3, [r7, #12]
	return wind_speed;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	1c18      	adds	r0, r3, #0
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b009      	add	sp, #36	; 0x24
 80030ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d0:	20000000 	.word	0x20000000
 80030d4:	bf800000 	.word	0xbf800000
 80030d8:	9999999a 	.word	0x9999999a
 80030dc:	3fd99999 	.word	0x3fd99999
 80030e0:	d916872b 	.word	0xd916872b
 80030e4:	3f93f7ce 	.word	0x3f93f7ce
 80030e8:	dce7cd03 	.word	0xdce7cd03
 80030ec:	3fbd7aed 	.word	0x3fbd7aed
 80030f0:	003ab863 	.word	0x003ab863
 80030f4:	40084ee2 	.word	0x40084ee2
 80030f8:	a1554fbe 	.word	0xa1554fbe
 80030fc:	3fb65881 	.word	0x3fb65881
 8003100:	6ece13f5 	.word	0x6ece13f5
 8003104:	4008132d 	.word	0x4008132d

08003108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <SystemInit+0x64>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <SystemInit+0x64>)
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	0049      	lsls	r1, r1, #1
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <SystemInit+0x64>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <SystemInit+0x64>)
 8003120:	4913      	ldr	r1, [pc, #76]	; (8003170 <SystemInit+0x68>)
 8003122:	400a      	ands	r2, r1
 8003124:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <SystemInit+0x64>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <SystemInit+0x64>)
 800312c:	4911      	ldr	r1, [pc, #68]	; (8003174 <SystemInit+0x6c>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <SystemInit+0x64>)
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <SystemInit+0x64>)
 8003138:	2101      	movs	r1, #1
 800313a:	438a      	bics	r2, r1
 800313c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <SystemInit+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <SystemInit+0x64>)
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <SystemInit+0x70>)
 8003146:	400a      	ands	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <SystemInit+0x64>)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <SystemInit+0x64>)
 8003150:	490a      	ldr	r1, [pc, #40]	; (800317c <SystemInit+0x74>)
 8003152:	400a      	ands	r2, r1
 8003154:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <SystemInit+0x64>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <SystemInit+0x78>)
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	0512      	lsls	r2, r2, #20
 8003162:	609a      	str	r2, [r3, #8]
#endif
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40021000 	.word	0x40021000
 8003170:	88ff400c 	.word	0x88ff400c
 8003174:	fef6fff6 	.word	0xfef6fff6
 8003178:	fffbffff 	.word	0xfffbffff
 800317c:	ff02ffff 	.word	0xff02ffff
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003184:	480d      	ldr	r0, [pc, #52]	; (80031bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003186:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003188:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800318a:	e003      	b.n	8003194 <LoopCopyDataInit>

0800318c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800318e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003190:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003192:	3104      	adds	r1, #4

08003194 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003198:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800319a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800319c:	d3f6      	bcc.n	800318c <CopyDataInit>
  ldr  r2, =_sbss
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <LoopForever+0x12>)
  b  LoopFillZerobss
 80031a0:	e002      	b.n	80031a8 <LoopFillZerobss>

080031a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80031a2:	2300      	movs	r3, #0
  str  r3, [r2]
 80031a4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a6:	3204      	adds	r2, #4

080031a8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <LoopForever+0x16>)
  cmp  r2, r3
 80031aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031ac:	d3f9      	bcc.n	80031a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80031ae:	f7ff ffab 	bl	8003108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b2:	f003 fc3f 	bl	8006a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7ff fa4d 	bl	8002654 <main>

080031ba <LoopForever>:

LoopForever:
    b LoopForever
 80031ba:	e7fe      	b.n	80031ba <LoopForever>
   ldr   r0, =_estack
 80031bc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80031c0:	08007c78 	.word	0x08007c78
  ldr  r0, =_sdata
 80031c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031c8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80031cc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80031d0:	20000238 	.word	0x20000238

080031d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC1_COMP_IRQHandler>
	...

080031d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_Init+0x3c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_Init+0x3c>)
 80031ea:	2140      	movs	r1, #64	; 0x40
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031f0:	2000      	movs	r0, #0
 80031f2:	f000 f811 	bl	8003218 <HAL_InitTick>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d003      	beq.n	8003202 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e001      	b.n	8003206 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003202:	f7ff fc85 	bl	8002b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	781b      	ldrb	r3, [r3, #0]
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	40022000 	.word	0x40022000

08003218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003220:	230f      	movs	r3, #15
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <HAL_InitTick+0x50>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	23fa      	movs	r3, #250	; 0xfa
 800322e:	0099      	lsls	r1, r3, #2
 8003230:	0010      	movs	r0, r2
 8003232:	f7fc ff69 	bl	8000108 <__udivsi3>
 8003236:	0003      	movs	r3, r0
 8003238:	0018      	movs	r0, r3
 800323a:	f000 f8ee 	bl	800341a <HAL_SYSTICK_Config>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d004      	beq.n	800324c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8003242:	230f      	movs	r3, #15
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e006      	b.n	800325a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	2301      	movs	r3, #1
 8003250:	425b      	negs	r3, r3
 8003252:	2200      	movs	r2, #0
 8003254:	0018      	movs	r0, r3
 8003256:	f000 f8bb 	bl	80033d0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800325a:	230f      	movs	r3, #15
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  return uwTick;
 8003270:	4b02      	ldr	r3, [pc, #8]	; (800327c <HAL_GetTick+0x10>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	20000234 	.word	0x20000234

08003280 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	0002      	movs	r2, r0
 8003288:	1dfb      	adds	r3, r7, #7
 800328a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	001a      	movs	r2, r3
 8003292:	231f      	movs	r3, #31
 8003294:	401a      	ands	r2, r3
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <NVIC_EnableIRQ+0x28>)
 8003298:	2101      	movs	r1, #1
 800329a:	4091      	lsls	r1, r2
 800329c:	000a      	movs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000e100 	.word	0xe000e100

080032ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	0002      	movs	r2, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	1dfb      	adds	r3, r7, #7
 80032b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b7f      	cmp	r3, #127	; 0x7f
 80032c0:	d932      	bls.n	8003328 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c2:	4a2f      	ldr	r2, [pc, #188]	; (8003380 <NVIC_SetPriority+0xd4>)
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	0019      	movs	r1, r3
 80032ca:	230f      	movs	r3, #15
 80032cc:	400b      	ands	r3, r1
 80032ce:	3b08      	subs	r3, #8
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3306      	adds	r3, #6
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	3304      	adds	r3, #4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1dfa      	adds	r2, r7, #7
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	0011      	movs	r1, r2
 80032e2:	2203      	movs	r2, #3
 80032e4:	400a      	ands	r2, r1
 80032e6:	00d2      	lsls	r2, r2, #3
 80032e8:	21ff      	movs	r1, #255	; 0xff
 80032ea:	4091      	lsls	r1, r2
 80032ec:	000a      	movs	r2, r1
 80032ee:	43d2      	mvns	r2, r2
 80032f0:	401a      	ands	r2, r3
 80032f2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	22ff      	movs	r2, #255	; 0xff
 80032fa:	401a      	ands	r2, r3
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	0018      	movs	r0, r3
 8003302:	2303      	movs	r3, #3
 8003304:	4003      	ands	r3, r0
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800330a:	481d      	ldr	r0, [pc, #116]	; (8003380 <NVIC_SetPriority+0xd4>)
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	001c      	movs	r4, r3
 8003312:	230f      	movs	r3, #15
 8003314:	4023      	ands	r3, r4
 8003316:	3b08      	subs	r3, #8
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	430a      	orrs	r2, r1
 800331c:	3306      	adds	r3, #6
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	18c3      	adds	r3, r0, r3
 8003322:	3304      	adds	r3, #4
 8003324:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003326:	e027      	b.n	8003378 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003328:	4a16      	ldr	r2, [pc, #88]	; (8003384 <NVIC_SetPriority+0xd8>)
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25b      	sxtb	r3, r3
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	33c0      	adds	r3, #192	; 0xc0
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	589b      	ldr	r3, [r3, r2]
 8003338:	1dfa      	adds	r2, r7, #7
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	0011      	movs	r1, r2
 800333e:	2203      	movs	r2, #3
 8003340:	400a      	ands	r2, r1
 8003342:	00d2      	lsls	r2, r2, #3
 8003344:	21ff      	movs	r1, #255	; 0xff
 8003346:	4091      	lsls	r1, r2
 8003348:	000a      	movs	r2, r1
 800334a:	43d2      	mvns	r2, r2
 800334c:	401a      	ands	r2, r3
 800334e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	019b      	lsls	r3, r3, #6
 8003354:	22ff      	movs	r2, #255	; 0xff
 8003356:	401a      	ands	r2, r3
 8003358:	1dfb      	adds	r3, r7, #7
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	0018      	movs	r0, r3
 800335e:	2303      	movs	r3, #3
 8003360:	4003      	ands	r3, r0
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003366:	4807      	ldr	r0, [pc, #28]	; (8003384 <NVIC_SetPriority+0xd8>)
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b25b      	sxtb	r3, r3
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	430a      	orrs	r2, r1
 8003372:	33c0      	adds	r3, #192	; 0xc0
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	501a      	str	r2, [r3, r0]
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b003      	add	sp, #12
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	e000e100 	.word	0xe000e100

08003388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <SysTick_Config+0x40>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339a:	2301      	movs	r3, #1
 800339c:	e010      	b.n	80033c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <SysTick_Config+0x44>)
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	3a01      	subs	r2, #1
 80033a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a6:	2301      	movs	r3, #1
 80033a8:	425b      	negs	r3, r3
 80033aa:	2103      	movs	r1, #3
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff ff7d 	bl	80032ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <SysTick_Config+0x44>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <SysTick_Config+0x44>)
 80033ba:	2207      	movs	r2, #7
 80033bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	00ffffff 	.word	0x00ffffff
 80033cc:	e000e010 	.word	0xe000e010

080033d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	210f      	movs	r1, #15
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	1c02      	adds	r2, r0, #0
 80033e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7ff ff5d 	bl	80032ac <NVIC_SetPriority>
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	0002      	movs	r2, r0
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b25b      	sxtb	r3, r3
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff ff37 	bl	8003280 <NVIC_EnableIRQ>
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b002      	add	sp, #8
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ffaf 	bl	8003388 <SysTick_Config>
 800342a:	0003      	movs	r3, r0
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800344a:	e155      	b.n	80036f8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4091      	lsls	r1, r2
 8003456:	000a      	movs	r2, r1
 8003458:	4013      	ands	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d100      	bne.n	8003464 <HAL_GPIO_Init+0x30>
 8003462:	e146      	b.n	80036f2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x40>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b12      	cmp	r3, #18
 8003472:	d123      	bne.n	80034bc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	58d3      	ldr	r3, [r2, r3]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2207      	movs	r2, #7
 8003486:	4013      	ands	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	409a      	lsls	r2, r3
 800348e:	0013      	movs	r3, r2
 8003490:	43da      	mvns	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2107      	movs	r1, #7
 80034a0:	400b      	ands	r3, r1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	409a      	lsls	r2, r3
 80034a6:	0013      	movs	r3, r2
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	0092      	lsls	r2, r2, #2
 80034b8:	6939      	ldr	r1, [r7, #16]
 80034ba:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d00b      	beq.n	80034dc <HAL_GPIO_Init+0xa8>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d007      	beq.n	80034dc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034d0:	2b11      	cmp	r3, #17
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b12      	cmp	r3, #18
 80034da:	d130      	bne.n	800353e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	409a      	lsls	r2, r3
 80034ea:	0013      	movs	r3, r2
 80034ec:	43da      	mvns	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	409a      	lsls	r2, r3
 80034fe:	0013      	movs	r3, r2
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003512:	2201      	movs	r2, #1
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
 8003518:	0013      	movs	r3, r2
 800351a:	43da      	mvns	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	2201      	movs	r2, #1
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	409a      	lsls	r2, r3
 800354c:	0013      	movs	r3, r2
 800354e:	43da      	mvns	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2203      	movs	r2, #3
 800355c:	401a      	ands	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	0013      	movs	r3, r2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	43da      	mvns	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	0013      	movs	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	055b      	lsls	r3, r3, #21
 80035aa:	4013      	ands	r3, r2
 80035ac:	d100      	bne.n	80035b0 <HAL_GPIO_Init+0x17c>
 80035ae:	e0a0      	b.n	80036f2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b0:	4b57      	ldr	r3, [pc, #348]	; (8003710 <HAL_GPIO_Init+0x2dc>)
 80035b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b4:	4b56      	ldr	r3, [pc, #344]	; (8003710 <HAL_GPIO_Init+0x2dc>)
 80035b6:	2101      	movs	r1, #1
 80035b8:	430a      	orrs	r2, r1
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80035bc:	4a55      	ldr	r2, [pc, #340]	; (8003714 <HAL_GPIO_Init+0x2e0>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	589b      	ldr	r3, [r3, r2]
 80035c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2203      	movs	r2, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	43da      	mvns	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	23a0      	movs	r3, #160	; 0xa0
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d01f      	beq.n	800362a <HAL_GPIO_Init+0x1f6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <HAL_GPIO_Init+0x2e4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d019      	beq.n	8003626 <HAL_GPIO_Init+0x1f2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a49      	ldr	r2, [pc, #292]	; (800371c <HAL_GPIO_Init+0x2e8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_GPIO_Init+0x1ee>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a48      	ldr	r2, [pc, #288]	; (8003720 <HAL_GPIO_Init+0x2ec>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00d      	beq.n	800361e <HAL_GPIO_Init+0x1ea>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a47      	ldr	r2, [pc, #284]	; (8003724 <HAL_GPIO_Init+0x2f0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <HAL_GPIO_Init+0x1e6>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a46      	ldr	r2, [pc, #280]	; (8003728 <HAL_GPIO_Init+0x2f4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_GPIO_Init+0x1e2>
 8003612:	2305      	movs	r3, #5
 8003614:	e00a      	b.n	800362c <HAL_GPIO_Init+0x1f8>
 8003616:	2306      	movs	r3, #6
 8003618:	e008      	b.n	800362c <HAL_GPIO_Init+0x1f8>
 800361a:	2304      	movs	r3, #4
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x1f8>
 800361e:	2303      	movs	r3, #3
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x1f8>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x1f8>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x1f8>
 800362a:	2300      	movs	r3, #0
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	2103      	movs	r1, #3
 8003630:	400a      	ands	r2, r1
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4093      	lsls	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800363c:	4935      	ldr	r1, [pc, #212]	; (8003714 <HAL_GPIO_Init+0x2e0>)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800364a:	4b38      	ldr	r3, [pc, #224]	; (800372c <HAL_GPIO_Init+0x2f8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43da      	mvns	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	025b      	lsls	r3, r3, #9
 8003662:	4013      	ands	r3, r2
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_GPIO_Init+0x2f8>)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_GPIO_Init+0x2f8>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43da      	mvns	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	029b      	lsls	r3, r3, #10
 800368c:	4013      	ands	r3, r2
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_GPIO_Init+0x2f8>)
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800369e:	4b23      	ldr	r3, [pc, #140]	; (800372c <HAL_GPIO_Init+0x2f8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43da      	mvns	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	035b      	lsls	r3, r3, #13
 80036b6:	4013      	ands	r3, r2
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036c2:	4b1a      	ldr	r3, [pc, #104]	; (800372c <HAL_GPIO_Init+0x2f8>)
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_GPIO_Init+0x2f8>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	43da      	mvns	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	039b      	lsls	r3, r3, #14
 80036e0:	4013      	ands	r3, r2
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <HAL_GPIO_Init+0x2f8>)
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	40da      	lsrs	r2, r3
 8003700:	1e13      	subs	r3, r2, #0
 8003702:	d000      	beq.n	8003706 <HAL_GPIO_Init+0x2d2>
 8003704:	e6a2      	b.n	800344c <HAL_GPIO_Init+0x18>
  }
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b006      	add	sp, #24
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	40021000 	.word	0x40021000
 8003714:	40010000 	.word	0x40010000
 8003718:	50000400 	.word	0x50000400
 800371c:	50000800 	.word	0x50000800
 8003720:	50000c00 	.word	0x50000c00
 8003724:	50001000 	.word	0x50001000
 8003728:	50001c00 	.word	0x50001c00
 800372c:	40010400 	.word	0x40010400

08003730 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	0008      	movs	r0, r1
 800373a:	0011      	movs	r1, r2
 800373c:	1cbb      	adds	r3, r7, #2
 800373e:	1c02      	adds	r2, r0, #0
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	1c7b      	adds	r3, r7, #1
 8003744:	1c0a      	adds	r2, r1, #0
 8003746:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003748:	1c7b      	adds	r3, r7, #1
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003750:	1cbb      	adds	r3, r7, #2
 8003752:	881a      	ldrh	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003758:	e003      	b.n	8003762 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800375a:	1cbb      	adds	r3, r7, #2
 800375c:	881a      	ldrh	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	000a      	movs	r2, r1
 8003774:	1cbb      	adds	r3, r7, #2
 8003776:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	1cbb      	adds	r3, r7, #2
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	405a      	eors	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	615a      	str	r2, [r3, #20]
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e082      	b.n	80038a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2241      	movs	r2, #65	; 0x41
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff f9bd 	bl	8002b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2241      	movs	r2, #65	; 0x41
 80037c2:	2124      	movs	r1, #36	; 0x24
 80037c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2101      	movs	r1, #1
 80037d2:	438a      	bics	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4934      	ldr	r1, [pc, #208]	; (80038b0 <HAL_I2C_Init+0x120>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4931      	ldr	r1, [pc, #196]	; (80038b4 <HAL_I2C_Init+0x124>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d108      	bne.n	800380e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	0209      	lsls	r1, r1, #8
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	e007      	b.n	800381e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2184      	movs	r1, #132	; 0x84
 8003818:	0209      	lsls	r1, r1, #8
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d104      	bne.n	8003830 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	491f      	ldr	r1, [pc, #124]	; (80038b8 <HAL_I2C_Init+0x128>)
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	491a      	ldr	r1, [pc, #104]	; (80038b4 <HAL_I2C_Init+0x124>)
 800384c:	400a      	ands	r2, r1
 800384e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	431a      	orrs	r2, r3
 800385a:	0011      	movs	r1, r2
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	021a      	lsls	r2, r3, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69d9      	ldr	r1, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1a      	ldr	r2, [r3, #32]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2101      	movs	r1, #1
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2241      	movs	r2, #65	; 0x41
 8003894:	2120      	movs	r1, #32
 8003896:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2242      	movs	r2, #66	; 0x42
 80038a2:	2100      	movs	r1, #0
 80038a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	f0ffffff 	.word	0xf0ffffff
 80038b4:	ffff7fff 	.word	0xffff7fff
 80038b8:	02008000 	.word	0x02008000

080038bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2241      	movs	r2, #65	; 0x41
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d138      	bne.n	8003944 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2240      	movs	r2, #64	; 0x40
 80038d6:	5c9b      	ldrb	r3, [r3, r2]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038dc:	2302      	movs	r3, #2
 80038de:	e032      	b.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	2101      	movs	r1, #1
 80038e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2241      	movs	r2, #65	; 0x41
 80038ec:	2124      	movs	r1, #36	; 0x24
 80038ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4911      	ldr	r1, [pc, #68]	; (8003950 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800390c:	400a      	ands	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2101      	movs	r1, #1
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2241      	movs	r2, #65	; 0x41
 8003934:	2120      	movs	r1, #32
 8003936:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	ffffefff 	.word	0xffffefff

08003954 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2241      	movs	r2, #65	; 0x41
 8003962:	5c9b      	ldrb	r3, [r3, r2]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	d139      	bne.n	80039de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2240      	movs	r2, #64	; 0x40
 800396e:	5c9b      	ldrb	r3, [r3, r2]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003974:	2302      	movs	r3, #2
 8003976:	e033      	b.n	80039e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	2101      	movs	r1, #1
 800397e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2241      	movs	r2, #65	; 0x41
 8003984:	2124      	movs	r1, #36	; 0x24
 8003986:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2101      	movs	r1, #1
 8003994:	438a      	bics	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2241      	movs	r2, #65	; 0x41
 80039ce:	2120      	movs	r1, #32
 80039d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2240      	movs	r2, #64	; 0x40
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b004      	add	sp, #16
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	fffff0ff 	.word	0xfffff0ff

080039ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f000 fbbc 	bl	8004178 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a00:	4bc8      	ldr	r3, [pc, #800]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	220c      	movs	r2, #12
 8003a06:	4013      	ands	r3, r2
 8003a08:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a0a:	4bc6      	ldr	r3, [pc, #792]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	025b      	lsls	r3, r3, #9
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <HAL_RCC_OscConfig+0x36>
 8003a20:	e07e      	b.n	8003b20 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d007      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d112      	bne.n	8003a54 <HAL_RCC_OscConfig+0x68>
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	025b      	lsls	r3, r3, #9
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	4bba      	ldr	r3, [pc, #744]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	4013      	ands	r3, r2
 8003a42:	d100      	bne.n	8003a46 <HAL_RCC_OscConfig+0x5a>
 8003a44:	e06b      	b.n	8003b1e <HAL_RCC_OscConfig+0x132>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d167      	bne.n	8003b1e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f000 fb92 	bl	8004178 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	025b      	lsls	r3, r3, #9
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCC_OscConfig+0x84>
 8003a60:	4bb0      	ldr	r3, [pc, #704]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4baf      	ldr	r3, [pc, #700]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	0249      	lsls	r1, r1, #9
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e027      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	23a0      	movs	r3, #160	; 0xa0
 8003a76:	02db      	lsls	r3, r3, #11
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d10e      	bne.n	8003a9a <HAL_RCC_OscConfig+0xae>
 8003a7c:	4ba9      	ldr	r3, [pc, #676]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4ba8      	ldr	r3, [pc, #672]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a82:	2180      	movs	r1, #128	; 0x80
 8003a84:	02c9      	lsls	r1, r1, #11
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	4ba6      	ldr	r3, [pc, #664]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4ba5      	ldr	r3, [pc, #660]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	0249      	lsls	r1, r1, #9
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e012      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd4>
 8003a9a:	4ba2      	ldr	r3, [pc, #648]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4ba1      	ldr	r3, [pc, #644]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003aa0:	49a1      	ldr	r1, [pc, #644]	; (8003d28 <HAL_RCC_OscConfig+0x33c>)
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	4b9f      	ldr	r3, [pc, #636]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	025b      	lsls	r3, r3, #9
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4b9b      	ldr	r3, [pc, #620]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b9a      	ldr	r3, [pc, #616]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003aba:	499c      	ldr	r1, [pc, #624]	; (8003d2c <HAL_RCC_OscConfig+0x340>)
 8003abc:	400a      	ands	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7ff fbd0 	bl	800326c <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad0:	e009      	b.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad2:	f7ff fbcb 	bl	800326c <HAL_GetTick>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f000 fb49 	bl	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ae6:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	029b      	lsls	r3, r3, #10
 8003aee:	4013      	ands	r3, r2
 8003af0:	d0ef      	beq.n	8003ad2 <HAL_RCC_OscConfig+0xe6>
 8003af2:	e015      	b.n	8003b20 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7ff fbba 	bl	800326c <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afe:	f7ff fbb5 	bl	800326c <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	; 0x64
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e333      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b10:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	029b      	lsls	r3, r3, #10
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x112>
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2202      	movs	r2, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	d100      	bne.n	8003b2c <HAL_RCC_OscConfig+0x140>
 8003b2a:	e098      	b.n	8003c5e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b40:	2120      	movs	r1, #32
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	2220      	movs	r2, #32
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	d13d      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1ea>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13a      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b60:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2204      	movs	r2, #4
 8003b66:	4013      	ands	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_RCC_OscConfig+0x188>
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e301      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b6b      	ldr	r3, [pc, #428]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a6d      	ldr	r2, [pc, #436]	; (8003d30 <HAL_RCC_OscConfig+0x344>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b8a:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2209      	movs	r2, #9
 8003b90:	4393      	bics	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9c:	f000 fc20 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 8003ba0:	0001      	movs	r1, r0
 8003ba2:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	220f      	movs	r2, #15
 8003baa:	4013      	ands	r3, r2
 8003bac:	4a61      	ldr	r2, [pc, #388]	; (8003d34 <HAL_RCC_OscConfig+0x348>)
 8003bae:	5cd3      	ldrb	r3, [r2, r3]
 8003bb0:	000a      	movs	r2, r1
 8003bb2:	40da      	lsrs	r2, r3
 8003bb4:	4b60      	ldr	r3, [pc, #384]	; (8003d38 <HAL_RCC_OscConfig+0x34c>)
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003bb8:	2513      	movs	r5, #19
 8003bba:	197c      	adds	r4, r7, r5
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7ff fb2b 	bl	8003218 <HAL_InitTick>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003bc6:	197b      	adds	r3, r7, r5
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d047      	beq.n	8003c5e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003bce:	2313      	movs	r3, #19
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	e2d0      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d027      	beq.n	8003c2c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bdc:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2209      	movs	r2, #9
 8003be2:	4393      	bics	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	430a      	orrs	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7ff fb3d 	bl	800326c <HAL_GetTick>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7ff fb38 	bl	800326c <HAL_GetTick>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e2b6      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0a:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	4013      	ands	r3, r2
 8003c12:	d0f1      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a45      	ldr	r2, [pc, #276]	; (8003d30 <HAL_RCC_OscConfig+0x344>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	021a      	lsls	r2, r3, #8
 8003c24:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e018      	b.n	8003c5e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2c:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	438a      	bics	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7ff fb18 	bl	800326c <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c42:	f7ff fb13 	bl	800326c <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e291      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c54:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d1f1      	bne.n	8003c42 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2210      	movs	r2, #16
 8003c64:	4013      	ands	r3, r2
 8003c66:	d100      	bne.n	8003c6a <HAL_RCC_OscConfig+0x27e>
 8003c68:	e09f      	b.n	8003daa <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d13f      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c70:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x29c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e277      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <HAL_RCC_OscConfig+0x350>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c96:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c9c:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	0a19      	lsrs	r1, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	061a      	lsls	r2, r3, #24
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	0b5b      	lsrs	r3, r3, #13
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	0212      	lsls	r2, r2, #8
 8003cbc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	210f      	movs	r1, #15
 8003cc6:	400b      	ands	r3, r1
 8003cc8:	491a      	ldr	r1, [pc, #104]	; (8003d34 <HAL_RCC_OscConfig+0x348>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_RCC_OscConfig+0x34c>)
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003cd2:	2513      	movs	r5, #19
 8003cd4:	197c      	adds	r4, r7, r5
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7ff fa9e 	bl	8003218 <HAL_InitTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003ce0:	197b      	adds	r3, r7, r5
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d060      	beq.n	8003daa <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8003ce8:	2313      	movs	r3, #19
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	e243      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03e      	beq.n	8003d76 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003cfe:	2180      	movs	r1, #128	; 0x80
 8003d00:	0049      	lsls	r1, r1, #1
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7ff fab1 	bl	800326c <HAL_GetTick>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d0e:	e017      	b.n	8003d40 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d10:	f7ff faac 	bl	800326c <HAL_GetTick>
 8003d14:	0002      	movs	r2, r0
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d910      	bls.n	8003d40 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e22a      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40021000 	.word	0x40021000
 8003d28:	fffeffff 	.word	0xfffeffff
 8003d2c:	fffbffff 	.word	0xfffbffff
 8003d30:	ffffe0ff 	.word	0xffffe0ff
 8003d34:	08007bb4 	.word	0x08007bb4
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d40:	4bc6      	ldr	r3, [pc, #792]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d0e1      	beq.n	8003d10 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d4c:	4bc3      	ldr	r3, [pc, #780]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4ac3      	ldr	r2, [pc, #780]	; (8004060 <HAL_RCC_OscConfig+0x674>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5a:	4bc0      	ldr	r3, [pc, #768]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d60:	4bbe      	ldr	r3, [pc, #760]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	0a19      	lsrs	r1, r3, #8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	061a      	lsls	r2, r3, #24
 8003d6e:	4bbb      	ldr	r3, [pc, #748]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	e019      	b.n	8003daa <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d76:	4bb9      	ldr	r3, [pc, #740]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4bb8      	ldr	r3, [pc, #736]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003d7c:	49b9      	ldr	r1, [pc, #740]	; (8004064 <HAL_RCC_OscConfig+0x678>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7ff fa73 	bl	800326c <HAL_GetTick>
 8003d86:	0003      	movs	r3, r0
 8003d88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d8c:	f7ff fa6e 	bl	800326c <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1ec      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d9e:	4baf      	ldr	r3, [pc, #700]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2208      	movs	r2, #8
 8003db0:	4013      	ands	r3, r2
 8003db2:	d036      	beq.n	8003e22 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d019      	beq.n	8003df0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbc:	4ba7      	ldr	r3, [pc, #668]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc0:	4ba6      	ldr	r3, [pc, #664]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc8:	f7ff fa50 	bl	800326c <HAL_GetTick>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7ff fa4b 	bl	800326c <HAL_GetTick>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1c9      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003de4:	4b9d      	ldr	r3, [pc, #628]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de8:	2202      	movs	r2, #2
 8003dea:	4013      	ands	r3, r2
 8003dec:	d0f1      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x3e6>
 8003dee:	e018      	b.n	8003e22 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b9a      	ldr	r3, [pc, #616]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003df4:	4b99      	ldr	r3, [pc, #612]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	438a      	bics	r2, r1
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfc:	f7ff fa36 	bl	800326c <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e06:	f7ff fa31 	bl	800326c <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1af      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e18:	4b90      	ldr	r3, [pc, #576]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d1f1      	bne.n	8003e06 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2204      	movs	r2, #4
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <HAL_RCC_OscConfig+0x442>
 8003e2c:	e0af      	b.n	8003f8e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2323      	movs	r3, #35	; 0x23
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b89      	ldr	r3, [pc, #548]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	055b      	lsls	r3, r3, #21
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d10a      	bne.n	8003e58 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b86      	ldr	r3, [pc, #536]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e46:	4b85      	ldr	r3, [pc, #532]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	0549      	lsls	r1, r1, #21
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e50:	2323      	movs	r3, #35	; 0x23
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b83      	ldr	r3, [pc, #524]	; (8004068 <HAL_RCC_OscConfig+0x67c>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	d11a      	bne.n	8003e9a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e64:	4b80      	ldr	r3, [pc, #512]	; (8004068 <HAL_RCC_OscConfig+0x67c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x67c>)
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	0049      	lsls	r1, r1, #1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7ff f9fb 	bl	800326c <HAL_GetTick>
 8003e76:	0003      	movs	r3, r0
 8003e78:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7ff f9f6 	bl	800326c <HAL_GetTick>
 8003e80:	0002      	movs	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e174      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCC_OscConfig+0x67c>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4013      	ands	r3, r2
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x4ca>
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003eac:	2180      	movs	r1, #128	; 0x80
 8003eae:	0049      	lsls	r1, r1, #1
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb4:	e031      	b.n	8003f1a <HAL_RCC_OscConfig+0x52e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4ec>
 8003ebe:	4b67      	ldr	r3, [pc, #412]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ec2:	4b66      	ldr	r3, [pc, #408]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ec4:	4967      	ldr	r1, [pc, #412]	; (8004064 <HAL_RCC_OscConfig+0x678>)
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	651a      	str	r2, [r3, #80]	; 0x50
 8003eca:	4b64      	ldr	r3, [pc, #400]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ed0:	4966      	ldr	r1, [pc, #408]	; (800406c <HAL_RCC_OscConfig+0x680>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	651a      	str	r2, [r3, #80]	; 0x50
 8003ed6:	e020      	b.n	8003f1a <HAL_RCC_OscConfig+0x52e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	23a0      	movs	r3, #160	; 0xa0
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d10e      	bne.n	8003f02 <HAL_RCC_OscConfig+0x516>
 8003ee4:	4b5d      	ldr	r3, [pc, #372]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ee8:	4b5c      	ldr	r3, [pc, #368]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	00c9      	lsls	r1, r1, #3
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	651a      	str	r2, [r3, #80]	; 0x50
 8003ef2:	4b5a      	ldr	r3, [pc, #360]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ef6:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	0049      	lsls	r1, r1, #1
 8003efc:	430a      	orrs	r2, r1
 8003efe:	651a      	str	r2, [r3, #80]	; 0x50
 8003f00:	e00b      	b.n	8003f1a <HAL_RCC_OscConfig+0x52e>
 8003f02:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f06:	4b55      	ldr	r3, [pc, #340]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f08:	4956      	ldr	r1, [pc, #344]	; (8004064 <HAL_RCC_OscConfig+0x678>)
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	651a      	str	r2, [r3, #80]	; 0x50
 8003f0e:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f12:	4b52      	ldr	r3, [pc, #328]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f14:	4955      	ldr	r1, [pc, #340]	; (800406c <HAL_RCC_OscConfig+0x680>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d015      	beq.n	8003f4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7ff f9a3 	bl	800326c <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f2a:	e009      	b.n	8003f40 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7ff f99e 	bl	800326c <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	4a4e      	ldr	r2, [pc, #312]	; (8004070 <HAL_RCC_OscConfig+0x684>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e11b      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d0ef      	beq.n	8003f2c <HAL_RCC_OscConfig+0x540>
 8003f4c:	e014      	b.n	8003f78 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7ff f98d 	bl	800326c <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f56:	e009      	b.n	8003f6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7ff f988 	bl	800326c <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	4a43      	ldr	r2, [pc, #268]	; (8004070 <HAL_RCC_OscConfig+0x684>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e105      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d1ef      	bne.n	8003f58 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f78:	2323      	movs	r3, #35	; 0x23
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	4b35      	ldr	r3, [pc, #212]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003f88:	493a      	ldr	r1, [pc, #232]	; (8004074 <HAL_RCC_OscConfig+0x688>)
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2220      	movs	r2, #32
 8003f94:	4013      	ands	r3, r2
 8003f96:	d049      	beq.n	800402c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d026      	beq.n	8003fee <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003fa0:	4b2e      	ldr	r3, [pc, #184]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_RCC_OscConfig+0x68c>)
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_RCC_OscConfig+0x68c>)
 8003fbe:	2180      	movs	r1, #128	; 0x80
 8003fc0:	0189      	lsls	r1, r1, #6
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7ff f951 	bl	800326c <HAL_GetTick>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fd0:	f7ff f94c 	bl	800326c <HAL_GetTick>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0ca      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d0f1      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x5e4>
 8003fec:	e01e      	b.n	800402c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fee:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	438a      	bics	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <HAL_RCC_OscConfig+0x68c>)
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_OscConfig+0x68c>)
 8004000:	491e      	ldr	r1, [pc, #120]	; (800407c <HAL_RCC_OscConfig+0x690>)
 8004002:	400a      	ands	r2, r1
 8004004:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7ff f931 	bl	800326c <HAL_GetTick>
 800400a:	0003      	movs	r3, r0
 800400c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004010:	f7ff f92c 	bl	800326c <HAL_GetTick>
 8004014:	0002      	movs	r2, r0
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e0aa      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2202      	movs	r2, #2
 8004028:	4013      	ands	r3, r2
 800402a:	d1f1      	bne.n	8004010 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	d100      	bne.n	8004036 <HAL_RCC_OscConfig+0x64a>
 8004034:	e09f      	b.n	8004176 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d100      	bne.n	800403e <HAL_RCC_OscConfig+0x652>
 800403c:	e078      	b.n	8004130 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	2b02      	cmp	r3, #2
 8004044:	d159      	bne.n	80040fa <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_OscConfig+0x670>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_RCC_OscConfig+0x670>)
 800404c:	490c      	ldr	r1, [pc, #48]	; (8004080 <HAL_RCC_OscConfig+0x694>)
 800404e:	400a      	ands	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7ff f90b 	bl	800326c <HAL_GetTick>
 8004056:	0003      	movs	r3, r0
 8004058:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800405a:	e01c      	b.n	8004096 <HAL_RCC_OscConfig+0x6aa>
 800405c:	40021000 	.word	0x40021000
 8004060:	ffff1fff 	.word	0xffff1fff
 8004064:	fffffeff 	.word	0xfffffeff
 8004068:	40007000 	.word	0x40007000
 800406c:	fffffbff 	.word	0xfffffbff
 8004070:	00001388 	.word	0x00001388
 8004074:	efffffff 	.word	0xefffffff
 8004078:	40010000 	.word	0x40010000
 800407c:	ffffdfff 	.word	0xffffdfff
 8004080:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7ff f8f2 	bl	800326c <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e070      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	049b      	lsls	r3, r3, #18
 800409e:	4013      	ands	r3, r2
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a2:	4b37      	ldr	r3, [pc, #220]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4a37      	ldr	r2, [pc, #220]	; (8004184 <HAL_RCC_OscConfig+0x798>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	0019      	movs	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	431a      	orrs	r2, r3
 80040bc:	4b30      	ldr	r3, [pc, #192]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 80040be:	430a      	orrs	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c2:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0449      	lsls	r1, r1, #17
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7ff f8cc 	bl	800326c <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040da:	f7ff f8c7 	bl	800326c <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e045      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	049b      	lsls	r3, r3, #18
 80040f4:	4013      	ands	r3, r2
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x6ee>
 80040f8:	e03d      	b.n	8004176 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 8004100:	4921      	ldr	r1, [pc, #132]	; (8004188 <HAL_RCC_OscConfig+0x79c>)
 8004102:	400a      	ands	r2, r1
 8004104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004106:	f7ff f8b1 	bl	800326c <HAL_GetTick>
 800410a:	0003      	movs	r3, r0
 800410c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004110:	f7ff f8ac 	bl	800326c <HAL_GetTick>
 8004114:	0002      	movs	r2, r0
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e02a      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	049b      	lsls	r3, r3, #18
 800412a:	4013      	ands	r3, r2
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x724>
 800412e:	e022      	b.n	8004176 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCC_OscConfig+0x794>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	025b      	lsls	r3, r3, #9
 8004148:	401a      	ands	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d10f      	bne.n	8004172 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	23f0      	movs	r3, #240	; 0xf0
 8004156:	039b      	lsls	r3, r3, #14
 8004158:	401a      	ands	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d107      	bne.n	8004172 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	23c0      	movs	r3, #192	; 0xc0
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	401a      	ands	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b00a      	add	sp, #40	; 0x28
 800417e:	bdb0      	pop	{r4, r5, r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	ff02ffff 	.word	0xff02ffff
 8004188:	feffffff 	.word	0xfeffffff

0800418c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e10d      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2201      	movs	r2, #1
 80041a6:	4013      	ands	r3, r2
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d911      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	4393      	bics	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	4b82      	ldr	r3, [pc, #520]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c0:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0f4      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2202      	movs	r2, #2
 80041d8:	4013      	ands	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b7a      	ldr	r3, [pc, #488]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	22f0      	movs	r2, #240	; 0xf0
 80041e2:	4393      	bics	r3, r2
 80041e4:	0019      	movs	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	4b77      	ldr	r3, [pc, #476]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	4013      	ands	r3, r2
 80041f8:	d100      	bne.n	80041fc <HAL_RCC_ClockConfig+0x70>
 80041fa:	e089      	b.n	8004310 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d107      	bne.n	8004214 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004204:	4b70      	ldr	r3, [pc, #448]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	4013      	ands	r3, r2
 800420e:	d120      	bne.n	8004252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0d3      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d107      	bne.n	800422c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800421c:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	049b      	lsls	r3, r3, #18
 8004224:	4013      	ands	r3, r2
 8004226:	d114      	bne.n	8004252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0c7      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004234:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2204      	movs	r2, #4
 800423a:	4013      	ands	r3, r2
 800423c:	d109      	bne.n	8004252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0bc      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004242:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4013      	ands	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0b4      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004252:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2203      	movs	r2, #3
 8004258:	4393      	bics	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 8004262:	430a      	orrs	r2, r1
 8004264:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004266:	f7ff f801 	bl	800326c <HAL_GetTick>
 800426a:	0003      	movs	r3, r0
 800426c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d111      	bne.n	800429a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004276:	e009      	b.n	800428c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fe fff8 	bl	800326c <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	4a52      	ldr	r2, [pc, #328]	; (80043cc <HAL_RCC_ClockConfig+0x240>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e097      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800428c:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	220c      	movs	r2, #12
 8004292:	4013      	ands	r3, r2
 8004294:	2b08      	cmp	r3, #8
 8004296:	d1ef      	bne.n	8004278 <HAL_RCC_ClockConfig+0xec>
 8004298:	e03a      	b.n	8004310 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d111      	bne.n	80042c6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a2:	e009      	b.n	80042b8 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fe ffe2 	bl	800326c <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	4a47      	ldr	r2, [pc, #284]	; (80043cc <HAL_RCC_ClockConfig+0x240>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e081      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b8:	4b43      	ldr	r3, [pc, #268]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	220c      	movs	r2, #12
 80042be:	4013      	ands	r3, r2
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d1ef      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x118>
 80042c4:	e024      	b.n	8004310 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d11b      	bne.n	8004306 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ce:	e009      	b.n	80042e4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fe ffcc 	bl	800326c <HAL_GetTick>
 80042d4:	0002      	movs	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <HAL_RCC_ClockConfig+0x240>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e06b      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042e4:	4b38      	ldr	r3, [pc, #224]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	220c      	movs	r2, #12
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d1ef      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x144>
 80042f0:	e00e      	b.n	8004310 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f2:	f7fe ffbb 	bl	800326c <HAL_GetTick>
 80042f6:	0002      	movs	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	4a33      	ldr	r2, [pc, #204]	; (80043cc <HAL_RCC_ClockConfig+0x240>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e05a      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004306:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	220c      	movs	r2, #12
 800430c:	4013      	ands	r3, r2
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004310:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d211      	bcs.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	4393      	bics	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_RCC_ClockConfig+0x238>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2201      	movs	r2, #1
 8004336:	4013      	ands	r3, r2
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d001      	beq.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e03c      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2204      	movs	r2, #4
 8004348:	4013      	ands	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <HAL_RCC_ClockConfig+0x244>)
 8004352:	4013      	ands	r3, r2
 8004354:	0019      	movs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 800435c:	430a      	orrs	r2, r1
 800435e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2208      	movs	r2, #8
 8004366:	4013      	ands	r3, r2
 8004368:	d00a      	beq.n	8004380 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800436a:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <HAL_RCC_ClockConfig+0x248>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	00da      	lsls	r2, r3, #3
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 800437c:	430a      	orrs	r2, r1
 800437e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004380:	f000 f82e 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 8004384:	0001      	movs	r1, r0
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <HAL_RCC_ClockConfig+0x23c>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	220f      	movs	r2, #15
 800438e:	4013      	ands	r3, r2
 8004390:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <HAL_RCC_ClockConfig+0x24c>)
 8004392:	5cd3      	ldrb	r3, [r2, r3]
 8004394:	000a      	movs	r2, r1
 8004396:	40da      	lsrs	r2, r3
 8004398:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_RCC_ClockConfig+0x250>)
 800439a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800439c:	250b      	movs	r5, #11
 800439e:	197c      	adds	r4, r7, r5
 80043a0:	2000      	movs	r0, #0
 80043a2:	f7fe ff39 	bl	8003218 <HAL_InitTick>
 80043a6:	0003      	movs	r3, r0
 80043a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80043aa:	197b      	adds	r3, r7, r5
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80043b2:	230b      	movs	r3, #11
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	e000      	b.n	80043bc <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b004      	add	sp, #16
 80043c2:	bdb0      	pop	{r4, r5, r7, pc}
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40021000 	.word	0x40021000
 80043cc:	00001388 	.word	0x00001388
 80043d0:	fffff8ff 	.word	0xfffff8ff
 80043d4:	ffffc7ff 	.word	0xffffc7ff
 80043d8:	08007bb4 	.word	0x08007bb4
 80043dc:	20000004 	.word	0x20000004

080043e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	220c      	movs	r2, #12
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d00e      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x34>
 80043f6:	2b0c      	cmp	r3, #12
 80043f8:	d00f      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x3a>
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d157      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043fe:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	4013      	ands	r3, r2
 8004406:	d002      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004408:	4b33      	ldr	r3, [pc, #204]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800440a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800440c:	e05d      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800440e:	4b33      	ldr	r3, [pc, #204]	; (80044dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004410:	613b      	str	r3, [r7, #16]
      break;
 8004412:	e05a      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004414:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004416:	613b      	str	r3, [r7, #16]
      break;
 8004418:	e057      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	0c9b      	lsrs	r3, r3, #18
 800441e:	220f      	movs	r2, #15
 8004420:	4013      	ands	r3, r2
 8004422:	4a30      	ldr	r2, [pc, #192]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004424:	5cd3      	ldrb	r3, [r2, r3]
 8004426:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	0d9b      	lsrs	r3, r3, #22
 800442c:	2203      	movs	r2, #3
 800442e:	4013      	ands	r3, r2
 8004430:	3301      	adds	r3, #1
 8004432:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	025b      	lsls	r3, r3, #9
 800443c:	4013      	ands	r3, r2
 800443e:	d00f      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	000a      	movs	r2, r1
 8004444:	0152      	lsls	r2, r2, #5
 8004446:	1a52      	subs	r2, r2, r1
 8004448:	0193      	lsls	r3, r2, #6
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	185b      	adds	r3, r3, r1
 8004450:	025b      	lsls	r3, r3, #9
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	0018      	movs	r0, r3
 8004456:	f7fb fe57 	bl	8000108 <__udivsi3>
 800445a:	0003      	movs	r3, r0
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e023      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2210      	movs	r2, #16
 8004466:	4013      	ands	r3, r2
 8004468:	d00f      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	000a      	movs	r2, r1
 800446e:	0152      	lsls	r2, r2, #5
 8004470:	1a52      	subs	r2, r2, r1
 8004472:	0193      	lsls	r3, r2, #6
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	185b      	adds	r3, r3, r1
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	0018      	movs	r0, r3
 8004480:	f7fb fe42 	bl	8000108 <__udivsi3>
 8004484:	0003      	movs	r3, r0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e00e      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	000a      	movs	r2, r1
 800448e:	0152      	lsls	r2, r2, #5
 8004490:	1a52      	subs	r2, r2, r1
 8004492:	0193      	lsls	r3, r2, #6
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	185b      	adds	r3, r3, r1
 800449a:	029b      	lsls	r3, r3, #10
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	0018      	movs	r0, r3
 80044a0:	f7fb fe32 	bl	8000108 <__udivsi3>
 80044a4:	0003      	movs	r3, r0
 80044a6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	613b      	str	r3, [r7, #16]
      break;
 80044ac:	e00d      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	0b5b      	lsrs	r3, r3, #13
 80044b4:	2207      	movs	r2, #7
 80044b6:	4013      	ands	r3, r2
 80044b8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	2280      	movs	r2, #128	; 0x80
 80044c0:	0212      	lsls	r2, r2, #8
 80044c2:	409a      	lsls	r2, r3
 80044c4:	0013      	movs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
      break;
 80044c8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044ca:	693b      	ldr	r3, [r7, #16]
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b006      	add	sp, #24
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	003d0900 	.word	0x003d0900
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	007a1200 	.word	0x007a1200
 80044e4:	08007bcc 	.word	0x08007bcc

080044e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ec:	4b02      	ldr	r3, [pc, #8]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	20000004 	.word	0x20000004

080044fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004500:	f7ff fff2 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004504:	0001      	movs	r1, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	2207      	movs	r2, #7
 800450e:	4013      	ands	r3, r2
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004512:	5cd3      	ldrb	r3, [r2, r3]
 8004514:	40d9      	lsrs	r1, r3
 8004516:	000b      	movs	r3, r1
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	08007bc4 	.word	0x08007bc4

08004528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800452c:	f7ff ffdc 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004530:	0001      	movs	r1, r0
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	0adb      	lsrs	r3, r3, #11
 8004538:	2207      	movs	r2, #7
 800453a:	4013      	ands	r3, r2
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800453e:	5cd3      	ldrb	r3, [r2, r3]
 8004540:	40d9      	lsrs	r1, r3
 8004542:	000b      	movs	r3, r1
}
 8004544:	0018      	movs	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	40021000 	.word	0x40021000
 8004550:	08007bc4 	.word	0x08007bc4

08004554 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2220      	movs	r2, #32
 8004562:	4013      	ands	r3, r2
 8004564:	d106      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	4013      	ands	r3, r2
 8004570:	d100      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004572:	e0dd      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004574:	2317      	movs	r3, #23
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457c:	4ba4      	ldr	r3, [pc, #656]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800457e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	055b      	lsls	r3, r3, #21
 8004584:	4013      	ands	r3, r2
 8004586:	d10a      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004588:	4ba1      	ldr	r3, [pc, #644]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800458a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800458c:	4ba0      	ldr	r3, [pc, #640]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	0549      	lsls	r1, r1, #21
 8004592:	430a      	orrs	r2, r1
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004596:	2317      	movs	r3, #23
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459e:	4b9d      	ldr	r3, [pc, #628]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4013      	ands	r3, r2
 80045a8:	d11a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045aa:	4b9a      	ldr	r3, [pc, #616]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b99      	ldr	r3, [pc, #612]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	0049      	lsls	r1, r1, #1
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b8:	f7fe fe58 	bl	800326c <HAL_GetTick>
 80045bc:	0003      	movs	r3, r0
 80045be:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fe fe53 	bl	800326c <HAL_GetTick>
 80045c6:	0002      	movs	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	; 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e118      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80045e0:	4b8b      	ldr	r3, [pc, #556]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	23c0      	movs	r3, #192	; 0xc0
 80045e6:	039b      	lsls	r3, r3, #14
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	23c0      	movs	r3, #192	; 0xc0
 80045f2:	039b      	lsls	r3, r3, #14
 80045f4:	4013      	ands	r3, r2
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d107      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	23c0      	movs	r3, #192	; 0xc0
 8004602:	039b      	lsls	r3, r3, #14
 8004604:	4013      	ands	r3, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d013      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	23c0      	movs	r3, #192	; 0xc0
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	401a      	ands	r2, r3
 8004616:	23c0      	movs	r3, #192	; 0xc0
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	429a      	cmp	r2, r3
 800461c:	d10a      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800461e:	4b7c      	ldr	r3, [pc, #496]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	029b      	lsls	r3, r3, #10
 8004626:	401a      	ands	r2, r3
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	429a      	cmp	r2, r3
 800462e:	d101      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0e8      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004634:	4b76      	ldr	r3, [pc, #472]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004638:	23c0      	movs	r3, #192	; 0xc0
 800463a:	029b      	lsls	r3, r3, #10
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d049      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	23c0      	movs	r3, #192	; 0xc0
 800464c:	029b      	lsls	r3, r3, #10
 800464e:	4013      	ands	r3, r2
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d004      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2220      	movs	r2, #32
 800465c:	4013      	ands	r3, r2
 800465e:	d10d      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	23c0      	movs	r3, #192	; 0xc0
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	4013      	ands	r3, r2
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	429a      	cmp	r2, r3
 800466e:	d034      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	4013      	ands	r3, r2
 800467a:	d02e      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800467c:	4b64      	ldr	r3, [pc, #400]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	4a65      	ldr	r2, [pc, #404]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004682:	4013      	ands	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004686:	4b62      	ldr	r3, [pc, #392]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800468a:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	0309      	lsls	r1, r1, #12
 8004690:	430a      	orrs	r2, r1
 8004692:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004694:	4b5e      	ldr	r3, [pc, #376]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004698:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800469a:	4960      	ldr	r1, [pc, #384]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800469c:	400a      	ands	r2, r1
 800469e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80046a0:	4b5b      	ldr	r3, [pc, #364]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4013      	ands	r3, r2
 80046ae:	d014      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fddc 	bl	800326c <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046b8:	e009      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fe fdd7 	bl	800326c <HAL_GetTick>
 80046be:	0002      	movs	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	4a56      	ldr	r2, [pc, #344]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e09b      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046ce:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4013      	ands	r3, r2
 80046d8:	d0ef      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	23c0      	movs	r3, #192	; 0xc0
 80046e0:	029b      	lsls	r3, r3, #10
 80046e2:	401a      	ands	r2, r3
 80046e4:	23c0      	movs	r3, #192	; 0xc0
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d10c      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80046ec:	4b48      	ldr	r3, [pc, #288]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a4c      	ldr	r2, [pc, #304]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	0019      	movs	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	23c0      	movs	r3, #192	; 0xc0
 80046fc:	039b      	lsls	r3, r3, #14
 80046fe:	401a      	ands	r2, r3
 8004700:	4b43      	ldr	r3, [pc, #268]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	4b42      	ldr	r3, [pc, #264]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004708:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	23c0      	movs	r3, #192	; 0xc0
 8004710:	029b      	lsls	r3, r3, #10
 8004712:	401a      	ands	r2, r3
 8004714:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004716:	430a      	orrs	r2, r1
 8004718:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800471a:	2317      	movs	r3, #23
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004728:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800472a:	493f      	ldr	r1, [pc, #252]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800472c:	400a      	ands	r2, r1
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	4013      	ands	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800473a:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	2203      	movs	r2, #3
 8004740:	4393      	bics	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	4b31      	ldr	r3, [pc, #196]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800474a:	430a      	orrs	r2, r1
 800474c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2202      	movs	r2, #2
 8004754:	4013      	ands	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004758:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	220c      	movs	r2, #12
 800475e:	4393      	bics	r3, r2
 8004760:	0019      	movs	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004768:	430a      	orrs	r2, r1
 800476a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2204      	movs	r2, #4
 8004772:	4013      	ands	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004776:	4b26      	ldr	r3, [pc, #152]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	4a2c      	ldr	r2, [pc, #176]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004786:	430a      	orrs	r2, r1
 8004788:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2208      	movs	r2, #8
 8004790:	4013      	ands	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004794:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800479a:	4013      	ands	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4013      	ands	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047b4:	4b16      	ldr	r3, [pc, #88]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	0019      	movs	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047c4:	430a      	orrs	r2, r1
 80047c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	4013      	ands	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	4a17      	ldr	r2, [pc, #92]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80047d8:	4013      	ands	r3, r2
 80047da:	0019      	movs	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047e2:	430a      	orrs	r2, r1
 80047e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	4013      	ands	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f4:	4a10      	ldr	r2, [pc, #64]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004800:	430a      	orrs	r2, r1
 8004802:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b006      	add	sp, #24
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
 8004818:	fffcffff 	.word	0xfffcffff
 800481c:	fff7ffff 	.word	0xfff7ffff
 8004820:	00001388 	.word	0x00001388
 8004824:	ffcfffff 	.word	0xffcfffff
 8004828:	efffffff 	.word	0xefffffff
 800482c:	fffff3ff 	.word	0xfffff3ff
 8004830:	ffffcfff 	.word	0xffffcfff
 8004834:	fbffffff 	.word	0xfbffffff
 8004838:	fff3ffff 	.word	0xfff3ffff

0800483c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e059      	b.n	8004902 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2251      	movs	r2, #81	; 0x51
 8004858:	5c9b      	ldrb	r3, [r3, r2]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2250      	movs	r2, #80	; 0x50
 8004864:	2100      	movs	r1, #0
 8004866:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f7fe f9a8 	bl	8002bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2251      	movs	r2, #81	; 0x51
 8004874:	2102      	movs	r1, #2
 8004876:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2140      	movs	r1, #64	; 0x40
 8004884:	438a      	bics	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6999      	ldr	r1, [r3, #24]
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	400b      	ands	r3, r1
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	0011      	movs	r1, r2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	2204      	movs	r2, #4
 80048d2:	4013      	ands	r3, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4907      	ldr	r1, [pc, #28]	; (800490c <HAL_SPI_Init+0xd0>)
 80048ee:	400a      	ands	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2251      	movs	r2, #81	; 0x51
 80048fc:	2101      	movs	r1, #1
 80048fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b002      	add	sp, #8
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	fffff7ff 	.word	0xfffff7ff

08004910 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	1dbb      	adds	r3, r7, #6
 800491e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004920:	231f      	movs	r3, #31
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2250      	movs	r2, #80	; 0x50
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_SPI_Transmit+0x26>
 8004932:	2302      	movs	r3, #2
 8004934:	e136      	b.n	8004ba4 <HAL_SPI_Transmit+0x294>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2250      	movs	r2, #80	; 0x50
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493e:	f7fe fc95 	bl	800326c <HAL_GetTick>
 8004942:	0003      	movs	r3, r0
 8004944:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004946:	2316      	movs	r3, #22
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	1dba      	adds	r2, r7, #6
 800494c:	8812      	ldrh	r2, [r2, #0]
 800494e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2251      	movs	r2, #81	; 0x51
 8004954:	5c9b      	ldrb	r3, [r3, r2]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d004      	beq.n	8004966 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800495c:	231f      	movs	r3, #31
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	2202      	movs	r2, #2
 8004962:	701a      	strb	r2, [r3, #0]
    goto error;
 8004964:	e113      	b.n	8004b8e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_SPI_Transmit+0x64>
 800496c:	1dbb      	adds	r3, r7, #6
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004974:	231f      	movs	r3, #31
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
    goto error;
 800497c:	e107      	b.n	8004b8e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2251      	movs	r2, #81	; 0x51
 8004982:	2103      	movs	r1, #3
 8004984:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1dba      	adds	r2, r7, #6
 8004996:	8812      	ldrh	r2, [r2, #0]
 8004998:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1dba      	adds	r2, r7, #6
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d108      	bne.n	80049de <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	01c9      	lsls	r1, r1, #7
 80049da:	430a      	orrs	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2240      	movs	r2, #64	; 0x40
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d007      	beq.n	80049fc <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2140      	movs	r1, #64	; 0x40
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d14e      	bne.n	8004aa6 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_SPI_Transmit+0x10a>
 8004a10:	2316      	movs	r3, #22
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d13f      	bne.n	8004a9a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a3e:	e02c      	b.n	8004a9a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2202      	movs	r2, #2
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d112      	bne.n	8004a74 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	1c9a      	adds	r2, r3, #2
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a72:	e012      	b.n	8004a9a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a74:	f7fe fbfa 	bl	800326c <HAL_GetTick>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d802      	bhi.n	8004a8a <HAL_SPI_Transmit+0x17a>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	3301      	adds	r3, #1
 8004a88:	d102      	bne.n	8004a90 <HAL_SPI_Transmit+0x180>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8004a90:	231f      	movs	r3, #31
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	2203      	movs	r2, #3
 8004a96:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a98:	e079      	b.n	8004b8e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1cd      	bne.n	8004a40 <HAL_SPI_Transmit+0x130>
 8004aa4:	e04f      	b.n	8004b46 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <HAL_SPI_Transmit+0x1a8>
 8004aae:	2316      	movs	r3, #22
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d141      	bne.n	8004b3c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ade:	e02d      	b.n	8004b3c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d113      	bne.n	8004b16 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b14:	e012      	b.n	8004b3c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b16:	f7fe fba9 	bl	800326c <HAL_GetTick>
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d802      	bhi.n	8004b2c <HAL_SPI_Transmit+0x21c>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	d102      	bne.n	8004b32 <HAL_SPI_Transmit+0x222>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8004b32:	231f      	movs	r3, #31
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	2203      	movs	r2, #3
 8004b38:	701a      	strb	r2, [r3, #0]
          goto error;
 8004b3a:	e028      	b.n	8004b8e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1cc      	bne.n	8004ae0 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 fbe1 	bl	8005314 <SPI_EndRxTxTransaction>
 8004b52:	1e03      	subs	r3, r0, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8004b82:	231f      	movs	r3, #31
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e000      	b.n	8004b8e <HAL_SPI_Transmit+0x27e>
  }

error:
 8004b8c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2251      	movs	r2, #81	; 0x51
 8004b92:	2101      	movs	r1, #1
 8004b94:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2250      	movs	r2, #80	; 0x50
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b9e:	231f      	movs	r3, #31
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	781b      	ldrb	r3, [r3, #0]
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b008      	add	sp, #32
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b089      	sub	sp, #36	; 0x24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	1dbb      	adds	r3, r7, #6
 8004bba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bbc:	2317      	movs	r3, #23
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	2382      	movs	r3, #130	; 0x82
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d113      	bne.n	8004bf8 <HAL_SPI_Receive+0x4c>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10f      	bne.n	8004bf8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2251      	movs	r2, #81	; 0x51
 8004bdc:	2104      	movs	r1, #4
 8004bde:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004be0:	1dbb      	adds	r3, r7, #6
 8004be2:	881c      	ldrh	r4, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	0023      	movs	r3, r4
 8004bf0:	f000 f8fa 	bl	8004de8 <HAL_SPI_TransmitReceive>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	e0f1      	b.n	8004ddc <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2250      	movs	r2, #80	; 0x50
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_Receive+0x5a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0ea      	b.n	8004ddc <HAL_SPI_Receive+0x230>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2250      	movs	r2, #80	; 0x50
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c0e:	f7fe fb2d 	bl	800326c <HAL_GetTick>
 8004c12:	0003      	movs	r3, r0
 8004c14:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2251      	movs	r2, #81	; 0x51
 8004c1a:	5c9b      	ldrb	r3, [r3, r2]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d004      	beq.n	8004c2c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004c22:	2317      	movs	r3, #23
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
    goto error;
 8004c2a:	e0cc      	b.n	8004dc6 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_SPI_Receive+0x8e>
 8004c32:	1dbb      	adds	r3, r7, #6
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004c3a:	2317      	movs	r3, #23
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
    goto error;
 8004c42:	e0c0      	b.n	8004dc6 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2251      	movs	r2, #81	; 0x51
 8004c48:	2104      	movs	r1, #4
 8004c4a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1dba      	adds	r2, r7, #6
 8004c5c:	8812      	ldrh	r2, [r2, #0]
 8004c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1dba      	adds	r2, r7, #6
 8004c64:	8812      	ldrh	r2, [r2, #0]
 8004c66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d107      	bne.n	8004ca2 <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4951      	ldr	r1, [pc, #324]	; (8004de4 <HAL_SPI_Receive+0x238>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2240      	movs	r2, #64	; 0x40
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d007      	beq.n	8004cc0 <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2140      	movs	r1, #64	; 0x40
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d164      	bne.n	8004d92 <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cc8:	e02f      	b.n	8004d2a <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d115      	bne.n	8004d04 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	001a      	movs	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d02:	e012      	b.n	8004d2a <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d04:	f7fe fab2 	bl	800326c <HAL_GetTick>
 8004d08:	0002      	movs	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d802      	bhi.n	8004d1a <HAL_SPI_Receive+0x16e>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	d102      	bne.n	8004d20 <HAL_SPI_Receive+0x174>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 8004d20:	2317      	movs	r3, #23
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	2203      	movs	r2, #3
 8004d26:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d28:	e04d      	b.n	8004dc6 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ca      	bne.n	8004cca <HAL_SPI_Receive+0x11e>
 8004d34:	e032      	b.n	8004d9c <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d113      	bne.n	8004d6c <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d6a:	e012      	b.n	8004d92 <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d6c:	f7fe fa7e 	bl	800326c <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d802      	bhi.n	8004d82 <HAL_SPI_Receive+0x1d6>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	d102      	bne.n	8004d88 <HAL_SPI_Receive+0x1dc>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d104      	bne.n	8004d92 <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8004d88:	2317      	movs	r3, #23
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d90:	e019      	b.n	8004dc6 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1cc      	bne.n	8004d36 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 fa4c 	bl	8005240 <SPI_EndRxTransaction>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8004dba:	2317      	movs	r3, #23
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e000      	b.n	8004dc6 <HAL_SPI_Receive+0x21a>
  }

error :
 8004dc4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2251      	movs	r2, #81	; 0x51
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2250      	movs	r2, #80	; 0x50
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004dd6:	2317      	movs	r3, #23
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b007      	add	sp, #28
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	ffffbfff 	.word	0xffffbfff

08004de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08c      	sub	sp, #48	; 0x30
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	001a      	movs	r2, r3
 8004df6:	1cbb      	adds	r3, r7, #2
 8004df8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dfe:	232b      	movs	r3, #43	; 0x2b
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2250      	movs	r2, #80	; 0x50
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x2c>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e1a1      	b.n	8005158 <HAL_SPI_TransmitReceive+0x370>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2250      	movs	r2, #80	; 0x50
 8004e18:	2101      	movs	r1, #1
 8004e1a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e1c:	f7fe fa26 	bl	800326c <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e24:	2023      	movs	r0, #35	; 0x23
 8004e26:	183b      	adds	r3, r7, r0
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	2151      	movs	r1, #81	; 0x51
 8004e2c:	5c52      	ldrb	r2, [r2, r1]
 8004e2e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e36:	231a      	movs	r3, #26
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	1cba      	adds	r2, r7, #2
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d012      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x86>
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	2382      	movs	r3, #130	; 0x82
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d108      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x7c>
 8004e5a:	2323      	movs	r3, #35	; 0x23
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d004      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004e64:	232b      	movs	r3, #43	; 0x2b
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	2202      	movs	r2, #2
 8004e6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e6c:	e169      	b.n	8005142 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x9a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x9a>
 8004e7a:	1cbb      	adds	r3, r7, #2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8004e82:	232b      	movs	r3, #43	; 0x2b
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e8a:	e15a      	b.n	8005142 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2251      	movs	r2, #81	; 0x51
 8004e90:	5c9b      	ldrb	r3, [r3, r2]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d003      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2251      	movs	r2, #81	; 0x51
 8004e9c:	2105      	movs	r1, #5
 8004e9e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1cba      	adds	r2, r7, #2
 8004eb0:	8812      	ldrh	r2, [r2, #0]
 8004eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1cba      	adds	r2, r7, #2
 8004eb8:	8812      	ldrh	r2, [r2, #0]
 8004eba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1cba      	adds	r2, r7, #2
 8004ec6:	8812      	ldrh	r2, [r2, #0]
 8004ec8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1cba      	adds	r2, r7, #2
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2240      	movs	r2, #64	; 0x40
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d007      	beq.n	8004efc <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2140      	movs	r1, #64	; 0x40
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d000      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x122>
 8004f08:	e07a      	b.n	8005000 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x134>
 8004f12:	231a      	movs	r3, #26
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d166      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	881a      	ldrh	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	1c9a      	adds	r2, r3, #2
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f40:	e053      	b.n	8004fea <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d11b      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x1a0>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_SPI_TransmitReceive+0x1a0>
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d113      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d119      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x1e2>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d014      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	b292      	uxth	r2, r2
 8004fac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	1c9a      	adds	r2, r3, #2
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fca:	f7fe f94f 	bl	800326c <HAL_GetTick>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d807      	bhi.n	8004fea <HAL_SPI_TransmitReceive+0x202>
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	3301      	adds	r3, #1
 8004fde:	d004      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8004fe0:	232b      	movs	r3, #43	; 0x2b
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	701a      	strb	r2, [r3, #0]
        goto error;
 8004fe8:	e0ab      	b.n	8005142 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1a6      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x15a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1a1      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x15a>
 8004ffe:	e07f      	b.n	8005100 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x22c>
 8005008:	231a      	movs	r3, #26
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d000      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x22c>
 8005012:	e06b      	b.n	80050ec <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	7812      	ldrb	r2, [r2, #0]
 8005020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503a:	e057      	b.n	80050ec <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2202      	movs	r2, #2
 8005044:	4013      	ands	r3, r2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d11c      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x29c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d017      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x29c>
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d114      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	7812      	ldrb	r2, [r2, #0]
 8005066:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	2b01      	cmp	r3, #1
 8005090:	d119      	bne.n	80050c6 <HAL_SPI_TransmitReceive+0x2de>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d014      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050c2:	2301      	movs	r3, #1
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050c6:	f7fe f8d1 	bl	800326c <HAL_GetTick>
 80050ca:	0002      	movs	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d802      	bhi.n	80050dc <HAL_SPI_TransmitReceive+0x2f4>
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	3301      	adds	r3, #1
 80050da:	d102      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x2fa>
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80050e2:	232b      	movs	r3, #43	; 0x2b
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	2203      	movs	r2, #3
 80050e8:	701a      	strb	r2, [r3, #0]
        goto error;
 80050ea:	e02a      	b.n	8005142 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1a2      	bne.n	800503c <HAL_SPI_TransmitReceive+0x254>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d19d      	bne.n	800503c <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	0018      	movs	r0, r3
 8005108:	f000 f904 	bl	8005314 <SPI_EndRxTxTransaction>
 800510c:	1e03      	subs	r3, r0, #0
 800510e:	d007      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8005110:	232b      	movs	r3, #43	; 0x2b
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	2201      	movs	r2, #1
 8005116:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800511e:	e010      	b.n	8005142 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	e000      	b.n	8005142 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8005140:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2251      	movs	r2, #81	; 0x51
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2250      	movs	r2, #80	; 0x50
 800514e:	2100      	movs	r1, #0
 8005150:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005152:	232b      	movs	r3, #43	; 0x2b
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	781b      	ldrb	r3, [r3, #0]
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b00c      	add	sp, #48	; 0x30
 800515e:	bd80      	pop	{r7, pc}

08005160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	1dfb      	adds	r3, r7, #7
 800516e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005170:	e050      	b.n	8005214 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	d04d      	beq.n	8005214 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005178:	f7fe f878 	bl	800326c <HAL_GetTick>
 800517c:	0002      	movs	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d902      	bls.n	800518e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d142      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	21e0      	movs	r1, #224	; 0xe0
 800519a:	438a      	bics	r2, r1
 800519c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	2382      	movs	r3, #130	; 0x82
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d113      	bne.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d005      	beq.n	80051c2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	429a      	cmp	r2, r3
 80051c0:	d107      	bne.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2140      	movs	r1, #64	; 0x40
 80051ce:	438a      	bics	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	019b      	lsls	r3, r3, #6
 80051da:	429a      	cmp	r2, r3
 80051dc:	d110      	bne.n	8005200 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4914      	ldr	r1, [pc, #80]	; (800523c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80051ea:	400a      	ands	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2180      	movs	r1, #128	; 0x80
 80051fa:	0189      	lsls	r1, r1, #6
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2251      	movs	r2, #81	; 0x51
 8005204:	2101      	movs	r1, #1
 8005206:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2250      	movs	r2, #80	; 0x50
 800520c:	2100      	movs	r1, #0
 800520e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e00f      	b.n	8005234 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	425a      	negs	r2, r3
 8005224:	4153      	adcs	r3, r2
 8005226:	b2db      	uxtb	r3, r3
 8005228:	001a      	movs	r2, r3
 800522a:	1dfb      	adds	r3, r7, #7
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d19f      	bne.n	8005172 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b004      	add	sp, #16
 800523a:	bd80      	pop	{r7, pc}
 800523c:	ffffdfff 	.word	0xffffdfff

08005240 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	2382      	movs	r3, #130	; 0x82
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d113      	bne.n	8005280 <SPI_EndRxTransaction+0x40>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	429a      	cmp	r2, r3
 8005262:	d005      	beq.n	8005270 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	429a      	cmp	r2, r3
 800526e:	d107      	bne.n	8005280 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2140      	movs	r1, #64	; 0x40
 800527c:	438a      	bics	r2, r1
 800527e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	2382      	movs	r3, #130	; 0x82
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	429a      	cmp	r2, r3
 800528a:	d12b      	bne.n	80052e4 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	429a      	cmp	r2, r3
 8005296:	d012      	beq.n	80052be <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	0013      	movs	r3, r2
 80052a2:	2200      	movs	r2, #0
 80052a4:	2180      	movs	r1, #128	; 0x80
 80052a6:	f7ff ff5b 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 80052aa:	1e03      	subs	r3, r0, #0
 80052ac:	d02d      	beq.n	800530a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	2220      	movs	r2, #32
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e026      	b.n	800530c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	0013      	movs	r3, r2
 80052c8:	2200      	movs	r2, #0
 80052ca:	2101      	movs	r1, #1
 80052cc:	f7ff ff48 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 80052d0:	1e03      	subs	r3, r0, #0
 80052d2:	d01a      	beq.n	800530a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	2220      	movs	r2, #32
 80052da:	431a      	orrs	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e013      	b.n	800530c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	0013      	movs	r3, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	2101      	movs	r1, #1
 80052f2:	f7ff ff35 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 80052f6:	1e03      	subs	r3, r0, #0
 80052f8:	d007      	beq.n	800530a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	2220      	movs	r2, #32
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e000      	b.n	800530c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}

08005314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	2382      	movs	r3, #130	; 0x82
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	429a      	cmp	r2, r3
 800532a:	d112      	bne.n	8005352 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	0013      	movs	r3, r2
 8005336:	2200      	movs	r2, #0
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	f7ff ff11 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 800533e:	1e03      	subs	r3, r0, #0
 8005340:	d020      	beq.n	8005384 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	2220      	movs	r2, #32
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e019      	b.n	8005386 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2251      	movs	r2, #81	; 0x51
 8005356:	5c9b      	ldrb	r3, [r3, r2]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b05      	cmp	r3, #5
 800535c:	d112      	bne.n	8005384 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	0013      	movs	r3, r2
 8005368:	2200      	movs	r2, #0
 800536a:	2101      	movs	r1, #1
 800536c:	f7ff fef8 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 8005370:	1e03      	subs	r3, r0, #0
 8005372:	d007      	beq.n	8005384 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	2220      	movs	r2, #32
 800537a:	431a      	orrs	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e000      	b.n	8005386 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b004      	add	sp, #16
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e01e      	b.n	80053de <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2239      	movs	r2, #57	; 0x39
 80053a4:	5c9b      	ldrb	r3, [r3, r2]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2238      	movs	r2, #56	; 0x38
 80053b0:	2100      	movs	r1, #0
 80053b2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7fd fc6a 	bl	8002c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2239      	movs	r2, #57	; 0x39
 80053c0:	2102      	movs	r1, #2
 80053c2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	0019      	movs	r1, r3
 80053ce:	0010      	movs	r0, r2
 80053d0:	f000 fa40 	bl	8005854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2239      	movs	r2, #57	; 0x39
 80053d8:	2101      	movs	r1, #1
 80053da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	0018      	movs	r0, r3
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b002      	add	sp, #8
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2101      	movs	r1, #1
 80053fa:	430a      	orrs	r2, r1
 80053fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2207      	movs	r2, #7
 8005406:	4013      	ands	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b06      	cmp	r3, #6
 800540e:	d007      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2101      	movs	r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	0018      	movs	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2202      	movs	r2, #2
 800543a:	4013      	ands	r3, r2
 800543c:	2b02      	cmp	r3, #2
 800543e:	d124      	bne.n	800548a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2202      	movs	r2, #2
 8005448:	4013      	ands	r3, r2
 800544a:	2b02      	cmp	r3, #2
 800544c:	d11d      	bne.n	800548a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2203      	movs	r2, #3
 8005454:	4252      	negs	r2, r2
 8005456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2203      	movs	r2, #3
 8005466:	4013      	ands	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f000 f9d9 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005472:	e007      	b.n	8005484 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	0018      	movs	r0, r3
 8005478:	f000 f9cc 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	0018      	movs	r0, r3
 8005480:	f000 f9d8 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	2204      	movs	r2, #4
 8005492:	4013      	ands	r3, r2
 8005494:	2b04      	cmp	r3, #4
 8005496:	d125      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2204      	movs	r2, #4
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d11e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2205      	movs	r2, #5
 80054ac:	4252      	negs	r2, r2
 80054ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	23c0      	movs	r3, #192	; 0xc0
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4013      	ands	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 f9ac 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e007      	b.n	80054de <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f000 f99f 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 f9ab 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2208      	movs	r2, #8
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d124      	bne.n	800553c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2208      	movs	r2, #8
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d11d      	bne.n	800553c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2209      	movs	r2, #9
 8005506:	4252      	negs	r2, r2
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2204      	movs	r2, #4
 800550e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	2203      	movs	r2, #3
 8005518:	4013      	ands	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 f980 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005524:	e007      	b.n	8005536 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0018      	movs	r0, r3
 800552a:	f000 f973 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0018      	movs	r0, r3
 8005532:	f000 f97f 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2210      	movs	r2, #16
 8005544:	4013      	ands	r3, r2
 8005546:	2b10      	cmp	r3, #16
 8005548:	d125      	bne.n	8005596 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	2210      	movs	r2, #16
 8005552:	4013      	ands	r3, r2
 8005554:	2b10      	cmp	r3, #16
 8005556:	d11e      	bne.n	8005596 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2211      	movs	r2, #17
 800555e:	4252      	negs	r2, r2
 8005560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2208      	movs	r2, #8
 8005566:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	23c0      	movs	r3, #192	; 0xc0
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4013      	ands	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0018      	movs	r0, r3
 800557a:	f000 f953 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 800557e:	e007      	b.n	8005590 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	0018      	movs	r0, r3
 8005584:	f000 f946 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f952 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2201      	movs	r2, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10f      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d108      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2202      	movs	r2, #2
 80055b8:	4252      	negs	r2, r2
 80055ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	0018      	movs	r0, r3
 80055c0:	f000 f920 	bl	8005804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d10f      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	4013      	ands	r3, r2
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d108      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2241      	movs	r2, #65	; 0x41
 80055e6:	4252      	negs	r2, r2
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f000 f929 	bl	8005844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b002      	add	sp, #8
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2238      	movs	r2, #56	; 0x38
 800560a:	5c9b      	ldrb	r3, [r3, r2]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIM_ConfigClockSource+0x18>
 8005610:	2302      	movs	r3, #2
 8005612:	e0ab      	b.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2238      	movs	r2, #56	; 0x38
 8005618:	2101      	movs	r1, #1
 800561a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2239      	movs	r2, #57	; 0x39
 8005620:	2102      	movs	r1, #2
 8005622:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2277      	movs	r2, #119	; 0x77
 8005630:	4393      	bics	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4a4f      	ldr	r2, [pc, #316]	; (8005774 <HAL_TIM_ConfigClockSource+0x178>)
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d100      	bne.n	800564e <HAL_TIM_ConfigClockSource+0x52>
 800564c:	e06b      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x12a>
 800564e:	d80e      	bhi.n	800566e <HAL_TIM_ConfigClockSource+0x72>
 8005650:	2b10      	cmp	r3, #16
 8005652:	d100      	bne.n	8005656 <HAL_TIM_ConfigClockSource+0x5a>
 8005654:	e077      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x14a>
 8005656:	d803      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x64>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d100      	bne.n	800565e <HAL_TIM_ConfigClockSource+0x62>
 800565c:	e073      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800565e:	e07c      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005660:	2b20      	cmp	r3, #32
 8005662:	d100      	bne.n	8005666 <HAL_TIM_ConfigClockSource+0x6a>
 8005664:	e06f      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x14a>
 8005666:	2b30      	cmp	r3, #48	; 0x30
 8005668:	d100      	bne.n	800566c <HAL_TIM_ConfigClockSource+0x70>
 800566a:	e06c      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800566c:	e075      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800566e:	2b70      	cmp	r3, #112	; 0x70
 8005670:	d00e      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x94>
 8005672:	d804      	bhi.n	800567e <HAL_TIM_ConfigClockSource+0x82>
 8005674:	2b50      	cmp	r3, #80	; 0x50
 8005676:	d036      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0xea>
 8005678:	2b60      	cmp	r3, #96	; 0x60
 800567a:	d044      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800567c:	e06d      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	0152      	lsls	r2, r2, #5
 8005682:	4293      	cmp	r3, r2
 8005684:	d068      	beq.n	8005758 <HAL_TIM_ConfigClockSource+0x15c>
 8005686:	2280      	movs	r2, #128	; 0x80
 8005688:	0192      	lsls	r2, r2, #6
 800568a:	4293      	cmp	r3, r2
 800568c:	d017      	beq.n	80056be <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800568e:	e064      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6899      	ldr	r1, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f000 fa34 	bl	8005b0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2277      	movs	r2, #119	; 0x77
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
      break;
 80056bc:	e04d      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f000 fa1d 	bl	8005b0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	01c9      	lsls	r1, r1, #7
 80056e0:	430a      	orrs	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]
      break;
 80056e4:	e039      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	001a      	movs	r2, r3
 80056f4:	f000 f990 	bl	8005a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2150      	movs	r1, #80	; 0x50
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 f9ea 	bl	8005ad8 <TIM_ITRx_SetConfig>
      break;
 8005704:	e029      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6859      	ldr	r1, [r3, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	001a      	movs	r2, r3
 8005714:	f000 f9ae 	bl	8005a74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2160      	movs	r1, #96	; 0x60
 800571e:	0018      	movs	r0, r3
 8005720:	f000 f9da 	bl	8005ad8 <TIM_ITRx_SetConfig>
      break;
 8005724:	e019      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6859      	ldr	r1, [r3, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	001a      	movs	r2, r3
 8005734:	f000 f970 	bl	8005a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2140      	movs	r1, #64	; 0x40
 800573e:	0018      	movs	r0, r3
 8005740:	f000 f9ca 	bl	8005ad8 <TIM_ITRx_SetConfig>
      break;
 8005744:	e009      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	0019      	movs	r1, r3
 8005750:	0010      	movs	r0, r2
 8005752:	f000 f9c1 	bl	8005ad8 <TIM_ITRx_SetConfig>
      break;
 8005756:	e000      	b.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005758:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2239      	movs	r2, #57	; 0x39
 800575e:	2101      	movs	r1, #1
 8005760:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2238      	movs	r2, #56	; 0x38
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b004      	add	sp, #16
 8005772:	bd80      	pop	{r7, pc}
 8005774:	ffff00ff 	.word	0xffff00ff

08005778 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2238      	movs	r2, #56	; 0x38
 8005786:	5c9b      	ldrb	r3, [r3, r2]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIM_SlaveConfigSynchro+0x18>
 800578c:	2302      	movs	r3, #2
 800578e:	e032      	b.n	80057f6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2238      	movs	r2, #56	; 0x38
 8005794:	2101      	movs	r1, #1
 8005796:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2239      	movs	r2, #57	; 0x39
 800579c:	2102      	movs	r1, #2
 800579e:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0011      	movs	r1, r2
 80057a6:	0018      	movs	r0, r3
 80057a8:	f000 f8b2 	bl	8005910 <TIM_SlaveTimer_SetConfig>
 80057ac:	1e03      	subs	r3, r0, #0
 80057ae:	d009      	beq.n	80057c4 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2239      	movs	r2, #57	; 0x39
 80057b4:	2101      	movs	r1, #1
 80057b6:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2238      	movs	r2, #56	; 0x38
 80057bc:	2100      	movs	r1, #0
 80057be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e018      	b.n	80057f6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2140      	movs	r1, #64	; 0x40
 80057d0:	438a      	bics	r2, r1
 80057d2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4908      	ldr	r1, [pc, #32]	; (8005800 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2239      	movs	r2, #57	; 0x39
 80057e8:	2101      	movs	r1, #1
 80057ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2238      	movs	r2, #56	; 0x38
 80057f0:	2100      	movs	r1, #0
 80057f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	0018      	movs	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b002      	add	sp, #8
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	ffffbfff 	.word	0xffffbfff

08005804 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b002      	add	sp, #8
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	46bd      	mov	sp, r7
 8005840:	b002      	add	sp, #8
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584c:	46c0      	nop			; (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}

08005854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	05db      	lsls	r3, r3, #23
 800586a:	429a      	cmp	r2, r3
 800586c:	d00b      	beq.n	8005886 <TIM_Base_SetConfig+0x32>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <TIM_Base_SetConfig+0xac>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <TIM_Base_SetConfig+0x32>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a22      	ldr	r2, [pc, #136]	; (8005904 <TIM_Base_SetConfig+0xb0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_Base_SetConfig+0x32>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a21      	ldr	r2, [pc, #132]	; (8005908 <TIM_Base_SetConfig+0xb4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d108      	bne.n	8005898 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2270      	movs	r2, #112	; 0x70
 800588a:	4393      	bics	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	05db      	lsls	r3, r3, #23
 800589e:	429a      	cmp	r2, r3
 80058a0:	d00b      	beq.n	80058ba <TIM_Base_SetConfig+0x66>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a16      	ldr	r2, [pc, #88]	; (8005900 <TIM_Base_SetConfig+0xac>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_Base_SetConfig+0x66>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a15      	ldr	r2, [pc, #84]	; (8005904 <TIM_Base_SetConfig+0xb0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_Base_SetConfig+0x66>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a14      	ldr	r2, [pc, #80]	; (8005908 <TIM_Base_SetConfig+0xb4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d108      	bne.n	80058cc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a13      	ldr	r2, [pc, #76]	; (800590c <TIM_Base_SetConfig+0xb8>)
 80058be:	4013      	ands	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2280      	movs	r2, #128	; 0x80
 80058d0:	4393      	bics	r3, r2
 80058d2:	001a      	movs	r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	615a      	str	r2, [r3, #20]
}
 80058f8:	46c0      	nop			; (mov r8, r8)
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b004      	add	sp, #16
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40000400 	.word	0x40000400
 8005904:	40010800 	.word	0x40010800
 8005908:	40011400 	.word	0x40011400
 800590c:	fffffcff 	.word	0xfffffcff

08005910 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2270      	movs	r2, #112	; 0x70
 8005926:	4393      	bics	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2207      	movs	r2, #7
 8005938:	4393      	bics	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b30      	cmp	r3, #48	; 0x30
 8005954:	d05a      	beq.n	8005a0c <TIM_SlaveTimer_SetConfig+0xfc>
 8005956:	d806      	bhi.n	8005966 <TIM_SlaveTimer_SetConfig+0x56>
 8005958:	2b10      	cmp	r3, #16
 800595a:	d057      	beq.n	8005a0c <TIM_SlaveTimer_SetConfig+0xfc>
 800595c:	2b20      	cmp	r3, #32
 800595e:	d055      	beq.n	8005a0c <TIM_SlaveTimer_SetConfig+0xfc>
 8005960:	2b00      	cmp	r3, #0
 8005962:	d053      	beq.n	8005a0c <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005964:	e053      	b.n	8005a0e <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8005966:	2b50      	cmp	r3, #80	; 0x50
 8005968:	d03c      	beq.n	80059e4 <TIM_SlaveTimer_SetConfig+0xd4>
 800596a:	d802      	bhi.n	8005972 <TIM_SlaveTimer_SetConfig+0x62>
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d010      	beq.n	8005992 <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8005970:	e04d      	b.n	8005a0e <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8005972:	2b60      	cmp	r3, #96	; 0x60
 8005974:	d040      	beq.n	80059f8 <TIM_SlaveTimer_SetConfig+0xe8>
 8005976:	2b70      	cmp	r3, #112	; 0x70
 8005978:	d000      	beq.n	800597c <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 800597a:	e048      	b.n	8005a0e <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68d9      	ldr	r1, [r3, #12]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f000 f8be 	bl	8005b0c <TIM_ETR_SetConfig>
      break;
 8005990:	e03d      	b.n	8005a0e <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b05      	cmp	r3, #5
 8005998:	d101      	bne.n	800599e <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e038      	b.n	8005a10 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2101      	movs	r1, #1
 80059b2:	438a      	bics	r2, r1
 80059b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	22f0      	movs	r2, #240	; 0xf0
 80059c2:	4393      	bics	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	621a      	str	r2, [r3, #32]
      break;
 80059e2:	e014      	b.n	8005a0e <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6899      	ldr	r1, [r3, #8]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	001a      	movs	r2, r3
 80059f2:	f000 f811 	bl	8005a18 <TIM_TI1_ConfigInputStage>
      break;
 80059f6:	e00a      	b.n	8005a0e <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6899      	ldr	r1, [r3, #8]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	001a      	movs	r2, r3
 8005a06:	f000 f835 	bl	8005a74 <TIM_TI2_ConfigInputStage>
      break;
 8005a0a:	e000      	b.n	8005a0e <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8005a0c:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b006      	add	sp, #24
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4393      	bics	r3, r2
 8005a32:	001a      	movs	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	22f0      	movs	r2, #240	; 0xf0
 8005a42:	4393      	bics	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	220a      	movs	r2, #10
 8005a54:	4393      	bics	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b006      	add	sp, #24
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	2210      	movs	r2, #16
 8005a86:	4393      	bics	r3, r2
 8005a88:	001a      	movs	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <TIM_TI2_ConfigInputStage+0x60>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	22a0      	movs	r2, #160	; 0xa0
 8005ab0:	4393      	bics	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b006      	add	sp, #24
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	ffff0fff 	.word	0xffff0fff

08005ad8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2270      	movs	r2, #112	; 0x70
 8005aec:	4393      	bics	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	2207      	movs	r2, #7
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	609a      	str	r2, [r3, #8]
}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b004      	add	sp, #16
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <TIM_ETR_SetConfig+0x3c>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	021a      	lsls	r2, r3, #8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b006      	add	sp, #24
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	ffff00ff 	.word	0xffff00ff

08005b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2238      	movs	r2, #56	; 0x38
 8005b5a:	5c9b      	ldrb	r3, [r3, r2]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e032      	b.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2238      	movs	r2, #56	; 0x38
 8005b68:	2101      	movs	r1, #1
 8005b6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2239      	movs	r2, #57	; 0x39
 8005b70:	2102      	movs	r1, #2
 8005b72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2270      	movs	r2, #112	; 0x70
 8005b88:	4393      	bics	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2280      	movs	r2, #128	; 0x80
 8005b9a:	4393      	bics	r3, r2
 8005b9c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2239      	movs	r2, #57	; 0x39
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2238      	movs	r2, #56	; 0x38
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e044      	b.n	8005c70 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2270      	movs	r2, #112	; 0x70
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f7fd f85f 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2224      	movs	r2, #36	; 0x24
 8005c02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2101      	movs	r1, #1
 8005c10:	438a      	bics	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 f95e 	bl	8005ed8 <UART_SetConfig>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e024      	b.n	8005c70 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 fc85 	bl	8006540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	490d      	ldr	r1, [pc, #52]	; (8005c78 <HAL_UART_Init+0xa4>)
 8005c42:	400a      	ands	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	212a      	movs	r1, #42	; 0x2a
 8005c52:	438a      	bics	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2101      	movs	r1, #1
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 fd1d 	bl	80066a8 <UART_CheckIdleState>
 8005c6e:	0003      	movs	r3, r0
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b002      	add	sp, #8
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	ffffb7ff 	.word	0xffffb7ff

08005c7c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	1dbb      	adds	r3, r7, #6
 8005c88:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d158      	bne.n	8005d44 <HAL_UART_Transmit_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_UART_Transmit_IT+0x24>
 8005c98:	1dbb      	adds	r3, r7, #6
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e050      	b.n	8005d46 <HAL_UART_Transmit_IT+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	015b      	lsls	r3, r3, #5
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d109      	bne.n	8005cc4 <HAL_UART_Transmit_IT+0x48>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d001      	beq.n	8005cc4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e040      	b.n	8005d46 <HAL_UART_Transmit_IT+0xca>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2270      	movs	r2, #112	; 0x70
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Transmit_IT+0x56>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e039      	b.n	8005d46 <HAL_UART_Transmit_IT+0xca>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2270      	movs	r2, #112	; 0x70
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1dba      	adds	r2, r7, #6
 8005ce4:	2150      	movs	r1, #80	; 0x50
 8005ce6:	8812      	ldrh	r2, [r2, #0]
 8005ce8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1dba      	adds	r2, r7, #6
 8005cee:	2152      	movs	r1, #82	; 0x52
 8005cf0:	8812      	ldrh	r2, [r2, #0]
 8005cf2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2221      	movs	r2, #33	; 0x21
 8005d04:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	015b      	lsls	r3, r3, #5
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d107      	bne.n	8005d22 <HAL_UART_Transmit_IT+0xa6>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <HAL_UART_Transmit_IT+0xa6>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4a0c      	ldr	r2, [pc, #48]	; (8005d50 <HAL_UART_Transmit_IT+0xd4>)
 8005d1e:	665a      	str	r2, [r3, #100]	; 0x64
 8005d20:	e002      	b.n	8005d28 <HAL_UART_Transmit_IT+0xac>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4a0b      	ldr	r2, [pc, #44]	; (8005d54 <HAL_UART_Transmit_IT+0xd8>)
 8005d26:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2270      	movs	r2, #112	; 0x70
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <HAL_UART_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b004      	add	sp, #16
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	08006837 	.word	0x08006837
 8005d54:	080067c9 	.word	0x080067c9

08005d58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	1dbb      	adds	r3, r7, #6
 8005d64:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d000      	beq.n	8005d70 <HAL_UART_Receive_IT+0x18>
 8005d6e:	e09f      	b.n	8005eb0 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_UART_Receive_IT+0x26>
 8005d76:	1dbb      	adds	r3, r7, #6
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e097      	b.n	8005eb2 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	015b      	lsls	r3, r3, #5
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d109      	bne.n	8005da2 <HAL_UART_Receive_IT+0x4a>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d105      	bne.n	8005da2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d001      	beq.n	8005da2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e087      	b.n	8005eb2 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2270      	movs	r2, #112	; 0x70
 8005da6:	5c9b      	ldrb	r3, [r3, r2]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_UART_Receive_IT+0x58>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e080      	b.n	8005eb2 <HAL_UART_Receive_IT+0x15a>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2270      	movs	r2, #112	; 0x70
 8005db4:	2101      	movs	r1, #1
 8005db6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1dba      	adds	r2, r7, #6
 8005dc2:	2158      	movs	r1, #88	; 0x58
 8005dc4:	8812      	ldrh	r2, [r2, #0]
 8005dc6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1dba      	adds	r2, r7, #6
 8005dcc:	215a      	movs	r1, #90	; 0x5a
 8005dce:	8812      	ldrh	r2, [r2, #0]
 8005dd0:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	015b      	lsls	r3, r3, #5
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d10d      	bne.n	8005e00 <HAL_UART_Receive_IT+0xa8>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <HAL_UART_Receive_IT+0x9e>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	225c      	movs	r2, #92	; 0x5c
 8005df0:	4932      	ldr	r1, [pc, #200]	; (8005ebc <HAL_UART_Receive_IT+0x164>)
 8005df2:	5299      	strh	r1, [r3, r2]
 8005df4:	e02e      	b.n	8005e54 <HAL_UART_Receive_IT+0xfc>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	225c      	movs	r2, #92	; 0x5c
 8005dfa:	21ff      	movs	r1, #255	; 0xff
 8005dfc:	5299      	strh	r1, [r3, r2]
 8005dfe:	e029      	b.n	8005e54 <HAL_UART_Receive_IT+0xfc>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10d      	bne.n	8005e24 <HAL_UART_Receive_IT+0xcc>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <HAL_UART_Receive_IT+0xc2>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	225c      	movs	r2, #92	; 0x5c
 8005e14:	21ff      	movs	r1, #255	; 0xff
 8005e16:	5299      	strh	r1, [r3, r2]
 8005e18:	e01c      	b.n	8005e54 <HAL_UART_Receive_IT+0xfc>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	225c      	movs	r2, #92	; 0x5c
 8005e1e:	217f      	movs	r1, #127	; 0x7f
 8005e20:	5299      	strh	r1, [r3, r2]
 8005e22:	e017      	b.n	8005e54 <HAL_UART_Receive_IT+0xfc>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	2380      	movs	r3, #128	; 0x80
 8005e2a:	055b      	lsls	r3, r3, #21
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d10d      	bne.n	8005e4c <HAL_UART_Receive_IT+0xf4>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <HAL_UART_Receive_IT+0xea>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	225c      	movs	r2, #92	; 0x5c
 8005e3c:	217f      	movs	r1, #127	; 0x7f
 8005e3e:	5299      	strh	r1, [r3, r2]
 8005e40:	e008      	b.n	8005e54 <HAL_UART_Receive_IT+0xfc>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	225c      	movs	r2, #92	; 0x5c
 8005e46:	213f      	movs	r1, #63	; 0x3f
 8005e48:	5299      	strh	r1, [r3, r2]
 8005e4a:	e003      	b.n	8005e54 <HAL_UART_Receive_IT+0xfc>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	225c      	movs	r2, #92	; 0x5c
 8005e50:	2100      	movs	r1, #0
 8005e52:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2222      	movs	r2, #34	; 0x22
 8005e5e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	015b      	lsls	r3, r3, #5
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d107      	bne.n	8005e8c <HAL_UART_Receive_IT+0x134>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a0e      	ldr	r2, [pc, #56]	; (8005ec0 <HAL_UART_Receive_IT+0x168>)
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60
 8005e8a:	e002      	b.n	8005e92 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ec4 <HAL_UART_Receive_IT+0x16c>)
 8005e90:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2270      	movs	r2, #112	; 0x70
 8005e96:	2100      	movs	r1, #0
 8005e98:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2190      	movs	r1, #144	; 0x90
 8005ea6:	0049      	lsls	r1, r1, #1
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	000001ff 	.word	0x000001ff
 8005ec0:	0800696d 	.word	0x0800696d
 8005ec4:	080068b1 	.word	0x080068b1

08005ec8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b002      	add	sp, #8
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed8:	b5b0      	push	{r4, r5, r7, lr}
 8005eda:	b08e      	sub	sp, #56	; 0x38
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005ee0:	231b      	movs	r3, #27
 8005ee2:	2218      	movs	r2, #24
 8005ee4:	4694      	mov	ip, r2
 8005ee6:	44bc      	add	ip, r7
 8005ee8:	4463      	add	r3, ip
 8005eea:	2210      	movs	r2, #16
 8005eec:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef2:	2313      	movs	r3, #19
 8005ef4:	2218      	movs	r2, #24
 8005ef6:	4694      	mov	ip, r2
 8005ef8:	44bc      	add	ip, r7
 8005efa:	4463      	add	r3, ip
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4aca      	ldr	r2, [pc, #808]	; (800624c <UART_SetConfig+0x374>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4ac5      	ldr	r2, [pc, #788]	; (8006250 <UART_SetConfig+0x378>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4abf      	ldr	r2, [pc, #764]	; (8006254 <UART_SetConfig+0x37c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f60:	4313      	orrs	r3, r2
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	4abb      	ldr	r2, [pc, #748]	; (8006258 <UART_SetConfig+0x380>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	0019      	movs	r1, r3
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f76:	430a      	orrs	r2, r1
 8005f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4ab7      	ldr	r2, [pc, #732]	; (800625c <UART_SetConfig+0x384>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d134      	bne.n	8005fee <UART_SetConfig+0x116>
 8005f84:	4bb6      	ldr	r3, [pc, #728]	; (8006260 <UART_SetConfig+0x388>)
 8005f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f88:	2203      	movs	r2, #3
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d015      	beq.n	8005fbc <UART_SetConfig+0xe4>
 8005f90:	d304      	bcc.n	8005f9c <UART_SetConfig+0xc4>
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d00a      	beq.n	8005fac <UART_SetConfig+0xd4>
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d018      	beq.n	8005fcc <UART_SetConfig+0xf4>
 8005f9a:	e01f      	b.n	8005fdc <UART_SetConfig+0x104>
 8005f9c:	231b      	movs	r3, #27
 8005f9e:	2218      	movs	r2, #24
 8005fa0:	4694      	mov	ip, r2
 8005fa2:	44bc      	add	ip, r7
 8005fa4:	4463      	add	r3, ip
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e0c5      	b.n	8006138 <UART_SetConfig+0x260>
 8005fac:	231b      	movs	r3, #27
 8005fae:	2218      	movs	r2, #24
 8005fb0:	4694      	mov	ip, r2
 8005fb2:	44bc      	add	ip, r7
 8005fb4:	4463      	add	r3, ip
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e0bd      	b.n	8006138 <UART_SetConfig+0x260>
 8005fbc:	231b      	movs	r3, #27
 8005fbe:	2218      	movs	r2, #24
 8005fc0:	4694      	mov	ip, r2
 8005fc2:	44bc      	add	ip, r7
 8005fc4:	4463      	add	r3, ip
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e0b5      	b.n	8006138 <UART_SetConfig+0x260>
 8005fcc:	231b      	movs	r3, #27
 8005fce:	2218      	movs	r2, #24
 8005fd0:	4694      	mov	ip, r2
 8005fd2:	44bc      	add	ip, r7
 8005fd4:	4463      	add	r3, ip
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e0ad      	b.n	8006138 <UART_SetConfig+0x260>
 8005fdc:	231b      	movs	r3, #27
 8005fde:	2218      	movs	r2, #24
 8005fe0:	4694      	mov	ip, r2
 8005fe2:	44bc      	add	ip, r7
 8005fe4:	4463      	add	r3, ip
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	e0a4      	b.n	8006138 <UART_SetConfig+0x260>
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a9c      	ldr	r2, [pc, #624]	; (8006264 <UART_SetConfig+0x38c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d137      	bne.n	8006068 <UART_SetConfig+0x190>
 8005ff8:	4b99      	ldr	r3, [pc, #612]	; (8006260 <UART_SetConfig+0x388>)
 8005ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffc:	220c      	movs	r2, #12
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b04      	cmp	r3, #4
 8006002:	d018      	beq.n	8006036 <UART_SetConfig+0x15e>
 8006004:	d802      	bhi.n	800600c <UART_SetConfig+0x134>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <UART_SetConfig+0x13e>
 800600a:	e024      	b.n	8006056 <UART_SetConfig+0x17e>
 800600c:	2b08      	cmp	r3, #8
 800600e:	d00a      	beq.n	8006026 <UART_SetConfig+0x14e>
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d018      	beq.n	8006046 <UART_SetConfig+0x16e>
 8006014:	e01f      	b.n	8006056 <UART_SetConfig+0x17e>
 8006016:	231b      	movs	r3, #27
 8006018:	2218      	movs	r2, #24
 800601a:	4694      	mov	ip, r2
 800601c:	44bc      	add	ip, r7
 800601e:	4463      	add	r3, ip
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e088      	b.n	8006138 <UART_SetConfig+0x260>
 8006026:	231b      	movs	r3, #27
 8006028:	2218      	movs	r2, #24
 800602a:	4694      	mov	ip, r2
 800602c:	44bc      	add	ip, r7
 800602e:	4463      	add	r3, ip
 8006030:	2202      	movs	r2, #2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e080      	b.n	8006138 <UART_SetConfig+0x260>
 8006036:	231b      	movs	r3, #27
 8006038:	2218      	movs	r2, #24
 800603a:	4694      	mov	ip, r2
 800603c:	44bc      	add	ip, r7
 800603e:	4463      	add	r3, ip
 8006040:	2204      	movs	r2, #4
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e078      	b.n	8006138 <UART_SetConfig+0x260>
 8006046:	231b      	movs	r3, #27
 8006048:	2218      	movs	r2, #24
 800604a:	4694      	mov	ip, r2
 800604c:	44bc      	add	ip, r7
 800604e:	4463      	add	r3, ip
 8006050:	2208      	movs	r2, #8
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e070      	b.n	8006138 <UART_SetConfig+0x260>
 8006056:	231b      	movs	r3, #27
 8006058:	2218      	movs	r2, #24
 800605a:	4694      	mov	ip, r2
 800605c:	44bc      	add	ip, r7
 800605e:	4463      	add	r3, ip
 8006060:	2210      	movs	r2, #16
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	46c0      	nop			; (mov r8, r8)
 8006066:	e067      	b.n	8006138 <UART_SetConfig+0x260>
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a7e      	ldr	r2, [pc, #504]	; (8006268 <UART_SetConfig+0x390>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d107      	bne.n	8006082 <UART_SetConfig+0x1aa>
 8006072:	231b      	movs	r3, #27
 8006074:	2218      	movs	r2, #24
 8006076:	4694      	mov	ip, r2
 8006078:	44bc      	add	ip, r7
 800607a:	4463      	add	r3, ip
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e05a      	b.n	8006138 <UART_SetConfig+0x260>
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a79      	ldr	r2, [pc, #484]	; (800626c <UART_SetConfig+0x394>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d107      	bne.n	800609c <UART_SetConfig+0x1c4>
 800608c:	231b      	movs	r3, #27
 800608e:	2218      	movs	r2, #24
 8006090:	4694      	mov	ip, r2
 8006092:	44bc      	add	ip, r7
 8006094:	4463      	add	r3, ip
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e04d      	b.n	8006138 <UART_SetConfig+0x260>
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a6c      	ldr	r2, [pc, #432]	; (8006254 <UART_SetConfig+0x37c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d141      	bne.n	800612a <UART_SetConfig+0x252>
 80060a6:	4b6e      	ldr	r3, [pc, #440]	; (8006260 <UART_SetConfig+0x388>)
 80060a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060aa:	23c0      	movs	r3, #192	; 0xc0
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	4013      	ands	r3, r2
 80060b0:	2280      	movs	r2, #128	; 0x80
 80060b2:	00d2      	lsls	r2, r2, #3
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01f      	beq.n	80060f8 <UART_SetConfig+0x220>
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	00d2      	lsls	r2, r2, #3
 80060bc:	4293      	cmp	r3, r2
 80060be:	d802      	bhi.n	80060c6 <UART_SetConfig+0x1ee>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <UART_SetConfig+0x200>
 80060c4:	e028      	b.n	8006118 <UART_SetConfig+0x240>
 80060c6:	2280      	movs	r2, #128	; 0x80
 80060c8:	0112      	lsls	r2, r2, #4
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00c      	beq.n	80060e8 <UART_SetConfig+0x210>
 80060ce:	22c0      	movs	r2, #192	; 0xc0
 80060d0:	0112      	lsls	r2, r2, #4
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d018      	beq.n	8006108 <UART_SetConfig+0x230>
 80060d6:	e01f      	b.n	8006118 <UART_SetConfig+0x240>
 80060d8:	231b      	movs	r3, #27
 80060da:	2218      	movs	r2, #24
 80060dc:	4694      	mov	ip, r2
 80060de:	44bc      	add	ip, r7
 80060e0:	4463      	add	r3, ip
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e027      	b.n	8006138 <UART_SetConfig+0x260>
 80060e8:	231b      	movs	r3, #27
 80060ea:	2218      	movs	r2, #24
 80060ec:	4694      	mov	ip, r2
 80060ee:	44bc      	add	ip, r7
 80060f0:	4463      	add	r3, ip
 80060f2:	2202      	movs	r2, #2
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e01f      	b.n	8006138 <UART_SetConfig+0x260>
 80060f8:	231b      	movs	r3, #27
 80060fa:	2218      	movs	r2, #24
 80060fc:	4694      	mov	ip, r2
 80060fe:	44bc      	add	ip, r7
 8006100:	4463      	add	r3, ip
 8006102:	2204      	movs	r2, #4
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e017      	b.n	8006138 <UART_SetConfig+0x260>
 8006108:	231b      	movs	r3, #27
 800610a:	2218      	movs	r2, #24
 800610c:	4694      	mov	ip, r2
 800610e:	44bc      	add	ip, r7
 8006110:	4463      	add	r3, ip
 8006112:	2208      	movs	r2, #8
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e00f      	b.n	8006138 <UART_SetConfig+0x260>
 8006118:	231b      	movs	r3, #27
 800611a:	2218      	movs	r2, #24
 800611c:	4694      	mov	ip, r2
 800611e:	44bc      	add	ip, r7
 8006120:	4463      	add	r3, ip
 8006122:	2210      	movs	r2, #16
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	e006      	b.n	8006138 <UART_SetConfig+0x260>
 800612a:	231b      	movs	r3, #27
 800612c:	2218      	movs	r2, #24
 800612e:	4694      	mov	ip, r2
 8006130:	44bc      	add	ip, r7
 8006132:	4463      	add	r3, ip
 8006134:	2210      	movs	r2, #16
 8006136:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a45      	ldr	r2, [pc, #276]	; (8006254 <UART_SetConfig+0x37c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d000      	beq.n	8006144 <UART_SetConfig+0x26c>
 8006142:	e09d      	b.n	8006280 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006144:	231b      	movs	r3, #27
 8006146:	2218      	movs	r2, #24
 8006148:	4694      	mov	ip, r2
 800614a:	44bc      	add	ip, r7
 800614c:	4463      	add	r3, ip
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d00d      	beq.n	8006170 <UART_SetConfig+0x298>
 8006154:	dc02      	bgt.n	800615c <UART_SetConfig+0x284>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <UART_SetConfig+0x28e>
 800615a:	e01d      	b.n	8006198 <UART_SetConfig+0x2c0>
 800615c:	2b04      	cmp	r3, #4
 800615e:	d012      	beq.n	8006186 <UART_SetConfig+0x2ae>
 8006160:	2b08      	cmp	r3, #8
 8006162:	d015      	beq.n	8006190 <UART_SetConfig+0x2b8>
 8006164:	e018      	b.n	8006198 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006166:	f7fe f9c9 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 800616a:	0003      	movs	r3, r0
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800616e:	e01b      	b.n	80061a8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006170:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <UART_SetConfig+0x388>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2210      	movs	r2, #16
 8006176:	4013      	ands	r3, r2
 8006178:	d002      	beq.n	8006180 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800617a:	4b3d      	ldr	r3, [pc, #244]	; (8006270 <UART_SetConfig+0x398>)
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800617e:	e013      	b.n	80061a8 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006180:	4b3c      	ldr	r3, [pc, #240]	; (8006274 <UART_SetConfig+0x39c>)
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006184:	e010      	b.n	80061a8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006186:	f7fe f92b 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800618a:	0003      	movs	r3, r0
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800618e:	e00b      	b.n	80061a8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006196:	e007      	b.n	80061a8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006198:	2313      	movs	r3, #19
 800619a:	2218      	movs	r2, #24
 800619c:	4694      	mov	ip, r2
 800619e:	44bc      	add	ip, r7
 80061a0:	4463      	add	r3, ip
 80061a2:	2201      	movs	r2, #1
 80061a4:	701a      	strb	r2, [r3, #0]
        break;
 80061a6:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d100      	bne.n	80061b0 <UART_SetConfig+0x2d8>
 80061ae:	e1a6      	b.n	80064fe <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	0013      	movs	r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	189b      	adds	r3, r3, r2
 80061ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061bc:	429a      	cmp	r2, r3
 80061be:	d305      	bcc.n	80061cc <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d907      	bls.n	80061dc <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80061cc:	2313      	movs	r3, #19
 80061ce:	2218      	movs	r2, #24
 80061d0:	4694      	mov	ip, r2
 80061d2:	44bc      	add	ip, r7
 80061d4:	4463      	add	r3, ip
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e190      	b.n	80064fe <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	6939      	ldr	r1, [r7, #16]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	000b      	movs	r3, r1
 80061ea:	0e1b      	lsrs	r3, r3, #24
 80061ec:	0010      	movs	r0, r2
 80061ee:	0205      	lsls	r5, r0, #8
 80061f0:	431d      	orrs	r5, r3
 80061f2:	000b      	movs	r3, r1
 80061f4:	021c      	lsls	r4, r3, #8
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	68b8      	ldr	r0, [r7, #8]
 8006204:	68f9      	ldr	r1, [r7, #12]
 8006206:	1900      	adds	r0, r0, r4
 8006208:	4169      	adcs	r1, r5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	2300      	movs	r3, #0
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f7fa f87a 	bl	8000310 <__aeabi_uldivmod>
 800621c:	0003      	movs	r3, r0
 800621e:	000c      	movs	r4, r1
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	4a14      	ldr	r2, [pc, #80]	; (8006278 <UART_SetConfig+0x3a0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d908      	bls.n	800623c <UART_SetConfig+0x364>
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	4a13      	ldr	r2, [pc, #76]	; (800627c <UART_SetConfig+0x3a4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d804      	bhi.n	800623c <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006238:	60da      	str	r2, [r3, #12]
 800623a:	e160      	b.n	80064fe <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 800623c:	2313      	movs	r3, #19
 800623e:	2218      	movs	r2, #24
 8006240:	4694      	mov	ip, r2
 8006242:	44bc      	add	ip, r7
 8006244:	4463      	add	r3, ip
 8006246:	2201      	movs	r2, #1
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e158      	b.n	80064fe <UART_SetConfig+0x626>
 800624c:	efff69f3 	.word	0xefff69f3
 8006250:	ffffcfff 	.word	0xffffcfff
 8006254:	40004800 	.word	0x40004800
 8006258:	fffff4ff 	.word	0xfffff4ff
 800625c:	40013800 	.word	0x40013800
 8006260:	40021000 	.word	0x40021000
 8006264:	40004400 	.word	0x40004400
 8006268:	40004c00 	.word	0x40004c00
 800626c:	40005000 	.word	0x40005000
 8006270:	003d0900 	.word	0x003d0900
 8006274:	00f42400 	.word	0x00f42400
 8006278:	000002ff 	.word	0x000002ff
 800627c:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	429a      	cmp	r2, r3
 800628a:	d000      	beq.n	800628e <UART_SetConfig+0x3b6>
 800628c:	e0a9      	b.n	80063e2 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800628e:	231b      	movs	r3, #27
 8006290:	2218      	movs	r2, #24
 8006292:	4694      	mov	ip, r2
 8006294:	44bc      	add	ip, r7
 8006296:	4463      	add	r3, ip
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b08      	cmp	r3, #8
 800629c:	d86d      	bhi.n	800637a <UART_SetConfig+0x4a2>
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	4b9f      	ldr	r3, [pc, #636]	; (8006520 <UART_SetConfig+0x648>)
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80062a8:	f7fe f928 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 80062ac:	0003      	movs	r3, r0
 80062ae:	005a      	lsls	r2, r3, #1
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	18d2      	adds	r2, r2, r3
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	0019      	movs	r1, r3
 80062be:	0010      	movs	r0, r2
 80062c0:	f7f9 ff22 	bl	8000108 <__udivsi3>
 80062c4:	0003      	movs	r3, r0
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ca:	e05e      	b.n	800638a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80062cc:	f7fe f92c 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 80062d0:	0003      	movs	r3, r0
 80062d2:	005a      	lsls	r2, r3, #1
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	18d2      	adds	r2, r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	0019      	movs	r1, r3
 80062e2:	0010      	movs	r0, r2
 80062e4:	f7f9 ff10 	bl	8000108 <__udivsi3>
 80062e8:	0003      	movs	r3, r0
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ee:	e04c      	b.n	800638a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f0:	4b8c      	ldr	r3, [pc, #560]	; (8006524 <UART_SetConfig+0x64c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2210      	movs	r2, #16
 80062f6:	4013      	ands	r3, r2
 80062f8:	d00e      	beq.n	8006318 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	4a89      	ldr	r2, [pc, #548]	; (8006528 <UART_SetConfig+0x650>)
 8006302:	189a      	adds	r2, r3, r2
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	0019      	movs	r1, r3
 800630a:	0010      	movs	r0, r2
 800630c:	f7f9 fefc 	bl	8000108 <__udivsi3>
 8006310:	0003      	movs	r3, r0
 8006312:	b29b      	uxth	r3, r3
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8006316:	e038      	b.n	800638a <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	4a83      	ldr	r2, [pc, #524]	; (800652c <UART_SetConfig+0x654>)
 8006320:	189a      	adds	r2, r3, r2
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	0019      	movs	r1, r3
 8006328:	0010      	movs	r0, r2
 800632a:	f7f9 feed 	bl	8000108 <__udivsi3>
 800632e:	0003      	movs	r3, r0
 8006330:	b29b      	uxth	r3, r3
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006334:	e029      	b.n	800638a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006336:	f7fe f853 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800633a:	0003      	movs	r3, r0
 800633c:	005a      	lsls	r2, r3, #1
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	18d2      	adds	r2, r2, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	0019      	movs	r1, r3
 800634c:	0010      	movs	r0, r2
 800634e:	f7f9 fedb 	bl	8000108 <__udivsi3>
 8006352:	0003      	movs	r3, r0
 8006354:	b29b      	uxth	r3, r3
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006358:	e017      	b.n	800638a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	2280      	movs	r2, #128	; 0x80
 8006362:	0252      	lsls	r2, r2, #9
 8006364:	189a      	adds	r2, r3, r2
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	0019      	movs	r1, r3
 800636c:	0010      	movs	r0, r2
 800636e:	f7f9 fecb 	bl	8000108 <__udivsi3>
 8006372:	0003      	movs	r3, r0
 8006374:	b29b      	uxth	r3, r3
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006378:	e007      	b.n	800638a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800637a:	2313      	movs	r3, #19
 800637c:	2218      	movs	r2, #24
 800637e:	4694      	mov	ip, r2
 8006380:	44bc      	add	ip, r7
 8006382:	4463      	add	r3, ip
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
        break;
 8006388:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	2b0f      	cmp	r3, #15
 800638e:	d920      	bls.n	80063d2 <UART_SetConfig+0x4fa>
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	4a67      	ldr	r2, [pc, #412]	; (8006530 <UART_SetConfig+0x658>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d81c      	bhi.n	80063d2 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	b29a      	uxth	r2, r3
 800639c:	200a      	movs	r0, #10
 800639e:	2418      	movs	r4, #24
 80063a0:	193b      	adds	r3, r7, r4
 80063a2:	181b      	adds	r3, r3, r0
 80063a4:	210f      	movs	r1, #15
 80063a6:	438a      	bics	r2, r1
 80063a8:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	085b      	lsrs	r3, r3, #1
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2207      	movs	r2, #7
 80063b2:	4013      	ands	r3, r2
 80063b4:	b299      	uxth	r1, r3
 80063b6:	193b      	adds	r3, r7, r4
 80063b8:	181b      	adds	r3, r3, r0
 80063ba:	193a      	adds	r2, r7, r4
 80063bc:	1812      	adds	r2, r2, r0
 80063be:	8812      	ldrh	r2, [r2, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	193a      	adds	r2, r7, r4
 80063ca:	1812      	adds	r2, r2, r0
 80063cc:	8812      	ldrh	r2, [r2, #0]
 80063ce:	60da      	str	r2, [r3, #12]
 80063d0:	e095      	b.n	80064fe <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80063d2:	2313      	movs	r3, #19
 80063d4:	2218      	movs	r2, #24
 80063d6:	4694      	mov	ip, r2
 80063d8:	44bc      	add	ip, r7
 80063da:	4463      	add	r3, ip
 80063dc:	2201      	movs	r2, #1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e08d      	b.n	80064fe <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80063e2:	231b      	movs	r3, #27
 80063e4:	2218      	movs	r2, #24
 80063e6:	4694      	mov	ip, r2
 80063e8:	44bc      	add	ip, r7
 80063ea:	4463      	add	r3, ip
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d86a      	bhi.n	80064c8 <UART_SetConfig+0x5f0>
 80063f2:	009a      	lsls	r2, r3, #2
 80063f4:	4b4f      	ldr	r3, [pc, #316]	; (8006534 <UART_SetConfig+0x65c>)
 80063f6:	18d3      	adds	r3, r2, r3
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80063fc:	f7fe f87e 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8006400:	0002      	movs	r2, r0
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	18d2      	adds	r2, r2, r3
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	0019      	movs	r1, r3
 8006410:	0010      	movs	r0, r2
 8006412:	f7f9 fe79 	bl	8000108 <__udivsi3>
 8006416:	0003      	movs	r3, r0
 8006418:	b29b      	uxth	r3, r3
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800641c:	e05c      	b.n	80064d8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800641e:	f7fe f883 	bl	8004528 <HAL_RCC_GetPCLK2Freq>
 8006422:	0002      	movs	r2, r0
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	18d2      	adds	r2, r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	0019      	movs	r1, r3
 8006432:	0010      	movs	r0, r2
 8006434:	f7f9 fe68 	bl	8000108 <__udivsi3>
 8006438:	0003      	movs	r3, r0
 800643a:	b29b      	uxth	r3, r3
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800643e:	e04b      	b.n	80064d8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006440:	4b38      	ldr	r3, [pc, #224]	; (8006524 <UART_SetConfig+0x64c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2210      	movs	r2, #16
 8006446:	4013      	ands	r3, r2
 8006448:	d00e      	beq.n	8006468 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	4a39      	ldr	r2, [pc, #228]	; (8006538 <UART_SetConfig+0x660>)
 8006452:	189a      	adds	r2, r3, r2
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	0019      	movs	r1, r3
 800645a:	0010      	movs	r0, r2
 800645c:	f7f9 fe54 	bl	8000108 <__udivsi3>
 8006460:	0003      	movs	r3, r0
 8006462:	b29b      	uxth	r3, r3
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8006466:	e037      	b.n	80064d8 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	4a33      	ldr	r2, [pc, #204]	; (800653c <UART_SetConfig+0x664>)
 8006470:	189a      	adds	r2, r3, r2
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	0019      	movs	r1, r3
 8006478:	0010      	movs	r0, r2
 800647a:	f7f9 fe45 	bl	8000108 <__udivsi3>
 800647e:	0003      	movs	r3, r0
 8006480:	b29b      	uxth	r3, r3
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006484:	e028      	b.n	80064d8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006486:	f7fd ffab 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800648a:	0002      	movs	r2, r0
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	18d2      	adds	r2, r2, r3
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	0019      	movs	r1, r3
 800649a:	0010      	movs	r0, r2
 800649c:	f7f9 fe34 	bl	8000108 <__udivsi3>
 80064a0:	0003      	movs	r3, r0
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064a6:	e017      	b.n	80064d8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	0212      	lsls	r2, r2, #8
 80064b2:	189a      	adds	r2, r3, r2
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	0019      	movs	r1, r3
 80064ba:	0010      	movs	r0, r2
 80064bc:	f7f9 fe24 	bl	8000108 <__udivsi3>
 80064c0:	0003      	movs	r3, r0
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c6:	e007      	b.n	80064d8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80064c8:	2313      	movs	r3, #19
 80064ca:	2218      	movs	r2, #24
 80064cc:	4694      	mov	ip, r2
 80064ce:	44bc      	add	ip, r7
 80064d0:	4463      	add	r3, ip
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
        break;
 80064d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b0f      	cmp	r3, #15
 80064dc:	d908      	bls.n	80064f0 <UART_SetConfig+0x618>
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	4a13      	ldr	r2, [pc, #76]	; (8006530 <UART_SetConfig+0x658>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d804      	bhi.n	80064f0 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ec:	60da      	str	r2, [r3, #12]
 80064ee:	e006      	b.n	80064fe <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80064f0:	2313      	movs	r3, #19
 80064f2:	2218      	movs	r2, #24
 80064f4:	4694      	mov	ip, r2
 80064f6:	44bc      	add	ip, r7
 80064f8:	4463      	add	r3, ip
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	2200      	movs	r2, #0
 8006502:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2200      	movs	r2, #0
 8006508:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800650a:	2313      	movs	r3, #19
 800650c:	2218      	movs	r2, #24
 800650e:	4694      	mov	ip, r2
 8006510:	44bc      	add	ip, r7
 8006512:	4463      	add	r3, ip
 8006514:	781b      	ldrb	r3, [r3, #0]
}
 8006516:	0018      	movs	r0, r3
 8006518:	46bd      	mov	sp, r7
 800651a:	b00e      	add	sp, #56	; 0x38
 800651c:	bdb0      	pop	{r4, r5, r7, pc}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	08007bd8 	.word	0x08007bd8
 8006524:	40021000 	.word	0x40021000
 8006528:	007a1200 	.word	0x007a1200
 800652c:	01e84800 	.word	0x01e84800
 8006530:	0000ffff 	.word	0x0000ffff
 8006534:	08007bfc 	.word	0x08007bfc
 8006538:	003d0900 	.word	0x003d0900
 800653c:	00f42400 	.word	0x00f42400

08006540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2201      	movs	r2, #1
 800654e:	4013      	ands	r3, r2
 8006550:	d00b      	beq.n	800656a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4a4a      	ldr	r2, [pc, #296]	; (8006684 <UART_AdvFeatureConfig+0x144>)
 800655a:	4013      	ands	r3, r2
 800655c:	0019      	movs	r1, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2202      	movs	r2, #2
 8006570:	4013      	ands	r3, r2
 8006572:	d00b      	beq.n	800658c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4a43      	ldr	r2, [pc, #268]	; (8006688 <UART_AdvFeatureConfig+0x148>)
 800657c:	4013      	ands	r3, r2
 800657e:	0019      	movs	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2204      	movs	r2, #4
 8006592:	4013      	ands	r3, r2
 8006594:	d00b      	beq.n	80065ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a3b      	ldr	r2, [pc, #236]	; (800668c <UART_AdvFeatureConfig+0x14c>)
 800659e:	4013      	ands	r3, r2
 80065a0:	0019      	movs	r1, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	2208      	movs	r2, #8
 80065b4:	4013      	ands	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	4a34      	ldr	r2, [pc, #208]	; (8006690 <UART_AdvFeatureConfig+0x150>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	0019      	movs	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	2210      	movs	r2, #16
 80065d6:	4013      	ands	r3, r2
 80065d8:	d00b      	beq.n	80065f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <UART_AdvFeatureConfig+0x154>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	0019      	movs	r1, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2220      	movs	r2, #32
 80065f8:	4013      	ands	r3, r2
 80065fa:	d00b      	beq.n	8006614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	4a25      	ldr	r2, [pc, #148]	; (8006698 <UART_AdvFeatureConfig+0x158>)
 8006604:	4013      	ands	r3, r2
 8006606:	0019      	movs	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	2240      	movs	r2, #64	; 0x40
 800661a:	4013      	ands	r3, r2
 800661c:	d01d      	beq.n	800665a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4a1d      	ldr	r2, [pc, #116]	; (800669c <UART_AdvFeatureConfig+0x15c>)
 8006626:	4013      	ands	r3, r2
 8006628:	0019      	movs	r1, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	035b      	lsls	r3, r3, #13
 800663e:	429a      	cmp	r2, r3
 8006640:	d10b      	bne.n	800665a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	4a15      	ldr	r2, [pc, #84]	; (80066a0 <UART_AdvFeatureConfig+0x160>)
 800664a:	4013      	ands	r3, r2
 800664c:	0019      	movs	r1, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2280      	movs	r2, #128	; 0x80
 8006660:	4013      	ands	r3, r2
 8006662:	d00b      	beq.n	800667c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <UART_AdvFeatureConfig+0x164>)
 800666c:	4013      	ands	r3, r2
 800666e:	0019      	movs	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }
}
 800667c:	46c0      	nop			; (mov r8, r8)
 800667e:	46bd      	mov	sp, r7
 8006680:	b002      	add	sp, #8
 8006682:	bd80      	pop	{r7, pc}
 8006684:	fffdffff 	.word	0xfffdffff
 8006688:	fffeffff 	.word	0xfffeffff
 800668c:	fffbffff 	.word	0xfffbffff
 8006690:	ffff7fff 	.word	0xffff7fff
 8006694:	ffffefff 	.word	0xffffefff
 8006698:	ffffdfff 	.word	0xffffdfff
 800669c:	ffefffff 	.word	0xffefffff
 80066a0:	ff9fffff 	.word	0xff9fffff
 80066a4:	fff7ffff 	.word	0xfff7ffff

080066a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80066b6:	f7fc fdd9 	bl	800326c <HAL_GetTick>
 80066ba:	0003      	movs	r3, r0
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2208      	movs	r2, #8
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d10d      	bne.n	80066e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	0399      	lsls	r1, r3, #14
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <UART_CheckIdleState+0x88>)
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	0013      	movs	r3, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	f000 f82a 	bl	8006734 <UART_WaitOnFlagUntilTimeout>
 80066e0:	1e03      	subs	r3, r0, #0
 80066e2:	d001      	beq.n	80066e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e01f      	b.n	8006728 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2204      	movs	r2, #4
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d10d      	bne.n	8006712 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	03d9      	lsls	r1, r3, #15
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <UART_CheckIdleState+0x88>)
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	0013      	movs	r3, r2
 8006704:	2200      	movs	r2, #0
 8006706:	f000 f815 	bl	8006734 <UART_WaitOnFlagUntilTimeout>
 800670a:	1e03      	subs	r3, r0, #0
 800670c:	d001      	beq.n	8006712 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e00a      	b.n	8006728 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2270      	movs	r2, #112	; 0x70
 8006722:	2100      	movs	r1, #0
 8006724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	0018      	movs	r0, r3
 800672a:	46bd      	mov	sp, r7
 800672c:	b004      	add	sp, #16
 800672e:	bd80      	pop	{r7, pc}
 8006730:	01ffffff 	.word	0x01ffffff

08006734 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	1dfb      	adds	r3, r7, #7
 8006742:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006744:	e029      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	3301      	adds	r3, #1
 800674a:	d026      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674c:	f7fc fd8e 	bl	800326c <HAL_GetTick>
 8006750:	0002      	movs	r2, r0
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	d302      	bcc.n	8006762 <UART_WaitOnFlagUntilTimeout+0x2e>
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d11b      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4915      	ldr	r1, [pc, #84]	; (80067c4 <UART_WaitOnFlagUntilTimeout+0x90>)
 800676e:	400a      	ands	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2101      	movs	r1, #1
 800677e:	438a      	bics	r2, r1
 8006780:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2270      	movs	r2, #112	; 0x70
 8006792:	2100      	movs	r1, #0
 8006794:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e00f      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	4013      	ands	r3, r2
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	425a      	negs	r2, r3
 80067aa:	4153      	adcs	r3, r2
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	001a      	movs	r2, r3
 80067b0:	1dfb      	adds	r3, r7, #7
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d0c6      	beq.n	8006746 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	0018      	movs	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	b004      	add	sp, #16
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	fffffe5f 	.word	0xfffffe5f

080067c8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d4:	2b21      	cmp	r3, #33	; 0x21
 80067d6:	d12a      	bne.n	800682e <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2252      	movs	r2, #82	; 0x52
 80067dc:	5a9b      	ldrh	r3, [r3, r2]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d110      	bne.n	8006806 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2180      	movs	r1, #128	; 0x80
 80067f0:	438a      	bics	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2140      	movs	r1, #64	; 0x40
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006804:	e013      	b.n	800682e <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2252      	movs	r2, #82	; 0x52
 8006820:	5a9b      	ldrh	r3, [r3, r2]
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b299      	uxth	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2252      	movs	r2, #82	; 0x52
 800682c:	5299      	strh	r1, [r3, r2]
}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	46bd      	mov	sp, r7
 8006832:	b002      	add	sp, #8
 8006834:	bd80      	pop	{r7, pc}

08006836 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006842:	2b21      	cmp	r3, #33	; 0x21
 8006844:	d12f      	bne.n	80068a6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2252      	movs	r2, #82	; 0x52
 800684a:	5a9b      	ldrh	r3, [r3, r2]
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d110      	bne.n	8006874 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	438a      	bics	r2, r1
 8006860:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	430a      	orrs	r2, r1
 8006870:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006872:	e018      	b.n	80068a6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006878:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	001a      	movs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	05d2      	lsls	r2, r2, #23
 8006886:	0dd2      	lsrs	r2, r2, #23
 8006888:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688e:	1c9a      	adds	r2, r3, #2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2252      	movs	r2, #82	; 0x52
 8006898:	5a9b      	ldrh	r3, [r3, r2]
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b299      	uxth	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2252      	movs	r2, #82	; 0x52
 80068a4:	5299      	strh	r1, [r3, r2]
}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b004      	add	sp, #16
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068b8:	230e      	movs	r3, #14
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	215c      	movs	r1, #92	; 0x5c
 80068c0:	5a52      	ldrh	r2, [r2, r1]
 80068c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c8:	2b22      	cmp	r3, #34	; 0x22
 80068ca:	d140      	bne.n	800694e <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068d2:	210c      	movs	r1, #12
 80068d4:	187b      	adds	r3, r7, r1
 80068d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068d8:	187b      	adds	r3, r7, r1
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	230e      	movs	r3, #14
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b2d9      	uxtb	r1, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	400a      	ands	r2, r1
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	225a      	movs	r2, #90	; 0x5a
 80068fe:	5a9b      	ldrh	r3, [r3, r2]
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b299      	uxth	r1, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	225a      	movs	r2, #90	; 0x5a
 800690a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	225a      	movs	r2, #90	; 0x5a
 8006910:	5a9b      	ldrh	r3, [r3, r2]
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d122      	bne.n	800695e <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4911      	ldr	r1, [pc, #68]	; (8006968 <UART_RxISR_8BIT+0xb8>)
 8006924:	400a      	ands	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2101      	movs	r1, #1
 8006934:	438a      	bics	r2, r1
 8006936:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	0018      	movs	r0, r3
 8006948:	f7ff fabe 	bl	8005ec8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800694c:	e007      	b.n	800695e <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2108      	movs	r1, #8
 800695a:	430a      	orrs	r2, r1
 800695c:	619a      	str	r2, [r3, #24]
}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b004      	add	sp, #16
 8006964:	bd80      	pop	{r7, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	fffffedf 	.word	0xfffffedf

0800696c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006974:	230e      	movs	r3, #14
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	215c      	movs	r1, #92	; 0x5c
 800697c:	5a52      	ldrh	r2, [r2, r1]
 800697e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006984:	2b22      	cmp	r3, #34	; 0x22
 8006986:	d140      	bne.n	8006a0a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800698e:	210c      	movs	r1, #12
 8006990:	187b      	adds	r3, r7, r1
 8006992:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006998:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800699a:	187b      	adds	r3, r7, r1
 800699c:	220e      	movs	r2, #14
 800699e:	18ba      	adds	r2, r7, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	8812      	ldrh	r2, [r2, #0]
 80069a4:	4013      	ands	r3, r2
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	225a      	movs	r2, #90	; 0x5a
 80069ba:	5a9b      	ldrh	r3, [r3, r2]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b299      	uxth	r1, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	225a      	movs	r2, #90	; 0x5a
 80069c6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	225a      	movs	r2, #90	; 0x5a
 80069cc:	5a9b      	ldrh	r3, [r3, r2]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d122      	bne.n	8006a1a <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4911      	ldr	r1, [pc, #68]	; (8006a24 <UART_RxISR_16BIT+0xb8>)
 80069e0:	400a      	ands	r2, r1
 80069e2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2101      	movs	r1, #1
 80069f0:	438a      	bics	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f7ff fa60 	bl	8005ec8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a08:	e007      	b.n	8006a1a <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2108      	movs	r1, #8
 8006a16:	430a      	orrs	r2, r1
 8006a18:	619a      	str	r2, [r3, #24]
}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b004      	add	sp, #16
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	fffffedf 	.word	0xfffffedf

08006a28 <__errno>:
 8006a28:	4b01      	ldr	r3, [pc, #4]	; (8006a30 <__errno+0x8>)
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	4770      	bx	lr
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	20000008 	.word	0x20000008

08006a34 <__libc_init_array>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	2600      	movs	r6, #0
 8006a38:	4d0c      	ldr	r5, [pc, #48]	; (8006a6c <__libc_init_array+0x38>)
 8006a3a:	4c0d      	ldr	r4, [pc, #52]	; (8006a70 <__libc_init_array+0x3c>)
 8006a3c:	1b64      	subs	r4, r4, r5
 8006a3e:	10a4      	asrs	r4, r4, #2
 8006a40:	42a6      	cmp	r6, r4
 8006a42:	d109      	bne.n	8006a58 <__libc_init_array+0x24>
 8006a44:	2600      	movs	r6, #0
 8006a46:	f001 f867 	bl	8007b18 <_init>
 8006a4a:	4d0a      	ldr	r5, [pc, #40]	; (8006a74 <__libc_init_array+0x40>)
 8006a4c:	4c0a      	ldr	r4, [pc, #40]	; (8006a78 <__libc_init_array+0x44>)
 8006a4e:	1b64      	subs	r4, r4, r5
 8006a50:	10a4      	asrs	r4, r4, #2
 8006a52:	42a6      	cmp	r6, r4
 8006a54:	d105      	bne.n	8006a62 <__libc_init_array+0x2e>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	00b3      	lsls	r3, r6, #2
 8006a5a:	58eb      	ldr	r3, [r5, r3]
 8006a5c:	4798      	blx	r3
 8006a5e:	3601      	adds	r6, #1
 8006a60:	e7ee      	b.n	8006a40 <__libc_init_array+0xc>
 8006a62:	00b3      	lsls	r3, r6, #2
 8006a64:	58eb      	ldr	r3, [r5, r3]
 8006a66:	4798      	blx	r3
 8006a68:	3601      	adds	r6, #1
 8006a6a:	e7f2      	b.n	8006a52 <__libc_init_array+0x1e>
 8006a6c:	08007c70 	.word	0x08007c70
 8006a70:	08007c70 	.word	0x08007c70
 8006a74:	08007c70 	.word	0x08007c70
 8006a78:	08007c74 	.word	0x08007c74

08006a7c <memset>:
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	1812      	adds	r2, r2, r0
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d100      	bne.n	8006a86 <memset+0xa>
 8006a84:	4770      	bx	lr
 8006a86:	7019      	strb	r1, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	e7f9      	b.n	8006a80 <memset+0x4>

08006a8c <pow>:
 8006a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8e:	2400      	movs	r4, #0
 8006a90:	b091      	sub	sp, #68	; 0x44
 8006a92:	001f      	movs	r7, r3
 8006a94:	9000      	str	r0, [sp, #0]
 8006a96:	9101      	str	r1, [sp, #4]
 8006a98:	0016      	movs	r6, r2
 8006a9a:	f000 f98d 	bl	8006db8 <__ieee754_pow>
 8006a9e:	4bbe      	ldr	r3, [pc, #760]	; (8006d98 <pow+0x30c>)
 8006aa0:	9002      	str	r0, [sp, #8]
 8006aa2:	9103      	str	r1, [sp, #12]
 8006aa4:	571c      	ldrsb	r4, [r3, r4]
 8006aa6:	1c63      	adds	r3, r4, #1
 8006aa8:	d100      	bne.n	8006aac <pow+0x20>
 8006aaa:	e0d4      	b.n	8006c56 <pow+0x1ca>
 8006aac:	0032      	movs	r2, r6
 8006aae:	003b      	movs	r3, r7
 8006ab0:	0030      	movs	r0, r6
 8006ab2:	0039      	movs	r1, r7
 8006ab4:	f7fb fc78 	bl	80023a8 <__aeabi_dcmpun>
 8006ab8:	1e05      	subs	r5, r0, #0
 8006aba:	d000      	beq.n	8006abe <pow+0x32>
 8006abc:	e0cb      	b.n	8006c56 <pow+0x1ca>
 8006abe:	9a00      	ldr	r2, [sp, #0]
 8006ac0:	9b01      	ldr	r3, [sp, #4]
 8006ac2:	0010      	movs	r0, r2
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	f7fb fc6f 	bl	80023a8 <__aeabi_dcmpun>
 8006aca:	2200      	movs	r2, #0
 8006acc:	9005      	str	r0, [sp, #20]
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d01e      	beq.n	8006b10 <pow+0x84>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	0030      	movs	r0, r6
 8006ad6:	0039      	movs	r1, r7
 8006ad8:	f7f9 fbb2 	bl	8000240 <__aeabi_dcmpeq>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d100      	bne.n	8006ae2 <pow+0x56>
 8006ae0:	e0b9      	b.n	8006c56 <pow+0x1ca>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	9306      	str	r3, [sp, #24]
 8006ae6:	4bad      	ldr	r3, [pc, #692]	; (8006d9c <pow+0x310>)
 8006ae8:	950e      	str	r5, [sp, #56]	; 0x38
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	9a00      	ldr	r2, [sp, #0]
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	9208      	str	r2, [sp, #32]
 8006af2:	9309      	str	r3, [sp, #36]	; 0x24
 8006af4:	2200      	movs	r2, #0
 8006af6:	4baa      	ldr	r3, [pc, #680]	; (8006da0 <pow+0x314>)
 8006af8:	960a      	str	r6, [sp, #40]	; 0x28
 8006afa:	970b      	str	r7, [sp, #44]	; 0x2c
 8006afc:	920c      	str	r2, [sp, #48]	; 0x30
 8006afe:	930d      	str	r3, [sp, #52]	; 0x34
 8006b00:	2c02      	cmp	r4, #2
 8006b02:	d033      	beq.n	8006b6c <pow+0xe0>
 8006b04:	a806      	add	r0, sp, #24
 8006b06:	f000 ff0b 	bl	8007920 <matherr>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d125      	bne.n	8006b5a <pow+0xce>
 8006b0e:	e059      	b.n	8006bc4 <pow+0x138>
 8006b10:	2300      	movs	r3, #0
 8006b12:	9800      	ldr	r0, [sp, #0]
 8006b14:	9901      	ldr	r1, [sp, #4]
 8006b16:	f7f9 fb93 	bl	8000240 <__aeabi_dcmpeq>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d057      	beq.n	8006bce <pow+0x142>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2300      	movs	r3, #0
 8006b22:	0030      	movs	r0, r6
 8006b24:	0039      	movs	r1, r7
 8006b26:	f7f9 fb8b 	bl	8000240 <__aeabi_dcmpeq>
 8006b2a:	1e05      	subs	r5, r0, #0
 8006b2c:	d021      	beq.n	8006b72 <pow+0xe6>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	9306      	str	r3, [sp, #24]
 8006b32:	4b9a      	ldr	r3, [pc, #616]	; (8006d9c <pow+0x310>)
 8006b34:	960a      	str	r6, [sp, #40]	; 0x28
 8006b36:	970b      	str	r7, [sp, #44]	; 0x2c
 8006b38:	9307      	str	r3, [sp, #28]
 8006b3a:	9b05      	ldr	r3, [sp, #20]
 8006b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8006b3e:	9a00      	ldr	r2, [sp, #0]
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	9208      	str	r2, [sp, #32]
 8006b44:	9309      	str	r3, [sp, #36]	; 0x24
 8006b46:	2200      	movs	r2, #0
 8006b48:	2300      	movs	r3, #0
 8006b4a:	920c      	str	r2, [sp, #48]	; 0x30
 8006b4c:	930d      	str	r3, [sp, #52]	; 0x34
 8006b4e:	2c00      	cmp	r4, #0
 8006b50:	d0d8      	beq.n	8006b04 <pow+0x78>
 8006b52:	2200      	movs	r2, #0
 8006b54:	4b92      	ldr	r3, [pc, #584]	; (8006da0 <pow+0x314>)
 8006b56:	920c      	str	r2, [sp, #48]	; 0x30
 8006b58:	930d      	str	r3, [sp, #52]	; 0x34
 8006b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <pow+0xe0>
 8006b62:	f7ff ff61 	bl	8006a28 <__errno>
 8006b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	6003      	str	r3, [r0, #0]
 8006b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006b70:	e06f      	b.n	8006c52 <pow+0x1c6>
 8006b72:	0030      	movs	r0, r6
 8006b74:	0039      	movs	r1, r7
 8006b76:	f000 fecb 	bl	8007910 <finite>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d06b      	beq.n	8006c56 <pow+0x1ca>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2300      	movs	r3, #0
 8006b82:	0030      	movs	r0, r6
 8006b84:	0039      	movs	r1, r7
 8006b86:	f7f9 fb61 	bl	800024c <__aeabi_dcmplt>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d063      	beq.n	8006c56 <pow+0x1ca>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	9306      	str	r3, [sp, #24]
 8006b92:	4b82      	ldr	r3, [pc, #520]	; (8006d9c <pow+0x310>)
 8006b94:	950e      	str	r5, [sp, #56]	; 0x38
 8006b96:	9307      	str	r3, [sp, #28]
 8006b98:	9b00      	ldr	r3, [sp, #0]
 8006b9a:	9c01      	ldr	r4, [sp, #4]
 8006b9c:	9308      	str	r3, [sp, #32]
 8006b9e:	9409      	str	r4, [sp, #36]	; 0x24
 8006ba0:	4b7d      	ldr	r3, [pc, #500]	; (8006d98 <pow+0x30c>)
 8006ba2:	960a      	str	r6, [sp, #40]	; 0x28
 8006ba4:	970b      	str	r7, [sp, #44]	; 0x2c
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <pow+0x12c>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2400      	movs	r4, #0
 8006bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8006bb4:	940d      	str	r4, [sp, #52]	; 0x34
 8006bb6:	e7a5      	b.n	8006b04 <pow+0x78>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	497a      	ldr	r1, [pc, #488]	; (8006da4 <pow+0x318>)
 8006bbc:	900c      	str	r0, [sp, #48]	; 0x30
 8006bbe:	910d      	str	r1, [sp, #52]	; 0x34
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d19f      	bne.n	8006b04 <pow+0x78>
 8006bc4:	f7ff ff30 	bl	8006a28 <__errno>
 8006bc8:	2321      	movs	r3, #33	; 0x21
 8006bca:	6003      	str	r3, [r0, #0]
 8006bcc:	e7c5      	b.n	8006b5a <pow+0xce>
 8006bce:	9802      	ldr	r0, [sp, #8]
 8006bd0:	9903      	ldr	r1, [sp, #12]
 8006bd2:	f000 fe9d 	bl	8007910 <finite>
 8006bd6:	9005      	str	r0, [sp, #20]
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d000      	beq.n	8006bde <pow+0x152>
 8006bdc:	e0a5      	b.n	8006d2a <pow+0x29e>
 8006bde:	9800      	ldr	r0, [sp, #0]
 8006be0:	9901      	ldr	r1, [sp, #4]
 8006be2:	f000 fe95 	bl	8007910 <finite>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d100      	bne.n	8006bec <pow+0x160>
 8006bea:	e09e      	b.n	8006d2a <pow+0x29e>
 8006bec:	0030      	movs	r0, r6
 8006bee:	0039      	movs	r1, r7
 8006bf0:	f000 fe8e 	bl	8007910 <finite>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d100      	bne.n	8006bfa <pow+0x16e>
 8006bf8:	e097      	b.n	8006d2a <pow+0x29e>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	4b66      	ldr	r3, [pc, #408]	; (8006d98 <pow+0x30c>)
 8006bfe:	ac06      	add	r4, sp, #24
 8006c00:	575d      	ldrsb	r5, [r3, r5]
 8006c02:	9a02      	ldr	r2, [sp, #8]
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	0019      	movs	r1, r3
 8006c08:	0010      	movs	r0, r2
 8006c0a:	f7fb fbcd 	bl	80023a8 <__aeabi_dcmpun>
 8006c0e:	4b63      	ldr	r3, [pc, #396]	; (8006d9c <pow+0x310>)
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d031      	beq.n	8006c78 <pow+0x1ec>
 8006c14:	2201      	movs	r2, #1
 8006c16:	6063      	str	r3, [r4, #4]
 8006c18:	9b05      	ldr	r3, [sp, #20]
 8006c1a:	9206      	str	r2, [sp, #24]
 8006c1c:	6223      	str	r3, [r4, #32]
 8006c1e:	6126      	str	r6, [r4, #16]
 8006c20:	6167      	str	r7, [r4, #20]
 8006c22:	9a00      	ldr	r2, [sp, #0]
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	60a2      	str	r2, [r4, #8]
 8006c28:	60e3      	str	r3, [r4, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	d115      	bne.n	8006c5e <pow+0x1d2>
 8006c32:	61a2      	str	r2, [r4, #24]
 8006c34:	61e3      	str	r3, [r4, #28]
 8006c36:	0020      	movs	r0, r4
 8006c38:	f000 fe72 	bl	8007920 <matherr>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d016      	beq.n	8006c6e <pow+0x1e2>
 8006c40:	6a23      	ldr	r3, [r4, #32]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <pow+0x1c2>
 8006c46:	f7ff feef 	bl	8006a28 <__errno>
 8006c4a:	6a23      	ldr	r3, [r4, #32]
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	69a3      	ldr	r3, [r4, #24]
 8006c50:	69e4      	ldr	r4, [r4, #28]
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	9403      	str	r4, [sp, #12]
 8006c56:	9802      	ldr	r0, [sp, #8]
 8006c58:	9903      	ldr	r1, [sp, #12]
 8006c5a:	b011      	add	sp, #68	; 0x44
 8006c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c5e:	0010      	movs	r0, r2
 8006c60:	0019      	movs	r1, r3
 8006c62:	f7fa f9dd 	bl	8001020 <__aeabi_ddiv>
 8006c66:	61a0      	str	r0, [r4, #24]
 8006c68:	61e1      	str	r1, [r4, #28]
 8006c6a:	2d02      	cmp	r5, #2
 8006c6c:	d1e3      	bne.n	8006c36 <pow+0x1aa>
 8006c6e:	f7ff fedb 	bl	8006a28 <__errno>
 8006c72:	2321      	movs	r3, #33	; 0x21
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	e7e3      	b.n	8006c40 <pow+0x1b4>
 8006c78:	2203      	movs	r2, #3
 8006c7a:	6126      	str	r6, [r4, #16]
 8006c7c:	6167      	str	r7, [r4, #20]
 8006c7e:	9206      	str	r2, [sp, #24]
 8006c80:	6063      	str	r3, [r4, #4]
 8006c82:	6220      	str	r0, [r4, #32]
 8006c84:	9a00      	ldr	r2, [sp, #0]
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	0030      	movs	r0, r6
 8006c8a:	60a2      	str	r2, [r4, #8]
 8006c8c:	60e3      	str	r3, [r4, #12]
 8006c8e:	0039      	movs	r1, r7
 8006c90:	2200      	movs	r2, #0
 8006c92:	4b45      	ldr	r3, [pc, #276]	; (8006da8 <pow+0x31c>)
 8006c94:	f7fa fdce 	bl	8001834 <__aeabi_dmul>
 8006c98:	0006      	movs	r6, r0
 8006c9a:	000f      	movs	r7, r1
 8006c9c:	2d00      	cmp	r5, #0
 8006c9e:	d124      	bne.n	8006cea <pow+0x25e>
 8006ca0:	9800      	ldr	r0, [sp, #0]
 8006ca2:	9901      	ldr	r1, [sp, #4]
 8006ca4:	22e0      	movs	r2, #224	; 0xe0
 8006ca6:	4b41      	ldr	r3, [pc, #260]	; (8006dac <pow+0x320>)
 8006ca8:	0612      	lsls	r2, r2, #24
 8006caa:	61a2      	str	r2, [r4, #24]
 8006cac:	61e3      	str	r3, [r4, #28]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f7f9 facb 	bl	800024c <__aeabi_dcmplt>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d030      	beq.n	8006d1c <pow+0x290>
 8006cba:	0030      	movs	r0, r6
 8006cbc:	0039      	movs	r1, r7
 8006cbe:	f000 fe37 	bl	8007930 <rint>
 8006cc2:	0032      	movs	r2, r6
 8006cc4:	003b      	movs	r3, r7
 8006cc6:	f7f9 fabb 	bl	8000240 <__aeabi_dcmpeq>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d104      	bne.n	8006cd8 <pow+0x24c>
 8006cce:	22e0      	movs	r2, #224	; 0xe0
 8006cd0:	4b37      	ldr	r3, [pc, #220]	; (8006db0 <pow+0x324>)
 8006cd2:	0612      	lsls	r2, r2, #24
 8006cd4:	61a2      	str	r2, [r4, #24]
 8006cd6:	61e3      	str	r3, [r4, #28]
 8006cd8:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <pow+0x30c>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	b25b      	sxtb	r3, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d11c      	bne.n	8006d1c <pow+0x290>
 8006ce2:	f7ff fea1 	bl	8006a28 <__errno>
 8006ce6:	2322      	movs	r3, #34	; 0x22
 8006ce8:	e7c4      	b.n	8006c74 <pow+0x1e8>
 8006cea:	2200      	movs	r2, #0
 8006cec:	9800      	ldr	r0, [sp, #0]
 8006cee:	9901      	ldr	r1, [sp, #4]
 8006cf0:	4b30      	ldr	r3, [pc, #192]	; (8006db4 <pow+0x328>)
 8006cf2:	61a2      	str	r2, [r4, #24]
 8006cf4:	61e3      	str	r3, [r4, #28]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f7f9 faa7 	bl	800024c <__aeabi_dcmplt>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d0ea      	beq.n	8006cd8 <pow+0x24c>
 8006d02:	0030      	movs	r0, r6
 8006d04:	0039      	movs	r1, r7
 8006d06:	f000 fe13 	bl	8007930 <rint>
 8006d0a:	0032      	movs	r2, r6
 8006d0c:	003b      	movs	r3, r7
 8006d0e:	f7f9 fa97 	bl	8000240 <__aeabi_dcmpeq>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d1e0      	bne.n	8006cd8 <pow+0x24c>
 8006d16:	2200      	movs	r2, #0
 8006d18:	4b22      	ldr	r3, [pc, #136]	; (8006da4 <pow+0x318>)
 8006d1a:	e7db      	b.n	8006cd4 <pow+0x248>
 8006d1c:	0020      	movs	r0, r4
 8006d1e:	f000 fdff 	bl	8007920 <matherr>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d000      	beq.n	8006d28 <pow+0x29c>
 8006d26:	e78b      	b.n	8006c40 <pow+0x1b4>
 8006d28:	e7db      	b.n	8006ce2 <pow+0x256>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	9802      	ldr	r0, [sp, #8]
 8006d2e:	9903      	ldr	r1, [sp, #12]
 8006d30:	2300      	movs	r3, #0
 8006d32:	f7f9 fa85 	bl	8000240 <__aeabi_dcmpeq>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d100      	bne.n	8006d3c <pow+0x2b0>
 8006d3a:	e78c      	b.n	8006c56 <pow+0x1ca>
 8006d3c:	9800      	ldr	r0, [sp, #0]
 8006d3e:	9901      	ldr	r1, [sp, #4]
 8006d40:	f000 fde6 	bl	8007910 <finite>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d100      	bne.n	8006d4a <pow+0x2be>
 8006d48:	e785      	b.n	8006c56 <pow+0x1ca>
 8006d4a:	0030      	movs	r0, r6
 8006d4c:	0039      	movs	r1, r7
 8006d4e:	f000 fddf 	bl	8007910 <finite>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d100      	bne.n	8006d58 <pow+0x2cc>
 8006d56:	e77e      	b.n	8006c56 <pow+0x1ca>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	9306      	str	r3, [sp, #24]
 8006d5c:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <pow+0x310>)
 8006d5e:	960a      	str	r6, [sp, #40]	; 0x28
 8006d60:	970b      	str	r7, [sp, #44]	; 0x2c
 8006d62:	9307      	str	r3, [sp, #28]
 8006d64:	2300      	movs	r3, #0
 8006d66:	930e      	str	r3, [sp, #56]	; 0x38
 8006d68:	9b00      	ldr	r3, [sp, #0]
 8006d6a:	9c01      	ldr	r4, [sp, #4]
 8006d6c:	9308      	str	r3, [sp, #32]
 8006d6e:	9409      	str	r4, [sp, #36]	; 0x24
 8006d70:	2300      	movs	r3, #0
 8006d72:	2400      	movs	r4, #0
 8006d74:	930c      	str	r3, [sp, #48]	; 0x30
 8006d76:	940d      	str	r4, [sp, #52]	; 0x34
 8006d78:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <pow+0x30c>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	b25b      	sxtb	r3, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d103      	bne.n	8006d8a <pow+0x2fe>
 8006d82:	f7ff fe51 	bl	8006a28 <__errno>
 8006d86:	2322      	movs	r3, #34	; 0x22
 8006d88:	e71f      	b.n	8006bca <pow+0x13e>
 8006d8a:	a806      	add	r0, sp, #24
 8006d8c:	f000 fdc8 	bl	8007920 <matherr>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d000      	beq.n	8006d96 <pow+0x30a>
 8006d94:	e6e1      	b.n	8006b5a <pow+0xce>
 8006d96:	e7f4      	b.n	8006d82 <pow+0x2f6>
 8006d98:	2000006c 	.word	0x2000006c
 8006d9c:	08007c20 	.word	0x08007c20
 8006da0:	3ff00000 	.word	0x3ff00000
 8006da4:	fff00000 	.word	0xfff00000
 8006da8:	3fe00000 	.word	0x3fe00000
 8006dac:	47efffff 	.word	0x47efffff
 8006db0:	c7efffff 	.word	0xc7efffff
 8006db4:	7ff00000 	.word	0x7ff00000

08006db8 <__ieee754_pow>:
 8006db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dba:	b095      	sub	sp, #84	; 0x54
 8006dbc:	9202      	str	r2, [sp, #8]
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	000e      	movs	r6, r1
 8006dc4:	9902      	ldr	r1, [sp, #8]
 8006dc6:	005d      	lsls	r5, r3, #1
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	000b      	movs	r3, r1
 8006dcc:	086d      	lsrs	r5, r5, #1
 8006dce:	0007      	movs	r7, r0
 8006dd0:	432b      	orrs	r3, r5
 8006dd2:	d101      	bne.n	8006dd8 <__ieee754_pow+0x20>
 8006dd4:	f000 fcad 	bl	8007732 <__ieee754_pow+0x97a>
 8006dd8:	4b7e      	ldr	r3, [pc, #504]	; (8006fd4 <__ieee754_pow+0x21c>)
 8006dda:	0074      	lsls	r4, r6, #1
 8006ddc:	9608      	str	r6, [sp, #32]
 8006dde:	9000      	str	r0, [sp, #0]
 8006de0:	0864      	lsrs	r4, r4, #1
 8006de2:	469c      	mov	ip, r3
 8006de4:	429c      	cmp	r4, r3
 8006de6:	dc0b      	bgt.n	8006e00 <__ieee754_pow+0x48>
 8006de8:	d104      	bne.n	8006df4 <__ieee754_pow+0x3c>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d108      	bne.n	8006e00 <__ieee754_pow+0x48>
 8006dee:	42a5      	cmp	r5, r4
 8006df0:	dc0c      	bgt.n	8006e0c <__ieee754_pow+0x54>
 8006df2:	e001      	b.n	8006df8 <__ieee754_pow+0x40>
 8006df4:	429d      	cmp	r5, r3
 8006df6:	dc03      	bgt.n	8006e00 <__ieee754_pow+0x48>
 8006df8:	4565      	cmp	r5, ip
 8006dfa:	d10d      	bne.n	8006e18 <__ieee754_pow+0x60>
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d00b      	beq.n	8006e18 <__ieee754_pow+0x60>
 8006e00:	4b75      	ldr	r3, [pc, #468]	; (8006fd8 <__ieee754_pow+0x220>)
 8006e02:	18e4      	adds	r4, r4, r3
 8006e04:	4327      	orrs	r7, r4
 8006e06:	d101      	bne.n	8006e0c <__ieee754_pow+0x54>
 8006e08:	f000 fc93 	bl	8007732 <__ieee754_pow+0x97a>
 8006e0c:	4873      	ldr	r0, [pc, #460]	; (8006fdc <__ieee754_pow+0x224>)
 8006e0e:	f000 fd89 	bl	8007924 <nan>
 8006e12:	9000      	str	r0, [sp, #0]
 8006e14:	9101      	str	r1, [sp, #4]
 8006e16:	e061      	b.n	8006edc <__ieee754_pow+0x124>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9306      	str	r3, [sp, #24]
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	da17      	bge.n	8006e50 <__ieee754_pow+0x98>
 8006e20:	4a6f      	ldr	r2, [pc, #444]	; (8006fe0 <__ieee754_pow+0x228>)
 8006e22:	4295      	cmp	r5, r2
 8006e24:	dc4d      	bgt.n	8006ec2 <__ieee754_pow+0x10a>
 8006e26:	4a6f      	ldr	r2, [pc, #444]	; (8006fe4 <__ieee754_pow+0x22c>)
 8006e28:	4295      	cmp	r5, r2
 8006e2a:	dd11      	ble.n	8006e50 <__ieee754_pow+0x98>
 8006e2c:	4b6e      	ldr	r3, [pc, #440]	; (8006fe8 <__ieee754_pow+0x230>)
 8006e2e:	152a      	asrs	r2, r5, #20
 8006e30:	18d2      	adds	r2, r2, r3
 8006e32:	2a14      	cmp	r2, #20
 8006e34:	dd25      	ble.n	8006e82 <__ieee754_pow+0xca>
 8006e36:	2034      	movs	r0, #52	; 0x34
 8006e38:	1a82      	subs	r2, r0, r2
 8006e3a:	9802      	ldr	r0, [sp, #8]
 8006e3c:	40d0      	lsrs	r0, r2
 8006e3e:	0003      	movs	r3, r0
 8006e40:	4093      	lsls	r3, r2
 8006e42:	428b      	cmp	r3, r1
 8006e44:	d104      	bne.n	8006e50 <__ieee754_pow+0x98>
 8006e46:	2201      	movs	r2, #1
 8006e48:	4010      	ands	r0, r2
 8006e4a:	1892      	adds	r2, r2, r2
 8006e4c:	1a13      	subs	r3, r2, r0
 8006e4e:	9306      	str	r3, [sp, #24]
 8006e50:	2900      	cmp	r1, #0
 8006e52:	d15e      	bne.n	8006f12 <__ieee754_pow+0x15a>
 8006e54:	4565      	cmp	r5, ip
 8006e56:	d123      	bne.n	8006ea0 <__ieee754_pow+0xe8>
 8006e58:	4b5f      	ldr	r3, [pc, #380]	; (8006fd8 <__ieee754_pow+0x220>)
 8006e5a:	18e3      	adds	r3, r4, r3
 8006e5c:	431f      	orrs	r7, r3
 8006e5e:	d101      	bne.n	8006e64 <__ieee754_pow+0xac>
 8006e60:	f000 fc67 	bl	8007732 <__ieee754_pow+0x97a>
 8006e64:	4b5f      	ldr	r3, [pc, #380]	; (8006fe4 <__ieee754_pow+0x22c>)
 8006e66:	429c      	cmp	r4, r3
 8006e68:	dd2d      	ble.n	8006ec6 <__ieee754_pow+0x10e>
 8006e6a:	9b02      	ldr	r3, [sp, #8]
 8006e6c:	9c03      	ldr	r4, [sp, #12]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	9401      	str	r4, [sp, #4]
 8006e72:	9b04      	ldr	r3, [sp, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da31      	bge.n	8006edc <__ieee754_pow+0x124>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2400      	movs	r4, #0
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	9401      	str	r4, [sp, #4]
 8006e80:	e02c      	b.n	8006edc <__ieee754_pow+0x124>
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d145      	bne.n	8006f12 <__ieee754_pow+0x15a>
 8006e86:	2314      	movs	r3, #20
 8006e88:	1a9a      	subs	r2, r3, r2
 8006e8a:	002b      	movs	r3, r5
 8006e8c:	4113      	asrs	r3, r2
 8006e8e:	0019      	movs	r1, r3
 8006e90:	4091      	lsls	r1, r2
 8006e92:	42a9      	cmp	r1, r5
 8006e94:	d104      	bne.n	8006ea0 <__ieee754_pow+0xe8>
 8006e96:	2201      	movs	r2, #1
 8006e98:	4013      	ands	r3, r2
 8006e9a:	1892      	adds	r2, r2, r2
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	9306      	str	r3, [sp, #24]
 8006ea0:	4b52      	ldr	r3, [pc, #328]	; (8006fec <__ieee754_pow+0x234>)
 8006ea2:	429d      	cmp	r5, r3
 8006ea4:	d11e      	bne.n	8006ee4 <__ieee754_pow+0x12c>
 8006ea6:	0038      	movs	r0, r7
 8006ea8:	0031      	movs	r1, r6
 8006eaa:	9b04      	ldr	r3, [sp, #16]
 8006eac:	9000      	str	r0, [sp, #0]
 8006eae:	9101      	str	r1, [sp, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da13      	bge.n	8006edc <__ieee754_pow+0x124>
 8006eb4:	003a      	movs	r2, r7
 8006eb6:	0033      	movs	r3, r6
 8006eb8:	2000      	movs	r0, #0
 8006eba:	494c      	ldr	r1, [pc, #304]	; (8006fec <__ieee754_pow+0x234>)
 8006ebc:	f7fa f8b0 	bl	8001020 <__aeabi_ddiv>
 8006ec0:	e7a7      	b.n	8006e12 <__ieee754_pow+0x5a>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e7c3      	b.n	8006e4e <__ieee754_pow+0x96>
 8006ec6:	9b04      	ldr	r3, [sp, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dad5      	bge.n	8006e78 <__ieee754_pow+0xc0>
 8006ecc:	2280      	movs	r2, #128	; 0x80
 8006ece:	0612      	lsls	r2, r2, #24
 8006ed0:	4694      	mov	ip, r2
 8006ed2:	9b02      	ldr	r3, [sp, #8]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	4463      	add	r3, ip
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	9800      	ldr	r0, [sp, #0]
 8006ede:	9901      	ldr	r1, [sp, #4]
 8006ee0:	b015      	add	sp, #84	; 0x54
 8006ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	9a04      	ldr	r2, [sp, #16]
 8006ee8:	05db      	lsls	r3, r3, #23
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d106      	bne.n	8006efc <__ieee754_pow+0x144>
 8006eee:	003a      	movs	r2, r7
 8006ef0:	0033      	movs	r3, r6
 8006ef2:	0038      	movs	r0, r7
 8006ef4:	0031      	movs	r1, r6
 8006ef6:	f7fa fc9d 	bl	8001834 <__aeabi_dmul>
 8006efa:	e78a      	b.n	8006e12 <__ieee754_pow+0x5a>
 8006efc:	4b3c      	ldr	r3, [pc, #240]	; (8006ff0 <__ieee754_pow+0x238>)
 8006efe:	9a04      	ldr	r2, [sp, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d106      	bne.n	8006f12 <__ieee754_pow+0x15a>
 8006f04:	2e00      	cmp	r6, #0
 8006f06:	db04      	blt.n	8006f12 <__ieee754_pow+0x15a>
 8006f08:	0038      	movs	r0, r7
 8006f0a:	0031      	movs	r1, r6
 8006f0c:	f000 fc4a 	bl	80077a4 <__ieee754_sqrt>
 8006f10:	e77f      	b.n	8006e12 <__ieee754_pow+0x5a>
 8006f12:	0038      	movs	r0, r7
 8006f14:	0031      	movs	r1, r6
 8006f16:	f000 fcf7 	bl	8007908 <fabs>
 8006f1a:	9000      	str	r0, [sp, #0]
 8006f1c:	9101      	str	r1, [sp, #4]
 8006f1e:	2f00      	cmp	r7, #0
 8006f20:	d12e      	bne.n	8006f80 <__ieee754_pow+0x1c8>
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	d004      	beq.n	8006f30 <__ieee754_pow+0x178>
 8006f26:	4a31      	ldr	r2, [pc, #196]	; (8006fec <__ieee754_pow+0x234>)
 8006f28:	00b3      	lsls	r3, r6, #2
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d127      	bne.n	8006f80 <__ieee754_pow+0x1c8>
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	da07      	bge.n	8006f46 <__ieee754_pow+0x18e>
 8006f36:	9a00      	ldr	r2, [sp, #0]
 8006f38:	9b01      	ldr	r3, [sp, #4]
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	492b      	ldr	r1, [pc, #172]	; (8006fec <__ieee754_pow+0x234>)
 8006f3e:	f7fa f86f 	bl	8001020 <__aeabi_ddiv>
 8006f42:	9000      	str	r0, [sp, #0]
 8006f44:	9101      	str	r1, [sp, #4]
 8006f46:	9b08      	ldr	r3, [sp, #32]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dac7      	bge.n	8006edc <__ieee754_pow+0x124>
 8006f4c:	4b22      	ldr	r3, [pc, #136]	; (8006fd8 <__ieee754_pow+0x220>)
 8006f4e:	18e4      	adds	r4, r4, r3
 8006f50:	9b06      	ldr	r3, [sp, #24]
 8006f52:	431c      	orrs	r4, r3
 8006f54:	d108      	bne.n	8006f68 <__ieee754_pow+0x1b0>
 8006f56:	9a00      	ldr	r2, [sp, #0]
 8006f58:	9b01      	ldr	r3, [sp, #4]
 8006f5a:	0010      	movs	r0, r2
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	f7fa fedb 	bl	8001d18 <__aeabi_dsub>
 8006f62:	0002      	movs	r2, r0
 8006f64:	000b      	movs	r3, r1
 8006f66:	e7a9      	b.n	8006ebc <__ieee754_pow+0x104>
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d1b6      	bne.n	8006edc <__ieee754_pow+0x124>
 8006f6e:	9800      	ldr	r0, [sp, #0]
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	0002      	movs	r2, r0
 8006f74:	9801      	ldr	r0, [sp, #4]
 8006f76:	0609      	lsls	r1, r1, #24
 8006f78:	1843      	adds	r3, r0, r1
 8006f7a:	9200      	str	r2, [sp, #0]
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	e7ad      	b.n	8006edc <__ieee754_pow+0x124>
 8006f80:	0ff3      	lsrs	r3, r6, #31
 8006f82:	3b01      	subs	r3, #1
 8006f84:	9310      	str	r3, [sp, #64]	; 0x40
 8006f86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	d104      	bne.n	8006f98 <__ieee754_pow+0x1e0>
 8006f8e:	003a      	movs	r2, r7
 8006f90:	0033      	movs	r3, r6
 8006f92:	0038      	movs	r0, r7
 8006f94:	0031      	movs	r1, r6
 8006f96:	e7e2      	b.n	8006f5e <__ieee754_pow+0x1a6>
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <__ieee754_pow+0x23c>)
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	dc00      	bgt.n	8006fa0 <__ieee754_pow+0x1e8>
 8006f9e:	e0f7      	b.n	8007190 <__ieee754_pow+0x3d8>
 8006fa0:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <__ieee754_pow+0x240>)
 8006fa2:	429d      	cmp	r5, r3
 8006fa4:	dd0b      	ble.n	8006fbe <__ieee754_pow+0x206>
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <__ieee754_pow+0x22c>)
 8006fa8:	429c      	cmp	r4, r3
 8006faa:	dc0e      	bgt.n	8006fca <__ieee754_pow+0x212>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	db00      	blt.n	8006fb4 <__ieee754_pow+0x1fc>
 8006fb2:	e761      	b.n	8006e78 <__ieee754_pow+0xc0>
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <__ieee754_pow+0x244>)
 8006fb6:	4b12      	ldr	r3, [pc, #72]	; (8007000 <__ieee754_pow+0x248>)
 8006fb8:	0010      	movs	r0, r2
 8006fba:	0019      	movs	r1, r3
 8006fbc:	e79b      	b.n	8006ef6 <__ieee754_pow+0x13e>
 8006fbe:	4b11      	ldr	r3, [pc, #68]	; (8007004 <__ieee754_pow+0x24c>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	ddf3      	ble.n	8006fac <__ieee754_pow+0x1f4>
 8006fc4:	4b09      	ldr	r3, [pc, #36]	; (8006fec <__ieee754_pow+0x234>)
 8006fc6:	429c      	cmp	r4, r3
 8006fc8:	dd1e      	ble.n	8007008 <__ieee754_pow+0x250>
 8006fca:	9b04      	ldr	r3, [sp, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dcf1      	bgt.n	8006fb4 <__ieee754_pow+0x1fc>
 8006fd0:	e752      	b.n	8006e78 <__ieee754_pow+0xc0>
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	7ff00000 	.word	0x7ff00000
 8006fd8:	c0100000 	.word	0xc0100000
 8006fdc:	08007c23 	.word	0x08007c23
 8006fe0:	433fffff 	.word	0x433fffff
 8006fe4:	3fefffff 	.word	0x3fefffff
 8006fe8:	fffffc01 	.word	0xfffffc01
 8006fec:	3ff00000 	.word	0x3ff00000
 8006ff0:	3fe00000 	.word	0x3fe00000
 8006ff4:	41e00000 	.word	0x41e00000
 8006ff8:	43f00000 	.word	0x43f00000
 8006ffc:	8800759c 	.word	0x8800759c
 8007000:	7e37e43c 	.word	0x7e37e43c
 8007004:	3feffffe 	.word	0x3feffffe
 8007008:	2200      	movs	r2, #0
 800700a:	9800      	ldr	r0, [sp, #0]
 800700c:	9901      	ldr	r1, [sp, #4]
 800700e:	4b52      	ldr	r3, [pc, #328]	; (8007158 <__ieee754_pow+0x3a0>)
 8007010:	f7fa fe82 	bl	8001d18 <__aeabi_dsub>
 8007014:	22c0      	movs	r2, #192	; 0xc0
 8007016:	4b51      	ldr	r3, [pc, #324]	; (800715c <__ieee754_pow+0x3a4>)
 8007018:	05d2      	lsls	r2, r2, #23
 800701a:	0006      	movs	r6, r0
 800701c:	000f      	movs	r7, r1
 800701e:	f7fa fc09 	bl	8001834 <__aeabi_dmul>
 8007022:	4a4f      	ldr	r2, [pc, #316]	; (8007160 <__ieee754_pow+0x3a8>)
 8007024:	9000      	str	r0, [sp, #0]
 8007026:	9101      	str	r1, [sp, #4]
 8007028:	4b4e      	ldr	r3, [pc, #312]	; (8007164 <__ieee754_pow+0x3ac>)
 800702a:	0030      	movs	r0, r6
 800702c:	0039      	movs	r1, r7
 800702e:	f7fa fc01 	bl	8001834 <__aeabi_dmul>
 8007032:	2200      	movs	r2, #0
 8007034:	9004      	str	r0, [sp, #16]
 8007036:	9105      	str	r1, [sp, #20]
 8007038:	4b4b      	ldr	r3, [pc, #300]	; (8007168 <__ieee754_pow+0x3b0>)
 800703a:	0030      	movs	r0, r6
 800703c:	0039      	movs	r1, r7
 800703e:	f7fa fbf9 	bl	8001834 <__aeabi_dmul>
 8007042:	0002      	movs	r2, r0
 8007044:	000b      	movs	r3, r1
 8007046:	4849      	ldr	r0, [pc, #292]	; (800716c <__ieee754_pow+0x3b4>)
 8007048:	4949      	ldr	r1, [pc, #292]	; (8007170 <__ieee754_pow+0x3b8>)
 800704a:	f7fa fe65 	bl	8001d18 <__aeabi_dsub>
 800704e:	0032      	movs	r2, r6
 8007050:	003b      	movs	r3, r7
 8007052:	f7fa fbef 	bl	8001834 <__aeabi_dmul>
 8007056:	0002      	movs	r2, r0
 8007058:	000b      	movs	r3, r1
 800705a:	2000      	movs	r0, #0
 800705c:	4945      	ldr	r1, [pc, #276]	; (8007174 <__ieee754_pow+0x3bc>)
 800705e:	f7fa fe5b 	bl	8001d18 <__aeabi_dsub>
 8007062:	0032      	movs	r2, r6
 8007064:	0004      	movs	r4, r0
 8007066:	000d      	movs	r5, r1
 8007068:	003b      	movs	r3, r7
 800706a:	0030      	movs	r0, r6
 800706c:	0039      	movs	r1, r7
 800706e:	f7fa fbe1 	bl	8001834 <__aeabi_dmul>
 8007072:	0002      	movs	r2, r0
 8007074:	000b      	movs	r3, r1
 8007076:	0020      	movs	r0, r4
 8007078:	0029      	movs	r1, r5
 800707a:	f7fa fbdb 	bl	8001834 <__aeabi_dmul>
 800707e:	4a3e      	ldr	r2, [pc, #248]	; (8007178 <__ieee754_pow+0x3c0>)
 8007080:	4b36      	ldr	r3, [pc, #216]	; (800715c <__ieee754_pow+0x3a4>)
 8007082:	f7fa fbd7 	bl	8001834 <__aeabi_dmul>
 8007086:	0002      	movs	r2, r0
 8007088:	000b      	movs	r3, r1
 800708a:	9804      	ldr	r0, [sp, #16]
 800708c:	9905      	ldr	r1, [sp, #20]
 800708e:	f7fa fe43 	bl	8001d18 <__aeabi_dsub>
 8007092:	0002      	movs	r2, r0
 8007094:	000b      	movs	r3, r1
 8007096:	0004      	movs	r4, r0
 8007098:	000d      	movs	r5, r1
 800709a:	9800      	ldr	r0, [sp, #0]
 800709c:	9901      	ldr	r1, [sp, #4]
 800709e:	f7f9 fca3 	bl	80009e8 <__aeabi_dadd>
 80070a2:	9a00      	ldr	r2, [sp, #0]
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	2000      	movs	r0, #0
 80070a8:	9004      	str	r0, [sp, #16]
 80070aa:	9105      	str	r1, [sp, #20]
 80070ac:	f7fa fe34 	bl	8001d18 <__aeabi_dsub>
 80070b0:	0002      	movs	r2, r0
 80070b2:	000b      	movs	r3, r1
 80070b4:	0020      	movs	r0, r4
 80070b6:	0029      	movs	r1, r5
 80070b8:	f7fa fe2e 	bl	8001d18 <__aeabi_dsub>
 80070bc:	9b06      	ldr	r3, [sp, #24]
 80070be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070c0:	3b01      	subs	r3, #1
 80070c2:	0006      	movs	r6, r0
 80070c4:	000f      	movs	r7, r1
 80070c6:	4313      	orrs	r3, r2
 80070c8:	d000      	beq.n	80070cc <__ieee754_pow+0x314>
 80070ca:	e1de      	b.n	800748a <__ieee754_pow+0x6d2>
 80070cc:	2300      	movs	r3, #0
 80070ce:	4c2b      	ldr	r4, [pc, #172]	; (800717c <__ieee754_pow+0x3c4>)
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	9401      	str	r4, [sp, #4]
 80070d4:	9c02      	ldr	r4, [sp, #8]
 80070d6:	9d03      	ldr	r5, [sp, #12]
 80070d8:	9802      	ldr	r0, [sp, #8]
 80070da:	9903      	ldr	r1, [sp, #12]
 80070dc:	2400      	movs	r4, #0
 80070de:	002b      	movs	r3, r5
 80070e0:	0022      	movs	r2, r4
 80070e2:	f7fa fe19 	bl	8001d18 <__aeabi_dsub>
 80070e6:	9a04      	ldr	r2, [sp, #16]
 80070e8:	9b05      	ldr	r3, [sp, #20]
 80070ea:	f7fa fba3 	bl	8001834 <__aeabi_dmul>
 80070ee:	9a02      	ldr	r2, [sp, #8]
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	9006      	str	r0, [sp, #24]
 80070f4:	9107      	str	r1, [sp, #28]
 80070f6:	0030      	movs	r0, r6
 80070f8:	0039      	movs	r1, r7
 80070fa:	f7fa fb9b 	bl	8001834 <__aeabi_dmul>
 80070fe:	0002      	movs	r2, r0
 8007100:	000b      	movs	r3, r1
 8007102:	9806      	ldr	r0, [sp, #24]
 8007104:	9907      	ldr	r1, [sp, #28]
 8007106:	f7f9 fc6f 	bl	80009e8 <__aeabi_dadd>
 800710a:	0022      	movs	r2, r4
 800710c:	002b      	movs	r3, r5
 800710e:	9006      	str	r0, [sp, #24]
 8007110:	9107      	str	r1, [sp, #28]
 8007112:	9804      	ldr	r0, [sp, #16]
 8007114:	9905      	ldr	r1, [sp, #20]
 8007116:	f7fa fb8d 	bl	8001834 <__aeabi_dmul>
 800711a:	0006      	movs	r6, r0
 800711c:	000f      	movs	r7, r1
 800711e:	000b      	movs	r3, r1
 8007120:	0002      	movs	r2, r0
 8007122:	9806      	ldr	r0, [sp, #24]
 8007124:	9907      	ldr	r1, [sp, #28]
 8007126:	9604      	str	r6, [sp, #16]
 8007128:	9705      	str	r7, [sp, #20]
 800712a:	f7f9 fc5d 	bl	80009e8 <__aeabi_dadd>
 800712e:	4b14      	ldr	r3, [pc, #80]	; (8007180 <__ieee754_pow+0x3c8>)
 8007130:	0005      	movs	r5, r0
 8007132:	000c      	movs	r4, r1
 8007134:	9108      	str	r1, [sp, #32]
 8007136:	4299      	cmp	r1, r3
 8007138:	dc00      	bgt.n	800713c <__ieee754_pow+0x384>
 800713a:	e2d8      	b.n	80076ee <__ieee754_pow+0x936>
 800713c:	4b11      	ldr	r3, [pc, #68]	; (8007184 <__ieee754_pow+0x3cc>)
 800713e:	18cb      	adds	r3, r1, r3
 8007140:	4303      	orrs	r3, r0
 8007142:	d100      	bne.n	8007146 <__ieee754_pow+0x38e>
 8007144:	e1da      	b.n	80074fc <__ieee754_pow+0x744>
 8007146:	9800      	ldr	r0, [sp, #0]
 8007148:	9901      	ldr	r1, [sp, #4]
 800714a:	4a0f      	ldr	r2, [pc, #60]	; (8007188 <__ieee754_pow+0x3d0>)
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <__ieee754_pow+0x3d4>)
 800714e:	f7fa fb71 	bl	8001834 <__aeabi_dmul>
 8007152:	4a0d      	ldr	r2, [pc, #52]	; (8007188 <__ieee754_pow+0x3d0>)
 8007154:	4b0d      	ldr	r3, [pc, #52]	; (800718c <__ieee754_pow+0x3d4>)
 8007156:	e6ce      	b.n	8006ef6 <__ieee754_pow+0x13e>
 8007158:	3ff00000 	.word	0x3ff00000
 800715c:	3ff71547 	.word	0x3ff71547
 8007160:	f85ddf44 	.word	0xf85ddf44
 8007164:	3e54ae0b 	.word	0x3e54ae0b
 8007168:	3fd00000 	.word	0x3fd00000
 800716c:	55555555 	.word	0x55555555
 8007170:	3fd55555 	.word	0x3fd55555
 8007174:	3fe00000 	.word	0x3fe00000
 8007178:	652b82fe 	.word	0x652b82fe
 800717c:	bff00000 	.word	0xbff00000
 8007180:	408fffff 	.word	0x408fffff
 8007184:	bf700000 	.word	0xbf700000
 8007188:	8800759c 	.word	0x8800759c
 800718c:	7e37e43c 	.word	0x7e37e43c
 8007190:	4bbf      	ldr	r3, [pc, #764]	; (8007490 <__ieee754_pow+0x6d8>)
 8007192:	2200      	movs	r2, #0
 8007194:	429c      	cmp	r4, r3
 8007196:	dc0a      	bgt.n	80071ae <__ieee754_pow+0x3f6>
 8007198:	9800      	ldr	r0, [sp, #0]
 800719a:	9901      	ldr	r1, [sp, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	4bbd      	ldr	r3, [pc, #756]	; (8007494 <__ieee754_pow+0x6dc>)
 80071a0:	f7fa fb48 	bl	8001834 <__aeabi_dmul>
 80071a4:	2235      	movs	r2, #53	; 0x35
 80071a6:	9000      	str	r0, [sp, #0]
 80071a8:	9101      	str	r1, [sp, #4]
 80071aa:	9c01      	ldr	r4, [sp, #4]
 80071ac:	4252      	negs	r2, r2
 80071ae:	49ba      	ldr	r1, [pc, #744]	; (8007498 <__ieee754_pow+0x6e0>)
 80071b0:	1523      	asrs	r3, r4, #20
 80071b2:	185b      	adds	r3, r3, r1
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	0324      	lsls	r4, r4, #12
 80071b8:	4db8      	ldr	r5, [pc, #736]	; (800749c <__ieee754_pow+0x6e4>)
 80071ba:	4ab9      	ldr	r2, [pc, #740]	; (80074a0 <__ieee754_pow+0x6e8>)
 80071bc:	930d      	str	r3, [sp, #52]	; 0x34
 80071be:	0b23      	lsrs	r3, r4, #12
 80071c0:	431d      	orrs	r5, r3
 80071c2:	2400      	movs	r4, #0
 80071c4:	4293      	cmp	r3, r2
 80071c6:	dd09      	ble.n	80071dc <__ieee754_pow+0x424>
 80071c8:	4ab6      	ldr	r2, [pc, #728]	; (80074a4 <__ieee754_pow+0x6ec>)
 80071ca:	3401      	adds	r4, #1
 80071cc:	4293      	cmp	r3, r2
 80071ce:	dd05      	ble.n	80071dc <__ieee754_pow+0x424>
 80071d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d2:	191b      	adds	r3, r3, r4
 80071d4:	2400      	movs	r4, #0
 80071d6:	930d      	str	r3, [sp, #52]	; 0x34
 80071d8:	4bb3      	ldr	r3, [pc, #716]	; (80074a8 <__ieee754_pow+0x6f0>)
 80071da:	18ed      	adds	r5, r5, r3
 80071dc:	9800      	ldr	r0, [sp, #0]
 80071de:	9901      	ldr	r1, [sp, #4]
 80071e0:	0029      	movs	r1, r5
 80071e2:	00e3      	lsls	r3, r4, #3
 80071e4:	9311      	str	r3, [sp, #68]	; 0x44
 80071e6:	4bb1      	ldr	r3, [pc, #708]	; (80074ac <__ieee754_pow+0x6f4>)
 80071e8:	00e2      	lsls	r2, r4, #3
 80071ea:	189b      	adds	r3, r3, r2
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	900e      	str	r0, [sp, #56]	; 0x38
 80071f2:	910f      	str	r1, [sp, #60]	; 0x3c
 80071f4:	920a      	str	r2, [sp, #40]	; 0x28
 80071f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f8:	f7fa fd8e 	bl	8001d18 <__aeabi_dsub>
 80071fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007200:	0006      	movs	r6, r0
 8007202:	000f      	movs	r7, r1
 8007204:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007208:	f7f9 fbee 	bl	80009e8 <__aeabi_dadd>
 800720c:	0002      	movs	r2, r0
 800720e:	000b      	movs	r3, r1
 8007210:	2000      	movs	r0, #0
 8007212:	49a2      	ldr	r1, [pc, #648]	; (800749c <__ieee754_pow+0x6e4>)
 8007214:	f7f9 ff04 	bl	8001020 <__aeabi_ddiv>
 8007218:	9012      	str	r0, [sp, #72]	; 0x48
 800721a:	9113      	str	r1, [sp, #76]	; 0x4c
 800721c:	0002      	movs	r2, r0
 800721e:	000b      	movs	r3, r1
 8007220:	0030      	movs	r0, r6
 8007222:	0039      	movs	r1, r7
 8007224:	f7fa fb06 	bl	8001834 <__aeabi_dmul>
 8007228:	9008      	str	r0, [sp, #32]
 800722a:	9109      	str	r1, [sp, #36]	; 0x24
 800722c:	9a08      	ldr	r2, [sp, #32]
 800722e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007230:	2180      	movs	r1, #128	; 0x80
 8007232:	9204      	str	r2, [sp, #16]
 8007234:	9305      	str	r3, [sp, #20]
 8007236:	2300      	movs	r3, #0
 8007238:	0589      	lsls	r1, r1, #22
 800723a:	106d      	asrs	r5, r5, #1
 800723c:	430d      	orrs	r5, r1
 800723e:	2180      	movs	r1, #128	; 0x80
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	9a04      	ldr	r2, [sp, #16]
 8007244:	9b05      	ldr	r3, [sp, #20]
 8007246:	9200      	str	r2, [sp, #0]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	0309      	lsls	r1, r1, #12
 800724e:	186d      	adds	r5, r5, r1
 8007250:	04a4      	lsls	r4, r4, #18
 8007252:	192b      	adds	r3, r5, r4
 8007254:	9800      	ldr	r0, [sp, #0]
 8007256:	9901      	ldr	r1, [sp, #4]
 8007258:	0014      	movs	r4, r2
 800725a:	001d      	movs	r5, r3
 800725c:	f7fa faea 	bl	8001834 <__aeabi_dmul>
 8007260:	0002      	movs	r2, r0
 8007262:	000b      	movs	r3, r1
 8007264:	0030      	movs	r0, r6
 8007266:	0039      	movs	r1, r7
 8007268:	f7fa fd56 	bl	8001d18 <__aeabi_dsub>
 800726c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800726e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007270:	0006      	movs	r6, r0
 8007272:	000f      	movs	r7, r1
 8007274:	0020      	movs	r0, r4
 8007276:	0029      	movs	r1, r5
 8007278:	f7fa fd4e 	bl	8001d18 <__aeabi_dsub>
 800727c:	0002      	movs	r2, r0
 800727e:	000b      	movs	r3, r1
 8007280:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007282:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007284:	f7fa fd48 	bl	8001d18 <__aeabi_dsub>
 8007288:	9a00      	ldr	r2, [sp, #0]
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	f7fa fad2 	bl	8001834 <__aeabi_dmul>
 8007290:	0002      	movs	r2, r0
 8007292:	000b      	movs	r3, r1
 8007294:	0030      	movs	r0, r6
 8007296:	0039      	movs	r1, r7
 8007298:	f7fa fd3e 	bl	8001d18 <__aeabi_dsub>
 800729c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800729e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072a0:	f7fa fac8 	bl	8001834 <__aeabi_dmul>
 80072a4:	9a08      	ldr	r2, [sp, #32]
 80072a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a8:	900a      	str	r0, [sp, #40]	; 0x28
 80072aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80072ac:	0010      	movs	r0, r2
 80072ae:	0019      	movs	r1, r3
 80072b0:	f7fa fac0 	bl	8001834 <__aeabi_dmul>
 80072b4:	0006      	movs	r6, r0
 80072b6:	000f      	movs	r7, r1
 80072b8:	4a7d      	ldr	r2, [pc, #500]	; (80074b0 <__ieee754_pow+0x6f8>)
 80072ba:	4b7e      	ldr	r3, [pc, #504]	; (80074b4 <__ieee754_pow+0x6fc>)
 80072bc:	f7fa faba 	bl	8001834 <__aeabi_dmul>
 80072c0:	4a7d      	ldr	r2, [pc, #500]	; (80074b8 <__ieee754_pow+0x700>)
 80072c2:	4b7e      	ldr	r3, [pc, #504]	; (80074bc <__ieee754_pow+0x704>)
 80072c4:	f7f9 fb90 	bl	80009e8 <__aeabi_dadd>
 80072c8:	0032      	movs	r2, r6
 80072ca:	003b      	movs	r3, r7
 80072cc:	f7fa fab2 	bl	8001834 <__aeabi_dmul>
 80072d0:	4a7b      	ldr	r2, [pc, #492]	; (80074c0 <__ieee754_pow+0x708>)
 80072d2:	4b7c      	ldr	r3, [pc, #496]	; (80074c4 <__ieee754_pow+0x70c>)
 80072d4:	f7f9 fb88 	bl	80009e8 <__aeabi_dadd>
 80072d8:	0032      	movs	r2, r6
 80072da:	003b      	movs	r3, r7
 80072dc:	f7fa faaa 	bl	8001834 <__aeabi_dmul>
 80072e0:	4a79      	ldr	r2, [pc, #484]	; (80074c8 <__ieee754_pow+0x710>)
 80072e2:	4b7a      	ldr	r3, [pc, #488]	; (80074cc <__ieee754_pow+0x714>)
 80072e4:	f7f9 fb80 	bl	80009e8 <__aeabi_dadd>
 80072e8:	0032      	movs	r2, r6
 80072ea:	003b      	movs	r3, r7
 80072ec:	f7fa faa2 	bl	8001834 <__aeabi_dmul>
 80072f0:	4a77      	ldr	r2, [pc, #476]	; (80074d0 <__ieee754_pow+0x718>)
 80072f2:	4b78      	ldr	r3, [pc, #480]	; (80074d4 <__ieee754_pow+0x71c>)
 80072f4:	f7f9 fb78 	bl	80009e8 <__aeabi_dadd>
 80072f8:	0032      	movs	r2, r6
 80072fa:	003b      	movs	r3, r7
 80072fc:	f7fa fa9a 	bl	8001834 <__aeabi_dmul>
 8007300:	4a75      	ldr	r2, [pc, #468]	; (80074d8 <__ieee754_pow+0x720>)
 8007302:	4b76      	ldr	r3, [pc, #472]	; (80074dc <__ieee754_pow+0x724>)
 8007304:	f7f9 fb70 	bl	80009e8 <__aeabi_dadd>
 8007308:	0032      	movs	r2, r6
 800730a:	0004      	movs	r4, r0
 800730c:	000d      	movs	r5, r1
 800730e:	003b      	movs	r3, r7
 8007310:	0030      	movs	r0, r6
 8007312:	0039      	movs	r1, r7
 8007314:	f7fa fa8e 	bl	8001834 <__aeabi_dmul>
 8007318:	0002      	movs	r2, r0
 800731a:	000b      	movs	r3, r1
 800731c:	0020      	movs	r0, r4
 800731e:	0029      	movs	r1, r5
 8007320:	f7fa fa88 	bl	8001834 <__aeabi_dmul>
 8007324:	9a00      	ldr	r2, [sp, #0]
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	0004      	movs	r4, r0
 800732a:	000d      	movs	r5, r1
 800732c:	9808      	ldr	r0, [sp, #32]
 800732e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007330:	f7f9 fb5a 	bl	80009e8 <__aeabi_dadd>
 8007334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007338:	f7fa fa7c 	bl	8001834 <__aeabi_dmul>
 800733c:	0022      	movs	r2, r4
 800733e:	002b      	movs	r3, r5
 8007340:	f7f9 fb52 	bl	80009e8 <__aeabi_dadd>
 8007344:	9a00      	ldr	r2, [sp, #0]
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	900e      	str	r0, [sp, #56]	; 0x38
 800734a:	910f      	str	r1, [sp, #60]	; 0x3c
 800734c:	0010      	movs	r0, r2
 800734e:	0019      	movs	r1, r3
 8007350:	f7fa fa70 	bl	8001834 <__aeabi_dmul>
 8007354:	2200      	movs	r2, #0
 8007356:	4b62      	ldr	r3, [pc, #392]	; (80074e0 <__ieee754_pow+0x728>)
 8007358:	0004      	movs	r4, r0
 800735a:	000d      	movs	r5, r1
 800735c:	f7f9 fb44 	bl	80009e8 <__aeabi_dadd>
 8007360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007364:	f7f9 fb40 	bl	80009e8 <__aeabi_dadd>
 8007368:	9e04      	ldr	r6, [sp, #16]
 800736a:	000f      	movs	r7, r1
 800736c:	0032      	movs	r2, r6
 800736e:	000b      	movs	r3, r1
 8007370:	9800      	ldr	r0, [sp, #0]
 8007372:	9901      	ldr	r1, [sp, #4]
 8007374:	f7fa fa5e 	bl	8001834 <__aeabi_dmul>
 8007378:	2200      	movs	r2, #0
 800737a:	9000      	str	r0, [sp, #0]
 800737c:	9101      	str	r1, [sp, #4]
 800737e:	4b58      	ldr	r3, [pc, #352]	; (80074e0 <__ieee754_pow+0x728>)
 8007380:	0030      	movs	r0, r6
 8007382:	0039      	movs	r1, r7
 8007384:	f7fa fcc8 	bl	8001d18 <__aeabi_dsub>
 8007388:	0022      	movs	r2, r4
 800738a:	002b      	movs	r3, r5
 800738c:	f7fa fcc4 	bl	8001d18 <__aeabi_dsub>
 8007390:	0002      	movs	r2, r0
 8007392:	000b      	movs	r3, r1
 8007394:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007396:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007398:	f7fa fcbe 	bl	8001d18 <__aeabi_dsub>
 800739c:	9a08      	ldr	r2, [sp, #32]
 800739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a0:	f7fa fa48 	bl	8001834 <__aeabi_dmul>
 80073a4:	0032      	movs	r2, r6
 80073a6:	0004      	movs	r4, r0
 80073a8:	000d      	movs	r5, r1
 80073aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ae:	003b      	movs	r3, r7
 80073b0:	f7fa fa40 	bl	8001834 <__aeabi_dmul>
 80073b4:	0002      	movs	r2, r0
 80073b6:	000b      	movs	r3, r1
 80073b8:	0020      	movs	r0, r4
 80073ba:	0029      	movs	r1, r5
 80073bc:	f7f9 fb14 	bl	80009e8 <__aeabi_dadd>
 80073c0:	0004      	movs	r4, r0
 80073c2:	000d      	movs	r5, r1
 80073c4:	0002      	movs	r2, r0
 80073c6:	000b      	movs	r3, r1
 80073c8:	9800      	ldr	r0, [sp, #0]
 80073ca:	9901      	ldr	r1, [sp, #4]
 80073cc:	f7f9 fb0c 	bl	80009e8 <__aeabi_dadd>
 80073d0:	22e0      	movs	r2, #224	; 0xe0
 80073d2:	9e04      	ldr	r6, [sp, #16]
 80073d4:	0612      	lsls	r2, r2, #24
 80073d6:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <__ieee754_pow+0x72c>)
 80073d8:	0030      	movs	r0, r6
 80073da:	000f      	movs	r7, r1
 80073dc:	f7fa fa2a 	bl	8001834 <__aeabi_dmul>
 80073e0:	9008      	str	r0, [sp, #32]
 80073e2:	9109      	str	r1, [sp, #36]	; 0x24
 80073e4:	9a00      	ldr	r2, [sp, #0]
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	0030      	movs	r0, r6
 80073ea:	0039      	movs	r1, r7
 80073ec:	f7fa fc94 	bl	8001d18 <__aeabi_dsub>
 80073f0:	0002      	movs	r2, r0
 80073f2:	000b      	movs	r3, r1
 80073f4:	0020      	movs	r0, r4
 80073f6:	0029      	movs	r1, r5
 80073f8:	f7fa fc8e 	bl	8001d18 <__aeabi_dsub>
 80073fc:	4a3a      	ldr	r2, [pc, #232]	; (80074e8 <__ieee754_pow+0x730>)
 80073fe:	4b39      	ldr	r3, [pc, #228]	; (80074e4 <__ieee754_pow+0x72c>)
 8007400:	f7fa fa18 	bl	8001834 <__aeabi_dmul>
 8007404:	4a39      	ldr	r2, [pc, #228]	; (80074ec <__ieee754_pow+0x734>)
 8007406:	0004      	movs	r4, r0
 8007408:	000d      	movs	r5, r1
 800740a:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <__ieee754_pow+0x738>)
 800740c:	0030      	movs	r0, r6
 800740e:	0039      	movs	r1, r7
 8007410:	f7fa fa10 	bl	8001834 <__aeabi_dmul>
 8007414:	0002      	movs	r2, r0
 8007416:	000b      	movs	r3, r1
 8007418:	0020      	movs	r0, r4
 800741a:	0029      	movs	r1, r5
 800741c:	f7f9 fae4 	bl	80009e8 <__aeabi_dadd>
 8007420:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007422:	4b34      	ldr	r3, [pc, #208]	; (80074f4 <__ieee754_pow+0x73c>)
 8007424:	189b      	adds	r3, r3, r2
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f7f9 fadd 	bl	80009e8 <__aeabi_dadd>
 800742e:	9000      	str	r0, [sp, #0]
 8007430:	9101      	str	r1, [sp, #4]
 8007432:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007434:	f7fa ffd4 	bl	80023e0 <__aeabi_i2d>
 8007438:	0004      	movs	r4, r0
 800743a:	000d      	movs	r5, r1
 800743c:	9808      	ldr	r0, [sp, #32]
 800743e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007442:	4b2d      	ldr	r3, [pc, #180]	; (80074f8 <__ieee754_pow+0x740>)
 8007444:	189b      	adds	r3, r3, r2
 8007446:	681e      	ldr	r6, [r3, #0]
 8007448:	685f      	ldr	r7, [r3, #4]
 800744a:	9a00      	ldr	r2, [sp, #0]
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	f7f9 facb 	bl	80009e8 <__aeabi_dadd>
 8007452:	0032      	movs	r2, r6
 8007454:	003b      	movs	r3, r7
 8007456:	f7f9 fac7 	bl	80009e8 <__aeabi_dadd>
 800745a:	0022      	movs	r2, r4
 800745c:	002b      	movs	r3, r5
 800745e:	f7f9 fac3 	bl	80009e8 <__aeabi_dadd>
 8007462:	9804      	ldr	r0, [sp, #16]
 8007464:	0022      	movs	r2, r4
 8007466:	002b      	movs	r3, r5
 8007468:	9004      	str	r0, [sp, #16]
 800746a:	9105      	str	r1, [sp, #20]
 800746c:	f7fa fc54 	bl	8001d18 <__aeabi_dsub>
 8007470:	0032      	movs	r2, r6
 8007472:	003b      	movs	r3, r7
 8007474:	f7fa fc50 	bl	8001d18 <__aeabi_dsub>
 8007478:	9a08      	ldr	r2, [sp, #32]
 800747a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747c:	f7fa fc4c 	bl	8001d18 <__aeabi_dsub>
 8007480:	0002      	movs	r2, r0
 8007482:	000b      	movs	r3, r1
 8007484:	9800      	ldr	r0, [sp, #0]
 8007486:	9901      	ldr	r1, [sp, #4]
 8007488:	e616      	b.n	80070b8 <__ieee754_pow+0x300>
 800748a:	2300      	movs	r3, #0
 800748c:	4c03      	ldr	r4, [pc, #12]	; (800749c <__ieee754_pow+0x6e4>)
 800748e:	e61f      	b.n	80070d0 <__ieee754_pow+0x318>
 8007490:	000fffff 	.word	0x000fffff
 8007494:	43400000 	.word	0x43400000
 8007498:	fffffc01 	.word	0xfffffc01
 800749c:	3ff00000 	.word	0x3ff00000
 80074a0:	0003988e 	.word	0x0003988e
 80074a4:	000bb679 	.word	0x000bb679
 80074a8:	fff00000 	.word	0xfff00000
 80074ac:	08007c28 	.word	0x08007c28
 80074b0:	4a454eef 	.word	0x4a454eef
 80074b4:	3fca7e28 	.word	0x3fca7e28
 80074b8:	93c9db65 	.word	0x93c9db65
 80074bc:	3fcd864a 	.word	0x3fcd864a
 80074c0:	a91d4101 	.word	0xa91d4101
 80074c4:	3fd17460 	.word	0x3fd17460
 80074c8:	518f264d 	.word	0x518f264d
 80074cc:	3fd55555 	.word	0x3fd55555
 80074d0:	db6fabff 	.word	0xdb6fabff
 80074d4:	3fdb6db6 	.word	0x3fdb6db6
 80074d8:	33333303 	.word	0x33333303
 80074dc:	3fe33333 	.word	0x3fe33333
 80074e0:	40080000 	.word	0x40080000
 80074e4:	3feec709 	.word	0x3feec709
 80074e8:	dc3a03fd 	.word	0xdc3a03fd
 80074ec:	145b01f5 	.word	0x145b01f5
 80074f0:	be3e2fe0 	.word	0xbe3e2fe0
 80074f4:	08007c48 	.word	0x08007c48
 80074f8:	08007c38 	.word	0x08007c38
 80074fc:	4a8f      	ldr	r2, [pc, #572]	; (800773c <__ieee754_pow+0x984>)
 80074fe:	4b90      	ldr	r3, [pc, #576]	; (8007740 <__ieee754_pow+0x988>)
 8007500:	9806      	ldr	r0, [sp, #24]
 8007502:	9907      	ldr	r1, [sp, #28]
 8007504:	f7f9 fa70 	bl	80009e8 <__aeabi_dadd>
 8007508:	0032      	movs	r2, r6
 800750a:	9002      	str	r0, [sp, #8]
 800750c:	9103      	str	r1, [sp, #12]
 800750e:	003b      	movs	r3, r7
 8007510:	0028      	movs	r0, r5
 8007512:	0021      	movs	r1, r4
 8007514:	f7fa fc00 	bl	8001d18 <__aeabi_dsub>
 8007518:	0002      	movs	r2, r0
 800751a:	000b      	movs	r3, r1
 800751c:	9802      	ldr	r0, [sp, #8]
 800751e:	9903      	ldr	r1, [sp, #12]
 8007520:	f7f8 fea8 	bl	8000274 <__aeabi_dcmpgt>
 8007524:	2800      	cmp	r0, #0
 8007526:	d000      	beq.n	800752a <__ieee754_pow+0x772>
 8007528:	e60d      	b.n	8007146 <__ieee754_pow+0x38e>
 800752a:	2100      	movs	r1, #0
 800752c:	4a85      	ldr	r2, [pc, #532]	; (8007744 <__ieee754_pow+0x98c>)
 800752e:	0063      	lsls	r3, r4, #1
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	9102      	str	r1, [sp, #8]
 8007534:	4293      	cmp	r3, r2
 8007536:	dd25      	ble.n	8007584 <__ieee754_pow+0x7cc>
 8007538:	4a83      	ldr	r2, [pc, #524]	; (8007748 <__ieee754_pow+0x990>)
 800753a:	151b      	asrs	r3, r3, #20
 800753c:	189b      	adds	r3, r3, r2
 800753e:	2280      	movs	r2, #128	; 0x80
 8007540:	0352      	lsls	r2, r2, #13
 8007542:	4694      	mov	ip, r2
 8007544:	411a      	asrs	r2, r3
 8007546:	1914      	adds	r4, r2, r4
 8007548:	0060      	lsls	r0, r4, #1
 800754a:	4b80      	ldr	r3, [pc, #512]	; (800774c <__ieee754_pow+0x994>)
 800754c:	0d40      	lsrs	r0, r0, #21
 800754e:	4d80      	ldr	r5, [pc, #512]	; (8007750 <__ieee754_pow+0x998>)
 8007550:	18c0      	adds	r0, r0, r3
 8007552:	4105      	asrs	r5, r0
 8007554:	0021      	movs	r1, r4
 8007556:	43a9      	bics	r1, r5
 8007558:	000b      	movs	r3, r1
 800755a:	4661      	mov	r1, ip
 800755c:	0324      	lsls	r4, r4, #12
 800755e:	0b24      	lsrs	r4, r4, #12
 8007560:	4321      	orrs	r1, r4
 8007562:	2414      	movs	r4, #20
 8007564:	1a20      	subs	r0, r4, r0
 8007566:	4101      	asrs	r1, r0
 8007568:	9102      	str	r1, [sp, #8]
 800756a:	9908      	ldr	r1, [sp, #32]
 800756c:	2200      	movs	r2, #0
 800756e:	2900      	cmp	r1, #0
 8007570:	da02      	bge.n	8007578 <__ieee754_pow+0x7c0>
 8007572:	9902      	ldr	r1, [sp, #8]
 8007574:	4249      	negs	r1, r1
 8007576:	9102      	str	r1, [sp, #8]
 8007578:	0030      	movs	r0, r6
 800757a:	0039      	movs	r1, r7
 800757c:	f7fa fbcc 	bl	8001d18 <__aeabi_dsub>
 8007580:	9004      	str	r0, [sp, #16]
 8007582:	9105      	str	r1, [sp, #20]
 8007584:	9a06      	ldr	r2, [sp, #24]
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	9804      	ldr	r0, [sp, #16]
 800758a:	9905      	ldr	r1, [sp, #20]
 800758c:	2600      	movs	r6, #0
 800758e:	f7f9 fa2b 	bl	80009e8 <__aeabi_dadd>
 8007592:	2200      	movs	r2, #0
 8007594:	4b6f      	ldr	r3, [pc, #444]	; (8007754 <__ieee754_pow+0x99c>)
 8007596:	0030      	movs	r0, r6
 8007598:	000f      	movs	r7, r1
 800759a:	f7fa f94b 	bl	8001834 <__aeabi_dmul>
 800759e:	9a04      	ldr	r2, [sp, #16]
 80075a0:	9b05      	ldr	r3, [sp, #20]
 80075a2:	9008      	str	r0, [sp, #32]
 80075a4:	9109      	str	r1, [sp, #36]	; 0x24
 80075a6:	0030      	movs	r0, r6
 80075a8:	0039      	movs	r1, r7
 80075aa:	f7fa fbb5 	bl	8001d18 <__aeabi_dsub>
 80075ae:	0002      	movs	r2, r0
 80075b0:	000b      	movs	r3, r1
 80075b2:	9806      	ldr	r0, [sp, #24]
 80075b4:	9907      	ldr	r1, [sp, #28]
 80075b6:	f7fa fbaf 	bl	8001d18 <__aeabi_dsub>
 80075ba:	4a67      	ldr	r2, [pc, #412]	; (8007758 <__ieee754_pow+0x9a0>)
 80075bc:	4b67      	ldr	r3, [pc, #412]	; (800775c <__ieee754_pow+0x9a4>)
 80075be:	f7fa f939 	bl	8001834 <__aeabi_dmul>
 80075c2:	4a67      	ldr	r2, [pc, #412]	; (8007760 <__ieee754_pow+0x9a8>)
 80075c4:	0004      	movs	r4, r0
 80075c6:	000d      	movs	r5, r1
 80075c8:	4b66      	ldr	r3, [pc, #408]	; (8007764 <__ieee754_pow+0x9ac>)
 80075ca:	0030      	movs	r0, r6
 80075cc:	0039      	movs	r1, r7
 80075ce:	f7fa f931 	bl	8001834 <__aeabi_dmul>
 80075d2:	0002      	movs	r2, r0
 80075d4:	000b      	movs	r3, r1
 80075d6:	0020      	movs	r0, r4
 80075d8:	0029      	movs	r1, r5
 80075da:	f7f9 fa05 	bl	80009e8 <__aeabi_dadd>
 80075de:	0004      	movs	r4, r0
 80075e0:	000d      	movs	r5, r1
 80075e2:	0002      	movs	r2, r0
 80075e4:	000b      	movs	r3, r1
 80075e6:	9808      	ldr	r0, [sp, #32]
 80075e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ea:	f7f9 f9fd 	bl	80009e8 <__aeabi_dadd>
 80075ee:	9a08      	ldr	r2, [sp, #32]
 80075f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f2:	0006      	movs	r6, r0
 80075f4:	000f      	movs	r7, r1
 80075f6:	f7fa fb8f 	bl	8001d18 <__aeabi_dsub>
 80075fa:	0002      	movs	r2, r0
 80075fc:	000b      	movs	r3, r1
 80075fe:	0020      	movs	r0, r4
 8007600:	0029      	movs	r1, r5
 8007602:	f7fa fb89 	bl	8001d18 <__aeabi_dsub>
 8007606:	0032      	movs	r2, r6
 8007608:	9004      	str	r0, [sp, #16]
 800760a:	9105      	str	r1, [sp, #20]
 800760c:	003b      	movs	r3, r7
 800760e:	0030      	movs	r0, r6
 8007610:	0039      	movs	r1, r7
 8007612:	f7fa f90f 	bl	8001834 <__aeabi_dmul>
 8007616:	0004      	movs	r4, r0
 8007618:	000d      	movs	r5, r1
 800761a:	4a53      	ldr	r2, [pc, #332]	; (8007768 <__ieee754_pow+0x9b0>)
 800761c:	4b53      	ldr	r3, [pc, #332]	; (800776c <__ieee754_pow+0x9b4>)
 800761e:	f7fa f909 	bl	8001834 <__aeabi_dmul>
 8007622:	4a53      	ldr	r2, [pc, #332]	; (8007770 <__ieee754_pow+0x9b8>)
 8007624:	4b53      	ldr	r3, [pc, #332]	; (8007774 <__ieee754_pow+0x9bc>)
 8007626:	f7fa fb77 	bl	8001d18 <__aeabi_dsub>
 800762a:	0022      	movs	r2, r4
 800762c:	002b      	movs	r3, r5
 800762e:	f7fa f901 	bl	8001834 <__aeabi_dmul>
 8007632:	4a51      	ldr	r2, [pc, #324]	; (8007778 <__ieee754_pow+0x9c0>)
 8007634:	4b51      	ldr	r3, [pc, #324]	; (800777c <__ieee754_pow+0x9c4>)
 8007636:	f7f9 f9d7 	bl	80009e8 <__aeabi_dadd>
 800763a:	0022      	movs	r2, r4
 800763c:	002b      	movs	r3, r5
 800763e:	f7fa f8f9 	bl	8001834 <__aeabi_dmul>
 8007642:	4a4f      	ldr	r2, [pc, #316]	; (8007780 <__ieee754_pow+0x9c8>)
 8007644:	4b4f      	ldr	r3, [pc, #316]	; (8007784 <__ieee754_pow+0x9cc>)
 8007646:	f7fa fb67 	bl	8001d18 <__aeabi_dsub>
 800764a:	0022      	movs	r2, r4
 800764c:	002b      	movs	r3, r5
 800764e:	f7fa f8f1 	bl	8001834 <__aeabi_dmul>
 8007652:	4a4d      	ldr	r2, [pc, #308]	; (8007788 <__ieee754_pow+0x9d0>)
 8007654:	4b4d      	ldr	r3, [pc, #308]	; (800778c <__ieee754_pow+0x9d4>)
 8007656:	f7f9 f9c7 	bl	80009e8 <__aeabi_dadd>
 800765a:	0022      	movs	r2, r4
 800765c:	002b      	movs	r3, r5
 800765e:	f7fa f8e9 	bl	8001834 <__aeabi_dmul>
 8007662:	0002      	movs	r2, r0
 8007664:	000b      	movs	r3, r1
 8007666:	0030      	movs	r0, r6
 8007668:	0039      	movs	r1, r7
 800766a:	f7fa fb55 	bl	8001d18 <__aeabi_dsub>
 800766e:	0004      	movs	r4, r0
 8007670:	000d      	movs	r5, r1
 8007672:	0002      	movs	r2, r0
 8007674:	000b      	movs	r3, r1
 8007676:	0030      	movs	r0, r6
 8007678:	0039      	movs	r1, r7
 800767a:	f7fa f8db 	bl	8001834 <__aeabi_dmul>
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	9006      	str	r0, [sp, #24]
 8007682:	9107      	str	r1, [sp, #28]
 8007684:	2200      	movs	r2, #0
 8007686:	05db      	lsls	r3, r3, #23
 8007688:	0020      	movs	r0, r4
 800768a:	0029      	movs	r1, r5
 800768c:	f7fa fb44 	bl	8001d18 <__aeabi_dsub>
 8007690:	0002      	movs	r2, r0
 8007692:	000b      	movs	r3, r1
 8007694:	9806      	ldr	r0, [sp, #24]
 8007696:	9907      	ldr	r1, [sp, #28]
 8007698:	f7f9 fcc2 	bl	8001020 <__aeabi_ddiv>
 800769c:	9a04      	ldr	r2, [sp, #16]
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	0004      	movs	r4, r0
 80076a2:	000d      	movs	r5, r1
 80076a4:	0030      	movs	r0, r6
 80076a6:	0039      	movs	r1, r7
 80076a8:	f7fa f8c4 	bl	8001834 <__aeabi_dmul>
 80076ac:	9a04      	ldr	r2, [sp, #16]
 80076ae:	9b05      	ldr	r3, [sp, #20]
 80076b0:	f7f9 f99a 	bl	80009e8 <__aeabi_dadd>
 80076b4:	0002      	movs	r2, r0
 80076b6:	000b      	movs	r3, r1
 80076b8:	0020      	movs	r0, r4
 80076ba:	0029      	movs	r1, r5
 80076bc:	f7fa fb2c 	bl	8001d18 <__aeabi_dsub>
 80076c0:	0032      	movs	r2, r6
 80076c2:	003b      	movs	r3, r7
 80076c4:	f7fa fb28 	bl	8001d18 <__aeabi_dsub>
 80076c8:	0002      	movs	r2, r0
 80076ca:	000b      	movs	r3, r1
 80076cc:	2000      	movs	r0, #0
 80076ce:	4930      	ldr	r1, [pc, #192]	; (8007790 <__ieee754_pow+0x9d8>)
 80076d0:	f7fa fb22 	bl	8001d18 <__aeabi_dsub>
 80076d4:	9b02      	ldr	r3, [sp, #8]
 80076d6:	051b      	lsls	r3, r3, #20
 80076d8:	185b      	adds	r3, r3, r1
 80076da:	151a      	asrs	r2, r3, #20
 80076dc:	2a00      	cmp	r2, #0
 80076de:	dc26      	bgt.n	800772e <__ieee754_pow+0x976>
 80076e0:	9a02      	ldr	r2, [sp, #8]
 80076e2:	f000 f9ad 	bl	8007a40 <scalbn>
 80076e6:	9a00      	ldr	r2, [sp, #0]
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	f7ff fc04 	bl	8006ef6 <__ieee754_pow+0x13e>
 80076ee:	4a29      	ldr	r2, [pc, #164]	; (8007794 <__ieee754_pow+0x9dc>)
 80076f0:	004b      	lsls	r3, r1, #1
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	4293      	cmp	r3, r2
 80076f6:	dc00      	bgt.n	80076fa <__ieee754_pow+0x942>
 80076f8:	e717      	b.n	800752a <__ieee754_pow+0x772>
 80076fa:	4b27      	ldr	r3, [pc, #156]	; (8007798 <__ieee754_pow+0x9e0>)
 80076fc:	18cb      	adds	r3, r1, r3
 80076fe:	4303      	orrs	r3, r0
 8007700:	d009      	beq.n	8007716 <__ieee754_pow+0x95e>
 8007702:	9800      	ldr	r0, [sp, #0]
 8007704:	9901      	ldr	r1, [sp, #4]
 8007706:	4a25      	ldr	r2, [pc, #148]	; (800779c <__ieee754_pow+0x9e4>)
 8007708:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <__ieee754_pow+0x9e8>)
 800770a:	f7fa f893 	bl	8001834 <__aeabi_dmul>
 800770e:	4a23      	ldr	r2, [pc, #140]	; (800779c <__ieee754_pow+0x9e4>)
 8007710:	4b23      	ldr	r3, [pc, #140]	; (80077a0 <__ieee754_pow+0x9e8>)
 8007712:	f7ff fbf0 	bl	8006ef6 <__ieee754_pow+0x13e>
 8007716:	0032      	movs	r2, r6
 8007718:	003b      	movs	r3, r7
 800771a:	f7fa fafd 	bl	8001d18 <__aeabi_dsub>
 800771e:	9a06      	ldr	r2, [sp, #24]
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	f7f8 fdb1 	bl	8000288 <__aeabi_dcmpge>
 8007726:	2800      	cmp	r0, #0
 8007728:	d100      	bne.n	800772c <__ieee754_pow+0x974>
 800772a:	e6fe      	b.n	800752a <__ieee754_pow+0x772>
 800772c:	e7e9      	b.n	8007702 <__ieee754_pow+0x94a>
 800772e:	0019      	movs	r1, r3
 8007730:	e7d9      	b.n	80076e6 <__ieee754_pow+0x92e>
 8007732:	2300      	movs	r3, #0
 8007734:	4c16      	ldr	r4, [pc, #88]	; (8007790 <__ieee754_pow+0x9d8>)
 8007736:	f7ff fba1 	bl	8006e7c <__ieee754_pow+0xc4>
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	652b82fe 	.word	0x652b82fe
 8007740:	3c971547 	.word	0x3c971547
 8007744:	3fe00000 	.word	0x3fe00000
 8007748:	fffffc02 	.word	0xfffffc02
 800774c:	fffffc01 	.word	0xfffffc01
 8007750:	000fffff 	.word	0x000fffff
 8007754:	3fe62e43 	.word	0x3fe62e43
 8007758:	fefa39ef 	.word	0xfefa39ef
 800775c:	3fe62e42 	.word	0x3fe62e42
 8007760:	0ca86c39 	.word	0x0ca86c39
 8007764:	be205c61 	.word	0xbe205c61
 8007768:	72bea4d0 	.word	0x72bea4d0
 800776c:	3e663769 	.word	0x3e663769
 8007770:	c5d26bf1 	.word	0xc5d26bf1
 8007774:	3ebbbd41 	.word	0x3ebbbd41
 8007778:	af25de2c 	.word	0xaf25de2c
 800777c:	3f11566a 	.word	0x3f11566a
 8007780:	16bebd93 	.word	0x16bebd93
 8007784:	3f66c16c 	.word	0x3f66c16c
 8007788:	5555553e 	.word	0x5555553e
 800778c:	3fc55555 	.word	0x3fc55555
 8007790:	3ff00000 	.word	0x3ff00000
 8007794:	4090cbff 	.word	0x4090cbff
 8007798:	3f6f3400 	.word	0x3f6f3400
 800779c:	c2f8f359 	.word	0xc2f8f359
 80077a0:	01a56e1f 	.word	0x01a56e1f

080077a4 <__ieee754_sqrt>:
 80077a4:	4b55      	ldr	r3, [pc, #340]	; (80078fc <__ieee754_sqrt+0x158>)
 80077a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077a8:	001a      	movs	r2, r3
 80077aa:	0005      	movs	r5, r0
 80077ac:	000c      	movs	r4, r1
 80077ae:	400a      	ands	r2, r1
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d10f      	bne.n	80077d4 <__ieee754_sqrt+0x30>
 80077b4:	0002      	movs	r2, r0
 80077b6:	000b      	movs	r3, r1
 80077b8:	f7fa f83c 	bl	8001834 <__aeabi_dmul>
 80077bc:	0002      	movs	r2, r0
 80077be:	000b      	movs	r3, r1
 80077c0:	0028      	movs	r0, r5
 80077c2:	0021      	movs	r1, r4
 80077c4:	f7f9 f910 	bl	80009e8 <__aeabi_dadd>
 80077c8:	0005      	movs	r5, r0
 80077ca:	000c      	movs	r4, r1
 80077cc:	0028      	movs	r0, r5
 80077ce:	0021      	movs	r1, r4
 80077d0:	b003      	add	sp, #12
 80077d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d4:	0002      	movs	r2, r0
 80077d6:	2900      	cmp	r1, #0
 80077d8:	dc10      	bgt.n	80077fc <__ieee754_sqrt+0x58>
 80077da:	004b      	lsls	r3, r1, #1
 80077dc:	085b      	lsrs	r3, r3, #1
 80077de:	4303      	orrs	r3, r0
 80077e0:	d0f4      	beq.n	80077cc <__ieee754_sqrt+0x28>
 80077e2:	2000      	movs	r0, #0
 80077e4:	4281      	cmp	r1, r0
 80077e6:	d100      	bne.n	80077ea <__ieee754_sqrt+0x46>
 80077e8:	e07f      	b.n	80078ea <__ieee754_sqrt+0x146>
 80077ea:	000b      	movs	r3, r1
 80077ec:	0028      	movs	r0, r5
 80077ee:	f7fa fa93 	bl	8001d18 <__aeabi_dsub>
 80077f2:	0002      	movs	r2, r0
 80077f4:	000b      	movs	r3, r1
 80077f6:	f7f9 fc13 	bl	8001020 <__aeabi_ddiv>
 80077fa:	e7e5      	b.n	80077c8 <__ieee754_sqrt+0x24>
 80077fc:	1508      	asrs	r0, r1, #20
 80077fe:	d074      	beq.n	80078ea <__ieee754_sqrt+0x146>
 8007800:	4b3f      	ldr	r3, [pc, #252]	; (8007900 <__ieee754_sqrt+0x15c>)
 8007802:	0309      	lsls	r1, r1, #12
 8007804:	18c0      	adds	r0, r0, r3
 8007806:	2380      	movs	r3, #128	; 0x80
 8007808:	0b09      	lsrs	r1, r1, #12
 800780a:	035b      	lsls	r3, r3, #13
 800780c:	4319      	orrs	r1, r3
 800780e:	07c3      	lsls	r3, r0, #31
 8007810:	d503      	bpl.n	800781a <__ieee754_sqrt+0x76>
 8007812:	0fd3      	lsrs	r3, r2, #31
 8007814:	0049      	lsls	r1, r1, #1
 8007816:	18c9      	adds	r1, r1, r3
 8007818:	0052      	lsls	r2, r2, #1
 800781a:	2400      	movs	r4, #0
 800781c:	1043      	asrs	r3, r0, #1
 800781e:	0049      	lsls	r1, r1, #1
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	2580      	movs	r5, #128	; 0x80
 8007824:	0fd3      	lsrs	r3, r2, #31
 8007826:	18cb      	adds	r3, r1, r3
 8007828:	0020      	movs	r0, r4
 800782a:	2116      	movs	r1, #22
 800782c:	0052      	lsls	r2, r2, #1
 800782e:	03ad      	lsls	r5, r5, #14
 8007830:	1946      	adds	r6, r0, r5
 8007832:	429e      	cmp	r6, r3
 8007834:	dc02      	bgt.n	800783c <__ieee754_sqrt+0x98>
 8007836:	1970      	adds	r0, r6, r5
 8007838:	1b9b      	subs	r3, r3, r6
 800783a:	1964      	adds	r4, r4, r5
 800783c:	0fd6      	lsrs	r6, r2, #31
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	3901      	subs	r1, #1
 8007842:	199b      	adds	r3, r3, r6
 8007844:	0052      	lsls	r2, r2, #1
 8007846:	086d      	lsrs	r5, r5, #1
 8007848:	2900      	cmp	r1, #0
 800784a:	d1f1      	bne.n	8007830 <__ieee754_sqrt+0x8c>
 800784c:	2520      	movs	r5, #32
 800784e:	2680      	movs	r6, #128	; 0x80
 8007850:	46ac      	mov	ip, r5
 8007852:	9100      	str	r1, [sp, #0]
 8007854:	0636      	lsls	r6, r6, #24
 8007856:	9d00      	ldr	r5, [sp, #0]
 8007858:	1977      	adds	r7, r6, r5
 800785a:	4283      	cmp	r3, r0
 800785c:	dc02      	bgt.n	8007864 <__ieee754_sqrt+0xc0>
 800785e:	d112      	bne.n	8007886 <__ieee754_sqrt+0xe2>
 8007860:	4297      	cmp	r7, r2
 8007862:	d810      	bhi.n	8007886 <__ieee754_sqrt+0xe2>
 8007864:	19bd      	adds	r5, r7, r6
 8007866:	9500      	str	r5, [sp, #0]
 8007868:	0005      	movs	r5, r0
 800786a:	2f00      	cmp	r7, #0
 800786c:	da03      	bge.n	8007876 <__ieee754_sqrt+0xd2>
 800786e:	9d00      	ldr	r5, [sp, #0]
 8007870:	43ed      	mvns	r5, r5
 8007872:	0fed      	lsrs	r5, r5, #31
 8007874:	1945      	adds	r5, r0, r5
 8007876:	1a1b      	subs	r3, r3, r0
 8007878:	42ba      	cmp	r2, r7
 800787a:	4180      	sbcs	r0, r0
 800787c:	4240      	negs	r0, r0
 800787e:	1a1b      	subs	r3, r3, r0
 8007880:	0028      	movs	r0, r5
 8007882:	1bd2      	subs	r2, r2, r7
 8007884:	1989      	adds	r1, r1, r6
 8007886:	0fd5      	lsrs	r5, r2, #31
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	18eb      	adds	r3, r5, r3
 800788c:	2501      	movs	r5, #1
 800788e:	426d      	negs	r5, r5
 8007890:	44ac      	add	ip, r5
 8007892:	4665      	mov	r5, ip
 8007894:	0052      	lsls	r2, r2, #1
 8007896:	0876      	lsrs	r6, r6, #1
 8007898:	2d00      	cmp	r5, #0
 800789a:	d1dc      	bne.n	8007856 <__ieee754_sqrt+0xb2>
 800789c:	4313      	orrs	r3, r2
 800789e:	d003      	beq.n	80078a8 <__ieee754_sqrt+0x104>
 80078a0:	1c4b      	adds	r3, r1, #1
 80078a2:	d127      	bne.n	80078f4 <__ieee754_sqrt+0x150>
 80078a4:	4661      	mov	r1, ip
 80078a6:	3401      	adds	r4, #1
 80078a8:	4b16      	ldr	r3, [pc, #88]	; (8007904 <__ieee754_sqrt+0x160>)
 80078aa:	1060      	asrs	r0, r4, #1
 80078ac:	18c0      	adds	r0, r0, r3
 80078ae:	0849      	lsrs	r1, r1, #1
 80078b0:	07e3      	lsls	r3, r4, #31
 80078b2:	d502      	bpl.n	80078ba <__ieee754_sqrt+0x116>
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	061b      	lsls	r3, r3, #24
 80078b8:	4319      	orrs	r1, r3
 80078ba:	9b01      	ldr	r3, [sp, #4]
 80078bc:	000d      	movs	r5, r1
 80078be:	051c      	lsls	r4, r3, #20
 80078c0:	1823      	adds	r3, r4, r0
 80078c2:	001c      	movs	r4, r3
 80078c4:	e782      	b.n	80077cc <__ieee754_sqrt+0x28>
 80078c6:	0ad1      	lsrs	r1, r2, #11
 80078c8:	3b15      	subs	r3, #21
 80078ca:	0552      	lsls	r2, r2, #21
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d0fa      	beq.n	80078c6 <__ieee754_sqrt+0x122>
 80078d0:	2480      	movs	r4, #128	; 0x80
 80078d2:	0364      	lsls	r4, r4, #13
 80078d4:	4221      	tst	r1, r4
 80078d6:	d00a      	beq.n	80078ee <__ieee754_sqrt+0x14a>
 80078d8:	2420      	movs	r4, #32
 80078da:	0016      	movs	r6, r2
 80078dc:	1a24      	subs	r4, r4, r0
 80078de:	40e6      	lsrs	r6, r4
 80078e0:	1e45      	subs	r5, r0, #1
 80078e2:	4082      	lsls	r2, r0
 80078e4:	4331      	orrs	r1, r6
 80078e6:	1b58      	subs	r0, r3, r5
 80078e8:	e78a      	b.n	8007800 <__ieee754_sqrt+0x5c>
 80078ea:	2300      	movs	r3, #0
 80078ec:	e7ee      	b.n	80078cc <__ieee754_sqrt+0x128>
 80078ee:	0049      	lsls	r1, r1, #1
 80078f0:	3001      	adds	r0, #1
 80078f2:	e7ef      	b.n	80078d4 <__ieee754_sqrt+0x130>
 80078f4:	2301      	movs	r3, #1
 80078f6:	3101      	adds	r1, #1
 80078f8:	4399      	bics	r1, r3
 80078fa:	e7d5      	b.n	80078a8 <__ieee754_sqrt+0x104>
 80078fc:	7ff00000 	.word	0x7ff00000
 8007900:	fffffc01 	.word	0xfffffc01
 8007904:	3fe00000 	.word	0x3fe00000

08007908 <fabs>:
 8007908:	0049      	lsls	r1, r1, #1
 800790a:	084b      	lsrs	r3, r1, #1
 800790c:	0019      	movs	r1, r3
 800790e:	4770      	bx	lr

08007910 <finite>:
 8007910:	0048      	lsls	r0, r1, #1
 8007912:	4b02      	ldr	r3, [pc, #8]	; (800791c <finite+0xc>)
 8007914:	0840      	lsrs	r0, r0, #1
 8007916:	18c0      	adds	r0, r0, r3
 8007918:	0fc0      	lsrs	r0, r0, #31
 800791a:	4770      	bx	lr
 800791c:	80100000 	.word	0x80100000

08007920 <matherr>:
 8007920:	2000      	movs	r0, #0
 8007922:	4770      	bx	lr

08007924 <nan>:
 8007924:	2000      	movs	r0, #0
 8007926:	4901      	ldr	r1, [pc, #4]	; (800792c <nan+0x8>)
 8007928:	4770      	bx	lr
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	7ff80000 	.word	0x7ff80000

08007930 <rint>:
 8007930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007932:	004a      	lsls	r2, r1, #1
 8007934:	4e3e      	ldr	r6, [pc, #248]	; (8007a30 <rint+0x100>)
 8007936:	0d52      	lsrs	r2, r2, #21
 8007938:	b085      	sub	sp, #20
 800793a:	1996      	adds	r6, r2, r6
 800793c:	000d      	movs	r5, r1
 800793e:	9101      	str	r1, [sp, #4]
 8007940:	0003      	movs	r3, r0
 8007942:	0fcc      	lsrs	r4, r1, #31
 8007944:	2e13      	cmp	r6, #19
 8007946:	dc57      	bgt.n	80079f8 <rint+0xc8>
 8007948:	2e00      	cmp	r6, #0
 800794a:	da2a      	bge.n	80079a2 <rint+0x72>
 800794c:	004a      	lsls	r2, r1, #1
 800794e:	0852      	lsrs	r2, r2, #1
 8007950:	4302      	orrs	r2, r0
 8007952:	d024      	beq.n	800799e <rint+0x6e>
 8007954:	030a      	lsls	r2, r1, #12
 8007956:	0b12      	lsrs	r2, r2, #12
 8007958:	4302      	orrs	r2, r0
 800795a:	4253      	negs	r3, r2
 800795c:	4313      	orrs	r3, r2
 800795e:	2280      	movs	r2, #128	; 0x80
 8007960:	0c4d      	lsrs	r5, r1, #17
 8007962:	0312      	lsls	r2, r2, #12
 8007964:	0b1b      	lsrs	r3, r3, #12
 8007966:	4013      	ands	r3, r2
 8007968:	046d      	lsls	r5, r5, #17
 800796a:	432b      	orrs	r3, r5
 800796c:	0019      	movs	r1, r3
 800796e:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <rint+0x104>)
 8007970:	00e2      	lsls	r2, r4, #3
 8007972:	189b      	adds	r3, r3, r2
 8007974:	681e      	ldr	r6, [r3, #0]
 8007976:	685f      	ldr	r7, [r3, #4]
 8007978:	0002      	movs	r2, r0
 800797a:	000b      	movs	r3, r1
 800797c:	0030      	movs	r0, r6
 800797e:	0039      	movs	r1, r7
 8007980:	f7f9 f832 	bl	80009e8 <__aeabi_dadd>
 8007984:	9002      	str	r0, [sp, #8]
 8007986:	9103      	str	r1, [sp, #12]
 8007988:	9802      	ldr	r0, [sp, #8]
 800798a:	9903      	ldr	r1, [sp, #12]
 800798c:	003b      	movs	r3, r7
 800798e:	0032      	movs	r2, r6
 8007990:	f7fa f9c2 	bl	8001d18 <__aeabi_dsub>
 8007994:	004b      	lsls	r3, r1, #1
 8007996:	085b      	lsrs	r3, r3, #1
 8007998:	07e4      	lsls	r4, r4, #31
 800799a:	4323      	orrs	r3, r4
 800799c:	0019      	movs	r1, r3
 800799e:	b005      	add	sp, #20
 80079a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a2:	4a25      	ldr	r2, [pc, #148]	; (8007a38 <rint+0x108>)
 80079a4:	4132      	asrs	r2, r6
 80079a6:	0017      	movs	r7, r2
 80079a8:	400f      	ands	r7, r1
 80079aa:	4307      	orrs	r7, r0
 80079ac:	d0f7      	beq.n	800799e <rint+0x6e>
 80079ae:	0852      	lsrs	r2, r2, #1
 80079b0:	0011      	movs	r1, r2
 80079b2:	4029      	ands	r1, r5
 80079b4:	430b      	orrs	r3, r1
 80079b6:	d00a      	beq.n	80079ce <rint+0x9e>
 80079b8:	2300      	movs	r3, #0
 80079ba:	2e13      	cmp	r6, #19
 80079bc:	d101      	bne.n	80079c2 <rint+0x92>
 80079be:	2380      	movs	r3, #128	; 0x80
 80079c0:	061b      	lsls	r3, r3, #24
 80079c2:	2780      	movs	r7, #128	; 0x80
 80079c4:	02ff      	lsls	r7, r7, #11
 80079c6:	4137      	asrs	r7, r6
 80079c8:	4395      	bics	r5, r2
 80079ca:	432f      	orrs	r7, r5
 80079cc:	9701      	str	r7, [sp, #4]
 80079ce:	9901      	ldr	r1, [sp, #4]
 80079d0:	001a      	movs	r2, r3
 80079d2:	000b      	movs	r3, r1
 80079d4:	4917      	ldr	r1, [pc, #92]	; (8007a34 <rint+0x104>)
 80079d6:	00e4      	lsls	r4, r4, #3
 80079d8:	190c      	adds	r4, r1, r4
 80079da:	6865      	ldr	r5, [r4, #4]
 80079dc:	6824      	ldr	r4, [r4, #0]
 80079de:	0020      	movs	r0, r4
 80079e0:	0029      	movs	r1, r5
 80079e2:	f7f9 f801 	bl	80009e8 <__aeabi_dadd>
 80079e6:	9002      	str	r0, [sp, #8]
 80079e8:	9103      	str	r1, [sp, #12]
 80079ea:	9802      	ldr	r0, [sp, #8]
 80079ec:	9903      	ldr	r1, [sp, #12]
 80079ee:	0022      	movs	r2, r4
 80079f0:	002b      	movs	r3, r5
 80079f2:	f7fa f991 	bl	8001d18 <__aeabi_dsub>
 80079f6:	e7d2      	b.n	800799e <rint+0x6e>
 80079f8:	2e33      	cmp	r6, #51	; 0x33
 80079fa:	dd08      	ble.n	8007a0e <rint+0xde>
 80079fc:	2380      	movs	r3, #128	; 0x80
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	429e      	cmp	r6, r3
 8007a02:	d1cc      	bne.n	800799e <rint+0x6e>
 8007a04:	0002      	movs	r2, r0
 8007a06:	000b      	movs	r3, r1
 8007a08:	f7f8 ffee 	bl	80009e8 <__aeabi_dadd>
 8007a0c:	e7c7      	b.n	800799e <rint+0x6e>
 8007a0e:	2601      	movs	r6, #1
 8007a10:	4d0a      	ldr	r5, [pc, #40]	; (8007a3c <rint+0x10c>)
 8007a12:	4276      	negs	r6, r6
 8007a14:	1952      	adds	r2, r2, r5
 8007a16:	40d6      	lsrs	r6, r2
 8007a18:	4206      	tst	r6, r0
 8007a1a:	d0c0      	beq.n	800799e <rint+0x6e>
 8007a1c:	0876      	lsrs	r6, r6, #1
 8007a1e:	4206      	tst	r6, r0
 8007a20:	d0d5      	beq.n	80079ce <rint+0x9e>
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	05c9      	lsls	r1, r1, #23
 8007a26:	4111      	asrs	r1, r2
 8007a28:	43b3      	bics	r3, r6
 8007a2a:	430b      	orrs	r3, r1
 8007a2c:	e7cf      	b.n	80079ce <rint+0x9e>
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	fffffc01 	.word	0xfffffc01
 8007a34:	08007c58 	.word	0x08007c58
 8007a38:	000fffff 	.word	0x000fffff
 8007a3c:	fffffbed 	.word	0xfffffbed

08007a40 <scalbn>:
 8007a40:	004b      	lsls	r3, r1, #1
 8007a42:	b570      	push	{r4, r5, r6, lr}
 8007a44:	0d5b      	lsrs	r3, r3, #21
 8007a46:	0014      	movs	r4, r2
 8007a48:	000a      	movs	r2, r1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <scalbn+0x2a>
 8007a4e:	004b      	lsls	r3, r1, #1
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	4303      	orrs	r3, r0
 8007a54:	d010      	beq.n	8007a78 <scalbn+0x38>
 8007a56:	4b21      	ldr	r3, [pc, #132]	; (8007adc <scalbn+0x9c>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f7f9 feeb 	bl	8001834 <__aeabi_dmul>
 8007a5e:	4b20      	ldr	r3, [pc, #128]	; (8007ae0 <scalbn+0xa0>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	da0a      	bge.n	8007a7a <scalbn+0x3a>
 8007a64:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <scalbn+0xa4>)
 8007a66:	4b20      	ldr	r3, [pc, #128]	; (8007ae8 <scalbn+0xa8>)
 8007a68:	e017      	b.n	8007a9a <scalbn+0x5a>
 8007a6a:	4d20      	ldr	r5, [pc, #128]	; (8007aec <scalbn+0xac>)
 8007a6c:	42ab      	cmp	r3, r5
 8007a6e:	d108      	bne.n	8007a82 <scalbn+0x42>
 8007a70:	0002      	movs	r2, r0
 8007a72:	000b      	movs	r3, r1
 8007a74:	f7f8 ffb8 	bl	80009e8 <__aeabi_dadd>
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
 8007a7a:	000a      	movs	r2, r1
 8007a7c:	004b      	lsls	r3, r1, #1
 8007a7e:	0d5b      	lsrs	r3, r3, #21
 8007a80:	3b36      	subs	r3, #54	; 0x36
 8007a82:	4d1b      	ldr	r5, [pc, #108]	; (8007af0 <scalbn+0xb0>)
 8007a84:	18e3      	adds	r3, r4, r3
 8007a86:	42ab      	cmp	r3, r5
 8007a88:	dd0a      	ble.n	8007aa0 <scalbn+0x60>
 8007a8a:	0002      	movs	r2, r0
 8007a8c:	000b      	movs	r3, r1
 8007a8e:	4819      	ldr	r0, [pc, #100]	; (8007af4 <scalbn+0xb4>)
 8007a90:	4919      	ldr	r1, [pc, #100]	; (8007af8 <scalbn+0xb8>)
 8007a92:	f000 f839 	bl	8007b08 <copysign>
 8007a96:	4a17      	ldr	r2, [pc, #92]	; (8007af4 <scalbn+0xb4>)
 8007a98:	4b17      	ldr	r3, [pc, #92]	; (8007af8 <scalbn+0xb8>)
 8007a9a:	f7f9 fecb 	bl	8001834 <__aeabi_dmul>
 8007a9e:	e7eb      	b.n	8007a78 <scalbn+0x38>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dd05      	ble.n	8007ab0 <scalbn+0x70>
 8007aa4:	4c15      	ldr	r4, [pc, #84]	; (8007afc <scalbn+0xbc>)
 8007aa6:	051b      	lsls	r3, r3, #20
 8007aa8:	4022      	ands	r2, r4
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	0011      	movs	r1, r2
 8007aae:	e7e3      	b.n	8007a78 <scalbn+0x38>
 8007ab0:	001d      	movs	r5, r3
 8007ab2:	3535      	adds	r5, #53	; 0x35
 8007ab4:	da09      	bge.n	8007aca <scalbn+0x8a>
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <scalbn+0xc0>)
 8007ab8:	0002      	movs	r2, r0
 8007aba:	429c      	cmp	r4, r3
 8007abc:	dce6      	bgt.n	8007a8c <scalbn+0x4c>
 8007abe:	000b      	movs	r3, r1
 8007ac0:	4808      	ldr	r0, [pc, #32]	; (8007ae4 <scalbn+0xa4>)
 8007ac2:	4909      	ldr	r1, [pc, #36]	; (8007ae8 <scalbn+0xa8>)
 8007ac4:	f000 f820 	bl	8007b08 <copysign>
 8007ac8:	e7cc      	b.n	8007a64 <scalbn+0x24>
 8007aca:	4c0c      	ldr	r4, [pc, #48]	; (8007afc <scalbn+0xbc>)
 8007acc:	3336      	adds	r3, #54	; 0x36
 8007ace:	4022      	ands	r2, r4
 8007ad0:	051b      	lsls	r3, r3, #20
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	0019      	movs	r1, r3
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <scalbn+0xc4>)
 8007ada:	e7de      	b.n	8007a9a <scalbn+0x5a>
 8007adc:	43500000 	.word	0x43500000
 8007ae0:	ffff3cb0 	.word	0xffff3cb0
 8007ae4:	c2f8f359 	.word	0xc2f8f359
 8007ae8:	01a56e1f 	.word	0x01a56e1f
 8007aec:	000007ff 	.word	0x000007ff
 8007af0:	000007fe 	.word	0x000007fe
 8007af4:	8800759c 	.word	0x8800759c
 8007af8:	7e37e43c 	.word	0x7e37e43c
 8007afc:	800fffff 	.word	0x800fffff
 8007b00:	0000c350 	.word	0x0000c350
 8007b04:	3c900000 	.word	0x3c900000

08007b08 <copysign>:
 8007b08:	b530      	push	{r4, r5, lr}
 8007b0a:	004a      	lsls	r2, r1, #1
 8007b0c:	0fdb      	lsrs	r3, r3, #31
 8007b0e:	07db      	lsls	r3, r3, #31
 8007b10:	0852      	lsrs	r2, r2, #1
 8007b12:	431a      	orrs	r2, r3
 8007b14:	0011      	movs	r1, r2
 8007b16:	bd30      	pop	{r4, r5, pc}

08007b18 <_init>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr

08007b24 <_fini>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr
