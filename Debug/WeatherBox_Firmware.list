
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800c180  0800c180  0001c180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6a0  0800c6a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6a0  0800c6a0  0001c6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6a8  0800c6a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6a8  0800c6a8  0001c6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6ac  0800c6ac  0001c6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e0  0800c890  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800c890  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eff  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f1  00000000  00000000  00032107  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d0  00000000  00000000  000343f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000145fe  00000000  00000000  00036480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6a0  00000000  00000000  0004aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000874be  00000000  00000000  0005711e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de5dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b70  00000000  00000000  000de658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c164 	.word	0x0800c164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800c164 	.word	0x0800c164

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fa97 	bl	800195c <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 f9ef 	bl	800181c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa89 	bl	800195c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa7f 	bl	800195c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa11 	bl	8001894 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa07 	bl	8001894 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 f98b 	bl	80007b8 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 f90d 	bl	80006cc <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f97d 	bl	80007b8 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f973 	bl	80007b8 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f91b 	bl	800071c <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f911 	bl	800071c <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	1c08      	adds	r0, r1, #0
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	; (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f806 	bl	8000548 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			; (mov r8, r8)

08000548 <__udivmoddi4>:
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054a:	464f      	mov	r7, r9
 800054c:	4646      	mov	r6, r8
 800054e:	46d6      	mov	lr, sl
 8000550:	b5c0      	push	{r6, r7, lr}
 8000552:	0004      	movs	r4, r0
 8000554:	b082      	sub	sp, #8
 8000556:	000d      	movs	r5, r1
 8000558:	4691      	mov	r9, r2
 800055a:	4698      	mov	r8, r3
 800055c:	428b      	cmp	r3, r1
 800055e:	d82f      	bhi.n	80005c0 <__udivmoddi4+0x78>
 8000560:	d02c      	beq.n	80005bc <__udivmoddi4+0x74>
 8000562:	4641      	mov	r1, r8
 8000564:	4648      	mov	r0, r9
 8000566:	f002 f9cd 	bl	8002904 <__clzdi2>
 800056a:	0029      	movs	r1, r5
 800056c:	0006      	movs	r6, r0
 800056e:	0020      	movs	r0, r4
 8000570:	f002 f9c8 	bl	8002904 <__clzdi2>
 8000574:	1a33      	subs	r3, r6, r0
 8000576:	469c      	mov	ip, r3
 8000578:	3b20      	subs	r3, #32
 800057a:	469a      	mov	sl, r3
 800057c:	d500      	bpl.n	8000580 <__udivmoddi4+0x38>
 800057e:	e076      	b.n	800066e <__udivmoddi4+0x126>
 8000580:	464b      	mov	r3, r9
 8000582:	4652      	mov	r2, sl
 8000584:	4093      	lsls	r3, r2
 8000586:	001f      	movs	r7, r3
 8000588:	464b      	mov	r3, r9
 800058a:	4662      	mov	r2, ip
 800058c:	4093      	lsls	r3, r2
 800058e:	001e      	movs	r6, r3
 8000590:	42af      	cmp	r7, r5
 8000592:	d828      	bhi.n	80005e6 <__udivmoddi4+0x9e>
 8000594:	d025      	beq.n	80005e2 <__udivmoddi4+0x9a>
 8000596:	4653      	mov	r3, sl
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5a>
 80005a0:	e07b      	b.n	800069a <__udivmoddi4+0x152>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	4652      	mov	r2, sl
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4662      	mov	r2, ip
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e018      	b.n	80005ee <__udivmoddi4+0xa6>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9d0      	bls.n	8000562 <__udivmoddi4+0x1a>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8a>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b002      	add	sp, #8
 80005d8:	bc1c      	pop	{r2, r3, r4}
 80005da:	4690      	mov	r8, r2
 80005dc:	4699      	mov	r9, r3
 80005de:	46a2      	mov	sl, r4
 80005e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e2:	42a3      	cmp	r3, r4
 80005e4:	d9d7      	bls.n	8000596 <__udivmoddi4+0x4e>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	4663      	mov	r3, ip
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0e9      	beq.n	80005c8 <__udivmoddi4+0x80>
 80005f4:	07fb      	lsls	r3, r7, #31
 80005f6:	4698      	mov	r8, r3
 80005f8:	4641      	mov	r1, r8
 80005fa:	0872      	lsrs	r2, r6, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	087b      	lsrs	r3, r7, #1
 8000600:	4666      	mov	r6, ip
 8000602:	e00e      	b.n	8000622 <__udivmoddi4+0xda>
 8000604:	42ab      	cmp	r3, r5
 8000606:	d101      	bne.n	800060c <__udivmoddi4+0xc4>
 8000608:	42a2      	cmp	r2, r4
 800060a:	d80c      	bhi.n	8000626 <__udivmoddi4+0xde>
 800060c:	1aa4      	subs	r4, r4, r2
 800060e:	419d      	sbcs	r5, r3
 8000610:	2001      	movs	r0, #1
 8000612:	1924      	adds	r4, r4, r4
 8000614:	416d      	adcs	r5, r5
 8000616:	2100      	movs	r1, #0
 8000618:	3e01      	subs	r6, #1
 800061a:	1824      	adds	r4, r4, r0
 800061c:	414d      	adcs	r5, r1
 800061e:	2e00      	cmp	r6, #0
 8000620:	d006      	beq.n	8000630 <__udivmoddi4+0xe8>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d9ee      	bls.n	8000604 <__udivmoddi4+0xbc>
 8000626:	3e01      	subs	r6, #1
 8000628:	1924      	adds	r4, r4, r4
 800062a:	416d      	adcs	r5, r5
 800062c:	2e00      	cmp	r6, #0
 800062e:	d1f8      	bne.n	8000622 <__udivmoddi4+0xda>
 8000630:	9800      	ldr	r0, [sp, #0]
 8000632:	9901      	ldr	r1, [sp, #4]
 8000634:	4653      	mov	r3, sl
 8000636:	1900      	adds	r0, r0, r4
 8000638:	4169      	adcs	r1, r5
 800063a:	2b00      	cmp	r3, #0
 800063c:	db23      	blt.n	8000686 <__udivmoddi4+0x13e>
 800063e:	002b      	movs	r3, r5
 8000640:	4652      	mov	r2, sl
 8000642:	40d3      	lsrs	r3, r2
 8000644:	002a      	movs	r2, r5
 8000646:	4664      	mov	r4, ip
 8000648:	40e2      	lsrs	r2, r4
 800064a:	001c      	movs	r4, r3
 800064c:	4653      	mov	r3, sl
 800064e:	0015      	movs	r5, r2
 8000650:	2b00      	cmp	r3, #0
 8000652:	db2d      	blt.n	80006b0 <__udivmoddi4+0x168>
 8000654:	0026      	movs	r6, r4
 8000656:	4657      	mov	r7, sl
 8000658:	40be      	lsls	r6, r7
 800065a:	0033      	movs	r3, r6
 800065c:	0026      	movs	r6, r4
 800065e:	4667      	mov	r7, ip
 8000660:	40be      	lsls	r6, r7
 8000662:	0032      	movs	r2, r6
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	4199      	sbcs	r1, r3
 8000668:	9000      	str	r0, [sp, #0]
 800066a:	9101      	str	r1, [sp, #4]
 800066c:	e7ac      	b.n	80005c8 <__udivmoddi4+0x80>
 800066e:	4662      	mov	r2, ip
 8000670:	2320      	movs	r3, #32
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	464a      	mov	r2, r9
 8000676:	40da      	lsrs	r2, r3
 8000678:	4661      	mov	r1, ip
 800067a:	0013      	movs	r3, r2
 800067c:	4642      	mov	r2, r8
 800067e:	408a      	lsls	r2, r1
 8000680:	0017      	movs	r7, r2
 8000682:	431f      	orrs	r7, r3
 8000684:	e780      	b.n	8000588 <__udivmoddi4+0x40>
 8000686:	4662      	mov	r2, ip
 8000688:	2320      	movs	r3, #32
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	002a      	movs	r2, r5
 800068e:	4666      	mov	r6, ip
 8000690:	409a      	lsls	r2, r3
 8000692:	0023      	movs	r3, r4
 8000694:	40f3      	lsrs	r3, r6
 8000696:	4313      	orrs	r3, r2
 8000698:	e7d4      	b.n	8000644 <__udivmoddi4+0xfc>
 800069a:	4662      	mov	r2, ip
 800069c:	2320      	movs	r3, #32
 800069e:	2100      	movs	r1, #0
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	9100      	str	r1, [sp, #0]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	40da      	lsrs	r2, r3
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	e780      	b.n	80005b2 <__udivmoddi4+0x6a>
 80006b0:	2320      	movs	r3, #32
 80006b2:	4662      	mov	r2, ip
 80006b4:	0026      	movs	r6, r4
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	40de      	lsrs	r6, r3
 80006ba:	002f      	movs	r7, r5
 80006bc:	46b0      	mov	r8, r6
 80006be:	4666      	mov	r6, ip
 80006c0:	40b7      	lsls	r7, r6
 80006c2:	4646      	mov	r6, r8
 80006c4:	003b      	movs	r3, r7
 80006c6:	4333      	orrs	r3, r6
 80006c8:	e7c8      	b.n	800065c <__udivmoddi4+0x114>
 80006ca:	46c0      	nop			; (mov r8, r8)

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d00f      	beq.n	8000706 <__eqsf2+0x3a>
 80006e6:	2cff      	cmp	r4, #255	; 0xff
 80006e8:	d011      	beq.n	800070e <__eqsf2+0x42>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d000      	beq.n	80006f2 <__eqsf2+0x26>
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d1fc      	bne.n	80006f0 <__eqsf2+0x24>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d00d      	beq.n	8000716 <__eqsf2+0x4a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f8      	bne.n	80006f0 <__eqsf2+0x24>
 80006fe:	0028      	movs	r0, r5
 8000700:	1e45      	subs	r5, r0, #1
 8000702:	41a8      	sbcs	r0, r5
 8000704:	e7f4      	b.n	80006f0 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f1      	bne.n	80006f0 <__eqsf2+0x24>
 800070c:	e7eb      	b.n	80006e6 <__eqsf2+0x1a>
 800070e:	2001      	movs	r0, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1ed      	bne.n	80006f0 <__eqsf2+0x24>
 8000714:	e7e9      	b.n	80006ea <__eqsf2+0x1e>
 8000716:	2000      	movs	r0, #0
 8000718:	e7ea      	b.n	80006f0 <__eqsf2+0x24>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gesf2>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	004a      	lsls	r2, r1, #1
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0245      	lsls	r5, r0, #9
 8000724:	0044      	lsls	r4, r0, #1
 8000726:	0a6d      	lsrs	r5, r5, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d015      	beq.n	8000762 <__gesf2+0x46>
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d00e      	beq.n	8000758 <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d115      	bne.n	800076a <__gesf2+0x4e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d101      	bne.n	8000746 <__gesf2+0x2a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d01c      	beq.n	8000780 <__gesf2+0x64>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d014      	beq.n	8000774 <__gesf2+0x58>
 800074a:	428b      	cmp	r3, r1
 800074c:	d027      	beq.n	800079e <__gesf2+0x82>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0ee      	beq.n	800073a <__gesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__gesf2+0x3a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d1fa      	bne.n	800075c <__gesf2+0x40>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d00e      	beq.n	8000788 <__gesf2+0x6c>
 800076a:	2a00      	cmp	r2, #0
 800076c:	d10e      	bne.n	800078c <__gesf2+0x70>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0ed      	beq.n	800074e <__gesf2+0x32>
 8000772:	e00b      	b.n	800078c <__gesf2+0x70>
 8000774:	2301      	movs	r3, #1
 8000776:	3901      	subs	r1, #1
 8000778:	4399      	bics	r1, r3
 800077a:	0008      	movs	r0, r1
 800077c:	3001      	adds	r0, #1
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x3a>
 8000780:	2000      	movs	r0, #0
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0e7      	beq.n	8000756 <__gesf2+0x3a>
 8000786:	e7e2      	b.n	800074e <__gesf2+0x32>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d1e7      	bne.n	800075c <__gesf2+0x40>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1de      	bne.n	800074e <__gesf2+0x32>
 8000790:	4294      	cmp	r4, r2
 8000792:	dd05      	ble.n	80007a0 <__gesf2+0x84>
 8000794:	2102      	movs	r1, #2
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	4008      	ands	r0, r1
 800079a:	3801      	subs	r0, #1
 800079c:	e7db      	b.n	8000756 <__gesf2+0x3a>
 800079e:	2400      	movs	r4, #0
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	dc04      	bgt.n	80007ae <__gesf2+0x92>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d8d2      	bhi.n	800074e <__gesf2+0x32>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d2d3      	bcs.n	8000756 <__gesf2+0x3a>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ce      	b.n	8000756 <__gesf2+0x3a>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d012      	beq.n	80007f8 <__lesf2+0x40>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d00c      	beq.n	80007f0 <__lesf2+0x38>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d112      	bne.n	8000800 <__lesf2+0x48>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d119      	bne.n	8000812 <__lesf2+0x5a>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d117      	bne.n	8000812 <__lesf2+0x5a>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d02b      	beq.n	800083e <__lesf2+0x86>
 80007e6:	2002      	movs	r0, #2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e026      	b.n	800083e <__lesf2+0x86>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0f0      	beq.n	80007d6 <__lesf2+0x1e>
 80007f4:	2002      	movs	r0, #2
 80007f6:	e022      	b.n	800083e <__lesf2+0x86>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1fb      	bne.n	80007f4 <__lesf2+0x3c>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d01f      	beq.n	8000840 <__lesf2+0x88>
 8000800:	2800      	cmp	r0, #0
 8000802:	d11f      	bne.n	8000844 <__lesf2+0x8c>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d11d      	bne.n	8000844 <__lesf2+0x8c>
 8000808:	2002      	movs	r0, #2
 800080a:	3b01      	subs	r3, #1
 800080c:	4018      	ands	r0, r3
 800080e:	3801      	subs	r0, #1
 8000810:	e015      	b.n	800083e <__lesf2+0x86>
 8000812:	2c00      	cmp	r4, #0
 8000814:	d00e      	beq.n	8000834 <__lesf2+0x7c>
 8000816:	428b      	cmp	r3, r1
 8000818:	d1e5      	bne.n	80007e6 <__lesf2+0x2e>
 800081a:	2200      	movs	r2, #0
 800081c:	4290      	cmp	r0, r2
 800081e:	dc04      	bgt.n	800082a <__lesf2+0x72>
 8000820:	42ac      	cmp	r4, r5
 8000822:	d8e0      	bhi.n	80007e6 <__lesf2+0x2e>
 8000824:	2000      	movs	r0, #0
 8000826:	42ac      	cmp	r4, r5
 8000828:	d209      	bcs.n	800083e <__lesf2+0x86>
 800082a:	1e58      	subs	r0, r3, #1
 800082c:	2301      	movs	r3, #1
 800082e:	4398      	bics	r0, r3
 8000830:	3001      	adds	r0, #1
 8000832:	e004      	b.n	800083e <__lesf2+0x86>
 8000834:	2301      	movs	r3, #1
 8000836:	3901      	subs	r1, #1
 8000838:	4399      	bics	r1, r3
 800083a:	0008      	movs	r0, r1
 800083c:	3001      	adds	r0, #1
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1d7      	bne.n	80007f4 <__lesf2+0x3c>
 8000844:	428b      	cmp	r3, r1
 8000846:	d1ce      	bne.n	80007e6 <__lesf2+0x2e>
 8000848:	4282      	cmp	r2, r0
 800084a:	dde7      	ble.n	800081c <__lesf2+0x64>
 800084c:	2102      	movs	r1, #2
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4008      	ands	r0, r1
 8000852:	3801      	subs	r0, #1
 8000854:	e7f3      	b.n	800083e <__lesf2+0x86>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__aeabi_fsub>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	4647      	mov	r7, r8
 800085c:	46ce      	mov	lr, r9
 800085e:	0044      	lsls	r4, r0, #1
 8000860:	0fc2      	lsrs	r2, r0, #31
 8000862:	b580      	push	{r7, lr}
 8000864:	0247      	lsls	r7, r0, #9
 8000866:	0248      	lsls	r0, r1, #9
 8000868:	0a40      	lsrs	r0, r0, #9
 800086a:	4684      	mov	ip, r0
 800086c:	4666      	mov	r6, ip
 800086e:	0048      	lsls	r0, r1, #1
 8000870:	0a7f      	lsrs	r7, r7, #9
 8000872:	0e24      	lsrs	r4, r4, #24
 8000874:	00f6      	lsls	r6, r6, #3
 8000876:	0025      	movs	r5, r4
 8000878:	4690      	mov	r8, r2
 800087a:	00fb      	lsls	r3, r7, #3
 800087c:	0e00      	lsrs	r0, r0, #24
 800087e:	0fc9      	lsrs	r1, r1, #31
 8000880:	46b1      	mov	r9, r6
 8000882:	28ff      	cmp	r0, #255	; 0xff
 8000884:	d100      	bne.n	8000888 <__aeabi_fsub+0x30>
 8000886:	e085      	b.n	8000994 <__aeabi_fsub+0x13c>
 8000888:	2601      	movs	r6, #1
 800088a:	4071      	eors	r1, r6
 800088c:	1a26      	subs	r6, r4, r0
 800088e:	4291      	cmp	r1, r2
 8000890:	d057      	beq.n	8000942 <__aeabi_fsub+0xea>
 8000892:	2e00      	cmp	r6, #0
 8000894:	dd43      	ble.n	800091e <__aeabi_fsub+0xc6>
 8000896:	2800      	cmp	r0, #0
 8000898:	d000      	beq.n	800089c <__aeabi_fsub+0x44>
 800089a:	e07f      	b.n	800099c <__aeabi_fsub+0x144>
 800089c:	4649      	mov	r1, r9
 800089e:	2900      	cmp	r1, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x4c>
 80008a2:	e0aa      	b.n	80009fa <__aeabi_fsub+0x1a2>
 80008a4:	3e01      	subs	r6, #1
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_fsub+0x54>
 80008aa:	e0f7      	b.n	8000a9c <__aeabi_fsub+0x244>
 80008ac:	1a5b      	subs	r3, r3, r1
 80008ae:	015a      	lsls	r2, r3, #5
 80008b0:	d400      	bmi.n	80008b4 <__aeabi_fsub+0x5c>
 80008b2:	e08b      	b.n	80009cc <__aeabi_fsub+0x174>
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	099c      	lsrs	r4, r3, #6
 80008b8:	0020      	movs	r0, r4
 80008ba:	f002 f805 	bl	80028c8 <__clzsi2>
 80008be:	3805      	subs	r0, #5
 80008c0:	4084      	lsls	r4, r0
 80008c2:	4285      	cmp	r5, r0
 80008c4:	dd00      	ble.n	80008c8 <__aeabi_fsub+0x70>
 80008c6:	e0d3      	b.n	8000a70 <__aeabi_fsub+0x218>
 80008c8:	1b45      	subs	r5, r0, r5
 80008ca:	0023      	movs	r3, r4
 80008cc:	2020      	movs	r0, #32
 80008ce:	3501      	adds	r5, #1
 80008d0:	40eb      	lsrs	r3, r5
 80008d2:	1b45      	subs	r5, r0, r5
 80008d4:	40ac      	lsls	r4, r5
 80008d6:	1e62      	subs	r2, r4, #1
 80008d8:	4194      	sbcs	r4, r2
 80008da:	4323      	orrs	r3, r4
 80008dc:	2407      	movs	r4, #7
 80008de:	2500      	movs	r5, #0
 80008e0:	401c      	ands	r4, r3
 80008e2:	2201      	movs	r2, #1
 80008e4:	4641      	mov	r1, r8
 80008e6:	400a      	ands	r2, r1
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d004      	beq.n	80008f6 <__aeabi_fsub+0x9e>
 80008ec:	210f      	movs	r1, #15
 80008ee:	4019      	ands	r1, r3
 80008f0:	2904      	cmp	r1, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fsub+0x9e>
 80008f4:	3304      	adds	r3, #4
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	d400      	bmi.n	80008fc <__aeabi_fsub+0xa4>
 80008fa:	e080      	b.n	80009fe <__aeabi_fsub+0x1a6>
 80008fc:	3501      	adds	r5, #1
 80008fe:	b2ec      	uxtb	r4, r5
 8000900:	2dff      	cmp	r5, #255	; 0xff
 8000902:	d000      	beq.n	8000906 <__aeabi_fsub+0xae>
 8000904:	e0a3      	b.n	8000a4e <__aeabi_fsub+0x1f6>
 8000906:	24ff      	movs	r4, #255	; 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	025b      	lsls	r3, r3, #9
 800090c:	05e4      	lsls	r4, r4, #23
 800090e:	0a58      	lsrs	r0, r3, #9
 8000910:	07d2      	lsls	r2, r2, #31
 8000912:	4320      	orrs	r0, r4
 8000914:	4310      	orrs	r0, r2
 8000916:	bc0c      	pop	{r2, r3}
 8000918:	4690      	mov	r8, r2
 800091a:	4699      	mov	r9, r3
 800091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091e:	2e00      	cmp	r6, #0
 8000920:	d174      	bne.n	8000a0c <__aeabi_fsub+0x1b4>
 8000922:	1c60      	adds	r0, r4, #1
 8000924:	b2c0      	uxtb	r0, r0
 8000926:	2801      	cmp	r0, #1
 8000928:	dc00      	bgt.n	800092c <__aeabi_fsub+0xd4>
 800092a:	e0a7      	b.n	8000a7c <__aeabi_fsub+0x224>
 800092c:	464a      	mov	r2, r9
 800092e:	1a9c      	subs	r4, r3, r2
 8000930:	0162      	lsls	r2, r4, #5
 8000932:	d500      	bpl.n	8000936 <__aeabi_fsub+0xde>
 8000934:	e0b6      	b.n	8000aa4 <__aeabi_fsub+0x24c>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d1be      	bne.n	80008b8 <__aeabi_fsub+0x60>
 800093a:	2200      	movs	r2, #0
 800093c:	2400      	movs	r4, #0
 800093e:	2300      	movs	r3, #0
 8000940:	e7e3      	b.n	800090a <__aeabi_fsub+0xb2>
 8000942:	2e00      	cmp	r6, #0
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fsub+0xf0>
 8000946:	e085      	b.n	8000a54 <__aeabi_fsub+0x1fc>
 8000948:	2800      	cmp	r0, #0
 800094a:	d046      	beq.n	80009da <__aeabi_fsub+0x182>
 800094c:	2cff      	cmp	r4, #255	; 0xff
 800094e:	d049      	beq.n	80009e4 <__aeabi_fsub+0x18c>
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	4648      	mov	r0, r9
 8000954:	04d2      	lsls	r2, r2, #19
 8000956:	4310      	orrs	r0, r2
 8000958:	4681      	mov	r9, r0
 800095a:	2201      	movs	r2, #1
 800095c:	2e1b      	cmp	r6, #27
 800095e:	dc09      	bgt.n	8000974 <__aeabi_fsub+0x11c>
 8000960:	2020      	movs	r0, #32
 8000962:	464c      	mov	r4, r9
 8000964:	1b80      	subs	r0, r0, r6
 8000966:	4084      	lsls	r4, r0
 8000968:	464a      	mov	r2, r9
 800096a:	0020      	movs	r0, r4
 800096c:	40f2      	lsrs	r2, r6
 800096e:	1e44      	subs	r4, r0, #1
 8000970:	41a0      	sbcs	r0, r4
 8000972:	4302      	orrs	r2, r0
 8000974:	189b      	adds	r3, r3, r2
 8000976:	015a      	lsls	r2, r3, #5
 8000978:	d528      	bpl.n	80009cc <__aeabi_fsub+0x174>
 800097a:	3501      	adds	r5, #1
 800097c:	2dff      	cmp	r5, #255	; 0xff
 800097e:	d100      	bne.n	8000982 <__aeabi_fsub+0x12a>
 8000980:	e0a8      	b.n	8000ad4 <__aeabi_fsub+0x27c>
 8000982:	2201      	movs	r2, #1
 8000984:	2407      	movs	r4, #7
 8000986:	4994      	ldr	r1, [pc, #592]	; (8000bd8 <__aeabi_fsub+0x380>)
 8000988:	401a      	ands	r2, r3
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	400b      	ands	r3, r1
 800098e:	4313      	orrs	r3, r2
 8000990:	401c      	ands	r4, r3
 8000992:	e7a6      	b.n	80008e2 <__aeabi_fsub+0x8a>
 8000994:	2e00      	cmp	r6, #0
 8000996:	d000      	beq.n	800099a <__aeabi_fsub+0x142>
 8000998:	e778      	b.n	800088c <__aeabi_fsub+0x34>
 800099a:	e775      	b.n	8000888 <__aeabi_fsub+0x30>
 800099c:	2cff      	cmp	r4, #255	; 0xff
 800099e:	d054      	beq.n	8000a4a <__aeabi_fsub+0x1f2>
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	4649      	mov	r1, r9
 80009a4:	04d2      	lsls	r2, r2, #19
 80009a6:	4311      	orrs	r1, r2
 80009a8:	4689      	mov	r9, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	2e1b      	cmp	r6, #27
 80009ae:	dc09      	bgt.n	80009c4 <__aeabi_fsub+0x16c>
 80009b0:	2120      	movs	r1, #32
 80009b2:	4648      	mov	r0, r9
 80009b4:	1b89      	subs	r1, r1, r6
 80009b6:	4088      	lsls	r0, r1
 80009b8:	464a      	mov	r2, r9
 80009ba:	0001      	movs	r1, r0
 80009bc:	40f2      	lsrs	r2, r6
 80009be:	1e48      	subs	r0, r1, #1
 80009c0:	4181      	sbcs	r1, r0
 80009c2:	430a      	orrs	r2, r1
 80009c4:	1a9b      	subs	r3, r3, r2
 80009c6:	015a      	lsls	r2, r3, #5
 80009c8:	d500      	bpl.n	80009cc <__aeabi_fsub+0x174>
 80009ca:	e773      	b.n	80008b4 <__aeabi_fsub+0x5c>
 80009cc:	2201      	movs	r2, #1
 80009ce:	4641      	mov	r1, r8
 80009d0:	400a      	ands	r2, r1
 80009d2:	0759      	lsls	r1, r3, #29
 80009d4:	d000      	beq.n	80009d8 <__aeabi_fsub+0x180>
 80009d6:	e789      	b.n	80008ec <__aeabi_fsub+0x94>
 80009d8:	e011      	b.n	80009fe <__aeabi_fsub+0x1a6>
 80009da:	4648      	mov	r0, r9
 80009dc:	2800      	cmp	r0, #0
 80009de:	d158      	bne.n	8000a92 <__aeabi_fsub+0x23a>
 80009e0:	2cff      	cmp	r4, #255	; 0xff
 80009e2:	d10c      	bne.n	80009fe <__aeabi_fsub+0x1a6>
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x194>
 80009ea:	e78c      	b.n	8000906 <__aeabi_fsub+0xae>
 80009ec:	2080      	movs	r0, #128	; 0x80
 80009ee:	03c0      	lsls	r0, r0, #15
 80009f0:	4303      	orrs	r3, r0
 80009f2:	025b      	lsls	r3, r3, #9
 80009f4:	0a5b      	lsrs	r3, r3, #9
 80009f6:	24ff      	movs	r4, #255	; 0xff
 80009f8:	e787      	b.n	800090a <__aeabi_fsub+0xb2>
 80009fa:	2cff      	cmp	r4, #255	; 0xff
 80009fc:	d025      	beq.n	8000a4a <__aeabi_fsub+0x1f2>
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	2dff      	cmp	r5, #255	; 0xff
 8000a02:	d0f0      	beq.n	80009e6 <__aeabi_fsub+0x18e>
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	0a5b      	lsrs	r3, r3, #9
 8000a08:	b2ec      	uxtb	r4, r5
 8000a0a:	e77e      	b.n	800090a <__aeabi_fsub+0xb2>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d04d      	beq.n	8000aac <__aeabi_fsub+0x254>
 8000a10:	28ff      	cmp	r0, #255	; 0xff
 8000a12:	d018      	beq.n	8000a46 <__aeabi_fsub+0x1ee>
 8000a14:	2480      	movs	r4, #128	; 0x80
 8000a16:	04e4      	lsls	r4, r4, #19
 8000a18:	4272      	negs	r2, r6
 8000a1a:	4323      	orrs	r3, r4
 8000a1c:	2a1b      	cmp	r2, #27
 8000a1e:	dd00      	ble.n	8000a22 <__aeabi_fsub+0x1ca>
 8000a20:	e0c4      	b.n	8000bac <__aeabi_fsub+0x354>
 8000a22:	001c      	movs	r4, r3
 8000a24:	2520      	movs	r5, #32
 8000a26:	40d4      	lsrs	r4, r2
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4093      	lsls	r3, r2
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4193      	sbcs	r3, r2
 8000a30:	4323      	orrs	r3, r4
 8000a32:	464a      	mov	r2, r9
 8000a34:	0005      	movs	r5, r0
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	4688      	mov	r8, r1
 8000a3a:	e738      	b.n	80008ae <__aeabi_fsub+0x56>
 8000a3c:	1c72      	adds	r2, r6, #1
 8000a3e:	d0f8      	beq.n	8000a32 <__aeabi_fsub+0x1da>
 8000a40:	43f2      	mvns	r2, r6
 8000a42:	28ff      	cmp	r0, #255	; 0xff
 8000a44:	d1ea      	bne.n	8000a1c <__aeabi_fsub+0x1c4>
 8000a46:	000a      	movs	r2, r1
 8000a48:	464b      	mov	r3, r9
 8000a4a:	25ff      	movs	r5, #255	; 0xff
 8000a4c:	e7d7      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000a4e:	019b      	lsls	r3, r3, #6
 8000a50:	0a5b      	lsrs	r3, r3, #9
 8000a52:	e75a      	b.n	800090a <__aeabi_fsub+0xb2>
 8000a54:	2e00      	cmp	r6, #0
 8000a56:	d141      	bne.n	8000adc <__aeabi_fsub+0x284>
 8000a58:	1c65      	adds	r5, r4, #1
 8000a5a:	b2e9      	uxtb	r1, r5
 8000a5c:	2901      	cmp	r1, #1
 8000a5e:	dd45      	ble.n	8000aec <__aeabi_fsub+0x294>
 8000a60:	2dff      	cmp	r5, #255	; 0xff
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x20e>
 8000a64:	e74f      	b.n	8000906 <__aeabi_fsub+0xae>
 8000a66:	2407      	movs	r4, #7
 8000a68:	444b      	add	r3, r9
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	401c      	ands	r4, r3
 8000a6e:	e738      	b.n	80008e2 <__aeabi_fsub+0x8a>
 8000a70:	2207      	movs	r2, #7
 8000a72:	4b5a      	ldr	r3, [pc, #360]	; (8000bdc <__aeabi_fsub+0x384>)
 8000a74:	1a2d      	subs	r5, r5, r0
 8000a76:	4023      	ands	r3, r4
 8000a78:	4014      	ands	r4, r2
 8000a7a:	e732      	b.n	80008e2 <__aeabi_fsub+0x8a>
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	d11d      	bne.n	8000abc <__aeabi_fsub+0x264>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d17a      	bne.n	8000b7a <__aeabi_fsub+0x322>
 8000a84:	464b      	mov	r3, r9
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fsub+0x234>
 8000a8a:	e091      	b.n	8000bb0 <__aeabi_fsub+0x358>
 8000a8c:	000a      	movs	r2, r1
 8000a8e:	2500      	movs	r5, #0
 8000a90:	e7b5      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000a92:	3e01      	subs	r6, #1
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d119      	bne.n	8000acc <__aeabi_fsub+0x274>
 8000a98:	444b      	add	r3, r9
 8000a9a:	e76c      	b.n	8000976 <__aeabi_fsub+0x11e>
 8000a9c:	2cff      	cmp	r4, #255	; 0xff
 8000a9e:	d184      	bne.n	80009aa <__aeabi_fsub+0x152>
 8000aa0:	25ff      	movs	r5, #255	; 0xff
 8000aa2:	e7ac      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000aa4:	464a      	mov	r2, r9
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	1ad4      	subs	r4, r2, r3
 8000aaa:	e705      	b.n	80008b8 <__aeabi_fsub+0x60>
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1c5      	bne.n	8000a3c <__aeabi_fsub+0x1e4>
 8000ab0:	000a      	movs	r2, r1
 8000ab2:	28ff      	cmp	r0, #255	; 0xff
 8000ab4:	d0c8      	beq.n	8000a48 <__aeabi_fsub+0x1f0>
 8000ab6:	0005      	movs	r5, r0
 8000ab8:	464b      	mov	r3, r9
 8000aba:	e7a0      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d149      	bne.n	8000b54 <__aeabi_fsub+0x2fc>
 8000ac0:	464b      	mov	r3, r9
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d077      	beq.n	8000bb6 <__aeabi_fsub+0x35e>
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	25ff      	movs	r5, #255	; 0xff
 8000aca:	e798      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000acc:	2cff      	cmp	r4, #255	; 0xff
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fsub+0x27a>
 8000ad0:	e743      	b.n	800095a <__aeabi_fsub+0x102>
 8000ad2:	e787      	b.n	80009e4 <__aeabi_fsub+0x18c>
 8000ad4:	000a      	movs	r2, r1
 8000ad6:	24ff      	movs	r4, #255	; 0xff
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e716      	b.n	800090a <__aeabi_fsub+0xb2>
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d115      	bne.n	8000b0c <__aeabi_fsub+0x2b4>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d157      	bne.n	8000b94 <__aeabi_fsub+0x33c>
 8000ae4:	28ff      	cmp	r0, #255	; 0xff
 8000ae6:	d1e6      	bne.n	8000ab6 <__aeabi_fsub+0x25e>
 8000ae8:	464b      	mov	r3, r9
 8000aea:	e77b      	b.n	80009e4 <__aeabi_fsub+0x18c>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d120      	bne.n	8000b32 <__aeabi_fsub+0x2da>
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d057      	beq.n	8000ba4 <__aeabi_fsub+0x34c>
 8000af4:	4649      	mov	r1, r9
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d053      	beq.n	8000ba2 <__aeabi_fsub+0x34a>
 8000afa:	444b      	add	r3, r9
 8000afc:	015a      	lsls	r2, r3, #5
 8000afe:	d568      	bpl.n	8000bd2 <__aeabi_fsub+0x37a>
 8000b00:	2407      	movs	r4, #7
 8000b02:	4a36      	ldr	r2, [pc, #216]	; (8000bdc <__aeabi_fsub+0x384>)
 8000b04:	401c      	ands	r4, r3
 8000b06:	2501      	movs	r5, #1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	e6ea      	b.n	80008e2 <__aeabi_fsub+0x8a>
 8000b0c:	28ff      	cmp	r0, #255	; 0xff
 8000b0e:	d0eb      	beq.n	8000ae8 <__aeabi_fsub+0x290>
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	04d2      	lsls	r2, r2, #19
 8000b14:	4276      	negs	r6, r6
 8000b16:	4313      	orrs	r3, r2
 8000b18:	2e1b      	cmp	r6, #27
 8000b1a:	dc53      	bgt.n	8000bc4 <__aeabi_fsub+0x36c>
 8000b1c:	2520      	movs	r5, #32
 8000b1e:	1bad      	subs	r5, r5, r6
 8000b20:	001a      	movs	r2, r3
 8000b22:	40ab      	lsls	r3, r5
 8000b24:	40f2      	lsrs	r2, r6
 8000b26:	1e5c      	subs	r4, r3, #1
 8000b28:	41a3      	sbcs	r3, r4
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	444b      	add	r3, r9
 8000b2e:	0005      	movs	r5, r0
 8000b30:	e721      	b.n	8000976 <__aeabi_fsub+0x11e>
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0d8      	beq.n	8000ae8 <__aeabi_fsub+0x290>
 8000b36:	4649      	mov	r1, r9
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fsub+0x2e6>
 8000b3c:	e752      	b.n	80009e4 <__aeabi_fsub+0x18c>
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	03c9      	lsls	r1, r1, #15
 8000b42:	420f      	tst	r7, r1
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x2f0>
 8000b46:	e74d      	b.n	80009e4 <__aeabi_fsub+0x18c>
 8000b48:	4660      	mov	r0, ip
 8000b4a:	4208      	tst	r0, r1
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_fsub+0x2f8>
 8000b4e:	e749      	b.n	80009e4 <__aeabi_fsub+0x18c>
 8000b50:	464b      	mov	r3, r9
 8000b52:	e747      	b.n	80009e4 <__aeabi_fsub+0x18c>
 8000b54:	4648      	mov	r0, r9
 8000b56:	25ff      	movs	r5, #255	; 0xff
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fsub+0x306>
 8000b5c:	e74f      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	03d2      	lsls	r2, r2, #15
 8000b62:	4217      	tst	r7, r2
 8000b64:	d004      	beq.n	8000b70 <__aeabi_fsub+0x318>
 8000b66:	4660      	mov	r0, ip
 8000b68:	4210      	tst	r0, r2
 8000b6a:	d101      	bne.n	8000b70 <__aeabi_fsub+0x318>
 8000b6c:	464b      	mov	r3, r9
 8000b6e:	4688      	mov	r8, r1
 8000b70:	2201      	movs	r2, #1
 8000b72:	4641      	mov	r1, r8
 8000b74:	25ff      	movs	r5, #255	; 0xff
 8000b76:	400a      	ands	r2, r1
 8000b78:	e741      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000b7a:	4648      	mov	r0, r9
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d01f      	beq.n	8000bc0 <__aeabi_fsub+0x368>
 8000b80:	1a1a      	subs	r2, r3, r0
 8000b82:	0150      	lsls	r0, r2, #5
 8000b84:	d520      	bpl.n	8000bc8 <__aeabi_fsub+0x370>
 8000b86:	464a      	mov	r2, r9
 8000b88:	2407      	movs	r4, #7
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	401c      	ands	r4, r3
 8000b8e:	4688      	mov	r8, r1
 8000b90:	2500      	movs	r5, #0
 8000b92:	e6a6      	b.n	80008e2 <__aeabi_fsub+0x8a>
 8000b94:	1c74      	adds	r4, r6, #1
 8000b96:	d0c9      	beq.n	8000b2c <__aeabi_fsub+0x2d4>
 8000b98:	43f6      	mvns	r6, r6
 8000b9a:	28ff      	cmp	r0, #255	; 0xff
 8000b9c:	d1bc      	bne.n	8000b18 <__aeabi_fsub+0x2c0>
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	e720      	b.n	80009e4 <__aeabi_fsub+0x18c>
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	08db      	lsrs	r3, r3, #3
 8000baa:	e72b      	b.n	8000a04 <__aeabi_fsub+0x1ac>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e740      	b.n	8000a32 <__aeabi_fsub+0x1da>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e6a9      	b.n	800090a <__aeabi_fsub+0xb2>
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	2200      	movs	r2, #0
 8000bba:	03db      	lsls	r3, r3, #15
 8000bbc:	24ff      	movs	r4, #255	; 0xff
 8000bbe:	e6a4      	b.n	800090a <__aeabi_fsub+0xb2>
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	e71c      	b.n	80009fe <__aeabi_fsub+0x1a6>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e7b1      	b.n	8000b2c <__aeabi_fsub+0x2d4>
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d0f1      	beq.n	8000bb0 <__aeabi_fsub+0x358>
 8000bcc:	0013      	movs	r3, r2
 8000bce:	2500      	movs	r5, #0
 8000bd0:	e6fc      	b.n	80009cc <__aeabi_fsub+0x174>
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	e6fa      	b.n	80009cc <__aeabi_fsub+0x174>
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	7dffffff 	.word	0x7dffffff
 8000bdc:	fbffffff 	.word	0xfbffffff

08000be0 <__aeabi_dadd>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	464f      	mov	r7, r9
 8000be4:	4646      	mov	r6, r8
 8000be6:	46d6      	mov	lr, sl
 8000be8:	000c      	movs	r4, r1
 8000bea:	0309      	lsls	r1, r1, #12
 8000bec:	b5c0      	push	{r6, r7, lr}
 8000bee:	0a49      	lsrs	r1, r1, #9
 8000bf0:	0f47      	lsrs	r7, r0, #29
 8000bf2:	005e      	lsls	r6, r3, #1
 8000bf4:	4339      	orrs	r1, r7
 8000bf6:	031f      	lsls	r7, r3, #12
 8000bf8:	0fdb      	lsrs	r3, r3, #31
 8000bfa:	469c      	mov	ip, r3
 8000bfc:	0065      	lsls	r5, r4, #1
 8000bfe:	0a7b      	lsrs	r3, r7, #9
 8000c00:	0f57      	lsrs	r7, r2, #29
 8000c02:	431f      	orrs	r7, r3
 8000c04:	0d6d      	lsrs	r5, r5, #21
 8000c06:	0fe4      	lsrs	r4, r4, #31
 8000c08:	0d76      	lsrs	r6, r6, #21
 8000c0a:	46a1      	mov	r9, r4
 8000c0c:	00c0      	lsls	r0, r0, #3
 8000c0e:	46b8      	mov	r8, r7
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	1bab      	subs	r3, r5, r6
 8000c14:	4564      	cmp	r4, ip
 8000c16:	d07b      	beq.n	8000d10 <__aeabi_dadd+0x130>
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd5f      	ble.n	8000cdc <__aeabi_dadd+0xfc>
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_dadd+0x42>
 8000c20:	e0a4      	b.n	8000d6c <__aeabi_dadd+0x18c>
 8000c22:	003e      	movs	r6, r7
 8000c24:	4316      	orrs	r6, r2
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x4a>
 8000c28:	e112      	b.n	8000e50 <__aeabi_dadd+0x270>
 8000c2a:	1e5e      	subs	r6, r3, #1
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_dadd+0x52>
 8000c30:	e19e      	b.n	8000f70 <__aeabi_dadd+0x390>
 8000c32:	1a87      	subs	r7, r0, r2
 8000c34:	4643      	mov	r3, r8
 8000c36:	42b8      	cmp	r0, r7
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	2501      	movs	r5, #1
 8000c3c:	1ac9      	subs	r1, r1, r3
 8000c3e:	4240      	negs	r0, r0
 8000c40:	1a09      	subs	r1, r1, r0
 8000c42:	020b      	lsls	r3, r1, #8
 8000c44:	d400      	bmi.n	8000c48 <__aeabi_dadd+0x68>
 8000c46:	e131      	b.n	8000eac <__aeabi_dadd+0x2cc>
 8000c48:	0249      	lsls	r1, r1, #9
 8000c4a:	0a4e      	lsrs	r6, r1, #9
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x72>
 8000c50:	e16e      	b.n	8000f30 <__aeabi_dadd+0x350>
 8000c52:	0030      	movs	r0, r6
 8000c54:	f001 fe38 	bl	80028c8 <__clzsi2>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	2b1f      	cmp	r3, #31
 8000c5e:	dd00      	ble.n	8000c62 <__aeabi_dadd+0x82>
 8000c60:	e161      	b.n	8000f26 <__aeabi_dadd+0x346>
 8000c62:	2220      	movs	r2, #32
 8000c64:	0039      	movs	r1, r7
 8000c66:	1ad2      	subs	r2, r2, r3
 8000c68:	409e      	lsls	r6, r3
 8000c6a:	40d1      	lsrs	r1, r2
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	430e      	orrs	r6, r1
 8000c70:	429d      	cmp	r5, r3
 8000c72:	dd00      	ble.n	8000c76 <__aeabi_dadd+0x96>
 8000c74:	e151      	b.n	8000f1a <__aeabi_dadd+0x33a>
 8000c76:	1b5d      	subs	r5, r3, r5
 8000c78:	1c6b      	adds	r3, r5, #1
 8000c7a:	2b1f      	cmp	r3, #31
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dadd+0xa0>
 8000c7e:	e17c      	b.n	8000f7a <__aeabi_dadd+0x39a>
 8000c80:	2120      	movs	r1, #32
 8000c82:	1ac9      	subs	r1, r1, r3
 8000c84:	003d      	movs	r5, r7
 8000c86:	0030      	movs	r0, r6
 8000c88:	408f      	lsls	r7, r1
 8000c8a:	4088      	lsls	r0, r1
 8000c8c:	40dd      	lsrs	r5, r3
 8000c8e:	1e79      	subs	r1, r7, #1
 8000c90:	418f      	sbcs	r7, r1
 8000c92:	0031      	movs	r1, r6
 8000c94:	2207      	movs	r2, #7
 8000c96:	4328      	orrs	r0, r5
 8000c98:	40d9      	lsrs	r1, r3
 8000c9a:	2500      	movs	r5, #0
 8000c9c:	4307      	orrs	r7, r0
 8000c9e:	403a      	ands	r2, r7
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d009      	beq.n	8000cb8 <__aeabi_dadd+0xd8>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	403b      	ands	r3, r7
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d005      	beq.n	8000cb8 <__aeabi_dadd+0xd8>
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	42bb      	cmp	r3, r7
 8000cb0:	41bf      	sbcs	r7, r7
 8000cb2:	427f      	negs	r7, r7
 8000cb4:	19c9      	adds	r1, r1, r7
 8000cb6:	001f      	movs	r7, r3
 8000cb8:	020b      	lsls	r3, r1, #8
 8000cba:	d400      	bmi.n	8000cbe <__aeabi_dadd+0xde>
 8000cbc:	e226      	b.n	800110c <__aeabi_dadd+0x52c>
 8000cbe:	1c6a      	adds	r2, r5, #1
 8000cc0:	4bc6      	ldr	r3, [pc, #792]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000cc2:	0555      	lsls	r5, r2, #21
 8000cc4:	0d6d      	lsrs	r5, r5, #21
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dadd+0xec>
 8000cca:	e106      	b.n	8000eda <__aeabi_dadd+0x2fa>
 8000ccc:	4ac4      	ldr	r2, [pc, #784]	; (8000fe0 <__aeabi_dadd+0x400>)
 8000cce:	08ff      	lsrs	r7, r7, #3
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	0753      	lsls	r3, r2, #29
 8000cd4:	0252      	lsls	r2, r2, #9
 8000cd6:	433b      	orrs	r3, r7
 8000cd8:	0b12      	lsrs	r2, r2, #12
 8000cda:	e08e      	b.n	8000dfa <__aeabi_dadd+0x21a>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x102>
 8000ce0:	e0b8      	b.n	8000e54 <__aeabi_dadd+0x274>
 8000ce2:	1c6b      	adds	r3, r5, #1
 8000ce4:	055b      	lsls	r3, r3, #21
 8000ce6:	0d5b      	lsrs	r3, r3, #21
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	dc00      	bgt.n	8000cee <__aeabi_dadd+0x10e>
 8000cec:	e130      	b.n	8000f50 <__aeabi_dadd+0x370>
 8000cee:	1a87      	subs	r7, r0, r2
 8000cf0:	4643      	mov	r3, r8
 8000cf2:	42b8      	cmp	r0, r7
 8000cf4:	41b6      	sbcs	r6, r6
 8000cf6:	1acb      	subs	r3, r1, r3
 8000cf8:	4276      	negs	r6, r6
 8000cfa:	1b9e      	subs	r6, r3, r6
 8000cfc:	0233      	lsls	r3, r6, #8
 8000cfe:	d500      	bpl.n	8000d02 <__aeabi_dadd+0x122>
 8000d00:	e14c      	b.n	8000f9c <__aeabi_dadd+0x3bc>
 8000d02:	003b      	movs	r3, r7
 8000d04:	4333      	orrs	r3, r6
 8000d06:	d1a1      	bne.n	8000c4c <__aeabi_dadd+0x6c>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2400      	movs	r4, #0
 8000d0c:	2500      	movs	r5, #0
 8000d0e:	e070      	b.n	8000df2 <__aeabi_dadd+0x212>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dc00      	bgt.n	8000d16 <__aeabi_dadd+0x136>
 8000d14:	e0e5      	b.n	8000ee2 <__aeabi_dadd+0x302>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x13c>
 8000d1a:	e083      	b.n	8000e24 <__aeabi_dadd+0x244>
 8000d1c:	4eaf      	ldr	r6, [pc, #700]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000d1e:	42b5      	cmp	r5, r6
 8000d20:	d060      	beq.n	8000de4 <__aeabi_dadd+0x204>
 8000d22:	2680      	movs	r6, #128	; 0x80
 8000d24:	0436      	lsls	r6, r6, #16
 8000d26:	4337      	orrs	r7, r6
 8000d28:	46b8      	mov	r8, r7
 8000d2a:	2b38      	cmp	r3, #56	; 0x38
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_dadd+0x150>
 8000d2e:	e13e      	b.n	8000fae <__aeabi_dadd+0x3ce>
 8000d30:	4643      	mov	r3, r8
 8000d32:	4313      	orrs	r3, r2
 8000d34:	001f      	movs	r7, r3
 8000d36:	1e7a      	subs	r2, r7, #1
 8000d38:	4197      	sbcs	r7, r2
 8000d3a:	183f      	adds	r7, r7, r0
 8000d3c:	4287      	cmp	r7, r0
 8000d3e:	4180      	sbcs	r0, r0
 8000d40:	4240      	negs	r0, r0
 8000d42:	1809      	adds	r1, r1, r0
 8000d44:	020b      	lsls	r3, r1, #8
 8000d46:	d400      	bmi.n	8000d4a <__aeabi_dadd+0x16a>
 8000d48:	e0b0      	b.n	8000eac <__aeabi_dadd+0x2cc>
 8000d4a:	4ba4      	ldr	r3, [pc, #656]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000d4c:	3501      	adds	r5, #1
 8000d4e:	429d      	cmp	r5, r3
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x174>
 8000d52:	e0c3      	b.n	8000edc <__aeabi_dadd+0x2fc>
 8000d54:	4aa2      	ldr	r2, [pc, #648]	; (8000fe0 <__aeabi_dadd+0x400>)
 8000d56:	087b      	lsrs	r3, r7, #1
 8000d58:	400a      	ands	r2, r1
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	400f      	ands	r7, r1
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0851      	lsrs	r1, r2, #1
 8000d62:	07d3      	lsls	r3, r2, #31
 8000d64:	2207      	movs	r2, #7
 8000d66:	431f      	orrs	r7, r3
 8000d68:	403a      	ands	r2, r7
 8000d6a:	e799      	b.n	8000ca0 <__aeabi_dadd+0xc0>
 8000d6c:	4e9b      	ldr	r6, [pc, #620]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000d6e:	42b5      	cmp	r5, r6
 8000d70:	d038      	beq.n	8000de4 <__aeabi_dadd+0x204>
 8000d72:	2680      	movs	r6, #128	; 0x80
 8000d74:	0436      	lsls	r6, r6, #16
 8000d76:	4337      	orrs	r7, r6
 8000d78:	46b8      	mov	r8, r7
 8000d7a:	2b38      	cmp	r3, #56	; 0x38
 8000d7c:	dd00      	ble.n	8000d80 <__aeabi_dadd+0x1a0>
 8000d7e:	e0dc      	b.n	8000f3a <__aeabi_dadd+0x35a>
 8000d80:	2b1f      	cmp	r3, #31
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_dadd+0x1a6>
 8000d84:	e130      	b.n	8000fe8 <__aeabi_dadd+0x408>
 8000d86:	001e      	movs	r6, r3
 8000d88:	4647      	mov	r7, r8
 8000d8a:	3e20      	subs	r6, #32
 8000d8c:	40f7      	lsrs	r7, r6
 8000d8e:	46bc      	mov	ip, r7
 8000d90:	2b20      	cmp	r3, #32
 8000d92:	d004      	beq.n	8000d9e <__aeabi_dadd+0x1be>
 8000d94:	2640      	movs	r6, #64	; 0x40
 8000d96:	1af3      	subs	r3, r6, r3
 8000d98:	4646      	mov	r6, r8
 8000d9a:	409e      	lsls	r6, r3
 8000d9c:	4332      	orrs	r2, r6
 8000d9e:	0017      	movs	r7, r2
 8000da0:	4663      	mov	r3, ip
 8000da2:	1e7a      	subs	r2, r7, #1
 8000da4:	4197      	sbcs	r7, r2
 8000da6:	431f      	orrs	r7, r3
 8000da8:	e0cc      	b.n	8000f44 <__aeabi_dadd+0x364>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x1d0>
 8000dae:	e204      	b.n	80011ba <__aeabi_dadd+0x5da>
 8000db0:	4643      	mov	r3, r8
 8000db2:	4313      	orrs	r3, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x1d8>
 8000db6:	e159      	b.n	800106c <__aeabi_dadd+0x48c>
 8000db8:	074b      	lsls	r3, r1, #29
 8000dba:	08c0      	lsrs	r0, r0, #3
 8000dbc:	4318      	orrs	r0, r3
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	08c9      	lsrs	r1, r1, #3
 8000dc2:	031b      	lsls	r3, r3, #12
 8000dc4:	4219      	tst	r1, r3
 8000dc6:	d008      	beq.n	8000dda <__aeabi_dadd+0x1fa>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	08ed      	lsrs	r5, r5, #3
 8000dcc:	421d      	tst	r5, r3
 8000dce:	d104      	bne.n	8000dda <__aeabi_dadd+0x1fa>
 8000dd0:	4643      	mov	r3, r8
 8000dd2:	08d0      	lsrs	r0, r2, #3
 8000dd4:	0759      	lsls	r1, r3, #29
 8000dd6:	4308      	orrs	r0, r1
 8000dd8:	0029      	movs	r1, r5
 8000dda:	0f42      	lsrs	r2, r0, #29
 8000ddc:	00c9      	lsls	r1, r1, #3
 8000dde:	4d7f      	ldr	r5, [pc, #508]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000de0:	4311      	orrs	r1, r2
 8000de2:	00c0      	lsls	r0, r0, #3
 8000de4:	074b      	lsls	r3, r1, #29
 8000de6:	08ca      	lsrs	r2, r1, #3
 8000de8:	497c      	ldr	r1, [pc, #496]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000dea:	08c0      	lsrs	r0, r0, #3
 8000dec:	4303      	orrs	r3, r0
 8000dee:	428d      	cmp	r5, r1
 8000df0:	d068      	beq.n	8000ec4 <__aeabi_dadd+0x2e4>
 8000df2:	0312      	lsls	r2, r2, #12
 8000df4:	056d      	lsls	r5, r5, #21
 8000df6:	0b12      	lsrs	r2, r2, #12
 8000df8:	0d6d      	lsrs	r5, r5, #21
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	0312      	lsls	r2, r2, #12
 8000dfe:	0018      	movs	r0, r3
 8000e00:	0b13      	lsrs	r3, r2, #12
 8000e02:	0d0a      	lsrs	r2, r1, #20
 8000e04:	0512      	lsls	r2, r2, #20
 8000e06:	431a      	orrs	r2, r3
 8000e08:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <__aeabi_dadd+0x404>)
 8000e0a:	052d      	lsls	r5, r5, #20
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	432b      	orrs	r3, r5
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	07e4      	lsls	r4, r4, #31
 8000e14:	085b      	lsrs	r3, r3, #1
 8000e16:	4323      	orrs	r3, r4
 8000e18:	0019      	movs	r1, r3
 8000e1a:	bc1c      	pop	{r2, r3, r4}
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	4699      	mov	r9, r3
 8000e20:	46a2      	mov	sl, r4
 8000e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e24:	003e      	movs	r6, r7
 8000e26:	4316      	orrs	r6, r2
 8000e28:	d012      	beq.n	8000e50 <__aeabi_dadd+0x270>
 8000e2a:	1e5e      	subs	r6, r3, #1
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x252>
 8000e30:	e100      	b.n	8001034 <__aeabi_dadd+0x454>
 8000e32:	1887      	adds	r7, r0, r2
 8000e34:	4287      	cmp	r7, r0
 8000e36:	4180      	sbcs	r0, r0
 8000e38:	4441      	add	r1, r8
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	1809      	adds	r1, r1, r0
 8000e3e:	2501      	movs	r5, #1
 8000e40:	020b      	lsls	r3, r1, #8
 8000e42:	d533      	bpl.n	8000eac <__aeabi_dadd+0x2cc>
 8000e44:	2502      	movs	r5, #2
 8000e46:	e785      	b.n	8000d54 <__aeabi_dadd+0x174>
 8000e48:	4664      	mov	r4, ip
 8000e4a:	0033      	movs	r3, r6
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	0010      	movs	r0, r2
 8000e50:	001d      	movs	r5, r3
 8000e52:	e7c7      	b.n	8000de4 <__aeabi_dadd+0x204>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d000      	beq.n	8000e5a <__aeabi_dadd+0x27a>
 8000e58:	e0da      	b.n	8001010 <__aeabi_dadd+0x430>
 8000e5a:	000c      	movs	r4, r1
 8000e5c:	4304      	orrs	r4, r0
 8000e5e:	d0f3      	beq.n	8000e48 <__aeabi_dadd+0x268>
 8000e60:	1c5c      	adds	r4, r3, #1
 8000e62:	d100      	bne.n	8000e66 <__aeabi_dadd+0x286>
 8000e64:	e19f      	b.n	80011a6 <__aeabi_dadd+0x5c6>
 8000e66:	4c5d      	ldr	r4, [pc, #372]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000e68:	42a6      	cmp	r6, r4
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_dadd+0x28e>
 8000e6c:	e12f      	b.n	80010ce <__aeabi_dadd+0x4ee>
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	2b38      	cmp	r3, #56	; 0x38
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dadd+0x296>
 8000e74:	e166      	b.n	8001144 <__aeabi_dadd+0x564>
 8000e76:	2b1f      	cmp	r3, #31
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_dadd+0x29c>
 8000e7a:	e183      	b.n	8001184 <__aeabi_dadd+0x5a4>
 8000e7c:	2420      	movs	r4, #32
 8000e7e:	0005      	movs	r5, r0
 8000e80:	1ae4      	subs	r4, r4, r3
 8000e82:	000f      	movs	r7, r1
 8000e84:	40dd      	lsrs	r5, r3
 8000e86:	40d9      	lsrs	r1, r3
 8000e88:	40a0      	lsls	r0, r4
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	40a7      	lsls	r7, r4
 8000e8e:	1a5b      	subs	r3, r3, r1
 8000e90:	1e44      	subs	r4, r0, #1
 8000e92:	41a0      	sbcs	r0, r4
 8000e94:	4698      	mov	r8, r3
 8000e96:	432f      	orrs	r7, r5
 8000e98:	4338      	orrs	r0, r7
 8000e9a:	1a17      	subs	r7, r2, r0
 8000e9c:	42ba      	cmp	r2, r7
 8000e9e:	4192      	sbcs	r2, r2
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	4252      	negs	r2, r2
 8000ea4:	1a99      	subs	r1, r3, r2
 8000ea6:	4664      	mov	r4, ip
 8000ea8:	0035      	movs	r5, r6
 8000eaa:	e6ca      	b.n	8000c42 <__aeabi_dadd+0x62>
 8000eac:	2207      	movs	r2, #7
 8000eae:	403a      	ands	r2, r7
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_dadd+0x2d6>
 8000eb4:	e6f6      	b.n	8000ca4 <__aeabi_dadd+0xc4>
 8000eb6:	074b      	lsls	r3, r1, #29
 8000eb8:	08ca      	lsrs	r2, r1, #3
 8000eba:	4948      	ldr	r1, [pc, #288]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000ebc:	08ff      	lsrs	r7, r7, #3
 8000ebe:	433b      	orrs	r3, r7
 8000ec0:	428d      	cmp	r5, r1
 8000ec2:	d196      	bne.n	8000df2 <__aeabi_dadd+0x212>
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	4311      	orrs	r1, r2
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x2ec>
 8000eca:	e19e      	b.n	800120a <__aeabi_dadd+0x62a>
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0309      	lsls	r1, r1, #12
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	0312      	lsls	r2, r2, #12
 8000ed4:	0b12      	lsrs	r2, r2, #12
 8000ed6:	4d41      	ldr	r5, [pc, #260]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000ed8:	e78f      	b.n	8000dfa <__aeabi_dadd+0x21a>
 8000eda:	0015      	movs	r5, r2
 8000edc:	2200      	movs	r2, #0
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e78b      	b.n	8000dfa <__aeabi_dadd+0x21a>
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_dadd+0x308>
 8000ee6:	e0c7      	b.n	8001078 <__aeabi_dadd+0x498>
 8000ee8:	1c6b      	adds	r3, r5, #1
 8000eea:	055f      	lsls	r7, r3, #21
 8000eec:	0d7f      	lsrs	r7, r7, #21
 8000eee:	2f01      	cmp	r7, #1
 8000ef0:	dc00      	bgt.n	8000ef4 <__aeabi_dadd+0x314>
 8000ef2:	e0f1      	b.n	80010d8 <__aeabi_dadd+0x4f8>
 8000ef4:	4d39      	ldr	r5, [pc, #228]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000ef6:	42ab      	cmp	r3, r5
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0x31c>
 8000efa:	e0b9      	b.n	8001070 <__aeabi_dadd+0x490>
 8000efc:	1885      	adds	r5, r0, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	4285      	cmp	r5, r0
 8000f02:	4189      	sbcs	r1, r1
 8000f04:	4442      	add	r2, r8
 8000f06:	4249      	negs	r1, r1
 8000f08:	1851      	adds	r1, r2, r1
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	07cf      	lsls	r7, r1, #31
 8000f0e:	086d      	lsrs	r5, r5, #1
 8000f10:	432f      	orrs	r7, r5
 8000f12:	0849      	lsrs	r1, r1, #1
 8000f14:	403a      	ands	r2, r7
 8000f16:	001d      	movs	r5, r3
 8000f18:	e6c2      	b.n	8000ca0 <__aeabi_dadd+0xc0>
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	4930      	ldr	r1, [pc, #192]	; (8000fe0 <__aeabi_dadd+0x400>)
 8000f1e:	1aed      	subs	r5, r5, r3
 8000f20:	4031      	ands	r1, r6
 8000f22:	403a      	ands	r2, r7
 8000f24:	e6bc      	b.n	8000ca0 <__aeabi_dadd+0xc0>
 8000f26:	003e      	movs	r6, r7
 8000f28:	3828      	subs	r0, #40	; 0x28
 8000f2a:	4086      	lsls	r6, r0
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	e69f      	b.n	8000c70 <__aeabi_dadd+0x90>
 8000f30:	0038      	movs	r0, r7
 8000f32:	f001 fcc9 	bl	80028c8 <__clzsi2>
 8000f36:	3020      	adds	r0, #32
 8000f38:	e68e      	b.n	8000c58 <__aeabi_dadd+0x78>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	001f      	movs	r7, r3
 8000f40:	1e7a      	subs	r2, r7, #1
 8000f42:	4197      	sbcs	r7, r2
 8000f44:	1bc7      	subs	r7, r0, r7
 8000f46:	42b8      	cmp	r0, r7
 8000f48:	4180      	sbcs	r0, r0
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	e678      	b.n	8000c42 <__aeabi_dadd+0x62>
 8000f50:	000e      	movs	r6, r1
 8000f52:	003b      	movs	r3, r7
 8000f54:	4306      	orrs	r6, r0
 8000f56:	4313      	orrs	r3, r2
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d161      	bne.n	8001020 <__aeabi_dadd+0x440>
 8000f5c:	2e00      	cmp	r6, #0
 8000f5e:	d000      	beq.n	8000f62 <__aeabi_dadd+0x382>
 8000f60:	e0f4      	b.n	800114c <__aeabi_dadd+0x56c>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_dadd+0x388>
 8000f66:	e11b      	b.n	80011a0 <__aeabi_dadd+0x5c0>
 8000f68:	4664      	mov	r4, ip
 8000f6a:	0039      	movs	r1, r7
 8000f6c:	0010      	movs	r0, r2
 8000f6e:	e739      	b.n	8000de4 <__aeabi_dadd+0x204>
 8000f70:	4f1a      	ldr	r7, [pc, #104]	; (8000fdc <__aeabi_dadd+0x3fc>)
 8000f72:	42bb      	cmp	r3, r7
 8000f74:	d07a      	beq.n	800106c <__aeabi_dadd+0x48c>
 8000f76:	0033      	movs	r3, r6
 8000f78:	e6ff      	b.n	8000d7a <__aeabi_dadd+0x19a>
 8000f7a:	0030      	movs	r0, r6
 8000f7c:	3d1f      	subs	r5, #31
 8000f7e:	40e8      	lsrs	r0, r5
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	d003      	beq.n	8000f8c <__aeabi_dadd+0x3ac>
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	1acb      	subs	r3, r1, r3
 8000f88:	409e      	lsls	r6, r3
 8000f8a:	4337      	orrs	r7, r6
 8000f8c:	1e7b      	subs	r3, r7, #1
 8000f8e:	419f      	sbcs	r7, r3
 8000f90:	2207      	movs	r2, #7
 8000f92:	4307      	orrs	r7, r0
 8000f94:	403a      	ands	r2, r7
 8000f96:	2100      	movs	r1, #0
 8000f98:	2500      	movs	r5, #0
 8000f9a:	e789      	b.n	8000eb0 <__aeabi_dadd+0x2d0>
 8000f9c:	1a17      	subs	r7, r2, r0
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	42ba      	cmp	r2, r7
 8000fa2:	41b6      	sbcs	r6, r6
 8000fa4:	1a59      	subs	r1, r3, r1
 8000fa6:	4276      	negs	r6, r6
 8000fa8:	1b8e      	subs	r6, r1, r6
 8000faa:	4664      	mov	r4, ip
 8000fac:	e64e      	b.n	8000c4c <__aeabi_dadd+0x6c>
 8000fae:	2b1f      	cmp	r3, #31
 8000fb0:	dd00      	ble.n	8000fb4 <__aeabi_dadd+0x3d4>
 8000fb2:	e0ad      	b.n	8001110 <__aeabi_dadd+0x530>
 8000fb4:	2620      	movs	r6, #32
 8000fb6:	4647      	mov	r7, r8
 8000fb8:	1af6      	subs	r6, r6, r3
 8000fba:	40b7      	lsls	r7, r6
 8000fbc:	46b9      	mov	r9, r7
 8000fbe:	0017      	movs	r7, r2
 8000fc0:	46b2      	mov	sl, r6
 8000fc2:	40df      	lsrs	r7, r3
 8000fc4:	464e      	mov	r6, r9
 8000fc6:	433e      	orrs	r6, r7
 8000fc8:	0037      	movs	r7, r6
 8000fca:	4656      	mov	r6, sl
 8000fcc:	40b2      	lsls	r2, r6
 8000fce:	1e56      	subs	r6, r2, #1
 8000fd0:	41b2      	sbcs	r2, r6
 8000fd2:	4317      	orrs	r7, r2
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	40da      	lsrs	r2, r3
 8000fd8:	1889      	adds	r1, r1, r2
 8000fda:	e6ae      	b.n	8000d3a <__aeabi_dadd+0x15a>
 8000fdc:	000007ff 	.word	0x000007ff
 8000fe0:	ff7fffff 	.word	0xff7fffff
 8000fe4:	800fffff 	.word	0x800fffff
 8000fe8:	2620      	movs	r6, #32
 8000fea:	4647      	mov	r7, r8
 8000fec:	1af6      	subs	r6, r6, r3
 8000fee:	40b7      	lsls	r7, r6
 8000ff0:	46b9      	mov	r9, r7
 8000ff2:	0017      	movs	r7, r2
 8000ff4:	46b2      	mov	sl, r6
 8000ff6:	40df      	lsrs	r7, r3
 8000ff8:	464e      	mov	r6, r9
 8000ffa:	433e      	orrs	r6, r7
 8000ffc:	0037      	movs	r7, r6
 8000ffe:	4656      	mov	r6, sl
 8001000:	40b2      	lsls	r2, r6
 8001002:	1e56      	subs	r6, r2, #1
 8001004:	41b2      	sbcs	r2, r6
 8001006:	4317      	orrs	r7, r2
 8001008:	4642      	mov	r2, r8
 800100a:	40da      	lsrs	r2, r3
 800100c:	1a89      	subs	r1, r1, r2
 800100e:	e799      	b.n	8000f44 <__aeabi_dadd+0x364>
 8001010:	4c7f      	ldr	r4, [pc, #508]	; (8001210 <__aeabi_dadd+0x630>)
 8001012:	42a6      	cmp	r6, r4
 8001014:	d05b      	beq.n	80010ce <__aeabi_dadd+0x4ee>
 8001016:	2480      	movs	r4, #128	; 0x80
 8001018:	0424      	lsls	r4, r4, #16
 800101a:	425b      	negs	r3, r3
 800101c:	4321      	orrs	r1, r4
 800101e:	e727      	b.n	8000e70 <__aeabi_dadd+0x290>
 8001020:	2e00      	cmp	r6, #0
 8001022:	d10c      	bne.n	800103e <__aeabi_dadd+0x45e>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_dadd+0x44a>
 8001028:	e0cb      	b.n	80011c2 <__aeabi_dadd+0x5e2>
 800102a:	4664      	mov	r4, ip
 800102c:	0039      	movs	r1, r7
 800102e:	0010      	movs	r0, r2
 8001030:	4d77      	ldr	r5, [pc, #476]	; (8001210 <__aeabi_dadd+0x630>)
 8001032:	e6d7      	b.n	8000de4 <__aeabi_dadd+0x204>
 8001034:	4f76      	ldr	r7, [pc, #472]	; (8001210 <__aeabi_dadd+0x630>)
 8001036:	42bb      	cmp	r3, r7
 8001038:	d018      	beq.n	800106c <__aeabi_dadd+0x48c>
 800103a:	0033      	movs	r3, r6
 800103c:	e675      	b.n	8000d2a <__aeabi_dadd+0x14a>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d014      	beq.n	800106c <__aeabi_dadd+0x48c>
 8001042:	074b      	lsls	r3, r1, #29
 8001044:	08c0      	lsrs	r0, r0, #3
 8001046:	4318      	orrs	r0, r3
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	08c9      	lsrs	r1, r1, #3
 800104c:	031b      	lsls	r3, r3, #12
 800104e:	4219      	tst	r1, r3
 8001050:	d007      	beq.n	8001062 <__aeabi_dadd+0x482>
 8001052:	08fc      	lsrs	r4, r7, #3
 8001054:	421c      	tst	r4, r3
 8001056:	d104      	bne.n	8001062 <__aeabi_dadd+0x482>
 8001058:	0779      	lsls	r1, r7, #29
 800105a:	08d0      	lsrs	r0, r2, #3
 800105c:	4308      	orrs	r0, r1
 800105e:	46e1      	mov	r9, ip
 8001060:	0021      	movs	r1, r4
 8001062:	464c      	mov	r4, r9
 8001064:	0f42      	lsrs	r2, r0, #29
 8001066:	00c9      	lsls	r1, r1, #3
 8001068:	4311      	orrs	r1, r2
 800106a:	00c0      	lsls	r0, r0, #3
 800106c:	4d68      	ldr	r5, [pc, #416]	; (8001210 <__aeabi_dadd+0x630>)
 800106e:	e6b9      	b.n	8000de4 <__aeabi_dadd+0x204>
 8001070:	001d      	movs	r5, r3
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	e6c0      	b.n	8000dfa <__aeabi_dadd+0x21a>
 8001078:	2d00      	cmp	r5, #0
 800107a:	d15b      	bne.n	8001134 <__aeabi_dadd+0x554>
 800107c:	000d      	movs	r5, r1
 800107e:	4305      	orrs	r5, r0
 8001080:	d100      	bne.n	8001084 <__aeabi_dadd+0x4a4>
 8001082:	e6e2      	b.n	8000e4a <__aeabi_dadd+0x26a>
 8001084:	1c5d      	adds	r5, r3, #1
 8001086:	d100      	bne.n	800108a <__aeabi_dadd+0x4aa>
 8001088:	e0b0      	b.n	80011ec <__aeabi_dadd+0x60c>
 800108a:	4d61      	ldr	r5, [pc, #388]	; (8001210 <__aeabi_dadd+0x630>)
 800108c:	42ae      	cmp	r6, r5
 800108e:	d01f      	beq.n	80010d0 <__aeabi_dadd+0x4f0>
 8001090:	43db      	mvns	r3, r3
 8001092:	2b38      	cmp	r3, #56	; 0x38
 8001094:	dc71      	bgt.n	800117a <__aeabi_dadd+0x59a>
 8001096:	2b1f      	cmp	r3, #31
 8001098:	dd00      	ble.n	800109c <__aeabi_dadd+0x4bc>
 800109a:	e096      	b.n	80011ca <__aeabi_dadd+0x5ea>
 800109c:	2520      	movs	r5, #32
 800109e:	000f      	movs	r7, r1
 80010a0:	1aed      	subs	r5, r5, r3
 80010a2:	40af      	lsls	r7, r5
 80010a4:	46b9      	mov	r9, r7
 80010a6:	0007      	movs	r7, r0
 80010a8:	46aa      	mov	sl, r5
 80010aa:	40df      	lsrs	r7, r3
 80010ac:	464d      	mov	r5, r9
 80010ae:	433d      	orrs	r5, r7
 80010b0:	002f      	movs	r7, r5
 80010b2:	4655      	mov	r5, sl
 80010b4:	40a8      	lsls	r0, r5
 80010b6:	40d9      	lsrs	r1, r3
 80010b8:	1e45      	subs	r5, r0, #1
 80010ba:	41a8      	sbcs	r0, r5
 80010bc:	4488      	add	r8, r1
 80010be:	4307      	orrs	r7, r0
 80010c0:	18bf      	adds	r7, r7, r2
 80010c2:	4297      	cmp	r7, r2
 80010c4:	4192      	sbcs	r2, r2
 80010c6:	4251      	negs	r1, r2
 80010c8:	4441      	add	r1, r8
 80010ca:	0035      	movs	r5, r6
 80010cc:	e63a      	b.n	8000d44 <__aeabi_dadd+0x164>
 80010ce:	4664      	mov	r4, ip
 80010d0:	0035      	movs	r5, r6
 80010d2:	4641      	mov	r1, r8
 80010d4:	0010      	movs	r0, r2
 80010d6:	e685      	b.n	8000de4 <__aeabi_dadd+0x204>
 80010d8:	000b      	movs	r3, r1
 80010da:	4303      	orrs	r3, r0
 80010dc:	2d00      	cmp	r5, #0
 80010de:	d000      	beq.n	80010e2 <__aeabi_dadd+0x502>
 80010e0:	e663      	b.n	8000daa <__aeabi_dadd+0x1ca>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f5      	beq.n	80010d2 <__aeabi_dadd+0x4f2>
 80010e6:	4643      	mov	r3, r8
 80010e8:	4313      	orrs	r3, r2
 80010ea:	d100      	bne.n	80010ee <__aeabi_dadd+0x50e>
 80010ec:	e67a      	b.n	8000de4 <__aeabi_dadd+0x204>
 80010ee:	1887      	adds	r7, r0, r2
 80010f0:	4287      	cmp	r7, r0
 80010f2:	4180      	sbcs	r0, r0
 80010f4:	2207      	movs	r2, #7
 80010f6:	4441      	add	r1, r8
 80010f8:	4240      	negs	r0, r0
 80010fa:	1809      	adds	r1, r1, r0
 80010fc:	403a      	ands	r2, r7
 80010fe:	020b      	lsls	r3, r1, #8
 8001100:	d400      	bmi.n	8001104 <__aeabi_dadd+0x524>
 8001102:	e6d5      	b.n	8000eb0 <__aeabi_dadd+0x2d0>
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <__aeabi_dadd+0x634>)
 8001106:	3501      	adds	r5, #1
 8001108:	4019      	ands	r1, r3
 800110a:	e5c9      	b.n	8000ca0 <__aeabi_dadd+0xc0>
 800110c:	0038      	movs	r0, r7
 800110e:	e669      	b.n	8000de4 <__aeabi_dadd+0x204>
 8001110:	001e      	movs	r6, r3
 8001112:	4647      	mov	r7, r8
 8001114:	3e20      	subs	r6, #32
 8001116:	40f7      	lsrs	r7, r6
 8001118:	46bc      	mov	ip, r7
 800111a:	2b20      	cmp	r3, #32
 800111c:	d004      	beq.n	8001128 <__aeabi_dadd+0x548>
 800111e:	2640      	movs	r6, #64	; 0x40
 8001120:	1af3      	subs	r3, r6, r3
 8001122:	4646      	mov	r6, r8
 8001124:	409e      	lsls	r6, r3
 8001126:	4332      	orrs	r2, r6
 8001128:	0017      	movs	r7, r2
 800112a:	4663      	mov	r3, ip
 800112c:	1e7a      	subs	r2, r7, #1
 800112e:	4197      	sbcs	r7, r2
 8001130:	431f      	orrs	r7, r3
 8001132:	e602      	b.n	8000d3a <__aeabi_dadd+0x15a>
 8001134:	4d36      	ldr	r5, [pc, #216]	; (8001210 <__aeabi_dadd+0x630>)
 8001136:	42ae      	cmp	r6, r5
 8001138:	d0ca      	beq.n	80010d0 <__aeabi_dadd+0x4f0>
 800113a:	2580      	movs	r5, #128	; 0x80
 800113c:	042d      	lsls	r5, r5, #16
 800113e:	425b      	negs	r3, r3
 8001140:	4329      	orrs	r1, r5
 8001142:	e7a6      	b.n	8001092 <__aeabi_dadd+0x4b2>
 8001144:	4308      	orrs	r0, r1
 8001146:	1e41      	subs	r1, r0, #1
 8001148:	4188      	sbcs	r0, r1
 800114a:	e6a6      	b.n	8000e9a <__aeabi_dadd+0x2ba>
 800114c:	2b00      	cmp	r3, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x572>
 8001150:	e648      	b.n	8000de4 <__aeabi_dadd+0x204>
 8001152:	1a87      	subs	r7, r0, r2
 8001154:	4643      	mov	r3, r8
 8001156:	42b8      	cmp	r0, r7
 8001158:	41b6      	sbcs	r6, r6
 800115a:	1acb      	subs	r3, r1, r3
 800115c:	4276      	negs	r6, r6
 800115e:	1b9e      	subs	r6, r3, r6
 8001160:	0233      	lsls	r3, r6, #8
 8001162:	d54b      	bpl.n	80011fc <__aeabi_dadd+0x61c>
 8001164:	1a17      	subs	r7, r2, r0
 8001166:	4643      	mov	r3, r8
 8001168:	42ba      	cmp	r2, r7
 800116a:	4192      	sbcs	r2, r2
 800116c:	1a59      	subs	r1, r3, r1
 800116e:	4252      	negs	r2, r2
 8001170:	1a89      	subs	r1, r1, r2
 8001172:	2207      	movs	r2, #7
 8001174:	4664      	mov	r4, ip
 8001176:	403a      	ands	r2, r7
 8001178:	e592      	b.n	8000ca0 <__aeabi_dadd+0xc0>
 800117a:	4301      	orrs	r1, r0
 800117c:	000f      	movs	r7, r1
 800117e:	1e79      	subs	r1, r7, #1
 8001180:	418f      	sbcs	r7, r1
 8001182:	e79d      	b.n	80010c0 <__aeabi_dadd+0x4e0>
 8001184:	001c      	movs	r4, r3
 8001186:	000f      	movs	r7, r1
 8001188:	3c20      	subs	r4, #32
 800118a:	40e7      	lsrs	r7, r4
 800118c:	2b20      	cmp	r3, #32
 800118e:	d003      	beq.n	8001198 <__aeabi_dadd+0x5b8>
 8001190:	2440      	movs	r4, #64	; 0x40
 8001192:	1ae3      	subs	r3, r4, r3
 8001194:	4099      	lsls	r1, r3
 8001196:	4308      	orrs	r0, r1
 8001198:	1e41      	subs	r1, r0, #1
 800119a:	4188      	sbcs	r0, r1
 800119c:	4338      	orrs	r0, r7
 800119e:	e67c      	b.n	8000e9a <__aeabi_dadd+0x2ba>
 80011a0:	2200      	movs	r2, #0
 80011a2:	2400      	movs	r4, #0
 80011a4:	e625      	b.n	8000df2 <__aeabi_dadd+0x212>
 80011a6:	1a17      	subs	r7, r2, r0
 80011a8:	4643      	mov	r3, r8
 80011aa:	42ba      	cmp	r2, r7
 80011ac:	4192      	sbcs	r2, r2
 80011ae:	1a59      	subs	r1, r3, r1
 80011b0:	4252      	negs	r2, r2
 80011b2:	1a89      	subs	r1, r1, r2
 80011b4:	4664      	mov	r4, ip
 80011b6:	0035      	movs	r5, r6
 80011b8:	e543      	b.n	8000c42 <__aeabi_dadd+0x62>
 80011ba:	4641      	mov	r1, r8
 80011bc:	0010      	movs	r0, r2
 80011be:	4d14      	ldr	r5, [pc, #80]	; (8001210 <__aeabi_dadd+0x630>)
 80011c0:	e610      	b.n	8000de4 <__aeabi_dadd+0x204>
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	2400      	movs	r4, #0
 80011c6:	0312      	lsls	r2, r2, #12
 80011c8:	e680      	b.n	8000ecc <__aeabi_dadd+0x2ec>
 80011ca:	001d      	movs	r5, r3
 80011cc:	000f      	movs	r7, r1
 80011ce:	3d20      	subs	r5, #32
 80011d0:	40ef      	lsrs	r7, r5
 80011d2:	46bc      	mov	ip, r7
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d003      	beq.n	80011e0 <__aeabi_dadd+0x600>
 80011d8:	2540      	movs	r5, #64	; 0x40
 80011da:	1aeb      	subs	r3, r5, r3
 80011dc:	4099      	lsls	r1, r3
 80011de:	4308      	orrs	r0, r1
 80011e0:	0007      	movs	r7, r0
 80011e2:	4663      	mov	r3, ip
 80011e4:	1e78      	subs	r0, r7, #1
 80011e6:	4187      	sbcs	r7, r0
 80011e8:	431f      	orrs	r7, r3
 80011ea:	e769      	b.n	80010c0 <__aeabi_dadd+0x4e0>
 80011ec:	1887      	adds	r7, r0, r2
 80011ee:	4297      	cmp	r7, r2
 80011f0:	419b      	sbcs	r3, r3
 80011f2:	4441      	add	r1, r8
 80011f4:	425b      	negs	r3, r3
 80011f6:	18c9      	adds	r1, r1, r3
 80011f8:	0035      	movs	r5, r6
 80011fa:	e5a3      	b.n	8000d44 <__aeabi_dadd+0x164>
 80011fc:	003b      	movs	r3, r7
 80011fe:	4333      	orrs	r3, r6
 8001200:	d0ce      	beq.n	80011a0 <__aeabi_dadd+0x5c0>
 8001202:	2207      	movs	r2, #7
 8001204:	0031      	movs	r1, r6
 8001206:	403a      	ands	r2, r7
 8001208:	e652      	b.n	8000eb0 <__aeabi_dadd+0x2d0>
 800120a:	2300      	movs	r3, #0
 800120c:	001a      	movs	r2, r3
 800120e:	e5f4      	b.n	8000dfa <__aeabi_dadd+0x21a>
 8001210:	000007ff 	.word	0x000007ff
 8001214:	ff7fffff 	.word	0xff7fffff

08001218 <__aeabi_ddiv>:
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	4657      	mov	r7, sl
 800121c:	46de      	mov	lr, fp
 800121e:	464e      	mov	r6, r9
 8001220:	4645      	mov	r5, r8
 8001222:	b5e0      	push	{r5, r6, r7, lr}
 8001224:	4683      	mov	fp, r0
 8001226:	0007      	movs	r7, r0
 8001228:	030e      	lsls	r6, r1, #12
 800122a:	0048      	lsls	r0, r1, #1
 800122c:	b085      	sub	sp, #20
 800122e:	4692      	mov	sl, r2
 8001230:	001c      	movs	r4, r3
 8001232:	0b36      	lsrs	r6, r6, #12
 8001234:	0d40      	lsrs	r0, r0, #21
 8001236:	0fcd      	lsrs	r5, r1, #31
 8001238:	2800      	cmp	r0, #0
 800123a:	d100      	bne.n	800123e <__aeabi_ddiv+0x26>
 800123c:	e09d      	b.n	800137a <__aeabi_ddiv+0x162>
 800123e:	4b95      	ldr	r3, [pc, #596]	; (8001494 <__aeabi_ddiv+0x27c>)
 8001240:	4298      	cmp	r0, r3
 8001242:	d039      	beq.n	80012b8 <__aeabi_ddiv+0xa0>
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	00f6      	lsls	r6, r6, #3
 8001248:	041b      	lsls	r3, r3, #16
 800124a:	431e      	orrs	r6, r3
 800124c:	4a92      	ldr	r2, [pc, #584]	; (8001498 <__aeabi_ddiv+0x280>)
 800124e:	0f7b      	lsrs	r3, r7, #29
 8001250:	4333      	orrs	r3, r6
 8001252:	4699      	mov	r9, r3
 8001254:	4694      	mov	ip, r2
 8001256:	0003      	movs	r3, r0
 8001258:	4463      	add	r3, ip
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2300      	movs	r3, #0
 800125e:	2600      	movs	r6, #0
 8001260:	00ff      	lsls	r7, r7, #3
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	0323      	lsls	r3, r4, #12
 8001266:	0b1b      	lsrs	r3, r3, #12
 8001268:	4698      	mov	r8, r3
 800126a:	0063      	lsls	r3, r4, #1
 800126c:	0fe4      	lsrs	r4, r4, #31
 800126e:	4652      	mov	r2, sl
 8001270:	0d5b      	lsrs	r3, r3, #21
 8001272:	9401      	str	r4, [sp, #4]
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x60>
 8001276:	e0b3      	b.n	80013e0 <__aeabi_ddiv+0x1c8>
 8001278:	4986      	ldr	r1, [pc, #536]	; (8001494 <__aeabi_ddiv+0x27c>)
 800127a:	428b      	cmp	r3, r1
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x68>
 800127e:	e09e      	b.n	80013be <__aeabi_ddiv+0x1a6>
 8001280:	4642      	mov	r2, r8
 8001282:	00d1      	lsls	r1, r2, #3
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	0412      	lsls	r2, r2, #16
 8001288:	430a      	orrs	r2, r1
 800128a:	4651      	mov	r1, sl
 800128c:	0f49      	lsrs	r1, r1, #29
 800128e:	4311      	orrs	r1, r2
 8001290:	468b      	mov	fp, r1
 8001292:	4981      	ldr	r1, [pc, #516]	; (8001498 <__aeabi_ddiv+0x280>)
 8001294:	4652      	mov	r2, sl
 8001296:	468c      	mov	ip, r1
 8001298:	9900      	ldr	r1, [sp, #0]
 800129a:	4463      	add	r3, ip
 800129c:	1acb      	subs	r3, r1, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	00d2      	lsls	r2, r2, #3
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	002b      	movs	r3, r5
 80012a6:	4063      	eors	r3, r4
 80012a8:	469a      	mov	sl, r3
 80012aa:	2e0f      	cmp	r6, #15
 80012ac:	d900      	bls.n	80012b0 <__aeabi_ddiv+0x98>
 80012ae:	e105      	b.n	80014bc <__aeabi_ddiv+0x2a4>
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <__aeabi_ddiv+0x284>)
 80012b2:	00b6      	lsls	r6, r6, #2
 80012b4:	599b      	ldr	r3, [r3, r6]
 80012b6:	469f      	mov	pc, r3
 80012b8:	465b      	mov	r3, fp
 80012ba:	4333      	orrs	r3, r6
 80012bc:	4699      	mov	r9, r3
 80012be:	d000      	beq.n	80012c2 <__aeabi_ddiv+0xaa>
 80012c0:	e0b8      	b.n	8001434 <__aeabi_ddiv+0x21c>
 80012c2:	2302      	movs	r3, #2
 80012c4:	2608      	movs	r6, #8
 80012c6:	2700      	movs	r7, #0
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	e7ca      	b.n	8001264 <__aeabi_ddiv+0x4c>
 80012ce:	46cb      	mov	fp, r9
 80012d0:	003a      	movs	r2, r7
 80012d2:	9902      	ldr	r1, [sp, #8]
 80012d4:	9501      	str	r5, [sp, #4]
 80012d6:	9b01      	ldr	r3, [sp, #4]
 80012d8:	469a      	mov	sl, r3
 80012da:	2902      	cmp	r1, #2
 80012dc:	d027      	beq.n	800132e <__aeabi_ddiv+0x116>
 80012de:	2903      	cmp	r1, #3
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0xcc>
 80012e2:	e280      	b.n	80017e6 <__aeabi_ddiv+0x5ce>
 80012e4:	2901      	cmp	r1, #1
 80012e6:	d044      	beq.n	8001372 <__aeabi_ddiv+0x15a>
 80012e8:	496d      	ldr	r1, [pc, #436]	; (80014a0 <__aeabi_ddiv+0x288>)
 80012ea:	9b00      	ldr	r3, [sp, #0]
 80012ec:	468c      	mov	ip, r1
 80012ee:	4463      	add	r3, ip
 80012f0:	001c      	movs	r4, r3
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	dd38      	ble.n	8001368 <__aeabi_ddiv+0x150>
 80012f6:	0753      	lsls	r3, r2, #29
 80012f8:	d000      	beq.n	80012fc <__aeabi_ddiv+0xe4>
 80012fa:	e213      	b.n	8001724 <__aeabi_ddiv+0x50c>
 80012fc:	08d2      	lsrs	r2, r2, #3
 80012fe:	465b      	mov	r3, fp
 8001300:	01db      	lsls	r3, r3, #7
 8001302:	d509      	bpl.n	8001318 <__aeabi_ddiv+0x100>
 8001304:	4659      	mov	r1, fp
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <__aeabi_ddiv+0x28c>)
 8001308:	4019      	ands	r1, r3
 800130a:	468b      	mov	fp, r1
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	00c9      	lsls	r1, r1, #3
 8001310:	468c      	mov	ip, r1
 8001312:	9b00      	ldr	r3, [sp, #0]
 8001314:	4463      	add	r3, ip
 8001316:	001c      	movs	r4, r3
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <__aeabi_ddiv+0x290>)
 800131a:	429c      	cmp	r4, r3
 800131c:	dc07      	bgt.n	800132e <__aeabi_ddiv+0x116>
 800131e:	465b      	mov	r3, fp
 8001320:	0564      	lsls	r4, r4, #21
 8001322:	075f      	lsls	r7, r3, #29
 8001324:	025b      	lsls	r3, r3, #9
 8001326:	4317      	orrs	r7, r2
 8001328:	0b1b      	lsrs	r3, r3, #12
 800132a:	0d62      	lsrs	r2, r4, #21
 800132c:	e002      	b.n	8001334 <__aeabi_ddiv+0x11c>
 800132e:	2300      	movs	r3, #0
 8001330:	2700      	movs	r7, #0
 8001332:	4a58      	ldr	r2, [pc, #352]	; (8001494 <__aeabi_ddiv+0x27c>)
 8001334:	2100      	movs	r1, #0
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	0b1c      	lsrs	r4, r3, #12
 800133a:	0d0b      	lsrs	r3, r1, #20
 800133c:	051b      	lsls	r3, r3, #20
 800133e:	4323      	orrs	r3, r4
 8001340:	0514      	lsls	r4, r2, #20
 8001342:	4a5a      	ldr	r2, [pc, #360]	; (80014ac <__aeabi_ddiv+0x294>)
 8001344:	0038      	movs	r0, r7
 8001346:	4013      	ands	r3, r2
 8001348:	431c      	orrs	r4, r3
 800134a:	4653      	mov	r3, sl
 800134c:	0064      	lsls	r4, r4, #1
 800134e:	07db      	lsls	r3, r3, #31
 8001350:	0864      	lsrs	r4, r4, #1
 8001352:	431c      	orrs	r4, r3
 8001354:	0021      	movs	r1, r4
 8001356:	b005      	add	sp, #20
 8001358:	bc3c      	pop	{r2, r3, r4, r5}
 800135a:	4690      	mov	r8, r2
 800135c:	4699      	mov	r9, r3
 800135e:	46a2      	mov	sl, r4
 8001360:	46ab      	mov	fp, r5
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001364:	2201      	movs	r2, #1
 8001366:	4252      	negs	r2, r2
 8001368:	2301      	movs	r3, #1
 800136a:	1b1b      	subs	r3, r3, r4
 800136c:	2b38      	cmp	r3, #56	; 0x38
 800136e:	dc00      	bgt.n	8001372 <__aeabi_ddiv+0x15a>
 8001370:	e1ad      	b.n	80016ce <__aeabi_ddiv+0x4b6>
 8001372:	2200      	movs	r2, #0
 8001374:	2300      	movs	r3, #0
 8001376:	2700      	movs	r7, #0
 8001378:	e7dc      	b.n	8001334 <__aeabi_ddiv+0x11c>
 800137a:	465b      	mov	r3, fp
 800137c:	4333      	orrs	r3, r6
 800137e:	4699      	mov	r9, r3
 8001380:	d05e      	beq.n	8001440 <__aeabi_ddiv+0x228>
 8001382:	2e00      	cmp	r6, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0x170>
 8001386:	e18a      	b.n	800169e <__aeabi_ddiv+0x486>
 8001388:	0030      	movs	r0, r6
 800138a:	f001 fa9d 	bl	80028c8 <__clzsi2>
 800138e:	0003      	movs	r3, r0
 8001390:	3b0b      	subs	r3, #11
 8001392:	2b1c      	cmp	r3, #28
 8001394:	dd00      	ble.n	8001398 <__aeabi_ddiv+0x180>
 8001396:	e17b      	b.n	8001690 <__aeabi_ddiv+0x478>
 8001398:	221d      	movs	r2, #29
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	465a      	mov	r2, fp
 800139e:	0001      	movs	r1, r0
 80013a0:	40da      	lsrs	r2, r3
 80013a2:	3908      	subs	r1, #8
 80013a4:	408e      	lsls	r6, r1
 80013a6:	0013      	movs	r3, r2
 80013a8:	465f      	mov	r7, fp
 80013aa:	4333      	orrs	r3, r6
 80013ac:	4699      	mov	r9, r3
 80013ae:	408f      	lsls	r7, r1
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <__aeabi_ddiv+0x298>)
 80013b2:	2600      	movs	r6, #0
 80013b4:	1a1b      	subs	r3, r3, r0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	e752      	b.n	8001264 <__aeabi_ddiv+0x4c>
 80013be:	4641      	mov	r1, r8
 80013c0:	4653      	mov	r3, sl
 80013c2:	430b      	orrs	r3, r1
 80013c4:	493b      	ldr	r1, [pc, #236]	; (80014b4 <__aeabi_ddiv+0x29c>)
 80013c6:	469b      	mov	fp, r3
 80013c8:	468c      	mov	ip, r1
 80013ca:	9b00      	ldr	r3, [sp, #0]
 80013cc:	4463      	add	r3, ip
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	465b      	mov	r3, fp
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d13b      	bne.n	800144e <__aeabi_ddiv+0x236>
 80013d6:	2302      	movs	r3, #2
 80013d8:	2200      	movs	r2, #0
 80013da:	431e      	orrs	r6, r3
 80013dc:	2102      	movs	r1, #2
 80013de:	e761      	b.n	80012a4 <__aeabi_ddiv+0x8c>
 80013e0:	4643      	mov	r3, r8
 80013e2:	4313      	orrs	r3, r2
 80013e4:	469b      	mov	fp, r3
 80013e6:	d037      	beq.n	8001458 <__aeabi_ddiv+0x240>
 80013e8:	4643      	mov	r3, r8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x1d8>
 80013ee:	e162      	b.n	80016b6 <__aeabi_ddiv+0x49e>
 80013f0:	4640      	mov	r0, r8
 80013f2:	f001 fa69 	bl	80028c8 <__clzsi2>
 80013f6:	0003      	movs	r3, r0
 80013f8:	3b0b      	subs	r3, #11
 80013fa:	2b1c      	cmp	r3, #28
 80013fc:	dd00      	ble.n	8001400 <__aeabi_ddiv+0x1e8>
 80013fe:	e153      	b.n	80016a8 <__aeabi_ddiv+0x490>
 8001400:	0002      	movs	r2, r0
 8001402:	4641      	mov	r1, r8
 8001404:	3a08      	subs	r2, #8
 8001406:	4091      	lsls	r1, r2
 8001408:	4688      	mov	r8, r1
 800140a:	211d      	movs	r1, #29
 800140c:	1acb      	subs	r3, r1, r3
 800140e:	4651      	mov	r1, sl
 8001410:	40d9      	lsrs	r1, r3
 8001412:	000b      	movs	r3, r1
 8001414:	4641      	mov	r1, r8
 8001416:	430b      	orrs	r3, r1
 8001418:	469b      	mov	fp, r3
 800141a:	4653      	mov	r3, sl
 800141c:	4093      	lsls	r3, r2
 800141e:	001a      	movs	r2, r3
 8001420:	9b00      	ldr	r3, [sp, #0]
 8001422:	4925      	ldr	r1, [pc, #148]	; (80014b8 <__aeabi_ddiv+0x2a0>)
 8001424:	469c      	mov	ip, r3
 8001426:	4460      	add	r0, ip
 8001428:	0003      	movs	r3, r0
 800142a:	468c      	mov	ip, r1
 800142c:	4463      	add	r3, ip
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2100      	movs	r1, #0
 8001432:	e737      	b.n	80012a4 <__aeabi_ddiv+0x8c>
 8001434:	2303      	movs	r3, #3
 8001436:	46b1      	mov	r9, r6
 8001438:	9000      	str	r0, [sp, #0]
 800143a:	260c      	movs	r6, #12
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	e711      	b.n	8001264 <__aeabi_ddiv+0x4c>
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	2604      	movs	r6, #4
 8001448:	2700      	movs	r7, #0
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	e70a      	b.n	8001264 <__aeabi_ddiv+0x4c>
 800144e:	2303      	movs	r3, #3
 8001450:	46c3      	mov	fp, r8
 8001452:	431e      	orrs	r6, r3
 8001454:	2103      	movs	r1, #3
 8001456:	e725      	b.n	80012a4 <__aeabi_ddiv+0x8c>
 8001458:	3301      	adds	r3, #1
 800145a:	431e      	orrs	r6, r3
 800145c:	2200      	movs	r2, #0
 800145e:	2101      	movs	r1, #1
 8001460:	e720      	b.n	80012a4 <__aeabi_ddiv+0x8c>
 8001462:	2300      	movs	r3, #0
 8001464:	469a      	mov	sl, r3
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	2700      	movs	r7, #0
 800146a:	031b      	lsls	r3, r3, #12
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <__aeabi_ddiv+0x27c>)
 800146e:	e761      	b.n	8001334 <__aeabi_ddiv+0x11c>
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	4649      	mov	r1, r9
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	4219      	tst	r1, r3
 8001478:	d100      	bne.n	800147c <__aeabi_ddiv+0x264>
 800147a:	e0e2      	b.n	8001642 <__aeabi_ddiv+0x42a>
 800147c:	4659      	mov	r1, fp
 800147e:	4219      	tst	r1, r3
 8001480:	d000      	beq.n	8001484 <__aeabi_ddiv+0x26c>
 8001482:	e0de      	b.n	8001642 <__aeabi_ddiv+0x42a>
 8001484:	430b      	orrs	r3, r1
 8001486:	031b      	lsls	r3, r3, #12
 8001488:	0017      	movs	r7, r2
 800148a:	0b1b      	lsrs	r3, r3, #12
 800148c:	46a2      	mov	sl, r4
 800148e:	4a01      	ldr	r2, [pc, #4]	; (8001494 <__aeabi_ddiv+0x27c>)
 8001490:	e750      	b.n	8001334 <__aeabi_ddiv+0x11c>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	000007ff 	.word	0x000007ff
 8001498:	fffffc01 	.word	0xfffffc01
 800149c:	0800c2a8 	.word	0x0800c2a8
 80014a0:	000003ff 	.word	0x000003ff
 80014a4:	feffffff 	.word	0xfeffffff
 80014a8:	000007fe 	.word	0x000007fe
 80014ac:	800fffff 	.word	0x800fffff
 80014b0:	fffffc0d 	.word	0xfffffc0d
 80014b4:	fffff801 	.word	0xfffff801
 80014b8:	000003f3 	.word	0x000003f3
 80014bc:	45d9      	cmp	r9, fp
 80014be:	d900      	bls.n	80014c2 <__aeabi_ddiv+0x2aa>
 80014c0:	e0cb      	b.n	800165a <__aeabi_ddiv+0x442>
 80014c2:	d100      	bne.n	80014c6 <__aeabi_ddiv+0x2ae>
 80014c4:	e0c6      	b.n	8001654 <__aeabi_ddiv+0x43c>
 80014c6:	003c      	movs	r4, r7
 80014c8:	4648      	mov	r0, r9
 80014ca:	2700      	movs	r7, #0
 80014cc:	9b00      	ldr	r3, [sp, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	465b      	mov	r3, fp
 80014d4:	0e16      	lsrs	r6, r2, #24
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	431e      	orrs	r6, r3
 80014da:	0213      	lsls	r3, r2, #8
 80014dc:	4698      	mov	r8, r3
 80014de:	0433      	lsls	r3, r6, #16
 80014e0:	0c1b      	lsrs	r3, r3, #16
 80014e2:	4699      	mov	r9, r3
 80014e4:	0c31      	lsrs	r1, r6, #16
 80014e6:	9101      	str	r1, [sp, #4]
 80014e8:	f7fe fea6 	bl	8000238 <__aeabi_uidivmod>
 80014ec:	464a      	mov	r2, r9
 80014ee:	4342      	muls	r2, r0
 80014f0:	040b      	lsls	r3, r1, #16
 80014f2:	0c21      	lsrs	r1, r4, #16
 80014f4:	0005      	movs	r5, r0
 80014f6:	4319      	orrs	r1, r3
 80014f8:	428a      	cmp	r2, r1
 80014fa:	d907      	bls.n	800150c <__aeabi_ddiv+0x2f4>
 80014fc:	1989      	adds	r1, r1, r6
 80014fe:	3d01      	subs	r5, #1
 8001500:	428e      	cmp	r6, r1
 8001502:	d803      	bhi.n	800150c <__aeabi_ddiv+0x2f4>
 8001504:	428a      	cmp	r2, r1
 8001506:	d901      	bls.n	800150c <__aeabi_ddiv+0x2f4>
 8001508:	1e85      	subs	r5, r0, #2
 800150a:	1989      	adds	r1, r1, r6
 800150c:	1a88      	subs	r0, r1, r2
 800150e:	9901      	ldr	r1, [sp, #4]
 8001510:	f7fe fe92 	bl	8000238 <__aeabi_uidivmod>
 8001514:	0409      	lsls	r1, r1, #16
 8001516:	468c      	mov	ip, r1
 8001518:	464a      	mov	r2, r9
 800151a:	0421      	lsls	r1, r4, #16
 800151c:	4664      	mov	r4, ip
 800151e:	4342      	muls	r2, r0
 8001520:	0c09      	lsrs	r1, r1, #16
 8001522:	0003      	movs	r3, r0
 8001524:	4321      	orrs	r1, r4
 8001526:	428a      	cmp	r2, r1
 8001528:	d904      	bls.n	8001534 <__aeabi_ddiv+0x31c>
 800152a:	1989      	adds	r1, r1, r6
 800152c:	3b01      	subs	r3, #1
 800152e:	428e      	cmp	r6, r1
 8001530:	d800      	bhi.n	8001534 <__aeabi_ddiv+0x31c>
 8001532:	e0f1      	b.n	8001718 <__aeabi_ddiv+0x500>
 8001534:	042d      	lsls	r5, r5, #16
 8001536:	431d      	orrs	r5, r3
 8001538:	46ab      	mov	fp, r5
 800153a:	4643      	mov	r3, r8
 800153c:	1a89      	subs	r1, r1, r2
 800153e:	4642      	mov	r2, r8
 8001540:	0c28      	lsrs	r0, r5, #16
 8001542:	0412      	lsls	r2, r2, #16
 8001544:	0c1d      	lsrs	r5, r3, #16
 8001546:	465b      	mov	r3, fp
 8001548:	0c14      	lsrs	r4, r2, #16
 800154a:	0022      	movs	r2, r4
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	435a      	muls	r2, r3
 8001552:	9403      	str	r4, [sp, #12]
 8001554:	436b      	muls	r3, r5
 8001556:	4344      	muls	r4, r0
 8001558:	9502      	str	r5, [sp, #8]
 800155a:	4368      	muls	r0, r5
 800155c:	191b      	adds	r3, r3, r4
 800155e:	0c15      	lsrs	r5, r2, #16
 8001560:	18eb      	adds	r3, r5, r3
 8001562:	429c      	cmp	r4, r3
 8001564:	d903      	bls.n	800156e <__aeabi_ddiv+0x356>
 8001566:	2480      	movs	r4, #128	; 0x80
 8001568:	0264      	lsls	r4, r4, #9
 800156a:	46a4      	mov	ip, r4
 800156c:	4460      	add	r0, ip
 800156e:	0c1c      	lsrs	r4, r3, #16
 8001570:	0415      	lsls	r5, r2, #16
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	0c2d      	lsrs	r5, r5, #16
 8001576:	1820      	adds	r0, r4, r0
 8001578:	195d      	adds	r5, r3, r5
 800157a:	4281      	cmp	r1, r0
 800157c:	d377      	bcc.n	800166e <__aeabi_ddiv+0x456>
 800157e:	d073      	beq.n	8001668 <__aeabi_ddiv+0x450>
 8001580:	1a0c      	subs	r4, r1, r0
 8001582:	4aa2      	ldr	r2, [pc, #648]	; (800180c <__aeabi_ddiv+0x5f4>)
 8001584:	1b7d      	subs	r5, r7, r5
 8001586:	42af      	cmp	r7, r5
 8001588:	41bf      	sbcs	r7, r7
 800158a:	4694      	mov	ip, r2
 800158c:	9b00      	ldr	r3, [sp, #0]
 800158e:	427f      	negs	r7, r7
 8001590:	4463      	add	r3, ip
 8001592:	1be0      	subs	r0, r4, r7
 8001594:	001c      	movs	r4, r3
 8001596:	4286      	cmp	r6, r0
 8001598:	d100      	bne.n	800159c <__aeabi_ddiv+0x384>
 800159a:	e0db      	b.n	8001754 <__aeabi_ddiv+0x53c>
 800159c:	9901      	ldr	r1, [sp, #4]
 800159e:	f7fe fe4b 	bl	8000238 <__aeabi_uidivmod>
 80015a2:	464a      	mov	r2, r9
 80015a4:	4342      	muls	r2, r0
 80015a6:	040b      	lsls	r3, r1, #16
 80015a8:	0c29      	lsrs	r1, r5, #16
 80015aa:	0007      	movs	r7, r0
 80015ac:	4319      	orrs	r1, r3
 80015ae:	428a      	cmp	r2, r1
 80015b0:	d907      	bls.n	80015c2 <__aeabi_ddiv+0x3aa>
 80015b2:	1989      	adds	r1, r1, r6
 80015b4:	3f01      	subs	r7, #1
 80015b6:	428e      	cmp	r6, r1
 80015b8:	d803      	bhi.n	80015c2 <__aeabi_ddiv+0x3aa>
 80015ba:	428a      	cmp	r2, r1
 80015bc:	d901      	bls.n	80015c2 <__aeabi_ddiv+0x3aa>
 80015be:	1e87      	subs	r7, r0, #2
 80015c0:	1989      	adds	r1, r1, r6
 80015c2:	1a88      	subs	r0, r1, r2
 80015c4:	9901      	ldr	r1, [sp, #4]
 80015c6:	f7fe fe37 	bl	8000238 <__aeabi_uidivmod>
 80015ca:	0409      	lsls	r1, r1, #16
 80015cc:	464a      	mov	r2, r9
 80015ce:	4689      	mov	r9, r1
 80015d0:	0429      	lsls	r1, r5, #16
 80015d2:	464d      	mov	r5, r9
 80015d4:	4342      	muls	r2, r0
 80015d6:	0c09      	lsrs	r1, r1, #16
 80015d8:	0003      	movs	r3, r0
 80015da:	4329      	orrs	r1, r5
 80015dc:	428a      	cmp	r2, r1
 80015de:	d907      	bls.n	80015f0 <__aeabi_ddiv+0x3d8>
 80015e0:	1989      	adds	r1, r1, r6
 80015e2:	3b01      	subs	r3, #1
 80015e4:	428e      	cmp	r6, r1
 80015e6:	d803      	bhi.n	80015f0 <__aeabi_ddiv+0x3d8>
 80015e8:	428a      	cmp	r2, r1
 80015ea:	d901      	bls.n	80015f0 <__aeabi_ddiv+0x3d8>
 80015ec:	1e83      	subs	r3, r0, #2
 80015ee:	1989      	adds	r1, r1, r6
 80015f0:	043f      	lsls	r7, r7, #16
 80015f2:	1a89      	subs	r1, r1, r2
 80015f4:	003a      	movs	r2, r7
 80015f6:	9f03      	ldr	r7, [sp, #12]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	0038      	movs	r0, r7
 80015fc:	0413      	lsls	r3, r2, #16
 80015fe:	0c1b      	lsrs	r3, r3, #16
 8001600:	4358      	muls	r0, r3
 8001602:	4681      	mov	r9, r0
 8001604:	9802      	ldr	r0, [sp, #8]
 8001606:	0c15      	lsrs	r5, r2, #16
 8001608:	436f      	muls	r7, r5
 800160a:	4343      	muls	r3, r0
 800160c:	4345      	muls	r5, r0
 800160e:	4648      	mov	r0, r9
 8001610:	0c00      	lsrs	r0, r0, #16
 8001612:	4684      	mov	ip, r0
 8001614:	19db      	adds	r3, r3, r7
 8001616:	4463      	add	r3, ip
 8001618:	429f      	cmp	r7, r3
 800161a:	d903      	bls.n	8001624 <__aeabi_ddiv+0x40c>
 800161c:	2080      	movs	r0, #128	; 0x80
 800161e:	0240      	lsls	r0, r0, #9
 8001620:	4684      	mov	ip, r0
 8001622:	4465      	add	r5, ip
 8001624:	4648      	mov	r0, r9
 8001626:	0c1f      	lsrs	r7, r3, #16
 8001628:	0400      	lsls	r0, r0, #16
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	0c00      	lsrs	r0, r0, #16
 800162e:	197d      	adds	r5, r7, r5
 8001630:	1818      	adds	r0, r3, r0
 8001632:	42a9      	cmp	r1, r5
 8001634:	d200      	bcs.n	8001638 <__aeabi_ddiv+0x420>
 8001636:	e084      	b.n	8001742 <__aeabi_ddiv+0x52a>
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x424>
 800163a:	e07f      	b.n	800173c <__aeabi_ddiv+0x524>
 800163c:	2301      	movs	r3, #1
 800163e:	431a      	orrs	r2, r3
 8001640:	e657      	b.n	80012f2 <__aeabi_ddiv+0xda>
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	464a      	mov	r2, r9
 8001646:	031b      	lsls	r3, r3, #12
 8001648:	4313      	orrs	r3, r2
 800164a:	031b      	lsls	r3, r3, #12
 800164c:	0b1b      	lsrs	r3, r3, #12
 800164e:	46aa      	mov	sl, r5
 8001650:	4a6f      	ldr	r2, [pc, #444]	; (8001810 <__aeabi_ddiv+0x5f8>)
 8001652:	e66f      	b.n	8001334 <__aeabi_ddiv+0x11c>
 8001654:	42ba      	cmp	r2, r7
 8001656:	d900      	bls.n	800165a <__aeabi_ddiv+0x442>
 8001658:	e735      	b.n	80014c6 <__aeabi_ddiv+0x2ae>
 800165a:	464b      	mov	r3, r9
 800165c:	07dc      	lsls	r4, r3, #31
 800165e:	0858      	lsrs	r0, r3, #1
 8001660:	087b      	lsrs	r3, r7, #1
 8001662:	431c      	orrs	r4, r3
 8001664:	07ff      	lsls	r7, r7, #31
 8001666:	e734      	b.n	80014d2 <__aeabi_ddiv+0x2ba>
 8001668:	2400      	movs	r4, #0
 800166a:	42af      	cmp	r7, r5
 800166c:	d289      	bcs.n	8001582 <__aeabi_ddiv+0x36a>
 800166e:	4447      	add	r7, r8
 8001670:	4547      	cmp	r7, r8
 8001672:	41a4      	sbcs	r4, r4
 8001674:	465b      	mov	r3, fp
 8001676:	4264      	negs	r4, r4
 8001678:	19a4      	adds	r4, r4, r6
 800167a:	1864      	adds	r4, r4, r1
 800167c:	3b01      	subs	r3, #1
 800167e:	42a6      	cmp	r6, r4
 8001680:	d21e      	bcs.n	80016c0 <__aeabi_ddiv+0x4a8>
 8001682:	42a0      	cmp	r0, r4
 8001684:	d86d      	bhi.n	8001762 <__aeabi_ddiv+0x54a>
 8001686:	d100      	bne.n	800168a <__aeabi_ddiv+0x472>
 8001688:	e0b6      	b.n	80017f8 <__aeabi_ddiv+0x5e0>
 800168a:	1a24      	subs	r4, r4, r0
 800168c:	469b      	mov	fp, r3
 800168e:	e778      	b.n	8001582 <__aeabi_ddiv+0x36a>
 8001690:	0003      	movs	r3, r0
 8001692:	465a      	mov	r2, fp
 8001694:	3b28      	subs	r3, #40	; 0x28
 8001696:	409a      	lsls	r2, r3
 8001698:	2700      	movs	r7, #0
 800169a:	4691      	mov	r9, r2
 800169c:	e688      	b.n	80013b0 <__aeabi_ddiv+0x198>
 800169e:	4658      	mov	r0, fp
 80016a0:	f001 f912 	bl	80028c8 <__clzsi2>
 80016a4:	3020      	adds	r0, #32
 80016a6:	e672      	b.n	800138e <__aeabi_ddiv+0x176>
 80016a8:	0003      	movs	r3, r0
 80016aa:	4652      	mov	r2, sl
 80016ac:	3b28      	subs	r3, #40	; 0x28
 80016ae:	409a      	lsls	r2, r3
 80016b0:	4693      	mov	fp, r2
 80016b2:	2200      	movs	r2, #0
 80016b4:	e6b4      	b.n	8001420 <__aeabi_ddiv+0x208>
 80016b6:	4650      	mov	r0, sl
 80016b8:	f001 f906 	bl	80028c8 <__clzsi2>
 80016bc:	3020      	adds	r0, #32
 80016be:	e69a      	b.n	80013f6 <__aeabi_ddiv+0x1de>
 80016c0:	42a6      	cmp	r6, r4
 80016c2:	d1e2      	bne.n	800168a <__aeabi_ddiv+0x472>
 80016c4:	45b8      	cmp	r8, r7
 80016c6:	d9dc      	bls.n	8001682 <__aeabi_ddiv+0x46a>
 80016c8:	1a34      	subs	r4, r6, r0
 80016ca:	469b      	mov	fp, r3
 80016cc:	e759      	b.n	8001582 <__aeabi_ddiv+0x36a>
 80016ce:	2b1f      	cmp	r3, #31
 80016d0:	dc65      	bgt.n	800179e <__aeabi_ddiv+0x586>
 80016d2:	4c50      	ldr	r4, [pc, #320]	; (8001814 <__aeabi_ddiv+0x5fc>)
 80016d4:	9900      	ldr	r1, [sp, #0]
 80016d6:	46a4      	mov	ip, r4
 80016d8:	465c      	mov	r4, fp
 80016da:	4461      	add	r1, ip
 80016dc:	0008      	movs	r0, r1
 80016de:	408c      	lsls	r4, r1
 80016e0:	0011      	movs	r1, r2
 80016e2:	4082      	lsls	r2, r0
 80016e4:	40d9      	lsrs	r1, r3
 80016e6:	1e50      	subs	r0, r2, #1
 80016e8:	4182      	sbcs	r2, r0
 80016ea:	430c      	orrs	r4, r1
 80016ec:	4314      	orrs	r4, r2
 80016ee:	465a      	mov	r2, fp
 80016f0:	40da      	lsrs	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	0762      	lsls	r2, r4, #29
 80016f6:	d009      	beq.n	800170c <__aeabi_ddiv+0x4f4>
 80016f8:	220f      	movs	r2, #15
 80016fa:	4022      	ands	r2, r4
 80016fc:	2a04      	cmp	r2, #4
 80016fe:	d005      	beq.n	800170c <__aeabi_ddiv+0x4f4>
 8001700:	0022      	movs	r2, r4
 8001702:	1d14      	adds	r4, r2, #4
 8001704:	4294      	cmp	r4, r2
 8001706:	4189      	sbcs	r1, r1
 8001708:	4249      	negs	r1, r1
 800170a:	185b      	adds	r3, r3, r1
 800170c:	021a      	lsls	r2, r3, #8
 800170e:	d562      	bpl.n	80017d6 <__aeabi_ddiv+0x5be>
 8001710:	2201      	movs	r2, #1
 8001712:	2300      	movs	r3, #0
 8001714:	2700      	movs	r7, #0
 8001716:	e60d      	b.n	8001334 <__aeabi_ddiv+0x11c>
 8001718:	428a      	cmp	r2, r1
 800171a:	d800      	bhi.n	800171e <__aeabi_ddiv+0x506>
 800171c:	e70a      	b.n	8001534 <__aeabi_ddiv+0x31c>
 800171e:	1e83      	subs	r3, r0, #2
 8001720:	1989      	adds	r1, r1, r6
 8001722:	e707      	b.n	8001534 <__aeabi_ddiv+0x31c>
 8001724:	230f      	movs	r3, #15
 8001726:	4013      	ands	r3, r2
 8001728:	2b04      	cmp	r3, #4
 800172a:	d100      	bne.n	800172e <__aeabi_ddiv+0x516>
 800172c:	e5e6      	b.n	80012fc <__aeabi_ddiv+0xe4>
 800172e:	1d17      	adds	r7, r2, #4
 8001730:	4297      	cmp	r7, r2
 8001732:	4192      	sbcs	r2, r2
 8001734:	4253      	negs	r3, r2
 8001736:	449b      	add	fp, r3
 8001738:	08fa      	lsrs	r2, r7, #3
 800173a:	e5e0      	b.n	80012fe <__aeabi_ddiv+0xe6>
 800173c:	2800      	cmp	r0, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x52a>
 8001740:	e5d7      	b.n	80012f2 <__aeabi_ddiv+0xda>
 8001742:	1871      	adds	r1, r6, r1
 8001744:	1e53      	subs	r3, r2, #1
 8001746:	42b1      	cmp	r1, r6
 8001748:	d327      	bcc.n	800179a <__aeabi_ddiv+0x582>
 800174a:	42a9      	cmp	r1, r5
 800174c:	d315      	bcc.n	800177a <__aeabi_ddiv+0x562>
 800174e:	d058      	beq.n	8001802 <__aeabi_ddiv+0x5ea>
 8001750:	001a      	movs	r2, r3
 8001752:	e773      	b.n	800163c <__aeabi_ddiv+0x424>
 8001754:	2b00      	cmp	r3, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_ddiv+0x542>
 8001758:	e604      	b.n	8001364 <__aeabi_ddiv+0x14c>
 800175a:	2301      	movs	r3, #1
 800175c:	2200      	movs	r2, #0
 800175e:	449b      	add	fp, r3
 8001760:	e5cd      	b.n	80012fe <__aeabi_ddiv+0xe6>
 8001762:	2302      	movs	r3, #2
 8001764:	4447      	add	r7, r8
 8001766:	4547      	cmp	r7, r8
 8001768:	4189      	sbcs	r1, r1
 800176a:	425b      	negs	r3, r3
 800176c:	469c      	mov	ip, r3
 800176e:	4249      	negs	r1, r1
 8001770:	1989      	adds	r1, r1, r6
 8001772:	190c      	adds	r4, r1, r4
 8001774:	44e3      	add	fp, ip
 8001776:	1a24      	subs	r4, r4, r0
 8001778:	e703      	b.n	8001582 <__aeabi_ddiv+0x36a>
 800177a:	4643      	mov	r3, r8
 800177c:	005f      	lsls	r7, r3, #1
 800177e:	4547      	cmp	r7, r8
 8001780:	419b      	sbcs	r3, r3
 8001782:	46b8      	mov	r8, r7
 8001784:	425b      	negs	r3, r3
 8001786:	199e      	adds	r6, r3, r6
 8001788:	3a02      	subs	r2, #2
 800178a:	1989      	adds	r1, r1, r6
 800178c:	42a9      	cmp	r1, r5
 800178e:	d000      	beq.n	8001792 <__aeabi_ddiv+0x57a>
 8001790:	e754      	b.n	800163c <__aeabi_ddiv+0x424>
 8001792:	4540      	cmp	r0, r8
 8001794:	d000      	beq.n	8001798 <__aeabi_ddiv+0x580>
 8001796:	e751      	b.n	800163c <__aeabi_ddiv+0x424>
 8001798:	e5ab      	b.n	80012f2 <__aeabi_ddiv+0xda>
 800179a:	001a      	movs	r2, r3
 800179c:	e7f6      	b.n	800178c <__aeabi_ddiv+0x574>
 800179e:	211f      	movs	r1, #31
 80017a0:	465f      	mov	r7, fp
 80017a2:	4249      	negs	r1, r1
 80017a4:	1b0c      	subs	r4, r1, r4
 80017a6:	40e7      	lsrs	r7, r4
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d007      	beq.n	80017bc <__aeabi_ddiv+0x5a4>
 80017ac:	491a      	ldr	r1, [pc, #104]	; (8001818 <__aeabi_ddiv+0x600>)
 80017ae:	9b00      	ldr	r3, [sp, #0]
 80017b0:	468c      	mov	ip, r1
 80017b2:	4463      	add	r3, ip
 80017b4:	0018      	movs	r0, r3
 80017b6:	465b      	mov	r3, fp
 80017b8:	4083      	lsls	r3, r0
 80017ba:	431a      	orrs	r2, r3
 80017bc:	1e50      	subs	r0, r2, #1
 80017be:	4182      	sbcs	r2, r0
 80017c0:	433a      	orrs	r2, r7
 80017c2:	2707      	movs	r7, #7
 80017c4:	2300      	movs	r3, #0
 80017c6:	4017      	ands	r7, r2
 80017c8:	d009      	beq.n	80017de <__aeabi_ddiv+0x5c6>
 80017ca:	210f      	movs	r1, #15
 80017cc:	2300      	movs	r3, #0
 80017ce:	4011      	ands	r1, r2
 80017d0:	0014      	movs	r4, r2
 80017d2:	2904      	cmp	r1, #4
 80017d4:	d195      	bne.n	8001702 <__aeabi_ddiv+0x4ea>
 80017d6:	0022      	movs	r2, r4
 80017d8:	075f      	lsls	r7, r3, #29
 80017da:	025b      	lsls	r3, r3, #9
 80017dc:	0b1b      	lsrs	r3, r3, #12
 80017de:	08d2      	lsrs	r2, r2, #3
 80017e0:	4317      	orrs	r7, r2
 80017e2:	2200      	movs	r2, #0
 80017e4:	e5a6      	b.n	8001334 <__aeabi_ddiv+0x11c>
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	4659      	mov	r1, fp
 80017ea:	031b      	lsls	r3, r3, #12
 80017ec:	430b      	orrs	r3, r1
 80017ee:	031b      	lsls	r3, r3, #12
 80017f0:	0017      	movs	r7, r2
 80017f2:	0b1b      	lsrs	r3, r3, #12
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <__aeabi_ddiv+0x5f8>)
 80017f6:	e59d      	b.n	8001334 <__aeabi_ddiv+0x11c>
 80017f8:	42bd      	cmp	r5, r7
 80017fa:	d8b2      	bhi.n	8001762 <__aeabi_ddiv+0x54a>
 80017fc:	469b      	mov	fp, r3
 80017fe:	2400      	movs	r4, #0
 8001800:	e6bf      	b.n	8001582 <__aeabi_ddiv+0x36a>
 8001802:	4580      	cmp	r8, r0
 8001804:	d3b9      	bcc.n	800177a <__aeabi_ddiv+0x562>
 8001806:	001a      	movs	r2, r3
 8001808:	e7c3      	b.n	8001792 <__aeabi_ddiv+0x57a>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000003ff 	.word	0x000003ff
 8001810:	000007ff 	.word	0x000007ff
 8001814:	0000041e 	.word	0x0000041e
 8001818:	0000043e 	.word	0x0000043e

0800181c <__eqdf2>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	464f      	mov	r7, r9
 8001820:	4646      	mov	r6, r8
 8001822:	46d6      	mov	lr, sl
 8001824:	4684      	mov	ip, r0
 8001826:	b5c0      	push	{r6, r7, lr}
 8001828:	4680      	mov	r8, r0
 800182a:	4e19      	ldr	r6, [pc, #100]	; (8001890 <__eqdf2+0x74>)
 800182c:	0318      	lsls	r0, r3, #12
 800182e:	030f      	lsls	r7, r1, #12
 8001830:	004d      	lsls	r5, r1, #1
 8001832:	0b00      	lsrs	r0, r0, #12
 8001834:	005c      	lsls	r4, r3, #1
 8001836:	4682      	mov	sl, r0
 8001838:	0b3f      	lsrs	r7, r7, #12
 800183a:	0d6d      	lsrs	r5, r5, #21
 800183c:	0fc9      	lsrs	r1, r1, #31
 800183e:	4691      	mov	r9, r2
 8001840:	0d64      	lsrs	r4, r4, #21
 8001842:	0fdb      	lsrs	r3, r3, #31
 8001844:	2001      	movs	r0, #1
 8001846:	42b5      	cmp	r5, r6
 8001848:	d00a      	beq.n	8001860 <__eqdf2+0x44>
 800184a:	42b4      	cmp	r4, r6
 800184c:	d003      	beq.n	8001856 <__eqdf2+0x3a>
 800184e:	42a5      	cmp	r5, r4
 8001850:	d101      	bne.n	8001856 <__eqdf2+0x3a>
 8001852:	4557      	cmp	r7, sl
 8001854:	d00c      	beq.n	8001870 <__eqdf2+0x54>
 8001856:	bc1c      	pop	{r2, r3, r4}
 8001858:	4690      	mov	r8, r2
 800185a:	4699      	mov	r9, r3
 800185c:	46a2      	mov	sl, r4
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001860:	4666      	mov	r6, ip
 8001862:	433e      	orrs	r6, r7
 8001864:	d1f7      	bne.n	8001856 <__eqdf2+0x3a>
 8001866:	42ac      	cmp	r4, r5
 8001868:	d1f5      	bne.n	8001856 <__eqdf2+0x3a>
 800186a:	4654      	mov	r4, sl
 800186c:	4314      	orrs	r4, r2
 800186e:	d1f2      	bne.n	8001856 <__eqdf2+0x3a>
 8001870:	2001      	movs	r0, #1
 8001872:	45c8      	cmp	r8, r9
 8001874:	d1ef      	bne.n	8001856 <__eqdf2+0x3a>
 8001876:	4299      	cmp	r1, r3
 8001878:	d007      	beq.n	800188a <__eqdf2+0x6e>
 800187a:	2d00      	cmp	r5, #0
 800187c:	d1eb      	bne.n	8001856 <__eqdf2+0x3a>
 800187e:	4663      	mov	r3, ip
 8001880:	431f      	orrs	r7, r3
 8001882:	0038      	movs	r0, r7
 8001884:	1e47      	subs	r7, r0, #1
 8001886:	41b8      	sbcs	r0, r7
 8001888:	e7e5      	b.n	8001856 <__eqdf2+0x3a>
 800188a:	2000      	movs	r0, #0
 800188c:	e7e3      	b.n	8001856 <__eqdf2+0x3a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	464f      	mov	r7, r9
 8001898:	4646      	mov	r6, r8
 800189a:	46d6      	mov	lr, sl
 800189c:	004d      	lsls	r5, r1, #1
 800189e:	b5c0      	push	{r6, r7, lr}
 80018a0:	030e      	lsls	r6, r1, #12
 80018a2:	0fc9      	lsrs	r1, r1, #31
 80018a4:	468a      	mov	sl, r1
 80018a6:	492c      	ldr	r1, [pc, #176]	; (8001958 <__gedf2+0xc4>)
 80018a8:	031f      	lsls	r7, r3, #12
 80018aa:	005c      	lsls	r4, r3, #1
 80018ac:	4680      	mov	r8, r0
 80018ae:	0b36      	lsrs	r6, r6, #12
 80018b0:	0d6d      	lsrs	r5, r5, #21
 80018b2:	4691      	mov	r9, r2
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d64      	lsrs	r4, r4, #21
 80018b8:	0fdb      	lsrs	r3, r3, #31
 80018ba:	428d      	cmp	r5, r1
 80018bc:	d01e      	beq.n	80018fc <__gedf2+0x68>
 80018be:	428c      	cmp	r4, r1
 80018c0:	d016      	beq.n	80018f0 <__gedf2+0x5c>
 80018c2:	2d00      	cmp	r5, #0
 80018c4:	d11e      	bne.n	8001904 <__gedf2+0x70>
 80018c6:	4330      	orrs	r0, r6
 80018c8:	4684      	mov	ip, r0
 80018ca:	2c00      	cmp	r4, #0
 80018cc:	d101      	bne.n	80018d2 <__gedf2+0x3e>
 80018ce:	433a      	orrs	r2, r7
 80018d0:	d023      	beq.n	800191a <__gedf2+0x86>
 80018d2:	4662      	mov	r2, ip
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d01a      	beq.n	800190e <__gedf2+0x7a>
 80018d8:	459a      	cmp	sl, r3
 80018da:	d029      	beq.n	8001930 <__gedf2+0x9c>
 80018dc:	4651      	mov	r1, sl
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bc1c      	pop	{r2, r3, r4}
 80018e8:	4690      	mov	r8, r2
 80018ea:	4699      	mov	r9, r3
 80018ec:	46a2      	mov	sl, r4
 80018ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f0:	0039      	movs	r1, r7
 80018f2:	4311      	orrs	r1, r2
 80018f4:	d0e5      	beq.n	80018c2 <__gedf2+0x2e>
 80018f6:	2002      	movs	r0, #2
 80018f8:	4240      	negs	r0, r0
 80018fa:	e7f4      	b.n	80018e6 <__gedf2+0x52>
 80018fc:	4330      	orrs	r0, r6
 80018fe:	d1fa      	bne.n	80018f6 <__gedf2+0x62>
 8001900:	42ac      	cmp	r4, r5
 8001902:	d00f      	beq.n	8001924 <__gedf2+0x90>
 8001904:	2c00      	cmp	r4, #0
 8001906:	d10f      	bne.n	8001928 <__gedf2+0x94>
 8001908:	433a      	orrs	r2, r7
 800190a:	d0e7      	beq.n	80018dc <__gedf2+0x48>
 800190c:	e00c      	b.n	8001928 <__gedf2+0x94>
 800190e:	2201      	movs	r2, #1
 8001910:	3b01      	subs	r3, #1
 8001912:	4393      	bics	r3, r2
 8001914:	0018      	movs	r0, r3
 8001916:	3001      	adds	r0, #1
 8001918:	e7e5      	b.n	80018e6 <__gedf2+0x52>
 800191a:	4663      	mov	r3, ip
 800191c:	2000      	movs	r0, #0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7db      	b.n	80018dc <__gedf2+0x48>
 8001924:	433a      	orrs	r2, r7
 8001926:	d1e6      	bne.n	80018f6 <__gedf2+0x62>
 8001928:	459a      	cmp	sl, r3
 800192a:	d1d7      	bne.n	80018dc <__gedf2+0x48>
 800192c:	42a5      	cmp	r5, r4
 800192e:	dcd5      	bgt.n	80018dc <__gedf2+0x48>
 8001930:	42a5      	cmp	r5, r4
 8001932:	db05      	blt.n	8001940 <__gedf2+0xac>
 8001934:	42be      	cmp	r6, r7
 8001936:	d8d1      	bhi.n	80018dc <__gedf2+0x48>
 8001938:	d008      	beq.n	800194c <__gedf2+0xb8>
 800193a:	2000      	movs	r0, #0
 800193c:	42be      	cmp	r6, r7
 800193e:	d2d2      	bcs.n	80018e6 <__gedf2+0x52>
 8001940:	4650      	mov	r0, sl
 8001942:	2301      	movs	r3, #1
 8001944:	3801      	subs	r0, #1
 8001946:	4398      	bics	r0, r3
 8001948:	3001      	adds	r0, #1
 800194a:	e7cc      	b.n	80018e6 <__gedf2+0x52>
 800194c:	45c8      	cmp	r8, r9
 800194e:	d8c5      	bhi.n	80018dc <__gedf2+0x48>
 8001950:	2000      	movs	r0, #0
 8001952:	45c8      	cmp	r8, r9
 8001954:	d3f4      	bcc.n	8001940 <__gedf2+0xac>
 8001956:	e7c6      	b.n	80018e6 <__gedf2+0x52>
 8001958:	000007ff 	.word	0x000007ff

0800195c <__ledf2>:
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	464f      	mov	r7, r9
 8001960:	4646      	mov	r6, r8
 8001962:	46d6      	mov	lr, sl
 8001964:	004d      	lsls	r5, r1, #1
 8001966:	b5c0      	push	{r6, r7, lr}
 8001968:	030e      	lsls	r6, r1, #12
 800196a:	0fc9      	lsrs	r1, r1, #31
 800196c:	468a      	mov	sl, r1
 800196e:	492e      	ldr	r1, [pc, #184]	; (8001a28 <__ledf2+0xcc>)
 8001970:	031f      	lsls	r7, r3, #12
 8001972:	005c      	lsls	r4, r3, #1
 8001974:	4680      	mov	r8, r0
 8001976:	0b36      	lsrs	r6, r6, #12
 8001978:	0d6d      	lsrs	r5, r5, #21
 800197a:	4691      	mov	r9, r2
 800197c:	0b3f      	lsrs	r7, r7, #12
 800197e:	0d64      	lsrs	r4, r4, #21
 8001980:	0fdb      	lsrs	r3, r3, #31
 8001982:	428d      	cmp	r5, r1
 8001984:	d018      	beq.n	80019b8 <__ledf2+0x5c>
 8001986:	428c      	cmp	r4, r1
 8001988:	d011      	beq.n	80019ae <__ledf2+0x52>
 800198a:	2d00      	cmp	r5, #0
 800198c:	d118      	bne.n	80019c0 <__ledf2+0x64>
 800198e:	4330      	orrs	r0, r6
 8001990:	4684      	mov	ip, r0
 8001992:	2c00      	cmp	r4, #0
 8001994:	d11e      	bne.n	80019d4 <__ledf2+0x78>
 8001996:	433a      	orrs	r2, r7
 8001998:	d11c      	bne.n	80019d4 <__ledf2+0x78>
 800199a:	4663      	mov	r3, ip
 800199c:	2000      	movs	r0, #0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d030      	beq.n	8001a04 <__ledf2+0xa8>
 80019a2:	4651      	mov	r1, sl
 80019a4:	2002      	movs	r0, #2
 80019a6:	3901      	subs	r1, #1
 80019a8:	4008      	ands	r0, r1
 80019aa:	3801      	subs	r0, #1
 80019ac:	e02a      	b.n	8001a04 <__ledf2+0xa8>
 80019ae:	0039      	movs	r1, r7
 80019b0:	4311      	orrs	r1, r2
 80019b2:	d0ea      	beq.n	800198a <__ledf2+0x2e>
 80019b4:	2002      	movs	r0, #2
 80019b6:	e025      	b.n	8001a04 <__ledf2+0xa8>
 80019b8:	4330      	orrs	r0, r6
 80019ba:	d1fb      	bne.n	80019b4 <__ledf2+0x58>
 80019bc:	42ac      	cmp	r4, r5
 80019be:	d026      	beq.n	8001a0e <__ledf2+0xb2>
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d126      	bne.n	8001a12 <__ledf2+0xb6>
 80019c4:	433a      	orrs	r2, r7
 80019c6:	d124      	bne.n	8001a12 <__ledf2+0xb6>
 80019c8:	4651      	mov	r1, sl
 80019ca:	2002      	movs	r0, #2
 80019cc:	3901      	subs	r1, #1
 80019ce:	4008      	ands	r0, r1
 80019d0:	3801      	subs	r0, #1
 80019d2:	e017      	b.n	8001a04 <__ledf2+0xa8>
 80019d4:	4662      	mov	r2, ip
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d00f      	beq.n	80019fa <__ledf2+0x9e>
 80019da:	459a      	cmp	sl, r3
 80019dc:	d1e1      	bne.n	80019a2 <__ledf2+0x46>
 80019de:	42a5      	cmp	r5, r4
 80019e0:	db05      	blt.n	80019ee <__ledf2+0x92>
 80019e2:	42be      	cmp	r6, r7
 80019e4:	d8dd      	bhi.n	80019a2 <__ledf2+0x46>
 80019e6:	d019      	beq.n	8001a1c <__ledf2+0xc0>
 80019e8:	2000      	movs	r0, #0
 80019ea:	42be      	cmp	r6, r7
 80019ec:	d20a      	bcs.n	8001a04 <__ledf2+0xa8>
 80019ee:	4650      	mov	r0, sl
 80019f0:	2301      	movs	r3, #1
 80019f2:	3801      	subs	r0, #1
 80019f4:	4398      	bics	r0, r3
 80019f6:	3001      	adds	r0, #1
 80019f8:	e004      	b.n	8001a04 <__ledf2+0xa8>
 80019fa:	2201      	movs	r2, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	4393      	bics	r3, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	3001      	adds	r0, #1
 8001a04:	bc1c      	pop	{r2, r3, r4}
 8001a06:	4690      	mov	r8, r2
 8001a08:	4699      	mov	r9, r3
 8001a0a:	46a2      	mov	sl, r4
 8001a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0e:	433a      	orrs	r2, r7
 8001a10:	d1d0      	bne.n	80019b4 <__ledf2+0x58>
 8001a12:	459a      	cmp	sl, r3
 8001a14:	d1c5      	bne.n	80019a2 <__ledf2+0x46>
 8001a16:	42a5      	cmp	r5, r4
 8001a18:	dcc3      	bgt.n	80019a2 <__ledf2+0x46>
 8001a1a:	e7e0      	b.n	80019de <__ledf2+0x82>
 8001a1c:	45c8      	cmp	r8, r9
 8001a1e:	d8c0      	bhi.n	80019a2 <__ledf2+0x46>
 8001a20:	2000      	movs	r0, #0
 8001a22:	45c8      	cmp	r8, r9
 8001a24:	d3e3      	bcc.n	80019ee <__ledf2+0x92>
 8001a26:	e7ed      	b.n	8001a04 <__ledf2+0xa8>
 8001a28:	000007ff 	.word	0x000007ff

08001a2c <__aeabi_dmul>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4657      	mov	r7, sl
 8001a30:	46de      	mov	lr, fp
 8001a32:	464e      	mov	r6, r9
 8001a34:	4645      	mov	r5, r8
 8001a36:	b5e0      	push	{r5, r6, r7, lr}
 8001a38:	4683      	mov	fp, r0
 8001a3a:	0006      	movs	r6, r0
 8001a3c:	030f      	lsls	r7, r1, #12
 8001a3e:	0048      	lsls	r0, r1, #1
 8001a40:	b087      	sub	sp, #28
 8001a42:	4692      	mov	sl, r2
 8001a44:	001d      	movs	r5, r3
 8001a46:	0b3f      	lsrs	r7, r7, #12
 8001a48:	0d40      	lsrs	r0, r0, #21
 8001a4a:	0fcc      	lsrs	r4, r1, #31
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dmul+0x26>
 8001a50:	e06f      	b.n	8001b32 <__aeabi_dmul+0x106>
 8001a52:	4bde      	ldr	r3, [pc, #888]	; (8001dcc <__aeabi_dmul+0x3a0>)
 8001a54:	4298      	cmp	r0, r3
 8001a56:	d038      	beq.n	8001aca <__aeabi_dmul+0x9e>
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	00ff      	lsls	r7, r7, #3
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	431f      	orrs	r7, r3
 8001a60:	0f73      	lsrs	r3, r6, #29
 8001a62:	433b      	orrs	r3, r7
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	4bda      	ldr	r3, [pc, #872]	; (8001dd0 <__aeabi_dmul+0x3a4>)
 8001a68:	2700      	movs	r7, #0
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	469b      	mov	fp, r3
 8001a70:	00f6      	lsls	r6, r6, #3
 8001a72:	4481      	add	r9, r0
 8001a74:	032b      	lsls	r3, r5, #12
 8001a76:	0069      	lsls	r1, r5, #1
 8001a78:	0b1b      	lsrs	r3, r3, #12
 8001a7a:	4652      	mov	r2, sl
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	0d49      	lsrs	r1, r1, #21
 8001a80:	0fed      	lsrs	r5, r5, #31
 8001a82:	2900      	cmp	r1, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dmul+0x5c>
 8001a86:	e085      	b.n	8001b94 <__aeabi_dmul+0x168>
 8001a88:	4bd0      	ldr	r3, [pc, #832]	; (8001dcc <__aeabi_dmul+0x3a0>)
 8001a8a:	4299      	cmp	r1, r3
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dmul+0x64>
 8001a8e:	e073      	b.n	8001b78 <__aeabi_dmul+0x14c>
 8001a90:	4643      	mov	r3, r8
 8001a92:	00da      	lsls	r2, r3, #3
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	041b      	lsls	r3, r3, #16
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	4652      	mov	r2, sl
 8001a9c:	48cc      	ldr	r0, [pc, #816]	; (8001dd0 <__aeabi_dmul+0x3a4>)
 8001a9e:	0f52      	lsrs	r2, r2, #29
 8001aa0:	4684      	mov	ip, r0
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	4652      	mov	r2, sl
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	4461      	add	r1, ip
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	4489      	add	r9, r1
 8001aae:	0021      	movs	r1, r4
 8001ab0:	4069      	eors	r1, r5
 8001ab2:	9100      	str	r1, [sp, #0]
 8001ab4:	468c      	mov	ip, r1
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4449      	add	r1, r9
 8001aba:	468a      	mov	sl, r1
 8001abc:	2f0f      	cmp	r7, #15
 8001abe:	d900      	bls.n	8001ac2 <__aeabi_dmul+0x96>
 8001ac0:	e090      	b.n	8001be4 <__aeabi_dmul+0x1b8>
 8001ac2:	49c4      	ldr	r1, [pc, #784]	; (8001dd4 <__aeabi_dmul+0x3a8>)
 8001ac4:	00bf      	lsls	r7, r7, #2
 8001ac6:	59cf      	ldr	r7, [r1, r7]
 8001ac8:	46bf      	mov	pc, r7
 8001aca:	465b      	mov	r3, fp
 8001acc:	433b      	orrs	r3, r7
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	d000      	beq.n	8001ad4 <__aeabi_dmul+0xa8>
 8001ad2:	e16a      	b.n	8001daa <__aeabi_dmul+0x37e>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	2708      	movs	r7, #8
 8001ad8:	2600      	movs	r6, #0
 8001ada:	4681      	mov	r9, r0
 8001adc:	469b      	mov	fp, r3
 8001ade:	e7c9      	b.n	8001a74 <__aeabi_dmul+0x48>
 8001ae0:	0032      	movs	r2, r6
 8001ae2:	4658      	mov	r0, fp
 8001ae4:	9b01      	ldr	r3, [sp, #4]
 8001ae6:	4661      	mov	r1, ip
 8001ae8:	9100      	str	r1, [sp, #0]
 8001aea:	2802      	cmp	r0, #2
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dmul+0xc4>
 8001aee:	e075      	b.n	8001bdc <__aeabi_dmul+0x1b0>
 8001af0:	2803      	cmp	r0, #3
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dmul+0xca>
 8001af4:	e1fe      	b.n	8001ef4 <__aeabi_dmul+0x4c8>
 8001af6:	2801      	cmp	r0, #1
 8001af8:	d000      	beq.n	8001afc <__aeabi_dmul+0xd0>
 8001afa:	e12c      	b.n	8001d56 <__aeabi_dmul+0x32a>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2700      	movs	r7, #0
 8001b00:	2600      	movs	r6, #0
 8001b02:	2500      	movs	r5, #0
 8001b04:	033f      	lsls	r7, r7, #12
 8001b06:	0d2a      	lsrs	r2, r5, #20
 8001b08:	0b3f      	lsrs	r7, r7, #12
 8001b0a:	48b3      	ldr	r0, [pc, #716]	; (8001dd8 <__aeabi_dmul+0x3ac>)
 8001b0c:	0512      	lsls	r2, r2, #20
 8001b0e:	433a      	orrs	r2, r7
 8001b10:	4002      	ands	r2, r0
 8001b12:	051b      	lsls	r3, r3, #20
 8001b14:	4313      	orrs	r3, r2
 8001b16:	9a00      	ldr	r2, [sp, #0]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	07d1      	lsls	r1, r2, #31
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	0030      	movs	r0, r6
 8001b22:	0019      	movs	r1, r3
 8001b24:	b007      	add	sp, #28
 8001b26:	bc3c      	pop	{r2, r3, r4, r5}
 8001b28:	4690      	mov	r8, r2
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	46a2      	mov	sl, r4
 8001b2e:	46ab      	mov	fp, r5
 8001b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b32:	465b      	mov	r3, fp
 8001b34:	433b      	orrs	r3, r7
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dmul+0x110>
 8001b3a:	e12f      	b.n	8001d9c <__aeabi_dmul+0x370>
 8001b3c:	2f00      	cmp	r7, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dmul+0x116>
 8001b40:	e1a5      	b.n	8001e8e <__aeabi_dmul+0x462>
 8001b42:	0038      	movs	r0, r7
 8001b44:	f000 fec0 	bl	80028c8 <__clzsi2>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	3b0b      	subs	r3, #11
 8001b4c:	2b1c      	cmp	r3, #28
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dmul+0x126>
 8001b50:	e196      	b.n	8001e80 <__aeabi_dmul+0x454>
 8001b52:	221d      	movs	r2, #29
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	465a      	mov	r2, fp
 8001b58:	0001      	movs	r1, r0
 8001b5a:	40da      	lsrs	r2, r3
 8001b5c:	465e      	mov	r6, fp
 8001b5e:	3908      	subs	r1, #8
 8001b60:	408f      	lsls	r7, r1
 8001b62:	0013      	movs	r3, r2
 8001b64:	408e      	lsls	r6, r1
 8001b66:	433b      	orrs	r3, r7
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	4b9c      	ldr	r3, [pc, #624]	; (8001ddc <__aeabi_dmul+0x3b0>)
 8001b6c:	2700      	movs	r7, #0
 8001b6e:	1a1b      	subs	r3, r3, r0
 8001b70:	4699      	mov	r9, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	469b      	mov	fp, r3
 8001b76:	e77d      	b.n	8001a74 <__aeabi_dmul+0x48>
 8001b78:	4641      	mov	r1, r8
 8001b7a:	4653      	mov	r3, sl
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	4993      	ldr	r1, [pc, #588]	; (8001dcc <__aeabi_dmul+0x3a0>)
 8001b80:	468c      	mov	ip, r1
 8001b82:	44e1      	add	r9, ip
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dmul+0x15e>
 8001b88:	e11a      	b.n	8001dc0 <__aeabi_dmul+0x394>
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	4317      	orrs	r7, r2
 8001b90:	2200      	movs	r2, #0
 8001b92:	e78c      	b.n	8001aae <__aeabi_dmul+0x82>
 8001b94:	4313      	orrs	r3, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dmul+0x16e>
 8001b98:	e10d      	b.n	8001db6 <__aeabi_dmul+0x38a>
 8001b9a:	4643      	mov	r3, r8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dmul+0x176>
 8001ba0:	e181      	b.n	8001ea6 <__aeabi_dmul+0x47a>
 8001ba2:	4640      	mov	r0, r8
 8001ba4:	f000 fe90 	bl	80028c8 <__clzsi2>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	3a0b      	subs	r2, #11
 8001bac:	2a1c      	cmp	r2, #28
 8001bae:	dd00      	ble.n	8001bb2 <__aeabi_dmul+0x186>
 8001bb0:	e172      	b.n	8001e98 <__aeabi_dmul+0x46c>
 8001bb2:	0001      	movs	r1, r0
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	3908      	subs	r1, #8
 8001bb8:	408b      	lsls	r3, r1
 8001bba:	4698      	mov	r8, r3
 8001bbc:	231d      	movs	r3, #29
 8001bbe:	1a9a      	subs	r2, r3, r2
 8001bc0:	4653      	mov	r3, sl
 8001bc2:	40d3      	lsrs	r3, r2
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	4643      	mov	r3, r8
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	4652      	mov	r2, sl
 8001bcc:	408a      	lsls	r2, r1
 8001bce:	4649      	mov	r1, r9
 8001bd0:	1a08      	subs	r0, r1, r0
 8001bd2:	4982      	ldr	r1, [pc, #520]	; (8001ddc <__aeabi_dmul+0x3b0>)
 8001bd4:	4689      	mov	r9, r1
 8001bd6:	4481      	add	r9, r0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e768      	b.n	8001aae <__aeabi_dmul+0x82>
 8001bdc:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <__aeabi_dmul+0x3a0>)
 8001bde:	2700      	movs	r7, #0
 8001be0:	2600      	movs	r6, #0
 8001be2:	e78e      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001be4:	0c14      	lsrs	r4, r2, #16
 8001be6:	0412      	lsls	r2, r2, #16
 8001be8:	0c12      	lsrs	r2, r2, #16
 8001bea:	0011      	movs	r1, r2
 8001bec:	0c37      	lsrs	r7, r6, #16
 8001bee:	0436      	lsls	r6, r6, #16
 8001bf0:	0c35      	lsrs	r5, r6, #16
 8001bf2:	4379      	muls	r1, r7
 8001bf4:	0028      	movs	r0, r5
 8001bf6:	468c      	mov	ip, r1
 8001bf8:	002e      	movs	r6, r5
 8001bfa:	4360      	muls	r0, r4
 8001bfc:	4460      	add	r0, ip
 8001bfe:	4683      	mov	fp, r0
 8001c00:	4356      	muls	r6, r2
 8001c02:	0021      	movs	r1, r4
 8001c04:	0c30      	lsrs	r0, r6, #16
 8001c06:	4680      	mov	r8, r0
 8001c08:	4658      	mov	r0, fp
 8001c0a:	4379      	muls	r1, r7
 8001c0c:	4440      	add	r0, r8
 8001c0e:	9102      	str	r1, [sp, #8]
 8001c10:	4584      	cmp	ip, r0
 8001c12:	d906      	bls.n	8001c22 <__aeabi_dmul+0x1f6>
 8001c14:	4688      	mov	r8, r1
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	0249      	lsls	r1, r1, #9
 8001c1a:	468c      	mov	ip, r1
 8001c1c:	44e0      	add	r8, ip
 8001c1e:	4641      	mov	r1, r8
 8001c20:	9102      	str	r1, [sp, #8]
 8001c22:	0436      	lsls	r6, r6, #16
 8001c24:	0c01      	lsrs	r1, r0, #16
 8001c26:	0c36      	lsrs	r6, r6, #16
 8001c28:	0400      	lsls	r0, r0, #16
 8001c2a:	468b      	mov	fp, r1
 8001c2c:	1981      	adds	r1, r0, r6
 8001c2e:	0c1e      	lsrs	r6, r3, #16
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	9103      	str	r1, [sp, #12]
 8001c36:	0019      	movs	r1, r3
 8001c38:	4379      	muls	r1, r7
 8001c3a:	468c      	mov	ip, r1
 8001c3c:	0028      	movs	r0, r5
 8001c3e:	4375      	muls	r5, r6
 8001c40:	4465      	add	r5, ip
 8001c42:	46a8      	mov	r8, r5
 8001c44:	4358      	muls	r0, r3
 8001c46:	0c05      	lsrs	r5, r0, #16
 8001c48:	4445      	add	r5, r8
 8001c4a:	4377      	muls	r7, r6
 8001c4c:	42a9      	cmp	r1, r5
 8001c4e:	d903      	bls.n	8001c58 <__aeabi_dmul+0x22c>
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0249      	lsls	r1, r1, #9
 8001c54:	468c      	mov	ip, r1
 8001c56:	4467      	add	r7, ip
 8001c58:	0c29      	lsrs	r1, r5, #16
 8001c5a:	468c      	mov	ip, r1
 8001c5c:	0039      	movs	r1, r7
 8001c5e:	0400      	lsls	r0, r0, #16
 8001c60:	0c00      	lsrs	r0, r0, #16
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	182d      	adds	r5, r5, r0
 8001c66:	4461      	add	r1, ip
 8001c68:	44ab      	add	fp, r5
 8001c6a:	9105      	str	r1, [sp, #20]
 8001c6c:	4659      	mov	r1, fp
 8001c6e:	9104      	str	r1, [sp, #16]
 8001c70:	9901      	ldr	r1, [sp, #4]
 8001c72:	040f      	lsls	r7, r1, #16
 8001c74:	0c3f      	lsrs	r7, r7, #16
 8001c76:	0c08      	lsrs	r0, r1, #16
 8001c78:	0039      	movs	r1, r7
 8001c7a:	4351      	muls	r1, r2
 8001c7c:	4342      	muls	r2, r0
 8001c7e:	4690      	mov	r8, r2
 8001c80:	0002      	movs	r2, r0
 8001c82:	468c      	mov	ip, r1
 8001c84:	0c09      	lsrs	r1, r1, #16
 8001c86:	468b      	mov	fp, r1
 8001c88:	4362      	muls	r2, r4
 8001c8a:	437c      	muls	r4, r7
 8001c8c:	4444      	add	r4, r8
 8001c8e:	445c      	add	r4, fp
 8001c90:	45a0      	cmp	r8, r4
 8001c92:	d903      	bls.n	8001c9c <__aeabi_dmul+0x270>
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0249      	lsls	r1, r1, #9
 8001c98:	4688      	mov	r8, r1
 8001c9a:	4442      	add	r2, r8
 8001c9c:	0c21      	lsrs	r1, r4, #16
 8001c9e:	4688      	mov	r8, r1
 8001ca0:	4661      	mov	r1, ip
 8001ca2:	0409      	lsls	r1, r1, #16
 8001ca4:	0c09      	lsrs	r1, r1, #16
 8001ca6:	468c      	mov	ip, r1
 8001ca8:	0039      	movs	r1, r7
 8001caa:	4359      	muls	r1, r3
 8001cac:	4343      	muls	r3, r0
 8001cae:	4370      	muls	r0, r6
 8001cb0:	437e      	muls	r6, r7
 8001cb2:	0c0f      	lsrs	r7, r1, #16
 8001cb4:	18f6      	adds	r6, r6, r3
 8001cb6:	0424      	lsls	r4, r4, #16
 8001cb8:	19be      	adds	r6, r7, r6
 8001cba:	4464      	add	r4, ip
 8001cbc:	4442      	add	r2, r8
 8001cbe:	468c      	mov	ip, r1
 8001cc0:	42b3      	cmp	r3, r6
 8001cc2:	d903      	bls.n	8001ccc <__aeabi_dmul+0x2a0>
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	4698      	mov	r8, r3
 8001cca:	4440      	add	r0, r8
 8001ccc:	9b02      	ldr	r3, [sp, #8]
 8001cce:	4661      	mov	r1, ip
 8001cd0:	4698      	mov	r8, r3
 8001cd2:	9b04      	ldr	r3, [sp, #16]
 8001cd4:	0437      	lsls	r7, r6, #16
 8001cd6:	4443      	add	r3, r8
 8001cd8:	469b      	mov	fp, r3
 8001cda:	45ab      	cmp	fp, r5
 8001cdc:	41ad      	sbcs	r5, r5
 8001cde:	426b      	negs	r3, r5
 8001ce0:	040d      	lsls	r5, r1, #16
 8001ce2:	9905      	ldr	r1, [sp, #20]
 8001ce4:	0c2d      	lsrs	r5, r5, #16
 8001ce6:	468c      	mov	ip, r1
 8001ce8:	197f      	adds	r7, r7, r5
 8001cea:	4467      	add	r7, ip
 8001cec:	18fd      	adds	r5, r7, r3
 8001cee:	46a8      	mov	r8, r5
 8001cf0:	465d      	mov	r5, fp
 8001cf2:	192d      	adds	r5, r5, r4
 8001cf4:	42a5      	cmp	r5, r4
 8001cf6:	41a4      	sbcs	r4, r4
 8001cf8:	4693      	mov	fp, r2
 8001cfa:	4264      	negs	r4, r4
 8001cfc:	46a4      	mov	ip, r4
 8001cfe:	44c3      	add	fp, r8
 8001d00:	44dc      	add	ip, fp
 8001d02:	428f      	cmp	r7, r1
 8001d04:	41bf      	sbcs	r7, r7
 8001d06:	4598      	cmp	r8, r3
 8001d08:	419b      	sbcs	r3, r3
 8001d0a:	4593      	cmp	fp, r2
 8001d0c:	4192      	sbcs	r2, r2
 8001d0e:	45a4      	cmp	ip, r4
 8001d10:	41a4      	sbcs	r4, r4
 8001d12:	425b      	negs	r3, r3
 8001d14:	427f      	negs	r7, r7
 8001d16:	431f      	orrs	r7, r3
 8001d18:	0c36      	lsrs	r6, r6, #16
 8001d1a:	4252      	negs	r2, r2
 8001d1c:	4264      	negs	r4, r4
 8001d1e:	19bf      	adds	r7, r7, r6
 8001d20:	4322      	orrs	r2, r4
 8001d22:	18bf      	adds	r7, r7, r2
 8001d24:	4662      	mov	r2, ip
 8001d26:	1838      	adds	r0, r7, r0
 8001d28:	0243      	lsls	r3, r0, #9
 8001d2a:	0dd2      	lsrs	r2, r2, #23
 8001d2c:	9903      	ldr	r1, [sp, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	026a      	lsls	r2, r5, #9
 8001d32:	430a      	orrs	r2, r1
 8001d34:	1e50      	subs	r0, r2, #1
 8001d36:	4182      	sbcs	r2, r0
 8001d38:	4661      	mov	r1, ip
 8001d3a:	0ded      	lsrs	r5, r5, #23
 8001d3c:	432a      	orrs	r2, r5
 8001d3e:	024e      	lsls	r6, r1, #9
 8001d40:	4332      	orrs	r2, r6
 8001d42:	01d9      	lsls	r1, r3, #7
 8001d44:	d400      	bmi.n	8001d48 <__aeabi_dmul+0x31c>
 8001d46:	e0b3      	b.n	8001eb0 <__aeabi_dmul+0x484>
 8001d48:	2601      	movs	r6, #1
 8001d4a:	0850      	lsrs	r0, r2, #1
 8001d4c:	4032      	ands	r2, r6
 8001d4e:	4302      	orrs	r2, r0
 8001d50:	07de      	lsls	r6, r3, #31
 8001d52:	4332      	orrs	r2, r6
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	4c22      	ldr	r4, [pc, #136]	; (8001de0 <__aeabi_dmul+0x3b4>)
 8001d58:	4454      	add	r4, sl
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	dd62      	ble.n	8001e24 <__aeabi_dmul+0x3f8>
 8001d5e:	0751      	lsls	r1, r2, #29
 8001d60:	d009      	beq.n	8001d76 <__aeabi_dmul+0x34a>
 8001d62:	200f      	movs	r0, #15
 8001d64:	4010      	ands	r0, r2
 8001d66:	2804      	cmp	r0, #4
 8001d68:	d005      	beq.n	8001d76 <__aeabi_dmul+0x34a>
 8001d6a:	1d10      	adds	r0, r2, #4
 8001d6c:	4290      	cmp	r0, r2
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4252      	negs	r2, r2
 8001d72:	189b      	adds	r3, r3, r2
 8001d74:	0002      	movs	r2, r0
 8001d76:	01d9      	lsls	r1, r3, #7
 8001d78:	d504      	bpl.n	8001d84 <__aeabi_dmul+0x358>
 8001d7a:	2480      	movs	r4, #128	; 0x80
 8001d7c:	4819      	ldr	r0, [pc, #100]	; (8001de4 <__aeabi_dmul+0x3b8>)
 8001d7e:	00e4      	lsls	r4, r4, #3
 8001d80:	4003      	ands	r3, r0
 8001d82:	4454      	add	r4, sl
 8001d84:	4818      	ldr	r0, [pc, #96]	; (8001de8 <__aeabi_dmul+0x3bc>)
 8001d86:	4284      	cmp	r4, r0
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dmul+0x360>
 8001d8a:	e727      	b.n	8001bdc <__aeabi_dmul+0x1b0>
 8001d8c:	075e      	lsls	r6, r3, #29
 8001d8e:	025b      	lsls	r3, r3, #9
 8001d90:	08d2      	lsrs	r2, r2, #3
 8001d92:	0b1f      	lsrs	r7, r3, #12
 8001d94:	0563      	lsls	r3, r4, #21
 8001d96:	4316      	orrs	r6, r2
 8001d98:	0d5b      	lsrs	r3, r3, #21
 8001d9a:	e6b2      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4699      	mov	r9, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	2704      	movs	r7, #4
 8001da4:	2600      	movs	r6, #0
 8001da6:	469b      	mov	fp, r3
 8001da8:	e664      	b.n	8001a74 <__aeabi_dmul+0x48>
 8001daa:	2303      	movs	r3, #3
 8001dac:	9701      	str	r7, [sp, #4]
 8001dae:	4681      	mov	r9, r0
 8001db0:	270c      	movs	r7, #12
 8001db2:	469b      	mov	fp, r3
 8001db4:	e65e      	b.n	8001a74 <__aeabi_dmul+0x48>
 8001db6:	2201      	movs	r2, #1
 8001db8:	2001      	movs	r0, #1
 8001dba:	4317      	orrs	r7, r2
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	e676      	b.n	8001aae <__aeabi_dmul+0x82>
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	431f      	orrs	r7, r3
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	e671      	b.n	8001aae <__aeabi_dmul+0x82>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	000007ff 	.word	0x000007ff
 8001dd0:	fffffc01 	.word	0xfffffc01
 8001dd4:	0800c2e8 	.word	0x0800c2e8
 8001dd8:	800fffff 	.word	0x800fffff
 8001ddc:	fffffc0d 	.word	0xfffffc0d
 8001de0:	000003ff 	.word	0x000003ff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	000007fe 	.word	0x000007fe
 8001dec:	2300      	movs	r3, #0
 8001dee:	2780      	movs	r7, #128	; 0x80
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	033f      	lsls	r7, r7, #12
 8001df4:	2600      	movs	r6, #0
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <__aeabi_dmul+0x4d8>)
 8001df8:	e683      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001dfa:	9b01      	ldr	r3, [sp, #4]
 8001dfc:	0032      	movs	r2, r6
 8001dfe:	46a4      	mov	ip, r4
 8001e00:	4658      	mov	r0, fp
 8001e02:	e670      	b.n	8001ae6 <__aeabi_dmul+0xba>
 8001e04:	46ac      	mov	ip, r5
 8001e06:	e66e      	b.n	8001ae6 <__aeabi_dmul+0xba>
 8001e08:	2780      	movs	r7, #128	; 0x80
 8001e0a:	9901      	ldr	r1, [sp, #4]
 8001e0c:	033f      	lsls	r7, r7, #12
 8001e0e:	4239      	tst	r1, r7
 8001e10:	d02d      	beq.n	8001e6e <__aeabi_dmul+0x442>
 8001e12:	423b      	tst	r3, r7
 8001e14:	d12b      	bne.n	8001e6e <__aeabi_dmul+0x442>
 8001e16:	431f      	orrs	r7, r3
 8001e18:	033f      	lsls	r7, r7, #12
 8001e1a:	0b3f      	lsrs	r7, r7, #12
 8001e1c:	9500      	str	r5, [sp, #0]
 8001e1e:	0016      	movs	r6, r2
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <__aeabi_dmul+0x4d8>)
 8001e22:	e66e      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001e24:	2501      	movs	r5, #1
 8001e26:	1b2d      	subs	r5, r5, r4
 8001e28:	2d38      	cmp	r5, #56	; 0x38
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dmul+0x402>
 8001e2c:	e666      	b.n	8001afc <__aeabi_dmul+0xd0>
 8001e2e:	2d1f      	cmp	r5, #31
 8001e30:	dc40      	bgt.n	8001eb4 <__aeabi_dmul+0x488>
 8001e32:	4835      	ldr	r0, [pc, #212]	; (8001f08 <__aeabi_dmul+0x4dc>)
 8001e34:	001c      	movs	r4, r3
 8001e36:	4450      	add	r0, sl
 8001e38:	0016      	movs	r6, r2
 8001e3a:	4082      	lsls	r2, r0
 8001e3c:	4084      	lsls	r4, r0
 8001e3e:	40ee      	lsrs	r6, r5
 8001e40:	1e50      	subs	r0, r2, #1
 8001e42:	4182      	sbcs	r2, r0
 8001e44:	4334      	orrs	r4, r6
 8001e46:	4314      	orrs	r4, r2
 8001e48:	40eb      	lsrs	r3, r5
 8001e4a:	0762      	lsls	r2, r4, #29
 8001e4c:	d009      	beq.n	8001e62 <__aeabi_dmul+0x436>
 8001e4e:	220f      	movs	r2, #15
 8001e50:	4022      	ands	r2, r4
 8001e52:	2a04      	cmp	r2, #4
 8001e54:	d005      	beq.n	8001e62 <__aeabi_dmul+0x436>
 8001e56:	0022      	movs	r2, r4
 8001e58:	1d14      	adds	r4, r2, #4
 8001e5a:	4294      	cmp	r4, r2
 8001e5c:	4180      	sbcs	r0, r0
 8001e5e:	4240      	negs	r0, r0
 8001e60:	181b      	adds	r3, r3, r0
 8001e62:	021a      	lsls	r2, r3, #8
 8001e64:	d53e      	bpl.n	8001ee4 <__aeabi_dmul+0x4b8>
 8001e66:	2301      	movs	r3, #1
 8001e68:	2700      	movs	r7, #0
 8001e6a:	2600      	movs	r6, #0
 8001e6c:	e649      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001e6e:	2780      	movs	r7, #128	; 0x80
 8001e70:	9b01      	ldr	r3, [sp, #4]
 8001e72:	033f      	lsls	r7, r7, #12
 8001e74:	431f      	orrs	r7, r3
 8001e76:	033f      	lsls	r7, r7, #12
 8001e78:	0b3f      	lsrs	r7, r7, #12
 8001e7a:	9400      	str	r4, [sp, #0]
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <__aeabi_dmul+0x4d8>)
 8001e7e:	e640      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001e80:	0003      	movs	r3, r0
 8001e82:	465a      	mov	r2, fp
 8001e84:	3b28      	subs	r3, #40	; 0x28
 8001e86:	409a      	lsls	r2, r3
 8001e88:	2600      	movs	r6, #0
 8001e8a:	9201      	str	r2, [sp, #4]
 8001e8c:	e66d      	b.n	8001b6a <__aeabi_dmul+0x13e>
 8001e8e:	4658      	mov	r0, fp
 8001e90:	f000 fd1a 	bl	80028c8 <__clzsi2>
 8001e94:	3020      	adds	r0, #32
 8001e96:	e657      	b.n	8001b48 <__aeabi_dmul+0x11c>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	4652      	mov	r2, sl
 8001e9c:	3b28      	subs	r3, #40	; 0x28
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	e693      	b.n	8001bce <__aeabi_dmul+0x1a2>
 8001ea6:	4650      	mov	r0, sl
 8001ea8:	f000 fd0e 	bl	80028c8 <__clzsi2>
 8001eac:	3020      	adds	r0, #32
 8001eae:	e67b      	b.n	8001ba8 <__aeabi_dmul+0x17c>
 8001eb0:	46ca      	mov	sl, r9
 8001eb2:	e750      	b.n	8001d56 <__aeabi_dmul+0x32a>
 8001eb4:	201f      	movs	r0, #31
 8001eb6:	001e      	movs	r6, r3
 8001eb8:	4240      	negs	r0, r0
 8001eba:	1b04      	subs	r4, r0, r4
 8001ebc:	40e6      	lsrs	r6, r4
 8001ebe:	2d20      	cmp	r5, #32
 8001ec0:	d003      	beq.n	8001eca <__aeabi_dmul+0x49e>
 8001ec2:	4c12      	ldr	r4, [pc, #72]	; (8001f0c <__aeabi_dmul+0x4e0>)
 8001ec4:	4454      	add	r4, sl
 8001ec6:	40a3      	lsls	r3, r4
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	1e50      	subs	r0, r2, #1
 8001ecc:	4182      	sbcs	r2, r0
 8001ece:	4332      	orrs	r2, r6
 8001ed0:	2607      	movs	r6, #7
 8001ed2:	2700      	movs	r7, #0
 8001ed4:	4016      	ands	r6, r2
 8001ed6:	d009      	beq.n	8001eec <__aeabi_dmul+0x4c0>
 8001ed8:	200f      	movs	r0, #15
 8001eda:	2300      	movs	r3, #0
 8001edc:	4010      	ands	r0, r2
 8001ede:	0014      	movs	r4, r2
 8001ee0:	2804      	cmp	r0, #4
 8001ee2:	d1b9      	bne.n	8001e58 <__aeabi_dmul+0x42c>
 8001ee4:	0022      	movs	r2, r4
 8001ee6:	075e      	lsls	r6, r3, #29
 8001ee8:	025b      	lsls	r3, r3, #9
 8001eea:	0b1f      	lsrs	r7, r3, #12
 8001eec:	08d2      	lsrs	r2, r2, #3
 8001eee:	4316      	orrs	r6, r2
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e606      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001ef4:	2780      	movs	r7, #128	; 0x80
 8001ef6:	033f      	lsls	r7, r7, #12
 8001ef8:	431f      	orrs	r7, r3
 8001efa:	033f      	lsls	r7, r7, #12
 8001efc:	0b3f      	lsrs	r7, r7, #12
 8001efe:	0016      	movs	r6, r2
 8001f00:	4b00      	ldr	r3, [pc, #0]	; (8001f04 <__aeabi_dmul+0x4d8>)
 8001f02:	e5fe      	b.n	8001b02 <__aeabi_dmul+0xd6>
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	0000041e 	.word	0x0000041e
 8001f0c:	0000043e 	.word	0x0000043e

08001f10 <__aeabi_dsub>:
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f12:	4657      	mov	r7, sl
 8001f14:	464e      	mov	r6, r9
 8001f16:	4645      	mov	r5, r8
 8001f18:	46de      	mov	lr, fp
 8001f1a:	000c      	movs	r4, r1
 8001f1c:	0309      	lsls	r1, r1, #12
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	0a49      	lsrs	r1, r1, #9
 8001f22:	0f46      	lsrs	r6, r0, #29
 8001f24:	005f      	lsls	r7, r3, #1
 8001f26:	4331      	orrs	r1, r6
 8001f28:	031e      	lsls	r6, r3, #12
 8001f2a:	0fdb      	lsrs	r3, r3, #31
 8001f2c:	0a76      	lsrs	r6, r6, #9
 8001f2e:	469b      	mov	fp, r3
 8001f30:	0f53      	lsrs	r3, r2, #29
 8001f32:	4333      	orrs	r3, r6
 8001f34:	4ec8      	ldr	r6, [pc, #800]	; (8002258 <__aeabi_dsub+0x348>)
 8001f36:	0065      	lsls	r5, r4, #1
 8001f38:	00c0      	lsls	r0, r0, #3
 8001f3a:	0fe4      	lsrs	r4, r4, #31
 8001f3c:	00d2      	lsls	r2, r2, #3
 8001f3e:	0d6d      	lsrs	r5, r5, #21
 8001f40:	46a2      	mov	sl, r4
 8001f42:	4681      	mov	r9, r0
 8001f44:	0d7f      	lsrs	r7, r7, #21
 8001f46:	469c      	mov	ip, r3
 8001f48:	4690      	mov	r8, r2
 8001f4a:	42b7      	cmp	r7, r6
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x40>
 8001f4e:	e0b9      	b.n	80020c4 <__aeabi_dsub+0x1b4>
 8001f50:	465b      	mov	r3, fp
 8001f52:	2601      	movs	r6, #1
 8001f54:	4073      	eors	r3, r6
 8001f56:	469b      	mov	fp, r3
 8001f58:	1bee      	subs	r6, r5, r7
 8001f5a:	45a3      	cmp	fp, r4
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x50>
 8001f5e:	e083      	b.n	8002068 <__aeabi_dsub+0x158>
 8001f60:	2e00      	cmp	r6, #0
 8001f62:	dd63      	ble.n	800202c <__aeabi_dsub+0x11c>
 8001f64:	2f00      	cmp	r7, #0
 8001f66:	d000      	beq.n	8001f6a <__aeabi_dsub+0x5a>
 8001f68:	e0b1      	b.n	80020ce <__aeabi_dsub+0x1be>
 8001f6a:	4663      	mov	r3, ip
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x62>
 8001f70:	e123      	b.n	80021ba <__aeabi_dsub+0x2aa>
 8001f72:	1e73      	subs	r3, r6, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d000      	beq.n	8001f7a <__aeabi_dsub+0x6a>
 8001f78:	e1ba      	b.n	80022f0 <__aeabi_dsub+0x3e0>
 8001f7a:	1a86      	subs	r6, r0, r2
 8001f7c:	4663      	mov	r3, ip
 8001f7e:	42b0      	cmp	r0, r6
 8001f80:	4180      	sbcs	r0, r0
 8001f82:	2501      	movs	r5, #1
 8001f84:	1ac9      	subs	r1, r1, r3
 8001f86:	4240      	negs	r0, r0
 8001f88:	1a09      	subs	r1, r1, r0
 8001f8a:	020b      	lsls	r3, r1, #8
 8001f8c:	d400      	bmi.n	8001f90 <__aeabi_dsub+0x80>
 8001f8e:	e147      	b.n	8002220 <__aeabi_dsub+0x310>
 8001f90:	0249      	lsls	r1, r1, #9
 8001f92:	0a4b      	lsrs	r3, r1, #9
 8001f94:	4698      	mov	r8, r3
 8001f96:	4643      	mov	r3, r8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x8e>
 8001f9c:	e189      	b.n	80022b2 <__aeabi_dsub+0x3a2>
 8001f9e:	4640      	mov	r0, r8
 8001fa0:	f000 fc92 	bl	80028c8 <__clzsi2>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	3b08      	subs	r3, #8
 8001fa8:	2b1f      	cmp	r3, #31
 8001faa:	dd00      	ble.n	8001fae <__aeabi_dsub+0x9e>
 8001fac:	e17c      	b.n	80022a8 <__aeabi_dsub+0x398>
 8001fae:	2220      	movs	r2, #32
 8001fb0:	0030      	movs	r0, r6
 8001fb2:	1ad2      	subs	r2, r2, r3
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	40d0      	lsrs	r0, r2
 8001fb8:	4099      	lsls	r1, r3
 8001fba:	0002      	movs	r2, r0
 8001fbc:	409e      	lsls	r6, r3
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	429d      	cmp	r5, r3
 8001fc2:	dd00      	ble.n	8001fc6 <__aeabi_dsub+0xb6>
 8001fc4:	e16a      	b.n	800229c <__aeabi_dsub+0x38c>
 8001fc6:	1b5d      	subs	r5, r3, r5
 8001fc8:	1c6b      	adds	r3, r5, #1
 8001fca:	2b1f      	cmp	r3, #31
 8001fcc:	dd00      	ble.n	8001fd0 <__aeabi_dsub+0xc0>
 8001fce:	e194      	b.n	80022fa <__aeabi_dsub+0x3ea>
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	0010      	movs	r0, r2
 8001fd4:	0035      	movs	r5, r6
 8001fd6:	1ac9      	subs	r1, r1, r3
 8001fd8:	408e      	lsls	r6, r1
 8001fda:	40da      	lsrs	r2, r3
 8001fdc:	4088      	lsls	r0, r1
 8001fde:	40dd      	lsrs	r5, r3
 8001fe0:	1e71      	subs	r1, r6, #1
 8001fe2:	418e      	sbcs	r6, r1
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4328      	orrs	r0, r5
 8001fea:	2500      	movs	r5, #0
 8001fec:	4306      	orrs	r6, r0
 8001fee:	4032      	ands	r2, r6
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	d009      	beq.n	8002008 <__aeabi_dsub+0xf8>
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	4033      	ands	r3, r6
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d005      	beq.n	8002008 <__aeabi_dsub+0xf8>
 8001ffc:	1d33      	adds	r3, r6, #4
 8001ffe:	42b3      	cmp	r3, r6
 8002000:	41b6      	sbcs	r6, r6
 8002002:	4276      	negs	r6, r6
 8002004:	1989      	adds	r1, r1, r6
 8002006:	001e      	movs	r6, r3
 8002008:	020b      	lsls	r3, r1, #8
 800200a:	d400      	bmi.n	800200e <__aeabi_dsub+0xfe>
 800200c:	e23d      	b.n	800248a <__aeabi_dsub+0x57a>
 800200e:	1c6a      	adds	r2, r5, #1
 8002010:	4b91      	ldr	r3, [pc, #580]	; (8002258 <__aeabi_dsub+0x348>)
 8002012:	0555      	lsls	r5, r2, #21
 8002014:	0d6d      	lsrs	r5, r5, #21
 8002016:	429a      	cmp	r2, r3
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x10c>
 800201a:	e119      	b.n	8002250 <__aeabi_dsub+0x340>
 800201c:	4a8f      	ldr	r2, [pc, #572]	; (800225c <__aeabi_dsub+0x34c>)
 800201e:	08f6      	lsrs	r6, r6, #3
 8002020:	400a      	ands	r2, r1
 8002022:	0757      	lsls	r7, r2, #29
 8002024:	0252      	lsls	r2, r2, #9
 8002026:	4337      	orrs	r7, r6
 8002028:	0b12      	lsrs	r2, r2, #12
 800202a:	e09b      	b.n	8002164 <__aeabi_dsub+0x254>
 800202c:	2e00      	cmp	r6, #0
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x122>
 8002030:	e0c5      	b.n	80021be <__aeabi_dsub+0x2ae>
 8002032:	1c6e      	adds	r6, r5, #1
 8002034:	0576      	lsls	r6, r6, #21
 8002036:	0d76      	lsrs	r6, r6, #21
 8002038:	2e01      	cmp	r6, #1
 800203a:	dc00      	bgt.n	800203e <__aeabi_dsub+0x12e>
 800203c:	e148      	b.n	80022d0 <__aeabi_dsub+0x3c0>
 800203e:	4667      	mov	r7, ip
 8002040:	1a86      	subs	r6, r0, r2
 8002042:	1bcb      	subs	r3, r1, r7
 8002044:	42b0      	cmp	r0, r6
 8002046:	41bf      	sbcs	r7, r7
 8002048:	427f      	negs	r7, r7
 800204a:	46b8      	mov	r8, r7
 800204c:	001f      	movs	r7, r3
 800204e:	4643      	mov	r3, r8
 8002050:	1aff      	subs	r7, r7, r3
 8002052:	003b      	movs	r3, r7
 8002054:	46b8      	mov	r8, r7
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	d500      	bpl.n	800205c <__aeabi_dsub+0x14c>
 800205a:	e15f      	b.n	800231c <__aeabi_dsub+0x40c>
 800205c:	4337      	orrs	r7, r6
 800205e:	d19a      	bne.n	8001f96 <__aeabi_dsub+0x86>
 8002060:	2200      	movs	r2, #0
 8002062:	2400      	movs	r4, #0
 8002064:	2500      	movs	r5, #0
 8002066:	e079      	b.n	800215c <__aeabi_dsub+0x24c>
 8002068:	2e00      	cmp	r6, #0
 800206a:	dc00      	bgt.n	800206e <__aeabi_dsub+0x15e>
 800206c:	e0fa      	b.n	8002264 <__aeabi_dsub+0x354>
 800206e:	2f00      	cmp	r7, #0
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x164>
 8002072:	e08d      	b.n	8002190 <__aeabi_dsub+0x280>
 8002074:	4b78      	ldr	r3, [pc, #480]	; (8002258 <__aeabi_dsub+0x348>)
 8002076:	429d      	cmp	r5, r3
 8002078:	d067      	beq.n	800214a <__aeabi_dsub+0x23a>
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	4667      	mov	r7, ip
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	431f      	orrs	r7, r3
 8002082:	46bc      	mov	ip, r7
 8002084:	2e38      	cmp	r6, #56	; 0x38
 8002086:	dc00      	bgt.n	800208a <__aeabi_dsub+0x17a>
 8002088:	e152      	b.n	8002330 <__aeabi_dsub+0x420>
 800208a:	4663      	mov	r3, ip
 800208c:	4313      	orrs	r3, r2
 800208e:	1e5a      	subs	r2, r3, #1
 8002090:	4193      	sbcs	r3, r2
 8002092:	181e      	adds	r6, r3, r0
 8002094:	4286      	cmp	r6, r0
 8002096:	4180      	sbcs	r0, r0
 8002098:	4240      	negs	r0, r0
 800209a:	1809      	adds	r1, r1, r0
 800209c:	020b      	lsls	r3, r1, #8
 800209e:	d400      	bmi.n	80020a2 <__aeabi_dsub+0x192>
 80020a0:	e0be      	b.n	8002220 <__aeabi_dsub+0x310>
 80020a2:	4b6d      	ldr	r3, [pc, #436]	; (8002258 <__aeabi_dsub+0x348>)
 80020a4:	3501      	adds	r5, #1
 80020a6:	429d      	cmp	r5, r3
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x19c>
 80020aa:	e0d2      	b.n	8002252 <__aeabi_dsub+0x342>
 80020ac:	4a6b      	ldr	r2, [pc, #428]	; (800225c <__aeabi_dsub+0x34c>)
 80020ae:	0873      	lsrs	r3, r6, #1
 80020b0:	400a      	ands	r2, r1
 80020b2:	2101      	movs	r1, #1
 80020b4:	400e      	ands	r6, r1
 80020b6:	431e      	orrs	r6, r3
 80020b8:	0851      	lsrs	r1, r2, #1
 80020ba:	07d3      	lsls	r3, r2, #31
 80020bc:	2207      	movs	r2, #7
 80020be:	431e      	orrs	r6, r3
 80020c0:	4032      	ands	r2, r6
 80020c2:	e795      	b.n	8001ff0 <__aeabi_dsub+0xe0>
 80020c4:	001e      	movs	r6, r3
 80020c6:	4316      	orrs	r6, r2
 80020c8:	d000      	beq.n	80020cc <__aeabi_dsub+0x1bc>
 80020ca:	e745      	b.n	8001f58 <__aeabi_dsub+0x48>
 80020cc:	e740      	b.n	8001f50 <__aeabi_dsub+0x40>
 80020ce:	4b62      	ldr	r3, [pc, #392]	; (8002258 <__aeabi_dsub+0x348>)
 80020d0:	429d      	cmp	r5, r3
 80020d2:	d03a      	beq.n	800214a <__aeabi_dsub+0x23a>
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	4667      	mov	r7, ip
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	431f      	orrs	r7, r3
 80020dc:	46bc      	mov	ip, r7
 80020de:	2e38      	cmp	r6, #56	; 0x38
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x1d4>
 80020e2:	e0eb      	b.n	80022bc <__aeabi_dsub+0x3ac>
 80020e4:	2e1f      	cmp	r6, #31
 80020e6:	dc00      	bgt.n	80020ea <__aeabi_dsub+0x1da>
 80020e8:	e13a      	b.n	8002360 <__aeabi_dsub+0x450>
 80020ea:	0033      	movs	r3, r6
 80020ec:	4667      	mov	r7, ip
 80020ee:	3b20      	subs	r3, #32
 80020f0:	40df      	lsrs	r7, r3
 80020f2:	003b      	movs	r3, r7
 80020f4:	2e20      	cmp	r6, #32
 80020f6:	d005      	beq.n	8002104 <__aeabi_dsub+0x1f4>
 80020f8:	2740      	movs	r7, #64	; 0x40
 80020fa:	1bbf      	subs	r7, r7, r6
 80020fc:	4666      	mov	r6, ip
 80020fe:	40be      	lsls	r6, r7
 8002100:	4332      	orrs	r2, r6
 8002102:	4690      	mov	r8, r2
 8002104:	4646      	mov	r6, r8
 8002106:	1e72      	subs	r2, r6, #1
 8002108:	4196      	sbcs	r6, r2
 800210a:	4333      	orrs	r3, r6
 800210c:	e0da      	b.n	80022c4 <__aeabi_dsub+0x3b4>
 800210e:	2b00      	cmp	r3, #0
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x204>
 8002112:	e214      	b.n	800253e <__aeabi_dsub+0x62e>
 8002114:	4663      	mov	r3, ip
 8002116:	4313      	orrs	r3, r2
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x20c>
 800211a:	e168      	b.n	80023ee <__aeabi_dsub+0x4de>
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	074e      	lsls	r6, r1, #29
 8002120:	08c0      	lsrs	r0, r0, #3
 8002122:	08c9      	lsrs	r1, r1, #3
 8002124:	031b      	lsls	r3, r3, #12
 8002126:	4306      	orrs	r6, r0
 8002128:	4219      	tst	r1, r3
 800212a:	d008      	beq.n	800213e <__aeabi_dsub+0x22e>
 800212c:	4660      	mov	r0, ip
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	4218      	tst	r0, r3
 8002132:	d104      	bne.n	800213e <__aeabi_dsub+0x22e>
 8002134:	4663      	mov	r3, ip
 8002136:	0001      	movs	r1, r0
 8002138:	08d2      	lsrs	r2, r2, #3
 800213a:	075e      	lsls	r6, r3, #29
 800213c:	4316      	orrs	r6, r2
 800213e:	00f3      	lsls	r3, r6, #3
 8002140:	4699      	mov	r9, r3
 8002142:	00c9      	lsls	r1, r1, #3
 8002144:	0f72      	lsrs	r2, r6, #29
 8002146:	4d44      	ldr	r5, [pc, #272]	; (8002258 <__aeabi_dsub+0x348>)
 8002148:	4311      	orrs	r1, r2
 800214a:	464b      	mov	r3, r9
 800214c:	08de      	lsrs	r6, r3, #3
 800214e:	4b42      	ldr	r3, [pc, #264]	; (8002258 <__aeabi_dsub+0x348>)
 8002150:	074f      	lsls	r7, r1, #29
 8002152:	4337      	orrs	r7, r6
 8002154:	08ca      	lsrs	r2, r1, #3
 8002156:	429d      	cmp	r5, r3
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x24c>
 800215a:	e06e      	b.n	800223a <__aeabi_dsub+0x32a>
 800215c:	0312      	lsls	r2, r2, #12
 800215e:	056d      	lsls	r5, r5, #21
 8002160:	0b12      	lsrs	r2, r2, #12
 8002162:	0d6d      	lsrs	r5, r5, #21
 8002164:	2100      	movs	r1, #0
 8002166:	0312      	lsls	r2, r2, #12
 8002168:	0b13      	lsrs	r3, r2, #12
 800216a:	0d0a      	lsrs	r2, r1, #20
 800216c:	0512      	lsls	r2, r2, #20
 800216e:	431a      	orrs	r2, r3
 8002170:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <__aeabi_dsub+0x350>)
 8002172:	052d      	lsls	r5, r5, #20
 8002174:	4013      	ands	r3, r2
 8002176:	432b      	orrs	r3, r5
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	07e4      	lsls	r4, r4, #31
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	4323      	orrs	r3, r4
 8002180:	0038      	movs	r0, r7
 8002182:	0019      	movs	r1, r3
 8002184:	bc3c      	pop	{r2, r3, r4, r5}
 8002186:	4690      	mov	r8, r2
 8002188:	4699      	mov	r9, r3
 800218a:	46a2      	mov	sl, r4
 800218c:	46ab      	mov	fp, r5
 800218e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002190:	4663      	mov	r3, ip
 8002192:	4313      	orrs	r3, r2
 8002194:	d011      	beq.n	80021ba <__aeabi_dsub+0x2aa>
 8002196:	1e73      	subs	r3, r6, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d000      	beq.n	800219e <__aeabi_dsub+0x28e>
 800219c:	e107      	b.n	80023ae <__aeabi_dsub+0x49e>
 800219e:	1886      	adds	r6, r0, r2
 80021a0:	4286      	cmp	r6, r0
 80021a2:	4180      	sbcs	r0, r0
 80021a4:	4461      	add	r1, ip
 80021a6:	4240      	negs	r0, r0
 80021a8:	1809      	adds	r1, r1, r0
 80021aa:	2501      	movs	r5, #1
 80021ac:	020b      	lsls	r3, r1, #8
 80021ae:	d537      	bpl.n	8002220 <__aeabi_dsub+0x310>
 80021b0:	2502      	movs	r5, #2
 80021b2:	e77b      	b.n	80020ac <__aeabi_dsub+0x19c>
 80021b4:	003e      	movs	r6, r7
 80021b6:	4661      	mov	r1, ip
 80021b8:	4691      	mov	r9, r2
 80021ba:	0035      	movs	r5, r6
 80021bc:	e7c5      	b.n	800214a <__aeabi_dsub+0x23a>
 80021be:	465c      	mov	r4, fp
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	d000      	beq.n	80021c6 <__aeabi_dsub+0x2b6>
 80021c4:	e0e1      	b.n	800238a <__aeabi_dsub+0x47a>
 80021c6:	000b      	movs	r3, r1
 80021c8:	4303      	orrs	r3, r0
 80021ca:	d0f3      	beq.n	80021b4 <__aeabi_dsub+0x2a4>
 80021cc:	1c73      	adds	r3, r6, #1
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dsub+0x2c2>
 80021d0:	e1ac      	b.n	800252c <__aeabi_dsub+0x61c>
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <__aeabi_dsub+0x348>)
 80021d4:	429f      	cmp	r7, r3
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x2ca>
 80021d8:	e13a      	b.n	8002450 <__aeabi_dsub+0x540>
 80021da:	43f3      	mvns	r3, r6
 80021dc:	2b38      	cmp	r3, #56	; 0x38
 80021de:	dd00      	ble.n	80021e2 <__aeabi_dsub+0x2d2>
 80021e0:	e16f      	b.n	80024c2 <__aeabi_dsub+0x5b2>
 80021e2:	2b1f      	cmp	r3, #31
 80021e4:	dd00      	ble.n	80021e8 <__aeabi_dsub+0x2d8>
 80021e6:	e18c      	b.n	8002502 <__aeabi_dsub+0x5f2>
 80021e8:	2520      	movs	r5, #32
 80021ea:	000e      	movs	r6, r1
 80021ec:	1aed      	subs	r5, r5, r3
 80021ee:	40ae      	lsls	r6, r5
 80021f0:	46b0      	mov	r8, r6
 80021f2:	0006      	movs	r6, r0
 80021f4:	46aa      	mov	sl, r5
 80021f6:	40de      	lsrs	r6, r3
 80021f8:	4645      	mov	r5, r8
 80021fa:	4335      	orrs	r5, r6
 80021fc:	002e      	movs	r6, r5
 80021fe:	4655      	mov	r5, sl
 8002200:	40d9      	lsrs	r1, r3
 8002202:	40a8      	lsls	r0, r5
 8002204:	4663      	mov	r3, ip
 8002206:	1e45      	subs	r5, r0, #1
 8002208:	41a8      	sbcs	r0, r5
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	469c      	mov	ip, r3
 800220e:	4330      	orrs	r0, r6
 8002210:	1a16      	subs	r6, r2, r0
 8002212:	42b2      	cmp	r2, r6
 8002214:	4192      	sbcs	r2, r2
 8002216:	4663      	mov	r3, ip
 8002218:	4252      	negs	r2, r2
 800221a:	1a99      	subs	r1, r3, r2
 800221c:	003d      	movs	r5, r7
 800221e:	e6b4      	b.n	8001f8a <__aeabi_dsub+0x7a>
 8002220:	2207      	movs	r2, #7
 8002222:	4032      	ands	r2, r6
 8002224:	2a00      	cmp	r2, #0
 8002226:	d000      	beq.n	800222a <__aeabi_dsub+0x31a>
 8002228:	e6e4      	b.n	8001ff4 <__aeabi_dsub+0xe4>
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <__aeabi_dsub+0x348>)
 800222c:	08f6      	lsrs	r6, r6, #3
 800222e:	074f      	lsls	r7, r1, #29
 8002230:	4337      	orrs	r7, r6
 8002232:	08ca      	lsrs	r2, r1, #3
 8002234:	429d      	cmp	r5, r3
 8002236:	d000      	beq.n	800223a <__aeabi_dsub+0x32a>
 8002238:	e790      	b.n	800215c <__aeabi_dsub+0x24c>
 800223a:	003b      	movs	r3, r7
 800223c:	4313      	orrs	r3, r2
 800223e:	d100      	bne.n	8002242 <__aeabi_dsub+0x332>
 8002240:	e1a6      	b.n	8002590 <__aeabi_dsub+0x680>
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	031b      	lsls	r3, r3, #12
 8002246:	431a      	orrs	r2, r3
 8002248:	0312      	lsls	r2, r2, #12
 800224a:	0b12      	lsrs	r2, r2, #12
 800224c:	4d02      	ldr	r5, [pc, #8]	; (8002258 <__aeabi_dsub+0x348>)
 800224e:	e789      	b.n	8002164 <__aeabi_dsub+0x254>
 8002250:	0015      	movs	r5, r2
 8002252:	2200      	movs	r2, #0
 8002254:	2700      	movs	r7, #0
 8002256:	e785      	b.n	8002164 <__aeabi_dsub+0x254>
 8002258:	000007ff 	.word	0x000007ff
 800225c:	ff7fffff 	.word	0xff7fffff
 8002260:	800fffff 	.word	0x800fffff
 8002264:	2e00      	cmp	r6, #0
 8002266:	d000      	beq.n	800226a <__aeabi_dsub+0x35a>
 8002268:	e0c7      	b.n	80023fa <__aeabi_dsub+0x4ea>
 800226a:	1c6b      	adds	r3, r5, #1
 800226c:	055e      	lsls	r6, r3, #21
 800226e:	0d76      	lsrs	r6, r6, #21
 8002270:	2e01      	cmp	r6, #1
 8002272:	dc00      	bgt.n	8002276 <__aeabi_dsub+0x366>
 8002274:	e0f0      	b.n	8002458 <__aeabi_dsub+0x548>
 8002276:	4dc8      	ldr	r5, [pc, #800]	; (8002598 <__aeabi_dsub+0x688>)
 8002278:	42ab      	cmp	r3, r5
 800227a:	d100      	bne.n	800227e <__aeabi_dsub+0x36e>
 800227c:	e0b9      	b.n	80023f2 <__aeabi_dsub+0x4e2>
 800227e:	1885      	adds	r5, r0, r2
 8002280:	000a      	movs	r2, r1
 8002282:	4285      	cmp	r5, r0
 8002284:	4189      	sbcs	r1, r1
 8002286:	4462      	add	r2, ip
 8002288:	4249      	negs	r1, r1
 800228a:	1851      	adds	r1, r2, r1
 800228c:	2207      	movs	r2, #7
 800228e:	07ce      	lsls	r6, r1, #31
 8002290:	086d      	lsrs	r5, r5, #1
 8002292:	432e      	orrs	r6, r5
 8002294:	0849      	lsrs	r1, r1, #1
 8002296:	4032      	ands	r2, r6
 8002298:	001d      	movs	r5, r3
 800229a:	e6a9      	b.n	8001ff0 <__aeabi_dsub+0xe0>
 800229c:	49bf      	ldr	r1, [pc, #764]	; (800259c <__aeabi_dsub+0x68c>)
 800229e:	1aed      	subs	r5, r5, r3
 80022a0:	4011      	ands	r1, r2
 80022a2:	2207      	movs	r2, #7
 80022a4:	4032      	ands	r2, r6
 80022a6:	e6a3      	b.n	8001ff0 <__aeabi_dsub+0xe0>
 80022a8:	0032      	movs	r2, r6
 80022aa:	3828      	subs	r0, #40	; 0x28
 80022ac:	4082      	lsls	r2, r0
 80022ae:	2600      	movs	r6, #0
 80022b0:	e686      	b.n	8001fc0 <__aeabi_dsub+0xb0>
 80022b2:	0030      	movs	r0, r6
 80022b4:	f000 fb08 	bl	80028c8 <__clzsi2>
 80022b8:	3020      	adds	r0, #32
 80022ba:	e673      	b.n	8001fa4 <__aeabi_dsub+0x94>
 80022bc:	4663      	mov	r3, ip
 80022be:	4313      	orrs	r3, r2
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	4193      	sbcs	r3, r2
 80022c4:	1ac6      	subs	r6, r0, r3
 80022c6:	42b0      	cmp	r0, r6
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	4240      	negs	r0, r0
 80022cc:	1a09      	subs	r1, r1, r0
 80022ce:	e65c      	b.n	8001f8a <__aeabi_dsub+0x7a>
 80022d0:	000e      	movs	r6, r1
 80022d2:	4667      	mov	r7, ip
 80022d4:	4306      	orrs	r6, r0
 80022d6:	4317      	orrs	r7, r2
 80022d8:	2d00      	cmp	r5, #0
 80022da:	d15e      	bne.n	800239a <__aeabi_dsub+0x48a>
 80022dc:	2e00      	cmp	r6, #0
 80022de:	d000      	beq.n	80022e2 <__aeabi_dsub+0x3d2>
 80022e0:	e0f3      	b.n	80024ca <__aeabi_dsub+0x5ba>
 80022e2:	2f00      	cmp	r7, #0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x3d8>
 80022e6:	e11e      	b.n	8002526 <__aeabi_dsub+0x616>
 80022e8:	465c      	mov	r4, fp
 80022ea:	4661      	mov	r1, ip
 80022ec:	4691      	mov	r9, r2
 80022ee:	e72c      	b.n	800214a <__aeabi_dsub+0x23a>
 80022f0:	4fa9      	ldr	r7, [pc, #676]	; (8002598 <__aeabi_dsub+0x688>)
 80022f2:	42be      	cmp	r6, r7
 80022f4:	d07b      	beq.n	80023ee <__aeabi_dsub+0x4de>
 80022f6:	001e      	movs	r6, r3
 80022f8:	e6f1      	b.n	80020de <__aeabi_dsub+0x1ce>
 80022fa:	0010      	movs	r0, r2
 80022fc:	3d1f      	subs	r5, #31
 80022fe:	40e8      	lsrs	r0, r5
 8002300:	2b20      	cmp	r3, #32
 8002302:	d003      	beq.n	800230c <__aeabi_dsub+0x3fc>
 8002304:	2140      	movs	r1, #64	; 0x40
 8002306:	1acb      	subs	r3, r1, r3
 8002308:	409a      	lsls	r2, r3
 800230a:	4316      	orrs	r6, r2
 800230c:	1e73      	subs	r3, r6, #1
 800230e:	419e      	sbcs	r6, r3
 8002310:	2207      	movs	r2, #7
 8002312:	4306      	orrs	r6, r0
 8002314:	4032      	ands	r2, r6
 8002316:	2100      	movs	r1, #0
 8002318:	2500      	movs	r5, #0
 800231a:	e783      	b.n	8002224 <__aeabi_dsub+0x314>
 800231c:	1a16      	subs	r6, r2, r0
 800231e:	4663      	mov	r3, ip
 8002320:	42b2      	cmp	r2, r6
 8002322:	4180      	sbcs	r0, r0
 8002324:	1a59      	subs	r1, r3, r1
 8002326:	4240      	negs	r0, r0
 8002328:	1a0b      	subs	r3, r1, r0
 800232a:	4698      	mov	r8, r3
 800232c:	465c      	mov	r4, fp
 800232e:	e632      	b.n	8001f96 <__aeabi_dsub+0x86>
 8002330:	2e1f      	cmp	r6, #31
 8002332:	dd00      	ble.n	8002336 <__aeabi_dsub+0x426>
 8002334:	e0ab      	b.n	800248e <__aeabi_dsub+0x57e>
 8002336:	2720      	movs	r7, #32
 8002338:	1bbb      	subs	r3, r7, r6
 800233a:	469a      	mov	sl, r3
 800233c:	4663      	mov	r3, ip
 800233e:	4657      	mov	r7, sl
 8002340:	40bb      	lsls	r3, r7
 8002342:	4699      	mov	r9, r3
 8002344:	0013      	movs	r3, r2
 8002346:	464f      	mov	r7, r9
 8002348:	40f3      	lsrs	r3, r6
 800234a:	431f      	orrs	r7, r3
 800234c:	003b      	movs	r3, r7
 800234e:	4657      	mov	r7, sl
 8002350:	40ba      	lsls	r2, r7
 8002352:	1e57      	subs	r7, r2, #1
 8002354:	41ba      	sbcs	r2, r7
 8002356:	4313      	orrs	r3, r2
 8002358:	4662      	mov	r2, ip
 800235a:	40f2      	lsrs	r2, r6
 800235c:	1889      	adds	r1, r1, r2
 800235e:	e698      	b.n	8002092 <__aeabi_dsub+0x182>
 8002360:	2720      	movs	r7, #32
 8002362:	1bbb      	subs	r3, r7, r6
 8002364:	469a      	mov	sl, r3
 8002366:	4663      	mov	r3, ip
 8002368:	4657      	mov	r7, sl
 800236a:	40bb      	lsls	r3, r7
 800236c:	4699      	mov	r9, r3
 800236e:	0013      	movs	r3, r2
 8002370:	464f      	mov	r7, r9
 8002372:	40f3      	lsrs	r3, r6
 8002374:	431f      	orrs	r7, r3
 8002376:	003b      	movs	r3, r7
 8002378:	4657      	mov	r7, sl
 800237a:	40ba      	lsls	r2, r7
 800237c:	1e57      	subs	r7, r2, #1
 800237e:	41ba      	sbcs	r2, r7
 8002380:	4313      	orrs	r3, r2
 8002382:	4662      	mov	r2, ip
 8002384:	40f2      	lsrs	r2, r6
 8002386:	1a89      	subs	r1, r1, r2
 8002388:	e79c      	b.n	80022c4 <__aeabi_dsub+0x3b4>
 800238a:	4b83      	ldr	r3, [pc, #524]	; (8002598 <__aeabi_dsub+0x688>)
 800238c:	429f      	cmp	r7, r3
 800238e:	d05f      	beq.n	8002450 <__aeabi_dsub+0x540>
 8002390:	2580      	movs	r5, #128	; 0x80
 8002392:	042d      	lsls	r5, r5, #16
 8002394:	4273      	negs	r3, r6
 8002396:	4329      	orrs	r1, r5
 8002398:	e720      	b.n	80021dc <__aeabi_dsub+0x2cc>
 800239a:	2e00      	cmp	r6, #0
 800239c:	d10c      	bne.n	80023b8 <__aeabi_dsub+0x4a8>
 800239e:	2f00      	cmp	r7, #0
 80023a0:	d100      	bne.n	80023a4 <__aeabi_dsub+0x494>
 80023a2:	e0d0      	b.n	8002546 <__aeabi_dsub+0x636>
 80023a4:	465c      	mov	r4, fp
 80023a6:	4661      	mov	r1, ip
 80023a8:	4691      	mov	r9, r2
 80023aa:	4d7b      	ldr	r5, [pc, #492]	; (8002598 <__aeabi_dsub+0x688>)
 80023ac:	e6cd      	b.n	800214a <__aeabi_dsub+0x23a>
 80023ae:	4f7a      	ldr	r7, [pc, #488]	; (8002598 <__aeabi_dsub+0x688>)
 80023b0:	42be      	cmp	r6, r7
 80023b2:	d01c      	beq.n	80023ee <__aeabi_dsub+0x4de>
 80023b4:	001e      	movs	r6, r3
 80023b6:	e665      	b.n	8002084 <__aeabi_dsub+0x174>
 80023b8:	2f00      	cmp	r7, #0
 80023ba:	d018      	beq.n	80023ee <__aeabi_dsub+0x4de>
 80023bc:	08c0      	lsrs	r0, r0, #3
 80023be:	074e      	lsls	r6, r1, #29
 80023c0:	4306      	orrs	r6, r0
 80023c2:	2080      	movs	r0, #128	; 0x80
 80023c4:	08c9      	lsrs	r1, r1, #3
 80023c6:	0300      	lsls	r0, r0, #12
 80023c8:	4201      	tst	r1, r0
 80023ca:	d008      	beq.n	80023de <__aeabi_dsub+0x4ce>
 80023cc:	4663      	mov	r3, ip
 80023ce:	08dc      	lsrs	r4, r3, #3
 80023d0:	4204      	tst	r4, r0
 80023d2:	d104      	bne.n	80023de <__aeabi_dsub+0x4ce>
 80023d4:	0021      	movs	r1, r4
 80023d6:	46da      	mov	sl, fp
 80023d8:	08d2      	lsrs	r2, r2, #3
 80023da:	075e      	lsls	r6, r3, #29
 80023dc:	4316      	orrs	r6, r2
 80023de:	00f3      	lsls	r3, r6, #3
 80023e0:	4699      	mov	r9, r3
 80023e2:	2401      	movs	r4, #1
 80023e4:	4653      	mov	r3, sl
 80023e6:	00c9      	lsls	r1, r1, #3
 80023e8:	0f72      	lsrs	r2, r6, #29
 80023ea:	4311      	orrs	r1, r2
 80023ec:	401c      	ands	r4, r3
 80023ee:	4d6a      	ldr	r5, [pc, #424]	; (8002598 <__aeabi_dsub+0x688>)
 80023f0:	e6ab      	b.n	800214a <__aeabi_dsub+0x23a>
 80023f2:	001d      	movs	r5, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	2700      	movs	r7, #0
 80023f8:	e6b4      	b.n	8002164 <__aeabi_dsub+0x254>
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	d159      	bne.n	80024b2 <__aeabi_dsub+0x5a2>
 80023fe:	000b      	movs	r3, r1
 8002400:	4303      	orrs	r3, r0
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x4f6>
 8002404:	e6d6      	b.n	80021b4 <__aeabi_dsub+0x2a4>
 8002406:	1c73      	adds	r3, r6, #1
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x4fc>
 800240a:	e0b2      	b.n	8002572 <__aeabi_dsub+0x662>
 800240c:	4b62      	ldr	r3, [pc, #392]	; (8002598 <__aeabi_dsub+0x688>)
 800240e:	429f      	cmp	r7, r3
 8002410:	d01e      	beq.n	8002450 <__aeabi_dsub+0x540>
 8002412:	43f3      	mvns	r3, r6
 8002414:	2b38      	cmp	r3, #56	; 0x38
 8002416:	dc6f      	bgt.n	80024f8 <__aeabi_dsub+0x5e8>
 8002418:	2b1f      	cmp	r3, #31
 800241a:	dd00      	ble.n	800241e <__aeabi_dsub+0x50e>
 800241c:	e097      	b.n	800254e <__aeabi_dsub+0x63e>
 800241e:	2520      	movs	r5, #32
 8002420:	000e      	movs	r6, r1
 8002422:	1aed      	subs	r5, r5, r3
 8002424:	40ae      	lsls	r6, r5
 8002426:	46b0      	mov	r8, r6
 8002428:	0006      	movs	r6, r0
 800242a:	46aa      	mov	sl, r5
 800242c:	40de      	lsrs	r6, r3
 800242e:	4645      	mov	r5, r8
 8002430:	4335      	orrs	r5, r6
 8002432:	002e      	movs	r6, r5
 8002434:	4655      	mov	r5, sl
 8002436:	40a8      	lsls	r0, r5
 8002438:	40d9      	lsrs	r1, r3
 800243a:	1e45      	subs	r5, r0, #1
 800243c:	41a8      	sbcs	r0, r5
 800243e:	448c      	add	ip, r1
 8002440:	4306      	orrs	r6, r0
 8002442:	18b6      	adds	r6, r6, r2
 8002444:	4296      	cmp	r6, r2
 8002446:	4192      	sbcs	r2, r2
 8002448:	4251      	negs	r1, r2
 800244a:	4461      	add	r1, ip
 800244c:	003d      	movs	r5, r7
 800244e:	e625      	b.n	800209c <__aeabi_dsub+0x18c>
 8002450:	003d      	movs	r5, r7
 8002452:	4661      	mov	r1, ip
 8002454:	4691      	mov	r9, r2
 8002456:	e678      	b.n	800214a <__aeabi_dsub+0x23a>
 8002458:	000b      	movs	r3, r1
 800245a:	4303      	orrs	r3, r0
 800245c:	2d00      	cmp	r5, #0
 800245e:	d000      	beq.n	8002462 <__aeabi_dsub+0x552>
 8002460:	e655      	b.n	800210e <__aeabi_dsub+0x1fe>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f5      	beq.n	8002452 <__aeabi_dsub+0x542>
 8002466:	4663      	mov	r3, ip
 8002468:	4313      	orrs	r3, r2
 800246a:	d100      	bne.n	800246e <__aeabi_dsub+0x55e>
 800246c:	e66d      	b.n	800214a <__aeabi_dsub+0x23a>
 800246e:	1886      	adds	r6, r0, r2
 8002470:	4286      	cmp	r6, r0
 8002472:	4180      	sbcs	r0, r0
 8002474:	4461      	add	r1, ip
 8002476:	4240      	negs	r0, r0
 8002478:	1809      	adds	r1, r1, r0
 800247a:	2200      	movs	r2, #0
 800247c:	020b      	lsls	r3, r1, #8
 800247e:	d400      	bmi.n	8002482 <__aeabi_dsub+0x572>
 8002480:	e6d0      	b.n	8002224 <__aeabi_dsub+0x314>
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <__aeabi_dsub+0x68c>)
 8002484:	3501      	adds	r5, #1
 8002486:	4019      	ands	r1, r3
 8002488:	e5b2      	b.n	8001ff0 <__aeabi_dsub+0xe0>
 800248a:	46b1      	mov	r9, r6
 800248c:	e65d      	b.n	800214a <__aeabi_dsub+0x23a>
 800248e:	0033      	movs	r3, r6
 8002490:	4667      	mov	r7, ip
 8002492:	3b20      	subs	r3, #32
 8002494:	40df      	lsrs	r7, r3
 8002496:	003b      	movs	r3, r7
 8002498:	2e20      	cmp	r6, #32
 800249a:	d005      	beq.n	80024a8 <__aeabi_dsub+0x598>
 800249c:	2740      	movs	r7, #64	; 0x40
 800249e:	1bbf      	subs	r7, r7, r6
 80024a0:	4666      	mov	r6, ip
 80024a2:	40be      	lsls	r6, r7
 80024a4:	4332      	orrs	r2, r6
 80024a6:	4690      	mov	r8, r2
 80024a8:	4646      	mov	r6, r8
 80024aa:	1e72      	subs	r2, r6, #1
 80024ac:	4196      	sbcs	r6, r2
 80024ae:	4333      	orrs	r3, r6
 80024b0:	e5ef      	b.n	8002092 <__aeabi_dsub+0x182>
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <__aeabi_dsub+0x688>)
 80024b4:	429f      	cmp	r7, r3
 80024b6:	d0cb      	beq.n	8002450 <__aeabi_dsub+0x540>
 80024b8:	2580      	movs	r5, #128	; 0x80
 80024ba:	042d      	lsls	r5, r5, #16
 80024bc:	4273      	negs	r3, r6
 80024be:	4329      	orrs	r1, r5
 80024c0:	e7a8      	b.n	8002414 <__aeabi_dsub+0x504>
 80024c2:	4308      	orrs	r0, r1
 80024c4:	1e41      	subs	r1, r0, #1
 80024c6:	4188      	sbcs	r0, r1
 80024c8:	e6a2      	b.n	8002210 <__aeabi_dsub+0x300>
 80024ca:	2f00      	cmp	r7, #0
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x5c0>
 80024ce:	e63c      	b.n	800214a <__aeabi_dsub+0x23a>
 80024d0:	4663      	mov	r3, ip
 80024d2:	1a86      	subs	r6, r0, r2
 80024d4:	1acf      	subs	r7, r1, r3
 80024d6:	42b0      	cmp	r0, r6
 80024d8:	419b      	sbcs	r3, r3
 80024da:	425b      	negs	r3, r3
 80024dc:	1afb      	subs	r3, r7, r3
 80024de:	4698      	mov	r8, r3
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	d54e      	bpl.n	8002582 <__aeabi_dsub+0x672>
 80024e4:	1a16      	subs	r6, r2, r0
 80024e6:	4663      	mov	r3, ip
 80024e8:	42b2      	cmp	r2, r6
 80024ea:	4192      	sbcs	r2, r2
 80024ec:	1a59      	subs	r1, r3, r1
 80024ee:	4252      	negs	r2, r2
 80024f0:	1a89      	subs	r1, r1, r2
 80024f2:	465c      	mov	r4, fp
 80024f4:	2200      	movs	r2, #0
 80024f6:	e57b      	b.n	8001ff0 <__aeabi_dsub+0xe0>
 80024f8:	4301      	orrs	r1, r0
 80024fa:	000e      	movs	r6, r1
 80024fc:	1e71      	subs	r1, r6, #1
 80024fe:	418e      	sbcs	r6, r1
 8002500:	e79f      	b.n	8002442 <__aeabi_dsub+0x532>
 8002502:	001d      	movs	r5, r3
 8002504:	000e      	movs	r6, r1
 8002506:	3d20      	subs	r5, #32
 8002508:	40ee      	lsrs	r6, r5
 800250a:	46b0      	mov	r8, r6
 800250c:	2b20      	cmp	r3, #32
 800250e:	d004      	beq.n	800251a <__aeabi_dsub+0x60a>
 8002510:	2540      	movs	r5, #64	; 0x40
 8002512:	1aeb      	subs	r3, r5, r3
 8002514:	4099      	lsls	r1, r3
 8002516:	4308      	orrs	r0, r1
 8002518:	4681      	mov	r9, r0
 800251a:	4648      	mov	r0, r9
 800251c:	4643      	mov	r3, r8
 800251e:	1e41      	subs	r1, r0, #1
 8002520:	4188      	sbcs	r0, r1
 8002522:	4318      	orrs	r0, r3
 8002524:	e674      	b.n	8002210 <__aeabi_dsub+0x300>
 8002526:	2200      	movs	r2, #0
 8002528:	2400      	movs	r4, #0
 800252a:	e617      	b.n	800215c <__aeabi_dsub+0x24c>
 800252c:	1a16      	subs	r6, r2, r0
 800252e:	4663      	mov	r3, ip
 8002530:	42b2      	cmp	r2, r6
 8002532:	4192      	sbcs	r2, r2
 8002534:	1a59      	subs	r1, r3, r1
 8002536:	4252      	negs	r2, r2
 8002538:	1a89      	subs	r1, r1, r2
 800253a:	003d      	movs	r5, r7
 800253c:	e525      	b.n	8001f8a <__aeabi_dsub+0x7a>
 800253e:	4661      	mov	r1, ip
 8002540:	4691      	mov	r9, r2
 8002542:	4d15      	ldr	r5, [pc, #84]	; (8002598 <__aeabi_dsub+0x688>)
 8002544:	e601      	b.n	800214a <__aeabi_dsub+0x23a>
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	2400      	movs	r4, #0
 800254a:	0312      	lsls	r2, r2, #12
 800254c:	e679      	b.n	8002242 <__aeabi_dsub+0x332>
 800254e:	001d      	movs	r5, r3
 8002550:	000e      	movs	r6, r1
 8002552:	3d20      	subs	r5, #32
 8002554:	40ee      	lsrs	r6, r5
 8002556:	46b0      	mov	r8, r6
 8002558:	2b20      	cmp	r3, #32
 800255a:	d004      	beq.n	8002566 <__aeabi_dsub+0x656>
 800255c:	2540      	movs	r5, #64	; 0x40
 800255e:	1aeb      	subs	r3, r5, r3
 8002560:	4099      	lsls	r1, r3
 8002562:	4308      	orrs	r0, r1
 8002564:	4681      	mov	r9, r0
 8002566:	464e      	mov	r6, r9
 8002568:	4643      	mov	r3, r8
 800256a:	1e71      	subs	r1, r6, #1
 800256c:	418e      	sbcs	r6, r1
 800256e:	431e      	orrs	r6, r3
 8002570:	e767      	b.n	8002442 <__aeabi_dsub+0x532>
 8002572:	1886      	adds	r6, r0, r2
 8002574:	4296      	cmp	r6, r2
 8002576:	419b      	sbcs	r3, r3
 8002578:	4461      	add	r1, ip
 800257a:	425b      	negs	r3, r3
 800257c:	18c9      	adds	r1, r1, r3
 800257e:	003d      	movs	r5, r7
 8002580:	e58c      	b.n	800209c <__aeabi_dsub+0x18c>
 8002582:	4647      	mov	r7, r8
 8002584:	4337      	orrs	r7, r6
 8002586:	d0ce      	beq.n	8002526 <__aeabi_dsub+0x616>
 8002588:	2207      	movs	r2, #7
 800258a:	4641      	mov	r1, r8
 800258c:	4032      	ands	r2, r6
 800258e:	e649      	b.n	8002224 <__aeabi_dsub+0x314>
 8002590:	2700      	movs	r7, #0
 8002592:	003a      	movs	r2, r7
 8002594:	e5e6      	b.n	8002164 <__aeabi_dsub+0x254>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	000007ff 	.word	0x000007ff
 800259c:	ff7fffff 	.word	0xff7fffff

080025a0 <__aeabi_dcmpun>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4e0c      	ldr	r6, [pc, #48]	; (80025d4 <__aeabi_dcmpun+0x34>)
 80025a4:	030d      	lsls	r5, r1, #12
 80025a6:	031c      	lsls	r4, r3, #12
 80025a8:	0049      	lsls	r1, r1, #1
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	0b2d      	lsrs	r5, r5, #12
 80025ae:	0d49      	lsrs	r1, r1, #21
 80025b0:	0b24      	lsrs	r4, r4, #12
 80025b2:	0d5b      	lsrs	r3, r3, #21
 80025b4:	42b1      	cmp	r1, r6
 80025b6:	d008      	beq.n	80025ca <__aeabi_dcmpun+0x2a>
 80025b8:	4906      	ldr	r1, [pc, #24]	; (80025d4 <__aeabi_dcmpun+0x34>)
 80025ba:	2000      	movs	r0, #0
 80025bc:	428b      	cmp	r3, r1
 80025be:	d103      	bne.n	80025c8 <__aeabi_dcmpun+0x28>
 80025c0:	4314      	orrs	r4, r2
 80025c2:	0020      	movs	r0, r4
 80025c4:	1e44      	subs	r4, r0, #1
 80025c6:	41a0      	sbcs	r0, r4
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
 80025ca:	4305      	orrs	r5, r0
 80025cc:	2001      	movs	r0, #1
 80025ce:	2d00      	cmp	r5, #0
 80025d0:	d1fa      	bne.n	80025c8 <__aeabi_dcmpun+0x28>
 80025d2:	e7f1      	b.n	80025b8 <__aeabi_dcmpun+0x18>
 80025d4:	000007ff 	.word	0x000007ff

080025d8 <__aeabi_d2iz>:
 80025d8:	b530      	push	{r4, r5, lr}
 80025da:	4d14      	ldr	r5, [pc, #80]	; (800262c <__aeabi_d2iz+0x54>)
 80025dc:	030a      	lsls	r2, r1, #12
 80025de:	004b      	lsls	r3, r1, #1
 80025e0:	0b12      	lsrs	r2, r2, #12
 80025e2:	0d5b      	lsrs	r3, r3, #21
 80025e4:	0fc9      	lsrs	r1, r1, #31
 80025e6:	2400      	movs	r4, #0
 80025e8:	42ab      	cmp	r3, r5
 80025ea:	dd11      	ble.n	8002610 <__aeabi_d2iz+0x38>
 80025ec:	4c10      	ldr	r4, [pc, #64]	; (8002630 <__aeabi_d2iz+0x58>)
 80025ee:	42a3      	cmp	r3, r4
 80025f0:	dc10      	bgt.n	8002614 <__aeabi_d2iz+0x3c>
 80025f2:	2480      	movs	r4, #128	; 0x80
 80025f4:	0364      	lsls	r4, r4, #13
 80025f6:	4322      	orrs	r2, r4
 80025f8:	4c0e      	ldr	r4, [pc, #56]	; (8002634 <__aeabi_d2iz+0x5c>)
 80025fa:	1ae4      	subs	r4, r4, r3
 80025fc:	2c1f      	cmp	r4, #31
 80025fe:	dd0c      	ble.n	800261a <__aeabi_d2iz+0x42>
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <__aeabi_d2iz+0x60>)
 8002602:	1ac3      	subs	r3, r0, r3
 8002604:	40da      	lsrs	r2, r3
 8002606:	0013      	movs	r3, r2
 8002608:	425c      	negs	r4, r3
 800260a:	2900      	cmp	r1, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_d2iz+0x38>
 800260e:	001c      	movs	r4, r3
 8002610:	0020      	movs	r0, r4
 8002612:	bd30      	pop	{r4, r5, pc}
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <__aeabi_d2iz+0x64>)
 8002616:	18cc      	adds	r4, r1, r3
 8002618:	e7fa      	b.n	8002610 <__aeabi_d2iz+0x38>
 800261a:	4d09      	ldr	r5, [pc, #36]	; (8002640 <__aeabi_d2iz+0x68>)
 800261c:	40e0      	lsrs	r0, r4
 800261e:	46ac      	mov	ip, r5
 8002620:	4463      	add	r3, ip
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	4303      	orrs	r3, r0
 8002628:	e7ee      	b.n	8002608 <__aeabi_d2iz+0x30>
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	000003fe 	.word	0x000003fe
 8002630:	0000041d 	.word	0x0000041d
 8002634:	00000433 	.word	0x00000433
 8002638:	00000413 	.word	0x00000413
 800263c:	7fffffff 	.word	0x7fffffff
 8002640:	fffffbed 	.word	0xfffffbed

08002644 <__aeabi_i2d>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2800      	cmp	r0, #0
 8002648:	d02d      	beq.n	80026a6 <__aeabi_i2d+0x62>
 800264a:	17c3      	asrs	r3, r0, #31
 800264c:	18c5      	adds	r5, r0, r3
 800264e:	405d      	eors	r5, r3
 8002650:	0fc4      	lsrs	r4, r0, #31
 8002652:	0028      	movs	r0, r5
 8002654:	f000 f938 	bl	80028c8 <__clzsi2>
 8002658:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <__aeabi_i2d+0x6c>)
 800265a:	1a1b      	subs	r3, r3, r0
 800265c:	055b      	lsls	r3, r3, #21
 800265e:	0d5b      	lsrs	r3, r3, #21
 8002660:	280a      	cmp	r0, #10
 8002662:	dd15      	ble.n	8002690 <__aeabi_i2d+0x4c>
 8002664:	380b      	subs	r0, #11
 8002666:	4085      	lsls	r5, r0
 8002668:	2200      	movs	r2, #0
 800266a:	032d      	lsls	r5, r5, #12
 800266c:	0b2d      	lsrs	r5, r5, #12
 800266e:	2100      	movs	r1, #0
 8002670:	0010      	movs	r0, r2
 8002672:	032d      	lsls	r5, r5, #12
 8002674:	0d0a      	lsrs	r2, r1, #20
 8002676:	0b2d      	lsrs	r5, r5, #12
 8002678:	0512      	lsls	r2, r2, #20
 800267a:	432a      	orrs	r2, r5
 800267c:	4d0d      	ldr	r5, [pc, #52]	; (80026b4 <__aeabi_i2d+0x70>)
 800267e:	051b      	lsls	r3, r3, #20
 8002680:	402a      	ands	r2, r5
 8002682:	4313      	orrs	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	07e4      	lsls	r4, r4, #31
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	4323      	orrs	r3, r4
 800268c:	0019      	movs	r1, r3
 800268e:	bd70      	pop	{r4, r5, r6, pc}
 8002690:	0002      	movs	r2, r0
 8002692:	0029      	movs	r1, r5
 8002694:	3215      	adds	r2, #21
 8002696:	4091      	lsls	r1, r2
 8002698:	000a      	movs	r2, r1
 800269a:	210b      	movs	r1, #11
 800269c:	1a08      	subs	r0, r1, r0
 800269e:	40c5      	lsrs	r5, r0
 80026a0:	032d      	lsls	r5, r5, #12
 80026a2:	0b2d      	lsrs	r5, r5, #12
 80026a4:	e7e3      	b.n	800266e <__aeabi_i2d+0x2a>
 80026a6:	2400      	movs	r4, #0
 80026a8:	2300      	movs	r3, #0
 80026aa:	2500      	movs	r5, #0
 80026ac:	2200      	movs	r2, #0
 80026ae:	e7de      	b.n	800266e <__aeabi_i2d+0x2a>
 80026b0:	0000041e 	.word	0x0000041e
 80026b4:	800fffff 	.word	0x800fffff

080026b8 <__aeabi_ui2d>:
 80026b8:	b510      	push	{r4, lr}
 80026ba:	1e04      	subs	r4, r0, #0
 80026bc:	d025      	beq.n	800270a <__aeabi_ui2d+0x52>
 80026be:	f000 f903 	bl	80028c8 <__clzsi2>
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <__aeabi_ui2d+0x5c>)
 80026c4:	1a1b      	subs	r3, r3, r0
 80026c6:	055b      	lsls	r3, r3, #21
 80026c8:	0d5b      	lsrs	r3, r3, #21
 80026ca:	280a      	cmp	r0, #10
 80026cc:	dd12      	ble.n	80026f4 <__aeabi_ui2d+0x3c>
 80026ce:	380b      	subs	r0, #11
 80026d0:	4084      	lsls	r4, r0
 80026d2:	2200      	movs	r2, #0
 80026d4:	0324      	lsls	r4, r4, #12
 80026d6:	0b24      	lsrs	r4, r4, #12
 80026d8:	2100      	movs	r1, #0
 80026da:	0010      	movs	r0, r2
 80026dc:	0324      	lsls	r4, r4, #12
 80026de:	0d0a      	lsrs	r2, r1, #20
 80026e0:	0b24      	lsrs	r4, r4, #12
 80026e2:	0512      	lsls	r2, r2, #20
 80026e4:	4322      	orrs	r2, r4
 80026e6:	4c0c      	ldr	r4, [pc, #48]	; (8002718 <__aeabi_ui2d+0x60>)
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	4022      	ands	r2, r4
 80026ec:	4313      	orrs	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	0859      	lsrs	r1, r3, #1
 80026f2:	bd10      	pop	{r4, pc}
 80026f4:	0002      	movs	r2, r0
 80026f6:	0021      	movs	r1, r4
 80026f8:	3215      	adds	r2, #21
 80026fa:	4091      	lsls	r1, r2
 80026fc:	000a      	movs	r2, r1
 80026fe:	210b      	movs	r1, #11
 8002700:	1a08      	subs	r0, r1, r0
 8002702:	40c4      	lsrs	r4, r0
 8002704:	0324      	lsls	r4, r4, #12
 8002706:	0b24      	lsrs	r4, r4, #12
 8002708:	e7e6      	b.n	80026d8 <__aeabi_ui2d+0x20>
 800270a:	2300      	movs	r3, #0
 800270c:	2400      	movs	r4, #0
 800270e:	2200      	movs	r2, #0
 8002710:	e7e2      	b.n	80026d8 <__aeabi_ui2d+0x20>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	0000041e 	.word	0x0000041e
 8002718:	800fffff 	.word	0x800fffff

0800271c <__aeabi_f2d>:
 800271c:	0041      	lsls	r1, r0, #1
 800271e:	0e09      	lsrs	r1, r1, #24
 8002720:	1c4b      	adds	r3, r1, #1
 8002722:	b570      	push	{r4, r5, r6, lr}
 8002724:	b2db      	uxtb	r3, r3
 8002726:	0246      	lsls	r6, r0, #9
 8002728:	0a75      	lsrs	r5, r6, #9
 800272a:	0fc4      	lsrs	r4, r0, #31
 800272c:	2b01      	cmp	r3, #1
 800272e:	dd14      	ble.n	800275a <__aeabi_f2d+0x3e>
 8002730:	23e0      	movs	r3, #224	; 0xe0
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	076d      	lsls	r5, r5, #29
 8002736:	0b36      	lsrs	r6, r6, #12
 8002738:	18cb      	adds	r3, r1, r3
 800273a:	2100      	movs	r1, #0
 800273c:	0d0a      	lsrs	r2, r1, #20
 800273e:	0028      	movs	r0, r5
 8002740:	0512      	lsls	r2, r2, #20
 8002742:	4d1c      	ldr	r5, [pc, #112]	; (80027b4 <__aeabi_f2d+0x98>)
 8002744:	4332      	orrs	r2, r6
 8002746:	055b      	lsls	r3, r3, #21
 8002748:	402a      	ands	r2, r5
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	4313      	orrs	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	07e4      	lsls	r4, r4, #31
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	4323      	orrs	r3, r4
 8002756:	0019      	movs	r1, r3
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	2900      	cmp	r1, #0
 800275c:	d114      	bne.n	8002788 <__aeabi_f2d+0x6c>
 800275e:	2d00      	cmp	r5, #0
 8002760:	d01e      	beq.n	80027a0 <__aeabi_f2d+0x84>
 8002762:	0028      	movs	r0, r5
 8002764:	f000 f8b0 	bl	80028c8 <__clzsi2>
 8002768:	280a      	cmp	r0, #10
 800276a:	dc1c      	bgt.n	80027a6 <__aeabi_f2d+0x8a>
 800276c:	230b      	movs	r3, #11
 800276e:	002a      	movs	r2, r5
 8002770:	1a1b      	subs	r3, r3, r0
 8002772:	40da      	lsrs	r2, r3
 8002774:	0003      	movs	r3, r0
 8002776:	3315      	adds	r3, #21
 8002778:	409d      	lsls	r5, r3
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <__aeabi_f2d+0x9c>)
 800277c:	0312      	lsls	r2, r2, #12
 800277e:	1a1b      	subs	r3, r3, r0
 8002780:	055b      	lsls	r3, r3, #21
 8002782:	0b16      	lsrs	r6, r2, #12
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	e7d8      	b.n	800273a <__aeabi_f2d+0x1e>
 8002788:	2d00      	cmp	r5, #0
 800278a:	d006      	beq.n	800279a <__aeabi_f2d+0x7e>
 800278c:	0b32      	lsrs	r2, r6, #12
 800278e:	2680      	movs	r6, #128	; 0x80
 8002790:	0336      	lsls	r6, r6, #12
 8002792:	076d      	lsls	r5, r5, #29
 8002794:	4316      	orrs	r6, r2
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <__aeabi_f2d+0xa0>)
 8002798:	e7cf      	b.n	800273a <__aeabi_f2d+0x1e>
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <__aeabi_f2d+0xa0>)
 800279c:	2600      	movs	r6, #0
 800279e:	e7cc      	b.n	800273a <__aeabi_f2d+0x1e>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	e7c9      	b.n	800273a <__aeabi_f2d+0x1e>
 80027a6:	0003      	movs	r3, r0
 80027a8:	002a      	movs	r2, r5
 80027aa:	3b0b      	subs	r3, #11
 80027ac:	409a      	lsls	r2, r3
 80027ae:	2500      	movs	r5, #0
 80027b0:	e7e3      	b.n	800277a <__aeabi_f2d+0x5e>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	800fffff 	.word	0x800fffff
 80027b8:	00000389 	.word	0x00000389
 80027bc:	000007ff 	.word	0x000007ff

080027c0 <__aeabi_d2f>:
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c2:	004c      	lsls	r4, r1, #1
 80027c4:	0d64      	lsrs	r4, r4, #21
 80027c6:	030b      	lsls	r3, r1, #12
 80027c8:	1c62      	adds	r2, r4, #1
 80027ca:	0a5b      	lsrs	r3, r3, #9
 80027cc:	0f46      	lsrs	r6, r0, #29
 80027ce:	0552      	lsls	r2, r2, #21
 80027d0:	0fc9      	lsrs	r1, r1, #31
 80027d2:	431e      	orrs	r6, r3
 80027d4:	00c5      	lsls	r5, r0, #3
 80027d6:	0d52      	lsrs	r2, r2, #21
 80027d8:	2a01      	cmp	r2, #1
 80027da:	dd29      	ble.n	8002830 <__aeabi_d2f+0x70>
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <__aeabi_d2f+0xfc>)
 80027de:	18e7      	adds	r7, r4, r3
 80027e0:	2ffe      	cmp	r7, #254	; 0xfe
 80027e2:	dc1c      	bgt.n	800281e <__aeabi_d2f+0x5e>
 80027e4:	2f00      	cmp	r7, #0
 80027e6:	dd3b      	ble.n	8002860 <__aeabi_d2f+0xa0>
 80027e8:	0180      	lsls	r0, r0, #6
 80027ea:	1e43      	subs	r3, r0, #1
 80027ec:	4198      	sbcs	r0, r3
 80027ee:	2207      	movs	r2, #7
 80027f0:	00f3      	lsls	r3, r6, #3
 80027f2:	0f6d      	lsrs	r5, r5, #29
 80027f4:	4303      	orrs	r3, r0
 80027f6:	432b      	orrs	r3, r5
 80027f8:	401a      	ands	r2, r3
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d004      	beq.n	8002808 <__aeabi_d2f+0x48>
 80027fe:	220f      	movs	r2, #15
 8002800:	401a      	ands	r2, r3
 8002802:	2a04      	cmp	r2, #4
 8002804:	d000      	beq.n	8002808 <__aeabi_d2f+0x48>
 8002806:	3304      	adds	r3, #4
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	04d2      	lsls	r2, r2, #19
 800280c:	401a      	ands	r2, r3
 800280e:	d024      	beq.n	800285a <__aeabi_d2f+0x9a>
 8002810:	3701      	adds	r7, #1
 8002812:	b2fa      	uxtb	r2, r7
 8002814:	2fff      	cmp	r7, #255	; 0xff
 8002816:	d002      	beq.n	800281e <__aeabi_d2f+0x5e>
 8002818:	019b      	lsls	r3, r3, #6
 800281a:	0a58      	lsrs	r0, r3, #9
 800281c:	e001      	b.n	8002822 <__aeabi_d2f+0x62>
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	2000      	movs	r0, #0
 8002822:	0240      	lsls	r0, r0, #9
 8002824:	05d2      	lsls	r2, r2, #23
 8002826:	0a40      	lsrs	r0, r0, #9
 8002828:	07c9      	lsls	r1, r1, #31
 800282a:	4310      	orrs	r0, r2
 800282c:	4308      	orrs	r0, r1
 800282e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002830:	4335      	orrs	r5, r6
 8002832:	2c00      	cmp	r4, #0
 8002834:	d104      	bne.n	8002840 <__aeabi_d2f+0x80>
 8002836:	2d00      	cmp	r5, #0
 8002838:	d10a      	bne.n	8002850 <__aeabi_d2f+0x90>
 800283a:	2200      	movs	r2, #0
 800283c:	2000      	movs	r0, #0
 800283e:	e7f0      	b.n	8002822 <__aeabi_d2f+0x62>
 8002840:	2d00      	cmp	r5, #0
 8002842:	d0ec      	beq.n	800281e <__aeabi_d2f+0x5e>
 8002844:	2080      	movs	r0, #128	; 0x80
 8002846:	03c0      	lsls	r0, r0, #15
 8002848:	4330      	orrs	r0, r6
 800284a:	22ff      	movs	r2, #255	; 0xff
 800284c:	e7e9      	b.n	8002822 <__aeabi_d2f+0x62>
 800284e:	2400      	movs	r4, #0
 8002850:	2300      	movs	r3, #0
 8002852:	025b      	lsls	r3, r3, #9
 8002854:	0a58      	lsrs	r0, r3, #9
 8002856:	b2e2      	uxtb	r2, r4
 8002858:	e7e3      	b.n	8002822 <__aeabi_d2f+0x62>
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	003c      	movs	r4, r7
 800285e:	e7f8      	b.n	8002852 <__aeabi_d2f+0x92>
 8002860:	003b      	movs	r3, r7
 8002862:	3317      	adds	r3, #23
 8002864:	dbf3      	blt.n	800284e <__aeabi_d2f+0x8e>
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	4333      	orrs	r3, r6
 800286c:	261e      	movs	r6, #30
 800286e:	1bf6      	subs	r6, r6, r7
 8002870:	2e1f      	cmp	r6, #31
 8002872:	dd14      	ble.n	800289e <__aeabi_d2f+0xde>
 8002874:	2202      	movs	r2, #2
 8002876:	4252      	negs	r2, r2
 8002878:	1bd7      	subs	r7, r2, r7
 800287a:	001a      	movs	r2, r3
 800287c:	40fa      	lsrs	r2, r7
 800287e:	0017      	movs	r7, r2
 8002880:	2e20      	cmp	r6, #32
 8002882:	d004      	beq.n	800288e <__aeabi_d2f+0xce>
 8002884:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <__aeabi_d2f+0x100>)
 8002886:	4694      	mov	ip, r2
 8002888:	4464      	add	r4, ip
 800288a:	40a3      	lsls	r3, r4
 800288c:	431d      	orrs	r5, r3
 800288e:	002b      	movs	r3, r5
 8002890:	1e5d      	subs	r5, r3, #1
 8002892:	41ab      	sbcs	r3, r5
 8002894:	2207      	movs	r2, #7
 8002896:	433b      	orrs	r3, r7
 8002898:	401a      	ands	r2, r3
 800289a:	2700      	movs	r7, #0
 800289c:	e7ad      	b.n	80027fa <__aeabi_d2f+0x3a>
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <__aeabi_d2f+0x104>)
 80028a0:	0028      	movs	r0, r5
 80028a2:	18a2      	adds	r2, r4, r2
 80028a4:	4095      	lsls	r5, r2
 80028a6:	4093      	lsls	r3, r2
 80028a8:	1e6c      	subs	r4, r5, #1
 80028aa:	41a5      	sbcs	r5, r4
 80028ac:	40f0      	lsrs	r0, r6
 80028ae:	2207      	movs	r2, #7
 80028b0:	432b      	orrs	r3, r5
 80028b2:	4303      	orrs	r3, r0
 80028b4:	401a      	ands	r2, r3
 80028b6:	2700      	movs	r7, #0
 80028b8:	e79f      	b.n	80027fa <__aeabi_d2f+0x3a>
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	fffffc80 	.word	0xfffffc80
 80028c0:	fffffca2 	.word	0xfffffca2
 80028c4:	fffffc82 	.word	0xfffffc82

080028c8 <__clzsi2>:
 80028c8:	211c      	movs	r1, #28
 80028ca:	2301      	movs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	4298      	cmp	r0, r3
 80028d0:	d301      	bcc.n	80028d6 <__clzsi2+0xe>
 80028d2:	0c00      	lsrs	r0, r0, #16
 80028d4:	3910      	subs	r1, #16
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	4298      	cmp	r0, r3
 80028da:	d301      	bcc.n	80028e0 <__clzsi2+0x18>
 80028dc:	0a00      	lsrs	r0, r0, #8
 80028de:	3908      	subs	r1, #8
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	4298      	cmp	r0, r3
 80028e4:	d301      	bcc.n	80028ea <__clzsi2+0x22>
 80028e6:	0900      	lsrs	r0, r0, #4
 80028e8:	3904      	subs	r1, #4
 80028ea:	a202      	add	r2, pc, #8	; (adr r2, 80028f4 <__clzsi2+0x2c>)
 80028ec:	5c10      	ldrb	r0, [r2, r0]
 80028ee:	1840      	adds	r0, r0, r1
 80028f0:	4770      	bx	lr
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	02020304 	.word	0x02020304
 80028f8:	01010101 	.word	0x01010101
	...

08002904 <__clzdi2>:
 8002904:	b510      	push	{r4, lr}
 8002906:	2900      	cmp	r1, #0
 8002908:	d103      	bne.n	8002912 <__clzdi2+0xe>
 800290a:	f7ff ffdd 	bl	80028c8 <__clzsi2>
 800290e:	3020      	adds	r0, #32
 8002910:	e002      	b.n	8002918 <__clzdi2+0x14>
 8002912:	1c08      	adds	r0, r1, #0
 8002914:	f7ff ffd8 	bl	80028c8 <__clzsi2>
 8002918:	bd10      	pop	{r4, pc}
 800291a:	46c0      	nop			; (mov r8, r8)

0800291c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002920:	f002 fada 	bl	8004ed8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002924:	f000 f820 	bl	8002968 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002928:	f000 f9b4 	bl	8002c94 <MX_GPIO_Init>
  MX_SPI1_Init();
 800292c:	f000 f8da 	bl	8002ae4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002930:	f000 f910 	bl	8002b54 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002934:	f000 f894 	bl	8002a60 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002938:	f000 f97c 	bl	8002c34 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800293c:	f000 f882 	bl	8002a44 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //wifiRST();
  //HAL_Delay(1000);
  //wifiInit();
  HAL_Delay(1000);
 8002940:	23fa      	movs	r3, #250	; 0xfa
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	0018      	movs	r0, r3
 8002946:	f002 fb27 	bl	8004f98 <HAL_Delay>
  BME280_INIT();
 800294a:	f000 fa65 	bl	8002e18 <BME280_INIT>
  bme280_init_complete = 1;
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <main+0x44>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  //connectWifi();
  //HAL_Delay(5000);
  HAL_TIM_Base_Start_IT(&htim2);
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <main+0x48>)
 8002956:	0018      	movs	r0, r3
 8002958:	f005 f9a1 	bl	8007c9e <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800295c:	e7fe      	b.n	800295c <main+0x40>
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	200001fc 	.word	0x200001fc
 8002964:	20000380 	.word	0x20000380

08002968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b09f      	sub	sp, #124	; 0x7c
 800296c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296e:	2440      	movs	r4, #64	; 0x40
 8002970:	193b      	adds	r3, r7, r4
 8002972:	0018      	movs	r0, r3
 8002974:	2338      	movs	r3, #56	; 0x38
 8002976:	001a      	movs	r2, r3
 8002978:	2100      	movs	r1, #0
 800297a:	f006 fb4a 	bl	8009012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800297e:	232c      	movs	r3, #44	; 0x2c
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	0018      	movs	r0, r3
 8002984:	2314      	movs	r3, #20
 8002986:	001a      	movs	r2, r3
 8002988:	2100      	movs	r1, #0
 800298a:	f006 fb42 	bl	8009012 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	0018      	movs	r0, r3
 8002992:	2328      	movs	r3, #40	; 0x28
 8002994:	001a      	movs	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	f006 fb3b 	bl	8009012 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <SystemClock_Config+0xd4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <SystemClock_Config+0xd8>)
 80029a2:	401a      	ands	r2, r3
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <SystemClock_Config+0xd4>)
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	0109      	lsls	r1, r1, #4
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80029ae:	0021      	movs	r1, r4
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	2210      	movs	r2, #16
 80029b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2201      	movs	r2, #1
 80029ba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	22a0      	movs	r2, #160	; 0xa0
 80029c6:	0212      	lsls	r2, r2, #8
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	2200      	movs	r2, #0
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	0018      	movs	r0, r3
 80029d4:	f003 fc66 	bl	80062a4 <HAL_RCC_OscConfig>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80029dc:	f000 fb36 	bl	800304c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	220f      	movs	r2, #15
 80029e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	2100      	movs	r1, #0
 8002a04:	0018      	movs	r0, r3
 8002a06:	f004 f81d 	bl	8006a44 <HAL_RCC_ClockConfig>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d001      	beq.n	8002a12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002a0e:	f000 fb1d 	bl	800304c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2209      	movs	r2, #9
 8002a16:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	0018      	movs	r0, r3
 8002a28:	f004 f9f0 	bl	8006e0c <HAL_RCCEx_PeriphCLKConfig>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002a30:	f000 fb0c 	bl	800304c <Error_Handler>
  }
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b01f      	add	sp, #124	; 0x7c
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	ffffe7ff 	.word	0xffffe7ff

08002a44 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	200f      	movs	r0, #15
 8002a4e:	f002 fb69 	bl	8005124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a52:	200f      	movs	r0, #15
 8002a54:	f002 fb7b 	bl	800514e <HAL_NVIC_EnableIRQ>
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a66:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <MX_I2C1_Init+0x7c>)
 8002a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000609;
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <MX_I2C1_Init+0x80>)
 8002a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f002 fe03 	bl	80056a8 <HAL_I2C_Init>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002aa6:	f000 fad1 	bl	800304c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002ab0:	0011      	movs	r1, r2
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f003 fb5e 	bl	8006174 <HAL_I2CEx_ConfigAnalogFilter>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8002abc:	f000 fac6 	bl	800304c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <MX_I2C1_Init+0x78>)
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f003 fba1 	bl	800620c <HAL_I2CEx_ConfigDigitalFilter>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8002ace:	f000 fabd 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000210 	.word	0x20000210
 8002adc:	40005400 	.word	0x40005400
 8002ae0:	00000609 	.word	0x00000609

08002ae4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002aea:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <MX_SPI1_Init+0x6c>)
 8002aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002af0:	2282      	movs	r2, #130	; 0x82
 8002af2:	0052      	lsls	r2, r2, #1
 8002af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	02d2      	lsls	r2, r2, #11
 8002b14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b18:	2238      	movs	r2, #56	; 0x38
 8002b1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b30:	2207      	movs	r2, #7
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <MX_SPI1_Init+0x68>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f004 fadc 	bl	80070f4 <HAL_SPI_Init>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b40:	f000 fa84 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	20000328 	.word	0x20000328
 8002b50:	40013000 	.word	0x40013000

08002b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	; 0x30
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	0018      	movs	r0, r3
 8002b60:	2310      	movs	r3, #16
 8002b62:	001a      	movs	r2, r3
 8002b64:	2100      	movs	r1, #0
 8002b66:	f006 fa54 	bl	8009012 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	0018      	movs	r0, r3
 8002b70:	2314      	movs	r3, #20
 8002b72:	001a      	movs	r2, r3
 8002b74:	2100      	movs	r1, #0
 8002b76:	f006 fa4c 	bl	8009012 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	2308      	movs	r3, #8
 8002b80:	001a      	movs	r2, r3
 8002b82:	2100      	movs	r1, #0
 8002b84:	f006 fa45 	bl	8009012 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	05d2      	lsls	r2, r2, #23
 8002b8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002b92:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <MX_TIM2_Init+0xd8>)
 8002b94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8002b9c:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002b9e:	4a24      	ldr	r2, [pc, #144]	; (8002c30 <MX_TIM2_Init+0xdc>)
 8002ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f005 f848 	bl	8007c46 <HAL_TIM_Base_Init>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002bba:	f000 fa47 	bl	800304c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bbe:	2120      	movs	r1, #32
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	0152      	lsls	r2, r2, #5
 8002bc6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bc8:	187a      	adds	r2, r7, r1
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002bcc:	0011      	movs	r1, r2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f005 f970 	bl	8007eb4 <HAL_TIM_ConfigClockSource>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002bd8:	f000 fa38 	bl	800304c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002bdc:	210c      	movs	r1, #12
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	2200      	movs	r2, #0
 8002be8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002bea:	187a      	adds	r2, r7, r1
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002bee:	0011      	movs	r1, r2
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f005 fa1d 	bl	8008030 <HAL_TIM_SlaveConfigSynchro>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002bfa:	f000 fa27 	bl	800304c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c0a:	1d3a      	adds	r2, r7, #4
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <MX_TIM2_Init+0xd4>)
 8002c0e:	0011      	movs	r1, r2
 8002c10:	0018      	movs	r0, r3
 8002c12:	f005 fbf7 	bl	8008404 <HAL_TIMEx_MasterConfigSynchronization>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002c1a:	f000 fa17 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b00c      	add	sp, #48	; 0x30
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	20000380 	.word	0x20000380
 8002c2c:	00001b58 	.word	0x00001b58
 8002c30:	00000bb8 	.word	0x00000bb8

08002c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c3a:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <MX_USART1_UART_Init+0x5c>)
 8002c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c40:	22e1      	movs	r2, #225	; 0xe1
 8002c42:	0252      	lsls	r2, r2, #9
 8002c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f005 fc07 	bl	800848c <HAL_UART_Init>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c82:	f000 f9e3 	bl	800304c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200002a8 	.word	0x200002a8
 8002c90:	40013800 	.word	0x40013800

08002c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b08b      	sub	sp, #44	; 0x2c
 8002c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9a:	2414      	movs	r4, #20
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	2314      	movs	r3, #20
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	f006 f9b4 	bl	8009012 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cae:	4b55      	ldr	r3, [pc, #340]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cc2:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	4b4f      	ldr	r3, [pc, #316]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cde:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	2201      	movs	r2, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <MX_GPIO_Init+0x170>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2120      	movs	r1, #32
 8002d12:	0018      	movs	r0, r3
 8002d14:	f002 fc98 	bl	8005648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <MX_GPIO_Init+0x174>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f002 fc92 	bl	8005648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 8002d24:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <MX_GPIO_Init+0x174>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	2120      	movs	r1, #32
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f002 fc8c 	bl	8005648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8002d30:	4936      	ldr	r1, [pc, #216]	; (8002e0c <MX_GPIO_Init+0x178>)
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <MX_GPIO_Init+0x17c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	0018      	movs	r0, r3
 8002d38:	f002 fc86 	bl	8005648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	0192      	lsls	r2, r2, #6
 8002d42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	4a33      	ldr	r2, [pc, #204]	; (8002e14 <MX_GPIO_Init+0x180>)
 8002d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <MX_GPIO_Init+0x174>)
 8002d54:	0019      	movs	r1, r3
 8002d56:	0010      	movs	r0, r2
 8002d58:	f002 fa16 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2202      	movs	r2, #2
 8002d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2203      	movs	r2, #3
 8002d72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	2204      	movs	r2, #4
 8002d78:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	193a      	adds	r2, r7, r4
 8002d7c:	23a0      	movs	r3, #160	; 0xa0
 8002d7e:	05db      	lsls	r3, r3, #23
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f002 fa00 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2201      	movs	r2, #1
 8002d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8002da0:	193a      	adds	r2, r7, r4
 8002da2:	23a0      	movs	r3, #160	; 0xa0
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f002 f9ed 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8002dae:	0021      	movs	r1, r4
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2230      	movs	r2, #48	; 0x30
 8002db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2201      	movs	r2, #1
 8002dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc8:	000c      	movs	r4, r1
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <MX_GPIO_Init+0x174>)
 8002dce:	0019      	movs	r1, r3
 8002dd0:	0010      	movs	r0, r2
 8002dd2:	f002 f9d9 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 8002dd6:	0021      	movs	r1, r4
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <MX_GPIO_Init+0x178>)
 8002ddc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2201      	movs	r2, #1
 8002de2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2200      	movs	r2, #0
 8002dee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <MX_GPIO_Init+0x17c>)
 8002df4:	0019      	movs	r1, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	f002 f9c6 	bl	8005188 <HAL_GPIO_Init>

}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b00b      	add	sp, #44	; 0x2c
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	50000800 	.word	0x50000800
 8002e0c:	00002001 	.word	0x00002001
 8002e10:	50000400 	.word	0x50000400
 8002e14:	10210000 	.word	0x10210000

08002e18 <BME280_INIT>:
/* USER CODE BEGIN 4 */
/**
 * Initializes Bosch BME280 Temperature, Pressure, and Humidity Sensor
 */
static void BME280_INIT(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	/* Device Sampling, Filter, and Standby Time Settings */
	/* Recommended mode of operation: Indoor navigation */
	bme280_device_settings.osr_p = BME280_OVERSAMPLING_16X;		// Pressure
 8002e1c:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <BME280_INIT+0xac>)
 8002e1e:	2205      	movs	r2, #5
 8002e20:	701a      	strb	r2, [r3, #0]
	bme280_device_settings.osr_t = BME280_OVERSAMPLING_2X;		// Temperature
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <BME280_INIT+0xac>)
 8002e24:	2202      	movs	r2, #2
 8002e26:	705a      	strb	r2, [r3, #1]
	bme280_device_settings.osr_h = BME280_OVERSAMPLING_1X;		// Humidity
 8002e28:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <BME280_INIT+0xac>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	709a      	strb	r2, [r3, #2]
	bme280_device_settings.filter = BME280_FILTER_COEFF_16;		// Filter
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <BME280_INIT+0xac>)
 8002e30:	2204      	movs	r2, #4
 8002e32:	70da      	strb	r2, [r3, #3]
	bme280_device_settings.standby_time = 0;					// Standby Time
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <BME280_INIT+0xac>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	711a      	strb	r2, [r3, #4]
	bme280_device.dev_id = BME280_I2C_ADDR_SEC;					// I2C Address
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e3c:	2277      	movs	r2, #119	; 0x77
 8002e3e:	705a      	strb	r2, [r3, #1]
	bme280_device.intf = BME280_I2C_INTF;						// I2C Mode
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	709a      	strb	r2, [r3, #2]
	bme280_device.read = user_i2c_read;							// Read Function Ptr
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e48:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <BME280_INIT+0xb4>)
 8002e4a:	605a      	str	r2, [r3, #4]
	bme280_device.write = user_i2c_write;						// Write Function Ptr
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e4e:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <BME280_INIT+0xb8>)
 8002e50:	609a      	str	r2, [r3, #8]
	bme280_device.delay_ms = user_delay_ms;						// Delay Function Ptr
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <BME280_INIT+0xbc>)
 8002e56:	60da      	str	r2, [r3, #12]
	bme280_device.settings = bme280_device_settings;			// Device Settings set above
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <BME280_INIT+0xac>)
 8002e5c:	3338      	adds	r3, #56	; 0x38
 8002e5e:	0011      	movs	r1, r2
 8002e60:	2205      	movs	r2, #5
 8002e62:	0018      	movs	r0, r3
 8002e64:	f006 f8cc 	bl	8009000 <memcpy>
	bme280_init_rslt |= bme280_init(&bme280_device);					// Initizialize Device
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 fe57 	bl	8003b1e <bme280_init>
 8002e70:	0003      	movs	r3, r0
 8002e72:	001a      	movs	r2, r3
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <BME280_INIT+0xc0>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b25a      	sxtb	r2, r3
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <BME280_INIT+0xc0>)
 8002e80:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_settings(bme280_settings_sel, &bme280_device); // Apply Settings
 8002e82:	4b16      	ldr	r3, [pc, #88]	; (8002edc <BME280_INIT+0xc4>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <BME280_INIT+0xb0>)
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 ff93 	bl	8003db6 <bme280_set_sensor_settings>
 8002e90:	0003      	movs	r3, r0
 8002e92:	001a      	movs	r2, r3
 8002e94:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <BME280_INIT+0xc0>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b25a      	sxtb	r2, r3
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <BME280_INIT+0xc0>)
 8002ea0:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, &bme280_device); // Set to sleep mode
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <BME280_INIT+0xb0>)
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f000 fff4 	bl	8003e94 <bme280_set_sensor_mode>
 8002eac:	0003      	movs	r3, r0
 8002eae:	001a      	movs	r2, r3
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <BME280_INIT+0xc0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	b25a      	sxtb	r2, r3
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <BME280_INIT+0xc0>)
 8002ebc:	701a      	strb	r2, [r3, #0]
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200003bc 	.word	0x200003bc
 8002ec8:	20000268 	.word	0x20000268
 8002ecc:	08002ef9 	.word	0x08002ef9
 8002ed0:	08002fa9 	.word	0x08002fa9
 8002ed4:	08002ee1 	.word	0x08002ee1
 8002ed8:	20000200 	.word	0x20000200
 8002edc:	20000000 	.word	0x20000000

08002ee0 <user_delay_ms>:
 *	After a number of milliseconds have passed, we
 *	return control.
 * 	@param[in] milliseconds : How much to delay by in milliseconds.
 */
void user_delay_ms(uint32_t milliseconds)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f002 f854 	bl	8004f98 <HAL_Delay>
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <user_i2c_read>:
 *	0xFD - Humidity_MSB - 8 bits - Bits[15:8]
 *	0xFE - Humidity_LSB - 8 bits - Bits[7:0]
 *	See BME280 Datasheet Page 27 for more info
 */
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af04      	add	r7, sp, #16
 8002efe:	0004      	movs	r4, r0
 8002f00:	0008      	movs	r0, r1
 8002f02:	603a      	str	r2, [r7, #0]
 8002f04:	0019      	movs	r1, r3
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	1c22      	adds	r2, r4, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	1dbb      	adds	r3, r7, #6
 8002f0e:	1c02      	adds	r2, r0, #0
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	1c0a      	adds	r2, r1, #0
 8002f16:	801a      	strh	r2, [r3, #0]
	 * | Read       | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002f18:	230d      	movs	r3, #13
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
	uint16_t read_mode = dev_id;
 8002f20:	230e      	movs	r3, #14
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	1dfa      	adds	r2, r7, #7
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a read bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 8002f2a:	1dfb      	adds	r3, r7, #7
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b76      	cmp	r3, #118	; 0x76
 8002f30:	d003      	beq.n	8002f3a <user_i2c_read+0x42>
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b77      	cmp	r3, #119	; 0x77
 8002f38:	d109      	bne.n	8002f4e <user_i2c_read+0x56>
	{
		read_mode = (dev_id << 1) | 1;
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	b21b      	sxth	r3, r3
 8002f42:	2201      	movs	r2, #1
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b21a      	sxth	r2, r3
 8002f48:	230e      	movs	r3, #14
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	801a      	strh	r2, [r3, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <user_i2c_read+0xac>)
 8002f50:	0018      	movs	r0, r3
 8002f52:	f002 fba9 	bl	80056a8 <HAL_I2C_Init>
	rslt |= HAL_I2C_Mem_Read(&hi2c1, read_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 8002f56:	1dbb      	adds	r3, r7, #6
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	23fa      	movs	r3, #250	; 0xfa
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	001c      	movs	r4, r3
 8002f62:	230e      	movs	r3, #14
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	8819      	ldrh	r1, [r3, #0]
 8002f68:	480e      	ldr	r0, [pc, #56]	; (8002fa4 <user_i2c_read+0xac>)
 8002f6a:	9402      	str	r4, [sp, #8]
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2301      	movs	r3, #1
 8002f78:	f002 fd8a 	bl	8005a90 <HAL_I2C_Mem_Read>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	b259      	sxtb	r1, r3
 8002f80:	240d      	movs	r4, #13
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	193a      	adds	r2, r7, r4
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <user_i2c_read+0xac>)
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f002 fc20 	bl	80057d4 <HAL_I2C_DeInit>
	return rslt;
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b25b      	sxtb	r3, r3
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b005      	add	sp, #20
 8002fa0:	bd90      	pop	{r4, r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	20000210 	.word	0x20000210

08002fa8 <user_i2c_write>:
 * 	@param[in] reg_addr : Register address of what we want to read in from the BME280.
 * 	@param[in] reg_data : Data we're writing to the register
 * 	@param[in] len : Amount of registers to write to
 */
int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af04      	add	r7, sp, #16
 8002fae:	0004      	movs	r4, r0
 8002fb0:	0008      	movs	r0, r1
 8002fb2:	603a      	str	r2, [r7, #0]
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	1c22      	adds	r2, r4, #0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	1dbb      	adds	r3, r7, #6
 8002fbe:	1c02      	adds	r2, r0, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	1c0a      	adds	r2, r1, #0
 8002fc6:	801a      	strh	r2, [r3, #0]
	 * | Write      | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002fc8:	230d      	movs	r3, #13
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
	uint16_t write_mode = dev_id;
 8002fd0:	230e      	movs	r3, #14
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	1dfa      	adds	r2, r7, #7
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a write bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b76      	cmp	r3, #118	; 0x76
 8002fe0:	d003      	beq.n	8002fea <user_i2c_write+0x42>
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b77      	cmp	r3, #119	; 0x77
 8002fe8:	d106      	bne.n	8002ff8 <user_i2c_write+0x50>
	{
		write_mode = (dev_id << 1) | 0;
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	220e      	movs	r2, #14
 8002ff2:	18ba      	adds	r2, r7, r2
 8002ff4:	18db      	adds	r3, r3, r3
 8002ff6:	8013      	strh	r3, [r2, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <user_i2c_write+0xa0>)
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f002 fb54 	bl	80056a8 <HAL_I2C_Init>
	rslt = HAL_I2C_Mem_Write(&hi2c1, write_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b29a      	uxth	r2, r3
 8003006:	23fa      	movs	r3, #250	; 0xfa
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	001c      	movs	r4, r3
 800300c:	230e      	movs	r3, #14
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	8819      	ldrh	r1, [r3, #0]
 8003012:	480d      	ldr	r0, [pc, #52]	; (8003048 <user_i2c_write+0xa0>)
 8003014:	9402      	str	r4, [sp, #8]
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2301      	movs	r3, #1
 8003022:	f002 fc07 	bl	8005834 <HAL_I2C_Mem_Write>
 8003026:	0003      	movs	r3, r0
 8003028:	001a      	movs	r2, r3
 800302a:	240d      	movs	r4, #13
 800302c:	193b      	adds	r3, r7, r4
 800302e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <user_i2c_write+0xa0>)
 8003032:	0018      	movs	r0, r3
 8003034:	f002 fbce 	bl	80057d4 <HAL_I2C_DeInit>
	return rslt;
 8003038:	193b      	adds	r3, r7, r4
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b25b      	sxtb	r3, r3
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b005      	add	sp, #20
 8003044:	bd90      	pop	{r4, r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	20000210 	.word	0x20000210

0800304c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_MspInit+0x40>)
 800305e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_MspInit+0x40>)
 8003062:	2101      	movs	r1, #1
 8003064:	430a      	orrs	r2, r1
 8003066:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_MspInit+0x40>)
 800306a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_MspInit+0x40>)
 800306e:	2180      	movs	r1, #128	; 0x80
 8003070:	0549      	lsls	r1, r1, #21
 8003072:	430a      	orrs	r2, r1
 8003074:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8003076:	2305      	movs	r3, #5
 8003078:	425b      	negs	r3, r3
 800307a:	2200      	movs	r2, #0
 800307c:	2101      	movs	r1, #1
 800307e:	0018      	movs	r0, r3
 8003080:	f002 f850 	bl	8005124 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8003084:	2302      	movs	r3, #2
 8003086:	425b      	negs	r3, r3
 8003088:	2200      	movs	r2, #0
 800308a:	2101      	movs	r1, #1
 800308c:	0018      	movs	r0, r3
 800308e:	f002 f849 	bl	8005124 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	230c      	movs	r3, #12
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	0018      	movs	r0, r3
 80030aa:	2314      	movs	r3, #20
 80030ac:	001a      	movs	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f005 ffaf 	bl	8009012 <memset>
  if(hi2c->Instance==I2C1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_I2C_MspInit+0x80>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12a      	bne.n	8003114 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_I2C_MspInit+0x84>)
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_I2C_MspInit+0x84>)
 80030c4:	2101      	movs	r1, #1
 80030c6:	430a      	orrs	r2, r1
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_I2C_MspInit+0x84>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	2201      	movs	r2, #1
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030d6:	210c      	movs	r1, #12
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	22c0      	movs	r2, #192	; 0xc0
 80030dc:	00d2      	lsls	r2, r2, #3
 80030de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2212      	movs	r2, #18
 80030e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2201      	movs	r2, #1
 80030ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2203      	movs	r2, #3
 80030f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2206      	movs	r2, #6
 80030f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	187a      	adds	r2, r7, r1
 80030fa:	23a0      	movs	r3, #160	; 0xa0
 80030fc:	05db      	lsls	r3, r3, #23
 80030fe:	0011      	movs	r1, r2
 8003100:	0018      	movs	r0, r3
 8003102:	f002 f841 	bl	8005188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_I2C_MspInit+0x84>)
 8003108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_I2C_MspInit+0x84>)
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	0389      	lsls	r1, r1, #14
 8003110:	430a      	orrs	r2, r1
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b008      	add	sp, #32
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40005400 	.word	0x40005400
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_I2C_MspDeInit+0x38>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10d      	bne.n	8003152 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_I2C_MspDeInit+0x3c>)
 8003138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_I2C_MspDeInit+0x3c>)
 800313c:	4909      	ldr	r1, [pc, #36]	; (8003164 <HAL_I2C_MspDeInit+0x40>)
 800313e:	400a      	ands	r2, r1
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003142:	23c0      	movs	r3, #192	; 0xc0
 8003144:	00da      	lsls	r2, r3, #3
 8003146:	23a0      	movs	r3, #160	; 0xa0
 8003148:	05db      	lsls	r3, r3, #23
 800314a:	0011      	movs	r1, r2
 800314c:	0018      	movs	r0, r3
 800314e:	f002 f999 	bl	8005484 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b002      	add	sp, #8
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	40005400 	.word	0x40005400
 8003160:	40021000 	.word	0x40021000
 8003164:	ffdfffff 	.word	0xffdfffff

08003168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	2314      	movs	r3, #20
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	0018      	movs	r0, r3
 8003176:	2314      	movs	r3, #20
 8003178:	001a      	movs	r2, r3
 800317a:	2100      	movs	r1, #0
 800317c:	f005 ff49 	bl	8009012 <memset>
  if(hspi->Instance==SPI1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a29      	ldr	r2, [pc, #164]	; (800322c <HAL_SPI_MspInit+0xc4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d14b      	bne.n	8003222 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 800318c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0149      	lsls	r1, r1, #5
 8003194:	430a      	orrs	r2, r1
 8003196:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 800319e:	2101      	movs	r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 80031b6:	2102      	movs	r1, #2
 80031b8:	430a      	orrs	r2, r1
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <HAL_SPI_MspInit+0xc8>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2202      	movs	r2, #2
 80031c2:	4013      	ands	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80031c8:	2414      	movs	r4, #20
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	22d0      	movs	r2, #208	; 0xd0
 80031ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2202      	movs	r2, #2
 80031d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	2203      	movs	r2, #3
 80031e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	193a      	adds	r2, r7, r4
 80031ea:	23a0      	movs	r3, #160	; 0xa0
 80031ec:	05db      	lsls	r3, r3, #23
 80031ee:	0011      	movs	r1, r2
 80031f0:	0018      	movs	r0, r3
 80031f2:	f001 ffc9 	bl	8005188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80031f6:	0021      	movs	r1, r4
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2208      	movs	r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2202      	movs	r2, #2
 8003202:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320a:	187b      	adds	r3, r7, r1
 800320c:	2203      	movs	r2, #3
 800320e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003210:	187b      	adds	r3, r7, r1
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8003216:	187b      	adds	r3, r7, r1
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_SPI_MspInit+0xcc>)
 800321a:	0019      	movs	r1, r3
 800321c:	0010      	movs	r0, r2
 800321e:	f001 ffb3 	bl	8005188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b00b      	add	sp, #44	; 0x2c
 8003228:	bd90      	pop	{r4, r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40013000 	.word	0x40013000
 8003230:	40021000 	.word	0x40021000
 8003234:	50000400 	.word	0x50000400

08003238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	05db      	lsls	r3, r3, #23
 8003248:	429a      	cmp	r2, r3
 800324a:	d105      	bne.n	8003258 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <HAL_TIM_Base_MspInit+0x28>)
 800324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_TIM_Base_MspInit+0x28>)
 8003252:	2101      	movs	r1, #1
 8003254:	430a      	orrs	r2, r1
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000

08003264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	230c      	movs	r3, #12
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	0018      	movs	r0, r3
 8003272:	2314      	movs	r3, #20
 8003274:	001a      	movs	r2, r3
 8003276:	2100      	movs	r1, #0
 8003278:	f005 fecb 	bl	8009012 <memset>
  if(huart->Instance==USART1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_UART_MspInit+0x7c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d128      	bne.n	80032d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_UART_MspInit+0x80>)
 8003288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_UART_MspInit+0x80>)
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	01c9      	lsls	r1, r1, #7
 8003290:	430a      	orrs	r2, r1
 8003292:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_UART_MspInit+0x80>)
 8003296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_UART_MspInit+0x80>)
 800329a:	2102      	movs	r1, #2
 800329c:	430a      	orrs	r2, r1
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_UART_MspInit+0x80>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2202      	movs	r2, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032ac:	210c      	movs	r1, #12
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	22c0      	movs	r2, #192	; 0xc0
 80032b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	2202      	movs	r2, #2
 80032b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	2203      	movs	r2, #3
 80032c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	2200      	movs	r2, #0
 80032ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <HAL_UART_MspInit+0x84>)
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f001 ff58 	bl	8005188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b008      	add	sp, #32
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	50000400 	.word	0x50000400

080032ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032fa:	e7fe      	b.n	80032fa <HardFault_Handler+0x4>

080032fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 8003314:	f001 fe2a 	bl	8004f6c <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b0a8      	sub	sp, #160	; 0xa0
 8003324:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed_digital = 0;
 8003326:	237e      	movs	r3, #126	; 0x7e
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2200      	movs	r2, #0
 800332c:	801a      	strh	r2, [r3, #0]
  uint16_t wind_temp_digital = 0;
 800332e:	237c      	movs	r3, #124	; 0x7c
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2200      	movs	r2, #0
 8003334:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch2 = 0;
 8003336:	237a      	movs	r3, #122	; 0x7a
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2200      	movs	r2, #0
 800333c:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch3 = 0;
 800333e:	2378      	movs	r3, #120	; 0x78
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2200      	movs	r2, #0
 8003344:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch4 = 0;
 8003346:	2376      	movs	r3, #118	; 0x76
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2200      	movs	r2, #0
 800334c:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch5 = 0;
 800334e:	2374      	movs	r3, #116	; 0x74
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2200      	movs	r2, #0
 8003354:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch6 = 0;
 8003356:	2372      	movs	r3, #114	; 0x72
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2200      	movs	r2, #0
 800335c:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch7 = 0;
 800335e:	2370      	movs	r3, #112	; 0x70
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2200      	movs	r2, #0
 8003364:	801a      	strh	r2, [r3, #0]
  char wifi_data1[2];
  float bme280_pressure = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	228c      	movs	r2, #140	; 0x8c
 800336a:	18ba      	adds	r2, r7, r2
 800336c:	6013      	str	r3, [r2, #0]
  float bme280_temperature = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	2288      	movs	r2, #136	; 0x88
 8003372:	18ba      	adds	r2, r7, r2
 8003374:	6013      	str	r3, [r2, #0]
  float bme280_humidity = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	2284      	movs	r2, #132	; 0x84
 800337a:	18ba      	adds	r2, r7, r2
 800337c:	6013      	str	r3, [r2, #0]
  float md_wind_speed = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	66bb      	str	r3, [r7, #104]	; 0x68
  float md_temp = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	667b      	str	r3, [r7, #100]	; 0x64
  char *json = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	18ba      	adds	r2, r7, r2
 800338c:	6013      	str	r3, [r2, #0]
  char data[100];

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800338e:	4b53      	ldr	r3, [pc, #332]	; (80034dc <TIM2_IRQHandler+0x1bc>)
 8003390:	0018      	movs	r0, r3
 8003392:	f004 fca6 	bl	8007ce2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Toggle_User_LED();
 8003396:	f000 f8b3 	bl	8003500 <Toggle_User_LED>
  if (bme280_init_complete == 0)
 800339a:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <TIM2_IRQHandler+0x1c0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d100      	bne.n	80033a4 <TIM2_IRQHandler+0x84>
 80033a2:	e096      	b.n	80034d2 <TIM2_IRQHandler+0x1b2>
  {
	  return;
  }

  /* Read ADC Wind Speed Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_SPEED_CH, &wind_speed_digital);
 80033a4:	247e      	movs	r4, #126	; 0x7e
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	0019      	movs	r1, r3
 80033aa:	2080      	movs	r0, #128	; 0x80
 80033ac:	f000 f8d6 	bl	800355c <Read_ADC>

  /* Read ADC Wind Temp Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_TEMP_CH, &wind_temp_digital);
 80033b0:	257c      	movs	r5, #124	; 0x7c
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	0019      	movs	r1, r3
 80033b6:	2090      	movs	r0, #144	; 0x90
 80033b8:	f000 f8d0 	bl	800355c <Read_ADC>

  Read_ADC((uint8_t) ADC_DIN_CH2, &din_ch2);
 80033bc:	237a      	movs	r3, #122	; 0x7a
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	0019      	movs	r1, r3
 80033c2:	20a0      	movs	r0, #160	; 0xa0
 80033c4:	f000 f8ca 	bl	800355c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH3, &din_ch3);
 80033c8:	2378      	movs	r3, #120	; 0x78
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	0019      	movs	r1, r3
 80033ce:	20b0      	movs	r0, #176	; 0xb0
 80033d0:	f000 f8c4 	bl	800355c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH4, &din_ch4);
 80033d4:	2376      	movs	r3, #118	; 0x76
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	0019      	movs	r1, r3
 80033da:	20c0      	movs	r0, #192	; 0xc0
 80033dc:	f000 f8be 	bl	800355c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH5, &din_ch5);
 80033e0:	2374      	movs	r3, #116	; 0x74
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	0019      	movs	r1, r3
 80033e6:	20d0      	movs	r0, #208	; 0xd0
 80033e8:	f000 f8b8 	bl	800355c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH6, &din_ch6);
 80033ec:	2372      	movs	r3, #114	; 0x72
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	0019      	movs	r1, r3
 80033f2:	20e0      	movs	r0, #224	; 0xe0
 80033f4:	f000 f8b2 	bl	800355c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH7, &din_ch7);
 80033f8:	2370      	movs	r3, #112	; 0x70
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	0019      	movs	r1, r3
 80033fe:	20f0      	movs	r0, #240	; 0xf0
 8003400:	f000 f8ac 	bl	800355c <Read_ADC>

  /* Data is output to comp_data */
  bme280_read_data_forced_mode(&bme280_device);
 8003404:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <TIM2_IRQHandler+0x1c4>)
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fab6 	bl	8003978 <bme280_read_data_forced_mode>

  /* Calculations Done Here */
  // TODO: Double check later if this is properly compensated
  calculate_wind_speed(wind_speed_digital, wind_temp_digital, &md_wind_speed, &md_temp);
 800340c:	193b      	adds	r3, r7, r4
 800340e:	8818      	ldrh	r0, [r3, #0]
 8003410:	197b      	adds	r3, r7, r5
 8003412:	8819      	ldrh	r1, [r3, #0]
 8003414:	2364      	movs	r3, #100	; 0x64
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	2268      	movs	r2, #104	; 0x68
 800341a:	18ba      	adds	r2, r7, r2
 800341c:	f000 f9fc 	bl	8003818 <calculate_wind_speed>
  bme280_temperature = comp_data.temperature * 0.01; // Celsius
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <TIM2_IRQHandler+0x1c8>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff f90d 	bl	8002644 <__aeabi_i2d>
 800342a:	4a30      	ldr	r2, [pc, #192]	; (80034ec <TIM2_IRQHandler+0x1cc>)
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <TIM2_IRQHandler+0x1d0>)
 800342e:	f7fe fafd 	bl	8001a2c <__aeabi_dmul>
 8003432:	0003      	movs	r3, r0
 8003434:	000c      	movs	r4, r1
 8003436:	0018      	movs	r0, r3
 8003438:	0021      	movs	r1, r4
 800343a:	f7ff f9c1 	bl	80027c0 <__aeabi_d2f>
 800343e:	1c03      	adds	r3, r0, #0
 8003440:	2588      	movs	r5, #136	; 0x88
 8003442:	197a      	adds	r2, r7, r5
 8003444:	6013      	str	r3, [r2, #0]
  bme280_humidity = comp_data.humidity / 1024.0; // Output is in percentage... so 43.33 is 43.33 %rH
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <TIM2_IRQHandler+0x1c8>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff f934 	bl	80026b8 <__aeabi_ui2d>
 8003450:	2200      	movs	r2, #0
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <TIM2_IRQHandler+0x1d4>)
 8003454:	f7fd fee0 	bl	8001218 <__aeabi_ddiv>
 8003458:	0003      	movs	r3, r0
 800345a:	000c      	movs	r4, r1
 800345c:	0018      	movs	r0, r3
 800345e:	0021      	movs	r1, r4
 8003460:	f7ff f9ae 	bl	80027c0 <__aeabi_d2f>
 8003464:	1c03      	adds	r3, r0, #0
 8003466:	2284      	movs	r2, #132	; 0x84
 8003468:	18ba      	adds	r2, r7, r2
 800346a:	6013      	str	r3, [r2, #0]
  bme280_pressure = comp_data.pressure * 0.01; // hPa Pressure Units... for Debug Purposes
 800346c:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <TIM2_IRQHandler+0x1c8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff f921 	bl	80026b8 <__aeabi_ui2d>
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <TIM2_IRQHandler+0x1cc>)
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <TIM2_IRQHandler+0x1d0>)
 800347a:	f7fe fad7 	bl	8001a2c <__aeabi_dmul>
 800347e:	0003      	movs	r3, r0
 8003480:	000c      	movs	r4, r1
 8003482:	0018      	movs	r0, r3
 8003484:	0021      	movs	r1, r4
 8003486:	f7ff f99b 	bl	80027c0 <__aeabi_d2f>
 800348a:	1c03      	adds	r3, r0, #0
 800348c:	228c      	movs	r2, #140	; 0x8c
 800348e:	18ba      	adds	r2, r7, r2
 8003490:	6013      	str	r3, [r2, #0]

  /* Transmit over WiFi */

  sprintf(data, "{ \"system_id:\":\"%d\", \"timestamp\":\"%d\", \"temperature\":\"%f\", \"wind_speed\":\"%f\"}", 1, 1, bme280_temperature, md_wind_speed);
 8003492:	197b      	adds	r3, r7, r5
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	f7ff f941 	bl	800271c <__aeabi_f2d>
 800349a:	0004      	movs	r4, r0
 800349c:	000d      	movs	r5, r1
 800349e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a0:	1c18      	adds	r0, r3, #0
 80034a2:	f7ff f93b 	bl	800271c <__aeabi_f2d>
 80034a6:	0002      	movs	r2, r0
 80034a8:	000b      	movs	r3, r1
 80034aa:	4913      	ldr	r1, [pc, #76]	; (80034f8 <TIM2_IRQHandler+0x1d8>)
 80034ac:	0038      	movs	r0, r7
 80034ae:	9202      	str	r2, [sp, #8]
 80034b0:	9303      	str	r3, [sp, #12]
 80034b2:	9400      	str	r4, [sp, #0]
 80034b4:	9501      	str	r5, [sp, #4]
 80034b6:	2301      	movs	r3, #1
 80034b8:	2201      	movs	r2, #1
 80034ba:	f006 facb 	bl	8009a54 <siprintf>

  transmitWifi(data);
 80034be:	003b      	movs	r3, r7
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f88b 	bl	80035dc <transmitWifi>

//  /* Toggle SS1 Pin Low to select sensor */
    HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <TIM2_IRQHandler+0x1dc>)
 80034c8:	2120      	movs	r1, #32
 80034ca:	0018      	movs	r0, r3
 80034cc:	f002 f8d9 	bl	8005682 <HAL_GPIO_TogglePin>
 80034d0:	e000      	b.n	80034d4 <TIM2_IRQHandler+0x1b4>
	  return;
 80034d2:	46c0      	nop			; (mov r8, r8)
//  // TODO: Read from Sensor
//  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
//  /* Toggle SS2 High to un-select sensor */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b024      	add	sp, #144	; 0x90
 80034d8:	bdb0      	pop	{r4, r5, r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	20000380 	.word	0x20000380
 80034e0:	200001fc 	.word	0x200001fc
 80034e4:	20000268 	.word	0x20000268
 80034e8:	2000025c 	.word	0x2000025c
 80034ec:	47ae147b 	.word	0x47ae147b
 80034f0:	3f847ae1 	.word	0x3f847ae1
 80034f4:	40900000 	.word	0x40900000
 80034f8:	0800c180 	.word	0x0800c180
 80034fc:	50000800 	.word	0x50000800

08003500 <Toggle_User_LED>:
/* USER CODE BEGIN 1 */
/**
 * 	@brief Toggle LED
 */
void Toggle_User_LED()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8003504:	23a0      	movs	r3, #160	; 0xa0
 8003506:	05db      	lsls	r3, r3, #23
 8003508:	2120      	movs	r1, #32
 800350a:	0018      	movs	r0, r3
 800350c:	f002 f8b9 	bl	8005682 <HAL_GPIO_TogglePin>
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <Toggle_ADC_Chip_Select>:

/**
 * 	@brief Toggle ADC Chip Select Pin
 */
void Toggle_ADC_Chip_Select()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ADC_CS_GPIO_Port, ADC_CS_PIN);
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <Toggle_ADC_Chip_Select+0x14>)
 800351e:	2110      	movs	r1, #16
 8003520:	0018      	movs	r0, r3
 8003522:	f002 f8ae 	bl	8005682 <HAL_GPIO_TogglePin>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	50000800 	.word	0x50000800

08003530 <HAL_SPI_Transmit_Start>:

/**
 * 	@brief Transmit Start Bit in HAL SPI
 */
void HAL_SPI_Transmit_Start()
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
	uint8_t adc_start = (uint8_t) ADC_START_BIT;
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &adc_start, sizeof(adc_start), SPI_TIMEOUT);
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_SPI_Transmit_Start+0x24>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1df9      	adds	r1, r7, #7
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <HAL_SPI_Transmit_Start+0x28>)
 8003544:	2201      	movs	r2, #1
 8003546:	f003 fe3f 	bl	80071c8 <HAL_SPI_Transmit>
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b002      	add	sp, #8
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	0800c328 	.word	0x0800c328
 8003558:	20000328 	.word	0x20000328

0800355c <Read_ADC>:
 * 	@brief Read MCP3008 ADC based on given channel enum.
 *	Output is set to the pointer of a uint16_t set in the parameters.
 *	Output will be set to 0 before setting the ADC Value to it.
 */
void Read_ADC(uint8_t adc_ch_select, uint16_t *output)
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af02      	add	r7, sp, #8
 8003562:	0002      	movs	r2, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_1 = 0;
 800356a:	240f      	movs	r4, #15
 800356c:	193b      	adds	r3, r7, r4
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_2 = 0;
 8003572:	250e      	movs	r5, #14
 8003574:	197b      	adds	r3, r7, r5
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
	/* Set output to 0 */
	*output = 0;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2200      	movs	r2, #0
 800357e:	801a      	strh	r2, [r3, #0]

	/* Toggle SS0 Pin (CS) Low to use ADC */
	Toggle_ADC_Chip_Select();
 8003580:	f7ff ffca 	bl	8003518 <Toggle_ADC_Chip_Select>
	/* Send to DIN CH0 Select */
	HAL_SPI_Transmit_Start();
 8003584:	f7ff ffd4 	bl	8003530 <HAL_SPI_Transmit_Start>
	HAL_SPI_TransmitReceive(&hspi1, &adc_ch_select, &adc_byte_1, sizeof(adc_ch_select), SPI_TIMEOUT);
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <Read_ADC+0x78>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	193a      	adds	r2, r7, r4
 800358e:	1df9      	adds	r1, r7, #7
 8003590:	4811      	ldr	r0, [pc, #68]	; (80035d8 <Read_ADC+0x7c>)
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2301      	movs	r3, #1
 8003596:	f004 f883 	bl	80076a0 <HAL_SPI_TransmitReceive>
	/* Read from Dout of ADC */
	HAL_SPI_Receive(&hspi1, &adc_byte_2, sizeof(adc_byte_2), SPI_TIMEOUT);
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <Read_ADC+0x78>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1979      	adds	r1, r7, r5
 80035a0:	480d      	ldr	r0, [pc, #52]	; (80035d8 <Read_ADC+0x7c>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	f003 ff5e 	bl	8007464 <HAL_SPI_Receive>
	/* Toggle SS0 High (CS) to signify we're done with a round of the ADC */
	Toggle_ADC_Chip_Select();
 80035a8:	f7ff ffb6 	bl	8003518 <Toggle_ADC_Chip_Select>
	/* Set Output to adc_value */
	*output = ADC_16_TO_10_BIT(adc_byte_1, adc_byte_2);
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	197b      	adds	r3, r7, r5
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b21b      	sxth	r3, r3
 80035ba:	4313      	orrs	r3, r2
 80035bc:	b21b      	sxth	r3, r3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	059b      	lsls	r3, r3, #22
 80035c2:	0d9b      	lsrs	r3, r3, #22
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	801a      	strh	r2, [r3, #0]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	0800c328 	.word	0x0800c328
 80035d8:	20000328 	.word	0x20000328

080035dc <transmitWifi>:

/**
 * TODO: Write function to write data to WiFi module
 */
void transmitWifi(char* info)
{
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	b0df      	sub	sp, #380	; 0x17c
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

	char start[] = "AT+CIPSTART=\"TCP\",\"weatherbox.azurewebsites.net\",80\r\n";
 80035e4:	249c      	movs	r4, #156	; 0x9c
 80035e6:	0064      	lsls	r4, r4, #1
 80035e8:	193a      	adds	r2, r7, r4
 80035ea:	4b72      	ldr	r3, [pc, #456]	; (80037b4 <transmitWifi+0x1d8>)
 80035ec:	0010      	movs	r0, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	2336      	movs	r3, #54	; 0x36
 80035f2:	001a      	movs	r2, r3
 80035f4:	f005 fd04 	bl	8009000 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t *) start, strlen(start), 500);
 80035f8:	193b      	adds	r3, r7, r4
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fc fd84 	bl	8000108 <strlen>
 8003600:	0003      	movs	r3, r0
 8003602:	b29a      	uxth	r2, r3
 8003604:	23fa      	movs	r3, #250	; 0xfa
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	1939      	adds	r1, r7, r4
 800360a:	486b      	ldr	r0, [pc, #428]	; (80037b8 <transmitWifi+0x1dc>)
 800360c:	f004 ff92 	bl	8008534 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8003610:	23fa      	movs	r3, #250	; 0xfa
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	0018      	movs	r0, r3
 8003616:	f001 fcbf 	bl	8004f98 <HAL_Delay>
	char send[] = "AT+CIPSEND=";
 800361a:	2596      	movs	r5, #150	; 0x96
 800361c:	006d      	lsls	r5, r5, #1
 800361e:	197b      	adds	r3, r7, r5
 8003620:	4a66      	ldr	r2, [pc, #408]	; (80037bc <transmitWifi+0x1e0>)
 8003622:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003624:	c313      	stmia	r3!, {r0, r1, r4}
	char ret[] = "\r\n";
 8003626:	2494      	movs	r4, #148	; 0x94
 8003628:	0064      	lsls	r4, r4, #1
 800362a:	193b      	adds	r3, r7, r4
 800362c:	4a64      	ldr	r2, [pc, #400]	; (80037c0 <transmitWifi+0x1e4>)
 800362e:	8811      	ldrh	r1, [r2, #0]
 8003630:	8019      	strh	r1, [r3, #0]
 8003632:	7892      	ldrb	r2, [r2, #2]
 8003634:	709a      	strb	r2, [r3, #2]
	char postFormat[] = "POST /map/data HTTP/1.1\r\nAccept: \"*/*\"\r\nHost: https://weatherbox.azurewebsites.net/\r\nContent-Type: application/json\r\nContent-Length: %i\r\n\r\n";
 8003636:	239c      	movs	r3, #156	; 0x9c
 8003638:	18fa      	adds	r2, r7, r3
 800363a:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <transmitWifi+0x1e8>)
 800363c:	0010      	movs	r0, r2
 800363e:	0019      	movs	r1, r3
 8003640:	238c      	movs	r3, #140	; 0x8c
 8003642:	001a      	movs	r2, r3
 8003644:	f005 fcdc 	bl	8009000 <memcpy>
	char post[sizeof(postFormat)];
	int jsonsize = (int)(strlen(info));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f7fc fd5c 	bl	8000108 <strlen>
 8003650:	0003      	movs	r3, r0
 8003652:	26ba      	movs	r6, #186	; 0xba
 8003654:	0076      	lsls	r6, r6, #1
 8003656:	19ba      	adds	r2, r7, r6
 8003658:	6013      	str	r3, [r2, #0]
	char jsonStr[sizeof(jsonsize)];
	sprintf(jsonStr, "%u", jsonsize);
 800365a:	19ba      	adds	r2, r7, r6
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	495a      	ldr	r1, [pc, #360]	; (80037c8 <transmitWifi+0x1ec>)
 8003660:	230c      	movs	r3, #12
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	0018      	movs	r0, r3
 8003666:	f006 f9f5 	bl	8009a54 <siprintf>
	sprintf(post, postFormat, jsonsize);
 800366a:	19ba      	adds	r2, r7, r6
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	219c      	movs	r1, #156	; 0x9c
 8003670:	1879      	adds	r1, r7, r1
 8003672:	2610      	movs	r6, #16
 8003674:	19bb      	adds	r3, r7, r6
 8003676:	0018      	movs	r0, r3
 8003678:	f006 f9ec 	bl	8009a54 <siprintf>
	int postsize = (int)(strlen(post));
 800367c:	19bb      	adds	r3, r7, r6
 800367e:	0018      	movs	r0, r3
 8003680:	f7fc fd42 	bl	8000108 <strlen>
 8003684:	0003      	movs	r3, r0
 8003686:	22b8      	movs	r2, #184	; 0xb8
 8003688:	0052      	lsls	r2, r2, #1
 800368a:	18b9      	adds	r1, r7, r2
 800368c:	600b      	str	r3, [r1, #0]
	char postStr[sizeof(postsize)];
	sprintf(postStr, "%u", postsize);
 800368e:	18ba      	adds	r2, r7, r2
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	494d      	ldr	r1, [pc, #308]	; (80037c8 <transmitWifi+0x1ec>)
 8003694:	2008      	movs	r0, #8
 8003696:	183b      	adds	r3, r7, r0
 8003698:	0018      	movs	r0, r3
 800369a:	f006 f9db 	bl	8009a54 <siprintf>


	// Send Command with size of message
	HAL_UART_Transmit(&huart1, (uint8_t *) send, strlen(send), 500);
 800369e:	197b      	adds	r3, r7, r5
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fc fd31 	bl	8000108 <strlen>
 80036a6:	0003      	movs	r3, r0
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	23fa      	movs	r3, #250	; 0xfa
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	1979      	adds	r1, r7, r5
 80036b0:	4841      	ldr	r0, [pc, #260]	; (80037b8 <transmitWifi+0x1dc>)
 80036b2:	f004 ff3f 	bl	8008534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) postStr, strlen(postStr), 500);
 80036b6:	2008      	movs	r0, #8
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fc fd24 	bl	8000108 <strlen>
 80036c0:	0003      	movs	r3, r0
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	23fa      	movs	r3, #250	; 0xfa
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2008      	movs	r0, #8
 80036ca:	1839      	adds	r1, r7, r0
 80036cc:	483a      	ldr	r0, [pc, #232]	; (80037b8 <transmitWifi+0x1dc>)
 80036ce:	f004 ff31 	bl	8008534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7fc fd17 	bl	8000108 <strlen>
 80036da:	0003      	movs	r3, r0
 80036dc:	b29a      	uxth	r2, r3
 80036de:	23fa      	movs	r3, #250	; 0xfa
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	1939      	adds	r1, r7, r4
 80036e4:	4834      	ldr	r0, [pc, #208]	; (80037b8 <transmitWifi+0x1dc>)
 80036e6:	f004 ff25 	bl	8008534 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80036ea:	23fa      	movs	r3, #250	; 0xfa
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f001 fc52 	bl	8004f98 <HAL_Delay>
	
	//Sending POST message
	HAL_UART_Transmit(&huart1, (uint8_t *) post, strlen(post), 500);
 80036f4:	19bb      	adds	r3, r7, r6
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7fc fd06 	bl	8000108 <strlen>
 80036fc:	0003      	movs	r3, r0
 80036fe:	b29a      	uxth	r2, r3
 8003700:	23fa      	movs	r3, #250	; 0xfa
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	19b9      	adds	r1, r7, r6
 8003706:	482c      	ldr	r0, [pc, #176]	; (80037b8 <transmitWifi+0x1dc>)
 8003708:	f004 ff14 	bl	8008534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 800370c:	193b      	adds	r3, r7, r4
 800370e:	0018      	movs	r0, r3
 8003710:	f7fc fcfa 	bl	8000108 <strlen>
 8003714:	0003      	movs	r3, r0
 8003716:	b29a      	uxth	r2, r3
 8003718:	23fa      	movs	r3, #250	; 0xfa
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	1939      	adds	r1, r7, r4
 800371e:	4826      	ldr	r0, [pc, #152]	; (80037b8 <transmitWifi+0x1dc>)
 8003720:	f004 ff08 	bl	8008534 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8003724:	23fa      	movs	r3, #250	; 0xfa
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	0018      	movs	r0, r3
 800372a:	f001 fc35 	bl	8004f98 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) send, strlen(send), 500);
 800372e:	197b      	adds	r3, r7, r5
 8003730:	0018      	movs	r0, r3
 8003732:	f7fc fce9 	bl	8000108 <strlen>
 8003736:	0003      	movs	r3, r0
 8003738:	b29a      	uxth	r2, r3
 800373a:	23fa      	movs	r3, #250	; 0xfa
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	1979      	adds	r1, r7, r5
 8003740:	481d      	ldr	r0, [pc, #116]	; (80037b8 <transmitWifi+0x1dc>)
 8003742:	f004 fef7 	bl	8008534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) jsonStr, strlen(jsonStr), 500);
 8003746:	230c      	movs	r3, #12
 8003748:	001d      	movs	r5, r3
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	0018      	movs	r0, r3
 800374e:	f7fc fcdb 	bl	8000108 <strlen>
 8003752:	0003      	movs	r3, r0
 8003754:	b29a      	uxth	r2, r3
 8003756:	23fa      	movs	r3, #250	; 0xfa
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	1979      	adds	r1, r7, r5
 800375c:	4816      	ldr	r0, [pc, #88]	; (80037b8 <transmitWifi+0x1dc>)
 800375e:	f004 fee9 	bl	8008534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 8003762:	193b      	adds	r3, r7, r4
 8003764:	0018      	movs	r0, r3
 8003766:	f7fc fccf 	bl	8000108 <strlen>
 800376a:	0003      	movs	r3, r0
 800376c:	b29a      	uxth	r2, r3
 800376e:	23fa      	movs	r3, #250	; 0xfa
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	1939      	adds	r1, r7, r4
 8003774:	4810      	ldr	r0, [pc, #64]	; (80037b8 <transmitWifi+0x1dc>)
 8003776:	f004 fedd 	bl	8008534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) info, strlen(info), 500);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f7fc fcc3 	bl	8000108 <strlen>
 8003782:	0003      	movs	r3, r0
 8003784:	b29a      	uxth	r2, r3
 8003786:	23fa      	movs	r3, #250	; 0xfa
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	480a      	ldr	r0, [pc, #40]	; (80037b8 <transmitWifi+0x1dc>)
 800378e:	f004 fed1 	bl	8008534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 8003792:	193b      	adds	r3, r7, r4
 8003794:	0018      	movs	r0, r3
 8003796:	f7fc fcb7 	bl	8000108 <strlen>
 800379a:	0003      	movs	r3, r0
 800379c:	b29a      	uxth	r2, r3
 800379e:	23fa      	movs	r3, #250	; 0xfa
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	1939      	adds	r1, r7, r4
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <transmitWifi+0x1dc>)
 80037a6:	f004 fec5 	bl	8008534 <HAL_UART_Transmit>


}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b05f      	add	sp, #380	; 0x17c
 80037b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	0800c1d4 	.word	0x0800c1d4
 80037b8:	200002a8 	.word	0x200002a8
 80037bc:	0800c20c 	.word	0x0800c20c
 80037c0:	0800c218 	.word	0x0800c218
 80037c4:	0800c21c 	.word	0x0800c21c
 80037c8:	0800c1d0 	.word	0x0800c1d0

080037cc <adc_to_voltage>:
/**
 * 	@brief Function handles converting adc value to a voltage.
 * 	Call reverse_and_shift_adc_value before hand.
 */
static float adc_to_voltage(uint16_t adc_value)
{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
	return 5.0 * adc_value / 1024;;
 80037d8:	1dbb      	adds	r3, r7, #6
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	0018      	movs	r0, r3
 80037de:	f7fe ff31 	bl	8002644 <__aeabi_i2d>
 80037e2:	2200      	movs	r2, #0
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <adc_to_voltage+0x44>)
 80037e6:	f7fe f921 	bl	8001a2c <__aeabi_dmul>
 80037ea:	0003      	movs	r3, r0
 80037ec:	000c      	movs	r4, r1
 80037ee:	0018      	movs	r0, r3
 80037f0:	0021      	movs	r1, r4
 80037f2:	2200      	movs	r2, #0
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <adc_to_voltage+0x48>)
 80037f6:	f7fd fd0f 	bl	8001218 <__aeabi_ddiv>
 80037fa:	0003      	movs	r3, r0
 80037fc:	000c      	movs	r4, r1
 80037fe:	0018      	movs	r0, r3
 8003800:	0021      	movs	r1, r4
 8003802:	f7fe ffdd 	bl	80027c0 <__aeabi_d2f>
 8003806:	1c03      	adds	r3, r0, #0
}
 8003808:	1c18      	adds	r0, r3, #0
 800380a:	46bd      	mov	sp, r7
 800380c:	b003      	add	sp, #12
 800380e:	bd90      	pop	{r4, r7, pc}
 8003810:	40140000 	.word	0x40140000
 8003814:	40900000 	.word	0x40900000

08003818 <calculate_wind_speed>:
 *	TODO: Wait 40 seconds until we do the first measurement to let the wind sensor stabilize
 *	TODO: Use the Bosch sensor for ambiant temperature instead of the onboard Modern Device Sensor
 * 	https://moderndevice.com/uncategorized/calibrating-rev-p-wind-sensor-new-regression/?preview=true
 */
static void calculate_wind_speed(uint16_t wind_speed_adc, uint16_t wind_temp_adc, float *wind_speed, float *temp_amb)
{
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60ba      	str	r2, [r7, #8]
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	240e      	movs	r4, #14
 8003824:	193b      	adds	r3, r7, r4
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	250c      	movs	r5, #12
 800382c:	197b      	adds	r3, r7, r5
 800382e:	1c0a      	adds	r2, r1, #0
 8003830:	801a      	strh	r2, [r3, #0]
	// Calculate Vin from ADC
	float wind_speed_vout = adc_to_voltage(wind_speed_adc);
 8003832:	193b      	adds	r3, r7, r4
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	0018      	movs	r0, r3
 8003838:	f7ff ffc8 	bl	80037cc <adc_to_voltage>
 800383c:	1c03      	adds	r3, r0, #0
 800383e:	617b      	str	r3, [r7, #20]
	float wind_temp_vout = adc_to_voltage(wind_temp_adc);
 8003840:	197b      	adds	r3, r7, r5
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	0018      	movs	r0, r3
 8003846:	f7ff ffc1 	bl	80037cc <adc_to_voltage>
 800384a:	1c03      	adds	r3, r0, #0
 800384c:	613b      	str	r3, [r7, #16]

	// Zero Voltage not set, set here
	// TODO: Check if 40 seconds of operation have passed before we decided to set the zero voltage.
	if (zero_voltage == -1) {
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <calculate_wind_speed+0x128>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	493c      	ldr	r1, [pc, #240]	; (8003944 <calculate_wind_speed+0x12c>)
 8003854:	1c18      	adds	r0, r3, #0
 8003856:	f7fc fe29 	bl	80004ac <__aeabi_fcmpeq>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d002      	beq.n	8003864 <calculate_wind_speed+0x4c>
		zero_voltage = wind_speed_vout;
 800385e:	4b38      	ldr	r3, [pc, #224]	; (8003940 <calculate_wind_speed+0x128>)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]
	}

	// Calculate Ambient Temperature in Celsius
	*temp_amb = (wind_temp_vout - 0.400) / 0.0195;
 8003864:	6938      	ldr	r0, [r7, #16]
 8003866:	f7fe ff59 	bl	800271c <__aeabi_f2d>
 800386a:	4a37      	ldr	r2, [pc, #220]	; (8003948 <calculate_wind_speed+0x130>)
 800386c:	4b37      	ldr	r3, [pc, #220]	; (800394c <calculate_wind_speed+0x134>)
 800386e:	f7fe fb4f 	bl	8001f10 <__aeabi_dsub>
 8003872:	0003      	movs	r3, r0
 8003874:	000c      	movs	r4, r1
 8003876:	0018      	movs	r0, r3
 8003878:	0021      	movs	r1, r4
 800387a:	4a35      	ldr	r2, [pc, #212]	; (8003950 <calculate_wind_speed+0x138>)
 800387c:	4b35      	ldr	r3, [pc, #212]	; (8003954 <calculate_wind_speed+0x13c>)
 800387e:	f7fd fccb 	bl	8001218 <__aeabi_ddiv>
 8003882:	0003      	movs	r3, r0
 8003884:	000c      	movs	r4, r1
 8003886:	0018      	movs	r0, r3
 8003888:	0021      	movs	r1, r4
 800388a:	f7fe ff99 	bl	80027c0 <__aeabi_d2f>
 800388e:	1c02      	adds	r2, r0, #0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]

	// Calculate the Wind Speed in MPH
	*wind_speed = (wind_speed_vout - zero_voltage) / (3.038517 * pow(*temp_amb, 0.115157));
 8003894:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <calculate_wind_speed+0x128>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c19      	adds	r1, r3, #0
 800389a:	6978      	ldr	r0, [r7, #20]
 800389c:	f7fc ffdc 	bl	8000858 <__aeabi_fsub>
 80038a0:	1c03      	adds	r3, r0, #0
 80038a2:	1c18      	adds	r0, r3, #0
 80038a4:	f7fe ff3a 	bl	800271c <__aeabi_f2d>
 80038a8:	0005      	movs	r5, r0
 80038aa:	000e      	movs	r6, r1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1c18      	adds	r0, r3, #0
 80038b2:	f7fe ff33 	bl	800271c <__aeabi_f2d>
 80038b6:	4b28      	ldr	r3, [pc, #160]	; (8003958 <calculate_wind_speed+0x140>)
 80038b8:	4c28      	ldr	r4, [pc, #160]	; (800395c <calculate_wind_speed+0x144>)
 80038ba:	001a      	movs	r2, r3
 80038bc:	0023      	movs	r3, r4
 80038be:	f007 fc0b 	bl	800b0d8 <pow>
 80038c2:	4a27      	ldr	r2, [pc, #156]	; (8003960 <calculate_wind_speed+0x148>)
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <calculate_wind_speed+0x14c>)
 80038c6:	f7fe f8b1 	bl	8001a2c <__aeabi_dmul>
 80038ca:	0003      	movs	r3, r0
 80038cc:	000c      	movs	r4, r1
 80038ce:	001a      	movs	r2, r3
 80038d0:	0023      	movs	r3, r4
 80038d2:	0028      	movs	r0, r5
 80038d4:	0031      	movs	r1, r6
 80038d6:	f7fd fc9f 	bl	8001218 <__aeabi_ddiv>
 80038da:	0003      	movs	r3, r0
 80038dc:	000c      	movs	r4, r1
 80038de:	0018      	movs	r0, r3
 80038e0:	0021      	movs	r1, r4
 80038e2:	f7fe ff6d 	bl	80027c0 <__aeabi_d2f>
 80038e6:	1c02      	adds	r2, r0, #0
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	601a      	str	r2, [r3, #0]
	*wind_speed /= 0.087288;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c18      	adds	r0, r3, #0
 80038f2:	f7fe ff13 	bl	800271c <__aeabi_f2d>
 80038f6:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <calculate_wind_speed+0x150>)
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <calculate_wind_speed+0x154>)
 80038fa:	f7fd fc8d 	bl	8001218 <__aeabi_ddiv>
 80038fe:	0003      	movs	r3, r0
 8003900:	000c      	movs	r4, r1
 8003902:	0018      	movs	r0, r3
 8003904:	0021      	movs	r1, r4
 8003906:	f7fe ff5b 	bl	80027c0 <__aeabi_d2f>
 800390a:	1c02      	adds	r2, r0, #0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	601a      	str	r2, [r3, #0]
	*wind_speed = pow(*wind_speed, 3.009364);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1c18      	adds	r0, r3, #0
 8003916:	f7fe ff01 	bl	800271c <__aeabi_f2d>
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <calculate_wind_speed+0x158>)
 800391c:	4c15      	ldr	r4, [pc, #84]	; (8003974 <calculate_wind_speed+0x15c>)
 800391e:	001a      	movs	r2, r3
 8003920:	0023      	movs	r3, r4
 8003922:	f007 fbd9 	bl	800b0d8 <pow>
 8003926:	0003      	movs	r3, r0
 8003928:	000c      	movs	r4, r1
 800392a:	0018      	movs	r0, r3
 800392c:	0021      	movs	r1, r4
 800392e:	f7fe ff47 	bl	80027c0 <__aeabi_d2f>
 8003932:	1c02      	adds	r2, r0, #0
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b007      	add	sp, #28
 800393e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003940:	20000004 	.word	0x20000004
 8003944:	bf800000 	.word	0xbf800000
 8003948:	9999999a 	.word	0x9999999a
 800394c:	3fd99999 	.word	0x3fd99999
 8003950:	d916872b 	.word	0xd916872b
 8003954:	3f93f7ce 	.word	0x3f93f7ce
 8003958:	dce7cd03 	.word	0xdce7cd03
 800395c:	3fbd7aed 	.word	0x3fbd7aed
 8003960:	003ab863 	.word	0x003ab863
 8003964:	40084ee2 	.word	0x40084ee2
 8003968:	a1554fbe 	.word	0xa1554fbe
 800396c:	3fb65881 	.word	0x3fb65881
 8003970:	6ece13f5 	.word	0x6ece13f5
 8003974:	4008132d 	.word	0x4008132d

08003978 <bme280_read_data_forced_mode>:

void bme280_read_data_forced_mode(struct bme280_dev *dev)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	bme280_rslt = 0;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <bme280_read_data_forced_mode+0x78>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
	/* Set measurement mode to Forced */
	bme280_rslt |= bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0019      	movs	r1, r3
 800398a:	2001      	movs	r0, #1
 800398c:	f000 fa82 	bl	8003e94 <bme280_set_sensor_mode>
 8003990:	0003      	movs	r3, r0
 8003992:	001a      	movs	r2, r3
 8003994:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <bme280_read_data_forced_mode+0x78>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	4313      	orrs	r3, r2
 800399c:	b25a      	sxtb	r2, r3
 800399e:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <bme280_read_data_forced_mode+0x78>)
 80039a0:	701a      	strb	r2, [r3, #0]
	/* Wait for the measurement to complete */
	dev->delay_ms(500);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	22fa      	movs	r2, #250	; 0xfa
 80039a8:	0052      	lsls	r2, r2, #1
 80039aa:	0010      	movs	r0, r2
 80039ac:	4798      	blx	r3
	/* Output data to comp_data */
	bme280_rslt |= bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <bme280_read_data_forced_mode+0x7c>)
 80039b2:	0019      	movs	r1, r3
 80039b4:	2007      	movs	r0, #7
 80039b6:	f000 fb4a 	bl	800404e <bme280_get_sensor_data>
 80039ba:	0003      	movs	r3, r0
 80039bc:	001a      	movs	r2, r3
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <bme280_read_data_forced_mode+0x78>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	b25a      	sxtb	r2, r3
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <bme280_read_data_forced_mode+0x78>)
 80039ca:	701a      	strb	r2, [r3, #0]
	/* Set sensor to Sleep */
	bme280_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, dev);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0019      	movs	r1, r3
 80039d0:	2000      	movs	r0, #0
 80039d2:	f000 fa5f 	bl	8003e94 <bme280_set_sensor_mode>
 80039d6:	0003      	movs	r3, r0
 80039d8:	001a      	movs	r2, r3
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <bme280_read_data_forced_mode+0x78>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	4313      	orrs	r3, r2
 80039e2:	b25a      	sxtb	r2, r3
 80039e4:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <bme280_read_data_forced_mode+0x78>)
 80039e6:	701a      	strb	r2, [r3, #0]
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000201 	.word	0x20000201
 80039f4:	2000025c 	.word	0x2000025c

080039f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <_sbrk+0x50>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <_sbrk+0x16>
		heap_end = &end;
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <_sbrk+0x50>)
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <_sbrk+0x54>)
 8003a0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <_sbrk+0x50>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <_sbrk+0x50>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	18d3      	adds	r3, r2, r3
 8003a1c:	466a      	mov	r2, sp
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d907      	bls.n	8003a32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a22:	f005 faa7 	bl	8008f74 <__errno>
 8003a26:	0003      	movs	r3, r0
 8003a28:	220c      	movs	r2, #12
 8003a2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	425b      	negs	r3, r3
 8003a30:	e006      	b.n	8003a40 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <_sbrk+0x50>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	18d2      	adds	r2, r2, r3
 8003a3a:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <_sbrk+0x50>)
 8003a3c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000204 	.word	0x20000204
 8003a4c:	200003d0 	.word	0x200003d0

08003a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <SystemInit+0x64>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <SystemInit+0x64>)
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0049      	lsls	r1, r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <SystemInit+0x64>)
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <SystemInit+0x64>)
 8003a68:	4913      	ldr	r1, [pc, #76]	; (8003ab8 <SystemInit+0x68>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <SystemInit+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <SystemInit+0x64>)
 8003a74:	4911      	ldr	r1, [pc, #68]	; (8003abc <SystemInit+0x6c>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <SystemInit+0x64>)
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <SystemInit+0x64>)
 8003a80:	2101      	movs	r1, #1
 8003a82:	438a      	bics	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <SystemInit+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <SystemInit+0x64>)
 8003a8c:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <SystemInit+0x70>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
 RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <SystemInit+0x64>)
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <SystemInit+0x64>)
 8003a98:	490a      	ldr	r1, [pc, #40]	; (8003ac4 <SystemInit+0x74>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <SystemInit+0x64>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <SystemInit+0x78>)
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	0512      	lsls	r2, r2, #20
 8003aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	88ff400c 	.word	0x88ff400c
 8003abc:	fef6fff6 	.word	0xfef6fff6
 8003ac0:	fffbffff 	.word	0xfffbffff
 8003ac4:	ff02ffff 	.word	0xff02ffff
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003acc:	480d      	ldr	r0, [pc, #52]	; (8003b04 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003ace:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ad2:	e003      	b.n	8003adc <LoopCopyDataInit>

08003ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ada:	3104      	adds	r1, #4

08003adc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003adc:	480b      	ldr	r0, [pc, #44]	; (8003b0c <LoopForever+0xa>)
  ldr  r3, =_edata
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ae4:	d3f6      	bcc.n	8003ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003ae8:	e002      	b.n	8003af0 <LoopFillZerobss>

08003aea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003aea:	2300      	movs	r3, #0
  str  r3, [r2]
 8003aec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aee:	3204      	adds	r2, #4

08003af0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <LoopForever+0x16>)
  cmp  r2, r3
 8003af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003af4:	d3f9      	bcc.n	8003aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003af6:	f7ff ffab 	bl	8003a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003afa:	f005 fa41 	bl	8008f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003afe:	f7fe ff0d 	bl	800291c <main>

08003b02 <LoopForever>:

LoopForever:
    b LoopForever
 8003b02:	e7fe      	b.n	8003b02 <LoopForever>
   ldr   r0, =_estack
 8003b04:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003b08:	0800c6b0 	.word	0x0800c6b0
  ldr  r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b10:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003b14:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003b18:	200003cc 	.word	0x200003cc

08003b1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b1c:	e7fe      	b.n	8003b1c <ADC1_COMP_IRQHandler>

08003b1e <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003b1e:	b5b0      	push	{r4, r5, r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8003b26:	230e      	movs	r3, #14
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8003b2e:	230d      	movs	r3, #13
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003b36:	250f      	movs	r5, #15
 8003b38:	197c      	adds	r4, r7, r5
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f001 f9a7 	bl	8004e90 <null_ptr_check>
 8003b42:	0003      	movs	r3, r0
 8003b44:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003b46:	197b      	adds	r3, r7, r5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d14a      	bne.n	8003be6 <bme280_init+0xc8>
    {
        while (try_count)
 8003b50:	e039      	b.n	8003bc6 <bme280_init+0xa8>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003b52:	250f      	movs	r5, #15
 8003b54:	197c      	adds	r4, r7, r5
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	220d      	movs	r2, #13
 8003b5a:	18b9      	adds	r1, r7, r2
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	20d0      	movs	r0, #208	; 0xd0
 8003b60:	f000 f849 	bl	8003bf6 <bme280_get_regs>
 8003b64:	0003      	movs	r3, r0
 8003b66:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8003b68:	197b      	adds	r3, r7, r5
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11f      	bne.n	8003bb2 <bme280_init+0x94>
 8003b72:	230d      	movs	r3, #13
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b60      	cmp	r3, #96	; 0x60
 8003b7a:	d11a      	bne.n	8003bb2 <bme280_init+0x94>
            {
                dev->chip_id = chip_id;
 8003b7c:	230d      	movs	r3, #13
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8003b86:	250f      	movs	r5, #15
 8003b88:	197c      	adds	r4, r7, r5
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f000 f9f6 	bl	8003f7e <bme280_soft_reset>
 8003b92:	0003      	movs	r3, r0
 8003b94:	7023      	strb	r3, [r4, #0]
                if (rslt == BME280_OK)
 8003b96:	197b      	adds	r3, r7, r5
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d118      	bne.n	8003bd2 <bme280_init+0xb4>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8003ba0:	230f      	movs	r3, #15
 8003ba2:	18fc      	adds	r4, r7, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 ffc4 	bl	8004b34 <get_calib_data>
 8003bac:	0003      	movs	r3, r0
 8003bae:	7023      	strb	r3, [r4, #0]
                }
                break;
 8003bb0:	e00f      	b.n	8003bd2 <bme280_init+0xb4>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	4798      	blx	r3
            --try_count;
 8003bba:	220e      	movs	r2, #14
 8003bbc:	18bb      	adds	r3, r7, r2
 8003bbe:	18ba      	adds	r2, r7, r2
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8003bc6:	230e      	movs	r3, #14
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1c0      	bne.n	8003b52 <bme280_init+0x34>
 8003bd0:	e000      	b.n	8003bd4 <bme280_init+0xb6>
                break;
 8003bd2:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8003bd4:	230e      	movs	r3, #14
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <bme280_init+0xc8>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8003bde:	230f      	movs	r3, #15
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	22fe      	movs	r2, #254	; 0xfe
 8003be4:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003be6:	230f      	movs	r3, #15
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b25b      	sxtb	r3, r3
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bdb0      	pop	{r4, r5, r7, pc}

08003bf6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8003bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf8:	b087      	sub	sp, #28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	0011      	movs	r1, r2
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	230f      	movs	r3, #15
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	1c02      	adds	r2, r0, #0
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	1c0a      	adds	r2, r1, #0
 8003c10:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003c12:	2517      	movs	r5, #23
 8003c14:	197c      	adds	r4, r7, r5
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f001 f939 	bl	8004e90 <null_ptr_check>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d126      	bne.n	8003c7a <bme280_get_regs+0x84>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	789b      	ldrb	r3, [r3, #2]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d007      	beq.n	8003c44 <bme280_get_regs+0x4e>
        {
            reg_addr = reg_addr | 0x80;
 8003c34:	220f      	movs	r2, #15
 8003c36:	18bb      	adds	r3, r7, r2
 8003c38:	18ba      	adds	r2, r7, r2
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	2180      	movs	r1, #128	; 0x80
 8003c3e:	4249      	negs	r1, r1
 8003c40:	430a      	orrs	r2, r1
 8003c42:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685d      	ldr	r5, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	7858      	ldrb	r0, [r3, #1]
 8003c4c:	2317      	movs	r3, #23
 8003c4e:	18fc      	adds	r4, r7, r3
 8003c50:	220c      	movs	r2, #12
 8003c52:	18bb      	adds	r3, r7, r2
 8003c54:	881e      	ldrh	r6, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	210f      	movs	r1, #15
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	7819      	ldrb	r1, [r3, #0]
 8003c5e:	0033      	movs	r3, r6
 8003c60:	47a8      	blx	r5
 8003c62:	0003      	movs	r3, r0
 8003c64:	7023      	strb	r3, [r4, #0]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8003c66:	2317      	movs	r3, #23
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <bme280_get_regs+0x84>
        {
            rslt = BME280_E_COMM_FAIL;
 8003c72:	2317      	movs	r3, #23
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	22fc      	movs	r2, #252	; 0xfc
 8003c78:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003c7a:	2317      	movs	r3, #23
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b25b      	sxtb	r3, r3
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b007      	add	sp, #28
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c8a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8c:	b08d      	sub	sp, #52	; 0x34
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8003c9a:	1dfb      	adds	r3, r7, #7
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b0a      	cmp	r3, #10
 8003ca0:	d902      	bls.n	8003ca8 <bme280_set_regs+0x1e>
    {
        len = 10;
 8003ca2:	1dfb      	adds	r3, r7, #7
 8003ca4:	220a      	movs	r2, #10
 8003ca6:	701a      	strb	r2, [r3, #0]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003ca8:	252f      	movs	r5, #47	; 0x2f
 8003caa:	197c      	adds	r4, r7, r5
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f001 f8ee 	bl	8004e90 <null_ptr_check>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003cb8:	197b      	adds	r3, r7, r5
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d16b      	bne.n	8003d9a <bme280_set_regs+0x110>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d068      	beq.n	8003d9a <bme280_set_regs+0x110>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d065      	beq.n	8003d9a <bme280_set_regs+0x110>
    {
        if (len != 0)
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d05c      	beq.n	8003d90 <bme280_set_regs+0x106>
        {
            temp_buff[0] = reg_data[0];
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	2314      	movs	r3, #20
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	789b      	ldrb	r3, [r3, #2]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d01e      	beq.n	8003d26 <bme280_set_regs+0x9c>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003ce8:	232b      	movs	r3, #43	; 0x2b
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e012      	b.n	8003d18 <bme280_set_regs+0x8e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003cf2:	202b      	movs	r0, #43	; 0x2b
 8003cf4:	183b      	adds	r3, r7, r0
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	183b      	adds	r3, r7, r0
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	18cb      	adds	r3, r1, r3
 8003d06:	217f      	movs	r1, #127	; 0x7f
 8003d08:	400a      	ands	r2, r1
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003d0e:	183b      	adds	r3, r7, r0
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	3201      	adds	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	232b      	movs	r3, #43	; 0x2b
 8003d1a:	18fa      	adds	r2, r7, r3
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3e5      	bcc.n	8003cf2 <bme280_set_regs+0x68>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d911      	bls.n	8003d52 <bme280_set_regs+0xc8>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003d2e:	1dfb      	adds	r3, r7, #7
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	2114      	movs	r1, #20
 8003d36:	1879      	adds	r1, r7, r1
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 ff48 	bl	8004bce <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8003d3e:	1dfb      	adds	r3, r7, #7
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	18db      	adds	r3, r3, r3
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	232c      	movs	r3, #44	; 0x2c
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	3a01      	subs	r2, #1
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	e004      	b.n	8003d5c <bme280_set_regs+0xd2>
            }
            else
            {
                temp_len = len;
 8003d52:	232c      	movs	r3, #44	; 0x2c
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	1dfa      	adds	r2, r7, #7
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	801a      	strh	r2, [r3, #0]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689d      	ldr	r5, [r3, #8]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	7858      	ldrb	r0, [r3, #1]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	7819      	ldrb	r1, [r3, #0]
 8003d68:	262f      	movs	r6, #47	; 0x2f
 8003d6a:	19bc      	adds	r4, r7, r6
 8003d6c:	232c      	movs	r3, #44	; 0x2c
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	2214      	movs	r2, #20
 8003d74:	18ba      	adds	r2, r7, r2
 8003d76:	47a8      	blx	r5
 8003d78:	0003      	movs	r3, r0
 8003d7a:	7023      	strb	r3, [r4, #0]

            /* Check for communication error */
            if (rslt != BME280_OK)
 8003d7c:	19bb      	adds	r3, r7, r6
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00e      	beq.n	8003da4 <bme280_set_regs+0x11a>
            {
                rslt = BME280_E_COMM_FAIL;
 8003d86:	232f      	movs	r3, #47	; 0x2f
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	22fc      	movs	r2, #252	; 0xfc
 8003d8c:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8003d8e:	e009      	b.n	8003da4 <bme280_set_regs+0x11a>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8003d90:	232f      	movs	r3, #47	; 0x2f
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	22fd      	movs	r2, #253	; 0xfd
 8003d96:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8003d98:	e004      	b.n	8003da4 <bme280_set_regs+0x11a>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003d9a:	232f      	movs	r3, #47	; 0x2f
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	22ff      	movs	r2, #255	; 0xff
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e000      	b.n	8003da6 <bme280_set_regs+0x11c>
        if (len != 0)
 8003da4:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8003da6:	232f      	movs	r3, #47	; 0x2f
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b25b      	sxtb	r3, r3
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b00d      	add	sp, #52	; 0x34
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003db6 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003db6:	b5b0      	push	{r4, r5, r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	6039      	str	r1, [r7, #0]
 8003dc0:	1dfb      	adds	r3, r7, #7
 8003dc2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003dc4:	250f      	movs	r5, #15
 8003dc6:	197c      	adds	r4, r7, r5
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f001 f860 	bl	8004e90 <null_ptr_check>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003dd4:	197b      	adds	r3, r7, r5
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d152      	bne.n	8003e84 <bme280_set_sensor_settings+0xce>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003dde:	250f      	movs	r5, #15
 8003de0:	197c      	adds	r4, r7, r5
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	230e      	movs	r3, #14
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 f89c 	bl	8003f28 <bme280_get_sensor_mode>
 8003df0:	0003      	movs	r3, r0
 8003df2:	7023      	strb	r3, [r4, #0]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003df4:	197b      	adds	r3, r7, r5
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <bme280_set_sensor_settings+0x62>
 8003dfe:	230e      	movs	r3, #14
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <bme280_set_sensor_settings+0x62>
        {
            rslt = put_device_to_sleep(dev);
 8003e08:	230f      	movs	r3, #15
 8003e0a:	18fc      	adds	r4, r7, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 fc08 	bl	8004624 <put_device_to_sleep>
 8003e14:	0003      	movs	r3, r0
 8003e16:	7023      	strb	r3, [r4, #0]
        }
        if (rslt == BME280_OK)
 8003e18:	230f      	movs	r3, #15
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d12f      	bne.n	8003e84 <bme280_set_sensor_settings+0xce>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	0019      	movs	r1, r3
 8003e2a:	2007      	movs	r0, #7
 8003e2c:	f001 f80b 	bl	8004e46 <are_settings_changed>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d00c      	beq.n	8003e4e <bme280_set_sensor_settings+0x98>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	3338      	adds	r3, #56	; 0x38
 8003e38:	0019      	movs	r1, r3
 8003e3a:	230f      	movs	r3, #15
 8003e3c:	18fc      	adds	r4, r7, r3
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	1dfb      	adds	r3, r7, #7
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 f9fd 	bl	8004244 <set_osr_settings>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d114      	bne.n	8003e84 <bme280_set_sensor_settings+0xce>
 8003e5a:	1dfb      	adds	r3, r7, #7
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	0019      	movs	r1, r3
 8003e60:	2018      	movs	r0, #24
 8003e62:	f000 fff0 	bl	8004e46 <are_settings_changed>
 8003e66:	1e03      	subs	r3, r0, #0
 8003e68:	d00c      	beq.n	8003e84 <bme280_set_sensor_settings+0xce>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	3338      	adds	r3, #56	; 0x38
 8003e6e:	0019      	movs	r1, r3
 8003e70:	230f      	movs	r3, #15
 8003e72:	18fc      	adds	r4, r7, r3
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	1dfb      	adds	r3, r7, #7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 faad 	bl	80043da <set_filter_standby_settings>
 8003e80:	0003      	movs	r3, r0
 8003e82:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8003e84:	230f      	movs	r3, #15
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b25b      	sxtb	r3, r3
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b004      	add	sp, #16
 8003e92:	bdb0      	pop	{r4, r5, r7, pc}

08003e94 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003e94:	b5b0      	push	{r4, r5, r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	6039      	str	r1, [r7, #0]
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003ea2:	250f      	movs	r5, #15
 8003ea4:	197c      	adds	r4, r7, r5
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 fff1 	bl	8004e90 <null_ptr_check>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8003eb2:	197b      	adds	r3, r7, r5
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d12d      	bne.n	8003f18 <bme280_set_sensor_mode+0x84>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003ebc:	250f      	movs	r5, #15
 8003ebe:	197c      	adds	r4, r7, r5
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	230e      	movs	r3, #14
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f82d 	bl	8003f28 <bme280_get_sensor_mode>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8003ed2:	197b      	adds	r3, r7, r5
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b25b      	sxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10c      	bne.n	8003ef6 <bme280_set_sensor_mode+0x62>
 8003edc:	230e      	movs	r3, #14
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <bme280_set_sensor_mode+0x62>
        {
            rslt = put_device_to_sleep(dev);
 8003ee6:	230f      	movs	r3, #15
 8003ee8:	18fc      	adds	r4, r7, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 fb99 	bl	8004624 <put_device_to_sleep>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8003ef6:	230f      	movs	r3, #15
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b25b      	sxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <bme280_set_sensor_mode+0x84>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8003f02:	230f      	movs	r3, #15
 8003f04:	18fc      	adds	r4, r7, r3
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	0011      	movs	r1, r2
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 fb47 	bl	80045a2 <write_power_mode>
 8003f14:	0003      	movs	r3, r0
 8003f16:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8003f18:	230f      	movs	r3, #15
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b25b      	sxtb	r3, r3
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b004      	add	sp, #16
 8003f26:	bdb0      	pop	{r4, r5, r7, pc}

08003f28 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003f32:	250f      	movs	r5, #15
 8003f34:	197c      	adds	r4, r7, r5
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 ffa9 	bl	8004e90 <null_ptr_check>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8003f42:	197b      	adds	r3, r7, r5
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b25b      	sxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d110      	bne.n	8003f6e <bme280_get_sensor_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003f4c:	230f      	movs	r3, #15
 8003f4e:	18fc      	adds	r4, r7, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	20f4      	movs	r0, #244	; 0xf4
 8003f58:	f7ff fe4d 	bl	8003bf6 <bme280_get_regs>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2203      	movs	r2, #3
 8003f66:	4013      	ands	r3, r2
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003f6e:	230f      	movs	r3, #15
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b25b      	sxtb	r3, r3
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bdb0      	pop	{r4, r5, r7, pc}

08003f7e <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003f7e:	b5b0      	push	{r4, r5, r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8003f86:	230d      	movs	r3, #13
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	22e0      	movs	r2, #224	; 0xe0
 8003f8c:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8003f8e:	230c      	movs	r3, #12
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8003f96:	230e      	movs	r3, #14
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2205      	movs	r2, #5
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8003f9e:	230b      	movs	r3, #11
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	22b6      	movs	r2, #182	; 0xb6
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003fa6:	250f      	movs	r5, #15
 8003fa8:	197c      	adds	r4, r7, r5
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 ff6f 	bl	8004e90 <null_ptr_check>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003fb6:	197b      	adds	r3, r7, r5
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b25b      	sxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d13e      	bne.n	800403e <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003fc0:	250f      	movs	r5, #15
 8003fc2:	197c      	adds	r4, r7, r5
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	220b      	movs	r2, #11
 8003fc8:	18b9      	adds	r1, r7, r2
 8003fca:	220d      	movs	r2, #13
 8003fcc:	18b8      	adds	r0, r7, r2
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f7ff fe5b 	bl	8003c8a <bme280_set_regs>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8003fd8:	197b      	adds	r3, r7, r5
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d12d      	bne.n	800403e <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2002      	movs	r0, #2
 8003fe8:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8003fea:	250f      	movs	r5, #15
 8003fec:	197c      	adds	r4, r7, r5
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	220c      	movs	r2, #12
 8003ff2:	18b9      	adds	r1, r7, r2
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	20f3      	movs	r0, #243	; 0xf3
 8003ff8:	f7ff fdfd 	bl	8003bf6 <bme280_get_regs>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	7023      	strb	r3, [r4, #0]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8004000:	197b      	adds	r3, r7, r5
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b25b      	sxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <bme280_soft_reset+0xaa>
 800400a:	220e      	movs	r2, #14
 800400c:	18bb      	adds	r3, r7, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	18ba      	adds	r2, r7, r2
 8004012:	1e59      	subs	r1, r3, #1
 8004014:	7011      	strb	r1, [r2, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <bme280_soft_reset+0xaa>
 800401a:	230c      	movs	r3, #12
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	001a      	movs	r2, r3
 8004022:	2301      	movs	r3, #1
 8004024:	4013      	ands	r3, r2
 8004026:	d1dc      	bne.n	8003fe2 <bme280_soft_reset+0x64>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8004028:	230c      	movs	r3, #12
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	001a      	movs	r2, r3
 8004030:	2301      	movs	r3, #1
 8004032:	4013      	ands	r3, r2
 8004034:	d003      	beq.n	800403e <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8004036:	230f      	movs	r3, #15
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	22fa      	movs	r2, #250	; 0xfa
 800403c:	701a      	strb	r2, [r3, #0]
            }

        }
    }

    return rslt;
 800403e:	230f      	movs	r3, #15
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b25b      	sxtb	r3, r3
}
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b004      	add	sp, #16
 800404c:	bdb0      	pop	{r4, r5, r7, pc}

0800404e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800404e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004050:	b08b      	sub	sp, #44	; 0x2c
 8004052:	af00      	add	r7, sp, #0
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	230f      	movs	r3, #15
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	1c02      	adds	r2, r0, #0
 800405e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8004060:	231c      	movs	r3, #28
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	0018      	movs	r0, r3
 8004066:	2308      	movs	r3, #8
 8004068:	001a      	movs	r2, r3
 800406a:	2100      	movs	r1, #0
 800406c:	f004 ffd1 	bl	8009012 <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004070:	2310      	movs	r3, #16
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	0018      	movs	r0, r3
 8004076:	230c      	movs	r3, #12
 8004078:	001a      	movs	r2, r3
 800407a:	2100      	movs	r1, #0
 800407c:	f004 ffc9 	bl	8009012 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004080:	2527      	movs	r5, #39	; 0x27
 8004082:	197c      	adds	r4, r7, r5
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 ff02 	bl	8004e90 <null_ptr_check>
 800408c:	0003      	movs	r3, r0
 800408e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8004090:	197b      	adds	r3, r7, r5
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b25b      	sxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d12a      	bne.n	80040f0 <bme280_get_sensor_data+0xa2>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d027      	beq.n	80040f0 <bme280_get_sensor_data+0xa2>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80040a0:	2527      	movs	r5, #39	; 0x27
 80040a2:	197c      	adds	r4, r7, r5
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	221c      	movs	r2, #28
 80040a8:	18b9      	adds	r1, r7, r2
 80040aa:	2208      	movs	r2, #8
 80040ac:	20f7      	movs	r0, #247	; 0xf7
 80040ae:	f7ff fda2 	bl	8003bf6 <bme280_get_regs>
 80040b2:	0003      	movs	r3, r0
 80040b4:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80040b6:	197b      	adds	r3, r7, r5
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d11b      	bne.n	80040f8 <bme280_get_sensor_data+0xaa>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80040c0:	2610      	movs	r6, #16
 80040c2:	19ba      	adds	r2, r7, r6
 80040c4:	231c      	movs	r3, #28
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	0011      	movs	r1, r2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 f81c 	bl	8004108 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3310      	adds	r3, #16
 80040d4:	001d      	movs	r5, r3
 80040d6:	2327      	movs	r3, #39	; 0x27
 80040d8:	18fc      	adds	r4, r7, r3
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	19b9      	adds	r1, r7, r6
 80040de:	230f      	movs	r3, #15
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	7818      	ldrb	r0, [r3, #0]
 80040e4:	002b      	movs	r3, r5
 80040e6:	f000 f853 	bl	8004190 <bme280_compensate_data>
 80040ea:	0003      	movs	r3, r0
 80040ec:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80040ee:	e003      	b.n	80040f8 <bme280_get_sensor_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80040f0:	2327      	movs	r3, #39	; 0x27
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	22ff      	movs	r2, #255	; 0xff
 80040f6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80040f8:	2327      	movs	r3, #39	; 0x27
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b25b      	sxtb	r3, r3
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b00b      	add	sp, #44	; 0x2c
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004108 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	031b      	lsls	r3, r3, #12
 8004118:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3301      	adds	r3, #1
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3302      	adds	r3, #2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	b2db      	uxtb	r3, r3
 800412e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	431a      	orrs	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	431a      	orrs	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3303      	adds	r3, #3
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	031b      	lsls	r3, r3, #12
 8004146:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3305      	adds	r3, #5
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	b2db      	uxtb	r3, r3
 800415c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	431a      	orrs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	431a      	orrs	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3306      	adds	r3, #6
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3307      	adds	r3, #7
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b006      	add	sp, #24
 800418e:	bd80      	pop	{r7, pc}

08004190 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	230f      	movs	r3, #15
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	1c02      	adds	r2, r0, #0
 80041a2:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 80041a4:	2317      	movs	r3, #23
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03c      	beq.n	800422c <bme280_compensate_data+0x9c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d039      	beq.n	800422c <bme280_compensate_data+0x9c>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d036      	beq.n	800422c <bme280_compensate_data+0x9c>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80041d0:	230f      	movs	r3, #15
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2207      	movs	r2, #7
 80041d8:	4013      	ands	r3, r2
 80041da:	d008      	beq.n	80041ee <bme280_compensate_data+0x5e>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 fa80 	bl	80046e8 <compensate_temperature>
 80041e8:	0002      	movs	r2, r0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	605a      	str	r2, [r3, #4]
        }
        if (sensor_comp & BME280_PRESS)
 80041ee:	230f      	movs	r3, #15
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	4013      	ands	r3, r2
 80041f8:	d008      	beq.n	800420c <bme280_compensate_data+0x7c>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	0011      	movs	r1, r2
 8004200:	0018      	movs	r0, r3
 8004202:	f000 fad7 	bl	80047b4 <compensate_pressure>
 8004206:	0002      	movs	r2, r0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	601a      	str	r2, [r3, #0]
        }
        if (sensor_comp & BME280_HUM)
 800420c:	230f      	movs	r3, #15
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2204      	movs	r2, #4
 8004214:	4013      	ands	r3, r2
 8004216:	d00d      	beq.n	8004234 <bme280_compensate_data+0xa4>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0011      	movs	r1, r2
 800421e:	0018      	movs	r0, r3
 8004220:	f000 fbca 	bl	80049b8 <compensate_humidity>
 8004224:	0002      	movs	r2, r0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 800422a:	e003      	b.n	8004234 <bme280_compensate_data+0xa4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800422c:	2317      	movs	r3, #23
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	22ff      	movs	r2, #255	; 0xff
 8004232:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004234:	2317      	movs	r3, #23
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b25b      	sxtb	r3, r3
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b006      	add	sp, #24
 8004242:	bd80      	pop	{r7, pc}

08004244 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	210f      	movs	r1, #15
 8004250:	187b      	adds	r3, r7, r1
 8004252:	1c02      	adds	r2, r0, #0
 8004254:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004256:	2317      	movs	r3, #23
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 800425e:	187b      	adds	r3, r7, r1
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2204      	movs	r2, #4
 8004264:	4013      	ands	r3, r2
 8004266:	d009      	beq.n	800427c <set_osr_settings+0x38>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8004268:	2317      	movs	r3, #23
 800426a:	18fc      	adds	r4, r7, r3
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0011      	movs	r1, r2
 8004272:	0018      	movs	r0, r3
 8004274:	f000 f81c 	bl	80042b0 <set_osr_humidity_settings>
 8004278:	0003      	movs	r3, r0
 800427a:	7023      	strb	r3, [r4, #0]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800427c:	230f      	movs	r3, #15
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2203      	movs	r2, #3
 8004284:	4013      	ands	r3, r2
 8004286:	d00b      	beq.n	80042a0 <set_osr_settings+0x5c>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8004288:	2317      	movs	r3, #23
 800428a:	18fc      	adds	r4, r7, r3
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f853 	bl	8004342 <set_osr_press_temp_settings>
 800429c:	0003      	movs	r3, r0
 800429e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80042a0:	2317      	movs	r3, #23
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b25b      	sxtb	r3, r3
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b007      	add	sp, #28
 80042ae:	bd90      	pop	{r4, r7, pc}

080042b0 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80042b0:	b5b0      	push	{r4, r5, r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80042ba:	200c      	movs	r0, #12
 80042bc:	183b      	adds	r3, r7, r0
 80042be:	22f2      	movs	r2, #242	; 0xf2
 80042c0:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	789b      	ldrb	r3, [r3, #2]
 80042c6:	2207      	movs	r2, #7
 80042c8:	4013      	ands	r3, r2
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	210e      	movs	r1, #14
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80042d2:	250f      	movs	r5, #15
 80042d4:	197c      	adds	r4, r7, r5
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	1879      	adds	r1, r7, r1
 80042da:	1838      	adds	r0, r7, r0
 80042dc:	2201      	movs	r2, #1
 80042de:	f7ff fcd4 	bl	8003c8a <bme280_set_regs>
 80042e2:	0003      	movs	r3, r0
 80042e4:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80042e6:	197b      	adds	r3, r7, r5
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b25b      	sxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d120      	bne.n	8004332 <set_osr_humidity_settings+0x82>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80042f0:	210c      	movs	r1, #12
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	22f4      	movs	r2, #244	; 0xf4
 80042f6:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	7818      	ldrb	r0, [r3, #0]
 80042fc:	250f      	movs	r5, #15
 80042fe:	197c      	adds	r4, r7, r5
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	220d      	movs	r2, #13
 8004304:	18b9      	adds	r1, r7, r2
 8004306:	2201      	movs	r2, #1
 8004308:	f7ff fc75 	bl	8003bf6 <bme280_get_regs>
 800430c:	0003      	movs	r3, r0
 800430e:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004310:	197b      	adds	r3, r7, r5
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b25b      	sxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <set_osr_humidity_settings+0x82>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800431a:	230f      	movs	r3, #15
 800431c:	18fc      	adds	r4, r7, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	220d      	movs	r2, #13
 8004322:	18b9      	adds	r1, r7, r2
 8004324:	220c      	movs	r2, #12
 8004326:	18b8      	adds	r0, r7, r2
 8004328:	2201      	movs	r2, #1
 800432a:	f7ff fcae 	bl	8003c8a <bme280_set_regs>
 800432e:	0003      	movs	r3, r0
 8004330:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8004332:	230f      	movs	r3, #15
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b25b      	sxtb	r3, r3
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bdb0      	pop	{r4, r5, r7, pc}

08004342 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8004342:	b5b0      	push	{r4, r5, r7, lr}
 8004344:	b086      	sub	sp, #24
 8004346:	af00      	add	r7, sp, #0
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	230f      	movs	r3, #15
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	1c02      	adds	r2, r0, #0
 8004352:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004354:	2116      	movs	r1, #22
 8004356:	187b      	adds	r3, r7, r1
 8004358:	22f4      	movs	r2, #244	; 0xf4
 800435a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800435c:	187b      	adds	r3, r7, r1
 800435e:	7818      	ldrb	r0, [r3, #0]
 8004360:	2517      	movs	r5, #23
 8004362:	197c      	adds	r4, r7, r5
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2215      	movs	r2, #21
 8004368:	18b9      	adds	r1, r7, r2
 800436a:	2201      	movs	r2, #1
 800436c:	f7ff fc43 	bl	8003bf6 <bme280_get_regs>
 8004370:	0003      	movs	r3, r0
 8004372:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004374:	197b      	adds	r3, r7, r5
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b25b      	sxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d125      	bne.n	80043ca <set_osr_press_temp_settings+0x88>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800437e:	230f      	movs	r3, #15
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	4013      	ands	r3, r2
 8004388:	d006      	beq.n	8004398 <set_osr_press_temp_settings+0x56>
        {
            fill_osr_press_settings(&reg_data, settings);
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	2315      	movs	r3, #21
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	0011      	movs	r1, r2
 8004392:	0018      	movs	r0, r3
 8004394:	f000 f8a0 	bl	80044d8 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8004398:	230f      	movs	r3, #15
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	d006      	beq.n	80043b2 <set_osr_press_temp_settings+0x70>
        {
            fill_osr_temp_settings(&reg_data, settings);
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	2315      	movs	r3, #21
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	0011      	movs	r1, r2
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 f8ae 	bl	800450e <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80043b2:	2317      	movs	r3, #23
 80043b4:	18fc      	adds	r4, r7, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2215      	movs	r2, #21
 80043ba:	18b9      	adds	r1, r7, r2
 80043bc:	2216      	movs	r2, #22
 80043be:	18b8      	adds	r0, r7, r2
 80043c0:	2201      	movs	r2, #1
 80043c2:	f7ff fc62 	bl	8003c8a <bme280_set_regs>
 80043c6:	0003      	movs	r3, r0
 80043c8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80043ca:	2317      	movs	r3, #23
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b25b      	sxtb	r3, r3
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b006      	add	sp, #24
 80043d8:	bdb0      	pop	{r4, r5, r7, pc}

080043da <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80043da:	b5b0      	push	{r4, r5, r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	230f      	movs	r3, #15
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	1c02      	adds	r2, r0, #0
 80043ea:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80043ec:	2116      	movs	r1, #22
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	22f5      	movs	r2, #245	; 0xf5
 80043f2:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80043f4:	187b      	adds	r3, r7, r1
 80043f6:	7818      	ldrb	r0, [r3, #0]
 80043f8:	2517      	movs	r5, #23
 80043fa:	197c      	adds	r4, r7, r5
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2215      	movs	r2, #21
 8004400:	18b9      	adds	r1, r7, r2
 8004402:	2201      	movs	r2, #1
 8004404:	f7ff fbf7 	bl	8003bf6 <bme280_get_regs>
 8004408:	0003      	movs	r3, r0
 800440a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800440c:	197b      	adds	r3, r7, r5
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b25b      	sxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d125      	bne.n	8004462 <set_filter_standby_settings+0x88>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	4013      	ands	r3, r2
 8004420:	d006      	beq.n	8004430 <set_filter_standby_settings+0x56>
        {
            fill_filter_settings(&reg_data, settings);
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	2315      	movs	r3, #21
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f000 f821 	bl	8004472 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8004430:	230f      	movs	r3, #15
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2210      	movs	r2, #16
 8004438:	4013      	ands	r3, r2
 800443a:	d006      	beq.n	800444a <set_filter_standby_settings+0x70>
        {
            fill_standby_settings(&reg_data, settings);
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	2315      	movs	r3, #21
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f000 f82f 	bl	80044a8 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800444a:	2317      	movs	r3, #23
 800444c:	18fc      	adds	r4, r7, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2215      	movs	r2, #21
 8004452:	18b9      	adds	r1, r7, r2
 8004454:	2216      	movs	r2, #22
 8004456:	18b8      	adds	r0, r7, r2
 8004458:	2201      	movs	r2, #1
 800445a:	f7ff fc16 	bl	8003c8a <bme280_set_regs>
 800445e:	0003      	movs	r3, r0
 8004460:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8004462:	2317      	movs	r3, #23
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b25b      	sxtb	r3, r3
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b006      	add	sp, #24
 8004470:	bdb0      	pop	{r4, r5, r7, pc}

08004472 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b25b      	sxtb	r3, r3
 8004482:	221c      	movs	r2, #28
 8004484:	4393      	bics	r3, r2
 8004486:	b25a      	sxtb	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	78db      	ldrb	r3, [r3, #3]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	b25b      	sxtb	r3, r3
 8004490:	211c      	movs	r1, #28
 8004492:	400b      	ands	r3, r1
 8004494:	b25b      	sxtb	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b25b      	sxtb	r3, r3
 800449a:	b2da      	uxtb	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	701a      	strb	r2, [r3, #0]
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	221f      	movs	r2, #31
 80044ba:	4013      	ands	r3, r2
 80044bc:	b25a      	sxtb	r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	791b      	ldrb	r3, [r3, #4]
 80044c2:	015b      	lsls	r3, r3, #5
 80044c4:	b25b      	sxtb	r3, r3
 80044c6:	4313      	orrs	r3, r2
 80044c8:	b25b      	sxtb	r3, r3
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	701a      	strb	r2, [r3, #0]
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	221c      	movs	r2, #28
 80044ea:	4393      	bics	r3, r2
 80044ec:	b25a      	sxtb	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	211c      	movs	r1, #28
 80044f8:	400b      	ands	r3, r1
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	4313      	orrs	r3, r2
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	b2da      	uxtb	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	701a      	strb	r2, [r3, #0]
}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	46bd      	mov	sp, r7
 800450a:	b002      	add	sp, #8
 800450c:	bd80      	pop	{r7, pc}

0800450e <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b25b      	sxtb	r3, r3
 800451e:	221f      	movs	r2, #31
 8004520:	4013      	ands	r3, r2
 8004522:	b25a      	sxtb	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	015b      	lsls	r3, r3, #5
 800452a:	b25b      	sxtb	r3, r3
 800452c:	4313      	orrs	r3, r2
 800452e:	b25b      	sxtb	r3, r3
 8004530:	b2da      	uxtb	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	701a      	strb	r2, [r3, #0]
}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}

0800453e <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2207      	movs	r2, #7
 800454e:	4013      	ands	r3, r2
 8004550:	b2da      	uxtb	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3302      	adds	r3, #2
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	109b      	asrs	r3, r3, #2
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2207      	movs	r2, #7
 8004562:	4013      	ands	r3, r2
 8004564:	b2da      	uxtb	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3302      	adds	r3, #2
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	b2da      	uxtb	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3303      	adds	r3, #3
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	109b      	asrs	r3, r3, #2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2207      	movs	r2, #7
 8004584:	4013      	ands	r3, r2
 8004586:	b2da      	uxtb	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3303      	adds	r3, #3
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	b2da      	uxtb	r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	711a      	strb	r2, [r3, #4]
}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	46bd      	mov	sp, r7
 800459e:	b002      	add	sp, #8
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80045a2:	b5b0      	push	{r4, r5, r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	0002      	movs	r2, r0
 80045aa:	6039      	str	r1, [r7, #0]
 80045ac:	1dfb      	adds	r3, r7, #7
 80045ae:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80045b0:	210e      	movs	r1, #14
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	22f4      	movs	r2, #244	; 0xf4
 80045b6:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	7818      	ldrb	r0, [r3, #0]
 80045bc:	250f      	movs	r5, #15
 80045be:	197c      	adds	r4, r7, r5
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	220d      	movs	r2, #13
 80045c4:	18b9      	adds	r1, r7, r2
 80045c6:	2201      	movs	r2, #1
 80045c8:	f7ff fb15 	bl	8003bf6 <bme280_get_regs>
 80045cc:	0003      	movs	r3, r0
 80045ce:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 80045d0:	197b      	adds	r3, r7, r5
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11c      	bne.n	8004614 <write_power_mode+0x72>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80045da:	200d      	movs	r0, #13
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	2203      	movs	r2, #3
 80045e4:	4393      	bics	r3, r2
 80045e6:	b25a      	sxtb	r2, r3
 80045e8:	1dfb      	adds	r3, r7, #7
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	2103      	movs	r1, #3
 80045f0:	400b      	ands	r3, r1
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b25b      	sxtb	r3, r3
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	183b      	adds	r3, r7, r0
 80045fc:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80045fe:	230f      	movs	r3, #15
 8004600:	18fc      	adds	r4, r7, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	1839      	adds	r1, r7, r0
 8004606:	220e      	movs	r2, #14
 8004608:	18b8      	adds	r0, r7, r2
 800460a:	2201      	movs	r2, #1
 800460c:	f7ff fb3d 	bl	8003c8a <bme280_set_regs>
 8004610:	0003      	movs	r3, r0
 8004612:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8004614:	230f      	movs	r3, #15
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b25b      	sxtb	r3, r3
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b004      	add	sp, #16
 8004622:	bdb0      	pop	{r4, r5, r7, pc}

08004624 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800462c:	2517      	movs	r5, #23
 800462e:	197c      	adds	r4, r7, r5
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2210      	movs	r2, #16
 8004634:	18b9      	adds	r1, r7, r2
 8004636:	2204      	movs	r2, #4
 8004638:	20f2      	movs	r0, #242	; 0xf2
 800463a:	f7ff fadc 	bl	8003bf6 <bme280_get_regs>
 800463e:	0003      	movs	r3, r0
 8004640:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004642:	197b      	adds	r3, r7, r5
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b25b      	sxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d11f      	bne.n	800468c <put_device_to_sleep+0x68>
    {
        parse_device_settings(reg_data, &settings);
 800464c:	2308      	movs	r3, #8
 800464e:	18fa      	adds	r2, r7, r3
 8004650:	2310      	movs	r3, #16
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	0011      	movs	r1, r2
 8004656:	0018      	movs	r0, r3
 8004658:	f7ff ff71 	bl	800453e <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800465c:	2517      	movs	r5, #23
 800465e:	197c      	adds	r4, r7, r5
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f7ff fc8b 	bl	8003f7e <bme280_soft_reset>
 8004668:	0003      	movs	r3, r0
 800466a:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 800466c:	197b      	adds	r3, r7, r5
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b25b      	sxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <put_device_to_sleep+0x68>
        {
            rslt = reload_device_settings(&settings, dev);
 8004676:	2317      	movs	r3, #23
 8004678:	18fc      	adds	r4, r7, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	2308      	movs	r3, #8
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	0011      	movs	r1, r2
 8004682:	0018      	movs	r0, r3
 8004684:	f000 f80a 	bl	800469c <reload_device_settings>
 8004688:	0003      	movs	r3, r0
 800468a:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800468c:	2317      	movs	r3, #23
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b25b      	sxtb	r3, r3
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b006      	add	sp, #24
 800469a:	bdb0      	pop	{r4, r5, r7, pc}

0800469c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800469c:	b5b0      	push	{r4, r5, r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80046a6:	250f      	movs	r5, #15
 80046a8:	197c      	adds	r4, r7, r5
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	0019      	movs	r1, r3
 80046b0:	201f      	movs	r0, #31
 80046b2:	f7ff fdc7 	bl	8004244 <set_osr_settings>
 80046b6:	0003      	movs	r3, r0
 80046b8:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 80046ba:	197b      	adds	r3, r7, r5
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <reload_device_settings+0x3c>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80046c4:	230f      	movs	r3, #15
 80046c6:	18fc      	adds	r4, r7, r3
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	0019      	movs	r1, r3
 80046ce:	201f      	movs	r0, #31
 80046d0:	f7ff fe83 	bl	80043da <set_filter_standby_settings>
 80046d4:	0003      	movs	r3, r0
 80046d6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80046d8:	230f      	movs	r3, #15
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b25b      	sxtb	r3, r3
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b004      	add	sp, #16
 80046e6:	bdb0      	pop	{r4, r5, r7, pc}

080046e8 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 80046f2:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <compensate_temperature+0xb8>)
 80046f4:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <compensate_temperature+0xbc>)
 80046f8:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	08db      	lsrs	r3, r3, #3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	8812      	ldrh	r2, [r2, #0]
 8004704:	0052      	lsls	r2, r2, #1
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2202      	movs	r2, #2
 800470e:	5e9b      	ldrsh	r3, [r3, r2]
 8004710:	001a      	movs	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4353      	muls	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	da02      	bge.n	8004720 <compensate_temperature+0x38>
 800471a:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <compensate_temperature+0xc0>)
 800471c:	4694      	mov	ip, r2
 800471e:	4463      	add	r3, ip
 8004720:	12db      	asrs	r3, r3, #11
 8004722:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4353      	muls	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	da02      	bge.n	8004742 <compensate_temperature+0x5a>
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <compensate_temperature+0xc4>)
 800473e:	4694      	mov	ip, r2
 8004740:	4463      	add	r3, ip
 8004742:	131b      	asrs	r3, r3, #12
 8004744:	001a      	movs	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2104      	movs	r1, #4
 800474a:	5e5b      	ldrsh	r3, [r3, r1]
 800474c:	4353      	muls	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	da02      	bge.n	8004758 <compensate_temperature+0x70>
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <compensate_temperature+0xc8>)
 8004754:	4694      	mov	ip, r2
 8004756:	4463      	add	r3, ip
 8004758:	139b      	asrs	r3, r3, #14
 800475a:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	18d2      	adds	r2, r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476a:	0013      	movs	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	189b      	adds	r3, r3, r2
 8004770:	3380      	adds	r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	da00      	bge.n	8004778 <compensate_temperature+0x90>
 8004776:	33ff      	adds	r3, #255	; 0xff
 8004778:	121b      	asrs	r3, r3, #8
 800477a:	61fb      	str	r3, [r7, #28]
    if (temperature < temperature_min)
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	429a      	cmp	r2, r3
 8004782:	da02      	bge.n	800478a <compensate_temperature+0xa2>
    {
        temperature = temperature_min;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	e005      	b.n	8004796 <compensate_temperature+0xae>
    }
    else if (temperature > temperature_max)
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	429a      	cmp	r2, r3
 8004790:	dd01      	ble.n	8004796 <compensate_temperature+0xae>
    {
        temperature = temperature_max;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	61fb      	str	r3, [r7, #28]
    }

    return temperature;
 8004796:	69fb      	ldr	r3, [r7, #28]
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b008      	add	sp, #32
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	fffff060 	.word	0xfffff060
 80047a4:	00002134 	.word	0x00002134
 80047a8:	000007ff 	.word	0x000007ff
 80047ac:	00000fff 	.word	0x00000fff
 80047b0:	00003fff 	.word	0x00003fff

080047b4 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 80047be:	4b75      	ldr	r3, [pc, #468]	; (8004994 <compensate_pressure+0x1e0>)
 80047c0:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 80047c2:	4b75      	ldr	r3, [pc, #468]	; (8004998 <compensate_pressure+0x1e4>)
 80047c4:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da00      	bge.n	80047d0 <compensate_pressure+0x1c>
 80047ce:	3301      	adds	r3, #1
 80047d0:	105b      	asrs	r3, r3, #1
 80047d2:	4a72      	ldr	r2, [pc, #456]	; (800499c <compensate_pressure+0x1e8>)
 80047d4:	4694      	mov	ip, r2
 80047d6:	4463      	add	r3, ip
 80047d8:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da00      	bge.n	80047e2 <compensate_pressure+0x2e>
 80047e0:	3303      	adds	r3, #3
 80047e2:	109b      	asrs	r3, r3, #2
 80047e4:	001a      	movs	r2, r3
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da00      	bge.n	80047ee <compensate_pressure+0x3a>
 80047ec:	3303      	adds	r3, #3
 80047ee:	109b      	asrs	r3, r3, #2
 80047f0:	4353      	muls	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da02      	bge.n	80047fc <compensate_pressure+0x48>
 80047f6:	4a6a      	ldr	r2, [pc, #424]	; (80049a0 <compensate_pressure+0x1ec>)
 80047f8:	4694      	mov	ip, r2
 80047fa:	4463      	add	r3, ip
 80047fc:	12db      	asrs	r3, r3, #11
 80047fe:	001a      	movs	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2110      	movs	r1, #16
 8004804:	5e5b      	ldrsh	r3, [r3, r1]
 8004806:	4353      	muls	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	220e      	movs	r2, #14
 800480e:	5e9b      	ldrsh	r3, [r3, r2]
 8004810:	001a      	movs	r2, r3
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	4353      	muls	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	18d3      	adds	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	da00      	bge.n	8004826 <compensate_pressure+0x72>
 8004824:	3303      	adds	r3, #3
 8004826:	109b      	asrs	r3, r3, #2
 8004828:	001a      	movs	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	210c      	movs	r1, #12
 800482e:	5e5b      	ldrsh	r3, [r3, r1]
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	18d3      	adds	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	220a      	movs	r2, #10
 800483a:	5e9b      	ldrsh	r3, [r3, r2]
 800483c:	001a      	movs	r2, r3
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	da00      	bge.n	8004846 <compensate_pressure+0x92>
 8004844:	3303      	adds	r3, #3
 8004846:	109b      	asrs	r3, r3, #2
 8004848:	0019      	movs	r1, r3
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	da00      	bge.n	8004852 <compensate_pressure+0x9e>
 8004850:	3303      	adds	r3, #3
 8004852:	109b      	asrs	r3, r3, #2
 8004854:	434b      	muls	r3, r1
 8004856:	2b00      	cmp	r3, #0
 8004858:	da02      	bge.n	8004860 <compensate_pressure+0xac>
 800485a:	4952      	ldr	r1, [pc, #328]	; (80049a4 <compensate_pressure+0x1f0>)
 800485c:	468c      	mov	ip, r1
 800485e:	4463      	add	r3, ip
 8004860:	135b      	asrs	r3, r3, #13
 8004862:	4353      	muls	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	da00      	bge.n	800486a <compensate_pressure+0xb6>
 8004868:	3307      	adds	r3, #7
 800486a:	10db      	asrs	r3, r3, #3
 800486c:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2208      	movs	r2, #8
 8004872:	5e9b      	ldrsh	r3, [r3, r2]
 8004874:	001a      	movs	r2, r3
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4353      	muls	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	da00      	bge.n	8004880 <compensate_pressure+0xcc>
 800487e:	3301      	adds	r3, #1
 8004880:	105b      	asrs	r3, r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	18d3      	adds	r3, r2, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	da02      	bge.n	8004894 <compensate_pressure+0xe0>
 800488e:	4a46      	ldr	r2, [pc, #280]	; (80049a8 <compensate_pressure+0x1f4>)
 8004890:	4694      	mov	ip, r2
 8004892:	4463      	add	r3, ip
 8004894:	149b      	asrs	r3, r3, #18
 8004896:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	0212      	lsls	r2, r2, #8
 800489e:	4694      	mov	ip, r2
 80048a0:	4463      	add	r3, ip
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	88d2      	ldrh	r2, [r2, #6]
 80048a6:	4353      	muls	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da02      	bge.n	80048b2 <compensate_pressure+0xfe>
 80048ac:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <compensate_pressure+0x1f8>)
 80048ae:	4694      	mov	ip, r2
 80048b0:	4463      	add	r3, ip
 80048b2:	13db      	asrs	r3, r3, #15
 80048b4:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d064      	beq.n	8004986 <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	0352      	lsls	r2, r2, #13
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da02      	bge.n	80048d4 <compensate_pressure+0x120>
 80048ce:	4a38      	ldr	r2, [pc, #224]	; (80049b0 <compensate_pressure+0x1fc>)
 80048d0:	4694      	mov	ip, r2
 80048d2:	4463      	add	r3, ip
 80048d4:	131b      	asrs	r3, r3, #12
 80048d6:	001a      	movs	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	4a35      	ldr	r2, [pc, #212]	; (80049b4 <compensate_pressure+0x200>)
 80048de:	4353      	muls	r3, r2
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < 0x80000000)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db09      	blt.n	80048fc <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7fb fc1b 	bl	800012c <__udivsi3>
 80048f6:	0003      	movs	r3, r0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e007      	b.n	800490c <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	0019      	movs	r1, r3
 8004900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004902:	f7fb fc13 	bl	800012c <__udivsi3>
 8004906:	0003      	movs	r3, r0
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2216      	movs	r2, #22
 8004910:	5e9b      	ldrsh	r3, [r3, r2]
 8004912:	0019      	movs	r1, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	08db      	lsrs	r3, r3, #3
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	08d2      	lsrs	r2, r2, #3
 800491c:	4353      	muls	r3, r2
 800491e:	0b5b      	lsrs	r3, r3, #13
 8004920:	434b      	muls	r3, r1
 8004922:	2b00      	cmp	r3, #0
 8004924:	da02      	bge.n	800492c <compensate_pressure+0x178>
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <compensate_pressure+0x1fc>)
 8004928:	4694      	mov	ip, r2
 800492a:	4463      	add	r3, ip
 800492c:	131b      	asrs	r3, r3, #12
 800492e:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	001a      	movs	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2114      	movs	r1, #20
 800493a:	5e5b      	ldrsh	r3, [r3, r1]
 800493c:	4353      	muls	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	da02      	bge.n	8004948 <compensate_pressure+0x194>
 8004942:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <compensate_pressure+0x1f0>)
 8004944:	4694      	mov	ip, r2
 8004946:	4463      	add	r3, ip
 8004948:	135b      	asrs	r3, r3, #13
 800494a:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	18d3      	adds	r3, r2, r3
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	2112      	movs	r1, #18
 8004956:	5e52      	ldrsh	r2, [r2, r1]
 8004958:	189b      	adds	r3, r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	da00      	bge.n	8004960 <compensate_pressure+0x1ac>
 800495e:	330f      	adds	r3, #15
 8004960:	111b      	asrs	r3, r3, #4
 8004962:	001a      	movs	r2, r3
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	18d3      	adds	r3, r2, r3
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < pressure_min)
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	429a      	cmp	r2, r3
 8004970:	d202      	bcs.n	8004978 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	e008      	b.n	800498a <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 8004978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	429a      	cmp	r2, r3
 800497e:	d904      	bls.n	800498a <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e001      	b.n	800498a <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return pressure;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	b00a      	add	sp, #40	; 0x28
 8004992:	bd80      	pop	{r7, pc}
 8004994:	00007530 	.word	0x00007530
 8004998:	0001adb0 	.word	0x0001adb0
 800499c:	ffff0600 	.word	0xffff0600
 80049a0:	000007ff 	.word	0x000007ff
 80049a4:	00001fff 	.word	0x00001fff
 80049a8:	0003ffff 	.word	0x0003ffff
 80049ac:	00007fff 	.word	0x00007fff
 80049b0:	00000fff 	.word	0x00000fff
 80049b4:	00000c35 	.word	0x00000c35

080049b8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 80049c2:	23c8      	movs	r3, #200	; 0xc8
 80049c4:	025b      	lsls	r3, r3, #9
 80049c6:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	4a53      	ldr	r2, [pc, #332]	; (8004b1c <compensate_humidity+0x164>)
 80049ce:	4694      	mov	ip, r2
 80049d0:	4463      	add	r3, ip
 80049d2:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	039b      	lsls	r3, r3, #14
 80049da:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	221e      	movs	r2, #30
 80049e0:	5e9b      	ldrsh	r3, [r3, r2]
 80049e2:	051b      	lsls	r3, r3, #20
 80049e4:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_H5) * var1;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2220      	movs	r2, #32
 80049ea:	5e9b      	ldrsh	r3, [r3, r2]
 80049ec:	001a      	movs	r2, r3
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4353      	muls	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad2      	subs	r2, r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	01d2      	lsls	r2, r2, #7
 8004a02:	4694      	mov	ip, r2
 8004a04:	4463      	add	r3, ip
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da02      	bge.n	8004a10 <compensate_humidity+0x58>
 8004a0a:	4a45      	ldr	r2, [pc, #276]	; (8004b20 <compensate_humidity+0x168>)
 8004a0c:	4694      	mov	ip, r2
 8004a0e:	4463      	add	r3, ip
 8004a10:	13db      	asrs	r3, r3, #15
 8004a12:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2222      	movs	r2, #34	; 0x22
 8004a18:	569b      	ldrsb	r3, [r3, r2]
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4353      	muls	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	da02      	bge.n	8004a2a <compensate_humidity+0x72>
 8004a24:	4a3f      	ldr	r2, [pc, #252]	; (8004b24 <compensate_humidity+0x16c>)
 8004a26:	4694      	mov	ip, r2
 8004a28:	4463      	add	r3, ip
 8004a2a:	129b      	asrs	r3, r3, #10
 8004a2c:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	7f1b      	ldrb	r3, [r3, #28]
 8004a32:	001a      	movs	r2, r3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4353      	muls	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	da02      	bge.n	8004a42 <compensate_humidity+0x8a>
 8004a3c:	4a3a      	ldr	r2, [pc, #232]	; (8004b28 <compensate_humidity+0x170>)
 8004a3e:	4694      	mov	ip, r2
 8004a40:	4463      	add	r3, ip
 8004a42:	12db      	asrs	r3, r3, #11
 8004a44:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	0212      	lsls	r2, r2, #8
 8004a4c:	4694      	mov	ip, r2
 8004a4e:	4463      	add	r3, ip
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4353      	muls	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da02      	bge.n	8004a5e <compensate_humidity+0xa6>
 8004a58:	4a32      	ldr	r2, [pc, #200]	; (8004b24 <compensate_humidity+0x16c>)
 8004a5a:	4694      	mov	ip, r2
 8004a5c:	4463      	add	r3, ip
 8004a5e:	129b      	asrs	r3, r3, #10
 8004a60:	2280      	movs	r2, #128	; 0x80
 8004a62:	0392      	lsls	r2, r2, #14
 8004a64:	4694      	mov	ip, r2
 8004a66:	4463      	add	r3, ip
 8004a68:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	221a      	movs	r2, #26
 8004a6e:	5e9b      	ldrsh	r3, [r3, r2]
 8004a70:	001a      	movs	r2, r3
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4353      	muls	r3, r2
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	0192      	lsls	r2, r2, #6
 8004a7a:	4694      	mov	ip, r2
 8004a7c:	4463      	add	r3, ip
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da02      	bge.n	8004a88 <compensate_humidity+0xd0>
 8004a82:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <compensate_humidity+0x174>)
 8004a84:	4694      	mov	ip, r2
 8004a86:	4463      	add	r3, ip
 8004a88:	139b      	asrs	r3, r3, #14
 8004a8a:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4353      	muls	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da02      	bge.n	8004aa0 <compensate_humidity+0xe8>
 8004a9a:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <compensate_humidity+0x168>)
 8004a9c:	4694      	mov	ip, r2
 8004a9e:	4463      	add	r3, ip
 8004aa0:	13db      	asrs	r3, r3, #15
 8004aa2:	001a      	movs	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da02      	bge.n	8004ab0 <compensate_humidity+0xf8>
 8004aaa:	491d      	ldr	r1, [pc, #116]	; (8004b20 <compensate_humidity+0x168>)
 8004aac:	468c      	mov	ip, r1
 8004aae:	4463      	add	r3, ip
 8004ab0:	13db      	asrs	r3, r3, #15
 8004ab2:	4353      	muls	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da00      	bge.n	8004aba <compensate_humidity+0x102>
 8004ab8:	337f      	adds	r3, #127	; 0x7f
 8004aba:	11db      	asrs	r3, r3, #7
 8004abc:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	7e1b      	ldrb	r3, [r3, #24]
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4353      	muls	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da00      	bge.n	8004ace <compensate_humidity+0x116>
 8004acc:	330f      	adds	r3, #15
 8004ace:	111b      	asrs	r3, r3, #4
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	189b      	adds	r3, r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	da00      	bge.n	8004ae2 <compensate_humidity+0x12a>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	22c8      	movs	r2, #200	; 0xc8
 8004ae8:	0552      	lsls	r2, r2, #21
 8004aea:	4293      	cmp	r3, r2
 8004aec:	dd01      	ble.n	8004af2 <compensate_humidity+0x13a>
 8004aee:	23c8      	movs	r3, #200	; 0xc8
 8004af0:	055b      	lsls	r3, r3, #21
 8004af2:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da02      	bge.n	8004b00 <compensate_humidity+0x148>
 8004afa:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <compensate_humidity+0x178>)
 8004afc:	4694      	mov	ip, r2
 8004afe:	4463      	add	r3, ip
 8004b00:	131b      	asrs	r3, r3, #12
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
    if (humidity > humidity_max)
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d901      	bls.n	8004b10 <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return humidity;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b00a      	add	sp, #40	; 0x28
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	fffed400 	.word	0xfffed400
 8004b20:	00007fff 	.word	0x00007fff
 8004b24:	000003ff 	.word	0x000003ff
 8004b28:	000007ff 	.word	0x000007ff
 8004b2c:	00003fff 	.word	0x00003fff
 8004b30:	00000fff 	.word	0x00000fff

08004b34 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b36:	b08b      	sub	sp, #44	; 0x2c
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004b3c:	2526      	movs	r5, #38	; 0x26
 8004b3e:	197b      	adds	r3, r7, r5
 8004b40:	2288      	movs	r2, #136	; 0x88
 8004b42:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8004b44:	260c      	movs	r6, #12
 8004b46:	19bb      	adds	r3, r7, r6
 8004b48:	0018      	movs	r0, r3
 8004b4a:	231a      	movs	r3, #26
 8004b4c:	001a      	movs	r2, r3
 8004b4e:	2100      	movs	r1, #0
 8004b50:	f004 fa5f 	bl	8009012 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004b54:	2327      	movs	r3, #39	; 0x27
 8004b56:	18fc      	adds	r4, r7, r3
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	19b9      	adds	r1, r7, r6
 8004b5c:	197b      	adds	r3, r7, r5
 8004b5e:	7818      	ldrb	r0, [r3, #0]
 8004b60:	0013      	movs	r3, r2
 8004b62:	221a      	movs	r2, #26
 8004b64:	f7ff f847 	bl	8003bf6 <bme280_get_regs>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004b6c:	2327      	movs	r3, #39	; 0x27
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b25b      	sxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d122      	bne.n	8004bbe <get_calib_data+0x8a>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	250c      	movs	r5, #12
 8004b7c:	197b      	adds	r3, r7, r5
 8004b7e:	0011      	movs	r1, r2
 8004b80:	0018      	movs	r0, r3
 8004b82:	f000 f85b 	bl	8004c3c <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8004b86:	2026      	movs	r0, #38	; 0x26
 8004b88:	183b      	adds	r3, r7, r0
 8004b8a:	22e1      	movs	r2, #225	; 0xe1
 8004b8c:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004b8e:	2627      	movs	r6, #39	; 0x27
 8004b90:	19bc      	adds	r4, r7, r6
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	1979      	adds	r1, r7, r5
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	7818      	ldrb	r0, [r3, #0]
 8004b9a:	0013      	movs	r3, r2
 8004b9c:	2207      	movs	r2, #7
 8004b9e:	f7ff f82a 	bl	8003bf6 <bme280_get_regs>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004ba6:	19bb      	adds	r3, r7, r6
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b25b      	sxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <get_calib_data+0x8a>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	0011      	movs	r1, r2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 f8ec 	bl	8004d96 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8004bbe:	2327      	movs	r3, #39	; 0x27
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	b25b      	sxtb	r3, r3
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b00b      	add	sp, #44	; 0x2c
 8004bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bce <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b086      	sub	sp, #24
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	001a      	movs	r2, r3
 8004bdc:	1cfb      	adds	r3, r7, #3
 8004bde:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8004be0:	2317      	movs	r3, #23
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e01d      	b.n	8004c26 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8004bea:	2017      	movs	r0, #23
 8004bec:	183b      	adds	r3, r7, r0
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	18d2      	adds	r2, r2, r3
 8004bf4:	183b      	adds	r3, r7, r0
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	18cb      	adds	r3, r1, r3
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	18d2      	adds	r2, r2, r3
 8004c0c:	183b      	adds	r3, r7, r0
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	0019      	movs	r1, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	185b      	adds	r3, r3, r1
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8004c1c:	183b      	adds	r3, r7, r0
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	183b      	adds	r3, r7, r0
 8004c22:	3201      	adds	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	2317      	movs	r3, #23
 8004c28:	18fa      	adds	r2, r7, r3
 8004c2a:	1cfb      	adds	r3, r7, #3
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d3da      	bcc.n	8004bea <interleave_reg_addr+0x1c>
    }
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b006      	add	sp, #24
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	3310      	adds	r3, #16
 8004c4a:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	b21a      	sxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b21b      	sxth	r3, r3
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3303      	adds	r3, #3
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	b21a      	sxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3302      	adds	r3, #2
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	b21b      	sxth	r3, r3
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b21a      	sxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3305      	adds	r3, #5
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	b21a      	sxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b21b      	sxth	r3, r3
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b21a      	sxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3307      	adds	r3, #7
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	b21a      	sxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3306      	adds	r3, #6
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	4313      	orrs	r3, r2
 8004cae:	b21b      	sxth	r3, r3
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3309      	adds	r3, #9
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	b21a      	sxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	b21b      	sxth	r3, r3
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	b21a      	sxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	330b      	adds	r3, #11
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	b21a      	sxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	330a      	adds	r3, #10
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	330d      	adds	r3, #13
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	b21a      	sxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b21b      	sxth	r3, r3
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b21a      	sxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	330f      	adds	r3, #15
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	b21a      	sxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	330e      	adds	r3, #14
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b21b      	sxth	r3, r3
 8004d16:	4313      	orrs	r3, r2
 8004d18:	b21a      	sxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3311      	adds	r3, #17
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	b21a      	sxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b21b      	sxth	r3, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b21a      	sxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3313      	adds	r3, #19
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	b21a      	sxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3312      	adds	r3, #18
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b21a      	sxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3315      	adds	r3, #21
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	b21a      	sxth	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b21b      	sxth	r3, r3
 8004d64:	4313      	orrs	r3, r2
 8004d66:	b21a      	sxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3317      	adds	r3, #23
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	b21a      	sxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3316      	adds	r3, #22
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b21b      	sxth	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7e5a      	ldrb	r2, [r3, #25]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	761a      	strb	r2, [r3, #24]
}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b004      	add	sp, #16
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004d96:	b590      	push	{r4, r7, lr}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	3310      	adds	r3, #16
 8004da4:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3301      	adds	r3, #1
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	b21a      	sxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	b21b      	sxth	r3, r3
 8004db6:	4313      	orrs	r3, r2
 8004db8:	b21a      	sxth	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	789a      	ldrb	r2, [r3, #2]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3303      	adds	r3, #3
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	2012      	movs	r0, #18
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	801a      	strh	r2, [r3, #0]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	b21a      	sxth	r2, r3
 8004de2:	2410      	movs	r4, #16
 8004de4:	193b      	adds	r3, r7, r4
 8004de6:	210f      	movs	r1, #15
 8004de8:	400a      	ands	r2, r1
 8004dea:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004dec:	183a      	adds	r2, r7, r0
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	b21a      	sxth	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3305      	adds	r3, #5
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	210e      	movs	r1, #14
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	801a      	strh	r2, [r3, #0]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	200c      	movs	r0, #12
 8004e1c:	183b      	adds	r3, r7, r0
 8004e1e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004e20:	187a      	adds	r2, r7, r1
 8004e22:	183b      	adds	r3, r7, r0
 8004e24:	8812      	ldrh	r2, [r2, #0]
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	b21a      	sxth	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3306      	adds	r3, #6
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b259      	sxtb	r1, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2222      	movs	r2, #34	; 0x22
 8004e3c:	5499      	strb	r1, [r3, r2]
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b007      	add	sp, #28
 8004e44:	bd90      	pop	{r4, r7, pc}

08004e46 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	0002      	movs	r2, r0
 8004e4e:	1dfb      	adds	r3, r7, #7
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	1dbb      	adds	r3, r7, #6
 8004e54:	1c0a      	adds	r2, r1, #0
 8004e56:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 8004e58:	230f      	movs	r3, #15
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8004e60:	1dfb      	adds	r3, r7, #7
 8004e62:	1dba      	adds	r2, r7, #6
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <are_settings_changed+0x34>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	2201      	movs	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	e003      	b.n	8004e82 <are_settings_changed+0x3c>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8004e7a:	230f      	movs	r3, #15
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8004e82:	230f      	movs	r3, #15
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	781b      	ldrb	r3, [r3, #0]
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b004      	add	sp, #16
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <null_ptr_check+0x26>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <null_ptr_check+0x26>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <null_ptr_check+0x26>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8004eb6:	230f      	movs	r3, #15
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e003      	b.n	8004ec8 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004ec8:	230f      	movs	r3, #15
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b25b      	sxtb	r3, r3
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b004      	add	sp, #16
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ede:	1dfb      	adds	r3, r7, #7
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_Init+0x3c>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_Init+0x3c>)
 8004eea:	2140      	movs	r1, #64	; 0x40
 8004eec:	430a      	orrs	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f000 f811 	bl	8004f18 <HAL_InitTick>
 8004ef6:	1e03      	subs	r3, r0, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	2201      	movs	r2, #1
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e001      	b.n	8004f06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f02:	f7fe f8a9 	bl	8003058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f06:	1dfb      	adds	r3, r7, #7
 8004f08:	781b      	ldrb	r3, [r3, #0]
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	40022000 	.word	0x40022000

08004f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f20:	230f      	movs	r3, #15
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_InitTick+0x50>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	23fa      	movs	r3, #250	; 0xfa
 8004f2e:	0099      	lsls	r1, r3, #2
 8004f30:	0010      	movs	r0, r2
 8004f32:	f7fb f8fb 	bl	800012c <__udivsi3>
 8004f36:	0003      	movs	r3, r0
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f000 f918 	bl	800516e <HAL_SYSTICK_Config>
 8004f3e:	1e03      	subs	r3, r0, #0
 8004f40:	d004      	beq.n	8004f4c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8004f42:	230f      	movs	r3, #15
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e006      	b.n	8004f5a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	2301      	movs	r3, #1
 8004f50:	425b      	negs	r3, r3
 8004f52:	2200      	movs	r2, #0
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 f8e5 	bl	8005124 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	781b      	ldrb	r3, [r3, #0]
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b004      	add	sp, #16
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000008 	.word	0x20000008

08004f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  uwTick++;
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <HAL_IncTick+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <HAL_IncTick+0x14>)
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200003c4 	.word	0x200003c4

08004f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  return uwTick;
 8004f88:	4b02      	ldr	r3, [pc, #8]	; (8004f94 <HAL_GetTick+0x10>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	200003c4 	.word	0x200003c4

08004f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fa0:	f7ff fff0 	bl	8004f84 <HAL_GetTick>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	d002      	beq.n	8004fb8 <HAL_Delay+0x20>
  {
    wait++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	f7ff ffe3 	bl	8004f84 <HAL_GetTick>
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d8f7      	bhi.n	8004fba <HAL_Delay+0x22>
  {
  }
}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b004      	add	sp, #16
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	0002      	movs	r2, r0
 8004fdc:	1dfb      	adds	r3, r7, #7
 8004fde:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004fe0:	1dfb      	adds	r3, r7, #7
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	001a      	movs	r2, r3
 8004fe6:	231f      	movs	r3, #31
 8004fe8:	401a      	ands	r2, r3
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <NVIC_EnableIRQ+0x28>)
 8004fec:	2101      	movs	r1, #1
 8004fee:	4091      	lsls	r1, r2
 8004ff0:	000a      	movs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	e000e100 	.word	0xe000e100

08005000 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	0002      	movs	r2, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	1dfb      	adds	r3, r7, #7
 800500c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800500e:	1dfb      	adds	r3, r7, #7
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b7f      	cmp	r3, #127	; 0x7f
 8005014:	d932      	bls.n	800507c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005016:	4a2f      	ldr	r2, [pc, #188]	; (80050d4 <NVIC_SetPriority+0xd4>)
 8005018:	1dfb      	adds	r3, r7, #7
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	0019      	movs	r1, r3
 800501e:	230f      	movs	r3, #15
 8005020:	400b      	ands	r3, r1
 8005022:	3b08      	subs	r3, #8
 8005024:	089b      	lsrs	r3, r3, #2
 8005026:	3306      	adds	r3, #6
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	18d3      	adds	r3, r2, r3
 800502c:	3304      	adds	r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1dfa      	adds	r2, r7, #7
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	0011      	movs	r1, r2
 8005036:	2203      	movs	r2, #3
 8005038:	400a      	ands	r2, r1
 800503a:	00d2      	lsls	r2, r2, #3
 800503c:	21ff      	movs	r1, #255	; 0xff
 800503e:	4091      	lsls	r1, r2
 8005040:	000a      	movs	r2, r1
 8005042:	43d2      	mvns	r2, r2
 8005044:	401a      	ands	r2, r3
 8005046:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	019b      	lsls	r3, r3, #6
 800504c:	22ff      	movs	r2, #255	; 0xff
 800504e:	401a      	ands	r2, r3
 8005050:	1dfb      	adds	r3, r7, #7
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	0018      	movs	r0, r3
 8005056:	2303      	movs	r3, #3
 8005058:	4003      	ands	r3, r0
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800505e:	481d      	ldr	r0, [pc, #116]	; (80050d4 <NVIC_SetPriority+0xd4>)
 8005060:	1dfb      	adds	r3, r7, #7
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	001c      	movs	r4, r3
 8005066:	230f      	movs	r3, #15
 8005068:	4023      	ands	r3, r4
 800506a:	3b08      	subs	r3, #8
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	430a      	orrs	r2, r1
 8005070:	3306      	adds	r3, #6
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	18c3      	adds	r3, r0, r3
 8005076:	3304      	adds	r3, #4
 8005078:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800507a:	e027      	b.n	80050cc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <NVIC_SetPriority+0xd8>)
 800507e:	1dfb      	adds	r3, r7, #7
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b25b      	sxtb	r3, r3
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	33c0      	adds	r3, #192	; 0xc0
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	589b      	ldr	r3, [r3, r2]
 800508c:	1dfa      	adds	r2, r7, #7
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	0011      	movs	r1, r2
 8005092:	2203      	movs	r2, #3
 8005094:	400a      	ands	r2, r1
 8005096:	00d2      	lsls	r2, r2, #3
 8005098:	21ff      	movs	r1, #255	; 0xff
 800509a:	4091      	lsls	r1, r2
 800509c:	000a      	movs	r2, r1
 800509e:	43d2      	mvns	r2, r2
 80050a0:	401a      	ands	r2, r3
 80050a2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	22ff      	movs	r2, #255	; 0xff
 80050aa:	401a      	ands	r2, r3
 80050ac:	1dfb      	adds	r3, r7, #7
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	0018      	movs	r0, r3
 80050b2:	2303      	movs	r3, #3
 80050b4:	4003      	ands	r3, r0
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050ba:	4807      	ldr	r0, [pc, #28]	; (80050d8 <NVIC_SetPriority+0xd8>)
 80050bc:	1dfb      	adds	r3, r7, #7
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b25b      	sxtb	r3, r3
 80050c2:	089b      	lsrs	r3, r3, #2
 80050c4:	430a      	orrs	r2, r1
 80050c6:	33c0      	adds	r3, #192	; 0xc0
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	501a      	str	r2, [r3, r0]
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b003      	add	sp, #12
 80050d2:	bd90      	pop	{r4, r7, pc}
 80050d4:	e000ed00 	.word	0xe000ed00
 80050d8:	e000e100 	.word	0xe000e100

080050dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	4a0c      	ldr	r2, [pc, #48]	; (800511c <SysTick_Config+0x40>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ee:	2301      	movs	r3, #1
 80050f0:	e010      	b.n	8005114 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <SysTick_Config+0x44>)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	3a01      	subs	r2, #1
 80050f8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050fa:	2301      	movs	r3, #1
 80050fc:	425b      	negs	r3, r3
 80050fe:	2103      	movs	r1, #3
 8005100:	0018      	movs	r0, r3
 8005102:	f7ff ff7d 	bl	8005000 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <SysTick_Config+0x44>)
 8005108:	2200      	movs	r2, #0
 800510a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <SysTick_Config+0x44>)
 800510e:	2207      	movs	r2, #7
 8005110:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}
 800511c:	00ffffff 	.word	0x00ffffff
 8005120:	e000e010 	.word	0xe000e010

08005124 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	210f      	movs	r1, #15
 8005130:	187b      	adds	r3, r7, r1
 8005132:	1c02      	adds	r2, r0, #0
 8005134:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	187b      	adds	r3, r7, r1
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b25b      	sxtb	r3, r3
 800513e:	0011      	movs	r1, r2
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff ff5d 	bl	8005000 <NVIC_SetPriority>
}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b004      	add	sp, #16
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	0002      	movs	r2, r0
 8005156:	1dfb      	adds	r3, r7, #7
 8005158:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800515a:	1dfb      	adds	r3, r7, #7
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b25b      	sxtb	r3, r3
 8005160:	0018      	movs	r0, r3
 8005162:	f7ff ff37 	bl	8004fd4 <NVIC_EnableIRQ>
}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f7ff ffaf 	bl	80050dc <SysTick_Config>
 800517e:	0003      	movs	r3, r0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800519e:	e155      	b.n	800544c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2101      	movs	r1, #1
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4091      	lsls	r1, r2
 80051aa:	000a      	movs	r2, r1
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d100      	bne.n	80051b8 <HAL_GPIO_Init+0x30>
 80051b6:	e146      	b.n	8005446 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d003      	beq.n	80051c8 <HAL_GPIO_Init+0x40>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b12      	cmp	r3, #18
 80051c6:	d123      	bne.n	8005210 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	08da      	lsrs	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3208      	adds	r2, #8
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	58d3      	ldr	r3, [r2, r3]
 80051d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2207      	movs	r2, #7
 80051da:	4013      	ands	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	220f      	movs	r2, #15
 80051e0:	409a      	lsls	r2, r3
 80051e2:	0013      	movs	r3, r2
 80051e4:	43da      	mvns	r2, r3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4013      	ands	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2107      	movs	r1, #7
 80051f4:	400b      	ands	r3, r1
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	409a      	lsls	r2, r3
 80051fa:	0013      	movs	r3, r2
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	08da      	lsrs	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3208      	adds	r2, #8
 800520a:	0092      	lsls	r2, r2, #2
 800520c:	6939      	ldr	r1, [r7, #16]
 800520e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d00b      	beq.n	8005230 <HAL_GPIO_Init+0xa8>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d007      	beq.n	8005230 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005224:	2b11      	cmp	r3, #17
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b12      	cmp	r3, #18
 800522e:	d130      	bne.n	8005292 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	2203      	movs	r2, #3
 800523c:	409a      	lsls	r2, r3
 800523e:	0013      	movs	r3, r2
 8005240:	43da      	mvns	r2, r3
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	409a      	lsls	r2, r3
 8005252:	0013      	movs	r3, r2
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005266:	2201      	movs	r2, #1
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	409a      	lsls	r2, r3
 800526c:	0013      	movs	r3, r2
 800526e:	43da      	mvns	r2, r3
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4013      	ands	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	2201      	movs	r2, #1
 800527e:	401a      	ands	r2, r3
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	409a      	lsls	r2, r3
 8005284:	0013      	movs	r3, r2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	2203      	movs	r2, #3
 800529e:	409a      	lsls	r2, r3
 80052a0:	0013      	movs	r3, r2
 80052a2:	43da      	mvns	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	401a      	ands	r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	409a      	lsls	r2, r3
 80052b8:	0013      	movs	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	2203      	movs	r2, #3
 80052d2:	409a      	lsls	r2, r3
 80052d4:	0013      	movs	r3, r2
 80052d6:	43da      	mvns	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	409a      	lsls	r2, r3
 80052e8:	0013      	movs	r3, r2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	055b      	lsls	r3, r3, #21
 80052fe:	4013      	ands	r3, r2
 8005300:	d100      	bne.n	8005304 <HAL_GPIO_Init+0x17c>
 8005302:	e0a0      	b.n	8005446 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005304:	4b57      	ldr	r3, [pc, #348]	; (8005464 <HAL_GPIO_Init+0x2dc>)
 8005306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005308:	4b56      	ldr	r3, [pc, #344]	; (8005464 <HAL_GPIO_Init+0x2dc>)
 800530a:	2101      	movs	r1, #1
 800530c:	430a      	orrs	r2, r1
 800530e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8005310:	4a55      	ldr	r2, [pc, #340]	; (8005468 <HAL_GPIO_Init+0x2e0>)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	089b      	lsrs	r3, r3, #2
 8005316:	3302      	adds	r3, #2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	589b      	ldr	r3, [r3, r2]
 800531c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2203      	movs	r2, #3
 8005322:	4013      	ands	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	220f      	movs	r2, #15
 8005328:	409a      	lsls	r2, r3
 800532a:	0013      	movs	r3, r2
 800532c:	43da      	mvns	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4013      	ands	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	23a0      	movs	r3, #160	; 0xa0
 8005338:	05db      	lsls	r3, r3, #23
 800533a:	429a      	cmp	r2, r3
 800533c:	d01f      	beq.n	800537e <HAL_GPIO_Init+0x1f6>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4a      	ldr	r2, [pc, #296]	; (800546c <HAL_GPIO_Init+0x2e4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d019      	beq.n	800537a <HAL_GPIO_Init+0x1f2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a49      	ldr	r2, [pc, #292]	; (8005470 <HAL_GPIO_Init+0x2e8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_GPIO_Init+0x1ee>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a48      	ldr	r2, [pc, #288]	; (8005474 <HAL_GPIO_Init+0x2ec>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00d      	beq.n	8005372 <HAL_GPIO_Init+0x1ea>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a47      	ldr	r2, [pc, #284]	; (8005478 <HAL_GPIO_Init+0x2f0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <HAL_GPIO_Init+0x1e6>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a46      	ldr	r2, [pc, #280]	; (800547c <HAL_GPIO_Init+0x2f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_GPIO_Init+0x1e2>
 8005366:	2305      	movs	r3, #5
 8005368:	e00a      	b.n	8005380 <HAL_GPIO_Init+0x1f8>
 800536a:	2306      	movs	r3, #6
 800536c:	e008      	b.n	8005380 <HAL_GPIO_Init+0x1f8>
 800536e:	2304      	movs	r3, #4
 8005370:	e006      	b.n	8005380 <HAL_GPIO_Init+0x1f8>
 8005372:	2303      	movs	r3, #3
 8005374:	e004      	b.n	8005380 <HAL_GPIO_Init+0x1f8>
 8005376:	2302      	movs	r3, #2
 8005378:	e002      	b.n	8005380 <HAL_GPIO_Init+0x1f8>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <HAL_GPIO_Init+0x1f8>
 800537e:	2300      	movs	r3, #0
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	2103      	movs	r1, #3
 8005384:	400a      	ands	r2, r1
 8005386:	0092      	lsls	r2, r2, #2
 8005388:	4093      	lsls	r3, r2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005390:	4935      	ldr	r1, [pc, #212]	; (8005468 <HAL_GPIO_Init+0x2e0>)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	3302      	adds	r3, #2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800539e:	4b38      	ldr	r3, [pc, #224]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	43da      	mvns	r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4013      	ands	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	025b      	lsls	r3, r3, #9
 80053b6:	4013      	ands	r3, r2
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80053c2:	4b2f      	ldr	r3, [pc, #188]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80053c8:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	43da      	mvns	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4013      	ands	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	4013      	ands	r3, r2
 80053e2:	d003      	beq.n	80053ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053ec:	4b24      	ldr	r3, [pc, #144]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053f2:	4b23      	ldr	r3, [pc, #140]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	43da      	mvns	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	035b      	lsls	r3, r3, #13
 800540a:	4013      	ands	r3, r2
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800541c:	4b18      	ldr	r3, [pc, #96]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	43da      	mvns	r2, r3
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4013      	ands	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	039b      	lsls	r3, r3, #14
 8005434:	4013      	ands	r3, r2
 8005436:	d003      	beq.n	8005440 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <HAL_GPIO_Init+0x2f8>)
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	3301      	adds	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	40da      	lsrs	r2, r3
 8005454:	1e13      	subs	r3, r2, #0
 8005456:	d000      	beq.n	800545a <HAL_GPIO_Init+0x2d2>
 8005458:	e6a2      	b.n	80051a0 <HAL_GPIO_Init+0x18>
  }
}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b006      	add	sp, #24
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	40021000 	.word	0x40021000
 8005468:	40010000 	.word	0x40010000
 800546c:	50000400 	.word	0x50000400
 8005470:	50000800 	.word	0x50000800
 8005474:	50000c00 	.word	0x50000c00
 8005478:	50001000 	.word	0x50001000
 800547c:	50001c00 	.word	0x50001c00
 8005480:	40010400 	.word	0x40010400

08005484 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800549a:	e0bc      	b.n	8005616 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800549c:	2201      	movs	r2, #1
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	409a      	lsls	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	4013      	ands	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d100      	bne.n	80054b0 <HAL_GPIO_DeInit+0x2c>
 80054ae:	e0af      	b.n	8005610 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2103      	movs	r1, #3
 80054ba:	4099      	lsls	r1, r3
 80054bc:	000b      	movs	r3, r1
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	08da      	lsrs	r2, r3, #3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3208      	adds	r2, #8
 80054cc:	0092      	lsls	r2, r2, #2
 80054ce:	58d3      	ldr	r3, [r2, r3]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	2107      	movs	r1, #7
 80054d4:	400a      	ands	r2, r1
 80054d6:	0092      	lsls	r2, r2, #2
 80054d8:	210f      	movs	r1, #15
 80054da:	4091      	lsls	r1, r2
 80054dc:	000a      	movs	r2, r1
 80054de:	43d1      	mvns	r1, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	08d2      	lsrs	r2, r2, #3
 80054e4:	4019      	ands	r1, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3208      	adds	r2, #8
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	0052      	lsls	r2, r2, #1
 80054f6:	2103      	movs	r1, #3
 80054f8:	4091      	lsls	r1, r2
 80054fa:	000a      	movs	r2, r1
 80054fc:	43d2      	mvns	r2, r2
 80054fe:	401a      	ands	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2101      	movs	r1, #1
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4091      	lsls	r1, r2
 800550e:	000a      	movs	r2, r1
 8005510:	43d2      	mvns	r2, r2
 8005512:	401a      	ands	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	0052      	lsls	r2, r2, #1
 8005520:	2103      	movs	r1, #3
 8005522:	4091      	lsls	r1, r2
 8005524:	000a      	movs	r2, r1
 8005526:	43d2      	mvns	r2, r2
 8005528:	401a      	ands	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 800552e:	4a3f      	ldr	r2, [pc, #252]	; (800562c <HAL_GPIO_DeInit+0x1a8>)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	089b      	lsrs	r3, r3, #2
 8005534:	3302      	adds	r3, #2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	589b      	ldr	r3, [r3, r2]
 800553a:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2203      	movs	r2, #3
 8005540:	4013      	ands	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	220f      	movs	r2, #15
 8005546:	409a      	lsls	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4013      	ands	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	23a0      	movs	r3, #160	; 0xa0
 8005552:	05db      	lsls	r3, r3, #23
 8005554:	429a      	cmp	r2, r3
 8005556:	d01f      	beq.n	8005598 <HAL_GPIO_DeInit+0x114>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a35      	ldr	r2, [pc, #212]	; (8005630 <HAL_GPIO_DeInit+0x1ac>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d019      	beq.n	8005594 <HAL_GPIO_DeInit+0x110>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a34      	ldr	r2, [pc, #208]	; (8005634 <HAL_GPIO_DeInit+0x1b0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_GPIO_DeInit+0x10c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a33      	ldr	r2, [pc, #204]	; (8005638 <HAL_GPIO_DeInit+0x1b4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00d      	beq.n	800558c <HAL_GPIO_DeInit+0x108>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a32      	ldr	r2, [pc, #200]	; (800563c <HAL_GPIO_DeInit+0x1b8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <HAL_GPIO_DeInit+0x104>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a31      	ldr	r2, [pc, #196]	; (8005640 <HAL_GPIO_DeInit+0x1bc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <HAL_GPIO_DeInit+0x100>
 8005580:	2305      	movs	r3, #5
 8005582:	e00a      	b.n	800559a <HAL_GPIO_DeInit+0x116>
 8005584:	2306      	movs	r3, #6
 8005586:	e008      	b.n	800559a <HAL_GPIO_DeInit+0x116>
 8005588:	2304      	movs	r3, #4
 800558a:	e006      	b.n	800559a <HAL_GPIO_DeInit+0x116>
 800558c:	2303      	movs	r3, #3
 800558e:	e004      	b.n	800559a <HAL_GPIO_DeInit+0x116>
 8005590:	2302      	movs	r3, #2
 8005592:	e002      	b.n	800559a <HAL_GPIO_DeInit+0x116>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <HAL_GPIO_DeInit+0x116>
 8005598:	2300      	movs	r3, #0
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	2103      	movs	r1, #3
 800559e:	400a      	ands	r2, r1
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	4093      	lsls	r3, r2
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d132      	bne.n	8005610 <HAL_GPIO_DeInit+0x18c>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2203      	movs	r2, #3
 80055ae:	4013      	ands	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	220f      	movs	r2, #15
 80055b4:	409a      	lsls	r2, r3
 80055b6:	0013      	movs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80055ba:	4a1c      	ldr	r2, [pc, #112]	; (800562c <HAL_GPIO_DeInit+0x1a8>)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	3302      	adds	r3, #2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	589a      	ldr	r2, [r3, r2]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	43d9      	mvns	r1, r3
 80055ca:	4818      	ldr	r0, [pc, #96]	; (800562c <HAL_GPIO_DeInit+0x1a8>)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	089b      	lsrs	r3, r3, #2
 80055d0:	400a      	ands	r2, r1
 80055d2:	3302      	adds	r3, #2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80055d8:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	43d9      	mvns	r1, r3
 80055e0:	4b18      	ldr	r3, [pc, #96]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 80055e2:	400a      	ands	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	43d9      	mvns	r1, r3
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	43d9      	mvns	r1, r3
 80055fc:	4b11      	ldr	r3, [pc, #68]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 80055fe:	400a      	ands	r2, r1
 8005600:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43d9      	mvns	r1, r3
 800560a:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <HAL_GPIO_DeInit+0x1c0>)
 800560c:	400a      	ands	r2, r1
 800560e:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3301      	adds	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	40da      	lsrs	r2, r3
 800561c:	1e13      	subs	r3, r2, #0
 800561e:	d000      	beq.n	8005622 <HAL_GPIO_DeInit+0x19e>
 8005620:	e73c      	b.n	800549c <HAL_GPIO_DeInit+0x18>
  }
}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	46bd      	mov	sp, r7
 8005626:	b006      	add	sp, #24
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	40010000 	.word	0x40010000
 8005630:	50000400 	.word	0x50000400
 8005634:	50000800 	.word	0x50000800
 8005638:	50000c00 	.word	0x50000c00
 800563c:	50001000 	.word	0x50001000
 8005640:	50001c00 	.word	0x50001c00
 8005644:	40010400 	.word	0x40010400

08005648 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	0008      	movs	r0, r1
 8005652:	0011      	movs	r1, r2
 8005654:	1cbb      	adds	r3, r7, #2
 8005656:	1c02      	adds	r2, r0, #0
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	1c7b      	adds	r3, r7, #1
 800565c:	1c0a      	adds	r2, r1, #0
 800565e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005660:	1c7b      	adds	r3, r7, #1
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005668:	1cbb      	adds	r3, r7, #2
 800566a:	881a      	ldrh	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005670:	e003      	b.n	800567a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005672:	1cbb      	adds	r3, r7, #2
 8005674:	881a      	ldrh	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	629a      	str	r2, [r3, #40]	; 0x28
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b002      	add	sp, #8
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	000a      	movs	r2, r1
 800568c:	1cbb      	adds	r3, r7, #2
 800568e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	1cbb      	adds	r3, r7, #2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	405a      	eors	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	615a      	str	r2, [r3, #20]
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b002      	add	sp, #8
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e082      	b.n	80057c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2241      	movs	r2, #65	; 0x41
 80056be:	5c9b      	ldrb	r3, [r3, r2]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2240      	movs	r2, #64	; 0x40
 80056ca:	2100      	movs	r1, #0
 80056cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f7fd fce3 	bl	800309c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2241      	movs	r2, #65	; 0x41
 80056da:	2124      	movs	r1, #36	; 0x24
 80056dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2101      	movs	r1, #1
 80056ea:	438a      	bics	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4934      	ldr	r1, [pc, #208]	; (80057c8 <HAL_I2C_Init+0x120>)
 80056f8:	400a      	ands	r2, r1
 80056fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4931      	ldr	r1, [pc, #196]	; (80057cc <HAL_I2C_Init+0x124>)
 8005708:	400a      	ands	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d108      	bne.n	8005726 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2180      	movs	r1, #128	; 0x80
 800571e:	0209      	lsls	r1, r1, #8
 8005720:	430a      	orrs	r2, r1
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	e007      	b.n	8005736 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2184      	movs	r1, #132	; 0x84
 8005730:	0209      	lsls	r1, r1, #8
 8005732:	430a      	orrs	r2, r1
 8005734:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d104      	bne.n	8005748 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	0112      	lsls	r2, r2, #4
 8005746:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	491f      	ldr	r1, [pc, #124]	; (80057d0 <HAL_I2C_Init+0x128>)
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	491a      	ldr	r1, [pc, #104]	; (80057cc <HAL_I2C_Init+0x124>)
 8005764:	400a      	ands	r2, r1
 8005766:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	431a      	orrs	r2, r3
 8005772:	0011      	movs	r1, r2
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	021a      	lsls	r2, r3, #8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69d9      	ldr	r1, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1a      	ldr	r2, [r3, #32]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2101      	movs	r1, #1
 800579e:	430a      	orrs	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2241      	movs	r2, #65	; 0x41
 80057ac:	2120      	movs	r1, #32
 80057ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2242      	movs	r2, #66	; 0x42
 80057ba:	2100      	movs	r1, #0
 80057bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b002      	add	sp, #8
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	f0ffffff 	.word	0xf0ffffff
 80057cc:	ffff7fff 	.word	0xffff7fff
 80057d0:	02008000 	.word	0x02008000

080057d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e022      	b.n	800582c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2241      	movs	r2, #65	; 0x41
 80057ea:	2124      	movs	r1, #36	; 0x24
 80057ec:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2101      	movs	r1, #1
 80057fa:	438a      	bics	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0018      	movs	r0, r3
 8005802:	f7fd fc8f 	bl	8003124 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2241      	movs	r2, #65	; 0x41
 8005810:	2100      	movs	r1, #0
 8005812:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2242      	movs	r2, #66	; 0x42
 800581e:	2100      	movs	r1, #0
 8005820:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2240      	movs	r2, #64	; 0x40
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005834:	b590      	push	{r4, r7, lr}
 8005836:	b089      	sub	sp, #36	; 0x24
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	000c      	movs	r4, r1
 800583e:	0010      	movs	r0, r2
 8005840:	0019      	movs	r1, r3
 8005842:	230a      	movs	r3, #10
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	1c22      	adds	r2, r4, #0
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	2308      	movs	r3, #8
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	1c02      	adds	r2, r0, #0
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	1dbb      	adds	r3, r7, #6
 8005854:	1c0a      	adds	r2, r1, #0
 8005856:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2241      	movs	r2, #65	; 0x41
 800585c:	5c9b      	ldrb	r3, [r3, r2]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b20      	cmp	r3, #32
 8005862:	d000      	beq.n	8005866 <HAL_I2C_Mem_Write+0x32>
 8005864:	e10c      	b.n	8005a80 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <HAL_I2C_Mem_Write+0x42>
 800586c:	232c      	movs	r3, #44	; 0x2c
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2280      	movs	r2, #128	; 0x80
 800587a:	0092      	lsls	r2, r2, #2
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0ff      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	5c9b      	ldrb	r3, [r3, r2]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_I2C_Mem_Write+0x5c>
 800588c:	2302      	movs	r3, #2
 800588e:	e0f8      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2240      	movs	r2, #64	; 0x40
 8005894:	2101      	movs	r1, #1
 8005896:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005898:	f7ff fb74 	bl	8004f84 <HAL_GetTick>
 800589c:	0003      	movs	r3, r0
 800589e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	0219      	lsls	r1, r3, #8
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	2319      	movs	r3, #25
 80058ac:	2201      	movs	r2, #1
 80058ae:	f000 fb0b 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	1e03      	subs	r3, r0, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e0e3      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2241      	movs	r2, #65	; 0x41
 80058be:	2121      	movs	r1, #33	; 0x21
 80058c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2242      	movs	r2, #66	; 0x42
 80058c6:	2140      	movs	r1, #64	; 0x40
 80058c8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	222c      	movs	r2, #44	; 0x2c
 80058da:	18ba      	adds	r2, r7, r2
 80058dc:	8812      	ldrh	r2, [r2, #0]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058e6:	1dbb      	adds	r3, r7, #6
 80058e8:	881c      	ldrh	r4, [r3, #0]
 80058ea:	2308      	movs	r3, #8
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	230a      	movs	r3, #10
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	8819      	ldrh	r1, [r3, #0]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	0023      	movs	r3, r4
 8005902:	f000 f9f9 	bl	8005cf8 <I2C_RequestMemoryWrite>
 8005906:	1e03      	subs	r3, r0, #0
 8005908:	d005      	beq.n	8005916 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	2100      	movs	r1, #0
 8005910:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0b5      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	2bff      	cmp	r3, #255	; 0xff
 800591e:	d911      	bls.n	8005944 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	22ff      	movs	r2, #255	; 0xff
 8005924:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592a:	b2da      	uxtb	r2, r3
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	045c      	lsls	r4, r3, #17
 8005930:	230a      	movs	r3, #10
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	8819      	ldrh	r1, [r3, #0]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	0023      	movs	r3, r4
 800593e:	f000 fbe3 	bl	8006108 <I2C_TransferConfig>
 8005942:	e012      	b.n	800596a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005952:	b2da      	uxtb	r2, r3
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	049c      	lsls	r4, r3, #18
 8005958:	230a      	movs	r3, #10
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	8819      	ldrh	r1, [r3, #0]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	2300      	movs	r3, #0
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	0023      	movs	r3, r4
 8005966:	f000 fbcf 	bl	8006108 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	0018      	movs	r0, r3
 8005972:	f000 fae8 	bl	8005f46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005976:	1e03      	subs	r3, r0, #0
 8005978:	d001      	beq.n	800597e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e081      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d03a      	beq.n	8005a2e <HAL_I2C_Mem_Write+0x1fa>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d136      	bne.n	8005a2e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	0013      	movs	r3, r2
 80059ca:	2200      	movs	r2, #0
 80059cc:	2180      	movs	r1, #128	; 0x80
 80059ce:	f000 fa7b 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 80059d2:	1e03      	subs	r3, r0, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e053      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2bff      	cmp	r3, #255	; 0xff
 80059e2:	d911      	bls.n	8005a08 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	22ff      	movs	r2, #255	; 0xff
 80059e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	045c      	lsls	r4, r3, #17
 80059f4:	230a      	movs	r3, #10
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	8819      	ldrh	r1, [r3, #0]
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	0023      	movs	r3, r4
 8005a02:	f000 fb81 	bl	8006108 <I2C_TransferConfig>
 8005a06:	e012      	b.n	8005a2e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	049c      	lsls	r4, r3, #18
 8005a1c:	230a      	movs	r3, #10
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	8819      	ldrh	r1, [r3, #0]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	2300      	movs	r3, #0
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	0023      	movs	r3, r4
 8005a2a:	f000 fb6d 	bl	8006108 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d198      	bne.n	800596a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 fac0 	bl	8005fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a44:	1e03      	subs	r3, r0, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e01a      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2220      	movs	r2, #32
 8005a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	490b      	ldr	r1, [pc, #44]	; (8005a8c <HAL_I2C_Mem_Write+0x258>)
 8005a60:	400a      	ands	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2241      	movs	r2, #65	; 0x41
 8005a68:	2120      	movs	r1, #32
 8005a6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2242      	movs	r2, #66	; 0x42
 8005a70:	2100      	movs	r1, #0
 8005a72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2240      	movs	r2, #64	; 0x40
 8005a78:	2100      	movs	r1, #0
 8005a7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e000      	b.n	8005a82 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	0018      	movs	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b007      	add	sp, #28
 8005a88:	bd90      	pop	{r4, r7, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	fe00e800 	.word	0xfe00e800

08005a90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b089      	sub	sp, #36	; 0x24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	000c      	movs	r4, r1
 8005a9a:	0010      	movs	r0, r2
 8005a9c:	0019      	movs	r1, r3
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	1c22      	adds	r2, r4, #0
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	1c02      	adds	r2, r0, #0
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	1dbb      	adds	r3, r7, #6
 8005ab0:	1c0a      	adds	r2, r1, #0
 8005ab2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2241      	movs	r2, #65	; 0x41
 8005ab8:	5c9b      	ldrb	r3, [r3, r2]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d000      	beq.n	8005ac2 <HAL_I2C_Mem_Read+0x32>
 8005ac0:	e110      	b.n	8005ce4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <HAL_I2C_Mem_Read+0x42>
 8005ac8:	232c      	movs	r3, #44	; 0x2c
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d105      	bne.n	8005ade <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	0092      	lsls	r2, r2, #2
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e103      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2240      	movs	r2, #64	; 0x40
 8005ae2:	5c9b      	ldrb	r3, [r3, r2]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_I2C_Mem_Read+0x5c>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e0fc      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	2101      	movs	r1, #1
 8005af2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005af4:	f7ff fa46 	bl	8004f84 <HAL_GetTick>
 8005af8:	0003      	movs	r3, r0
 8005afa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	0219      	lsls	r1, r3, #8
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	2319      	movs	r3, #25
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f000 f9dd 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005b0e:	1e03      	subs	r3, r0, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0e7      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2241      	movs	r2, #65	; 0x41
 8005b1a:	2122      	movs	r1, #34	; 0x22
 8005b1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2242      	movs	r2, #66	; 0x42
 8005b22:	2140      	movs	r1, #64	; 0x40
 8005b24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	222c      	movs	r2, #44	; 0x2c
 8005b36:	18ba      	adds	r2, r7, r2
 8005b38:	8812      	ldrh	r2, [r2, #0]
 8005b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b42:	1dbb      	adds	r3, r7, #6
 8005b44:	881c      	ldrh	r4, [r3, #0]
 8005b46:	2308      	movs	r3, #8
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	881a      	ldrh	r2, [r3, #0]
 8005b4c:	230a      	movs	r3, #10
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	8819      	ldrh	r1, [r3, #0]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	0023      	movs	r3, r4
 8005b5e:	f000 f92f 	bl	8005dc0 <I2C_RequestMemoryRead>
 8005b62:	1e03      	subs	r3, r0, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2240      	movs	r2, #64	; 0x40
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e0b9      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2bff      	cmp	r3, #255	; 0xff
 8005b7a:	d911      	bls.n	8005ba0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	22ff      	movs	r2, #255	; 0xff
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	045c      	lsls	r4, r3, #17
 8005b8c:	230a      	movs	r3, #10
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	8819      	ldrh	r1, [r3, #0]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	4b56      	ldr	r3, [pc, #344]	; (8005cf0 <HAL_I2C_Mem_Read+0x260>)
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	0023      	movs	r3, r4
 8005b9a:	f000 fab5 	bl	8006108 <I2C_TransferConfig>
 8005b9e:	e012      	b.n	8005bc6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	049c      	lsls	r4, r3, #18
 8005bb4:	230a      	movs	r3, #10
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	8819      	ldrh	r1, [r3, #0]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	4b4c      	ldr	r3, [pc, #304]	; (8005cf0 <HAL_I2C_Mem_Read+0x260>)
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	0023      	movs	r3, r4
 8005bc2:	f000 faa1 	bl	8006108 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	0013      	movs	r3, r2
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	f000 f978 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005bd8:	1e03      	subs	r3, r0, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e082      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d03a      	beq.n	8005c92 <HAL_I2C_Mem_Read+0x202>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d136      	bne.n	8005c92 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	0013      	movs	r3, r2
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	f000 f949 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005c36:	1e03      	subs	r3, r0, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e053      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2bff      	cmp	r3, #255	; 0xff
 8005c46:	d911      	bls.n	8005c6c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	22ff      	movs	r2, #255	; 0xff
 8005c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	045c      	lsls	r4, r3, #17
 8005c58:	230a      	movs	r3, #10
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	8819      	ldrh	r1, [r3, #0]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	2300      	movs	r3, #0
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	0023      	movs	r3, r4
 8005c66:	f000 fa4f 	bl	8006108 <I2C_TransferConfig>
 8005c6a:	e012      	b.n	8005c92 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	049c      	lsls	r4, r3, #18
 8005c80:	230a      	movs	r3, #10
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	8819      	ldrh	r1, [r3, #0]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	0023      	movs	r3, r4
 8005c8e:	f000 fa3b 	bl	8006108 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d194      	bne.n	8005bc6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 f98e 	bl	8005fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ca8:	1e03      	subs	r3, r0, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e01a      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	490c      	ldr	r1, [pc, #48]	; (8005cf4 <HAL_I2C_Mem_Read+0x264>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2241      	movs	r2, #65	; 0x41
 8005ccc:	2120      	movs	r1, #32
 8005cce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2242      	movs	r2, #66	; 0x42
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	2100      	movs	r1, #0
 8005cde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b007      	add	sp, #28
 8005cec:	bd90      	pop	{r4, r7, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	80002400 	.word	0x80002400
 8005cf4:	fe00e800 	.word	0xfe00e800

08005cf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b5b0      	push	{r4, r5, r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	000c      	movs	r4, r1
 8005d02:	0010      	movs	r0, r2
 8005d04:	0019      	movs	r1, r3
 8005d06:	250a      	movs	r5, #10
 8005d08:	197b      	adds	r3, r7, r5
 8005d0a:	1c22      	adds	r2, r4, #0
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	2308      	movs	r3, #8
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	1c02      	adds	r2, r0, #0
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	1dbb      	adds	r3, r7, #6
 8005d18:	1c0a      	adds	r2, r1, #0
 8005d1a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d1c:	1dbb      	adds	r3, r7, #6
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	045c      	lsls	r4, r3, #17
 8005d26:	197b      	adds	r3, r7, r5
 8005d28:	8819      	ldrh	r1, [r3, #0]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <I2C_RequestMemoryWrite+0xc4>)
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	0023      	movs	r3, r4
 8005d32:	f000 f9e9 	bl	8006108 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f000 f902 	bl	8005f46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d42:	1e03      	subs	r3, r0, #0
 8005d44:	d001      	beq.n	8005d4a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e033      	b.n	8005db2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d4a:	1dbb      	adds	r3, r7, #6
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d107      	bne.n	8005d62 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d52:	2308      	movs	r3, #8
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d60:	e019      	b.n	8005d96 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d62:	2308      	movs	r3, #8
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	6a39      	ldr	r1, [r7, #32]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f000 f8e3 	bl	8005f46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d80:	1e03      	subs	r3, r0, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e014      	b.n	8005db2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d88:	2308      	movs	r3, #8
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d96:	6a3a      	ldr	r2, [r7, #32]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	0013      	movs	r3, r2
 8005da0:	2200      	movs	r2, #0
 8005da2:	2180      	movs	r1, #128	; 0x80
 8005da4:	f000 f890 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005da8:	1e03      	subs	r3, r0, #0
 8005daa:	d001      	beq.n	8005db0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b004      	add	sp, #16
 8005db8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	80002000 	.word	0x80002000

08005dc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b5b0      	push	{r4, r5, r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	000c      	movs	r4, r1
 8005dca:	0010      	movs	r0, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	250a      	movs	r5, #10
 8005dd0:	197b      	adds	r3, r7, r5
 8005dd2:	1c22      	adds	r2, r4, #0
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	1c02      	adds	r2, r0, #0
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	1dbb      	adds	r3, r7, #6
 8005de0:	1c0a      	adds	r2, r1, #0
 8005de2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005de4:	1dbb      	adds	r3, r7, #6
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	197b      	adds	r3, r7, r5
 8005dec:	8819      	ldrh	r1, [r3, #0]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <I2C_RequestMemoryRead+0xc0>)
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	f000 f987 	bl	8006108 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfc:	6a39      	ldr	r1, [r7, #32]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 f8a0 	bl	8005f46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e06:	1e03      	subs	r3, r0, #0
 8005e08:	d001      	beq.n	8005e0e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e033      	b.n	8005e76 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e0e:	1dbb      	adds	r3, r7, #6
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d107      	bne.n	8005e26 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e16:	2308      	movs	r3, #8
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28
 8005e24:	e019      	b.n	8005e5a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e26:	2308      	movs	r3, #8
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	6a39      	ldr	r1, [r7, #32]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 f881 	bl	8005f46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e44:	1e03      	subs	r3, r0, #0
 8005e46:	d001      	beq.n	8005e4c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e014      	b.n	8005e76 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5a:	6a3a      	ldr	r2, [r7, #32]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	0013      	movs	r3, r2
 8005e64:	2200      	movs	r2, #0
 8005e66:	2140      	movs	r1, #64	; 0x40
 8005e68:	f000 f82e 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005e6c:	1e03      	subs	r3, r0, #0
 8005e6e:	d001      	beq.n	8005e74 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	0018      	movs	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b004      	add	sp, #16
 8005e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	80002000 	.word	0x80002000

08005e84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2202      	movs	r2, #2
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d103      	bne.n	8005ea2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d007      	beq.n	8005ec0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2101      	movs	r1, #1
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	619a      	str	r2, [r3, #24]
  }
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b002      	add	sp, #8
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	1dfb      	adds	r3, r7, #7
 8005ed6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ed8:	e021      	b.n	8005f1e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	d01e      	beq.n	8005f1e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee0:	f7ff f850 	bl	8004f84 <HAL_GetTick>
 8005ee4:	0002      	movs	r2, r0
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d113      	bne.n	8005f1e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	2220      	movs	r2, #32
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2241      	movs	r2, #65	; 0x41
 8005f06:	2120      	movs	r1, #32
 8005f08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2242      	movs	r2, #66	; 0x42
 8005f0e:	2100      	movs	r1, #0
 8005f10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2240      	movs	r2, #64	; 0x40
 8005f16:	2100      	movs	r1, #0
 8005f18:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e00f      	b.n	8005f3e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	4013      	ands	r3, r2
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	425a      	negs	r2, r3
 8005f2e:	4153      	adcs	r3, r2
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	001a      	movs	r2, r3
 8005f34:	1dfb      	adds	r3, r7, #7
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d0ce      	beq.n	8005eda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	0018      	movs	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b004      	add	sp, #16
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f52:	e02b      	b.n	8005fac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f000 f86e 	bl	800603c <I2C_IsAcknowledgeFailed>
 8005f60:	1e03      	subs	r3, r0, #0
 8005f62:	d001      	beq.n	8005f68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e029      	b.n	8005fbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	d01e      	beq.n	8005fac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f6e:	f7ff f809 	bl	8004f84 <HAL_GetTick>
 8005f72:	0002      	movs	r2, r0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d113      	bne.n	8005fac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f88:	2220      	movs	r2, #32
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2241      	movs	r2, #65	; 0x41
 8005f94:	2120      	movs	r1, #32
 8005f96:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2242      	movs	r2, #66	; 0x42
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2240      	movs	r2, #64	; 0x40
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e007      	b.n	8005fbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d1cc      	bne.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b004      	add	sp, #16
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fd0:	e028      	b.n	8006024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 f82f 	bl	800603c <I2C_IsAcknowledgeFailed>
 8005fde:	1e03      	subs	r3, r0, #0
 8005fe0:	d001      	beq.n	8005fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e026      	b.n	8006034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fe ffcd 	bl	8004f84 <HAL_GetTick>
 8005fea:	0002      	movs	r2, r0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d113      	bne.n	8006024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	2220      	movs	r2, #32
 8006002:	431a      	orrs	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2241      	movs	r2, #65	; 0x41
 800600c:	2120      	movs	r1, #32
 800600e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2242      	movs	r2, #66	; 0x42
 8006014:	2100      	movs	r1, #0
 8006016:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2240      	movs	r2, #64	; 0x40
 800601c:	2100      	movs	r1, #0
 800601e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e007      	b.n	8006034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2220      	movs	r2, #32
 800602c:	4013      	ands	r3, r2
 800602e:	2b20      	cmp	r3, #32
 8006030:	d1cf      	bne.n	8005fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	b004      	add	sp, #16
 800603a:	bd80      	pop	{r7, pc}

0800603c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2210      	movs	r2, #16
 8006050:	4013      	ands	r3, r2
 8006052:	2b10      	cmp	r3, #16
 8006054:	d151      	bne.n	80060fa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006056:	e021      	b.n	800609c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3301      	adds	r3, #1
 800605c:	d01e      	beq.n	800609c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605e:	f7fe ff91 	bl	8004f84 <HAL_GetTick>
 8006062:	0002      	movs	r2, r0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <I2C_IsAcknowledgeFailed+0x38>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d113      	bne.n	800609c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	2220      	movs	r2, #32
 800607a:	431a      	orrs	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2241      	movs	r2, #65	; 0x41
 8006084:	2120      	movs	r1, #32
 8006086:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2242      	movs	r2, #66	; 0x42
 800608c:	2100      	movs	r1, #0
 800608e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2240      	movs	r2, #64	; 0x40
 8006094:	2100      	movs	r1, #0
 8006096:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e02f      	b.n	80060fc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2220      	movs	r2, #32
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d1d6      	bne.n	8006058 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2210      	movs	r2, #16
 80060b0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2220      	movs	r2, #32
 80060b8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	0018      	movs	r0, r3
 80060be:	f7ff fee1 	bl	8005e84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	490d      	ldr	r1, [pc, #52]	; (8006104 <I2C_IsAcknowledgeFailed+0xc8>)
 80060ce:	400a      	ands	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	2204      	movs	r2, #4
 80060d8:	431a      	orrs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2241      	movs	r2, #65	; 0x41
 80060e2:	2120      	movs	r1, #32
 80060e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2242      	movs	r2, #66	; 0x42
 80060ea:	2100      	movs	r1, #0
 80060ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2240      	movs	r2, #64	; 0x40
 80060f2:	2100      	movs	r1, #0
 80060f4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b004      	add	sp, #16
 8006102:	bd80      	pop	{r7, pc}
 8006104:	fe00e800 	.word	0xfe00e800

08006108 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	0008      	movs	r0, r1
 8006112:	0011      	movs	r1, r2
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	240a      	movs	r4, #10
 8006118:	193b      	adds	r3, r7, r4
 800611a:	1c02      	adds	r2, r0, #0
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	2009      	movs	r0, #9
 8006120:	183b      	adds	r3, r7, r0
 8006122:	1c0a      	adds	r2, r1, #0
 8006124:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	0d51      	lsrs	r1, r2, #21
 8006130:	2280      	movs	r2, #128	; 0x80
 8006132:	00d2      	lsls	r2, r2, #3
 8006134:	400a      	ands	r2, r1
 8006136:	490e      	ldr	r1, [pc, #56]	; (8006170 <I2C_TransferConfig+0x68>)
 8006138:	430a      	orrs	r2, r1
 800613a:	43d2      	mvns	r2, r2
 800613c:	401a      	ands	r2, r3
 800613e:	0011      	movs	r1, r2
 8006140:	193b      	adds	r3, r7, r4
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	059b      	lsls	r3, r3, #22
 8006146:	0d9a      	lsrs	r2, r3, #22
 8006148:	183b      	adds	r3, r7, r0
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	0418      	lsls	r0, r3, #16
 800614e:	23ff      	movs	r3, #255	; 0xff
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	4003      	ands	r3, r0
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	431a      	orrs	r2, r3
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	431a      	orrs	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b005      	add	sp, #20
 800616c:	bd90      	pop	{r4, r7, pc}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	03ff63ff 	.word	0x03ff63ff

08006174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2241      	movs	r2, #65	; 0x41
 8006182:	5c9b      	ldrb	r3, [r3, r2]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b20      	cmp	r3, #32
 8006188:	d138      	bne.n	80061fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2240      	movs	r2, #64	; 0x40
 800618e:	5c9b      	ldrb	r3, [r3, r2]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006194:	2302      	movs	r3, #2
 8006196:	e032      	b.n	80061fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2240      	movs	r2, #64	; 0x40
 800619c:	2101      	movs	r1, #1
 800619e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2241      	movs	r2, #65	; 0x41
 80061a4:	2124      	movs	r1, #36	; 0x24
 80061a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2101      	movs	r1, #1
 80061b4:	438a      	bics	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4911      	ldr	r1, [pc, #68]	; (8006208 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80061c4:	400a      	ands	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6819      	ldr	r1, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2101      	movs	r1, #1
 80061e4:	430a      	orrs	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2241      	movs	r2, #65	; 0x41
 80061ec:	2120      	movs	r1, #32
 80061ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2240      	movs	r2, #64	; 0x40
 80061f4:	2100      	movs	r1, #0
 80061f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e000      	b.n	80061fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
  }
}
 80061fe:	0018      	movs	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	b002      	add	sp, #8
 8006204:	bd80      	pop	{r7, pc}
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	ffffefff 	.word	0xffffefff

0800620c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2241      	movs	r2, #65	; 0x41
 800621a:	5c9b      	ldrb	r3, [r3, r2]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b20      	cmp	r3, #32
 8006220:	d139      	bne.n	8006296 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2240      	movs	r2, #64	; 0x40
 8006226:	5c9b      	ldrb	r3, [r3, r2]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800622c:	2302      	movs	r3, #2
 800622e:	e033      	b.n	8006298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2240      	movs	r2, #64	; 0x40
 8006234:	2101      	movs	r1, #1
 8006236:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2241      	movs	r2, #65	; 0x41
 800623c:	2124      	movs	r1, #36	; 0x24
 800623e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2101      	movs	r1, #1
 800624c:	438a      	bics	r2, r1
 800624e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800625c:	4013      	ands	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2241      	movs	r2, #65	; 0x41
 8006286:	2120      	movs	r1, #32
 8006288:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2240      	movs	r2, #64	; 0x40
 800628e:	2100      	movs	r1, #0
 8006290:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e000      	b.n	8006298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006296:	2302      	movs	r3, #2
  }
}
 8006298:	0018      	movs	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	b004      	add	sp, #16
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	fffff0ff 	.word	0xfffff0ff

080062a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a4:	b5b0      	push	{r4, r5, r7, lr}
 80062a6:	b08a      	sub	sp, #40	; 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f000 fbbc 	bl	8006a30 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b8:	4bc8      	ldr	r3, [pc, #800]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	220c      	movs	r2, #12
 80062be:	4013      	ands	r3, r2
 80062c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062c2:	4bc6      	ldr	r3, [pc, #792]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	025b      	lsls	r3, r3, #9
 80062ca:	4013      	ands	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2201      	movs	r2, #1
 80062d4:	4013      	ands	r3, r2
 80062d6:	d100      	bne.n	80062da <HAL_RCC_OscConfig+0x36>
 80062d8:	e07e      	b.n	80063d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d007      	beq.n	80062f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	d112      	bne.n	800630c <HAL_RCC_OscConfig+0x68>
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	025b      	lsls	r3, r3, #9
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d10d      	bne.n	800630c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f0:	4bba      	ldr	r3, [pc, #744]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	4013      	ands	r3, r2
 80062fa:	d100      	bne.n	80062fe <HAL_RCC_OscConfig+0x5a>
 80062fc:	e06b      	b.n	80063d6 <HAL_RCC_OscConfig+0x132>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d167      	bne.n	80063d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f000 fb92 	bl	8006a30 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	025b      	lsls	r3, r3, #9
 8006314:	429a      	cmp	r2, r3
 8006316:	d107      	bne.n	8006328 <HAL_RCC_OscConfig+0x84>
 8006318:	4bb0      	ldr	r3, [pc, #704]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4baf      	ldr	r3, [pc, #700]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800631e:	2180      	movs	r1, #128	; 0x80
 8006320:	0249      	lsls	r1, r1, #9
 8006322:	430a      	orrs	r2, r1
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e027      	b.n	8006378 <HAL_RCC_OscConfig+0xd4>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	23a0      	movs	r3, #160	; 0xa0
 800632e:	02db      	lsls	r3, r3, #11
 8006330:	429a      	cmp	r2, r3
 8006332:	d10e      	bne.n	8006352 <HAL_RCC_OscConfig+0xae>
 8006334:	4ba9      	ldr	r3, [pc, #676]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4ba8      	ldr	r3, [pc, #672]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800633a:	2180      	movs	r1, #128	; 0x80
 800633c:	02c9      	lsls	r1, r1, #11
 800633e:	430a      	orrs	r2, r1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	4ba6      	ldr	r3, [pc, #664]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4ba5      	ldr	r3, [pc, #660]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006348:	2180      	movs	r1, #128	; 0x80
 800634a:	0249      	lsls	r1, r1, #9
 800634c:	430a      	orrs	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e012      	b.n	8006378 <HAL_RCC_OscConfig+0xd4>
 8006352:	4ba2      	ldr	r3, [pc, #648]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4ba1      	ldr	r3, [pc, #644]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006358:	49a1      	ldr	r1, [pc, #644]	; (80065e0 <HAL_RCC_OscConfig+0x33c>)
 800635a:	400a      	ands	r2, r1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	4b9f      	ldr	r3, [pc, #636]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	2380      	movs	r3, #128	; 0x80
 8006364:	025b      	lsls	r3, r3, #9
 8006366:	4013      	ands	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4b9b      	ldr	r3, [pc, #620]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4b9a      	ldr	r3, [pc, #616]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006372:	499c      	ldr	r1, [pc, #624]	; (80065e4 <HAL_RCC_OscConfig+0x340>)
 8006374:	400a      	ands	r2, r1
 8006376:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d015      	beq.n	80063ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7fe fe00 	bl	8004f84 <HAL_GetTick>
 8006384:	0003      	movs	r3, r0
 8006386:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006388:	e009      	b.n	800639e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800638a:	f7fe fdfb 	bl	8004f84 <HAL_GetTick>
 800638e:	0002      	movs	r2, r0
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b64      	cmp	r3, #100	; 0x64
 8006396:	d902      	bls.n	800639e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	f000 fb49 	bl	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800639e:	4b8f      	ldr	r3, [pc, #572]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	4013      	ands	r3, r2
 80063a8:	d0ef      	beq.n	800638a <HAL_RCC_OscConfig+0xe6>
 80063aa:	e015      	b.n	80063d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fe fdea 	bl	8004f84 <HAL_GetTick>
 80063b0:	0003      	movs	r3, r0
 80063b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063b4:	e008      	b.n	80063c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b6:	f7fe fde5 	bl	8004f84 <HAL_GetTick>
 80063ba:	0002      	movs	r2, r0
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b64      	cmp	r3, #100	; 0x64
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e333      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063c8:	4b84      	ldr	r3, [pc, #528]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	029b      	lsls	r3, r3, #10
 80063d0:	4013      	ands	r3, r2
 80063d2:	d1f0      	bne.n	80063b6 <HAL_RCC_OscConfig+0x112>
 80063d4:	e000      	b.n	80063d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2202      	movs	r2, #2
 80063de:	4013      	ands	r3, r2
 80063e0:	d100      	bne.n	80063e4 <HAL_RCC_OscConfig+0x140>
 80063e2:	e098      	b.n	8006516 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	2220      	movs	r2, #32
 80063ee:	4013      	ands	r3, r2
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80063f2:	4b7a      	ldr	r3, [pc, #488]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b79      	ldr	r3, [pc, #484]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80063f8:	2120      	movs	r1, #32
 80063fa:	430a      	orrs	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2220      	movs	r2, #32
 8006402:	4393      	bics	r3, r2
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d005      	beq.n	8006418 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d13d      	bne.n	800648e <HAL_RCC_OscConfig+0x1ea>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d13a      	bne.n	800648e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006418:	4b70      	ldr	r3, [pc, #448]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2204      	movs	r2, #4
 800641e:	4013      	ands	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_RCC_OscConfig+0x188>
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e301      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642c:	4b6b      	ldr	r3, [pc, #428]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	4a6d      	ldr	r2, [pc, #436]	; (80065e8 <HAL_RCC_OscConfig+0x344>)
 8006432:	4013      	ands	r3, r2
 8006434:	0019      	movs	r1, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	021a      	lsls	r2, r3, #8
 800643c:	4b67      	ldr	r3, [pc, #412]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006442:	4b66      	ldr	r3, [pc, #408]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2209      	movs	r2, #9
 8006448:	4393      	bics	r3, r2
 800644a:	0019      	movs	r1, r3
 800644c:	4b63      	ldr	r3, [pc, #396]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006454:	f000 fc20 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8006458:	0001      	movs	r1, r0
 800645a:	4b60      	ldr	r3, [pc, #384]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	091b      	lsrs	r3, r3, #4
 8006460:	220f      	movs	r2, #15
 8006462:	4013      	ands	r3, r2
 8006464:	4a61      	ldr	r2, [pc, #388]	; (80065ec <HAL_RCC_OscConfig+0x348>)
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	000a      	movs	r2, r1
 800646a:	40da      	lsrs	r2, r3
 800646c:	4b60      	ldr	r3, [pc, #384]	; (80065f0 <HAL_RCC_OscConfig+0x34c>)
 800646e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8006470:	2513      	movs	r5, #19
 8006472:	197c      	adds	r4, r7, r5
 8006474:	2000      	movs	r0, #0
 8006476:	f7fe fd4f 	bl	8004f18 <HAL_InitTick>
 800647a:	0003      	movs	r3, r0
 800647c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800647e:	197b      	adds	r3, r7, r5
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d047      	beq.n	8006516 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006486:	2313      	movs	r3, #19
 8006488:	18fb      	adds	r3, r7, r3
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	e2d0      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d027      	beq.n	80064e4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006494:	4b51      	ldr	r3, [pc, #324]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2209      	movs	r2, #9
 800649a:	4393      	bics	r3, r2
 800649c:	0019      	movs	r1, r3
 800649e:	4b4f      	ldr	r3, [pc, #316]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	430a      	orrs	r2, r1
 80064a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a6:	f7fe fd6d 	bl	8004f84 <HAL_GetTick>
 80064aa:	0003      	movs	r3, r0
 80064ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064b0:	f7fe fd68 	bl	8004f84 <HAL_GetTick>
 80064b4:	0002      	movs	r2, r0
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e2b6      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064c2:	4b46      	ldr	r3, [pc, #280]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2204      	movs	r2, #4
 80064c8:	4013      	ands	r3, r2
 80064ca:	d0f1      	beq.n	80064b0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064cc:	4b43      	ldr	r3, [pc, #268]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a45      	ldr	r2, [pc, #276]	; (80065e8 <HAL_RCC_OscConfig+0x344>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	0019      	movs	r1, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	4b3f      	ldr	r3, [pc, #252]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
 80064e2:	e018      	b.n	8006516 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e4:	4b3d      	ldr	r3, [pc, #244]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	4b3c      	ldr	r3, [pc, #240]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80064ea:	2101      	movs	r1, #1
 80064ec:	438a      	bics	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f0:	f7fe fd48 	bl	8004f84 <HAL_GetTick>
 80064f4:	0003      	movs	r3, r0
 80064f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064fa:	f7fe fd43 	bl	8004f84 <HAL_GetTick>
 80064fe:	0002      	movs	r2, r0
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e291      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800650c:	4b33      	ldr	r3, [pc, #204]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2204      	movs	r2, #4
 8006512:	4013      	ands	r3, r2
 8006514:	d1f1      	bne.n	80064fa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2210      	movs	r2, #16
 800651c:	4013      	ands	r3, r2
 800651e:	d100      	bne.n	8006522 <HAL_RCC_OscConfig+0x27e>
 8006520:	e09f      	b.n	8006662 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d13f      	bne.n	80065a8 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006528:	4b2c      	ldr	r3, [pc, #176]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4013      	ands	r3, r2
 8006532:	d005      	beq.n	8006540 <HAL_RCC_OscConfig+0x29c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e277      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006540:	4b26      	ldr	r3, [pc, #152]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4a2b      	ldr	r2, [pc, #172]	; (80065f4 <HAL_RCC_OscConfig+0x350>)
 8006546:	4013      	ands	r3, r2
 8006548:	0019      	movs	r1, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800654e:	4b23      	ldr	r3, [pc, #140]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006554:	4b21      	ldr	r3, [pc, #132]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	0a19      	lsrs	r1, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	061a      	lsls	r2, r3, #24
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	0b5b      	lsrs	r3, r3, #13
 800656e:	3301      	adds	r3, #1
 8006570:	2280      	movs	r2, #128	; 0x80
 8006572:	0212      	lsls	r2, r2, #8
 8006574:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006576:	4b19      	ldr	r3, [pc, #100]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	210f      	movs	r1, #15
 800657e:	400b      	ands	r3, r1
 8006580:	491a      	ldr	r1, [pc, #104]	; (80065ec <HAL_RCC_OscConfig+0x348>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006586:	4b1a      	ldr	r3, [pc, #104]	; (80065f0 <HAL_RCC_OscConfig+0x34c>)
 8006588:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800658a:	2513      	movs	r5, #19
 800658c:	197c      	adds	r4, r7, r5
 800658e:	2000      	movs	r0, #0
 8006590:	f7fe fcc2 	bl	8004f18 <HAL_InitTick>
 8006594:	0003      	movs	r3, r0
 8006596:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006598:	197b      	adds	r3, r7, r5
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d060      	beq.n	8006662 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80065a0:	2313      	movs	r3, #19
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	e243      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d03e      	beq.n	800662e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065b0:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <HAL_RCC_OscConfig+0x338>)
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	0049      	lsls	r1, r1, #1
 80065ba:	430a      	orrs	r2, r1
 80065bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065be:	f7fe fce1 	bl	8004f84 <HAL_GetTick>
 80065c2:	0003      	movs	r3, r0
 80065c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80065c6:	e017      	b.n	80065f8 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065c8:	f7fe fcdc 	bl	8004f84 <HAL_GetTick>
 80065cc:	0002      	movs	r2, r0
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d910      	bls.n	80065f8 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e22a      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	40021000 	.word	0x40021000
 80065e0:	fffeffff 	.word	0xfffeffff
 80065e4:	fffbffff 	.word	0xfffbffff
 80065e8:	ffffe0ff 	.word	0xffffe0ff
 80065ec:	0800c32c 	.word	0x0800c32c
 80065f0:	20000008 	.word	0x20000008
 80065f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80065f8:	4bc6      	ldr	r3, [pc, #792]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4013      	ands	r3, r2
 8006602:	d0e1      	beq.n	80065c8 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006604:	4bc3      	ldr	r3, [pc, #780]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4ac3      	ldr	r2, [pc, #780]	; (8006918 <HAL_RCC_OscConfig+0x674>)
 800660a:	4013      	ands	r3, r2
 800660c:	0019      	movs	r1, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006612:	4bc0      	ldr	r3, [pc, #768]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006618:	4bbe      	ldr	r3, [pc, #760]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	0a19      	lsrs	r1, r3, #8
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	061a      	lsls	r2, r3, #24
 8006626:	4bbb      	ldr	r3, [pc, #748]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
 800662c:	e019      	b.n	8006662 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800662e:	4bb9      	ldr	r3, [pc, #740]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4bb8      	ldr	r3, [pc, #736]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006634:	49b9      	ldr	r1, [pc, #740]	; (800691c <HAL_RCC_OscConfig+0x678>)
 8006636:	400a      	ands	r2, r1
 8006638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663a:	f7fe fca3 	bl	8004f84 <HAL_GetTick>
 800663e:	0003      	movs	r3, r0
 8006640:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006644:	f7fe fc9e 	bl	8004f84 <HAL_GetTick>
 8006648:	0002      	movs	r2, r0
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e1ec      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006656:	4baf      	ldr	r3, [pc, #700]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	2380      	movs	r3, #128	; 0x80
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4013      	ands	r3, r2
 8006660:	d1f0      	bne.n	8006644 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2208      	movs	r2, #8
 8006668:	4013      	ands	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d019      	beq.n	80066a8 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006674:	4ba7      	ldr	r3, [pc, #668]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006678:	4ba6      	ldr	r3, [pc, #664]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800667a:	2101      	movs	r1, #1
 800667c:	430a      	orrs	r2, r1
 800667e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006680:	f7fe fc80 	bl	8004f84 <HAL_GetTick>
 8006684:	0003      	movs	r3, r0
 8006686:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800668a:	f7fe fc7b 	bl	8004f84 <HAL_GetTick>
 800668e:	0002      	movs	r2, r0
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e1c9      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800669c:	4b9d      	ldr	r3, [pc, #628]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	2202      	movs	r2, #2
 80066a2:	4013      	ands	r3, r2
 80066a4:	d0f1      	beq.n	800668a <HAL_RCC_OscConfig+0x3e6>
 80066a6:	e018      	b.n	80066da <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066a8:	4b9a      	ldr	r3, [pc, #616]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80066aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ac:	4b99      	ldr	r3, [pc, #612]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80066ae:	2101      	movs	r1, #1
 80066b0:	438a      	bics	r2, r1
 80066b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b4:	f7fe fc66 	bl	8004f84 <HAL_GetTick>
 80066b8:	0003      	movs	r3, r0
 80066ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066be:	f7fe fc61 	bl	8004f84 <HAL_GetTick>
 80066c2:	0002      	movs	r2, r0
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e1af      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066d0:	4b90      	ldr	r3, [pc, #576]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	2202      	movs	r2, #2
 80066d6:	4013      	ands	r3, r2
 80066d8:	d1f1      	bne.n	80066be <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2204      	movs	r2, #4
 80066e0:	4013      	ands	r3, r2
 80066e2:	d100      	bne.n	80066e6 <HAL_RCC_OscConfig+0x442>
 80066e4:	e0af      	b.n	8006846 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066e6:	2323      	movs	r3, #35	; 0x23
 80066e8:	18fb      	adds	r3, r7, r3
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ee:	4b89      	ldr	r3, [pc, #548]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80066f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	055b      	lsls	r3, r3, #21
 80066f6:	4013      	ands	r3, r2
 80066f8:	d10a      	bne.n	8006710 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fa:	4b86      	ldr	r3, [pc, #536]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80066fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fe:	4b85      	ldr	r3, [pc, #532]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	0549      	lsls	r1, r1, #21
 8006704:	430a      	orrs	r2, r1
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006708:	2323      	movs	r3, #35	; 0x23
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006710:	4b83      	ldr	r3, [pc, #524]	; (8006920 <HAL_RCC_OscConfig+0x67c>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	4013      	ands	r3, r2
 800671a:	d11a      	bne.n	8006752 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800671c:	4b80      	ldr	r3, [pc, #512]	; (8006920 <HAL_RCC_OscConfig+0x67c>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <HAL_RCC_OscConfig+0x67c>)
 8006722:	2180      	movs	r1, #128	; 0x80
 8006724:	0049      	lsls	r1, r1, #1
 8006726:	430a      	orrs	r2, r1
 8006728:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800672a:	f7fe fc2b 	bl	8004f84 <HAL_GetTick>
 800672e:	0003      	movs	r3, r0
 8006730:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006734:	f7fe fc26 	bl	8004f84 <HAL_GetTick>
 8006738:	0002      	movs	r2, r0
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	; 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e174      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006746:	4b76      	ldr	r3, [pc, #472]	; (8006920 <HAL_RCC_OscConfig+0x67c>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	2380      	movs	r3, #128	; 0x80
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4013      	ands	r3, r2
 8006750:	d0f0      	beq.n	8006734 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	2380      	movs	r3, #128	; 0x80
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	429a      	cmp	r2, r3
 800675c:	d107      	bne.n	800676e <HAL_RCC_OscConfig+0x4ca>
 800675e:	4b6d      	ldr	r3, [pc, #436]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006762:	4b6c      	ldr	r3, [pc, #432]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	0049      	lsls	r1, r1, #1
 8006768:	430a      	orrs	r2, r1
 800676a:	651a      	str	r2, [r3, #80]	; 0x50
 800676c:	e031      	b.n	80067d2 <HAL_RCC_OscConfig+0x52e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10c      	bne.n	8006790 <HAL_RCC_OscConfig+0x4ec>
 8006776:	4b67      	ldr	r3, [pc, #412]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800677a:	4b66      	ldr	r3, [pc, #408]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800677c:	4967      	ldr	r1, [pc, #412]	; (800691c <HAL_RCC_OscConfig+0x678>)
 800677e:	400a      	ands	r2, r1
 8006780:	651a      	str	r2, [r3, #80]	; 0x50
 8006782:	4b64      	ldr	r3, [pc, #400]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006786:	4b63      	ldr	r3, [pc, #396]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006788:	4966      	ldr	r1, [pc, #408]	; (8006924 <HAL_RCC_OscConfig+0x680>)
 800678a:	400a      	ands	r2, r1
 800678c:	651a      	str	r2, [r3, #80]	; 0x50
 800678e:	e020      	b.n	80067d2 <HAL_RCC_OscConfig+0x52e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	23a0      	movs	r3, #160	; 0xa0
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	429a      	cmp	r2, r3
 800679a:	d10e      	bne.n	80067ba <HAL_RCC_OscConfig+0x516>
 800679c:	4b5d      	ldr	r3, [pc, #372]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800679e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067a0:	4b5c      	ldr	r3, [pc, #368]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067a2:	2180      	movs	r1, #128	; 0x80
 80067a4:	00c9      	lsls	r1, r1, #3
 80067a6:	430a      	orrs	r2, r1
 80067a8:	651a      	str	r2, [r3, #80]	; 0x50
 80067aa:	4b5a      	ldr	r3, [pc, #360]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ae:	4b59      	ldr	r3, [pc, #356]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	0049      	lsls	r1, r1, #1
 80067b4:	430a      	orrs	r2, r1
 80067b6:	651a      	str	r2, [r3, #80]	; 0x50
 80067b8:	e00b      	b.n	80067d2 <HAL_RCC_OscConfig+0x52e>
 80067ba:	4b56      	ldr	r3, [pc, #344]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067be:	4b55      	ldr	r3, [pc, #340]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067c0:	4956      	ldr	r1, [pc, #344]	; (800691c <HAL_RCC_OscConfig+0x678>)
 80067c2:	400a      	ands	r2, r1
 80067c4:	651a      	str	r2, [r3, #80]	; 0x50
 80067c6:	4b53      	ldr	r3, [pc, #332]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ca:	4b52      	ldr	r3, [pc, #328]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067cc:	4955      	ldr	r1, [pc, #340]	; (8006924 <HAL_RCC_OscConfig+0x680>)
 80067ce:	400a      	ands	r2, r1
 80067d0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d015      	beq.n	8006806 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067da:	f7fe fbd3 	bl	8004f84 <HAL_GetTick>
 80067de:	0003      	movs	r3, r0
 80067e0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067e2:	e009      	b.n	80067f8 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067e4:	f7fe fbce 	bl	8004f84 <HAL_GetTick>
 80067e8:	0002      	movs	r2, r0
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	4a4e      	ldr	r2, [pc, #312]	; (8006928 <HAL_RCC_OscConfig+0x684>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e11b      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067f8:	4b46      	ldr	r3, [pc, #280]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80067fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4013      	ands	r3, r2
 8006802:	d0ef      	beq.n	80067e4 <HAL_RCC_OscConfig+0x540>
 8006804:	e014      	b.n	8006830 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006806:	f7fe fbbd 	bl	8004f84 <HAL_GetTick>
 800680a:	0003      	movs	r3, r0
 800680c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800680e:	e009      	b.n	8006824 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006810:	f7fe fbb8 	bl	8004f84 <HAL_GetTick>
 8006814:	0002      	movs	r2, r0
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	4a43      	ldr	r2, [pc, #268]	; (8006928 <HAL_RCC_OscConfig+0x684>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e105      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006824:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4013      	ands	r3, r2
 800682e:	d1ef      	bne.n	8006810 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006830:	2323      	movs	r3, #35	; 0x23
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d105      	bne.n	8006846 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800683c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683e:	4b35      	ldr	r3, [pc, #212]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006840:	493a      	ldr	r1, [pc, #232]	; (800692c <HAL_RCC_OscConfig+0x688>)
 8006842:	400a      	ands	r2, r1
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2220      	movs	r2, #32
 800684c:	4013      	ands	r3, r2
 800684e:	d049      	beq.n	80068e4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d026      	beq.n	80068a6 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006858:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800685e:	2101      	movs	r1, #1
 8006860:	430a      	orrs	r2, r1
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006868:	4b2a      	ldr	r3, [pc, #168]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800686a:	2101      	movs	r1, #1
 800686c:	430a      	orrs	r2, r1
 800686e:	635a      	str	r2, [r3, #52]	; 0x34
 8006870:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <HAL_RCC_OscConfig+0x68c>)
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <HAL_RCC_OscConfig+0x68c>)
 8006876:	2180      	movs	r1, #128	; 0x80
 8006878:	0189      	lsls	r1, r1, #6
 800687a:	430a      	orrs	r2, r1
 800687c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687e:	f7fe fb81 	bl	8004f84 <HAL_GetTick>
 8006882:	0003      	movs	r3, r0
 8006884:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006888:	f7fe fb7c 	bl	8004f84 <HAL_GetTick>
 800688c:	0002      	movs	r2, r0
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e0ca      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800689a:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2202      	movs	r2, #2
 80068a0:	4013      	ands	r3, r2
 80068a2:	d0f1      	beq.n	8006888 <HAL_RCC_OscConfig+0x5e4>
 80068a4:	e01e      	b.n	80068e4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80068ac:	2101      	movs	r1, #1
 80068ae:	438a      	bics	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]
 80068b2:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <HAL_RCC_OscConfig+0x68c>)
 80068b4:	6a1a      	ldr	r2, [r3, #32]
 80068b6:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <HAL_RCC_OscConfig+0x68c>)
 80068b8:	491e      	ldr	r1, [pc, #120]	; (8006934 <HAL_RCC_OscConfig+0x690>)
 80068ba:	400a      	ands	r2, r1
 80068bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068be:	f7fe fb61 	bl	8004f84 <HAL_GetTick>
 80068c2:	0003      	movs	r3, r0
 80068c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c8:	f7fe fb5c 	bl	8004f84 <HAL_GetTick>
 80068cc:	0002      	movs	r2, r0
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0aa      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068da:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2202      	movs	r2, #2
 80068e0:	4013      	ands	r3, r2
 80068e2:	d1f1      	bne.n	80068c8 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d100      	bne.n	80068ee <HAL_RCC_OscConfig+0x64a>
 80068ec:	e09f      	b.n	8006a2e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	2b0c      	cmp	r3, #12
 80068f2:	d100      	bne.n	80068f6 <HAL_RCC_OscConfig+0x652>
 80068f4:	e078      	b.n	80069e8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d159      	bne.n	80069b2 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fe:	4b05      	ldr	r3, [pc, #20]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b04      	ldr	r3, [pc, #16]	; (8006914 <HAL_RCC_OscConfig+0x670>)
 8006904:	490c      	ldr	r1, [pc, #48]	; (8006938 <HAL_RCC_OscConfig+0x694>)
 8006906:	400a      	ands	r2, r1
 8006908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800690a:	f7fe fb3b 	bl	8004f84 <HAL_GetTick>
 800690e:	0003      	movs	r3, r0
 8006910:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006912:	e01c      	b.n	800694e <HAL_RCC_OscConfig+0x6aa>
 8006914:	40021000 	.word	0x40021000
 8006918:	ffff1fff 	.word	0xffff1fff
 800691c:	fffffeff 	.word	0xfffffeff
 8006920:	40007000 	.word	0x40007000
 8006924:	fffffbff 	.word	0xfffffbff
 8006928:	00001388 	.word	0x00001388
 800692c:	efffffff 	.word	0xefffffff
 8006930:	40010000 	.word	0x40010000
 8006934:	ffffdfff 	.word	0xffffdfff
 8006938:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800693c:	f7fe fb22 	bl	8004f84 <HAL_GetTick>
 8006940:	0002      	movs	r2, r0
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e070      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800694e:	4b3a      	ldr	r3, [pc, #232]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	049b      	lsls	r3, r3, #18
 8006956:	4013      	ands	r3, r2
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800695a:	4b37      	ldr	r3, [pc, #220]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	4a37      	ldr	r2, [pc, #220]	; (8006a3c <HAL_RCC_OscConfig+0x798>)
 8006960:	4013      	ands	r3, r2
 8006962:	0019      	movs	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006972:	431a      	orrs	r2, r3
 8006974:	4b30      	ldr	r3, [pc, #192]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 8006976:	430a      	orrs	r2, r1
 8006978:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800697a:	4b2f      	ldr	r3, [pc, #188]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b2e      	ldr	r3, [pc, #184]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	0449      	lsls	r1, r1, #17
 8006984:	430a      	orrs	r2, r1
 8006986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006988:	f7fe fafc 	bl	8004f84 <HAL_GetTick>
 800698c:	0003      	movs	r3, r0
 800698e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006992:	f7fe faf7 	bl	8004f84 <HAL_GetTick>
 8006996:	0002      	movs	r2, r0
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e045      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80069a4:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	049b      	lsls	r3, r3, #18
 80069ac:	4013      	ands	r3, r2
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x6ee>
 80069b0:	e03d      	b.n	8006a2e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b2:	4b21      	ldr	r3, [pc, #132]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 80069b8:	4921      	ldr	r1, [pc, #132]	; (8006a40 <HAL_RCC_OscConfig+0x79c>)
 80069ba:	400a      	ands	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069be:	f7fe fae1 	bl	8004f84 <HAL_GetTick>
 80069c2:	0003      	movs	r3, r0
 80069c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fe fadc 	bl	8004f84 <HAL_GetTick>
 80069cc:	0002      	movs	r2, r0
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e02a      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80069da:	4b17      	ldr	r3, [pc, #92]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	049b      	lsls	r3, r3, #18
 80069e2:	4013      	ands	r3, r2
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x724>
 80069e6:	e022      	b.n	8006a2e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e01d      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069f4:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <HAL_RCC_OscConfig+0x794>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	025b      	lsls	r3, r3, #9
 8006a00:	401a      	ands	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d10f      	bne.n	8006a2a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	23f0      	movs	r3, #240	; 0xf0
 8006a0e:	039b      	lsls	r3, r3, #14
 8006a10:	401a      	ands	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d107      	bne.n	8006a2a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	23c0      	movs	r3, #192	; 0xc0
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	401a      	ands	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d001      	beq.n	8006a2e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b00a      	add	sp, #40	; 0x28
 8006a36:	bdb0      	pop	{r4, r5, r7, pc}
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	ff02ffff 	.word	0xff02ffff
 8006a40:	feffffff 	.word	0xfeffffff

08006a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a44:	b5b0      	push	{r4, r5, r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e10d      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a58:	4b88      	ldr	r3, [pc, #544]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	4013      	ands	r3, r2
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d911      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a66:	4b85      	ldr	r3, [pc, #532]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	4393      	bics	r3, r2
 8006a6e:	0019      	movs	r1, r3
 8006a70:	4b82      	ldr	r3, [pc, #520]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a78:	4b80      	ldr	r3, [pc, #512]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	4013      	ands	r3, r2
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d001      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e0f4      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	4013      	ands	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a94:	4b7a      	ldr	r3, [pc, #488]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	22f0      	movs	r2, #240	; 0xf0
 8006a9a:	4393      	bics	r3, r2
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	4b77      	ldr	r3, [pc, #476]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2201      	movs	r2, #1
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d100      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0x70>
 8006ab2:	e089      	b.n	8006bc8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d107      	bne.n	8006acc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006abc:	4b70      	ldr	r3, [pc, #448]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	029b      	lsls	r3, r3, #10
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d120      	bne.n	8006b0a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0d3      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad4:	4b6a      	ldr	r3, [pc, #424]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	049b      	lsls	r3, r3, #18
 8006adc:	4013      	ands	r3, r2
 8006ade:	d114      	bne.n	8006b0a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0c7      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aec:	4b64      	ldr	r3, [pc, #400]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2204      	movs	r2, #4
 8006af2:	4013      	ands	r3, r2
 8006af4:	d109      	bne.n	8006b0a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0bc      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006afa:	4b61      	ldr	r3, [pc, #388]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4013      	ands	r3, r2
 8006b04:	d101      	bne.n	8006b0a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e0b4      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b0a:	4b5d      	ldr	r3, [pc, #372]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	4393      	bics	r3, r2
 8006b12:	0019      	movs	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	4b59      	ldr	r3, [pc, #356]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b1e:	f7fe fa31 	bl	8004f84 <HAL_GetTick>
 8006b22:	0003      	movs	r3, r0
 8006b24:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d111      	bne.n	8006b52 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b2e:	e009      	b.n	8006b44 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b30:	f7fe fa28 	bl	8004f84 <HAL_GetTick>
 8006b34:	0002      	movs	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	4a52      	ldr	r2, [pc, #328]	; (8006c84 <HAL_RCC_ClockConfig+0x240>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e097      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b44:	4b4e      	ldr	r3, [pc, #312]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	220c      	movs	r2, #12
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d1ef      	bne.n	8006b30 <HAL_RCC_ClockConfig+0xec>
 8006b50:	e03a      	b.n	8006bc8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d111      	bne.n	8006b7e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b5a:	e009      	b.n	8006b70 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5c:	f7fe fa12 	bl	8004f84 <HAL_GetTick>
 8006b60:	0002      	movs	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	4a47      	ldr	r2, [pc, #284]	; (8006c84 <HAL_RCC_ClockConfig+0x240>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e081      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b70:	4b43      	ldr	r3, [pc, #268]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	220c      	movs	r2, #12
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	d1ef      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x118>
 8006b7c:	e024      	b.n	8006bc8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d11b      	bne.n	8006bbe <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b86:	e009      	b.n	8006b9c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b88:	f7fe f9fc 	bl	8004f84 <HAL_GetTick>
 8006b8c:	0002      	movs	r2, r0
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	4a3c      	ldr	r2, [pc, #240]	; (8006c84 <HAL_RCC_ClockConfig+0x240>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e06b      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b9c:	4b38      	ldr	r3, [pc, #224]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	220c      	movs	r2, #12
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d1ef      	bne.n	8006b88 <HAL_RCC_ClockConfig+0x144>
 8006ba8:	e00e      	b.n	8006bc8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006baa:	f7fe f9eb 	bl	8004f84 <HAL_GetTick>
 8006bae:	0002      	movs	r2, r0
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	4a33      	ldr	r2, [pc, #204]	; (8006c84 <HAL_RCC_ClockConfig+0x240>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e05a      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bbe:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	220c      	movs	r2, #12
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d1f0      	bne.n	8006baa <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	4013      	ands	r3, r2
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d211      	bcs.n	8006bfa <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd6:	4b29      	ldr	r3, [pc, #164]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4393      	bics	r3, r2
 8006bde:	0019      	movs	r1, r3
 8006be0:	4b26      	ldr	r3, [pc, #152]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be8:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <HAL_RCC_ClockConfig+0x238>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	4013      	ands	r3, r2
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e03c      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	4013      	ands	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c04:	4b1e      	ldr	r3, [pc, #120]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	0019      	movs	r1, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	4b1b      	ldr	r3, [pc, #108]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006c14:	430a      	orrs	r2, r1
 8006c16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d00a      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <HAL_RCC_ClockConfig+0x248>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	0019      	movs	r1, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	00da      	lsls	r2, r3, #3
 8006c32:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006c34:	430a      	orrs	r2, r1
 8006c36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c38:	f000 f82e 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8006c3c:	0001      	movs	r1, r0
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <HAL_RCC_ClockConfig+0x23c>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	091b      	lsrs	r3, r3, #4
 8006c44:	220f      	movs	r2, #15
 8006c46:	4013      	ands	r3, r2
 8006c48:	4a11      	ldr	r2, [pc, #68]	; (8006c90 <HAL_RCC_ClockConfig+0x24c>)
 8006c4a:	5cd3      	ldrb	r3, [r2, r3]
 8006c4c:	000a      	movs	r2, r1
 8006c4e:	40da      	lsrs	r2, r3
 8006c50:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <HAL_RCC_ClockConfig+0x250>)
 8006c52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8006c54:	250b      	movs	r5, #11
 8006c56:	197c      	adds	r4, r7, r5
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f7fe f95d 	bl	8004f18 <HAL_InitTick>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006c62:	197b      	adds	r3, r7, r5
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8006c6a:	230b      	movs	r3, #11
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	e000      	b.n	8006c74 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b004      	add	sp, #16
 8006c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7c:	40022000 	.word	0x40022000
 8006c80:	40021000 	.word	0x40021000
 8006c84:	00001388 	.word	0x00001388
 8006c88:	fffff8ff 	.word	0xfffff8ff
 8006c8c:	ffffc7ff 	.word	0xffffc7ff
 8006c90:	0800c32c 	.word	0x0800c32c
 8006c94:	20000008 	.word	0x20000008

08006c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006c9e:	4b3b      	ldr	r3, [pc, #236]	; (8006d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	220c      	movs	r2, #12
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d00e      	beq.n	8006ccc <HAL_RCC_GetSysClockFreq+0x34>
 8006cae:	2b0c      	cmp	r3, #12
 8006cb0:	d00f      	beq.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d157      	bne.n	8006d66 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006cb6:	4b35      	ldr	r3, [pc, #212]	; (8006d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2210      	movs	r2, #16
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d002      	beq.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006cc0:	4b33      	ldr	r3, [pc, #204]	; (8006d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cc2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006cc4:	e05d      	b.n	8006d82 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8006cc6:	4b33      	ldr	r3, [pc, #204]	; (8006d94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006cc8:	613b      	str	r3, [r7, #16]
      break;
 8006cca:	e05a      	b.n	8006d82 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ccc:	4b32      	ldr	r3, [pc, #200]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x100>)
 8006cce:	613b      	str	r3, [r7, #16]
      break;
 8006cd0:	e057      	b.n	8006d82 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	0c9b      	lsrs	r3, r3, #18
 8006cd6:	220f      	movs	r2, #15
 8006cd8:	4013      	ands	r3, r2
 8006cda:	4a30      	ldr	r2, [pc, #192]	; (8006d9c <HAL_RCC_GetSysClockFreq+0x104>)
 8006cdc:	5cd3      	ldrb	r3, [r2, r3]
 8006cde:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	0d9b      	lsrs	r3, r3, #22
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	3301      	adds	r3, #1
 8006cea:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cec:	4b27      	ldr	r3, [pc, #156]	; (8006d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	025b      	lsls	r3, r3, #9
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d00f      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	000a      	movs	r2, r1
 8006cfc:	0152      	lsls	r2, r2, #5
 8006cfe:	1a52      	subs	r2, r2, r1
 8006d00:	0193      	lsls	r3, r2, #6
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	185b      	adds	r3, r3, r1
 8006d08:	025b      	lsls	r3, r3, #9
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f7f9 fa0d 	bl	800012c <__udivsi3>
 8006d12:	0003      	movs	r3, r0
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	e023      	b.n	8006d60 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006d18:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2210      	movs	r2, #16
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d00f      	beq.n	8006d42 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	000a      	movs	r2, r1
 8006d26:	0152      	lsls	r2, r2, #5
 8006d28:	1a52      	subs	r2, r2, r1
 8006d2a:	0193      	lsls	r3, r2, #6
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	185b      	adds	r3, r3, r1
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7f9 f9f8 	bl	800012c <__udivsi3>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	e00e      	b.n	8006d60 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	000a      	movs	r2, r1
 8006d46:	0152      	lsls	r2, r2, #5
 8006d48:	1a52      	subs	r2, r2, r1
 8006d4a:	0193      	lsls	r3, r2, #6
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	185b      	adds	r3, r3, r1
 8006d52:	029b      	lsls	r3, r3, #10
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f7f9 f9e8 	bl	800012c <__udivsi3>
 8006d5c:	0003      	movs	r3, r0
 8006d5e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	613b      	str	r3, [r7, #16]
      break;
 8006d64:	e00d      	b.n	8006d82 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	0b5b      	lsrs	r3, r3, #13
 8006d6c:	2207      	movs	r2, #7
 8006d6e:	4013      	ands	r3, r2
 8006d70:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	0212      	lsls	r2, r2, #8
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
      break;
 8006d80:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006d82:	693b      	ldr	r3, [r7, #16]
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b006      	add	sp, #24
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	00f42400 	.word	0x00f42400
 8006d98:	007a1200 	.word	0x007a1200
 8006d9c:	0800c344 	.word	0x0800c344

08006da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	20000008 	.word	0x20000008

08006db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006db8:	f7ff fff2 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006dbc:	0001      	movs	r1, r0
 8006dbe:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	2207      	movs	r2, #7
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	4a04      	ldr	r2, [pc, #16]	; (8006ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	40d9      	lsrs	r1, r3
 8006dce:	000b      	movs	r3, r1
}
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	0800c33c 	.word	0x0800c33c

08006de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006de4:	f7ff ffdc 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006de8:	0001      	movs	r1, r0
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	0adb      	lsrs	r3, r3, #11
 8006df0:	2207      	movs	r2, #7
 8006df2:	4013      	ands	r3, r2
 8006df4:	4a04      	ldr	r2, [pc, #16]	; (8006e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006df6:	5cd3      	ldrb	r3, [r2, r3]
 8006df8:	40d9      	lsrs	r1, r3
 8006dfa:	000b      	movs	r3, r1
}
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	40021000 	.word	0x40021000
 8006e08:	0800c33c 	.word	0x0800c33c

08006e0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	2380      	movs	r3, #128	; 0x80
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	4013      	ands	r3, r2
 8006e28:	d100      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006e2a:	e0dd      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8006e2c:	2317      	movs	r3, #23
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e34:	4ba4      	ldr	r3, [pc, #656]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	055b      	lsls	r3, r3, #21
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	d10a      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e40:	4ba1      	ldr	r3, [pc, #644]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e44:	4ba0      	ldr	r3, [pc, #640]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e46:	2180      	movs	r1, #128	; 0x80
 8006e48:	0549      	lsls	r1, r1, #21
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006e4e:	2317      	movs	r3, #23
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	2201      	movs	r2, #1
 8006e54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e56:	4b9d      	ldr	r3, [pc, #628]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4013      	ands	r3, r2
 8006e60:	d11a      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e62:	4b9a      	ldr	r3, [pc, #616]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b99      	ldr	r3, [pc, #612]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	0049      	lsls	r1, r1, #1
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e70:	f7fe f888 	bl	8004f84 <HAL_GetTick>
 8006e74:	0003      	movs	r3, r0
 8006e76:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e78:	e008      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e7a:	f7fe f883 	bl	8004f84 <HAL_GetTick>
 8006e7e:	0002      	movs	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b64      	cmp	r3, #100	; 0x64
 8006e86:	d901      	bls.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e118      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8c:	4b8f      	ldr	r3, [pc, #572]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4013      	ands	r3, r2
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006e98:	4b8b      	ldr	r3, [pc, #556]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	23c0      	movs	r3, #192	; 0xc0
 8006e9e:	039b      	lsls	r3, r3, #14
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	23c0      	movs	r3, #192	; 0xc0
 8006eaa:	039b      	lsls	r3, r3, #14
 8006eac:	4013      	ands	r3, r2
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	23c0      	movs	r3, #192	; 0xc0
 8006eba:	039b      	lsls	r3, r3, #14
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d013      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	23c0      	movs	r3, #192	; 0xc0
 8006eca:	029b      	lsls	r3, r3, #10
 8006ecc:	401a      	ands	r2, r3
 8006ece:	23c0      	movs	r3, #192	; 0xc0
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d10a      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ed6:	4b7c      	ldr	r3, [pc, #496]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	029b      	lsls	r3, r3, #10
 8006ede:	401a      	ands	r2, r3
 8006ee0:	2380      	movs	r3, #128	; 0x80
 8006ee2:	029b      	lsls	r3, r3, #10
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d101      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0e8      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006eec:	4b76      	ldr	r3, [pc, #472]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ef0:	23c0      	movs	r3, #192	; 0xc0
 8006ef2:	029b      	lsls	r3, r3, #10
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d049      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	23c0      	movs	r3, #192	; 0xc0
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	4013      	ands	r3, r2
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d004      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2220      	movs	r2, #32
 8006f14:	4013      	ands	r3, r2
 8006f16:	d10d      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	23c0      	movs	r3, #192	; 0xc0
 8006f1e:	029b      	lsls	r3, r3, #10
 8006f20:	4013      	ands	r3, r2
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d034      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	2380      	movs	r3, #128	; 0x80
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	4013      	ands	r3, r2
 8006f32:	d02e      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006f34:	4b64      	ldr	r3, [pc, #400]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	4a65      	ldr	r2, [pc, #404]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f3e:	4b62      	ldr	r3, [pc, #392]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f42:	4b61      	ldr	r3, [pc, #388]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f44:	2180      	movs	r1, #128	; 0x80
 8006f46:	0309      	lsls	r1, r1, #12
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f4c:	4b5e      	ldr	r3, [pc, #376]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f50:	4b5d      	ldr	r3, [pc, #372]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f52:	4960      	ldr	r1, [pc, #384]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f54:	400a      	ands	r2, r1
 8006f56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006f58:	4b5b      	ldr	r3, [pc, #364]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	2380      	movs	r3, #128	; 0x80
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	4013      	ands	r3, r2
 8006f66:	d014      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f68:	f7fe f80c 	bl	8004f84 <HAL_GetTick>
 8006f6c:	0003      	movs	r3, r0
 8006f6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f70:	e009      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f72:	f7fe f807 	bl	8004f84 <HAL_GetTick>
 8006f76:	0002      	movs	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	4a56      	ldr	r2, [pc, #344]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e09b      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f86:	4b50      	ldr	r3, [pc, #320]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f8a:	2380      	movs	r3, #128	; 0x80
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d0ef      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	23c0      	movs	r3, #192	; 0xc0
 8006f98:	029b      	lsls	r3, r3, #10
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	23c0      	movs	r3, #192	; 0xc0
 8006f9e:	029b      	lsls	r3, r3, #10
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d10c      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006fa4:	4b48      	ldr	r3, [pc, #288]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a4c      	ldr	r2, [pc, #304]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	0019      	movs	r1, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	23c0      	movs	r3, #192	; 0xc0
 8006fb4:	039b      	lsls	r3, r3, #14
 8006fb6:	401a      	ands	r2, r3
 8006fb8:	4b43      	ldr	r3, [pc, #268]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	4b42      	ldr	r3, [pc, #264]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	23c0      	movs	r3, #192	; 0xc0
 8006fc8:	029b      	lsls	r3, r3, #10
 8006fca:	401a      	ands	r2, r3
 8006fcc:	4b3e      	ldr	r3, [pc, #248]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fd2:	2317      	movs	r3, #23
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d105      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fdc:	4b3a      	ldr	r3, [pc, #232]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe0:	4b39      	ldr	r3, [pc, #228]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fe2:	493f      	ldr	r1, [pc, #252]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fe4:	400a      	ands	r2, r1
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	4013      	ands	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ff2:	4b35      	ldr	r3, [pc, #212]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	4393      	bics	r3, r2
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	4b31      	ldr	r3, [pc, #196]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007002:	430a      	orrs	r2, r1
 8007004:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2202      	movs	r2, #2
 800700c:	4013      	ands	r3, r2
 800700e:	d009      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007010:	4b2d      	ldr	r3, [pc, #180]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007014:	220c      	movs	r2, #12
 8007016:	4393      	bics	r3, r2
 8007018:	0019      	movs	r1, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	4b2a      	ldr	r3, [pc, #168]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007020:	430a      	orrs	r2, r1
 8007022:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2204      	movs	r2, #4
 800702a:	4013      	ands	r3, r2
 800702c:	d009      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800702e:	4b26      	ldr	r3, [pc, #152]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007032:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007034:	4013      	ands	r3, r2
 8007036:	0019      	movs	r1, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695a      	ldr	r2, [r3, #20]
 800703c:	4b22      	ldr	r3, [pc, #136]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800703e:	430a      	orrs	r2, r1
 8007040:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2208      	movs	r2, #8
 8007048:	4013      	ands	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800704c:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800704e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007050:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007052:	4013      	ands	r3, r2
 8007054:	0019      	movs	r1, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800705c:	430a      	orrs	r2, r1
 800705e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	4013      	ands	r3, r2
 800706a:	d009      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800706c:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800706e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007070:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007072:	4013      	ands	r3, r2
 8007074:	0019      	movs	r1, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800707c:	430a      	orrs	r2, r1
 800707e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2240      	movs	r2, #64	; 0x40
 8007086:	4013      	ands	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800708c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007090:	4013      	ands	r3, r2
 8007092:	0019      	movs	r1, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007098:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800709a:	430a      	orrs	r2, r1
 800709c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2280      	movs	r2, #128	; 0x80
 80070a4:	4013      	ands	r3, r2
 80070a6:	d009      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80070a8:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	0019      	movs	r1, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1a      	ldr	r2, [r3, #32]
 80070b6:	4b04      	ldr	r3, [pc, #16]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070b8:	430a      	orrs	r2, r1
 80070ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b006      	add	sp, #24
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	40021000 	.word	0x40021000
 80070cc:	40007000 	.word	0x40007000
 80070d0:	fffcffff 	.word	0xfffcffff
 80070d4:	fff7ffff 	.word	0xfff7ffff
 80070d8:	00001388 	.word	0x00001388
 80070dc:	ffcfffff 	.word	0xffcfffff
 80070e0:	efffffff 	.word	0xefffffff
 80070e4:	fffff3ff 	.word	0xfffff3ff
 80070e8:	ffffcfff 	.word	0xffffcfff
 80070ec:	fbffffff 	.word	0xfbffffff
 80070f0:	fff3ffff 	.word	0xfff3ffff

080070f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e059      	b.n	80071ba <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2251      	movs	r2, #81	; 0x51
 8007110:	5c9b      	ldrb	r3, [r3, r2]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d107      	bne.n	8007128 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2250      	movs	r2, #80	; 0x50
 800711c:	2100      	movs	r1, #0
 800711e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	0018      	movs	r0, r3
 8007124:	f7fc f820 	bl	8003168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2251      	movs	r2, #81	; 0x51
 800712c:	2102      	movs	r1, #2
 800712e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2140      	movs	r1, #64	; 0x40
 800713c:	438a      	bics	r2, r1
 800713e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6999      	ldr	r1, [r3, #24]
 8007160:	2380      	movs	r3, #128	; 0x80
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	400b      	ands	r3, r1
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	431a      	orrs	r2, r3
 8007174:	0011      	movs	r1, r2
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	2204      	movs	r2, #4
 800718a:	4013      	ands	r3, r2
 800718c:	0019      	movs	r1, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4907      	ldr	r1, [pc, #28]	; (80071c4 <HAL_SPI_Init+0xd0>)
 80071a6:	400a      	ands	r2, r1
 80071a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2251      	movs	r2, #81	; 0x51
 80071b4:	2101      	movs	r1, #1
 80071b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	0018      	movs	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	b002      	add	sp, #8
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	fffff7ff 	.word	0xfffff7ff

080071c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	1dbb      	adds	r3, r7, #6
 80071d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071d8:	231f      	movs	r3, #31
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2250      	movs	r2, #80	; 0x50
 80071e4:	5c9b      	ldrb	r3, [r3, r2]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_SPI_Transmit+0x26>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e136      	b.n	800745c <HAL_SPI_Transmit+0x294>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2250      	movs	r2, #80	; 0x50
 80071f2:	2101      	movs	r1, #1
 80071f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f6:	f7fd fec5 	bl	8004f84 <HAL_GetTick>
 80071fa:	0003      	movs	r3, r0
 80071fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80071fe:	2316      	movs	r3, #22
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	1dba      	adds	r2, r7, #6
 8007204:	8812      	ldrh	r2, [r2, #0]
 8007206:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2251      	movs	r2, #81	; 0x51
 800720c:	5c9b      	ldrb	r3, [r3, r2]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d004      	beq.n	800721e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007214:	231f      	movs	r3, #31
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	2202      	movs	r2, #2
 800721a:	701a      	strb	r2, [r3, #0]
    goto error;
 800721c:	e113      	b.n	8007446 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_SPI_Transmit+0x64>
 8007224:	1dbb      	adds	r3, r7, #6
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800722c:	231f      	movs	r3, #31
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	2201      	movs	r2, #1
 8007232:	701a      	strb	r2, [r3, #0]
    goto error;
 8007234:	e107      	b.n	8007446 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2251      	movs	r2, #81	; 0x51
 800723a:	2103      	movs	r1, #3
 800723c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1dba      	adds	r2, r7, #6
 800724e:	8812      	ldrh	r2, [r2, #0]
 8007250:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1dba      	adds	r2, r7, #6
 8007256:	8812      	ldrh	r2, [r2, #0]
 8007258:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	429a      	cmp	r2, r3
 8007282:	d108      	bne.n	8007296 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	01c9      	lsls	r1, r1, #7
 8007292:	430a      	orrs	r2, r1
 8007294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2240      	movs	r2, #64	; 0x40
 800729e:	4013      	ands	r3, r2
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d007      	beq.n	80072b4 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2140      	movs	r1, #64	; 0x40
 80072b0:	430a      	orrs	r2, r1
 80072b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	2380      	movs	r3, #128	; 0x80
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	429a      	cmp	r2, r3
 80072be:	d14e      	bne.n	800735e <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <HAL_SPI_Transmit+0x10a>
 80072c8:	2316      	movs	r3, #22
 80072ca:	18fb      	adds	r3, r7, r3
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d13f      	bne.n	8007352 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	881a      	ldrh	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	1c9a      	adds	r2, r3, #2
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072f6:	e02c      	b.n	8007352 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2202      	movs	r2, #2
 8007300:	4013      	ands	r3, r2
 8007302:	2b02      	cmp	r3, #2
 8007304:	d112      	bne.n	800732c <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	881a      	ldrh	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	86da      	strh	r2, [r3, #54]	; 0x36
 800732a:	e012      	b.n	8007352 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800732c:	f7fd fe2a 	bl	8004f84 <HAL_GetTick>
 8007330:	0002      	movs	r2, r0
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d802      	bhi.n	8007342 <HAL_SPI_Transmit+0x17a>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	d102      	bne.n	8007348 <HAL_SPI_Transmit+0x180>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8007348:	231f      	movs	r3, #31
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2203      	movs	r2, #3
 800734e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007350:	e079      	b.n	8007446 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1cd      	bne.n	80072f8 <HAL_SPI_Transmit+0x130>
 800735c:	e04f      	b.n	80073fe <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <HAL_SPI_Transmit+0x1a8>
 8007366:	2316      	movs	r3, #22
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d141      	bne.n	80073f4 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007396:	e02d      	b.n	80073f4 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2202      	movs	r2, #2
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d113      	bne.n	80073ce <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80073cc:	e012      	b.n	80073f4 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ce:	f7fd fdd9 	bl	8004f84 <HAL_GetTick>
 80073d2:	0002      	movs	r2, r0
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d802      	bhi.n	80073e4 <HAL_SPI_Transmit+0x21c>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d102      	bne.n	80073ea <HAL_SPI_Transmit+0x222>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80073ea:	231f      	movs	r3, #31
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	2203      	movs	r2, #3
 80073f0:	701a      	strb	r2, [r3, #0]
          goto error;
 80073f2:	e028      	b.n	8007446 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1cc      	bne.n	8007398 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	0018      	movs	r0, r3
 8007406:	f000 fbe1 	bl	8007bcc <SPI_EndRxTxTransaction>
 800740a:	1e03      	subs	r3, r0, #0
 800740c:	d002      	beq.n	8007414 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800743a:	231f      	movs	r3, #31
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	2201      	movs	r2, #1
 8007440:	701a      	strb	r2, [r3, #0]
 8007442:	e000      	b.n	8007446 <HAL_SPI_Transmit+0x27e>
  }

error:
 8007444:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2251      	movs	r2, #81	; 0x51
 800744a:	2101      	movs	r1, #1
 800744c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2250      	movs	r2, #80	; 0x50
 8007452:	2100      	movs	r1, #0
 8007454:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007456:	231f      	movs	r3, #31
 8007458:	18fb      	adds	r3, r7, r3
 800745a:	781b      	ldrb	r3, [r3, #0]
}
 800745c:	0018      	movs	r0, r3
 800745e:	46bd      	mov	sp, r7
 8007460:	b008      	add	sp, #32
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b089      	sub	sp, #36	; 0x24
 8007468:	af02      	add	r7, sp, #8
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	1dbb      	adds	r3, r7, #6
 8007472:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007474:	2317      	movs	r3, #23
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	2382      	movs	r3, #130	; 0x82
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	429a      	cmp	r2, r3
 8007486:	d113      	bne.n	80074b0 <HAL_SPI_Receive+0x4c>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10f      	bne.n	80074b0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2251      	movs	r2, #81	; 0x51
 8007494:	2104      	movs	r1, #4
 8007496:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007498:	1dbb      	adds	r3, r7, #6
 800749a:	881c      	ldrh	r4, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	0023      	movs	r3, r4
 80074a8:	f000 f8fa 	bl	80076a0 <HAL_SPI_TransmitReceive>
 80074ac:	0003      	movs	r3, r0
 80074ae:	e0f1      	b.n	8007694 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2250      	movs	r2, #80	; 0x50
 80074b4:	5c9b      	ldrb	r3, [r3, r2]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_SPI_Receive+0x5a>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e0ea      	b.n	8007694 <HAL_SPI_Receive+0x230>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2250      	movs	r2, #80	; 0x50
 80074c2:	2101      	movs	r1, #1
 80074c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c6:	f7fd fd5d 	bl	8004f84 <HAL_GetTick>
 80074ca:	0003      	movs	r3, r0
 80074cc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2251      	movs	r2, #81	; 0x51
 80074d2:	5c9b      	ldrb	r3, [r3, r2]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d004      	beq.n	80074e4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80074da:	2317      	movs	r3, #23
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	2202      	movs	r2, #2
 80074e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80074e2:	e0cc      	b.n	800767e <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_SPI_Receive+0x8e>
 80074ea:	1dbb      	adds	r3, r7, #6
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80074f2:	2317      	movs	r3, #23
 80074f4:	18fb      	adds	r3, r7, r3
 80074f6:	2201      	movs	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80074fa:	e0c0      	b.n	800767e <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2251      	movs	r2, #81	; 0x51
 8007500:	2104      	movs	r1, #4
 8007502:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	1dba      	adds	r2, r7, #6
 8007514:	8812      	ldrh	r2, [r2, #0]
 8007516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1dba      	adds	r2, r7, #6
 800751c:	8812      	ldrh	r2, [r2, #0]
 800751e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	2380      	movs	r3, #128	; 0x80
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	429a      	cmp	r2, r3
 8007548:	d107      	bne.n	800755a <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4951      	ldr	r1, [pc, #324]	; (800769c <HAL_SPI_Receive+0x238>)
 8007556:	400a      	ands	r2, r1
 8007558:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2240      	movs	r2, #64	; 0x40
 8007562:	4013      	ands	r3, r2
 8007564:	2b40      	cmp	r3, #64	; 0x40
 8007566:	d007      	beq.n	8007578 <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2140      	movs	r1, #64	; 0x40
 8007574:	430a      	orrs	r2, r1
 8007576:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d164      	bne.n	800764a <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007580:	e02f      	b.n	80075e2 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2201      	movs	r2, #1
 800758a:	4013      	ands	r3, r2
 800758c:	2b01      	cmp	r3, #1
 800758e:	d115      	bne.n	80075bc <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	001a      	movs	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	7812      	ldrb	r2, [r2, #0]
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075ba:	e012      	b.n	80075e2 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075bc:	f7fd fce2 	bl	8004f84 <HAL_GetTick>
 80075c0:	0002      	movs	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d802      	bhi.n	80075d2 <HAL_SPI_Receive+0x16e>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	3301      	adds	r3, #1
 80075d0:	d102      	bne.n	80075d8 <HAL_SPI_Receive+0x174>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 80075d8:	2317      	movs	r3, #23
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	2203      	movs	r2, #3
 80075de:	701a      	strb	r2, [r3, #0]
          goto error;
 80075e0:	e04d      	b.n	800767e <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ca      	bne.n	8007582 <HAL_SPI_Receive+0x11e>
 80075ec:	e032      	b.n	8007654 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2201      	movs	r2, #1
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d113      	bne.n	8007624 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	b292      	uxth	r2, r2
 8007608:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007622:	e012      	b.n	800764a <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007624:	f7fd fcae 	bl	8004f84 <HAL_GetTick>
 8007628:	0002      	movs	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d802      	bhi.n	800763a <HAL_SPI_Receive+0x1d6>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	3301      	adds	r3, #1
 8007638:	d102      	bne.n	8007640 <HAL_SPI_Receive+0x1dc>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8007640:	2317      	movs	r3, #23
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	2203      	movs	r2, #3
 8007646:	701a      	strb	r2, [r3, #0]
          goto error;
 8007648:	e019      	b.n	800767e <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1cc      	bne.n	80075ee <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	0018      	movs	r0, r3
 800765c:	f000 fa4c 	bl	8007af8 <SPI_EndRxTransaction>
 8007660:	1e03      	subs	r3, r0, #0
 8007662:	d002      	beq.n	800766a <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8007672:	2317      	movs	r3, #23
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	2201      	movs	r2, #1
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	e000      	b.n	800767e <HAL_SPI_Receive+0x21a>
  }

error :
 800767c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2251      	movs	r2, #81	; 0x51
 8007682:	2101      	movs	r1, #1
 8007684:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2250      	movs	r2, #80	; 0x50
 800768a:	2100      	movs	r1, #0
 800768c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800768e:	2317      	movs	r3, #23
 8007690:	18fb      	adds	r3, r7, r3
 8007692:	781b      	ldrb	r3, [r3, #0]
}
 8007694:	0018      	movs	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	b007      	add	sp, #28
 800769a:	bd90      	pop	{r4, r7, pc}
 800769c:	ffffbfff 	.word	0xffffbfff

080076a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08c      	sub	sp, #48	; 0x30
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	001a      	movs	r2, r3
 80076ae:	1cbb      	adds	r3, r7, #2
 80076b0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076b2:	2301      	movs	r3, #1
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076b6:	232b      	movs	r3, #43	; 0x2b
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2250      	movs	r2, #80	; 0x50
 80076c2:	5c9b      	ldrb	r3, [r3, r2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x2c>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e1a1      	b.n	8007a10 <HAL_SPI_TransmitReceive+0x370>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2250      	movs	r2, #80	; 0x50
 80076d0:	2101      	movs	r1, #1
 80076d2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076d4:	f7fd fc56 	bl	8004f84 <HAL_GetTick>
 80076d8:	0003      	movs	r3, r0
 80076da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076dc:	2023      	movs	r0, #35	; 0x23
 80076de:	183b      	adds	r3, r7, r0
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	2151      	movs	r1, #81	; 0x51
 80076e4:	5c52      	ldrb	r2, [r2, r1]
 80076e6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076ee:	231a      	movs	r3, #26
 80076f0:	18fb      	adds	r3, r7, r3
 80076f2:	1cba      	adds	r2, r7, #2
 80076f4:	8812      	ldrh	r2, [r2, #0]
 80076f6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076f8:	183b      	adds	r3, r7, r0
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d012      	beq.n	8007726 <HAL_SPI_TransmitReceive+0x86>
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	2382      	movs	r3, #130	; 0x82
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	429a      	cmp	r2, r3
 8007708:	d108      	bne.n	800771c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <HAL_SPI_TransmitReceive+0x7c>
 8007712:	2323      	movs	r3, #35	; 0x23
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b04      	cmp	r3, #4
 800771a:	d004      	beq.n	8007726 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800771c:	232b      	movs	r3, #43	; 0x2b
 800771e:	18fb      	adds	r3, r7, r3
 8007720:	2202      	movs	r2, #2
 8007722:	701a      	strb	r2, [r3, #0]
    goto error;
 8007724:	e169      	b.n	80079fa <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d006      	beq.n	800773a <HAL_SPI_TransmitReceive+0x9a>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_SPI_TransmitReceive+0x9a>
 8007732:	1cbb      	adds	r3, r7, #2
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800773a:	232b      	movs	r3, #43	; 0x2b
 800773c:	18fb      	adds	r3, r7, r3
 800773e:	2201      	movs	r2, #1
 8007740:	701a      	strb	r2, [r3, #0]
    goto error;
 8007742:	e15a      	b.n	80079fa <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2251      	movs	r2, #81	; 0x51
 8007748:	5c9b      	ldrb	r3, [r3, r2]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b04      	cmp	r3, #4
 800774e:	d003      	beq.n	8007758 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2251      	movs	r2, #81	; 0x51
 8007754:	2105      	movs	r1, #5
 8007756:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	1cba      	adds	r2, r7, #2
 8007768:	8812      	ldrh	r2, [r2, #0]
 800776a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	1cba      	adds	r2, r7, #2
 8007770:	8812      	ldrh	r2, [r2, #0]
 8007772:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1cba      	adds	r2, r7, #2
 800777e:	8812      	ldrh	r2, [r2, #0]
 8007780:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1cba      	adds	r2, r7, #2
 8007786:	8812      	ldrh	r2, [r2, #0]
 8007788:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2240      	movs	r2, #64	; 0x40
 800779e:	4013      	ands	r3, r2
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d007      	beq.n	80077b4 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2140      	movs	r1, #64	; 0x40
 80077b0:	430a      	orrs	r2, r1
 80077b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	2380      	movs	r3, #128	; 0x80
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	429a      	cmp	r2, r3
 80077be:	d000      	beq.n	80077c2 <HAL_SPI_TransmitReceive+0x122>
 80077c0:	e07a      	b.n	80078b8 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <HAL_SPI_TransmitReceive+0x134>
 80077ca:	231a      	movs	r3, #26
 80077cc:	18fb      	adds	r3, r7, r3
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d166      	bne.n	80078a2 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	881a      	ldrh	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	1c9a      	adds	r2, r3, #2
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077f8:	e053      	b.n	80078a2 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2202      	movs	r2, #2
 8007802:	4013      	ands	r3, r2
 8007804:	2b02      	cmp	r3, #2
 8007806:	d11b      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x1a0>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d016      	beq.n	8007840 <HAL_SPI_TransmitReceive+0x1a0>
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d113      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	881a      	ldrh	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	1c9a      	adds	r2, r3, #2
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2201      	movs	r2, #1
 8007848:	4013      	ands	r3, r2
 800784a:	2b01      	cmp	r3, #1
 800784c:	d119      	bne.n	8007882 <HAL_SPI_TransmitReceive+0x1e2>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d014      	beq.n	8007882 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	b292      	uxth	r2, r2
 8007864:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	1c9a      	adds	r2, r3, #2
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800787e:	2301      	movs	r3, #1
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007882:	f7fd fb7f 	bl	8004f84 <HAL_GetTick>
 8007886:	0002      	movs	r2, r0
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800788e:	429a      	cmp	r2, r3
 8007890:	d807      	bhi.n	80078a2 <HAL_SPI_TransmitReceive+0x202>
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	3301      	adds	r3, #1
 8007896:	d004      	beq.n	80078a2 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8007898:	232b      	movs	r3, #43	; 0x2b
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	2203      	movs	r2, #3
 800789e:	701a      	strb	r2, [r3, #0]
        goto error;
 80078a0:	e0ab      	b.n	80079fa <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1a6      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x15a>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1a1      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x15a>
 80078b6:	e07f      	b.n	80079b8 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x22c>
 80078c0:	231a      	movs	r3, #26
 80078c2:	18fb      	adds	r3, r7, r3
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d000      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x22c>
 80078ca:	e06b      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f2:	e057      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2202      	movs	r2, #2
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d11c      	bne.n	800793c <HAL_SPI_TransmitReceive+0x29c>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007906:	b29b      	uxth	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d017      	beq.n	800793c <HAL_SPI_TransmitReceive+0x29c>
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d114      	bne.n	800793c <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	7812      	ldrb	r2, [r2, #0]
 800791e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2201      	movs	r2, #1
 8007944:	4013      	ands	r3, r2
 8007946:	2b01      	cmp	r3, #1
 8007948:	d119      	bne.n	800797e <HAL_SPI_TransmitReceive+0x2de>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d014      	beq.n	800797e <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800797a:	2301      	movs	r3, #1
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800797e:	f7fd fb01 	bl	8004f84 <HAL_GetTick>
 8007982:	0002      	movs	r2, r0
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800798a:	429a      	cmp	r2, r3
 800798c:	d802      	bhi.n	8007994 <HAL_SPI_TransmitReceive+0x2f4>
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	3301      	adds	r3, #1
 8007992:	d102      	bne.n	800799a <HAL_SPI_TransmitReceive+0x2fa>
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800799a:	232b      	movs	r3, #43	; 0x2b
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	2203      	movs	r2, #3
 80079a0:	701a      	strb	r2, [r3, #0]
        goto error;
 80079a2:	e02a      	b.n	80079fa <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1a2      	bne.n	80078f4 <HAL_SPI_TransmitReceive+0x254>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d19d      	bne.n	80078f4 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	0018      	movs	r0, r3
 80079c0:	f000 f904 	bl	8007bcc <SPI_EndRxTxTransaction>
 80079c4:	1e03      	subs	r3, r0, #0
 80079c6:	d007      	beq.n	80079d8 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80079c8:	232b      	movs	r3, #43	; 0x2b
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	2201      	movs	r2, #1
 80079ce:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079d6:	e010      	b.n	80079fa <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10b      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079e0:	2300      	movs	r3, #0
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	617b      	str	r3, [r7, #20]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	e000      	b.n	80079fa <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80079f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2251      	movs	r2, #81	; 0x51
 80079fe:	2101      	movs	r1, #1
 8007a00:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2250      	movs	r2, #80	; 0x50
 8007a06:	2100      	movs	r1, #0
 8007a08:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007a0a:	232b      	movs	r3, #43	; 0x2b
 8007a0c:	18fb      	adds	r3, r7, r3
 8007a0e:	781b      	ldrb	r3, [r3, #0]
}
 8007a10:	0018      	movs	r0, r3
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b00c      	add	sp, #48	; 0x30
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	1dfb      	adds	r3, r7, #7
 8007a26:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a28:	e050      	b.n	8007acc <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	d04d      	beq.n	8007acc <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007a30:	f7fd faa8 	bl	8004f84 <HAL_GetTick>
 8007a34:	0002      	movs	r2, r0
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d902      	bls.n	8007a46 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d142      	bne.n	8007acc <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	21e0      	movs	r1, #224	; 0xe0
 8007a52:	438a      	bics	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	2382      	movs	r3, #130	; 0x82
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d113      	bne.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0x72>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	2380      	movs	r3, #128	; 0x80
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d005      	beq.n	8007a7a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	2380      	movs	r3, #128	; 0x80
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d107      	bne.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2140      	movs	r1, #64	; 0x40
 8007a86:	438a      	bics	r2, r1
 8007a88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8e:	2380      	movs	r3, #128	; 0x80
 8007a90:	019b      	lsls	r3, r3, #6
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d110      	bne.n	8007ab8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4914      	ldr	r1, [pc, #80]	; (8007af4 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8007aa2:	400a      	ands	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2180      	movs	r1, #128	; 0x80
 8007ab2:	0189      	lsls	r1, r1, #6
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2251      	movs	r2, #81	; 0x51
 8007abc:	2101      	movs	r1, #1
 8007abe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2250      	movs	r2, #80	; 0x50
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e00f      	b.n	8007aec <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	425a      	negs	r2, r3
 8007adc:	4153      	adcs	r3, r2
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	001a      	movs	r2, r3
 8007ae2:	1dfb      	adds	r3, r7, #7
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d19f      	bne.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	0018      	movs	r0, r3
 8007aee:	46bd      	mov	sp, r7
 8007af0:	b004      	add	sp, #16
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	ffffdfff 	.word	0xffffdfff

08007af8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	2382      	movs	r3, #130	; 0x82
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d113      	bne.n	8007b38 <SPI_EndRxTransaction+0x40>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d005      	beq.n	8007b28 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d107      	bne.n	8007b38 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2140      	movs	r1, #64	; 0x40
 8007b34:	438a      	bics	r2, r1
 8007b36:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	2382      	movs	r3, #130	; 0x82
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d12b      	bne.n	8007b9c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	2380      	movs	r3, #128	; 0x80
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d012      	beq.n	8007b76 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	0013      	movs	r3, r2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2180      	movs	r1, #128	; 0x80
 8007b5e:	f7ff ff5b 	bl	8007a18 <SPI_WaitFlagStateUntilTimeout>
 8007b62:	1e03      	subs	r3, r0, #0
 8007b64:	d02d      	beq.n	8007bc2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e026      	b.n	8007bc4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	0013      	movs	r3, r2
 8007b80:	2200      	movs	r2, #0
 8007b82:	2101      	movs	r1, #1
 8007b84:	f7ff ff48 	bl	8007a18 <SPI_WaitFlagStateUntilTimeout>
 8007b88:	1e03      	subs	r3, r0, #0
 8007b8a:	d01a      	beq.n	8007bc2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b90:	2220      	movs	r2, #32
 8007b92:	431a      	orrs	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e013      	b.n	8007bc4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	0013      	movs	r3, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2101      	movs	r1, #1
 8007baa:	f7ff ff35 	bl	8007a18 <SPI_WaitFlagStateUntilTimeout>
 8007bae:	1e03      	subs	r3, r0, #0
 8007bb0:	d007      	beq.n	8007bc2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e000      	b.n	8007bc4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b004      	add	sp, #16
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	2382      	movs	r3, #130	; 0x82
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d112      	bne.n	8007c0a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	0013      	movs	r3, r2
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	f7ff ff11 	bl	8007a18 <SPI_WaitFlagStateUntilTimeout>
 8007bf6:	1e03      	subs	r3, r0, #0
 8007bf8:	d020      	beq.n	8007c3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	2220      	movs	r2, #32
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e019      	b.n	8007c3e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2251      	movs	r2, #81	; 0x51
 8007c0e:	5c9b      	ldrb	r3, [r3, r2]
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	d112      	bne.n	8007c3c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	0013      	movs	r3, r2
 8007c20:	2200      	movs	r2, #0
 8007c22:	2101      	movs	r1, #1
 8007c24:	f7ff fef8 	bl	8007a18 <SPI_WaitFlagStateUntilTimeout>
 8007c28:	1e03      	subs	r3, r0, #0
 8007c2a:	d007      	beq.n	8007c3c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	2220      	movs	r2, #32
 8007c32:	431a      	orrs	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e000      	b.n	8007c3e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	0018      	movs	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	b004      	add	sp, #16
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e01e      	b.n	8007c96 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2239      	movs	r2, #57	; 0x39
 8007c5c:	5c9b      	ldrb	r3, [r3, r2]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d107      	bne.n	8007c74 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2238      	movs	r2, #56	; 0x38
 8007c68:	2100      	movs	r1, #0
 8007c6a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f7fb fae2 	bl	8003238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2239      	movs	r2, #57	; 0x39
 8007c78:	2102      	movs	r1, #2
 8007c7a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3304      	adds	r3, #4
 8007c84:	0019      	movs	r1, r3
 8007c86:	0010      	movs	r0, r2
 8007c88:	f000 fa40 	bl	800810c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2239      	movs	r2, #57	; 0x39
 8007c90:	2101      	movs	r1, #1
 8007c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	0018      	movs	r0, r3
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	b002      	add	sp, #8
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	d007      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	0018      	movs	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b004      	add	sp, #16
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d124      	bne.n	8007d42 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d11d      	bne.n	8007d42 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	4252      	negs	r2, r2
 8007d0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d004      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	0018      	movs	r0, r3
 8007d26:	f000 f9d9 	bl	80080dc <HAL_TIM_IC_CaptureCallback>
 8007d2a:	e007      	b.n	8007d3c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f000 f9cc 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	0018      	movs	r0, r3
 8007d38:	f000 f9d8 	bl	80080ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d125      	bne.n	8007d9c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2204      	movs	r2, #4
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d11e      	bne.n	8007d9c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2205      	movs	r2, #5
 8007d64:	4252      	negs	r2, r2
 8007d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	23c0      	movs	r3, #192	; 0xc0
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4013      	ands	r3, r2
 8007d7a:	d004      	beq.n	8007d86 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	0018      	movs	r0, r3
 8007d80:	f000 f9ac 	bl	80080dc <HAL_TIM_IC_CaptureCallback>
 8007d84:	e007      	b.n	8007d96 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f000 f99f 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	0018      	movs	r0, r3
 8007d92:	f000 f9ab 	bl	80080ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2208      	movs	r2, #8
 8007da4:	4013      	ands	r3, r2
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d124      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2208      	movs	r2, #8
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d11d      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2209      	movs	r2, #9
 8007dbe:	4252      	negs	r2, r2
 8007dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2203      	movs	r2, #3
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	d004      	beq.n	8007dde <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	f000 f980 	bl	80080dc <HAL_TIM_IC_CaptureCallback>
 8007ddc:	e007      	b.n	8007dee <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	0018      	movs	r0, r3
 8007de2:	f000 f973 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0018      	movs	r0, r3
 8007dea:	f000 f97f 	bl	80080ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2210      	movs	r2, #16
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b10      	cmp	r3, #16
 8007e00:	d125      	bne.n	8007e4e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	2210      	movs	r2, #16
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b10      	cmp	r3, #16
 8007e0e:	d11e      	bne.n	8007e4e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2211      	movs	r2, #17
 8007e16:	4252      	negs	r2, r2
 8007e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69da      	ldr	r2, [r3, #28]
 8007e26:	23c0      	movs	r3, #192	; 0xc0
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	0018      	movs	r0, r3
 8007e32:	f000 f953 	bl	80080dc <HAL_TIM_IC_CaptureCallback>
 8007e36:	e007      	b.n	8007e48 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 f946 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f000 f952 	bl	80080ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2201      	movs	r2, #1
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d10f      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d108      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	4252      	negs	r2, r2
 8007e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 f920 	bl	80080bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2240      	movs	r2, #64	; 0x40
 8007e84:	4013      	ands	r3, r2
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d10f      	bne.n	8007eaa <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	2240      	movs	r2, #64	; 0x40
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	d108      	bne.n	8007eaa <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2241      	movs	r2, #65	; 0x41
 8007e9e:	4252      	negs	r2, r2
 8007ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f000 f929 	bl	80080fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	46bd      	mov	sp, r7
 8007eae:	b002      	add	sp, #8
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2238      	movs	r2, #56	; 0x38
 8007ec2:	5c9b      	ldrb	r3, [r3, r2]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_TIM_ConfigClockSource+0x18>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e0ab      	b.n	8008024 <HAL_TIM_ConfigClockSource+0x170>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2238      	movs	r2, #56	; 0x38
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2239      	movs	r2, #57	; 0x39
 8007ed8:	2102      	movs	r1, #2
 8007eda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2277      	movs	r2, #119	; 0x77
 8007ee8:	4393      	bics	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4a4f      	ldr	r2, [pc, #316]	; (800802c <HAL_TIM_ConfigClockSource+0x178>)
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b40      	cmp	r3, #64	; 0x40
 8007f02:	d100      	bne.n	8007f06 <HAL_TIM_ConfigClockSource+0x52>
 8007f04:	e06b      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x12a>
 8007f06:	d80e      	bhi.n	8007f26 <HAL_TIM_ConfigClockSource+0x72>
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d100      	bne.n	8007f0e <HAL_TIM_ConfigClockSource+0x5a>
 8007f0c:	e077      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x14a>
 8007f0e:	d803      	bhi.n	8007f18 <HAL_TIM_ConfigClockSource+0x64>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d100      	bne.n	8007f16 <HAL_TIM_ConfigClockSource+0x62>
 8007f14:	e073      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f16:	e07c      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d100      	bne.n	8007f1e <HAL_TIM_ConfigClockSource+0x6a>
 8007f1c:	e06f      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x14a>
 8007f1e:	2b30      	cmp	r3, #48	; 0x30
 8007f20:	d100      	bne.n	8007f24 <HAL_TIM_ConfigClockSource+0x70>
 8007f22:	e06c      	b.n	8007ffe <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007f24:	e075      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007f26:	2b70      	cmp	r3, #112	; 0x70
 8007f28:	d00e      	beq.n	8007f48 <HAL_TIM_ConfigClockSource+0x94>
 8007f2a:	d804      	bhi.n	8007f36 <HAL_TIM_ConfigClockSource+0x82>
 8007f2c:	2b50      	cmp	r3, #80	; 0x50
 8007f2e:	d036      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0xea>
 8007f30:	2b60      	cmp	r3, #96	; 0x60
 8007f32:	d044      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007f34:	e06d      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007f36:	2280      	movs	r2, #128	; 0x80
 8007f38:	0152      	lsls	r2, r2, #5
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d068      	beq.n	8008010 <HAL_TIM_ConfigClockSource+0x15c>
 8007f3e:	2280      	movs	r2, #128	; 0x80
 8007f40:	0192      	lsls	r2, r2, #6
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d017      	beq.n	8007f76 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007f46:	e064      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	6899      	ldr	r1, [r3, #8]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f000 fa34 	bl	80083c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2277      	movs	r2, #119	; 0x77
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	609a      	str	r2, [r3, #8]
      break;
 8007f74:	e04d      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	6899      	ldr	r1, [r3, #8]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f000 fa1d 	bl	80083c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2180      	movs	r1, #128	; 0x80
 8007f96:	01c9      	lsls	r1, r1, #7
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	609a      	str	r2, [r3, #8]
      break;
 8007f9c:	e039      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6859      	ldr	r1, [r3, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	001a      	movs	r2, r3
 8007fac:	f000 f990 	bl	80082d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2150      	movs	r1, #80	; 0x50
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f000 f9ea 	bl	8008390 <TIM_ITRx_SetConfig>
      break;
 8007fbc:	e029      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6859      	ldr	r1, [r3, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	001a      	movs	r2, r3
 8007fcc:	f000 f9ae 	bl	800832c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2160      	movs	r1, #96	; 0x60
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f000 f9da 	bl	8008390 <TIM_ITRx_SetConfig>
      break;
 8007fdc:	e019      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6859      	ldr	r1, [r3, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	001a      	movs	r2, r3
 8007fec:	f000 f970 	bl	80082d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2140      	movs	r1, #64	; 0x40
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f000 f9ca 	bl	8008390 <TIM_ITRx_SetConfig>
      break;
 8007ffc:	e009      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	0019      	movs	r1, r3
 8008008:	0010      	movs	r0, r2
 800800a:	f000 f9c1 	bl	8008390 <TIM_ITRx_SetConfig>
      break;
 800800e:	e000      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8008010:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2239      	movs	r2, #57	; 0x39
 8008016:	2101      	movs	r1, #1
 8008018:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2238      	movs	r2, #56	; 0x38
 800801e:	2100      	movs	r1, #0
 8008020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	0018      	movs	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	b004      	add	sp, #16
 800802a:	bd80      	pop	{r7, pc}
 800802c:	ffff00ff 	.word	0xffff00ff

08008030 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2238      	movs	r2, #56	; 0x38
 800803e:	5c9b      	ldrb	r3, [r3, r2]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d101      	bne.n	8008048 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008044:	2302      	movs	r3, #2
 8008046:	e032      	b.n	80080ae <HAL_TIM_SlaveConfigSynchro+0x7e>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2238      	movs	r2, #56	; 0x38
 800804c:	2101      	movs	r1, #1
 800804e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2239      	movs	r2, #57	; 0x39
 8008054:	2102      	movs	r1, #2
 8008056:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	0011      	movs	r1, r2
 800805e:	0018      	movs	r0, r3
 8008060:	f000 f8b2 	bl	80081c8 <TIM_SlaveTimer_SetConfig>
 8008064:	1e03      	subs	r3, r0, #0
 8008066:	d009      	beq.n	800807c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2239      	movs	r2, #57	; 0x39
 800806c:	2101      	movs	r1, #1
 800806e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2238      	movs	r2, #56	; 0x38
 8008074:	2100      	movs	r1, #0
 8008076:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e018      	b.n	80080ae <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2140      	movs	r1, #64	; 0x40
 8008088:	438a      	bics	r2, r1
 800808a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4908      	ldr	r1, [pc, #32]	; (80080b8 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8008098:	400a      	ands	r2, r1
 800809a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2239      	movs	r2, #57	; 0x39
 80080a0:	2101      	movs	r1, #1
 80080a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2238      	movs	r2, #56	; 0x38
 80080a8:	2100      	movs	r1, #0
 80080aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	0018      	movs	r0, r3
 80080b0:	46bd      	mov	sp, r7
 80080b2:	b002      	add	sp, #8
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	ffffbfff 	.word	0xffffbfff

080080bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080c4:	46c0      	nop			; (mov r8, r8)
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b002      	add	sp, #8
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080d4:	46c0      	nop			; (mov r8, r8)
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b002      	add	sp, #8
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080e4:	46c0      	nop			; (mov r8, r8)
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b002      	add	sp, #8
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080f4:	46c0      	nop			; (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b002      	add	sp, #8
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	46bd      	mov	sp, r7
 8008108:	b002      	add	sp, #8
 800810a:	bd80      	pop	{r7, pc}

0800810c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	05db      	lsls	r3, r3, #23
 8008122:	429a      	cmp	r2, r3
 8008124:	d00b      	beq.n	800813e <TIM_Base_SetConfig+0x32>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a23      	ldr	r2, [pc, #140]	; (80081b8 <TIM_Base_SetConfig+0xac>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d007      	beq.n	800813e <TIM_Base_SetConfig+0x32>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a22      	ldr	r2, [pc, #136]	; (80081bc <TIM_Base_SetConfig+0xb0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_Base_SetConfig+0x32>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a21      	ldr	r2, [pc, #132]	; (80081c0 <TIM_Base_SetConfig+0xb4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d108      	bne.n	8008150 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2270      	movs	r2, #112	; 0x70
 8008142:	4393      	bics	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	05db      	lsls	r3, r3, #23
 8008156:	429a      	cmp	r2, r3
 8008158:	d00b      	beq.n	8008172 <TIM_Base_SetConfig+0x66>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a16      	ldr	r2, [pc, #88]	; (80081b8 <TIM_Base_SetConfig+0xac>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d007      	beq.n	8008172 <TIM_Base_SetConfig+0x66>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a15      	ldr	r2, [pc, #84]	; (80081bc <TIM_Base_SetConfig+0xb0>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d003      	beq.n	8008172 <TIM_Base_SetConfig+0x66>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a14      	ldr	r2, [pc, #80]	; (80081c0 <TIM_Base_SetConfig+0xb4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d108      	bne.n	8008184 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <TIM_Base_SetConfig+0xb8>)
 8008176:	4013      	ands	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2280      	movs	r2, #128	; 0x80
 8008188:	4393      	bics	r3, r2
 800818a:	001a      	movs	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	615a      	str	r2, [r3, #20]
}
 80081b0:	46c0      	nop			; (mov r8, r8)
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b004      	add	sp, #16
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	40000400 	.word	0x40000400
 80081bc:	40010800 	.word	0x40010800
 80081c0:	40011400 	.word	0x40011400
 80081c4:	fffffcff 	.word	0xfffffcff

080081c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2270      	movs	r2, #112	; 0x70
 80081de:	4393      	bics	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2207      	movs	r2, #7
 80081f0:	4393      	bics	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2b30      	cmp	r3, #48	; 0x30
 800820c:	d05a      	beq.n	80082c4 <TIM_SlaveTimer_SetConfig+0xfc>
 800820e:	d806      	bhi.n	800821e <TIM_SlaveTimer_SetConfig+0x56>
 8008210:	2b10      	cmp	r3, #16
 8008212:	d057      	beq.n	80082c4 <TIM_SlaveTimer_SetConfig+0xfc>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d055      	beq.n	80082c4 <TIM_SlaveTimer_SetConfig+0xfc>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d053      	beq.n	80082c4 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800821c:	e053      	b.n	80082c6 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800821e:	2b50      	cmp	r3, #80	; 0x50
 8008220:	d03c      	beq.n	800829c <TIM_SlaveTimer_SetConfig+0xd4>
 8008222:	d802      	bhi.n	800822a <TIM_SlaveTimer_SetConfig+0x62>
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	d010      	beq.n	800824a <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8008228:	e04d      	b.n	80082c6 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800822a:	2b60      	cmp	r3, #96	; 0x60
 800822c:	d040      	beq.n	80082b0 <TIM_SlaveTimer_SetConfig+0xe8>
 800822e:	2b70      	cmp	r3, #112	; 0x70
 8008230:	d000      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8008232:	e048      	b.n	80082c6 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	68d9      	ldr	r1, [r3, #12]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f000 f8be 	bl	80083c4 <TIM_ETR_SetConfig>
      break;
 8008248:	e03d      	b.n	80082c6 <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b05      	cmp	r3, #5
 8008250:	d101      	bne.n	8008256 <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e038      	b.n	80082c8 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6a1a      	ldr	r2, [r3, #32]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2101      	movs	r1, #1
 800826a:	438a      	bics	r2, r1
 800826c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	22f0      	movs	r2, #240	; 0xf0
 800827a:	4393      	bics	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	621a      	str	r2, [r3, #32]
      break;
 800829a:	e014      	b.n	80082c6 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	6899      	ldr	r1, [r3, #8]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	001a      	movs	r2, r3
 80082aa:	f000 f811 	bl	80082d0 <TIM_TI1_ConfigInputStage>
      break;
 80082ae:	e00a      	b.n	80082c6 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6899      	ldr	r1, [r3, #8]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	001a      	movs	r2, r3
 80082be:	f000 f835 	bl	800832c <TIM_TI2_ConfigInputStage>
      break;
 80082c2:	e000      	b.n	80082c6 <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 80082c4:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	0018      	movs	r0, r3
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b006      	add	sp, #24
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	2201      	movs	r2, #1
 80082e8:	4393      	bics	r3, r2
 80082ea:	001a      	movs	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	22f0      	movs	r2, #240	; 0xf0
 80082fa:	4393      	bics	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	220a      	movs	r2, #10
 800830c:	4393      	bics	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	46c0      	nop			; (mov r8, r8)
 8008326:	46bd      	mov	sp, r7
 8008328:	b006      	add	sp, #24
 800832a:	bd80      	pop	{r7, pc}

0800832c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	2210      	movs	r2, #16
 800833e:	4393      	bics	r3, r2
 8008340:	001a      	movs	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	4a0d      	ldr	r2, [pc, #52]	; (800838c <TIM_TI2_ConfigInputStage+0x60>)
 8008356:	4013      	ands	r3, r2
 8008358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	22a0      	movs	r2, #160	; 0xa0
 8008368:	4393      	bics	r3, r2
 800836a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	011b      	lsls	r3, r3, #4
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	621a      	str	r2, [r3, #32]
}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b006      	add	sp, #24
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	ffff0fff 	.word	0xffff0fff

08008390 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2270      	movs	r2, #112	; 0x70
 80083a4:	4393      	bics	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	2207      	movs	r2, #7
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	609a      	str	r2, [r3, #8]
}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	46bd      	mov	sp, r7
 80083be:	b004      	add	sp, #16
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4a09      	ldr	r2, [pc, #36]	; (8008400 <TIM_ETR_SetConfig+0x3c>)
 80083dc:	4013      	ands	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	021a      	lsls	r2, r3, #8
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	609a      	str	r2, [r3, #8]
}
 80083f8:	46c0      	nop			; (mov r8, r8)
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b006      	add	sp, #24
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	ffff00ff 	.word	0xffff00ff

08008404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2238      	movs	r2, #56	; 0x38
 8008412:	5c9b      	ldrb	r3, [r3, r2]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008418:	2302      	movs	r3, #2
 800841a:	e032      	b.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2238      	movs	r2, #56	; 0x38
 8008420:	2101      	movs	r1, #1
 8008422:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2239      	movs	r2, #57	; 0x39
 8008428:	2102      	movs	r1, #2
 800842a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2270      	movs	r2, #112	; 0x70
 8008440:	4393      	bics	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2280      	movs	r2, #128	; 0x80
 8008452:	4393      	bics	r3, r2
 8008454:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4313      	orrs	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2239      	movs	r2, #57	; 0x39
 8008474:	2101      	movs	r1, #1
 8008476:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2238      	movs	r2, #56	; 0x38
 800847c:	2100      	movs	r1, #0
 800847e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	0018      	movs	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	b004      	add	sp, #16
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e044      	b.n	8008528 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d107      	bne.n	80084b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2270      	movs	r2, #112	; 0x70
 80084aa:	2100      	movs	r1, #0
 80084ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	0018      	movs	r0, r3
 80084b2:	f7fa fed7 	bl	8003264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2224      	movs	r2, #36	; 0x24
 80084ba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2101      	movs	r1, #1
 80084c8:	438a      	bics	r2, r1
 80084ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	0018      	movs	r0, r3
 80084d0:	f000 f8d8 	bl	8008684 <UART_SetConfig>
 80084d4:	0003      	movs	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e024      	b.n	8008528 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0018      	movs	r0, r3
 80084ea:	f000 fbff 	bl	8008cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	490d      	ldr	r1, [pc, #52]	; (8008530 <HAL_UART_Init+0xa4>)
 80084fa:	400a      	ands	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	212a      	movs	r1, #42	; 0x2a
 800850a:	438a      	bics	r2, r1
 800850c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2101      	movs	r1, #1
 800851a:	430a      	orrs	r2, r1
 800851c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	0018      	movs	r0, r3
 8008522:	f000 fc97 	bl	8008e54 <UART_CheckIdleState>
 8008526:	0003      	movs	r3, r0
}
 8008528:	0018      	movs	r0, r3
 800852a:	46bd      	mov	sp, r7
 800852c:	b002      	add	sp, #8
 800852e:	bd80      	pop	{r7, pc}
 8008530:	ffffb7ff 	.word	0xffffb7ff

08008534 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	1dbb      	adds	r3, r7, #6
 8008542:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008548:	2b20      	cmp	r3, #32
 800854a:	d000      	beq.n	800854e <HAL_UART_Transmit+0x1a>
 800854c:	e094      	b.n	8008678 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_UART_Transmit+0x28>
 8008554:	1dbb      	adds	r3, r7, #6
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e08c      	b.n	800867a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	2380      	movs	r3, #128	; 0x80
 8008566:	015b      	lsls	r3, r3, #5
 8008568:	429a      	cmp	r2, r3
 800856a:	d109      	bne.n	8008580 <HAL_UART_Transmit+0x4c>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2201      	movs	r2, #1
 8008578:	4013      	ands	r3, r2
 800857a:	d001      	beq.n	8008580 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e07c      	b.n	800867a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2270      	movs	r2, #112	; 0x70
 8008584:	5c9b      	ldrb	r3, [r3, r2]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_UART_Transmit+0x5a>
 800858a:	2302      	movs	r3, #2
 800858c:	e075      	b.n	800867a <HAL_UART_Transmit+0x146>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2270      	movs	r2, #112	; 0x70
 8008592:	2101      	movs	r1, #1
 8008594:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2221      	movs	r2, #33	; 0x21
 80085a0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80085a2:	f7fc fcef 	bl	8004f84 <HAL_GetTick>
 80085a6:	0003      	movs	r3, r0
 80085a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1dba      	adds	r2, r7, #6
 80085ae:	2150      	movs	r1, #80	; 0x50
 80085b0:	8812      	ldrh	r2, [r2, #0]
 80085b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	1dba      	adds	r2, r7, #6
 80085b8:	2152      	movs	r1, #82	; 0x52
 80085ba:	8812      	ldrh	r2, [r2, #0]
 80085bc:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	2380      	movs	r3, #128	; 0x80
 80085c4:	015b      	lsls	r3, r3, #5
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d108      	bne.n	80085dc <HAL_UART_Transmit+0xa8>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	e003      	b.n	80085e4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085e4:	e02c      	b.n	8008640 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	0013      	movs	r3, r2
 80085f0:	2200      	movs	r2, #0
 80085f2:	2180      	movs	r1, #128	; 0x80
 80085f4:	f000 fc74 	bl	8008ee0 <UART_WaitOnFlagUntilTimeout>
 80085f8:	1e03      	subs	r3, r0, #0
 80085fa:	d001      	beq.n	8008600 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e03c      	b.n	800867a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	001a      	movs	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	05d2      	lsls	r2, r2, #23
 8008612:	0dd2      	lsrs	r2, r2, #23
 8008614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	3302      	adds	r3, #2
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	e007      	b.n	800862e <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	3301      	adds	r3, #1
 800862c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2252      	movs	r2, #82	; 0x52
 8008632:	5a9b      	ldrh	r3, [r3, r2]
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b299      	uxth	r1, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2252      	movs	r2, #82	; 0x52
 800863e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2252      	movs	r2, #82	; 0x52
 8008644:	5a9b      	ldrh	r3, [r3, r2]
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1cc      	bne.n	80085e6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	0013      	movs	r3, r2
 8008656:	2200      	movs	r2, #0
 8008658:	2140      	movs	r1, #64	; 0x40
 800865a:	f000 fc41 	bl	8008ee0 <UART_WaitOnFlagUntilTimeout>
 800865e:	1e03      	subs	r3, r0, #0
 8008660:	d001      	beq.n	8008666 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e009      	b.n	800867a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2220      	movs	r2, #32
 800866a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2270      	movs	r2, #112	; 0x70
 8008670:	2100      	movs	r1, #0
 8008672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	e000      	b.n	800867a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
  }
}
 800867a:	0018      	movs	r0, r3
 800867c:	46bd      	mov	sp, r7
 800867e:	b008      	add	sp, #32
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008684:	b5b0      	push	{r4, r5, r7, lr}
 8008686:	b08e      	sub	sp, #56	; 0x38
 8008688:	af00      	add	r7, sp, #0
 800868a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800868c:	231b      	movs	r3, #27
 800868e:	2218      	movs	r2, #24
 8008690:	4694      	mov	ip, r2
 8008692:	44bc      	add	ip, r7
 8008694:	4463      	add	r3, ip
 8008696:	2210      	movs	r2, #16
 8008698:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800869a:	2300      	movs	r3, #0
 800869c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800869e:	2313      	movs	r3, #19
 80086a0:	2218      	movs	r2, #24
 80086a2:	4694      	mov	ip, r2
 80086a4:	44bc      	add	ip, r7
 80086a6:	4463      	add	r3, ip
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	431a      	orrs	r2, r3
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4aca      	ldr	r2, [pc, #808]	; (80089f8 <UART_SetConfig+0x374>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	0019      	movs	r1, r3
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086da:	430a      	orrs	r2, r1
 80086dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4ac5      	ldr	r2, [pc, #788]	; (80089fc <UART_SetConfig+0x378>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	0019      	movs	r1, r3
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4abf      	ldr	r2, [pc, #764]	; (8008a00 <UART_SetConfig+0x37c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d004      	beq.n	8008710 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870c:	4313      	orrs	r3, r2
 800870e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	4abb      	ldr	r2, [pc, #748]	; (8008a04 <UART_SetConfig+0x380>)
 8008718:	4013      	ands	r3, r2
 800871a:	0019      	movs	r1, r3
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008722:	430a      	orrs	r2, r1
 8008724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4ab7      	ldr	r2, [pc, #732]	; (8008a08 <UART_SetConfig+0x384>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d134      	bne.n	800879a <UART_SetConfig+0x116>
 8008730:	4bb6      	ldr	r3, [pc, #728]	; (8008a0c <UART_SetConfig+0x388>)
 8008732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008734:	2203      	movs	r2, #3
 8008736:	4013      	ands	r3, r2
 8008738:	2b01      	cmp	r3, #1
 800873a:	d015      	beq.n	8008768 <UART_SetConfig+0xe4>
 800873c:	d304      	bcc.n	8008748 <UART_SetConfig+0xc4>
 800873e:	2b02      	cmp	r3, #2
 8008740:	d00a      	beq.n	8008758 <UART_SetConfig+0xd4>
 8008742:	2b03      	cmp	r3, #3
 8008744:	d018      	beq.n	8008778 <UART_SetConfig+0xf4>
 8008746:	e01f      	b.n	8008788 <UART_SetConfig+0x104>
 8008748:	231b      	movs	r3, #27
 800874a:	2218      	movs	r2, #24
 800874c:	4694      	mov	ip, r2
 800874e:	44bc      	add	ip, r7
 8008750:	4463      	add	r3, ip
 8008752:	2201      	movs	r2, #1
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e0c5      	b.n	80088e4 <UART_SetConfig+0x260>
 8008758:	231b      	movs	r3, #27
 800875a:	2218      	movs	r2, #24
 800875c:	4694      	mov	ip, r2
 800875e:	44bc      	add	ip, r7
 8008760:	4463      	add	r3, ip
 8008762:	2202      	movs	r2, #2
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	e0bd      	b.n	80088e4 <UART_SetConfig+0x260>
 8008768:	231b      	movs	r3, #27
 800876a:	2218      	movs	r2, #24
 800876c:	4694      	mov	ip, r2
 800876e:	44bc      	add	ip, r7
 8008770:	4463      	add	r3, ip
 8008772:	2204      	movs	r2, #4
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e0b5      	b.n	80088e4 <UART_SetConfig+0x260>
 8008778:	231b      	movs	r3, #27
 800877a:	2218      	movs	r2, #24
 800877c:	4694      	mov	ip, r2
 800877e:	44bc      	add	ip, r7
 8008780:	4463      	add	r3, ip
 8008782:	2208      	movs	r2, #8
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e0ad      	b.n	80088e4 <UART_SetConfig+0x260>
 8008788:	231b      	movs	r3, #27
 800878a:	2218      	movs	r2, #24
 800878c:	4694      	mov	ip, r2
 800878e:	44bc      	add	ip, r7
 8008790:	4463      	add	r3, ip
 8008792:	2210      	movs	r2, #16
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	e0a4      	b.n	80088e4 <UART_SetConfig+0x260>
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a9c      	ldr	r2, [pc, #624]	; (8008a10 <UART_SetConfig+0x38c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d137      	bne.n	8008814 <UART_SetConfig+0x190>
 80087a4:	4b99      	ldr	r3, [pc, #612]	; (8008a0c <UART_SetConfig+0x388>)
 80087a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a8:	220c      	movs	r2, #12
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d018      	beq.n	80087e2 <UART_SetConfig+0x15e>
 80087b0:	d802      	bhi.n	80087b8 <UART_SetConfig+0x134>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d005      	beq.n	80087c2 <UART_SetConfig+0x13e>
 80087b6:	e024      	b.n	8008802 <UART_SetConfig+0x17e>
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d00a      	beq.n	80087d2 <UART_SetConfig+0x14e>
 80087bc:	2b0c      	cmp	r3, #12
 80087be:	d018      	beq.n	80087f2 <UART_SetConfig+0x16e>
 80087c0:	e01f      	b.n	8008802 <UART_SetConfig+0x17e>
 80087c2:	231b      	movs	r3, #27
 80087c4:	2218      	movs	r2, #24
 80087c6:	4694      	mov	ip, r2
 80087c8:	44bc      	add	ip, r7
 80087ca:	4463      	add	r3, ip
 80087cc:	2200      	movs	r2, #0
 80087ce:	701a      	strb	r2, [r3, #0]
 80087d0:	e088      	b.n	80088e4 <UART_SetConfig+0x260>
 80087d2:	231b      	movs	r3, #27
 80087d4:	2218      	movs	r2, #24
 80087d6:	4694      	mov	ip, r2
 80087d8:	44bc      	add	ip, r7
 80087da:	4463      	add	r3, ip
 80087dc:	2202      	movs	r2, #2
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	e080      	b.n	80088e4 <UART_SetConfig+0x260>
 80087e2:	231b      	movs	r3, #27
 80087e4:	2218      	movs	r2, #24
 80087e6:	4694      	mov	ip, r2
 80087e8:	44bc      	add	ip, r7
 80087ea:	4463      	add	r3, ip
 80087ec:	2204      	movs	r2, #4
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e078      	b.n	80088e4 <UART_SetConfig+0x260>
 80087f2:	231b      	movs	r3, #27
 80087f4:	2218      	movs	r2, #24
 80087f6:	4694      	mov	ip, r2
 80087f8:	44bc      	add	ip, r7
 80087fa:	4463      	add	r3, ip
 80087fc:	2208      	movs	r2, #8
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e070      	b.n	80088e4 <UART_SetConfig+0x260>
 8008802:	231b      	movs	r3, #27
 8008804:	2218      	movs	r2, #24
 8008806:	4694      	mov	ip, r2
 8008808:	44bc      	add	ip, r7
 800880a:	4463      	add	r3, ip
 800880c:	2210      	movs	r2, #16
 800880e:	701a      	strb	r2, [r3, #0]
 8008810:	46c0      	nop			; (mov r8, r8)
 8008812:	e067      	b.n	80088e4 <UART_SetConfig+0x260>
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a7e      	ldr	r2, [pc, #504]	; (8008a14 <UART_SetConfig+0x390>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d107      	bne.n	800882e <UART_SetConfig+0x1aa>
 800881e:	231b      	movs	r3, #27
 8008820:	2218      	movs	r2, #24
 8008822:	4694      	mov	ip, r2
 8008824:	44bc      	add	ip, r7
 8008826:	4463      	add	r3, ip
 8008828:	2200      	movs	r2, #0
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	e05a      	b.n	80088e4 <UART_SetConfig+0x260>
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a79      	ldr	r2, [pc, #484]	; (8008a18 <UART_SetConfig+0x394>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d107      	bne.n	8008848 <UART_SetConfig+0x1c4>
 8008838:	231b      	movs	r3, #27
 800883a:	2218      	movs	r2, #24
 800883c:	4694      	mov	ip, r2
 800883e:	44bc      	add	ip, r7
 8008840:	4463      	add	r3, ip
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]
 8008846:	e04d      	b.n	80088e4 <UART_SetConfig+0x260>
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a6c      	ldr	r2, [pc, #432]	; (8008a00 <UART_SetConfig+0x37c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d141      	bne.n	80088d6 <UART_SetConfig+0x252>
 8008852:	4b6e      	ldr	r3, [pc, #440]	; (8008a0c <UART_SetConfig+0x388>)
 8008854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008856:	23c0      	movs	r3, #192	; 0xc0
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	4013      	ands	r3, r2
 800885c:	2280      	movs	r2, #128	; 0x80
 800885e:	00d2      	lsls	r2, r2, #3
 8008860:	4293      	cmp	r3, r2
 8008862:	d01f      	beq.n	80088a4 <UART_SetConfig+0x220>
 8008864:	2280      	movs	r2, #128	; 0x80
 8008866:	00d2      	lsls	r2, r2, #3
 8008868:	4293      	cmp	r3, r2
 800886a:	d802      	bhi.n	8008872 <UART_SetConfig+0x1ee>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d009      	beq.n	8008884 <UART_SetConfig+0x200>
 8008870:	e028      	b.n	80088c4 <UART_SetConfig+0x240>
 8008872:	2280      	movs	r2, #128	; 0x80
 8008874:	0112      	lsls	r2, r2, #4
 8008876:	4293      	cmp	r3, r2
 8008878:	d00c      	beq.n	8008894 <UART_SetConfig+0x210>
 800887a:	22c0      	movs	r2, #192	; 0xc0
 800887c:	0112      	lsls	r2, r2, #4
 800887e:	4293      	cmp	r3, r2
 8008880:	d018      	beq.n	80088b4 <UART_SetConfig+0x230>
 8008882:	e01f      	b.n	80088c4 <UART_SetConfig+0x240>
 8008884:	231b      	movs	r3, #27
 8008886:	2218      	movs	r2, #24
 8008888:	4694      	mov	ip, r2
 800888a:	44bc      	add	ip, r7
 800888c:	4463      	add	r3, ip
 800888e:	2200      	movs	r2, #0
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	e027      	b.n	80088e4 <UART_SetConfig+0x260>
 8008894:	231b      	movs	r3, #27
 8008896:	2218      	movs	r2, #24
 8008898:	4694      	mov	ip, r2
 800889a:	44bc      	add	ip, r7
 800889c:	4463      	add	r3, ip
 800889e:	2202      	movs	r2, #2
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	e01f      	b.n	80088e4 <UART_SetConfig+0x260>
 80088a4:	231b      	movs	r3, #27
 80088a6:	2218      	movs	r2, #24
 80088a8:	4694      	mov	ip, r2
 80088aa:	44bc      	add	ip, r7
 80088ac:	4463      	add	r3, ip
 80088ae:	2204      	movs	r2, #4
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	e017      	b.n	80088e4 <UART_SetConfig+0x260>
 80088b4:	231b      	movs	r3, #27
 80088b6:	2218      	movs	r2, #24
 80088b8:	4694      	mov	ip, r2
 80088ba:	44bc      	add	ip, r7
 80088bc:	4463      	add	r3, ip
 80088be:	2208      	movs	r2, #8
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e00f      	b.n	80088e4 <UART_SetConfig+0x260>
 80088c4:	231b      	movs	r3, #27
 80088c6:	2218      	movs	r2, #24
 80088c8:	4694      	mov	ip, r2
 80088ca:	44bc      	add	ip, r7
 80088cc:	4463      	add	r3, ip
 80088ce:	2210      	movs	r2, #16
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	e006      	b.n	80088e4 <UART_SetConfig+0x260>
 80088d6:	231b      	movs	r3, #27
 80088d8:	2218      	movs	r2, #24
 80088da:	4694      	mov	ip, r2
 80088dc:	44bc      	add	ip, r7
 80088de:	4463      	add	r3, ip
 80088e0:	2210      	movs	r2, #16
 80088e2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a45      	ldr	r2, [pc, #276]	; (8008a00 <UART_SetConfig+0x37c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d000      	beq.n	80088f0 <UART_SetConfig+0x26c>
 80088ee:	e09d      	b.n	8008a2c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088f0:	231b      	movs	r3, #27
 80088f2:	2218      	movs	r2, #24
 80088f4:	4694      	mov	ip, r2
 80088f6:	44bc      	add	ip, r7
 80088f8:	4463      	add	r3, ip
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d00d      	beq.n	800891c <UART_SetConfig+0x298>
 8008900:	dc02      	bgt.n	8008908 <UART_SetConfig+0x284>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d005      	beq.n	8008912 <UART_SetConfig+0x28e>
 8008906:	e01d      	b.n	8008944 <UART_SetConfig+0x2c0>
 8008908:	2b04      	cmp	r3, #4
 800890a:	d012      	beq.n	8008932 <UART_SetConfig+0x2ae>
 800890c:	2b08      	cmp	r3, #8
 800890e:	d015      	beq.n	800893c <UART_SetConfig+0x2b8>
 8008910:	e018      	b.n	8008944 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8008912:	f7fe fa4f 	bl	8006db4 <HAL_RCC_GetPCLK1Freq>
 8008916:	0003      	movs	r3, r0
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800891a:	e01b      	b.n	8008954 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800891c:	4b3b      	ldr	r3, [pc, #236]	; (8008a0c <UART_SetConfig+0x388>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2210      	movs	r2, #16
 8008922:	4013      	ands	r3, r2
 8008924:	d002      	beq.n	800892c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8008926:	4b3d      	ldr	r3, [pc, #244]	; (8008a1c <UART_SetConfig+0x398>)
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800892a:	e013      	b.n	8008954 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800892c:	4b3c      	ldr	r3, [pc, #240]	; (8008a20 <UART_SetConfig+0x39c>)
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008930:	e010      	b.n	8008954 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8008932:	f7fe f9b1 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8008936:	0003      	movs	r3, r0
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800893a:	e00b      	b.n	8008954 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800893c:	2380      	movs	r3, #128	; 0x80
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008942:	e007      	b.n	8008954 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008944:	2313      	movs	r3, #19
 8008946:	2218      	movs	r2, #24
 8008948:	4694      	mov	ip, r2
 800894a:	44bc      	add	ip, r7
 800894c:	4463      	add	r3, ip
 800894e:	2201      	movs	r2, #1
 8008950:	701a      	strb	r2, [r3, #0]
        break;
 8008952:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	2b00      	cmp	r3, #0
 8008958:	d100      	bne.n	800895c <UART_SetConfig+0x2d8>
 800895a:	e1a6      	b.n	8008caa <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	0013      	movs	r3, r2
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	189b      	adds	r3, r3, r2
 8008966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008968:	429a      	cmp	r2, r3
 800896a:	d305      	bcc.n	8008978 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008974:	429a      	cmp	r2, r3
 8008976:	d907      	bls.n	8008988 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8008978:	2313      	movs	r3, #19
 800897a:	2218      	movs	r2, #24
 800897c:	4694      	mov	ip, r2
 800897e:	44bc      	add	ip, r7
 8008980:	4463      	add	r3, ip
 8008982:	2201      	movs	r2, #1
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	e190      	b.n	8008caa <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	6939      	ldr	r1, [r7, #16]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	000b      	movs	r3, r1
 8008996:	0e1b      	lsrs	r3, r3, #24
 8008998:	0010      	movs	r0, r2
 800899a:	0205      	lsls	r5, r0, #8
 800899c:	431d      	orrs	r5, r3
 800899e:	000b      	movs	r3, r1
 80089a0:	021c      	lsls	r4, r3, #8
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	68b8      	ldr	r0, [r7, #8]
 80089b0:	68f9      	ldr	r1, [r7, #12]
 80089b2:	1900      	adds	r0, r0, r4
 80089b4:	4169      	adcs	r1, r5
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	2300      	movs	r3, #0
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f7f7 fda0 	bl	8000508 <__aeabi_uldivmod>
 80089c8:	0003      	movs	r3, r0
 80089ca:	000c      	movs	r4, r1
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <UART_SetConfig+0x3a0>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d908      	bls.n	80089e8 <UART_SetConfig+0x364>
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	4a13      	ldr	r2, [pc, #76]	; (8008a28 <UART_SetConfig+0x3a4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d804      	bhi.n	80089e8 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e4:	60da      	str	r2, [r3, #12]
 80089e6:	e160      	b.n	8008caa <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80089e8:	2313      	movs	r3, #19
 80089ea:	2218      	movs	r2, #24
 80089ec:	4694      	mov	ip, r2
 80089ee:	44bc      	add	ip, r7
 80089f0:	4463      	add	r3, ip
 80089f2:	2201      	movs	r2, #1
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	e158      	b.n	8008caa <UART_SetConfig+0x626>
 80089f8:	efff69f3 	.word	0xefff69f3
 80089fc:	ffffcfff 	.word	0xffffcfff
 8008a00:	40004800 	.word	0x40004800
 8008a04:	fffff4ff 	.word	0xfffff4ff
 8008a08:	40013800 	.word	0x40013800
 8008a0c:	40021000 	.word	0x40021000
 8008a10:	40004400 	.word	0x40004400
 8008a14:	40004c00 	.word	0x40004c00
 8008a18:	40005000 	.word	0x40005000
 8008a1c:	003d0900 	.word	0x003d0900
 8008a20:	00f42400 	.word	0x00f42400
 8008a24:	000002ff 	.word	0x000002ff
 8008a28:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d000      	beq.n	8008a3a <UART_SetConfig+0x3b6>
 8008a38:	e0a9      	b.n	8008b8e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8008a3a:	231b      	movs	r3, #27
 8008a3c:	2218      	movs	r2, #24
 8008a3e:	4694      	mov	ip, r2
 8008a40:	44bc      	add	ip, r7
 8008a42:	4463      	add	r3, ip
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d86d      	bhi.n	8008b26 <UART_SetConfig+0x4a2>
 8008a4a:	009a      	lsls	r2, r3, #2
 8008a4c:	4b9f      	ldr	r3, [pc, #636]	; (8008ccc <UART_SetConfig+0x648>)
 8008a4e:	18d3      	adds	r3, r2, r3
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008a54:	f7fe f9ae 	bl	8006db4 <HAL_RCC_GetPCLK1Freq>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	005a      	lsls	r2, r3, #1
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	085b      	lsrs	r3, r3, #1
 8008a62:	18d2      	adds	r2, r2, r3
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	0019      	movs	r1, r3
 8008a6a:	0010      	movs	r0, r2
 8008a6c:	f7f7 fb5e 	bl	800012c <__udivsi3>
 8008a70:	0003      	movs	r3, r0
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a76:	e05e      	b.n	8008b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008a78:	f7fe f9b2 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 8008a7c:	0003      	movs	r3, r0
 8008a7e:	005a      	lsls	r2, r3, #1
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	18d2      	adds	r2, r2, r3
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	0019      	movs	r1, r3
 8008a8e:	0010      	movs	r0, r2
 8008a90:	f7f7 fb4c 	bl	800012c <__udivsi3>
 8008a94:	0003      	movs	r3, r0
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a9a:	e04c      	b.n	8008b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a9c:	4b8c      	ldr	r3, [pc, #560]	; (8008cd0 <UART_SetConfig+0x64c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2210      	movs	r2, #16
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	d00e      	beq.n	8008ac4 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	4a89      	ldr	r2, [pc, #548]	; (8008cd4 <UART_SetConfig+0x650>)
 8008aae:	189a      	adds	r2, r3, r2
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	0019      	movs	r1, r3
 8008ab6:	0010      	movs	r0, r2
 8008ab8:	f7f7 fb38 	bl	800012c <__udivsi3>
 8008abc:	0003      	movs	r3, r0
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8008ac2:	e038      	b.n	8008b36 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	085b      	lsrs	r3, r3, #1
 8008aca:	4a83      	ldr	r2, [pc, #524]	; (8008cd8 <UART_SetConfig+0x654>)
 8008acc:	189a      	adds	r2, r3, r2
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	0019      	movs	r1, r3
 8008ad4:	0010      	movs	r0, r2
 8008ad6:	f7f7 fb29 	bl	800012c <__udivsi3>
 8008ada:	0003      	movs	r3, r0
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ae0:	e029      	b.n	8008b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008ae2:	f7fe f8d9 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8008ae6:	0003      	movs	r3, r0
 8008ae8:	005a      	lsls	r2, r3, #1
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	085b      	lsrs	r3, r3, #1
 8008af0:	18d2      	adds	r2, r2, r3
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	0019      	movs	r1, r3
 8008af8:	0010      	movs	r0, r2
 8008afa:	f7f7 fb17 	bl	800012c <__udivsi3>
 8008afe:	0003      	movs	r3, r0
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b04:	e017      	b.n	8008b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	085b      	lsrs	r3, r3, #1
 8008b0c:	2280      	movs	r2, #128	; 0x80
 8008b0e:	0252      	lsls	r2, r2, #9
 8008b10:	189a      	adds	r2, r3, r2
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	0019      	movs	r1, r3
 8008b18:	0010      	movs	r0, r2
 8008b1a:	f7f7 fb07 	bl	800012c <__udivsi3>
 8008b1e:	0003      	movs	r3, r0
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008b24:	e007      	b.n	8008b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008b26:	2313      	movs	r3, #19
 8008b28:	2218      	movs	r2, #24
 8008b2a:	4694      	mov	ip, r2
 8008b2c:	44bc      	add	ip, r7
 8008b2e:	4463      	add	r3, ip
 8008b30:	2201      	movs	r2, #1
 8008b32:	701a      	strb	r2, [r3, #0]
        break;
 8008b34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	2b0f      	cmp	r3, #15
 8008b3a:	d920      	bls.n	8008b7e <UART_SetConfig+0x4fa>
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	4a67      	ldr	r2, [pc, #412]	; (8008cdc <UART_SetConfig+0x658>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d81c      	bhi.n	8008b7e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	200a      	movs	r0, #10
 8008b4a:	2418      	movs	r4, #24
 8008b4c:	193b      	adds	r3, r7, r4
 8008b4e:	181b      	adds	r3, r3, r0
 8008b50:	210f      	movs	r1, #15
 8008b52:	438a      	bics	r2, r1
 8008b54:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2207      	movs	r2, #7
 8008b5e:	4013      	ands	r3, r2
 8008b60:	b299      	uxth	r1, r3
 8008b62:	193b      	adds	r3, r7, r4
 8008b64:	181b      	adds	r3, r3, r0
 8008b66:	193a      	adds	r2, r7, r4
 8008b68:	1812      	adds	r2, r2, r0
 8008b6a:	8812      	ldrh	r2, [r2, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	193a      	adds	r2, r7, r4
 8008b76:	1812      	adds	r2, r2, r0
 8008b78:	8812      	ldrh	r2, [r2, #0]
 8008b7a:	60da      	str	r2, [r3, #12]
 8008b7c:	e095      	b.n	8008caa <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8008b7e:	2313      	movs	r3, #19
 8008b80:	2218      	movs	r2, #24
 8008b82:	4694      	mov	ip, r2
 8008b84:	44bc      	add	ip, r7
 8008b86:	4463      	add	r3, ip
 8008b88:	2201      	movs	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e08d      	b.n	8008caa <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8008b8e:	231b      	movs	r3, #27
 8008b90:	2218      	movs	r2, #24
 8008b92:	4694      	mov	ip, r2
 8008b94:	44bc      	add	ip, r7
 8008b96:	4463      	add	r3, ip
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d86a      	bhi.n	8008c74 <UART_SetConfig+0x5f0>
 8008b9e:	009a      	lsls	r2, r3, #2
 8008ba0:	4b4f      	ldr	r3, [pc, #316]	; (8008ce0 <UART_SetConfig+0x65c>)
 8008ba2:	18d3      	adds	r3, r2, r3
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008ba8:	f7fe f904 	bl	8006db4 <HAL_RCC_GetPCLK1Freq>
 8008bac:	0002      	movs	r2, r0
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	18d2      	adds	r2, r2, r3
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	0019      	movs	r1, r3
 8008bbc:	0010      	movs	r0, r2
 8008bbe:	f7f7 fab5 	bl	800012c <__udivsi3>
 8008bc2:	0003      	movs	r3, r0
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bc8:	e05c      	b.n	8008c84 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008bca:	f7fe f909 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 8008bce:	0002      	movs	r2, r0
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	18d2      	adds	r2, r2, r3
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	0019      	movs	r1, r3
 8008bde:	0010      	movs	r0, r2
 8008be0:	f7f7 faa4 	bl	800012c <__udivsi3>
 8008be4:	0003      	movs	r3, r0
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bea:	e04b      	b.n	8008c84 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bec:	4b38      	ldr	r3, [pc, #224]	; (8008cd0 <UART_SetConfig+0x64c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2210      	movs	r2, #16
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	d00e      	beq.n	8008c14 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	085b      	lsrs	r3, r3, #1
 8008bfc:	4a39      	ldr	r2, [pc, #228]	; (8008ce4 <UART_SetConfig+0x660>)
 8008bfe:	189a      	adds	r2, r3, r2
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	0019      	movs	r1, r3
 8008c06:	0010      	movs	r0, r2
 8008c08:	f7f7 fa90 	bl	800012c <__udivsi3>
 8008c0c:	0003      	movs	r3, r0
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8008c12:	e037      	b.n	8008c84 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	4a33      	ldr	r2, [pc, #204]	; (8008ce8 <UART_SetConfig+0x664>)
 8008c1c:	189a      	adds	r2, r3, r2
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	0019      	movs	r1, r3
 8008c24:	0010      	movs	r0, r2
 8008c26:	f7f7 fa81 	bl	800012c <__udivsi3>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c30:	e028      	b.n	8008c84 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008c32:	f7fe f831 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8008c36:	0002      	movs	r2, r0
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	18d2      	adds	r2, r2, r3
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	0019      	movs	r1, r3
 8008c46:	0010      	movs	r0, r2
 8008c48:	f7f7 fa70 	bl	800012c <__udivsi3>
 8008c4c:	0003      	movs	r3, r0
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c52:	e017      	b.n	8008c84 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	085b      	lsrs	r3, r3, #1
 8008c5a:	2280      	movs	r2, #128	; 0x80
 8008c5c:	0212      	lsls	r2, r2, #8
 8008c5e:	189a      	adds	r2, r3, r2
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	0019      	movs	r1, r3
 8008c66:	0010      	movs	r0, r2
 8008c68:	f7f7 fa60 	bl	800012c <__udivsi3>
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c72:	e007      	b.n	8008c84 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008c74:	2313      	movs	r3, #19
 8008c76:	2218      	movs	r2, #24
 8008c78:	4694      	mov	ip, r2
 8008c7a:	44bc      	add	ip, r7
 8008c7c:	4463      	add	r3, ip
 8008c7e:	2201      	movs	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
        break;
 8008c82:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	2b0f      	cmp	r3, #15
 8008c88:	d908      	bls.n	8008c9c <UART_SetConfig+0x618>
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <UART_SetConfig+0x658>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d804      	bhi.n	8008c9c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c98:	60da      	str	r2, [r3, #12]
 8008c9a:	e006      	b.n	8008caa <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8008c9c:	2313      	movs	r3, #19
 8008c9e:	2218      	movs	r2, #24
 8008ca0:	4694      	mov	ip, r2
 8008ca2:	44bc      	add	ip, r7
 8008ca4:	4463      	add	r3, ip
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2200      	movs	r2, #0
 8008cae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008cb6:	2313      	movs	r3, #19
 8008cb8:	2218      	movs	r2, #24
 8008cba:	4694      	mov	ip, r2
 8008cbc:	44bc      	add	ip, r7
 8008cbe:	4463      	add	r3, ip
 8008cc0:	781b      	ldrb	r3, [r3, #0]
}
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b00e      	add	sp, #56	; 0x38
 8008cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	0800c350 	.word	0x0800c350
 8008cd0:	40021000 	.word	0x40021000
 8008cd4:	007a1200 	.word	0x007a1200
 8008cd8:	01e84800 	.word	0x01e84800
 8008cdc:	0000ffff 	.word	0x0000ffff
 8008ce0:	0800c374 	.word	0x0800c374
 8008ce4:	003d0900 	.word	0x003d0900
 8008ce8:	00f42400 	.word	0x00f42400

08008cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	d00b      	beq.n	8008d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	4a4a      	ldr	r2, [pc, #296]	; (8008e30 <UART_AdvFeatureConfig+0x144>)
 8008d06:	4013      	ands	r3, r2
 8008d08:	0019      	movs	r1, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d00b      	beq.n	8008d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4a43      	ldr	r2, [pc, #268]	; (8008e34 <UART_AdvFeatureConfig+0x148>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	0019      	movs	r1, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	430a      	orrs	r2, r1
 8008d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	4013      	ands	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4a3b      	ldr	r2, [pc, #236]	; (8008e38 <UART_AdvFeatureConfig+0x14c>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	0019      	movs	r1, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2208      	movs	r2, #8
 8008d60:	4013      	ands	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	4a34      	ldr	r2, [pc, #208]	; (8008e3c <UART_AdvFeatureConfig+0x150>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	0019      	movs	r1, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	2210      	movs	r2, #16
 8008d82:	4013      	ands	r3, r2
 8008d84:	d00b      	beq.n	8008d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	4a2c      	ldr	r2, [pc, #176]	; (8008e40 <UART_AdvFeatureConfig+0x154>)
 8008d8e:	4013      	ands	r3, r2
 8008d90:	0019      	movs	r1, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	2220      	movs	r2, #32
 8008da4:	4013      	ands	r3, r2
 8008da6:	d00b      	beq.n	8008dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	4a25      	ldr	r2, [pc, #148]	; (8008e44 <UART_AdvFeatureConfig+0x158>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	0019      	movs	r1, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2240      	movs	r2, #64	; 0x40
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	d01d      	beq.n	8008e06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a1d      	ldr	r2, [pc, #116]	; (8008e48 <UART_AdvFeatureConfig+0x15c>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008de6:	2380      	movs	r3, #128	; 0x80
 8008de8:	035b      	lsls	r3, r3, #13
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d10b      	bne.n	8008e06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <UART_AdvFeatureConfig+0x160>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	0019      	movs	r1, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	2280      	movs	r2, #128	; 0x80
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	d00b      	beq.n	8008e28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <UART_AdvFeatureConfig+0x164>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	0019      	movs	r1, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }
}
 8008e28:	46c0      	nop			; (mov r8, r8)
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b002      	add	sp, #8
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	fffdffff 	.word	0xfffdffff
 8008e34:	fffeffff 	.word	0xfffeffff
 8008e38:	fffbffff 	.word	0xfffbffff
 8008e3c:	ffff7fff 	.word	0xffff7fff
 8008e40:	ffffefff 	.word	0xffffefff
 8008e44:	ffffdfff 	.word	0xffffdfff
 8008e48:	ffefffff 	.word	0xffefffff
 8008e4c:	ff9fffff 	.word	0xff9fffff
 8008e50:	fff7ffff 	.word	0xfff7ffff

08008e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008e62:	f7fc f88f 	bl	8004f84 <HAL_GetTick>
 8008e66:	0003      	movs	r3, r0
 8008e68:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2208      	movs	r2, #8
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d10d      	bne.n	8008e94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	0399      	lsls	r1, r3, #14
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	4b16      	ldr	r3, [pc, #88]	; (8008edc <UART_CheckIdleState+0x88>)
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	0013      	movs	r3, r2
 8008e86:	2200      	movs	r2, #0
 8008e88:	f000 f82a 	bl	8008ee0 <UART_WaitOnFlagUntilTimeout>
 8008e8c:	1e03      	subs	r3, r0, #0
 8008e8e:	d001      	beq.n	8008e94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e01f      	b.n	8008ed4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2204      	movs	r2, #4
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d10d      	bne.n	8008ebe <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	03d9      	lsls	r1, r3, #15
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <UART_CheckIdleState+0x88>)
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	0013      	movs	r3, r2
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f000 f815 	bl	8008ee0 <UART_WaitOnFlagUntilTimeout>
 8008eb6:	1e03      	subs	r3, r0, #0
 8008eb8:	d001      	beq.n	8008ebe <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00a      	b.n	8008ed4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2270      	movs	r2, #112	; 0x70
 8008ece:	2100      	movs	r1, #0
 8008ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	b004      	add	sp, #16
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	01ffffff 	.word	0x01ffffff

08008ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	1dfb      	adds	r3, r7, #7
 8008eee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef0:	e029      	b.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	d026      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef8:	f7fc f844 	bl	8004f84 <HAL_GetTick>
 8008efc:	0002      	movs	r2, r0
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d302      	bcc.n	8008f0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d11b      	bne.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4915      	ldr	r1, [pc, #84]	; (8008f70 <UART_WaitOnFlagUntilTimeout+0x90>)
 8008f1a:	400a      	ands	r2, r1
 8008f1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2101      	movs	r1, #1
 8008f2a:	438a      	bics	r2, r1
 8008f2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2220      	movs	r2, #32
 8008f32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2270      	movs	r2, #112	; 0x70
 8008f3e:	2100      	movs	r1, #0
 8008f40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e00f      	b.n	8008f66 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	425a      	negs	r2, r3
 8008f56:	4153      	adcs	r3, r2
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	001a      	movs	r2, r3
 8008f5c:	1dfb      	adds	r3, r7, #7
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d0c6      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	0018      	movs	r0, r3
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	b004      	add	sp, #16
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	fffffe5f 	.word	0xfffffe5f

08008f74 <__errno>:
 8008f74:	4b01      	ldr	r3, [pc, #4]	; (8008f7c <__errno+0x8>)
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	4770      	bx	lr
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	2000000c 	.word	0x2000000c

08008f80 <__libc_init_array>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	2600      	movs	r6, #0
 8008f84:	4d0c      	ldr	r5, [pc, #48]	; (8008fb8 <__libc_init_array+0x38>)
 8008f86:	4c0d      	ldr	r4, [pc, #52]	; (8008fbc <__libc_init_array+0x3c>)
 8008f88:	1b64      	subs	r4, r4, r5
 8008f8a:	10a4      	asrs	r4, r4, #2
 8008f8c:	42a6      	cmp	r6, r4
 8008f8e:	d109      	bne.n	8008fa4 <__libc_init_array+0x24>
 8008f90:	2600      	movs	r6, #0
 8008f92:	f003 f8e7 	bl	800c164 <_init>
 8008f96:	4d0a      	ldr	r5, [pc, #40]	; (8008fc0 <__libc_init_array+0x40>)
 8008f98:	4c0a      	ldr	r4, [pc, #40]	; (8008fc4 <__libc_init_array+0x44>)
 8008f9a:	1b64      	subs	r4, r4, r5
 8008f9c:	10a4      	asrs	r4, r4, #2
 8008f9e:	42a6      	cmp	r6, r4
 8008fa0:	d105      	bne.n	8008fae <__libc_init_array+0x2e>
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	00b3      	lsls	r3, r6, #2
 8008fa6:	58eb      	ldr	r3, [r5, r3]
 8008fa8:	4798      	blx	r3
 8008faa:	3601      	adds	r6, #1
 8008fac:	e7ee      	b.n	8008f8c <__libc_init_array+0xc>
 8008fae:	00b3      	lsls	r3, r6, #2
 8008fb0:	58eb      	ldr	r3, [r5, r3]
 8008fb2:	4798      	blx	r3
 8008fb4:	3601      	adds	r6, #1
 8008fb6:	e7f2      	b.n	8008f9e <__libc_init_array+0x1e>
 8008fb8:	0800c6a8 	.word	0x0800c6a8
 8008fbc:	0800c6a8 	.word	0x0800c6a8
 8008fc0:	0800c6a8 	.word	0x0800c6a8
 8008fc4:	0800c6ac 	.word	0x0800c6ac

08008fc8 <malloc>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	4b03      	ldr	r3, [pc, #12]	; (8008fd8 <malloc+0x10>)
 8008fcc:	0001      	movs	r1, r0
 8008fce:	6818      	ldr	r0, [r3, #0]
 8008fd0:	f000 f872 	bl	80090b8 <_malloc_r>
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	2000000c 	.word	0x2000000c

08008fdc <__ascii_mbtowc>:
 8008fdc:	b082      	sub	sp, #8
 8008fde:	2900      	cmp	r1, #0
 8008fe0:	d100      	bne.n	8008fe4 <__ascii_mbtowc+0x8>
 8008fe2:	a901      	add	r1, sp, #4
 8008fe4:	1e10      	subs	r0, r2, #0
 8008fe6:	d006      	beq.n	8008ff6 <__ascii_mbtowc+0x1a>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d006      	beq.n	8008ffa <__ascii_mbtowc+0x1e>
 8008fec:	7813      	ldrb	r3, [r2, #0]
 8008fee:	600b      	str	r3, [r1, #0]
 8008ff0:	7810      	ldrb	r0, [r2, #0]
 8008ff2:	1e43      	subs	r3, r0, #1
 8008ff4:	4198      	sbcs	r0, r3
 8008ff6:	b002      	add	sp, #8
 8008ff8:	4770      	bx	lr
 8008ffa:	2002      	movs	r0, #2
 8008ffc:	4240      	negs	r0, r0
 8008ffe:	e7fa      	b.n	8008ff6 <__ascii_mbtowc+0x1a>

08009000 <memcpy>:
 8009000:	2300      	movs	r3, #0
 8009002:	b510      	push	{r4, lr}
 8009004:	429a      	cmp	r2, r3
 8009006:	d100      	bne.n	800900a <memcpy+0xa>
 8009008:	bd10      	pop	{r4, pc}
 800900a:	5ccc      	ldrb	r4, [r1, r3]
 800900c:	54c4      	strb	r4, [r0, r3]
 800900e:	3301      	adds	r3, #1
 8009010:	e7f8      	b.n	8009004 <memcpy+0x4>

08009012 <memset>:
 8009012:	0003      	movs	r3, r0
 8009014:	1812      	adds	r2, r2, r0
 8009016:	4293      	cmp	r3, r2
 8009018:	d100      	bne.n	800901c <memset+0xa>
 800901a:	4770      	bx	lr
 800901c:	7019      	strb	r1, [r3, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	e7f9      	b.n	8009016 <memset+0x4>
	...

08009024 <_free_r>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	0005      	movs	r5, r0
 8009028:	2900      	cmp	r1, #0
 800902a:	d010      	beq.n	800904e <_free_r+0x2a>
 800902c:	1f0c      	subs	r4, r1, #4
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	da00      	bge.n	8009036 <_free_r+0x12>
 8009034:	18e4      	adds	r4, r4, r3
 8009036:	0028      	movs	r0, r5
 8009038:	f001 fbb5 	bl	800a7a6 <__malloc_lock>
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <_free_r+0x90>)
 800903e:	6813      	ldr	r3, [r2, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d105      	bne.n	8009050 <_free_r+0x2c>
 8009044:	6063      	str	r3, [r4, #4]
 8009046:	6014      	str	r4, [r2, #0]
 8009048:	0028      	movs	r0, r5
 800904a:	f001 fbad 	bl	800a7a8 <__malloc_unlock>
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	42a3      	cmp	r3, r4
 8009052:	d909      	bls.n	8009068 <_free_r+0x44>
 8009054:	6821      	ldr	r1, [r4, #0]
 8009056:	1860      	adds	r0, r4, r1
 8009058:	4283      	cmp	r3, r0
 800905a:	d1f3      	bne.n	8009044 <_free_r+0x20>
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	1841      	adds	r1, r0, r1
 8009062:	6021      	str	r1, [r4, #0]
 8009064:	e7ee      	b.n	8009044 <_free_r+0x20>
 8009066:	0013      	movs	r3, r2
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	2a00      	cmp	r2, #0
 800906c:	d001      	beq.n	8009072 <_free_r+0x4e>
 800906e:	42a2      	cmp	r2, r4
 8009070:	d9f9      	bls.n	8009066 <_free_r+0x42>
 8009072:	6819      	ldr	r1, [r3, #0]
 8009074:	1858      	adds	r0, r3, r1
 8009076:	42a0      	cmp	r0, r4
 8009078:	d10b      	bne.n	8009092 <_free_r+0x6e>
 800907a:	6820      	ldr	r0, [r4, #0]
 800907c:	1809      	adds	r1, r1, r0
 800907e:	1858      	adds	r0, r3, r1
 8009080:	6019      	str	r1, [r3, #0]
 8009082:	4282      	cmp	r2, r0
 8009084:	d1e0      	bne.n	8009048 <_free_r+0x24>
 8009086:	6810      	ldr	r0, [r2, #0]
 8009088:	6852      	ldr	r2, [r2, #4]
 800908a:	1841      	adds	r1, r0, r1
 800908c:	6019      	str	r1, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	e7da      	b.n	8009048 <_free_r+0x24>
 8009092:	42a0      	cmp	r0, r4
 8009094:	d902      	bls.n	800909c <_free_r+0x78>
 8009096:	230c      	movs	r3, #12
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	e7d5      	b.n	8009048 <_free_r+0x24>
 800909c:	6821      	ldr	r1, [r4, #0]
 800909e:	1860      	adds	r0, r4, r1
 80090a0:	4282      	cmp	r2, r0
 80090a2:	d103      	bne.n	80090ac <_free_r+0x88>
 80090a4:	6810      	ldr	r0, [r2, #0]
 80090a6:	6852      	ldr	r2, [r2, #4]
 80090a8:	1841      	adds	r1, r0, r1
 80090aa:	6021      	str	r1, [r4, #0]
 80090ac:	6062      	str	r2, [r4, #4]
 80090ae:	605c      	str	r4, [r3, #4]
 80090b0:	e7ca      	b.n	8009048 <_free_r+0x24>
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	20000208 	.word	0x20000208

080090b8 <_malloc_r>:
 80090b8:	2303      	movs	r3, #3
 80090ba:	b570      	push	{r4, r5, r6, lr}
 80090bc:	1ccd      	adds	r5, r1, #3
 80090be:	439d      	bics	r5, r3
 80090c0:	3508      	adds	r5, #8
 80090c2:	0006      	movs	r6, r0
 80090c4:	2d0c      	cmp	r5, #12
 80090c6:	d21e      	bcs.n	8009106 <_malloc_r+0x4e>
 80090c8:	250c      	movs	r5, #12
 80090ca:	42a9      	cmp	r1, r5
 80090cc:	d81d      	bhi.n	800910a <_malloc_r+0x52>
 80090ce:	0030      	movs	r0, r6
 80090d0:	f001 fb69 	bl	800a7a6 <__malloc_lock>
 80090d4:	4a25      	ldr	r2, [pc, #148]	; (800916c <_malloc_r+0xb4>)
 80090d6:	6814      	ldr	r4, [r2, #0]
 80090d8:	0021      	movs	r1, r4
 80090da:	2900      	cmp	r1, #0
 80090dc:	d119      	bne.n	8009112 <_malloc_r+0x5a>
 80090de:	4c24      	ldr	r4, [pc, #144]	; (8009170 <_malloc_r+0xb8>)
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <_malloc_r+0x36>
 80090e6:	0030      	movs	r0, r6
 80090e8:	f000 fca2 	bl	8009a30 <_sbrk_r>
 80090ec:	6020      	str	r0, [r4, #0]
 80090ee:	0029      	movs	r1, r5
 80090f0:	0030      	movs	r0, r6
 80090f2:	f000 fc9d 	bl	8009a30 <_sbrk_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d12b      	bne.n	8009152 <_malloc_r+0x9a>
 80090fa:	230c      	movs	r3, #12
 80090fc:	0030      	movs	r0, r6
 80090fe:	6033      	str	r3, [r6, #0]
 8009100:	f001 fb52 	bl	800a7a8 <__malloc_unlock>
 8009104:	e003      	b.n	800910e <_malloc_r+0x56>
 8009106:	2d00      	cmp	r5, #0
 8009108:	dadf      	bge.n	80090ca <_malloc_r+0x12>
 800910a:	230c      	movs	r3, #12
 800910c:	6033      	str	r3, [r6, #0]
 800910e:	2000      	movs	r0, #0
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	680b      	ldr	r3, [r1, #0]
 8009114:	1b5b      	subs	r3, r3, r5
 8009116:	d419      	bmi.n	800914c <_malloc_r+0x94>
 8009118:	2b0b      	cmp	r3, #11
 800911a:	d903      	bls.n	8009124 <_malloc_r+0x6c>
 800911c:	600b      	str	r3, [r1, #0]
 800911e:	18cc      	adds	r4, r1, r3
 8009120:	6025      	str	r5, [r4, #0]
 8009122:	e003      	b.n	800912c <_malloc_r+0x74>
 8009124:	684b      	ldr	r3, [r1, #4]
 8009126:	428c      	cmp	r4, r1
 8009128:	d10d      	bne.n	8009146 <_malloc_r+0x8e>
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	0030      	movs	r0, r6
 800912e:	f001 fb3b 	bl	800a7a8 <__malloc_unlock>
 8009132:	0020      	movs	r0, r4
 8009134:	2207      	movs	r2, #7
 8009136:	300b      	adds	r0, #11
 8009138:	1d23      	adds	r3, r4, #4
 800913a:	4390      	bics	r0, r2
 800913c:	1ac3      	subs	r3, r0, r3
 800913e:	d0e7      	beq.n	8009110 <_malloc_r+0x58>
 8009140:	425a      	negs	r2, r3
 8009142:	50e2      	str	r2, [r4, r3]
 8009144:	e7e4      	b.n	8009110 <_malloc_r+0x58>
 8009146:	6063      	str	r3, [r4, #4]
 8009148:	000c      	movs	r4, r1
 800914a:	e7ef      	b.n	800912c <_malloc_r+0x74>
 800914c:	000c      	movs	r4, r1
 800914e:	6849      	ldr	r1, [r1, #4]
 8009150:	e7c3      	b.n	80090da <_malloc_r+0x22>
 8009152:	2303      	movs	r3, #3
 8009154:	1cc4      	adds	r4, r0, #3
 8009156:	439c      	bics	r4, r3
 8009158:	42a0      	cmp	r0, r4
 800915a:	d0e1      	beq.n	8009120 <_malloc_r+0x68>
 800915c:	1a21      	subs	r1, r4, r0
 800915e:	0030      	movs	r0, r6
 8009160:	f000 fc66 	bl	8009a30 <_sbrk_r>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d1db      	bne.n	8009120 <_malloc_r+0x68>
 8009168:	e7c7      	b.n	80090fa <_malloc_r+0x42>
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	20000208 	.word	0x20000208
 8009170:	2000020c 	.word	0x2000020c

08009174 <__cvt>:
 8009174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009176:	b08b      	sub	sp, #44	; 0x2c
 8009178:	0014      	movs	r4, r2
 800917a:	1e1d      	subs	r5, r3, #0
 800917c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800917e:	da53      	bge.n	8009228 <__cvt+0xb4>
 8009180:	2480      	movs	r4, #128	; 0x80
 8009182:	0624      	lsls	r4, r4, #24
 8009184:	191b      	adds	r3, r3, r4
 8009186:	001d      	movs	r5, r3
 8009188:	0014      	movs	r4, r2
 800918a:	232d      	movs	r3, #45	; 0x2d
 800918c:	700b      	strb	r3, [r1, #0]
 800918e:	2320      	movs	r3, #32
 8009190:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009192:	2203      	movs	r2, #3
 8009194:	439e      	bics	r6, r3
 8009196:	2e46      	cmp	r6, #70	; 0x46
 8009198:	d007      	beq.n	80091aa <__cvt+0x36>
 800919a:	0033      	movs	r3, r6
 800919c:	3b45      	subs	r3, #69	; 0x45
 800919e:	4259      	negs	r1, r3
 80091a0:	414b      	adcs	r3, r1
 80091a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80091a4:	3a01      	subs	r2, #1
 80091a6:	18cb      	adds	r3, r1, r3
 80091a8:	9310      	str	r3, [sp, #64]	; 0x40
 80091aa:	ab09      	add	r3, sp, #36	; 0x24
 80091ac:	9304      	str	r3, [sp, #16]
 80091ae:	ab08      	add	r3, sp, #32
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091b4:	9200      	str	r2, [sp, #0]
 80091b6:	9302      	str	r3, [sp, #8]
 80091b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ba:	0022      	movs	r2, r4
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	002b      	movs	r3, r5
 80091c0:	f000 fcfa 	bl	8009bb8 <_dtoa_r>
 80091c4:	0007      	movs	r7, r0
 80091c6:	2e47      	cmp	r6, #71	; 0x47
 80091c8:	d102      	bne.n	80091d0 <__cvt+0x5c>
 80091ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091cc:	07db      	lsls	r3, r3, #31
 80091ce:	d524      	bpl.n	800921a <__cvt+0xa6>
 80091d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091d2:	18fb      	adds	r3, r7, r3
 80091d4:	9307      	str	r3, [sp, #28]
 80091d6:	2e46      	cmp	r6, #70	; 0x46
 80091d8:	d114      	bne.n	8009204 <__cvt+0x90>
 80091da:	783b      	ldrb	r3, [r7, #0]
 80091dc:	2b30      	cmp	r3, #48	; 0x30
 80091de:	d10c      	bne.n	80091fa <__cvt+0x86>
 80091e0:	2200      	movs	r2, #0
 80091e2:	2300      	movs	r3, #0
 80091e4:	0020      	movs	r0, r4
 80091e6:	0029      	movs	r1, r5
 80091e8:	f7f7 f926 	bl	8000438 <__aeabi_dcmpeq>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d104      	bne.n	80091fa <__cvt+0x86>
 80091f0:	2301      	movs	r3, #1
 80091f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091fc:	9a07      	ldr	r2, [sp, #28]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	18d3      	adds	r3, r2, r3
 8009202:	9307      	str	r3, [sp, #28]
 8009204:	2200      	movs	r2, #0
 8009206:	2300      	movs	r3, #0
 8009208:	0020      	movs	r0, r4
 800920a:	0029      	movs	r1, r5
 800920c:	f7f7 f914 	bl	8000438 <__aeabi_dcmpeq>
 8009210:	2230      	movs	r2, #48	; 0x30
 8009212:	2800      	cmp	r0, #0
 8009214:	d00d      	beq.n	8009232 <__cvt+0xbe>
 8009216:	9b07      	ldr	r3, [sp, #28]
 8009218:	9309      	str	r3, [sp, #36]	; 0x24
 800921a:	0038      	movs	r0, r7
 800921c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009220:	1bdb      	subs	r3, r3, r7
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	b00b      	add	sp, #44	; 0x2c
 8009226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009228:	2300      	movs	r3, #0
 800922a:	e7af      	b.n	800918c <__cvt+0x18>
 800922c:	1c59      	adds	r1, r3, #1
 800922e:	9109      	str	r1, [sp, #36]	; 0x24
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009234:	9907      	ldr	r1, [sp, #28]
 8009236:	428b      	cmp	r3, r1
 8009238:	d3f8      	bcc.n	800922c <__cvt+0xb8>
 800923a:	e7ee      	b.n	800921a <__cvt+0xa6>

0800923c <__exponent>:
 800923c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923e:	1c83      	adds	r3, r0, #2
 8009240:	b085      	sub	sp, #20
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	0006      	movs	r6, r0
 8009246:	000c      	movs	r4, r1
 8009248:	7002      	strb	r2, [r0, #0]
 800924a:	232b      	movs	r3, #43	; 0x2b
 800924c:	2900      	cmp	r1, #0
 800924e:	da01      	bge.n	8009254 <__exponent+0x18>
 8009250:	232d      	movs	r3, #45	; 0x2d
 8009252:	424c      	negs	r4, r1
 8009254:	7073      	strb	r3, [r6, #1]
 8009256:	2c09      	cmp	r4, #9
 8009258:	dd22      	ble.n	80092a0 <__exponent+0x64>
 800925a:	ab02      	add	r3, sp, #8
 800925c:	1ddd      	adds	r5, r3, #7
 800925e:	0020      	movs	r0, r4
 8009260:	210a      	movs	r1, #10
 8009262:	f7f7 f8d3 	bl	800040c <__aeabi_idivmod>
 8009266:	1e6f      	subs	r7, r5, #1
 8009268:	3130      	adds	r1, #48	; 0x30
 800926a:	7039      	strb	r1, [r7, #0]
 800926c:	0020      	movs	r0, r4
 800926e:	210a      	movs	r1, #10
 8009270:	f7f6 ffe6 	bl	8000240 <__divsi3>
 8009274:	0004      	movs	r4, r0
 8009276:	2809      	cmp	r0, #9
 8009278:	dc0b      	bgt.n	8009292 <__exponent+0x56>
 800927a:	3d02      	subs	r5, #2
 800927c:	3430      	adds	r4, #48	; 0x30
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	702c      	strb	r4, [r5, #0]
 8009282:	aa02      	add	r2, sp, #8
 8009284:	3207      	adds	r2, #7
 8009286:	0018      	movs	r0, r3
 8009288:	42aa      	cmp	r2, r5
 800928a:	d804      	bhi.n	8009296 <__exponent+0x5a>
 800928c:	1b80      	subs	r0, r0, r6
 800928e:	b005      	add	sp, #20
 8009290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009292:	003d      	movs	r5, r7
 8009294:	e7e3      	b.n	800925e <__exponent+0x22>
 8009296:	782a      	ldrb	r2, [r5, #0]
 8009298:	3501      	adds	r5, #1
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	e7f0      	b.n	8009282 <__exponent+0x46>
 80092a0:	2330      	movs	r3, #48	; 0x30
 80092a2:	18e4      	adds	r4, r4, r3
 80092a4:	70b3      	strb	r3, [r6, #2]
 80092a6:	1d30      	adds	r0, r6, #4
 80092a8:	70f4      	strb	r4, [r6, #3]
 80092aa:	e7ef      	b.n	800928c <__exponent+0x50>

080092ac <_printf_float>:
 80092ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ae:	b095      	sub	sp, #84	; 0x54
 80092b0:	000c      	movs	r4, r1
 80092b2:	920a      	str	r2, [sp, #40]	; 0x28
 80092b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80092b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80092b8:	9009      	str	r0, [sp, #36]	; 0x24
 80092ba:	f001 fa5d 	bl	800a778 <_localeconv_r>
 80092be:	6803      	ldr	r3, [r0, #0]
 80092c0:	0018      	movs	r0, r3
 80092c2:	930c      	str	r3, [sp, #48]	; 0x30
 80092c4:	f7f6 ff20 	bl	8000108 <strlen>
 80092c8:	2300      	movs	r3, #0
 80092ca:	9312      	str	r3, [sp, #72]	; 0x48
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	900e      	str	r0, [sp, #56]	; 0x38
 80092d0:	930d      	str	r3, [sp, #52]	; 0x34
 80092d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092d4:	7e27      	ldrb	r7, [r4, #24]
 80092d6:	682b      	ldr	r3, [r5, #0]
 80092d8:	2207      	movs	r2, #7
 80092da:	05c9      	lsls	r1, r1, #23
 80092dc:	d545      	bpl.n	800936a <_printf_float+0xbe>
 80092de:	189b      	adds	r3, r3, r2
 80092e0:	4393      	bics	r3, r2
 80092e2:	001a      	movs	r2, r3
 80092e4:	3208      	adds	r2, #8
 80092e6:	602a      	str	r2, [r5, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	64a2      	str	r2, [r4, #72]	; 0x48
 80092ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80092f0:	2201      	movs	r2, #1
 80092f2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80092f4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80092f6:	006b      	lsls	r3, r5, #1
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80092fc:	4252      	negs	r2, r2
 80092fe:	4bac      	ldr	r3, [pc, #688]	; (80095b0 <_printf_float+0x304>)
 8009300:	0030      	movs	r0, r6
 8009302:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009304:	f7f9 f94c 	bl	80025a0 <__aeabi_dcmpun>
 8009308:	2800      	cmp	r0, #0
 800930a:	d130      	bne.n	800936e <_printf_float+0xc2>
 800930c:	2201      	movs	r2, #1
 800930e:	4ba8      	ldr	r3, [pc, #672]	; (80095b0 <_printf_float+0x304>)
 8009310:	4252      	negs	r2, r2
 8009312:	0030      	movs	r0, r6
 8009314:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009316:	f7f7 f89f 	bl	8000458 <__aeabi_dcmple>
 800931a:	2800      	cmp	r0, #0
 800931c:	d127      	bne.n	800936e <_printf_float+0xc2>
 800931e:	2200      	movs	r2, #0
 8009320:	2300      	movs	r3, #0
 8009322:	0030      	movs	r0, r6
 8009324:	0029      	movs	r1, r5
 8009326:	f7f7 f88d 	bl	8000444 <__aeabi_dcmplt>
 800932a:	2800      	cmp	r0, #0
 800932c:	d003      	beq.n	8009336 <_printf_float+0x8a>
 800932e:	0023      	movs	r3, r4
 8009330:	222d      	movs	r2, #45	; 0x2d
 8009332:	3343      	adds	r3, #67	; 0x43
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	4d9f      	ldr	r5, [pc, #636]	; (80095b4 <_printf_float+0x308>)
 8009338:	2f47      	cmp	r7, #71	; 0x47
 800933a:	d800      	bhi.n	800933e <_printf_float+0x92>
 800933c:	4d9e      	ldr	r5, [pc, #632]	; (80095b8 <_printf_float+0x30c>)
 800933e:	2303      	movs	r3, #3
 8009340:	2600      	movs	r6, #0
 8009342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009344:	6123      	str	r3, [r4, #16]
 8009346:	3301      	adds	r3, #1
 8009348:	439a      	bics	r2, r3
 800934a:	6022      	str	r2, [r4, #0]
 800934c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800934e:	aa13      	add	r2, sp, #76	; 0x4c
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	0021      	movs	r1, r4
 8009354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009358:	f000 f9f4 	bl	8009744 <_printf_common>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d000      	beq.n	8009362 <_printf_float+0xb6>
 8009360:	e093      	b.n	800948a <_printf_float+0x1de>
 8009362:	2001      	movs	r0, #1
 8009364:	4240      	negs	r0, r0
 8009366:	b015      	add	sp, #84	; 0x54
 8009368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800936a:	3307      	adds	r3, #7
 800936c:	e7b8      	b.n	80092e0 <_printf_float+0x34>
 800936e:	0032      	movs	r2, r6
 8009370:	002b      	movs	r3, r5
 8009372:	0030      	movs	r0, r6
 8009374:	0029      	movs	r1, r5
 8009376:	f7f9 f913 	bl	80025a0 <__aeabi_dcmpun>
 800937a:	2800      	cmp	r0, #0
 800937c:	d004      	beq.n	8009388 <_printf_float+0xdc>
 800937e:	4d8f      	ldr	r5, [pc, #572]	; (80095bc <_printf_float+0x310>)
 8009380:	2f47      	cmp	r7, #71	; 0x47
 8009382:	d8dc      	bhi.n	800933e <_printf_float+0x92>
 8009384:	4d8e      	ldr	r5, [pc, #568]	; (80095c0 <_printf_float+0x314>)
 8009386:	e7da      	b.n	800933e <_printf_float+0x92>
 8009388:	2380      	movs	r3, #128	; 0x80
 800938a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800938c:	6862      	ldr	r2, [r4, #4]
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	430b      	orrs	r3, r1
 8009392:	1c51      	adds	r1, r2, #1
 8009394:	d143      	bne.n	800941e <_printf_float+0x172>
 8009396:	3207      	adds	r2, #7
 8009398:	6062      	str	r2, [r4, #4]
 800939a:	aa12      	add	r2, sp, #72	; 0x48
 800939c:	2100      	movs	r1, #0
 800939e:	9205      	str	r2, [sp, #20]
 80093a0:	aa11      	add	r2, sp, #68	; 0x44
 80093a2:	9203      	str	r2, [sp, #12]
 80093a4:	2223      	movs	r2, #35	; 0x23
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	9106      	str	r1, [sp, #24]
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	a908      	add	r1, sp, #32
 80093ae:	6863      	ldr	r3, [r4, #4]
 80093b0:	1852      	adds	r2, r2, r1
 80093b2:	9202      	str	r2, [sp, #8]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	0032      	movs	r2, r6
 80093b8:	002b      	movs	r3, r5
 80093ba:	9704      	str	r7, [sp, #16]
 80093bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093be:	f7ff fed9 	bl	8009174 <__cvt>
 80093c2:	2320      	movs	r3, #32
 80093c4:	003a      	movs	r2, r7
 80093c6:	0005      	movs	r5, r0
 80093c8:	439a      	bics	r2, r3
 80093ca:	2a47      	cmp	r2, #71	; 0x47
 80093cc:	d107      	bne.n	80093de <_printf_float+0x132>
 80093ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093d0:	1cda      	adds	r2, r3, #3
 80093d2:	db02      	blt.n	80093da <_printf_float+0x12e>
 80093d4:	6862      	ldr	r2, [r4, #4]
 80093d6:	4293      	cmp	r3, r2
 80093d8:	dd45      	ble.n	8009466 <_printf_float+0x1ba>
 80093da:	3f02      	subs	r7, #2
 80093dc:	b2ff      	uxtb	r7, r7
 80093de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093e0:	2f65      	cmp	r7, #101	; 0x65
 80093e2:	d825      	bhi.n	8009430 <_printf_float+0x184>
 80093e4:	0020      	movs	r0, r4
 80093e6:	3901      	subs	r1, #1
 80093e8:	003a      	movs	r2, r7
 80093ea:	3050      	adds	r0, #80	; 0x50
 80093ec:	9111      	str	r1, [sp, #68]	; 0x44
 80093ee:	f7ff ff25 	bl	800923c <__exponent>
 80093f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093f4:	0006      	movs	r6, r0
 80093f6:	1813      	adds	r3, r2, r0
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	2a01      	cmp	r2, #1
 80093fc:	dc02      	bgt.n	8009404 <_printf_float+0x158>
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	07d2      	lsls	r2, r2, #31
 8009402:	d501      	bpl.n	8009408 <_printf_float+0x15c>
 8009404:	3301      	adds	r3, #1
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	2323      	movs	r3, #35	; 0x23
 800940a:	aa08      	add	r2, sp, #32
 800940c:	189b      	adds	r3, r3, r2
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d09b      	beq.n	800934c <_printf_float+0xa0>
 8009414:	0023      	movs	r3, r4
 8009416:	222d      	movs	r2, #45	; 0x2d
 8009418:	3343      	adds	r3, #67	; 0x43
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e796      	b.n	800934c <_printf_float+0xa0>
 800941e:	2f67      	cmp	r7, #103	; 0x67
 8009420:	d100      	bne.n	8009424 <_printf_float+0x178>
 8009422:	e176      	b.n	8009712 <_printf_float+0x466>
 8009424:	2f47      	cmp	r7, #71	; 0x47
 8009426:	d1b8      	bne.n	800939a <_printf_float+0xee>
 8009428:	2a00      	cmp	r2, #0
 800942a:	d1b6      	bne.n	800939a <_printf_float+0xee>
 800942c:	2201      	movs	r2, #1
 800942e:	e7b3      	b.n	8009398 <_printf_float+0xec>
 8009430:	2f66      	cmp	r7, #102	; 0x66
 8009432:	d119      	bne.n	8009468 <_printf_float+0x1bc>
 8009434:	6863      	ldr	r3, [r4, #4]
 8009436:	2900      	cmp	r1, #0
 8009438:	dd0c      	ble.n	8009454 <_printf_float+0x1a8>
 800943a:	6121      	str	r1, [r4, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <_printf_float+0x19a>
 8009440:	6822      	ldr	r2, [r4, #0]
 8009442:	07d2      	lsls	r2, r2, #31
 8009444:	d502      	bpl.n	800944c <_printf_float+0x1a0>
 8009446:	3301      	adds	r3, #1
 8009448:	185b      	adds	r3, r3, r1
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800944e:	2600      	movs	r6, #0
 8009450:	65a3      	str	r3, [r4, #88]	; 0x58
 8009452:	e7d9      	b.n	8009408 <_printf_float+0x15c>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <_printf_float+0x1b4>
 8009458:	2201      	movs	r2, #1
 800945a:	6821      	ldr	r1, [r4, #0]
 800945c:	4211      	tst	r1, r2
 800945e:	d000      	beq.n	8009462 <_printf_float+0x1b6>
 8009460:	1c9a      	adds	r2, r3, #2
 8009462:	6122      	str	r2, [r4, #16]
 8009464:	e7f2      	b.n	800944c <_printf_float+0x1a0>
 8009466:	2767      	movs	r7, #103	; 0x67
 8009468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800946a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800946c:	4293      	cmp	r3, r2
 800946e:	db05      	blt.n	800947c <_printf_float+0x1d0>
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	07d2      	lsls	r2, r2, #31
 8009476:	d5e9      	bpl.n	800944c <_printf_float+0x1a0>
 8009478:	3301      	adds	r3, #1
 800947a:	e7e6      	b.n	800944a <_printf_float+0x19e>
 800947c:	2101      	movs	r1, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	dc01      	bgt.n	8009486 <_printf_float+0x1da>
 8009482:	1849      	adds	r1, r1, r1
 8009484:	1ac9      	subs	r1, r1, r3
 8009486:	1852      	adds	r2, r2, r1
 8009488:	e7eb      	b.n	8009462 <_printf_float+0x1b6>
 800948a:	6822      	ldr	r2, [r4, #0]
 800948c:	0553      	lsls	r3, r2, #21
 800948e:	d408      	bmi.n	80094a2 <_printf_float+0x1f6>
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	002a      	movs	r2, r5
 8009494:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009496:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009498:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800949a:	47a8      	blx	r5
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d129      	bne.n	80094f4 <_printf_float+0x248>
 80094a0:	e75f      	b.n	8009362 <_printf_float+0xb6>
 80094a2:	2f65      	cmp	r7, #101	; 0x65
 80094a4:	d800      	bhi.n	80094a8 <_printf_float+0x1fc>
 80094a6:	e0e0      	b.n	800966a <_printf_float+0x3be>
 80094a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80094aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80094ac:	2200      	movs	r2, #0
 80094ae:	2300      	movs	r3, #0
 80094b0:	f7f6 ffc2 	bl	8000438 <__aeabi_dcmpeq>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d034      	beq.n	8009522 <_printf_float+0x276>
 80094b8:	2301      	movs	r3, #1
 80094ba:	4a42      	ldr	r2, [pc, #264]	; (80095c4 <_printf_float+0x318>)
 80094bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094c2:	47a8      	blx	r5
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d100      	bne.n	80094ca <_printf_float+0x21e>
 80094c8:	e74b      	b.n	8009362 <_printf_float+0xb6>
 80094ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094ce:	4293      	cmp	r3, r2
 80094d0:	db02      	blt.n	80094d8 <_printf_float+0x22c>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	07db      	lsls	r3, r3, #31
 80094d6:	d50d      	bpl.n	80094f4 <_printf_float+0x248>
 80094d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e2:	47a8      	blx	r5
 80094e4:	2500      	movs	r5, #0
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	d100      	bne.n	80094ec <_printf_float+0x240>
 80094ea:	e73a      	b.n	8009362 <_printf_float+0xb6>
 80094ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094ee:	3b01      	subs	r3, #1
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	dc0a      	bgt.n	800950a <_printf_float+0x25e>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	079b      	lsls	r3, r3, #30
 80094f8:	d500      	bpl.n	80094fc <_printf_float+0x250>
 80094fa:	e108      	b.n	800970e <_printf_float+0x462>
 80094fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094fe:	68e0      	ldr	r0, [r4, #12]
 8009500:	4298      	cmp	r0, r3
 8009502:	db00      	blt.n	8009506 <_printf_float+0x25a>
 8009504:	e72f      	b.n	8009366 <_printf_float+0xba>
 8009506:	0018      	movs	r0, r3
 8009508:	e72d      	b.n	8009366 <_printf_float+0xba>
 800950a:	0022      	movs	r2, r4
 800950c:	2301      	movs	r3, #1
 800950e:	321a      	adds	r2, #26
 8009510:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009514:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009516:	47b0      	blx	r6
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d100      	bne.n	800951e <_printf_float+0x272>
 800951c:	e721      	b.n	8009362 <_printf_float+0xb6>
 800951e:	3501      	adds	r5, #1
 8009520:	e7e4      	b.n	80094ec <_printf_float+0x240>
 8009522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009524:	2b00      	cmp	r3, #0
 8009526:	dc2d      	bgt.n	8009584 <_printf_float+0x2d8>
 8009528:	2301      	movs	r3, #1
 800952a:	4a26      	ldr	r2, [pc, #152]	; (80095c4 <_printf_float+0x318>)
 800952c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800952e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009530:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009532:	47b0      	blx	r6
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d100      	bne.n	800953a <_printf_float+0x28e>
 8009538:	e713      	b.n	8009362 <_printf_float+0xb6>
 800953a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <_printf_float+0x2a0>
 8009540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009542:	2b00      	cmp	r3, #0
 8009544:	d102      	bne.n	800954c <_printf_float+0x2a0>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	07db      	lsls	r3, r3, #31
 800954a:	d5d3      	bpl.n	80094f4 <_printf_float+0x248>
 800954c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800954e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009552:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009556:	47b0      	blx	r6
 8009558:	2600      	movs	r6, #0
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d100      	bne.n	8009560 <_printf_float+0x2b4>
 800955e:	e700      	b.n	8009362 <_printf_float+0xb6>
 8009560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009562:	425b      	negs	r3, r3
 8009564:	42b3      	cmp	r3, r6
 8009566:	dc01      	bgt.n	800956c <_printf_float+0x2c0>
 8009568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800956a:	e792      	b.n	8009492 <_printf_float+0x1e6>
 800956c:	0022      	movs	r2, r4
 800956e:	2301      	movs	r3, #1
 8009570:	321a      	adds	r2, #26
 8009572:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009576:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009578:	47b8      	blx	r7
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d100      	bne.n	8009580 <_printf_float+0x2d4>
 800957e:	e6f0      	b.n	8009362 <_printf_float+0xb6>
 8009580:	3601      	adds	r6, #1
 8009582:	e7ed      	b.n	8009560 <_printf_float+0x2b4>
 8009584:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009586:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009588:	429f      	cmp	r7, r3
 800958a:	dd00      	ble.n	800958e <_printf_float+0x2e2>
 800958c:	001f      	movs	r7, r3
 800958e:	2f00      	cmp	r7, #0
 8009590:	dd08      	ble.n	80095a4 <_printf_float+0x2f8>
 8009592:	003b      	movs	r3, r7
 8009594:	002a      	movs	r2, r5
 8009596:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800959c:	47b0      	blx	r6
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d100      	bne.n	80095a4 <_printf_float+0x2f8>
 80095a2:	e6de      	b.n	8009362 <_printf_float+0xb6>
 80095a4:	2300      	movs	r3, #0
 80095a6:	930d      	str	r3, [sp, #52]	; 0x34
 80095a8:	43fb      	mvns	r3, r7
 80095aa:	17db      	asrs	r3, r3, #31
 80095ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80095ae:	e018      	b.n	80095e2 <_printf_float+0x336>
 80095b0:	7fefffff 	.word	0x7fefffff
 80095b4:	0800c3a6 	.word	0x0800c3a6
 80095b8:	0800c3a2 	.word	0x0800c3a2
 80095bc:	0800c3ae 	.word	0x0800c3ae
 80095c0:	0800c3aa 	.word	0x0800c3aa
 80095c4:	0800c3b2 	.word	0x0800c3b2
 80095c8:	0022      	movs	r2, r4
 80095ca:	2301      	movs	r3, #1
 80095cc:	321a      	adds	r2, #26
 80095ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095d4:	47b0      	blx	r6
 80095d6:	1c43      	adds	r3, r0, #1
 80095d8:	d100      	bne.n	80095dc <_printf_float+0x330>
 80095da:	e6c2      	b.n	8009362 <_printf_float+0xb6>
 80095dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095de:	3301      	adds	r3, #1
 80095e0:	930d      	str	r3, [sp, #52]	; 0x34
 80095e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095e4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80095e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e8:	403b      	ands	r3, r7
 80095ea:	1af3      	subs	r3, r6, r3
 80095ec:	4293      	cmp	r3, r2
 80095ee:	dceb      	bgt.n	80095c8 <_printf_float+0x31c>
 80095f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095f4:	19ad      	adds	r5, r5, r6
 80095f6:	4293      	cmp	r3, r2
 80095f8:	db10      	blt.n	800961c <_printf_float+0x370>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	07db      	lsls	r3, r3, #31
 80095fe:	d40d      	bmi.n	800961c <_printf_float+0x370>
 8009600:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009604:	1bbe      	subs	r6, r7, r6
 8009606:	1aff      	subs	r7, r7, r3
 8009608:	42b7      	cmp	r7, r6
 800960a:	dd00      	ble.n	800960e <_printf_float+0x362>
 800960c:	0037      	movs	r7, r6
 800960e:	2f00      	cmp	r7, #0
 8009610:	dc0d      	bgt.n	800962e <_printf_float+0x382>
 8009612:	43fe      	mvns	r6, r7
 8009614:	17f3      	asrs	r3, r6, #31
 8009616:	2500      	movs	r5, #0
 8009618:	930c      	str	r3, [sp, #48]	; 0x30
 800961a:	e01c      	b.n	8009656 <_printf_float+0x3aa>
 800961c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800961e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009620:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009622:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009624:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009626:	47b8      	blx	r7
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d1e9      	bne.n	8009600 <_printf_float+0x354>
 800962c:	e699      	b.n	8009362 <_printf_float+0xb6>
 800962e:	003b      	movs	r3, r7
 8009630:	002a      	movs	r2, r5
 8009632:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009636:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009638:	47a8      	blx	r5
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d1e9      	bne.n	8009612 <_printf_float+0x366>
 800963e:	e690      	b.n	8009362 <_printf_float+0xb6>
 8009640:	0022      	movs	r2, r4
 8009642:	2301      	movs	r3, #1
 8009644:	321a      	adds	r2, #26
 8009646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800964a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800964c:	47b0      	blx	r6
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d100      	bne.n	8009654 <_printf_float+0x3a8>
 8009652:	e686      	b.n	8009362 <_printf_float+0xb6>
 8009654:	3501      	adds	r5, #1
 8009656:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800965a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800965c:	1a9b      	subs	r3, r3, r2
 800965e:	003a      	movs	r2, r7
 8009660:	400a      	ands	r2, r1
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	42ab      	cmp	r3, r5
 8009666:	dceb      	bgt.n	8009640 <_printf_float+0x394>
 8009668:	e744      	b.n	80094f4 <_printf_float+0x248>
 800966a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800966c:	2b01      	cmp	r3, #1
 800966e:	dc02      	bgt.n	8009676 <_printf_float+0x3ca>
 8009670:	2301      	movs	r3, #1
 8009672:	421a      	tst	r2, r3
 8009674:	d032      	beq.n	80096dc <_printf_float+0x430>
 8009676:	2301      	movs	r3, #1
 8009678:	002a      	movs	r2, r5
 800967a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800967c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800967e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009680:	47b8      	blx	r7
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	d100      	bne.n	8009688 <_printf_float+0x3dc>
 8009686:	e66c      	b.n	8009362 <_printf_float+0xb6>
 8009688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800968a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800968c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800968e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009690:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009692:	3501      	adds	r5, #1
 8009694:	47b8      	blx	r7
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	d100      	bne.n	800969c <_printf_float+0x3f0>
 800969a:	e662      	b.n	8009362 <_printf_float+0xb6>
 800969c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800969e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80096a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096a2:	2200      	movs	r2, #0
 80096a4:	1e5f      	subs	r7, r3, #1
 80096a6:	2300      	movs	r3, #0
 80096a8:	f7f6 fec6 	bl	8000438 <__aeabi_dcmpeq>
 80096ac:	003b      	movs	r3, r7
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d014      	beq.n	80096dc <_printf_float+0x430>
 80096b2:	2500      	movs	r5, #0
 80096b4:	e00a      	b.n	80096cc <_printf_float+0x420>
 80096b6:	0022      	movs	r2, r4
 80096b8:	2301      	movs	r3, #1
 80096ba:	321a      	adds	r2, #26
 80096bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80096c2:	47b8      	blx	r7
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d100      	bne.n	80096ca <_printf_float+0x41e>
 80096c8:	e64b      	b.n	8009362 <_printf_float+0xb6>
 80096ca:	3501      	adds	r5, #1
 80096cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ce:	3b01      	subs	r3, #1
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dcf0      	bgt.n	80096b6 <_printf_float+0x40a>
 80096d4:	0022      	movs	r2, r4
 80096d6:	0033      	movs	r3, r6
 80096d8:	3250      	adds	r2, #80	; 0x50
 80096da:	e6db      	b.n	8009494 <_printf_float+0x1e8>
 80096dc:	002a      	movs	r2, r5
 80096de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096e4:	47a8      	blx	r5
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d1f4      	bne.n	80096d4 <_printf_float+0x428>
 80096ea:	e63a      	b.n	8009362 <_printf_float+0xb6>
 80096ec:	0022      	movs	r2, r4
 80096ee:	2301      	movs	r3, #1
 80096f0:	3219      	adds	r2, #25
 80096f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80096f8:	47b0      	blx	r6
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	d100      	bne.n	8009700 <_printf_float+0x454>
 80096fe:	e630      	b.n	8009362 <_printf_float+0xb6>
 8009700:	3501      	adds	r5, #1
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009706:	1a9b      	subs	r3, r3, r2
 8009708:	42ab      	cmp	r3, r5
 800970a:	dcef      	bgt.n	80096ec <_printf_float+0x440>
 800970c:	e6f6      	b.n	80094fc <_printf_float+0x250>
 800970e:	2500      	movs	r5, #0
 8009710:	e7f7      	b.n	8009702 <_printf_float+0x456>
 8009712:	2a00      	cmp	r2, #0
 8009714:	d100      	bne.n	8009718 <_printf_float+0x46c>
 8009716:	e689      	b.n	800942c <_printf_float+0x180>
 8009718:	2100      	movs	r1, #0
 800971a:	9106      	str	r1, [sp, #24]
 800971c:	a912      	add	r1, sp, #72	; 0x48
 800971e:	9105      	str	r1, [sp, #20]
 8009720:	a911      	add	r1, sp, #68	; 0x44
 8009722:	9103      	str	r1, [sp, #12]
 8009724:	2123      	movs	r1, #35	; 0x23
 8009726:	a808      	add	r0, sp, #32
 8009728:	1809      	adds	r1, r1, r0
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	9200      	str	r2, [sp, #0]
 8009730:	002b      	movs	r3, r5
 8009732:	9704      	str	r7, [sp, #16]
 8009734:	9102      	str	r1, [sp, #8]
 8009736:	0032      	movs	r2, r6
 8009738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800973a:	f7ff fd1b 	bl	8009174 <__cvt>
 800973e:	0005      	movs	r5, r0
 8009740:	e645      	b.n	80093ce <_printf_float+0x122>
 8009742:	46c0      	nop			; (mov r8, r8)

08009744 <_printf_common>:
 8009744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009746:	0015      	movs	r5, r2
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	688a      	ldr	r2, [r1, #8]
 800974c:	690b      	ldr	r3, [r1, #16]
 800974e:	9000      	str	r0, [sp, #0]
 8009750:	000c      	movs	r4, r1
 8009752:	4293      	cmp	r3, r2
 8009754:	da00      	bge.n	8009758 <_printf_common+0x14>
 8009756:	0013      	movs	r3, r2
 8009758:	0022      	movs	r2, r4
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	3243      	adds	r2, #67	; 0x43
 800975e:	7812      	ldrb	r2, [r2, #0]
 8009760:	2a00      	cmp	r2, #0
 8009762:	d001      	beq.n	8009768 <_printf_common+0x24>
 8009764:	3301      	adds	r3, #1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	069b      	lsls	r3, r3, #26
 800976c:	d502      	bpl.n	8009774 <_printf_common+0x30>
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	3302      	adds	r3, #2
 8009772:	602b      	str	r3, [r5, #0]
 8009774:	2706      	movs	r7, #6
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	401f      	ands	r7, r3
 800977a:	d027      	beq.n	80097cc <_printf_common+0x88>
 800977c:	0023      	movs	r3, r4
 800977e:	3343      	adds	r3, #67	; 0x43
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	1e5a      	subs	r2, r3, #1
 8009784:	4193      	sbcs	r3, r2
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	0692      	lsls	r2, r2, #26
 800978a:	d430      	bmi.n	80097ee <_printf_common+0xaa>
 800978c:	0022      	movs	r2, r4
 800978e:	9901      	ldr	r1, [sp, #4]
 8009790:	3243      	adds	r2, #67	; 0x43
 8009792:	9800      	ldr	r0, [sp, #0]
 8009794:	9e08      	ldr	r6, [sp, #32]
 8009796:	47b0      	blx	r6
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d025      	beq.n	80097e8 <_printf_common+0xa4>
 800979c:	2306      	movs	r3, #6
 800979e:	6820      	ldr	r0, [r4, #0]
 80097a0:	682a      	ldr	r2, [r5, #0]
 80097a2:	68e1      	ldr	r1, [r4, #12]
 80097a4:	4003      	ands	r3, r0
 80097a6:	2500      	movs	r5, #0
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d103      	bne.n	80097b4 <_printf_common+0x70>
 80097ac:	1a8d      	subs	r5, r1, r2
 80097ae:	43eb      	mvns	r3, r5
 80097b0:	17db      	asrs	r3, r3, #31
 80097b2:	401d      	ands	r5, r3
 80097b4:	68a3      	ldr	r3, [r4, #8]
 80097b6:	6922      	ldr	r2, [r4, #16]
 80097b8:	4293      	cmp	r3, r2
 80097ba:	dd01      	ble.n	80097c0 <_printf_common+0x7c>
 80097bc:	1a9b      	subs	r3, r3, r2
 80097be:	18ed      	adds	r5, r5, r3
 80097c0:	2700      	movs	r7, #0
 80097c2:	42bd      	cmp	r5, r7
 80097c4:	d120      	bne.n	8009808 <_printf_common+0xc4>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e010      	b.n	80097ec <_printf_common+0xa8>
 80097ca:	3701      	adds	r7, #1
 80097cc:	68e3      	ldr	r3, [r4, #12]
 80097ce:	682a      	ldr	r2, [r5, #0]
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	42bb      	cmp	r3, r7
 80097d4:	ddd2      	ble.n	800977c <_printf_common+0x38>
 80097d6:	0022      	movs	r2, r4
 80097d8:	2301      	movs	r3, #1
 80097da:	3219      	adds	r2, #25
 80097dc:	9901      	ldr	r1, [sp, #4]
 80097de:	9800      	ldr	r0, [sp, #0]
 80097e0:	9e08      	ldr	r6, [sp, #32]
 80097e2:	47b0      	blx	r6
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d1f0      	bne.n	80097ca <_printf_common+0x86>
 80097e8:	2001      	movs	r0, #1
 80097ea:	4240      	negs	r0, r0
 80097ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097ee:	2030      	movs	r0, #48	; 0x30
 80097f0:	18e1      	adds	r1, r4, r3
 80097f2:	3143      	adds	r1, #67	; 0x43
 80097f4:	7008      	strb	r0, [r1, #0]
 80097f6:	0021      	movs	r1, r4
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	3145      	adds	r1, #69	; 0x45
 80097fc:	7809      	ldrb	r1, [r1, #0]
 80097fe:	18a2      	adds	r2, r4, r2
 8009800:	3243      	adds	r2, #67	; 0x43
 8009802:	3302      	adds	r3, #2
 8009804:	7011      	strb	r1, [r2, #0]
 8009806:	e7c1      	b.n	800978c <_printf_common+0x48>
 8009808:	0022      	movs	r2, r4
 800980a:	2301      	movs	r3, #1
 800980c:	321a      	adds	r2, #26
 800980e:	9901      	ldr	r1, [sp, #4]
 8009810:	9800      	ldr	r0, [sp, #0]
 8009812:	9e08      	ldr	r6, [sp, #32]
 8009814:	47b0      	blx	r6
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	d0e6      	beq.n	80097e8 <_printf_common+0xa4>
 800981a:	3701      	adds	r7, #1
 800981c:	e7d1      	b.n	80097c2 <_printf_common+0x7e>
	...

08009820 <_printf_i>:
 8009820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009822:	b089      	sub	sp, #36	; 0x24
 8009824:	9204      	str	r2, [sp, #16]
 8009826:	000a      	movs	r2, r1
 8009828:	3243      	adds	r2, #67	; 0x43
 800982a:	9305      	str	r3, [sp, #20]
 800982c:	9003      	str	r0, [sp, #12]
 800982e:	9202      	str	r2, [sp, #8]
 8009830:	7e0a      	ldrb	r2, [r1, #24]
 8009832:	000c      	movs	r4, r1
 8009834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009836:	2a6e      	cmp	r2, #110	; 0x6e
 8009838:	d100      	bne.n	800983c <_printf_i+0x1c>
 800983a:	e086      	b.n	800994a <_printf_i+0x12a>
 800983c:	d81f      	bhi.n	800987e <_printf_i+0x5e>
 800983e:	2a63      	cmp	r2, #99	; 0x63
 8009840:	d033      	beq.n	80098aa <_printf_i+0x8a>
 8009842:	d808      	bhi.n	8009856 <_printf_i+0x36>
 8009844:	2a00      	cmp	r2, #0
 8009846:	d100      	bne.n	800984a <_printf_i+0x2a>
 8009848:	e08c      	b.n	8009964 <_printf_i+0x144>
 800984a:	2a58      	cmp	r2, #88	; 0x58
 800984c:	d04d      	beq.n	80098ea <_printf_i+0xca>
 800984e:	0025      	movs	r5, r4
 8009850:	3542      	adds	r5, #66	; 0x42
 8009852:	702a      	strb	r2, [r5, #0]
 8009854:	e030      	b.n	80098b8 <_printf_i+0x98>
 8009856:	2a64      	cmp	r2, #100	; 0x64
 8009858:	d001      	beq.n	800985e <_printf_i+0x3e>
 800985a:	2a69      	cmp	r2, #105	; 0x69
 800985c:	d1f7      	bne.n	800984e <_printf_i+0x2e>
 800985e:	6819      	ldr	r1, [r3, #0]
 8009860:	6825      	ldr	r5, [r4, #0]
 8009862:	1d0a      	adds	r2, r1, #4
 8009864:	0628      	lsls	r0, r5, #24
 8009866:	d529      	bpl.n	80098bc <_printf_i+0x9c>
 8009868:	6808      	ldr	r0, [r1, #0]
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	2800      	cmp	r0, #0
 800986e:	da03      	bge.n	8009878 <_printf_i+0x58>
 8009870:	232d      	movs	r3, #45	; 0x2d
 8009872:	9a02      	ldr	r2, [sp, #8]
 8009874:	4240      	negs	r0, r0
 8009876:	7013      	strb	r3, [r2, #0]
 8009878:	4e6b      	ldr	r6, [pc, #428]	; (8009a28 <_printf_i+0x208>)
 800987a:	270a      	movs	r7, #10
 800987c:	e04f      	b.n	800991e <_printf_i+0xfe>
 800987e:	2a73      	cmp	r2, #115	; 0x73
 8009880:	d074      	beq.n	800996c <_printf_i+0x14c>
 8009882:	d808      	bhi.n	8009896 <_printf_i+0x76>
 8009884:	2a6f      	cmp	r2, #111	; 0x6f
 8009886:	d01f      	beq.n	80098c8 <_printf_i+0xa8>
 8009888:	2a70      	cmp	r2, #112	; 0x70
 800988a:	d1e0      	bne.n	800984e <_printf_i+0x2e>
 800988c:	2220      	movs	r2, #32
 800988e:	6809      	ldr	r1, [r1, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	e003      	b.n	800989e <_printf_i+0x7e>
 8009896:	2a75      	cmp	r2, #117	; 0x75
 8009898:	d016      	beq.n	80098c8 <_printf_i+0xa8>
 800989a:	2a78      	cmp	r2, #120	; 0x78
 800989c:	d1d7      	bne.n	800984e <_printf_i+0x2e>
 800989e:	0022      	movs	r2, r4
 80098a0:	2178      	movs	r1, #120	; 0x78
 80098a2:	3245      	adds	r2, #69	; 0x45
 80098a4:	7011      	strb	r1, [r2, #0]
 80098a6:	4e61      	ldr	r6, [pc, #388]	; (8009a2c <_printf_i+0x20c>)
 80098a8:	e022      	b.n	80098f0 <_printf_i+0xd0>
 80098aa:	0025      	movs	r5, r4
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	3542      	adds	r5, #66	; 0x42
 80098b0:	1d11      	adds	r1, r2, #4
 80098b2:	6019      	str	r1, [r3, #0]
 80098b4:	6813      	ldr	r3, [r2, #0]
 80098b6:	702b      	strb	r3, [r5, #0]
 80098b8:	2301      	movs	r3, #1
 80098ba:	e065      	b.n	8009988 <_printf_i+0x168>
 80098bc:	6808      	ldr	r0, [r1, #0]
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	0669      	lsls	r1, r5, #25
 80098c2:	d5d3      	bpl.n	800986c <_printf_i+0x4c>
 80098c4:	b200      	sxth	r0, r0
 80098c6:	e7d1      	b.n	800986c <_printf_i+0x4c>
 80098c8:	6819      	ldr	r1, [r3, #0]
 80098ca:	6825      	ldr	r5, [r4, #0]
 80098cc:	1d08      	adds	r0, r1, #4
 80098ce:	6018      	str	r0, [r3, #0]
 80098d0:	6808      	ldr	r0, [r1, #0]
 80098d2:	062e      	lsls	r6, r5, #24
 80098d4:	d505      	bpl.n	80098e2 <_printf_i+0xc2>
 80098d6:	4e54      	ldr	r6, [pc, #336]	; (8009a28 <_printf_i+0x208>)
 80098d8:	2708      	movs	r7, #8
 80098da:	2a6f      	cmp	r2, #111	; 0x6f
 80098dc:	d01b      	beq.n	8009916 <_printf_i+0xf6>
 80098de:	270a      	movs	r7, #10
 80098e0:	e019      	b.n	8009916 <_printf_i+0xf6>
 80098e2:	066d      	lsls	r5, r5, #25
 80098e4:	d5f7      	bpl.n	80098d6 <_printf_i+0xb6>
 80098e6:	b280      	uxth	r0, r0
 80098e8:	e7f5      	b.n	80098d6 <_printf_i+0xb6>
 80098ea:	3145      	adds	r1, #69	; 0x45
 80098ec:	4e4e      	ldr	r6, [pc, #312]	; (8009a28 <_printf_i+0x208>)
 80098ee:	700a      	strb	r2, [r1, #0]
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	1d01      	adds	r1, r0, #4
 80098f6:	6800      	ldr	r0, [r0, #0]
 80098f8:	6019      	str	r1, [r3, #0]
 80098fa:	0615      	lsls	r5, r2, #24
 80098fc:	d521      	bpl.n	8009942 <_printf_i+0x122>
 80098fe:	07d3      	lsls	r3, r2, #31
 8009900:	d502      	bpl.n	8009908 <_printf_i+0xe8>
 8009902:	2320      	movs	r3, #32
 8009904:	431a      	orrs	r2, r3
 8009906:	6022      	str	r2, [r4, #0]
 8009908:	2710      	movs	r7, #16
 800990a:	2800      	cmp	r0, #0
 800990c:	d103      	bne.n	8009916 <_printf_i+0xf6>
 800990e:	2320      	movs	r3, #32
 8009910:	6822      	ldr	r2, [r4, #0]
 8009912:	439a      	bics	r2, r3
 8009914:	6022      	str	r2, [r4, #0]
 8009916:	0023      	movs	r3, r4
 8009918:	2200      	movs	r2, #0
 800991a:	3343      	adds	r3, #67	; 0x43
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	6863      	ldr	r3, [r4, #4]
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	db58      	blt.n	80099d8 <_printf_i+0x1b8>
 8009926:	2204      	movs	r2, #4
 8009928:	6821      	ldr	r1, [r4, #0]
 800992a:	4391      	bics	r1, r2
 800992c:	6021      	str	r1, [r4, #0]
 800992e:	2800      	cmp	r0, #0
 8009930:	d154      	bne.n	80099dc <_printf_i+0x1bc>
 8009932:	9d02      	ldr	r5, [sp, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d05a      	beq.n	80099ee <_printf_i+0x1ce>
 8009938:	0025      	movs	r5, r4
 800993a:	7833      	ldrb	r3, [r6, #0]
 800993c:	3542      	adds	r5, #66	; 0x42
 800993e:	702b      	strb	r3, [r5, #0]
 8009940:	e055      	b.n	80099ee <_printf_i+0x1ce>
 8009942:	0655      	lsls	r5, r2, #25
 8009944:	d5db      	bpl.n	80098fe <_printf_i+0xde>
 8009946:	b280      	uxth	r0, r0
 8009948:	e7d9      	b.n	80098fe <_printf_i+0xde>
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	680d      	ldr	r5, [r1, #0]
 800994e:	1d10      	adds	r0, r2, #4
 8009950:	6949      	ldr	r1, [r1, #20]
 8009952:	6018      	str	r0, [r3, #0]
 8009954:	6813      	ldr	r3, [r2, #0]
 8009956:	062e      	lsls	r6, r5, #24
 8009958:	d501      	bpl.n	800995e <_printf_i+0x13e>
 800995a:	6019      	str	r1, [r3, #0]
 800995c:	e002      	b.n	8009964 <_printf_i+0x144>
 800995e:	066d      	lsls	r5, r5, #25
 8009960:	d5fb      	bpl.n	800995a <_printf_i+0x13a>
 8009962:	8019      	strh	r1, [r3, #0]
 8009964:	2300      	movs	r3, #0
 8009966:	9d02      	ldr	r5, [sp, #8]
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	e04f      	b.n	8009a0c <_printf_i+0x1ec>
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	1d11      	adds	r1, r2, #4
 8009970:	6019      	str	r1, [r3, #0]
 8009972:	6815      	ldr	r5, [r2, #0]
 8009974:	2100      	movs	r1, #0
 8009976:	6862      	ldr	r2, [r4, #4]
 8009978:	0028      	movs	r0, r5
 800997a:	f000 ff09 	bl	800a790 <memchr>
 800997e:	2800      	cmp	r0, #0
 8009980:	d001      	beq.n	8009986 <_printf_i+0x166>
 8009982:	1b40      	subs	r0, r0, r5
 8009984:	6060      	str	r0, [r4, #4]
 8009986:	6863      	ldr	r3, [r4, #4]
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	2300      	movs	r3, #0
 800998c:	9a02      	ldr	r2, [sp, #8]
 800998e:	7013      	strb	r3, [r2, #0]
 8009990:	e03c      	b.n	8009a0c <_printf_i+0x1ec>
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	002a      	movs	r2, r5
 8009996:	9904      	ldr	r1, [sp, #16]
 8009998:	9803      	ldr	r0, [sp, #12]
 800999a:	9d05      	ldr	r5, [sp, #20]
 800999c:	47a8      	blx	r5
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	d03e      	beq.n	8009a20 <_printf_i+0x200>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	079b      	lsls	r3, r3, #30
 80099a6:	d415      	bmi.n	80099d4 <_printf_i+0x1b4>
 80099a8:	9b07      	ldr	r3, [sp, #28]
 80099aa:	68e0      	ldr	r0, [r4, #12]
 80099ac:	4298      	cmp	r0, r3
 80099ae:	da39      	bge.n	8009a24 <_printf_i+0x204>
 80099b0:	0018      	movs	r0, r3
 80099b2:	e037      	b.n	8009a24 <_printf_i+0x204>
 80099b4:	0022      	movs	r2, r4
 80099b6:	2301      	movs	r3, #1
 80099b8:	3219      	adds	r2, #25
 80099ba:	9904      	ldr	r1, [sp, #16]
 80099bc:	9803      	ldr	r0, [sp, #12]
 80099be:	9e05      	ldr	r6, [sp, #20]
 80099c0:	47b0      	blx	r6
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	d02c      	beq.n	8009a20 <_printf_i+0x200>
 80099c6:	3501      	adds	r5, #1
 80099c8:	68e3      	ldr	r3, [r4, #12]
 80099ca:	9a07      	ldr	r2, [sp, #28]
 80099cc:	1a9b      	subs	r3, r3, r2
 80099ce:	42ab      	cmp	r3, r5
 80099d0:	dcf0      	bgt.n	80099b4 <_printf_i+0x194>
 80099d2:	e7e9      	b.n	80099a8 <_printf_i+0x188>
 80099d4:	2500      	movs	r5, #0
 80099d6:	e7f7      	b.n	80099c8 <_printf_i+0x1a8>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d0ad      	beq.n	8009938 <_printf_i+0x118>
 80099dc:	9d02      	ldr	r5, [sp, #8]
 80099de:	0039      	movs	r1, r7
 80099e0:	f7f6 fc2a 	bl	8000238 <__aeabi_uidivmod>
 80099e4:	5c73      	ldrb	r3, [r6, r1]
 80099e6:	3d01      	subs	r5, #1
 80099e8:	702b      	strb	r3, [r5, #0]
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d1f7      	bne.n	80099de <_printf_i+0x1be>
 80099ee:	2f08      	cmp	r7, #8
 80099f0:	d109      	bne.n	8009a06 <_printf_i+0x1e6>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	07db      	lsls	r3, r3, #31
 80099f6:	d506      	bpl.n	8009a06 <_printf_i+0x1e6>
 80099f8:	6863      	ldr	r3, [r4, #4]
 80099fa:	6922      	ldr	r2, [r4, #16]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	dc02      	bgt.n	8009a06 <_printf_i+0x1e6>
 8009a00:	2330      	movs	r3, #48	; 0x30
 8009a02:	3d01      	subs	r5, #1
 8009a04:	702b      	strb	r3, [r5, #0]
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	1b5b      	subs	r3, r3, r5
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	9b05      	ldr	r3, [sp, #20]
 8009a0e:	aa07      	add	r2, sp, #28
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	0021      	movs	r1, r4
 8009a14:	9b04      	ldr	r3, [sp, #16]
 8009a16:	9803      	ldr	r0, [sp, #12]
 8009a18:	f7ff fe94 	bl	8009744 <_printf_common>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d1b8      	bne.n	8009992 <_printf_i+0x172>
 8009a20:	2001      	movs	r0, #1
 8009a22:	4240      	negs	r0, r0
 8009a24:	b009      	add	sp, #36	; 0x24
 8009a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a28:	0800c3b4 	.word	0x0800c3b4
 8009a2c:	0800c3c5 	.word	0x0800c3c5

08009a30 <_sbrk_r>:
 8009a30:	2300      	movs	r3, #0
 8009a32:	b570      	push	{r4, r5, r6, lr}
 8009a34:	4c06      	ldr	r4, [pc, #24]	; (8009a50 <_sbrk_r+0x20>)
 8009a36:	0005      	movs	r5, r0
 8009a38:	0008      	movs	r0, r1
 8009a3a:	6023      	str	r3, [r4, #0]
 8009a3c:	f7f9 ffdc 	bl	80039f8 <_sbrk>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d103      	bne.n	8009a4c <_sbrk_r+0x1c>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d000      	beq.n	8009a4c <_sbrk_r+0x1c>
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	200003c8 	.word	0x200003c8

08009a54 <siprintf>:
 8009a54:	b40e      	push	{r1, r2, r3}
 8009a56:	b500      	push	{lr}
 8009a58:	490b      	ldr	r1, [pc, #44]	; (8009a88 <siprintf+0x34>)
 8009a5a:	b09c      	sub	sp, #112	; 0x70
 8009a5c:	ab1d      	add	r3, sp, #116	; 0x74
 8009a5e:	9002      	str	r0, [sp, #8]
 8009a60:	9006      	str	r0, [sp, #24]
 8009a62:	9107      	str	r1, [sp, #28]
 8009a64:	9104      	str	r1, [sp, #16]
 8009a66:	4809      	ldr	r0, [pc, #36]	; (8009a8c <siprintf+0x38>)
 8009a68:	4909      	ldr	r1, [pc, #36]	; (8009a90 <siprintf+0x3c>)
 8009a6a:	cb04      	ldmia	r3!, {r2}
 8009a6c:	9105      	str	r1, [sp, #20]
 8009a6e:	6800      	ldr	r0, [r0, #0]
 8009a70:	a902      	add	r1, sp, #8
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	f001 fa16 	bl	800aea4 <_svfiprintf_r>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9a02      	ldr	r2, [sp, #8]
 8009a7c:	7013      	strb	r3, [r2, #0]
 8009a7e:	b01c      	add	sp, #112	; 0x70
 8009a80:	bc08      	pop	{r3}
 8009a82:	b003      	add	sp, #12
 8009a84:	4718      	bx	r3
 8009a86:	46c0      	nop			; (mov r8, r8)
 8009a88:	7fffffff 	.word	0x7fffffff
 8009a8c:	2000000c 	.word	0x2000000c
 8009a90:	ffff0208 	.word	0xffff0208

08009a94 <__ascii_wctomb>:
 8009a94:	1e0b      	subs	r3, r1, #0
 8009a96:	d004      	beq.n	8009aa2 <__ascii_wctomb+0xe>
 8009a98:	2aff      	cmp	r2, #255	; 0xff
 8009a9a:	d904      	bls.n	8009aa6 <__ascii_wctomb+0x12>
 8009a9c:	238a      	movs	r3, #138	; 0x8a
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	3b8b      	subs	r3, #139	; 0x8b
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	4770      	bx	lr
 8009aa6:	700a      	strb	r2, [r1, #0]
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e7fa      	b.n	8009aa2 <__ascii_wctomb+0xe>

08009aac <quorem>:
 8009aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aae:	6903      	ldr	r3, [r0, #16]
 8009ab0:	690c      	ldr	r4, [r1, #16]
 8009ab2:	b089      	sub	sp, #36	; 0x24
 8009ab4:	0007      	movs	r7, r0
 8009ab6:	9105      	str	r1, [sp, #20]
 8009ab8:	2600      	movs	r6, #0
 8009aba:	42a3      	cmp	r3, r4
 8009abc:	db65      	blt.n	8009b8a <quorem+0xde>
 8009abe:	000b      	movs	r3, r1
 8009ac0:	3c01      	subs	r4, #1
 8009ac2:	3314      	adds	r3, #20
 8009ac4:	00a5      	lsls	r5, r4, #2
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	195b      	adds	r3, r3, r5
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	0003      	movs	r3, r0
 8009ace:	3314      	adds	r3, #20
 8009ad0:	9302      	str	r3, [sp, #8]
 8009ad2:	195d      	adds	r5, r3, r5
 8009ad4:	9b04      	ldr	r3, [sp, #16]
 8009ad6:	6828      	ldr	r0, [r5, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	1c59      	adds	r1, r3, #1
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	f7f6 fb25 	bl	800012c <__udivsi3>
 8009ae2:	9001      	str	r0, [sp, #4]
 8009ae4:	42b0      	cmp	r0, r6
 8009ae6:	d029      	beq.n	8009b3c <quorem+0x90>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	9802      	ldr	r0, [sp, #8]
 8009aec:	469c      	mov	ip, r3
 8009aee:	9606      	str	r6, [sp, #24]
 8009af0:	4662      	mov	r2, ip
 8009af2:	ca08      	ldmia	r2!, {r3}
 8009af4:	4694      	mov	ip, r2
 8009af6:	9a01      	ldr	r2, [sp, #4]
 8009af8:	b299      	uxth	r1, r3
 8009afa:	4351      	muls	r1, r2
 8009afc:	0c1b      	lsrs	r3, r3, #16
 8009afe:	4353      	muls	r3, r2
 8009b00:	1989      	adds	r1, r1, r6
 8009b02:	0c0a      	lsrs	r2, r1, #16
 8009b04:	189b      	adds	r3, r3, r2
 8009b06:	9307      	str	r3, [sp, #28]
 8009b08:	0c1e      	lsrs	r6, r3, #16
 8009b0a:	6803      	ldr	r3, [r0, #0]
 8009b0c:	b289      	uxth	r1, r1
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	9b06      	ldr	r3, [sp, #24]
 8009b12:	18d2      	adds	r2, r2, r3
 8009b14:	6803      	ldr	r3, [r0, #0]
 8009b16:	1a52      	subs	r2, r2, r1
 8009b18:	0c19      	lsrs	r1, r3, #16
 8009b1a:	466b      	mov	r3, sp
 8009b1c:	8b9b      	ldrh	r3, [r3, #28]
 8009b1e:	1acb      	subs	r3, r1, r3
 8009b20:	1411      	asrs	r1, r2, #16
 8009b22:	185b      	adds	r3, r3, r1
 8009b24:	1419      	asrs	r1, r3, #16
 8009b26:	b292      	uxth	r2, r2
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	9b04      	ldr	r3, [sp, #16]
 8009b2e:	9106      	str	r1, [sp, #24]
 8009b30:	c004      	stmia	r0!, {r2}
 8009b32:	4563      	cmp	r3, ip
 8009b34:	d2dc      	bcs.n	8009af0 <quorem+0x44>
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d02d      	beq.n	8009b98 <quorem+0xec>
 8009b3c:	9905      	ldr	r1, [sp, #20]
 8009b3e:	0038      	movs	r0, r7
 8009b40:	f001 f848 	bl	800abd4 <__mcmp>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	db1f      	blt.n	8009b88 <quorem+0xdc>
 8009b48:	2500      	movs	r5, #0
 8009b4a:	9b01      	ldr	r3, [sp, #4]
 8009b4c:	9802      	ldr	r0, [sp, #8]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	9903      	ldr	r1, [sp, #12]
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	6802      	ldr	r2, [r0, #0]
 8009b56:	c908      	ldmia	r1!, {r3}
 8009b58:	b292      	uxth	r2, r2
 8009b5a:	1955      	adds	r5, r2, r5
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	1aaa      	subs	r2, r5, r2
 8009b60:	6805      	ldr	r5, [r0, #0]
 8009b62:	0c1b      	lsrs	r3, r3, #16
 8009b64:	0c2d      	lsrs	r5, r5, #16
 8009b66:	1aeb      	subs	r3, r5, r3
 8009b68:	1415      	asrs	r5, r2, #16
 8009b6a:	195b      	adds	r3, r3, r5
 8009b6c:	141d      	asrs	r5, r3, #16
 8009b6e:	b292      	uxth	r2, r2
 8009b70:	041b      	lsls	r3, r3, #16
 8009b72:	4313      	orrs	r3, r2
 8009b74:	c008      	stmia	r0!, {r3}
 8009b76:	9b04      	ldr	r3, [sp, #16]
 8009b78:	428b      	cmp	r3, r1
 8009b7a:	d2eb      	bcs.n	8009b54 <quorem+0xa8>
 8009b7c:	9a02      	ldr	r2, [sp, #8]
 8009b7e:	00a3      	lsls	r3, r4, #2
 8009b80:	18d3      	adds	r3, r2, r3
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	d011      	beq.n	8009bac <quorem+0x100>
 8009b88:	9e01      	ldr	r6, [sp, #4]
 8009b8a:	0030      	movs	r0, r6
 8009b8c:	b009      	add	sp, #36	; 0x24
 8009b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <quorem+0xf4>
 8009b96:	3c01      	subs	r4, #1
 8009b98:	9b02      	ldr	r3, [sp, #8]
 8009b9a:	3d04      	subs	r5, #4
 8009b9c:	42ab      	cmp	r3, r5
 8009b9e:	d3f7      	bcc.n	8009b90 <quorem+0xe4>
 8009ba0:	613c      	str	r4, [r7, #16]
 8009ba2:	e7cb      	b.n	8009b3c <quorem+0x90>
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	d104      	bne.n	8009bb4 <quorem+0x108>
 8009baa:	3c01      	subs	r4, #1
 8009bac:	9a02      	ldr	r2, [sp, #8]
 8009bae:	3b04      	subs	r3, #4
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d3f7      	bcc.n	8009ba4 <quorem+0xf8>
 8009bb4:	613c      	str	r4, [r7, #16]
 8009bb6:	e7e7      	b.n	8009b88 <quorem+0xdc>

08009bb8 <_dtoa_r>:
 8009bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bba:	0016      	movs	r6, r2
 8009bbc:	001f      	movs	r7, r3
 8009bbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009bc0:	b09b      	sub	sp, #108	; 0x6c
 8009bc2:	9002      	str	r0, [sp, #8]
 8009bc4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8009bc6:	9606      	str	r6, [sp, #24]
 8009bc8:	9707      	str	r7, [sp, #28]
 8009bca:	2c00      	cmp	r4, #0
 8009bcc:	d108      	bne.n	8009be0 <_dtoa_r+0x28>
 8009bce:	2010      	movs	r0, #16
 8009bd0:	f7ff f9fa 	bl	8008fc8 <malloc>
 8009bd4:	9b02      	ldr	r3, [sp, #8]
 8009bd6:	6258      	str	r0, [r3, #36]	; 0x24
 8009bd8:	6044      	str	r4, [r0, #4]
 8009bda:	6084      	str	r4, [r0, #8]
 8009bdc:	6004      	str	r4, [r0, #0]
 8009bde:	60c4      	str	r4, [r0, #12]
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	6819      	ldr	r1, [r3, #0]
 8009be6:	2900      	cmp	r1, #0
 8009be8:	d00b      	beq.n	8009c02 <_dtoa_r+0x4a>
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	2301      	movs	r3, #1
 8009bee:	4093      	lsls	r3, r2
 8009bf0:	604a      	str	r2, [r1, #4]
 8009bf2:	608b      	str	r3, [r1, #8]
 8009bf4:	9802      	ldr	r0, [sp, #8]
 8009bf6:	f000 fe10 	bl	800a81a <_Bfree>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	2f00      	cmp	r7, #0
 8009c04:	da20      	bge.n	8009c48 <_dtoa_r+0x90>
 8009c06:	2301      	movs	r3, #1
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	007b      	lsls	r3, r7, #1
 8009c0c:	085b      	lsrs	r3, r3, #1
 8009c0e:	9307      	str	r3, [sp, #28]
 8009c10:	9c07      	ldr	r4, [sp, #28]
 8009c12:	4bb2      	ldr	r3, [pc, #712]	; (8009edc <_dtoa_r+0x324>)
 8009c14:	0022      	movs	r2, r4
 8009c16:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c18:	401a      	ands	r2, r3
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d117      	bne.n	8009c4e <_dtoa_r+0x96>
 8009c1e:	4bb0      	ldr	r3, [pc, #704]	; (8009ee0 <_dtoa_r+0x328>)
 8009c20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	9b06      	ldr	r3, [sp, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d103      	bne.n	8009c32 <_dtoa_r+0x7a>
 8009c2a:	0324      	lsls	r4, r4, #12
 8009c2c:	d101      	bne.n	8009c32 <_dtoa_r+0x7a>
 8009c2e:	f000 fd87 	bl	800a740 <_dtoa_r+0xb88>
 8009c32:	4bac      	ldr	r3, [pc, #688]	; (8009ee4 <_dtoa_r+0x32c>)
 8009c34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c36:	9308      	str	r3, [sp, #32]
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	d002      	beq.n	8009c42 <_dtoa_r+0x8a>
 8009c3c:	4baa      	ldr	r3, [pc, #680]	; (8009ee8 <_dtoa_r+0x330>)
 8009c3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	9808      	ldr	r0, [sp, #32]
 8009c44:	b01b      	add	sp, #108	; 0x6c
 8009c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c48:	2300      	movs	r3, #0
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	e7e0      	b.n	8009c10 <_dtoa_r+0x58>
 8009c4e:	9e06      	ldr	r6, [sp, #24]
 8009c50:	9f07      	ldr	r7, [sp, #28]
 8009c52:	2200      	movs	r2, #0
 8009c54:	2300      	movs	r3, #0
 8009c56:	0030      	movs	r0, r6
 8009c58:	0039      	movs	r1, r7
 8009c5a:	f7f6 fbed 	bl	8000438 <__aeabi_dcmpeq>
 8009c5e:	1e05      	subs	r5, r0, #0
 8009c60:	d00b      	beq.n	8009c7a <_dtoa_r+0xc2>
 8009c62:	2301      	movs	r3, #1
 8009c64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	4ba0      	ldr	r3, [pc, #640]	; (8009eec <_dtoa_r+0x334>)
 8009c6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c6c:	9308      	str	r3, [sp, #32]
 8009c6e:	2a00      	cmp	r2, #0
 8009c70:	d0e7      	beq.n	8009c42 <_dtoa_r+0x8a>
 8009c72:	4a9f      	ldr	r2, [pc, #636]	; (8009ef0 <_dtoa_r+0x338>)
 8009c74:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009c76:	600a      	str	r2, [r1, #0]
 8009c78:	e7e3      	b.n	8009c42 <_dtoa_r+0x8a>
 8009c7a:	ab18      	add	r3, sp, #96	; 0x60
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	ab19      	add	r3, sp, #100	; 0x64
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	0032      	movs	r2, r6
 8009c84:	003b      	movs	r3, r7
 8009c86:	9802      	ldr	r0, [sp, #8]
 8009c88:	f001 f822 	bl	800acd0 <__d2b>
 8009c8c:	0063      	lsls	r3, r4, #1
 8009c8e:	9003      	str	r0, [sp, #12]
 8009c90:	0d5b      	lsrs	r3, r3, #21
 8009c92:	d074      	beq.n	8009d7e <_dtoa_r+0x1c6>
 8009c94:	033a      	lsls	r2, r7, #12
 8009c96:	4c97      	ldr	r4, [pc, #604]	; (8009ef4 <_dtoa_r+0x33c>)
 8009c98:	0b12      	lsrs	r2, r2, #12
 8009c9a:	4314      	orrs	r4, r2
 8009c9c:	0021      	movs	r1, r4
 8009c9e:	4a96      	ldr	r2, [pc, #600]	; (8009ef8 <_dtoa_r+0x340>)
 8009ca0:	0030      	movs	r0, r6
 8009ca2:	9516      	str	r5, [sp, #88]	; 0x58
 8009ca4:	189e      	adds	r6, r3, r2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4b94      	ldr	r3, [pc, #592]	; (8009efc <_dtoa_r+0x344>)
 8009caa:	f7f8 f931 	bl	8001f10 <__aeabi_dsub>
 8009cae:	4a94      	ldr	r2, [pc, #592]	; (8009f00 <_dtoa_r+0x348>)
 8009cb0:	4b94      	ldr	r3, [pc, #592]	; (8009f04 <_dtoa_r+0x34c>)
 8009cb2:	f7f7 febb 	bl	8001a2c <__aeabi_dmul>
 8009cb6:	4a94      	ldr	r2, [pc, #592]	; (8009f08 <_dtoa_r+0x350>)
 8009cb8:	4b94      	ldr	r3, [pc, #592]	; (8009f0c <_dtoa_r+0x354>)
 8009cba:	f7f6 ff91 	bl	8000be0 <__aeabi_dadd>
 8009cbe:	0004      	movs	r4, r0
 8009cc0:	0030      	movs	r0, r6
 8009cc2:	000d      	movs	r5, r1
 8009cc4:	f7f8 fcbe 	bl	8002644 <__aeabi_i2d>
 8009cc8:	4a91      	ldr	r2, [pc, #580]	; (8009f10 <_dtoa_r+0x358>)
 8009cca:	4b92      	ldr	r3, [pc, #584]	; (8009f14 <_dtoa_r+0x35c>)
 8009ccc:	f7f7 feae 	bl	8001a2c <__aeabi_dmul>
 8009cd0:	0002      	movs	r2, r0
 8009cd2:	000b      	movs	r3, r1
 8009cd4:	0020      	movs	r0, r4
 8009cd6:	0029      	movs	r1, r5
 8009cd8:	f7f6 ff82 	bl	8000be0 <__aeabi_dadd>
 8009cdc:	0004      	movs	r4, r0
 8009cde:	000d      	movs	r5, r1
 8009ce0:	f7f8 fc7a 	bl	80025d8 <__aeabi_d2iz>
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	0007      	movs	r7, r0
 8009ce8:	2300      	movs	r3, #0
 8009cea:	0020      	movs	r0, r4
 8009cec:	0029      	movs	r1, r5
 8009cee:	f7f6 fba9 	bl	8000444 <__aeabi_dcmplt>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d009      	beq.n	8009d0a <_dtoa_r+0x152>
 8009cf6:	0038      	movs	r0, r7
 8009cf8:	f7f8 fca4 	bl	8002644 <__aeabi_i2d>
 8009cfc:	002b      	movs	r3, r5
 8009cfe:	0022      	movs	r2, r4
 8009d00:	f7f6 fb9a 	bl	8000438 <__aeabi_dcmpeq>
 8009d04:	4243      	negs	r3, r0
 8009d06:	4158      	adcs	r0, r3
 8009d08:	1a3f      	subs	r7, r7, r0
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	9314      	str	r3, [sp, #80]	; 0x50
 8009d0e:	2f16      	cmp	r7, #22
 8009d10:	d80d      	bhi.n	8009d2e <_dtoa_r+0x176>
 8009d12:	4981      	ldr	r1, [pc, #516]	; (8009f18 <_dtoa_r+0x360>)
 8009d14:	00fb      	lsls	r3, r7, #3
 8009d16:	18c9      	adds	r1, r1, r3
 8009d18:	6808      	ldr	r0, [r1, #0]
 8009d1a:	6849      	ldr	r1, [r1, #4]
 8009d1c:	9a06      	ldr	r2, [sp, #24]
 8009d1e:	9b07      	ldr	r3, [sp, #28]
 8009d20:	f7f6 fba4 	bl	800046c <__aeabi_dcmpgt>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d046      	beq.n	8009db6 <_dtoa_r+0x1fe>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	3f01      	subs	r7, #1
 8009d2c:	9314      	str	r3, [sp, #80]	; 0x50
 8009d2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009d30:	1b9e      	subs	r6, r3, r6
 8009d32:	2300      	movs	r3, #0
 8009d34:	930a      	str	r3, [sp, #40]	; 0x28
 8009d36:	0033      	movs	r3, r6
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d3c:	d504      	bpl.n	8009d48 <_dtoa_r+0x190>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	1b9b      	subs	r3, r3, r6
 8009d42:	930a      	str	r3, [sp, #40]	; 0x28
 8009d44:	2300      	movs	r3, #0
 8009d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d48:	2f00      	cmp	r7, #0
 8009d4a:	db36      	blt.n	8009dba <_dtoa_r+0x202>
 8009d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d4e:	9711      	str	r7, [sp, #68]	; 0x44
 8009d50:	19db      	adds	r3, r3, r7
 8009d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d54:	2300      	movs	r3, #0
 8009d56:	9304      	str	r3, [sp, #16]
 8009d58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d5a:	2401      	movs	r4, #1
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d900      	bls.n	8009d62 <_dtoa_r+0x1aa>
 8009d60:	e084      	b.n	8009e6c <_dtoa_r+0x2b4>
 8009d62:	2b05      	cmp	r3, #5
 8009d64:	dd02      	ble.n	8009d6c <_dtoa_r+0x1b4>
 8009d66:	2400      	movs	r4, #0
 8009d68:	3b04      	subs	r3, #4
 8009d6a:	9320      	str	r3, [sp, #128]	; 0x80
 8009d6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d6e:	1e98      	subs	r0, r3, #2
 8009d70:	2803      	cmp	r0, #3
 8009d72:	d900      	bls.n	8009d76 <_dtoa_r+0x1be>
 8009d74:	e084      	b.n	8009e80 <_dtoa_r+0x2c8>
 8009d76:	f7f6 f9cf 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009d7a:	7775      	.short	0x7775
 8009d7c:	6a28      	.short	0x6a28
 8009d7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009d80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d82:	189e      	adds	r6, r3, r2
 8009d84:	4b65      	ldr	r3, [pc, #404]	; (8009f1c <_dtoa_r+0x364>)
 8009d86:	18f2      	adds	r2, r6, r3
 8009d88:	2a20      	cmp	r2, #32
 8009d8a:	dd0f      	ble.n	8009dac <_dtoa_r+0x1f4>
 8009d8c:	2340      	movs	r3, #64	; 0x40
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	409c      	lsls	r4, r3
 8009d92:	4b63      	ldr	r3, [pc, #396]	; (8009f20 <_dtoa_r+0x368>)
 8009d94:	9806      	ldr	r0, [sp, #24]
 8009d96:	18f3      	adds	r3, r6, r3
 8009d98:	40d8      	lsrs	r0, r3
 8009d9a:	4320      	orrs	r0, r4
 8009d9c:	f7f8 fc8c 	bl	80026b8 <__aeabi_ui2d>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4c60      	ldr	r4, [pc, #384]	; (8009f24 <_dtoa_r+0x36c>)
 8009da4:	3e01      	subs	r6, #1
 8009da6:	1909      	adds	r1, r1, r4
 8009da8:	9316      	str	r3, [sp, #88]	; 0x58
 8009daa:	e77c      	b.n	8009ca6 <_dtoa_r+0xee>
 8009dac:	2320      	movs	r3, #32
 8009dae:	9806      	ldr	r0, [sp, #24]
 8009db0:	1a9b      	subs	r3, r3, r2
 8009db2:	4098      	lsls	r0, r3
 8009db4:	e7f2      	b.n	8009d9c <_dtoa_r+0x1e4>
 8009db6:	9014      	str	r0, [sp, #80]	; 0x50
 8009db8:	e7b9      	b.n	8009d2e <_dtoa_r+0x176>
 8009dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dbc:	1bdb      	subs	r3, r3, r7
 8009dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009dc0:	427b      	negs	r3, r7
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9311      	str	r3, [sp, #68]	; 0x44
 8009dc8:	e7c6      	b.n	8009d58 <_dtoa_r+0x1a0>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8009dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dd59      	ble.n	8009e88 <_dtoa_r+0x2d0>
 8009dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd8:	9a02      	ldr	r2, [sp, #8]
 8009dda:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8009ddc:	2200      	movs	r2, #0
 8009dde:	606a      	str	r2, [r5, #4]
 8009de0:	3204      	adds	r2, #4
 8009de2:	0010      	movs	r0, r2
 8009de4:	3014      	adds	r0, #20
 8009de6:	6869      	ldr	r1, [r5, #4]
 8009de8:	4298      	cmp	r0, r3
 8009dea:	d952      	bls.n	8009e92 <_dtoa_r+0x2da>
 8009dec:	9802      	ldr	r0, [sp, #8]
 8009dee:	f000 fcdc 	bl	800a7aa <_Balloc>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	6028      	str	r0, [r5, #0]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	9308      	str	r3, [sp, #32]
 8009dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfe:	2b0e      	cmp	r3, #14
 8009e00:	d900      	bls.n	8009e04 <_dtoa_r+0x24c>
 8009e02:	e10a      	b.n	800a01a <_dtoa_r+0x462>
 8009e04:	2c00      	cmp	r4, #0
 8009e06:	d100      	bne.n	8009e0a <_dtoa_r+0x252>
 8009e08:	e107      	b.n	800a01a <_dtoa_r+0x462>
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	9c07      	ldr	r4, [sp, #28]
 8009e0e:	9312      	str	r3, [sp, #72]	; 0x48
 8009e10:	9413      	str	r4, [sp, #76]	; 0x4c
 8009e12:	2f00      	cmp	r7, #0
 8009e14:	dc00      	bgt.n	8009e18 <_dtoa_r+0x260>
 8009e16:	e089      	b.n	8009f2c <_dtoa_r+0x374>
 8009e18:	210f      	movs	r1, #15
 8009e1a:	003a      	movs	r2, r7
 8009e1c:	4b3e      	ldr	r3, [pc, #248]	; (8009f18 <_dtoa_r+0x360>)
 8009e1e:	400a      	ands	r2, r1
 8009e20:	00d2      	lsls	r2, r2, #3
 8009e22:	189b      	adds	r3, r3, r2
 8009e24:	681d      	ldr	r5, [r3, #0]
 8009e26:	685e      	ldr	r6, [r3, #4]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	113c      	asrs	r4, r7, #4
 8009e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e2e:	06e3      	lsls	r3, r4, #27
 8009e30:	d50b      	bpl.n	8009e4a <_dtoa_r+0x292>
 8009e32:	4b3d      	ldr	r3, [pc, #244]	; (8009f28 <_dtoa_r+0x370>)
 8009e34:	400c      	ands	r4, r1
 8009e36:	6a1a      	ldr	r2, [r3, #32]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e3c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e3e:	f7f7 f9eb 	bl	8001218 <__aeabi_ddiv>
 8009e42:	2303      	movs	r3, #3
 8009e44:	9006      	str	r0, [sp, #24]
 8009e46:	9107      	str	r1, [sp, #28]
 8009e48:	930e      	str	r3, [sp, #56]	; 0x38
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e03a      	b.n	8009ec4 <_dtoa_r+0x30c>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	930d      	str	r3, [sp, #52]	; 0x34
 8009e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	930c      	str	r3, [sp, #48]	; 0x30
 8009e58:	3301      	adds	r3, #1
 8009e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dcbb      	bgt.n	8009dd8 <_dtoa_r+0x220>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e7b9      	b.n	8009dd8 <_dtoa_r+0x220>
 8009e64:	2300      	movs	r3, #0
 8009e66:	e7b1      	b.n	8009dcc <_dtoa_r+0x214>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	e7f1      	b.n	8009e50 <_dtoa_r+0x298>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	940d      	str	r4, [sp, #52]	; 0x34
 8009e70:	9320      	str	r3, [sp, #128]	; 0x80
 8009e72:	3b01      	subs	r3, #1
 8009e74:	2200      	movs	r2, #0
 8009e76:	930c      	str	r3, [sp, #48]	; 0x30
 8009e78:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7a:	3313      	adds	r3, #19
 8009e7c:	9221      	str	r2, [sp, #132]	; 0x84
 8009e7e:	e7ab      	b.n	8009dd8 <_dtoa_r+0x220>
 8009e80:	2301      	movs	r3, #1
 8009e82:	930d      	str	r3, [sp, #52]	; 0x34
 8009e84:	3b02      	subs	r3, #2
 8009e86:	e7f5      	b.n	8009e74 <_dtoa_r+0x2bc>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8e:	001a      	movs	r2, r3
 8009e90:	e7f4      	b.n	8009e7c <_dtoa_r+0x2c4>
 8009e92:	3101      	adds	r1, #1
 8009e94:	6069      	str	r1, [r5, #4]
 8009e96:	0052      	lsls	r2, r2, #1
 8009e98:	e7a3      	b.n	8009de2 <_dtoa_r+0x22a>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	421c      	tst	r4, r3
 8009e9e:	d00e      	beq.n	8009ebe <_dtoa_r+0x306>
 8009ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ea2:	4a21      	ldr	r2, [pc, #132]	; (8009f28 <_dtoa_r+0x370>)
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009eaa:	0028      	movs	r0, r5
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	189b      	adds	r3, r3, r2
 8009eb0:	0031      	movs	r1, r6
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f7f7 fdb9 	bl	8001a2c <__aeabi_dmul>
 8009eba:	0005      	movs	r5, r0
 8009ebc:	000e      	movs	r6, r1
 8009ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ec0:	1064      	asrs	r4, r4, #1
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	9310      	str	r3, [sp, #64]	; 0x40
 8009ec6:	2c00      	cmp	r4, #0
 8009ec8:	d1e7      	bne.n	8009e9a <_dtoa_r+0x2e2>
 8009eca:	9806      	ldr	r0, [sp, #24]
 8009ecc:	9907      	ldr	r1, [sp, #28]
 8009ece:	002a      	movs	r2, r5
 8009ed0:	0033      	movs	r3, r6
 8009ed2:	f7f7 f9a1 	bl	8001218 <__aeabi_ddiv>
 8009ed6:	9006      	str	r0, [sp, #24]
 8009ed8:	9107      	str	r1, [sp, #28]
 8009eda:	e042      	b.n	8009f62 <_dtoa_r+0x3aa>
 8009edc:	7ff00000 	.word	0x7ff00000
 8009ee0:	0000270f 	.word	0x0000270f
 8009ee4:	0800c4e0 	.word	0x0800c4e0
 8009ee8:	0800c4e3 	.word	0x0800c4e3
 8009eec:	0800c3b2 	.word	0x0800c3b2
 8009ef0:	0800c3b3 	.word	0x0800c3b3
 8009ef4:	3ff00000 	.word	0x3ff00000
 8009ef8:	fffffc01 	.word	0xfffffc01
 8009efc:	3ff80000 	.word	0x3ff80000
 8009f00:	636f4361 	.word	0x636f4361
 8009f04:	3fd287a7 	.word	0x3fd287a7
 8009f08:	8b60c8b3 	.word	0x8b60c8b3
 8009f0c:	3fc68a28 	.word	0x3fc68a28
 8009f10:	509f79fb 	.word	0x509f79fb
 8009f14:	3fd34413 	.word	0x3fd34413
 8009f18:	0800c510 	.word	0x0800c510
 8009f1c:	00000432 	.word	0x00000432
 8009f20:	00000412 	.word	0x00000412
 8009f24:	fe100000 	.word	0xfe100000
 8009f28:	0800c4e8 	.word	0x0800c4e8
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	930e      	str	r3, [sp, #56]	; 0x38
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	d016      	beq.n	8009f62 <_dtoa_r+0x3aa>
 8009f34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f38:	427c      	negs	r4, r7
 8009f3a:	330d      	adds	r3, #13
 8009f3c:	4023      	ands	r3, r4
 8009f3e:	4ace      	ldr	r2, [pc, #824]	; (800a278 <_dtoa_r+0x6c0>)
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	18d3      	adds	r3, r2, r3
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f7f7 fd70 	bl	8001a2c <__aeabi_dmul>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2601      	movs	r6, #1
 8009f50:	001d      	movs	r5, r3
 8009f52:	9006      	str	r0, [sp, #24]
 8009f54:	9107      	str	r1, [sp, #28]
 8009f56:	1124      	asrs	r4, r4, #4
 8009f58:	2c00      	cmp	r4, #0
 8009f5a:	d000      	beq.n	8009f5e <_dtoa_r+0x3a6>
 8009f5c:	e08c      	b.n	800a078 <_dtoa_r+0x4c0>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1b9      	bne.n	8009ed6 <_dtoa_r+0x31e>
 8009f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d100      	bne.n	8009f6a <_dtoa_r+0x3b2>
 8009f68:	e096      	b.n	800a098 <_dtoa_r+0x4e0>
 8009f6a:	9c06      	ldr	r4, [sp, #24]
 8009f6c:	9d07      	ldr	r5, [sp, #28]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	4bc2      	ldr	r3, [pc, #776]	; (800a27c <_dtoa_r+0x6c4>)
 8009f72:	0020      	movs	r0, r4
 8009f74:	0029      	movs	r1, r5
 8009f76:	f7f6 fa65 	bl	8000444 <__aeabi_dcmplt>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d100      	bne.n	8009f80 <_dtoa_r+0x3c8>
 8009f7e:	e08b      	b.n	800a098 <_dtoa_r+0x4e0>
 8009f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d100      	bne.n	8009f88 <_dtoa_r+0x3d0>
 8009f86:	e087      	b.n	800a098 <_dtoa_r+0x4e0>
 8009f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	dd41      	ble.n	800a012 <_dtoa_r+0x45a>
 8009f8e:	4bbc      	ldr	r3, [pc, #752]	; (800a280 <_dtoa_r+0x6c8>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	0020      	movs	r0, r4
 8009f94:	0029      	movs	r1, r5
 8009f96:	f7f7 fd49 	bl	8001a2c <__aeabi_dmul>
 8009f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f9c:	9006      	str	r0, [sp, #24]
 8009f9e:	9107      	str	r1, [sp, #28]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	930e      	str	r3, [sp, #56]	; 0x38
 8009fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa6:	1e7e      	subs	r6, r7, #1
 8009fa8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009faa:	9310      	str	r3, [sp, #64]	; 0x40
 8009fac:	f7f8 fb4a 	bl	8002644 <__aeabi_i2d>
 8009fb0:	9a06      	ldr	r2, [sp, #24]
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	f7f7 fd3a 	bl	8001a2c <__aeabi_dmul>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	4bb2      	ldr	r3, [pc, #712]	; (800a284 <_dtoa_r+0x6cc>)
 8009fbc:	f7f6 fe10 	bl	8000be0 <__aeabi_dadd>
 8009fc0:	4ab1      	ldr	r2, [pc, #708]	; (800a288 <_dtoa_r+0x6d0>)
 8009fc2:	900e      	str	r0, [sp, #56]	; 0x38
 8009fc4:	910f      	str	r1, [sp, #60]	; 0x3c
 8009fc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009fc8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fca:	4694      	mov	ip, r2
 8009fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fce:	4463      	add	r3, ip
 8009fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8009fd2:	001d      	movs	r5, r3
 8009fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d161      	bne.n	800a09e <_dtoa_r+0x4e6>
 8009fda:	9806      	ldr	r0, [sp, #24]
 8009fdc:	9907      	ldr	r1, [sp, #28]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	4baa      	ldr	r3, [pc, #680]	; (800a28c <_dtoa_r+0x6d4>)
 8009fe2:	f7f7 ff95 	bl	8001f10 <__aeabi_dsub>
 8009fe6:	0022      	movs	r2, r4
 8009fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fea:	9006      	str	r0, [sp, #24]
 8009fec:	9107      	str	r1, [sp, #28]
 8009fee:	f7f6 fa3d 	bl	800046c <__aeabi_dcmpgt>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d000      	beq.n	8009ff8 <_dtoa_r+0x440>
 8009ff6:	e2a8      	b.n	800a54a <_dtoa_r+0x992>
 8009ff8:	48a5      	ldr	r0, [pc, #660]	; (800a290 <_dtoa_r+0x6d8>)
 8009ffa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ffc:	4684      	mov	ip, r0
 8009ffe:	4461      	add	r1, ip
 800a000:	000b      	movs	r3, r1
 800a002:	9806      	ldr	r0, [sp, #24]
 800a004:	9907      	ldr	r1, [sp, #28]
 800a006:	0022      	movs	r2, r4
 800a008:	f7f6 fa1c 	bl	8000444 <__aeabi_dcmplt>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d000      	beq.n	800a012 <_dtoa_r+0x45a>
 800a010:	e295      	b.n	800a53e <_dtoa_r+0x986>
 800a012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a014:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a016:	9306      	str	r3, [sp, #24]
 800a018:	9407      	str	r4, [sp, #28]
 800a01a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	da00      	bge.n	800a022 <_dtoa_r+0x46a>
 800a020:	e15c      	b.n	800a2dc <_dtoa_r+0x724>
 800a022:	2f0e      	cmp	r7, #14
 800a024:	dd00      	ble.n	800a028 <_dtoa_r+0x470>
 800a026:	e159      	b.n	800a2dc <_dtoa_r+0x724>
 800a028:	4b93      	ldr	r3, [pc, #588]	; (800a278 <_dtoa_r+0x6c0>)
 800a02a:	00fa      	lsls	r2, r7, #3
 800a02c:	189b      	adds	r3, r3, r2
 800a02e:	685c      	ldr	r4, [r3, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	9405      	str	r4, [sp, #20]
 800a036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a038:	2b00      	cmp	r3, #0
 800a03a:	db00      	blt.n	800a03e <_dtoa_r+0x486>
 800a03c:	e0d8      	b.n	800a1f0 <_dtoa_r+0x638>
 800a03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	dd00      	ble.n	800a046 <_dtoa_r+0x48e>
 800a044:	e0d4      	b.n	800a1f0 <_dtoa_r+0x638>
 800a046:	d000      	beq.n	800a04a <_dtoa_r+0x492>
 800a048:	e27d      	b.n	800a546 <_dtoa_r+0x98e>
 800a04a:	9804      	ldr	r0, [sp, #16]
 800a04c:	9905      	ldr	r1, [sp, #20]
 800a04e:	2200      	movs	r2, #0
 800a050:	4b8e      	ldr	r3, [pc, #568]	; (800a28c <_dtoa_r+0x6d4>)
 800a052:	f7f7 fceb 	bl	8001a2c <__aeabi_dmul>
 800a056:	9a06      	ldr	r2, [sp, #24]
 800a058:	9b07      	ldr	r3, [sp, #28]
 800a05a:	f7f6 fa11 	bl	8000480 <__aeabi_dcmpge>
 800a05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	001e      	movs	r6, r3
 800a064:	2800      	cmp	r0, #0
 800a066:	d000      	beq.n	800a06a <_dtoa_r+0x4b2>
 800a068:	e24f      	b.n	800a50a <_dtoa_r+0x952>
 800a06a:	9b08      	ldr	r3, [sp, #32]
 800a06c:	9a08      	ldr	r2, [sp, #32]
 800a06e:	1c5d      	adds	r5, r3, #1
 800a070:	2331      	movs	r3, #49	; 0x31
 800a072:	3701      	adds	r7, #1
 800a074:	7013      	strb	r3, [r2, #0]
 800a076:	e24b      	b.n	800a510 <_dtoa_r+0x958>
 800a078:	4234      	tst	r4, r6
 800a07a:	d00a      	beq.n	800a092 <_dtoa_r+0x4da>
 800a07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a07e:	4a85      	ldr	r2, [pc, #532]	; (800a294 <_dtoa_r+0x6dc>)
 800a080:	3301      	adds	r3, #1
 800a082:	930e      	str	r3, [sp, #56]	; 0x38
 800a084:	00eb      	lsls	r3, r5, #3
 800a086:	189b      	adds	r3, r3, r2
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f7f7 fcce 	bl	8001a2c <__aeabi_dmul>
 800a090:	0033      	movs	r3, r6
 800a092:	1064      	asrs	r4, r4, #1
 800a094:	3501      	adds	r5, #1
 800a096:	e75f      	b.n	8009f58 <_dtoa_r+0x3a0>
 800a098:	003e      	movs	r6, r7
 800a09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09c:	e784      	b.n	8009fa8 <_dtoa_r+0x3f0>
 800a09e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0a2:	1e5a      	subs	r2, r3, #1
 800a0a4:	4b74      	ldr	r3, [pc, #464]	; (800a278 <_dtoa_r+0x6c0>)
 800a0a6:	00d2      	lsls	r2, r2, #3
 800a0a8:	189b      	adds	r3, r3, r2
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2900      	cmp	r1, #0
 800a0b0:	d049      	beq.n	800a146 <_dtoa_r+0x58e>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	4978      	ldr	r1, [pc, #480]	; (800a298 <_dtoa_r+0x6e0>)
 800a0b6:	f7f7 f8af 	bl	8001218 <__aeabi_ddiv>
 800a0ba:	002b      	movs	r3, r5
 800a0bc:	0022      	movs	r2, r4
 800a0be:	f7f7 ff27 	bl	8001f10 <__aeabi_dsub>
 800a0c2:	9b08      	ldr	r3, [sp, #32]
 800a0c4:	900e      	str	r0, [sp, #56]	; 0x38
 800a0c6:	910f      	str	r1, [sp, #60]	; 0x3c
 800a0c8:	9315      	str	r3, [sp, #84]	; 0x54
 800a0ca:	9806      	ldr	r0, [sp, #24]
 800a0cc:	9907      	ldr	r1, [sp, #28]
 800a0ce:	f7f8 fa83 	bl	80025d8 <__aeabi_d2iz>
 800a0d2:	0004      	movs	r4, r0
 800a0d4:	f7f8 fab6 	bl	8002644 <__aeabi_i2d>
 800a0d8:	0002      	movs	r2, r0
 800a0da:	000b      	movs	r3, r1
 800a0dc:	9806      	ldr	r0, [sp, #24]
 800a0de:	9907      	ldr	r1, [sp, #28]
 800a0e0:	f7f7 ff16 	bl	8001f10 <__aeabi_dsub>
 800a0e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0e6:	3430      	adds	r4, #48	; 0x30
 800a0e8:	1c5d      	adds	r5, r3, #1
 800a0ea:	701c      	strb	r4, [r3, #0]
 800a0ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0f0:	9006      	str	r0, [sp, #24]
 800a0f2:	9107      	str	r1, [sp, #28]
 800a0f4:	f7f6 f9a6 	bl	8000444 <__aeabi_dcmplt>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d16c      	bne.n	800a1d6 <_dtoa_r+0x61e>
 800a0fc:	9a06      	ldr	r2, [sp, #24]
 800a0fe:	9b07      	ldr	r3, [sp, #28]
 800a100:	2000      	movs	r0, #0
 800a102:	495e      	ldr	r1, [pc, #376]	; (800a27c <_dtoa_r+0x6c4>)
 800a104:	f7f7 ff04 	bl	8001f10 <__aeabi_dsub>
 800a108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a10c:	f7f6 f99a 	bl	8000444 <__aeabi_dcmplt>
 800a110:	2800      	cmp	r0, #0
 800a112:	d000      	beq.n	800a116 <_dtoa_r+0x55e>
 800a114:	e0c3      	b.n	800a29e <_dtoa_r+0x6e6>
 800a116:	9b08      	ldr	r3, [sp, #32]
 800a118:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a11a:	1aeb      	subs	r3, r5, r3
 800a11c:	429a      	cmp	r2, r3
 800a11e:	dc00      	bgt.n	800a122 <_dtoa_r+0x56a>
 800a120:	e777      	b.n	800a012 <_dtoa_r+0x45a>
 800a122:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a124:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a126:	2200      	movs	r2, #0
 800a128:	4b55      	ldr	r3, [pc, #340]	; (800a280 <_dtoa_r+0x6c8>)
 800a12a:	f7f7 fc7f 	bl	8001a2c <__aeabi_dmul>
 800a12e:	2200      	movs	r2, #0
 800a130:	900e      	str	r0, [sp, #56]	; 0x38
 800a132:	910f      	str	r1, [sp, #60]	; 0x3c
 800a134:	9806      	ldr	r0, [sp, #24]
 800a136:	9907      	ldr	r1, [sp, #28]
 800a138:	4b51      	ldr	r3, [pc, #324]	; (800a280 <_dtoa_r+0x6c8>)
 800a13a:	f7f7 fc77 	bl	8001a2c <__aeabi_dmul>
 800a13e:	9515      	str	r5, [sp, #84]	; 0x54
 800a140:	9006      	str	r0, [sp, #24]
 800a142:	9107      	str	r1, [sp, #28]
 800a144:	e7c1      	b.n	800a0ca <_dtoa_r+0x512>
 800a146:	0020      	movs	r0, r4
 800a148:	0029      	movs	r1, r5
 800a14a:	f7f7 fc6f 	bl	8001a2c <__aeabi_dmul>
 800a14e:	9c08      	ldr	r4, [sp, #32]
 800a150:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a152:	0023      	movs	r3, r4
 800a154:	4694      	mov	ip, r2
 800a156:	900e      	str	r0, [sp, #56]	; 0x38
 800a158:	910f      	str	r1, [sp, #60]	; 0x3c
 800a15a:	4463      	add	r3, ip
 800a15c:	9315      	str	r3, [sp, #84]	; 0x54
 800a15e:	9806      	ldr	r0, [sp, #24]
 800a160:	9907      	ldr	r1, [sp, #28]
 800a162:	f7f8 fa39 	bl	80025d8 <__aeabi_d2iz>
 800a166:	0005      	movs	r5, r0
 800a168:	f7f8 fa6c 	bl	8002644 <__aeabi_i2d>
 800a16c:	000b      	movs	r3, r1
 800a16e:	0002      	movs	r2, r0
 800a170:	9806      	ldr	r0, [sp, #24]
 800a172:	9907      	ldr	r1, [sp, #28]
 800a174:	f7f7 fecc 	bl	8001f10 <__aeabi_dsub>
 800a178:	3530      	adds	r5, #48	; 0x30
 800a17a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a17c:	7025      	strb	r5, [r4, #0]
 800a17e:	3401      	adds	r4, #1
 800a180:	9006      	str	r0, [sp, #24]
 800a182:	9107      	str	r1, [sp, #28]
 800a184:	42a3      	cmp	r3, r4
 800a186:	d12a      	bne.n	800a1de <_dtoa_r+0x626>
 800a188:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a18a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a18c:	9a08      	ldr	r2, [sp, #32]
 800a18e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a190:	4694      	mov	ip, r2
 800a192:	4463      	add	r3, ip
 800a194:	2200      	movs	r2, #0
 800a196:	001d      	movs	r5, r3
 800a198:	4b3f      	ldr	r3, [pc, #252]	; (800a298 <_dtoa_r+0x6e0>)
 800a19a:	f7f6 fd21 	bl	8000be0 <__aeabi_dadd>
 800a19e:	0002      	movs	r2, r0
 800a1a0:	000b      	movs	r3, r1
 800a1a2:	9806      	ldr	r0, [sp, #24]
 800a1a4:	9907      	ldr	r1, [sp, #28]
 800a1a6:	f7f6 f961 	bl	800046c <__aeabi_dcmpgt>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d000      	beq.n	800a1b0 <_dtoa_r+0x5f8>
 800a1ae:	e076      	b.n	800a29e <_dtoa_r+0x6e6>
 800a1b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	4938      	ldr	r1, [pc, #224]	; (800a298 <_dtoa_r+0x6e0>)
 800a1b8:	f7f7 feaa 	bl	8001f10 <__aeabi_dsub>
 800a1bc:	0002      	movs	r2, r0
 800a1be:	000b      	movs	r3, r1
 800a1c0:	9806      	ldr	r0, [sp, #24]
 800a1c2:	9907      	ldr	r1, [sp, #28]
 800a1c4:	f7f6 f93e 	bl	8000444 <__aeabi_dcmplt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d100      	bne.n	800a1ce <_dtoa_r+0x616>
 800a1cc:	e721      	b.n	800a012 <_dtoa_r+0x45a>
 800a1ce:	1e6b      	subs	r3, r5, #1
 800a1d0:	781a      	ldrb	r2, [r3, #0]
 800a1d2:	2a30      	cmp	r2, #48	; 0x30
 800a1d4:	d001      	beq.n	800a1da <_dtoa_r+0x622>
 800a1d6:	0037      	movs	r7, r6
 800a1d8:	e03f      	b.n	800a25a <_dtoa_r+0x6a2>
 800a1da:	001d      	movs	r5, r3
 800a1dc:	e7f7      	b.n	800a1ce <_dtoa_r+0x616>
 800a1de:	9806      	ldr	r0, [sp, #24]
 800a1e0:	9907      	ldr	r1, [sp, #28]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	4b26      	ldr	r3, [pc, #152]	; (800a280 <_dtoa_r+0x6c8>)
 800a1e6:	f7f7 fc21 	bl	8001a2c <__aeabi_dmul>
 800a1ea:	9006      	str	r0, [sp, #24]
 800a1ec:	9107      	str	r1, [sp, #28]
 800a1ee:	e7b6      	b.n	800a15e <_dtoa_r+0x5a6>
 800a1f0:	9e08      	ldr	r6, [sp, #32]
 800a1f2:	9a04      	ldr	r2, [sp, #16]
 800a1f4:	9b05      	ldr	r3, [sp, #20]
 800a1f6:	9806      	ldr	r0, [sp, #24]
 800a1f8:	9907      	ldr	r1, [sp, #28]
 800a1fa:	f7f7 f80d 	bl	8001218 <__aeabi_ddiv>
 800a1fe:	f7f8 f9eb 	bl	80025d8 <__aeabi_d2iz>
 800a202:	0004      	movs	r4, r0
 800a204:	f7f8 fa1e 	bl	8002644 <__aeabi_i2d>
 800a208:	9a04      	ldr	r2, [sp, #16]
 800a20a:	9b05      	ldr	r3, [sp, #20]
 800a20c:	f7f7 fc0e 	bl	8001a2c <__aeabi_dmul>
 800a210:	0002      	movs	r2, r0
 800a212:	000b      	movs	r3, r1
 800a214:	9806      	ldr	r0, [sp, #24]
 800a216:	9907      	ldr	r1, [sp, #28]
 800a218:	f7f7 fe7a 	bl	8001f10 <__aeabi_dsub>
 800a21c:	0023      	movs	r3, r4
 800a21e:	3330      	adds	r3, #48	; 0x30
 800a220:	7033      	strb	r3, [r6, #0]
 800a222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a224:	9b08      	ldr	r3, [sp, #32]
 800a226:	1c75      	adds	r5, r6, #1
 800a228:	1aeb      	subs	r3, r5, r3
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d148      	bne.n	800a2c0 <_dtoa_r+0x708>
 800a22e:	0002      	movs	r2, r0
 800a230:	000b      	movs	r3, r1
 800a232:	f7f6 fcd5 	bl	8000be0 <__aeabi_dadd>
 800a236:	9a04      	ldr	r2, [sp, #16]
 800a238:	9b05      	ldr	r3, [sp, #20]
 800a23a:	9006      	str	r0, [sp, #24]
 800a23c:	9107      	str	r1, [sp, #28]
 800a23e:	f7f6 f915 	bl	800046c <__aeabi_dcmpgt>
 800a242:	2800      	cmp	r0, #0
 800a244:	d12a      	bne.n	800a29c <_dtoa_r+0x6e4>
 800a246:	9a04      	ldr	r2, [sp, #16]
 800a248:	9b05      	ldr	r3, [sp, #20]
 800a24a:	9806      	ldr	r0, [sp, #24]
 800a24c:	9907      	ldr	r1, [sp, #28]
 800a24e:	f7f6 f8f3 	bl	8000438 <__aeabi_dcmpeq>
 800a252:	2800      	cmp	r0, #0
 800a254:	d001      	beq.n	800a25a <_dtoa_r+0x6a2>
 800a256:	07e3      	lsls	r3, r4, #31
 800a258:	d420      	bmi.n	800a29c <_dtoa_r+0x6e4>
 800a25a:	9903      	ldr	r1, [sp, #12]
 800a25c:	9802      	ldr	r0, [sp, #8]
 800a25e:	f000 fadc 	bl	800a81a <_Bfree>
 800a262:	2300      	movs	r3, #0
 800a264:	702b      	strb	r3, [r5, #0]
 800a266:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a268:	3701      	adds	r7, #1
 800a26a:	601f      	str	r7, [r3, #0]
 800a26c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d100      	bne.n	800a274 <_dtoa_r+0x6bc>
 800a272:	e4e6      	b.n	8009c42 <_dtoa_r+0x8a>
 800a274:	601d      	str	r5, [r3, #0]
 800a276:	e4e4      	b.n	8009c42 <_dtoa_r+0x8a>
 800a278:	0800c510 	.word	0x0800c510
 800a27c:	3ff00000 	.word	0x3ff00000
 800a280:	40240000 	.word	0x40240000
 800a284:	401c0000 	.word	0x401c0000
 800a288:	fcc00000 	.word	0xfcc00000
 800a28c:	40140000 	.word	0x40140000
 800a290:	7cc00000 	.word	0x7cc00000
 800a294:	0800c4e8 	.word	0x0800c4e8
 800a298:	3fe00000 	.word	0x3fe00000
 800a29c:	003e      	movs	r6, r7
 800a29e:	1e6b      	subs	r3, r5, #1
 800a2a0:	781a      	ldrb	r2, [r3, #0]
 800a2a2:	2a39      	cmp	r2, #57	; 0x39
 800a2a4:	d106      	bne.n	800a2b4 <_dtoa_r+0x6fc>
 800a2a6:	9a08      	ldr	r2, [sp, #32]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d107      	bne.n	800a2bc <_dtoa_r+0x704>
 800a2ac:	2330      	movs	r3, #48	; 0x30
 800a2ae:	7013      	strb	r3, [r2, #0]
 800a2b0:	0013      	movs	r3, r2
 800a2b2:	3601      	adds	r6, #1
 800a2b4:	781a      	ldrb	r2, [r3, #0]
 800a2b6:	3201      	adds	r2, #1
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	e78c      	b.n	800a1d6 <_dtoa_r+0x61e>
 800a2bc:	001d      	movs	r5, r3
 800a2be:	e7ee      	b.n	800a29e <_dtoa_r+0x6e6>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4ba4      	ldr	r3, [pc, #656]	; (800a554 <_dtoa_r+0x99c>)
 800a2c4:	f7f7 fbb2 	bl	8001a2c <__aeabi_dmul>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9006      	str	r0, [sp, #24]
 800a2ce:	9107      	str	r1, [sp, #28]
 800a2d0:	002e      	movs	r6, r5
 800a2d2:	f7f6 f8b1 	bl	8000438 <__aeabi_dcmpeq>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d08b      	beq.n	800a1f2 <_dtoa_r+0x63a>
 800a2da:	e7be      	b.n	800a25a <_dtoa_r+0x6a2>
 800a2dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	d100      	bne.n	800a2e4 <_dtoa_r+0x72c>
 800a2e2:	e0da      	b.n	800a49a <_dtoa_r+0x8e2>
 800a2e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2e6:	2a01      	cmp	r2, #1
 800a2e8:	dd00      	ble.n	800a2ec <_dtoa_r+0x734>
 800a2ea:	e0bd      	b.n	800a468 <_dtoa_r+0x8b0>
 800a2ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	d100      	bne.n	800a2f4 <_dtoa_r+0x73c>
 800a2f2:	e0b5      	b.n	800a460 <_dtoa_r+0x8a8>
 800a2f4:	4a98      	ldr	r2, [pc, #608]	; (800a558 <_dtoa_r+0x9a0>)
 800a2f6:	189b      	adds	r3, r3, r2
 800a2f8:	9d04      	ldr	r5, [sp, #16]
 800a2fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2fe:	2101      	movs	r1, #1
 800a300:	18d2      	adds	r2, r2, r3
 800a302:	920a      	str	r2, [sp, #40]	; 0x28
 800a304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a306:	9802      	ldr	r0, [sp, #8]
 800a308:	18d3      	adds	r3, r2, r3
 800a30a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a30c:	f000 fb25 	bl	800a95a <__i2b>
 800a310:	0006      	movs	r6, r0
 800a312:	2c00      	cmp	r4, #0
 800a314:	dd0e      	ble.n	800a334 <_dtoa_r+0x77c>
 800a316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd0b      	ble.n	800a334 <_dtoa_r+0x77c>
 800a31c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a31e:	0023      	movs	r3, r4
 800a320:	4294      	cmp	r4, r2
 800a322:	dd00      	ble.n	800a326 <_dtoa_r+0x76e>
 800a324:	0013      	movs	r3, r2
 800a326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a328:	1ae4      	subs	r4, r4, r3
 800a32a:	1ad2      	subs	r2, r2, r3
 800a32c:	920a      	str	r2, [sp, #40]	; 0x28
 800a32e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	930b      	str	r3, [sp, #44]	; 0x2c
 800a334:	9b04      	ldr	r3, [sp, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01f      	beq.n	800a37a <_dtoa_r+0x7c2>
 800a33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d100      	bne.n	800a342 <_dtoa_r+0x78a>
 800a340:	e0af      	b.n	800a4a2 <_dtoa_r+0x8ea>
 800a342:	2d00      	cmp	r5, #0
 800a344:	d011      	beq.n	800a36a <_dtoa_r+0x7b2>
 800a346:	0031      	movs	r1, r6
 800a348:	002a      	movs	r2, r5
 800a34a:	9802      	ldr	r0, [sp, #8]
 800a34c:	f000 fb9e 	bl	800aa8c <__pow5mult>
 800a350:	9a03      	ldr	r2, [sp, #12]
 800a352:	0001      	movs	r1, r0
 800a354:	0006      	movs	r6, r0
 800a356:	9802      	ldr	r0, [sp, #8]
 800a358:	f000 fb08 	bl	800a96c <__multiply>
 800a35c:	9903      	ldr	r1, [sp, #12]
 800a35e:	9010      	str	r0, [sp, #64]	; 0x40
 800a360:	9802      	ldr	r0, [sp, #8]
 800a362:	f000 fa5a 	bl	800a81a <_Bfree>
 800a366:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	9b04      	ldr	r3, [sp, #16]
 800a36c:	1b5a      	subs	r2, r3, r5
 800a36e:	d004      	beq.n	800a37a <_dtoa_r+0x7c2>
 800a370:	9903      	ldr	r1, [sp, #12]
 800a372:	9802      	ldr	r0, [sp, #8]
 800a374:	f000 fb8a 	bl	800aa8c <__pow5mult>
 800a378:	9003      	str	r0, [sp, #12]
 800a37a:	2101      	movs	r1, #1
 800a37c:	9802      	ldr	r0, [sp, #8]
 800a37e:	f000 faec 	bl	800a95a <__i2b>
 800a382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a384:	9004      	str	r0, [sp, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d100      	bne.n	800a38c <_dtoa_r+0x7d4>
 800a38a:	e1e3      	b.n	800a754 <_dtoa_r+0xb9c>
 800a38c:	001a      	movs	r2, r3
 800a38e:	0001      	movs	r1, r0
 800a390:	9802      	ldr	r0, [sp, #8]
 800a392:	f000 fb7b 	bl	800aa8c <__pow5mult>
 800a396:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a398:	9004      	str	r0, [sp, #16]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	dd00      	ble.n	800a3a0 <_dtoa_r+0x7e8>
 800a39e:	e082      	b.n	800a4a6 <_dtoa_r+0x8ee>
 800a3a0:	2500      	movs	r5, #0
 800a3a2:	9b06      	ldr	r3, [sp, #24]
 800a3a4:	42ab      	cmp	r3, r5
 800a3a6:	d10e      	bne.n	800a3c6 <_dtoa_r+0x80e>
 800a3a8:	9b07      	ldr	r3, [sp, #28]
 800a3aa:	031b      	lsls	r3, r3, #12
 800a3ac:	42ab      	cmp	r3, r5
 800a3ae:	d10a      	bne.n	800a3c6 <_dtoa_r+0x80e>
 800a3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3b2:	9a07      	ldr	r2, [sp, #28]
 800a3b4:	4213      	tst	r3, r2
 800a3b6:	d006      	beq.n	800a3c6 <_dtoa_r+0x80e>
 800a3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	3301      	adds	r3, #1
 800a3be:	930a      	str	r3, [sp, #40]	; 0x28
 800a3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d16c      	bne.n	800a4a8 <_dtoa_r+0x8f0>
 800a3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d0:	1818      	adds	r0, r3, r0
 800a3d2:	231f      	movs	r3, #31
 800a3d4:	4018      	ands	r0, r3
 800a3d6:	d07e      	beq.n	800a4d6 <_dtoa_r+0x91e>
 800a3d8:	3301      	adds	r3, #1
 800a3da:	1a1b      	subs	r3, r3, r0
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	dd70      	ble.n	800a4c2 <_dtoa_r+0x90a>
 800a3e0:	231c      	movs	r3, #28
 800a3e2:	1a18      	subs	r0, r3, r0
 800a3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e6:	1824      	adds	r4, r4, r0
 800a3e8:	181b      	adds	r3, r3, r0
 800a3ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ee:	181b      	adds	r3, r3, r0
 800a3f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dd05      	ble.n	800a404 <_dtoa_r+0x84c>
 800a3f8:	001a      	movs	r2, r3
 800a3fa:	9903      	ldr	r1, [sp, #12]
 800a3fc:	9802      	ldr	r0, [sp, #8]
 800a3fe:	f000 fb97 	bl	800ab30 <__lshift>
 800a402:	9003      	str	r0, [sp, #12]
 800a404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a406:	2b00      	cmp	r3, #0
 800a408:	dd05      	ble.n	800a416 <_dtoa_r+0x85e>
 800a40a:	001a      	movs	r2, r3
 800a40c:	9904      	ldr	r1, [sp, #16]
 800a40e:	9802      	ldr	r0, [sp, #8]
 800a410:	f000 fb8e 	bl	800ab30 <__lshift>
 800a414:	9004      	str	r0, [sp, #16]
 800a416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d05e      	beq.n	800a4da <_dtoa_r+0x922>
 800a41c:	9904      	ldr	r1, [sp, #16]
 800a41e:	9803      	ldr	r0, [sp, #12]
 800a420:	f000 fbd8 	bl	800abd4 <__mcmp>
 800a424:	2800      	cmp	r0, #0
 800a426:	da58      	bge.n	800a4da <_dtoa_r+0x922>
 800a428:	2300      	movs	r3, #0
 800a42a:	220a      	movs	r2, #10
 800a42c:	9903      	ldr	r1, [sp, #12]
 800a42e:	9802      	ldr	r0, [sp, #8]
 800a430:	f000 fa0c 	bl	800a84c <__multadd>
 800a434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a436:	3f01      	subs	r7, #1
 800a438:	9003      	str	r0, [sp, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d100      	bne.n	800a440 <_dtoa_r+0x888>
 800a43e:	e190      	b.n	800a762 <_dtoa_r+0xbaa>
 800a440:	2300      	movs	r3, #0
 800a442:	0031      	movs	r1, r6
 800a444:	220a      	movs	r2, #10
 800a446:	9802      	ldr	r0, [sp, #8]
 800a448:	f000 fa00 	bl	800a84c <__multadd>
 800a44c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a44e:	0006      	movs	r6, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	dd00      	ble.n	800a456 <_dtoa_r+0x89e>
 800a454:	e088      	b.n	800a568 <_dtoa_r+0x9b0>
 800a456:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a458:	2b02      	cmp	r3, #2
 800a45a:	dc00      	bgt.n	800a45e <_dtoa_r+0x8a6>
 800a45c:	e084      	b.n	800a568 <_dtoa_r+0x9b0>
 800a45e:	e044      	b.n	800a4ea <_dtoa_r+0x932>
 800a460:	2336      	movs	r3, #54	; 0x36
 800a462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a464:	1a9b      	subs	r3, r3, r2
 800a466:	e747      	b.n	800a2f8 <_dtoa_r+0x740>
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	1e5d      	subs	r5, r3, #1
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	42ab      	cmp	r3, r5
 800a470:	db08      	blt.n	800a484 <_dtoa_r+0x8cc>
 800a472:	1b5d      	subs	r5, r3, r5
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	da0c      	bge.n	800a494 <_dtoa_r+0x8dc>
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47e:	1a9c      	subs	r4, r3, r2
 800a480:	2300      	movs	r3, #0
 800a482:	e73b      	b.n	800a2fc <_dtoa_r+0x744>
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	9504      	str	r5, [sp, #16]
 800a488:	1aea      	subs	r2, r5, r3
 800a48a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a48c:	2500      	movs	r5, #0
 800a48e:	189b      	adds	r3, r3, r2
 800a490:	9311      	str	r3, [sp, #68]	; 0x44
 800a492:	e7ef      	b.n	800a474 <_dtoa_r+0x8bc>
 800a494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a498:	e730      	b.n	800a2fc <_dtoa_r+0x744>
 800a49a:	9d04      	ldr	r5, [sp, #16]
 800a49c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a49e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a4a0:	e737      	b.n	800a312 <_dtoa_r+0x75a>
 800a4a2:	9a04      	ldr	r2, [sp, #16]
 800a4a4:	e764      	b.n	800a370 <_dtoa_r+0x7b8>
 800a4a6:	2500      	movs	r5, #0
 800a4a8:	9b04      	ldr	r3, [sp, #16]
 800a4aa:	9a04      	ldr	r2, [sp, #16]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	9310      	str	r3, [sp, #64]	; 0x40
 800a4b0:	3303      	adds	r3, #3
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	18d3      	adds	r3, r2, r3
 800a4b6:	6858      	ldr	r0, [r3, #4]
 800a4b8:	f000 fa06 	bl	800a8c8 <__hi0bits>
 800a4bc:	2320      	movs	r3, #32
 800a4be:	1a18      	subs	r0, r3, r0
 800a4c0:	e785      	b.n	800a3ce <_dtoa_r+0x816>
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d095      	beq.n	800a3f2 <_dtoa_r+0x83a>
 800a4c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4c8:	331c      	adds	r3, #28
 800a4ca:	18d2      	adds	r2, r2, r3
 800a4cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a4ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4d0:	18e4      	adds	r4, r4, r3
 800a4d2:	18d3      	adds	r3, r2, r3
 800a4d4:	e78c      	b.n	800a3f0 <_dtoa_r+0x838>
 800a4d6:	0003      	movs	r3, r0
 800a4d8:	e7f5      	b.n	800a4c6 <_dtoa_r+0x90e>
 800a4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dc3d      	bgt.n	800a55c <_dtoa_r+0x9a4>
 800a4e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	dd3a      	ble.n	800a55c <_dtoa_r+0x9a4>
 800a4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e8:	930c      	str	r3, [sp, #48]	; 0x30
 800a4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10c      	bne.n	800a50a <_dtoa_r+0x952>
 800a4f0:	9904      	ldr	r1, [sp, #16]
 800a4f2:	2205      	movs	r2, #5
 800a4f4:	9802      	ldr	r0, [sp, #8]
 800a4f6:	f000 f9a9 	bl	800a84c <__multadd>
 800a4fa:	9004      	str	r0, [sp, #16]
 800a4fc:	0001      	movs	r1, r0
 800a4fe:	9803      	ldr	r0, [sp, #12]
 800a500:	f000 fb68 	bl	800abd4 <__mcmp>
 800a504:	2800      	cmp	r0, #0
 800a506:	dd00      	ble.n	800a50a <_dtoa_r+0x952>
 800a508:	e5af      	b.n	800a06a <_dtoa_r+0x4b2>
 800a50a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a50c:	9d08      	ldr	r5, [sp, #32]
 800a50e:	43df      	mvns	r7, r3
 800a510:	2300      	movs	r3, #0
 800a512:	9309      	str	r3, [sp, #36]	; 0x24
 800a514:	9904      	ldr	r1, [sp, #16]
 800a516:	9802      	ldr	r0, [sp, #8]
 800a518:	f000 f97f 	bl	800a81a <_Bfree>
 800a51c:	2e00      	cmp	r6, #0
 800a51e:	d100      	bne.n	800a522 <_dtoa_r+0x96a>
 800a520:	e69b      	b.n	800a25a <_dtoa_r+0x6a2>
 800a522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	d005      	beq.n	800a534 <_dtoa_r+0x97c>
 800a528:	42b3      	cmp	r3, r6
 800a52a:	d003      	beq.n	800a534 <_dtoa_r+0x97c>
 800a52c:	0019      	movs	r1, r3
 800a52e:	9802      	ldr	r0, [sp, #8]
 800a530:	f000 f973 	bl	800a81a <_Bfree>
 800a534:	0031      	movs	r1, r6
 800a536:	9802      	ldr	r0, [sp, #8]
 800a538:	f000 f96f 	bl	800a81a <_Bfree>
 800a53c:	e68d      	b.n	800a25a <_dtoa_r+0x6a2>
 800a53e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a540:	9304      	str	r3, [sp, #16]
 800a542:	001e      	movs	r6, r3
 800a544:	e7e1      	b.n	800a50a <_dtoa_r+0x952>
 800a546:	2300      	movs	r3, #0
 800a548:	e7fa      	b.n	800a540 <_dtoa_r+0x988>
 800a54a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a54c:	0037      	movs	r7, r6
 800a54e:	9304      	str	r3, [sp, #16]
 800a550:	001e      	movs	r6, r3
 800a552:	e58a      	b.n	800a06a <_dtoa_r+0x4b2>
 800a554:	40240000 	.word	0x40240000
 800a558:	00000433 	.word	0x00000433
 800a55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d100      	bne.n	800a564 <_dtoa_r+0x9ac>
 800a562:	e0b2      	b.n	800a6ca <_dtoa_r+0xb12>
 800a564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a566:	930c      	str	r3, [sp, #48]	; 0x30
 800a568:	2c00      	cmp	r4, #0
 800a56a:	dd05      	ble.n	800a578 <_dtoa_r+0x9c0>
 800a56c:	0031      	movs	r1, r6
 800a56e:	0022      	movs	r2, r4
 800a570:	9802      	ldr	r0, [sp, #8]
 800a572:	f000 fadd 	bl	800ab30 <__lshift>
 800a576:	0006      	movs	r6, r0
 800a578:	0030      	movs	r0, r6
 800a57a:	2d00      	cmp	r5, #0
 800a57c:	d011      	beq.n	800a5a2 <_dtoa_r+0x9ea>
 800a57e:	6871      	ldr	r1, [r6, #4]
 800a580:	9802      	ldr	r0, [sp, #8]
 800a582:	f000 f912 	bl	800a7aa <_Balloc>
 800a586:	0031      	movs	r1, r6
 800a588:	0004      	movs	r4, r0
 800a58a:	6933      	ldr	r3, [r6, #16]
 800a58c:	310c      	adds	r1, #12
 800a58e:	1c9a      	adds	r2, r3, #2
 800a590:	0092      	lsls	r2, r2, #2
 800a592:	300c      	adds	r0, #12
 800a594:	f7fe fd34 	bl	8009000 <memcpy>
 800a598:	2201      	movs	r2, #1
 800a59a:	0021      	movs	r1, r4
 800a59c:	9802      	ldr	r0, [sp, #8]
 800a59e:	f000 fac7 	bl	800ab30 <__lshift>
 800a5a2:	9609      	str	r6, [sp, #36]	; 0x24
 800a5a4:	0006      	movs	r6, r0
 800a5a6:	9b08      	ldr	r3, [sp, #32]
 800a5a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a5aa:	9904      	ldr	r1, [sp, #16]
 800a5ac:	9803      	ldr	r0, [sp, #12]
 800a5ae:	f7ff fa7d 	bl	8009aac <quorem>
 800a5b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5b4:	900d      	str	r0, [sp, #52]	; 0x34
 800a5b6:	0004      	movs	r4, r0
 800a5b8:	9803      	ldr	r0, [sp, #12]
 800a5ba:	f000 fb0b 	bl	800abd4 <__mcmp>
 800a5be:	0032      	movs	r2, r6
 800a5c0:	9010      	str	r0, [sp, #64]	; 0x40
 800a5c2:	9904      	ldr	r1, [sp, #16]
 800a5c4:	9802      	ldr	r0, [sp, #8]
 800a5c6:	f000 fb1f 	bl	800ac08 <__mdiff>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ce:	68c3      	ldr	r3, [r0, #12]
 800a5d0:	3430      	adds	r4, #48	; 0x30
 800a5d2:	0005      	movs	r5, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d104      	bne.n	800a5e2 <_dtoa_r+0xa2a>
 800a5d8:	0001      	movs	r1, r0
 800a5da:	9803      	ldr	r0, [sp, #12]
 800a5dc:	f000 fafa 	bl	800abd4 <__mcmp>
 800a5e0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5e2:	0029      	movs	r1, r5
 800a5e4:	9802      	ldr	r0, [sp, #8]
 800a5e6:	f000 f918 	bl	800a81a <_Bfree>
 800a5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	d10e      	bne.n	800a610 <_dtoa_r+0xa58>
 800a5f2:	9a06      	ldr	r2, [sp, #24]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	4213      	tst	r3, r2
 800a5f8:	d10a      	bne.n	800a610 <_dtoa_r+0xa58>
 800a5fa:	2c39      	cmp	r4, #57	; 0x39
 800a5fc:	d026      	beq.n	800a64c <_dtoa_r+0xa94>
 800a5fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	dd01      	ble.n	800a608 <_dtoa_r+0xa50>
 800a604:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a606:	3431      	adds	r4, #49	; 0x31
 800a608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60a:	1c5d      	adds	r5, r3, #1
 800a60c:	701c      	strb	r4, [r3, #0]
 800a60e:	e781      	b.n	800a514 <_dtoa_r+0x95c>
 800a610:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a612:	2b00      	cmp	r3, #0
 800a614:	db07      	blt.n	800a626 <_dtoa_r+0xa6e>
 800a616:	001d      	movs	r5, r3
 800a618:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a61a:	431d      	orrs	r5, r3
 800a61c:	d122      	bne.n	800a664 <_dtoa_r+0xaac>
 800a61e:	2301      	movs	r3, #1
 800a620:	9a06      	ldr	r2, [sp, #24]
 800a622:	4213      	tst	r3, r2
 800a624:	d11e      	bne.n	800a664 <_dtoa_r+0xaac>
 800a626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dded      	ble.n	800a608 <_dtoa_r+0xa50>
 800a62c:	9903      	ldr	r1, [sp, #12]
 800a62e:	2201      	movs	r2, #1
 800a630:	9802      	ldr	r0, [sp, #8]
 800a632:	f000 fa7d 	bl	800ab30 <__lshift>
 800a636:	9904      	ldr	r1, [sp, #16]
 800a638:	9003      	str	r0, [sp, #12]
 800a63a:	f000 facb 	bl	800abd4 <__mcmp>
 800a63e:	2800      	cmp	r0, #0
 800a640:	dc02      	bgt.n	800a648 <_dtoa_r+0xa90>
 800a642:	d1e1      	bne.n	800a608 <_dtoa_r+0xa50>
 800a644:	07e3      	lsls	r3, r4, #31
 800a646:	d5df      	bpl.n	800a608 <_dtoa_r+0xa50>
 800a648:	2c39      	cmp	r4, #57	; 0x39
 800a64a:	d1db      	bne.n	800a604 <_dtoa_r+0xa4c>
 800a64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a650:	1c5d      	adds	r5, r3, #1
 800a652:	2339      	movs	r3, #57	; 0x39
 800a654:	7013      	strb	r3, [r2, #0]
 800a656:	1e6b      	subs	r3, r5, #1
 800a658:	781a      	ldrb	r2, [r3, #0]
 800a65a:	2a39      	cmp	r2, #57	; 0x39
 800a65c:	d067      	beq.n	800a72e <_dtoa_r+0xb76>
 800a65e:	3201      	adds	r2, #1
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e757      	b.n	800a514 <_dtoa_r+0x95c>
 800a664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a666:	1c5d      	adds	r5, r3, #1
 800a668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	dd04      	ble.n	800a678 <_dtoa_r+0xac0>
 800a66e:	2c39      	cmp	r4, #57	; 0x39
 800a670:	d0ec      	beq.n	800a64c <_dtoa_r+0xa94>
 800a672:	3401      	adds	r4, #1
 800a674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a676:	e7c9      	b.n	800a60c <_dtoa_r+0xa54>
 800a678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a67a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a67c:	701c      	strb	r4, [r3, #0]
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	1aeb      	subs	r3, r5, r3
 800a682:	4293      	cmp	r3, r2
 800a684:	d03e      	beq.n	800a704 <_dtoa_r+0xb4c>
 800a686:	2300      	movs	r3, #0
 800a688:	220a      	movs	r2, #10
 800a68a:	9903      	ldr	r1, [sp, #12]
 800a68c:	9802      	ldr	r0, [sp, #8]
 800a68e:	f000 f8dd 	bl	800a84c <__multadd>
 800a692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a694:	9003      	str	r0, [sp, #12]
 800a696:	42b3      	cmp	r3, r6
 800a698:	d109      	bne.n	800a6ae <_dtoa_r+0xaf6>
 800a69a:	2300      	movs	r3, #0
 800a69c:	220a      	movs	r2, #10
 800a69e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6a0:	9802      	ldr	r0, [sp, #8]
 800a6a2:	f000 f8d3 	bl	800a84c <__multadd>
 800a6a6:	9009      	str	r0, [sp, #36]	; 0x24
 800a6a8:	0006      	movs	r6, r0
 800a6aa:	950a      	str	r5, [sp, #40]	; 0x28
 800a6ac:	e77d      	b.n	800a5aa <_dtoa_r+0x9f2>
 800a6ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	220a      	movs	r2, #10
 800a6b4:	9802      	ldr	r0, [sp, #8]
 800a6b6:	f000 f8c9 	bl	800a84c <__multadd>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9009      	str	r0, [sp, #36]	; 0x24
 800a6be:	220a      	movs	r2, #10
 800a6c0:	0031      	movs	r1, r6
 800a6c2:	9802      	ldr	r0, [sp, #8]
 800a6c4:	f000 f8c2 	bl	800a84c <__multadd>
 800a6c8:	e7ee      	b.n	800a6a8 <_dtoa_r+0xaf0>
 800a6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ce:	9b08      	ldr	r3, [sp, #32]
 800a6d0:	9306      	str	r3, [sp, #24]
 800a6d2:	9904      	ldr	r1, [sp, #16]
 800a6d4:	9803      	ldr	r0, [sp, #12]
 800a6d6:	f7ff f9e9 	bl	8009aac <quorem>
 800a6da:	9b06      	ldr	r3, [sp, #24]
 800a6dc:	3030      	adds	r0, #48	; 0x30
 800a6de:	1c5d      	adds	r5, r3, #1
 800a6e0:	7018      	strb	r0, [r3, #0]
 800a6e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6e4:	9b08      	ldr	r3, [sp, #32]
 800a6e6:	0004      	movs	r4, r0
 800a6e8:	1aeb      	subs	r3, r5, r3
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	dd08      	ble.n	800a700 <_dtoa_r+0xb48>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	220a      	movs	r2, #10
 800a6f2:	9903      	ldr	r1, [sp, #12]
 800a6f4:	9802      	ldr	r0, [sp, #8]
 800a6f6:	f000 f8a9 	bl	800a84c <__multadd>
 800a6fa:	9506      	str	r5, [sp, #24]
 800a6fc:	9003      	str	r0, [sp, #12]
 800a6fe:	e7e8      	b.n	800a6d2 <_dtoa_r+0xb1a>
 800a700:	2300      	movs	r3, #0
 800a702:	9309      	str	r3, [sp, #36]	; 0x24
 800a704:	9903      	ldr	r1, [sp, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	9802      	ldr	r0, [sp, #8]
 800a70a:	f000 fa11 	bl	800ab30 <__lshift>
 800a70e:	9904      	ldr	r1, [sp, #16]
 800a710:	9003      	str	r0, [sp, #12]
 800a712:	f000 fa5f 	bl	800abd4 <__mcmp>
 800a716:	2800      	cmp	r0, #0
 800a718:	dc9d      	bgt.n	800a656 <_dtoa_r+0xa9e>
 800a71a:	d101      	bne.n	800a720 <_dtoa_r+0xb68>
 800a71c:	07e3      	lsls	r3, r4, #31
 800a71e:	d49a      	bmi.n	800a656 <_dtoa_r+0xa9e>
 800a720:	1e6b      	subs	r3, r5, #1
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	2a30      	cmp	r2, #48	; 0x30
 800a726:	d000      	beq.n	800a72a <_dtoa_r+0xb72>
 800a728:	e6f4      	b.n	800a514 <_dtoa_r+0x95c>
 800a72a:	001d      	movs	r5, r3
 800a72c:	e7f8      	b.n	800a720 <_dtoa_r+0xb68>
 800a72e:	9a08      	ldr	r2, [sp, #32]
 800a730:	429a      	cmp	r2, r3
 800a732:	d103      	bne.n	800a73c <_dtoa_r+0xb84>
 800a734:	2331      	movs	r3, #49	; 0x31
 800a736:	3701      	adds	r7, #1
 800a738:	7013      	strb	r3, [r2, #0]
 800a73a:	e6eb      	b.n	800a514 <_dtoa_r+0x95c>
 800a73c:	001d      	movs	r5, r3
 800a73e:	e78a      	b.n	800a656 <_dtoa_r+0xa9e>
 800a740:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <_dtoa_r+0xbb8>)
 800a742:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a744:	9308      	str	r3, [sp, #32]
 800a746:	4b0b      	ldr	r3, [pc, #44]	; (800a774 <_dtoa_r+0xbbc>)
 800a748:	2a00      	cmp	r2, #0
 800a74a:	d001      	beq.n	800a750 <_dtoa_r+0xb98>
 800a74c:	f7ff fa77 	bl	8009c3e <_dtoa_r+0x86>
 800a750:	f7ff fa77 	bl	8009c42 <_dtoa_r+0x8a>
 800a754:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a756:	2b01      	cmp	r3, #1
 800a758:	dc00      	bgt.n	800a75c <_dtoa_r+0xba4>
 800a75a:	e621      	b.n	800a3a0 <_dtoa_r+0x7e8>
 800a75c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a75e:	2001      	movs	r0, #1
 800a760:	e635      	b.n	800a3ce <_dtoa_r+0x816>
 800a762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a764:	2b00      	cmp	r3, #0
 800a766:	dcb2      	bgt.n	800a6ce <_dtoa_r+0xb16>
 800a768:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	ddaf      	ble.n	800a6ce <_dtoa_r+0xb16>
 800a76e:	e6bc      	b.n	800a4ea <_dtoa_r+0x932>
 800a770:	0800c4d7 	.word	0x0800c4d7
 800a774:	0800c4df 	.word	0x0800c4df

0800a778 <_localeconv_r>:
 800a778:	4b03      	ldr	r3, [pc, #12]	; (800a788 <_localeconv_r+0x10>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6a18      	ldr	r0, [r3, #32]
 800a77e:	2800      	cmp	r0, #0
 800a780:	d100      	bne.n	800a784 <_localeconv_r+0xc>
 800a782:	4802      	ldr	r0, [pc, #8]	; (800a78c <_localeconv_r+0x14>)
 800a784:	30f0      	adds	r0, #240	; 0xf0
 800a786:	4770      	bx	lr
 800a788:	2000000c 	.word	0x2000000c
 800a78c:	20000070 	.word	0x20000070

0800a790 <memchr>:
 800a790:	b2c9      	uxtb	r1, r1
 800a792:	1882      	adds	r2, r0, r2
 800a794:	4290      	cmp	r0, r2
 800a796:	d101      	bne.n	800a79c <memchr+0xc>
 800a798:	2000      	movs	r0, #0
 800a79a:	4770      	bx	lr
 800a79c:	7803      	ldrb	r3, [r0, #0]
 800a79e:	428b      	cmp	r3, r1
 800a7a0:	d0fb      	beq.n	800a79a <memchr+0xa>
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	e7f6      	b.n	800a794 <memchr+0x4>

0800a7a6 <__malloc_lock>:
 800a7a6:	4770      	bx	lr

0800a7a8 <__malloc_unlock>:
 800a7a8:	4770      	bx	lr

0800a7aa <_Balloc>:
 800a7aa:	b570      	push	{r4, r5, r6, lr}
 800a7ac:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7ae:	0004      	movs	r4, r0
 800a7b0:	000d      	movs	r5, r1
 800a7b2:	2e00      	cmp	r6, #0
 800a7b4:	d107      	bne.n	800a7c6 <_Balloc+0x1c>
 800a7b6:	2010      	movs	r0, #16
 800a7b8:	f7fe fc06 	bl	8008fc8 <malloc>
 800a7bc:	6260      	str	r0, [r4, #36]	; 0x24
 800a7be:	6046      	str	r6, [r0, #4]
 800a7c0:	6086      	str	r6, [r0, #8]
 800a7c2:	6006      	str	r6, [r0, #0]
 800a7c4:	60c6      	str	r6, [r0, #12]
 800a7c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7c8:	68f3      	ldr	r3, [r6, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d013      	beq.n	800a7f6 <_Balloc+0x4c>
 800a7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d0:	00aa      	lsls	r2, r5, #2
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d118      	bne.n	800a80e <_Balloc+0x64>
 800a7dc:	2101      	movs	r1, #1
 800a7de:	000e      	movs	r6, r1
 800a7e0:	40ae      	lsls	r6, r5
 800a7e2:	1d72      	adds	r2, r6, #5
 800a7e4:	0092      	lsls	r2, r2, #2
 800a7e6:	0020      	movs	r0, r4
 800a7e8:	f000 fac6 	bl	800ad78 <_calloc_r>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d00c      	beq.n	800a80a <_Balloc+0x60>
 800a7f0:	6045      	str	r5, [r0, #4]
 800a7f2:	6086      	str	r6, [r0, #8]
 800a7f4:	e00d      	b.n	800a812 <_Balloc+0x68>
 800a7f6:	2221      	movs	r2, #33	; 0x21
 800a7f8:	2104      	movs	r1, #4
 800a7fa:	0020      	movs	r0, r4
 800a7fc:	f000 fabc 	bl	800ad78 <_calloc_r>
 800a800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a802:	60f0      	str	r0, [r6, #12]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e1      	bne.n	800a7ce <_Balloc+0x24>
 800a80a:	2000      	movs	r0, #0
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
 800a80e:	6802      	ldr	r2, [r0, #0]
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	2300      	movs	r3, #0
 800a814:	6103      	str	r3, [r0, #16]
 800a816:	60c3      	str	r3, [r0, #12]
 800a818:	e7f8      	b.n	800a80c <_Balloc+0x62>

0800a81a <_Bfree>:
 800a81a:	b570      	push	{r4, r5, r6, lr}
 800a81c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a81e:	0006      	movs	r6, r0
 800a820:	000d      	movs	r5, r1
 800a822:	2c00      	cmp	r4, #0
 800a824:	d107      	bne.n	800a836 <_Bfree+0x1c>
 800a826:	2010      	movs	r0, #16
 800a828:	f7fe fbce 	bl	8008fc8 <malloc>
 800a82c:	6270      	str	r0, [r6, #36]	; 0x24
 800a82e:	6044      	str	r4, [r0, #4]
 800a830:	6084      	str	r4, [r0, #8]
 800a832:	6004      	str	r4, [r0, #0]
 800a834:	60c4      	str	r4, [r0, #12]
 800a836:	2d00      	cmp	r5, #0
 800a838:	d007      	beq.n	800a84a <_Bfree+0x30>
 800a83a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a83c:	686a      	ldr	r2, [r5, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	0092      	lsls	r2, r2, #2
 800a842:	189b      	adds	r3, r3, r2
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	602a      	str	r2, [r5, #0]
 800a848:	601d      	str	r5, [r3, #0]
 800a84a:	bd70      	pop	{r4, r5, r6, pc}

0800a84c <__multadd>:
 800a84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a84e:	001e      	movs	r6, r3
 800a850:	2314      	movs	r3, #20
 800a852:	469c      	mov	ip, r3
 800a854:	0007      	movs	r7, r0
 800a856:	000c      	movs	r4, r1
 800a858:	2000      	movs	r0, #0
 800a85a:	690d      	ldr	r5, [r1, #16]
 800a85c:	448c      	add	ip, r1
 800a85e:	4663      	mov	r3, ip
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3001      	adds	r0, #1
 800a864:	b299      	uxth	r1, r3
 800a866:	4663      	mov	r3, ip
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4351      	muls	r1, r2
 800a86c:	0c1b      	lsrs	r3, r3, #16
 800a86e:	4353      	muls	r3, r2
 800a870:	1989      	adds	r1, r1, r6
 800a872:	0c0e      	lsrs	r6, r1, #16
 800a874:	199b      	adds	r3, r3, r6
 800a876:	b289      	uxth	r1, r1
 800a878:	0c1e      	lsrs	r6, r3, #16
 800a87a:	041b      	lsls	r3, r3, #16
 800a87c:	185b      	adds	r3, r3, r1
 800a87e:	4661      	mov	r1, ip
 800a880:	c108      	stmia	r1!, {r3}
 800a882:	468c      	mov	ip, r1
 800a884:	4285      	cmp	r5, r0
 800a886:	dcea      	bgt.n	800a85e <__multadd+0x12>
 800a888:	2e00      	cmp	r6, #0
 800a88a:	d01b      	beq.n	800a8c4 <__multadd+0x78>
 800a88c:	68a3      	ldr	r3, [r4, #8]
 800a88e:	42ab      	cmp	r3, r5
 800a890:	dc12      	bgt.n	800a8b8 <__multadd+0x6c>
 800a892:	6863      	ldr	r3, [r4, #4]
 800a894:	0038      	movs	r0, r7
 800a896:	1c59      	adds	r1, r3, #1
 800a898:	f7ff ff87 	bl	800a7aa <_Balloc>
 800a89c:	0021      	movs	r1, r4
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	9001      	str	r0, [sp, #4]
 800a8a2:	1c9a      	adds	r2, r3, #2
 800a8a4:	0092      	lsls	r2, r2, #2
 800a8a6:	310c      	adds	r1, #12
 800a8a8:	300c      	adds	r0, #12
 800a8aa:	f7fe fba9 	bl	8009000 <memcpy>
 800a8ae:	0021      	movs	r1, r4
 800a8b0:	0038      	movs	r0, r7
 800a8b2:	f7ff ffb2 	bl	800a81a <_Bfree>
 800a8b6:	9c01      	ldr	r4, [sp, #4]
 800a8b8:	1d2b      	adds	r3, r5, #4
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	18e3      	adds	r3, r4, r3
 800a8be:	3501      	adds	r5, #1
 800a8c0:	605e      	str	r6, [r3, #4]
 800a8c2:	6125      	str	r5, [r4, #16]
 800a8c4:	0020      	movs	r0, r4
 800a8c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800a8c8 <__hi0bits>:
 800a8c8:	0003      	movs	r3, r0
 800a8ca:	0c02      	lsrs	r2, r0, #16
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	4282      	cmp	r2, r0
 800a8d0:	d101      	bne.n	800a8d6 <__hi0bits+0xe>
 800a8d2:	041b      	lsls	r3, r3, #16
 800a8d4:	3010      	adds	r0, #16
 800a8d6:	0e1a      	lsrs	r2, r3, #24
 800a8d8:	d101      	bne.n	800a8de <__hi0bits+0x16>
 800a8da:	3008      	adds	r0, #8
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	0f1a      	lsrs	r2, r3, #28
 800a8e0:	d101      	bne.n	800a8e6 <__hi0bits+0x1e>
 800a8e2:	3004      	adds	r0, #4
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	0f9a      	lsrs	r2, r3, #30
 800a8e8:	d101      	bne.n	800a8ee <__hi0bits+0x26>
 800a8ea:	3002      	adds	r0, #2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	db03      	blt.n	800a8fa <__hi0bits+0x32>
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	d400      	bmi.n	800a8fa <__hi0bits+0x32>
 800a8f8:	2020      	movs	r0, #32
 800a8fa:	4770      	bx	lr

0800a8fc <__lo0bits>:
 800a8fc:	2207      	movs	r2, #7
 800a8fe:	6803      	ldr	r3, [r0, #0]
 800a900:	b510      	push	{r4, lr}
 800a902:	0001      	movs	r1, r0
 800a904:	401a      	ands	r2, r3
 800a906:	d00d      	beq.n	800a924 <__lo0bits+0x28>
 800a908:	2401      	movs	r4, #1
 800a90a:	2000      	movs	r0, #0
 800a90c:	4223      	tst	r3, r4
 800a90e:	d105      	bne.n	800a91c <__lo0bits+0x20>
 800a910:	3002      	adds	r0, #2
 800a912:	4203      	tst	r3, r0
 800a914:	d003      	beq.n	800a91e <__lo0bits+0x22>
 800a916:	40e3      	lsrs	r3, r4
 800a918:	0020      	movs	r0, r4
 800a91a:	600b      	str	r3, [r1, #0]
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	089b      	lsrs	r3, r3, #2
 800a920:	600b      	str	r3, [r1, #0]
 800a922:	e7fb      	b.n	800a91c <__lo0bits+0x20>
 800a924:	b29c      	uxth	r4, r3
 800a926:	0010      	movs	r0, r2
 800a928:	2c00      	cmp	r4, #0
 800a92a:	d101      	bne.n	800a930 <__lo0bits+0x34>
 800a92c:	2010      	movs	r0, #16
 800a92e:	0c1b      	lsrs	r3, r3, #16
 800a930:	b2da      	uxtb	r2, r3
 800a932:	2a00      	cmp	r2, #0
 800a934:	d101      	bne.n	800a93a <__lo0bits+0x3e>
 800a936:	3008      	adds	r0, #8
 800a938:	0a1b      	lsrs	r3, r3, #8
 800a93a:	071a      	lsls	r2, r3, #28
 800a93c:	d101      	bne.n	800a942 <__lo0bits+0x46>
 800a93e:	3004      	adds	r0, #4
 800a940:	091b      	lsrs	r3, r3, #4
 800a942:	079a      	lsls	r2, r3, #30
 800a944:	d101      	bne.n	800a94a <__lo0bits+0x4e>
 800a946:	3002      	adds	r0, #2
 800a948:	089b      	lsrs	r3, r3, #2
 800a94a:	07da      	lsls	r2, r3, #31
 800a94c:	d4e8      	bmi.n	800a920 <__lo0bits+0x24>
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	d001      	beq.n	800a956 <__lo0bits+0x5a>
 800a952:	3001      	adds	r0, #1
 800a954:	e7e4      	b.n	800a920 <__lo0bits+0x24>
 800a956:	2020      	movs	r0, #32
 800a958:	e7e0      	b.n	800a91c <__lo0bits+0x20>

0800a95a <__i2b>:
 800a95a:	b510      	push	{r4, lr}
 800a95c:	000c      	movs	r4, r1
 800a95e:	2101      	movs	r1, #1
 800a960:	f7ff ff23 	bl	800a7aa <_Balloc>
 800a964:	2301      	movs	r3, #1
 800a966:	6144      	str	r4, [r0, #20]
 800a968:	6103      	str	r3, [r0, #16]
 800a96a:	bd10      	pop	{r4, pc}

0800a96c <__multiply>:
 800a96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96e:	690b      	ldr	r3, [r1, #16]
 800a970:	0014      	movs	r4, r2
 800a972:	6912      	ldr	r2, [r2, #16]
 800a974:	b089      	sub	sp, #36	; 0x24
 800a976:	000d      	movs	r5, r1
 800a978:	4293      	cmp	r3, r2
 800a97a:	da01      	bge.n	800a980 <__multiply+0x14>
 800a97c:	0025      	movs	r5, r4
 800a97e:	000c      	movs	r4, r1
 800a980:	692f      	ldr	r7, [r5, #16]
 800a982:	6926      	ldr	r6, [r4, #16]
 800a984:	6869      	ldr	r1, [r5, #4]
 800a986:	19bb      	adds	r3, r7, r6
 800a988:	9302      	str	r3, [sp, #8]
 800a98a:	68ab      	ldr	r3, [r5, #8]
 800a98c:	19ba      	adds	r2, r7, r6
 800a98e:	4293      	cmp	r3, r2
 800a990:	da00      	bge.n	800a994 <__multiply+0x28>
 800a992:	3101      	adds	r1, #1
 800a994:	f7ff ff09 	bl	800a7aa <_Balloc>
 800a998:	0002      	movs	r2, r0
 800a99a:	19bb      	adds	r3, r7, r6
 800a99c:	3214      	adds	r2, #20
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	18d3      	adds	r3, r2, r3
 800a9a2:	469c      	mov	ip, r3
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	0013      	movs	r3, r2
 800a9a8:	9004      	str	r0, [sp, #16]
 800a9aa:	4563      	cmp	r3, ip
 800a9ac:	d31d      	bcc.n	800a9ea <__multiply+0x7e>
 800a9ae:	3514      	adds	r5, #20
 800a9b0:	00bf      	lsls	r7, r7, #2
 800a9b2:	19eb      	adds	r3, r5, r7
 800a9b4:	3414      	adds	r4, #20
 800a9b6:	00b6      	lsls	r6, r6, #2
 800a9b8:	9305      	str	r3, [sp, #20]
 800a9ba:	19a3      	adds	r3, r4, r6
 800a9bc:	9503      	str	r5, [sp, #12]
 800a9be:	9401      	str	r4, [sp, #4]
 800a9c0:	9307      	str	r3, [sp, #28]
 800a9c2:	9b07      	ldr	r3, [sp, #28]
 800a9c4:	9901      	ldr	r1, [sp, #4]
 800a9c6:	4299      	cmp	r1, r3
 800a9c8:	d311      	bcc.n	800a9ee <__multiply+0x82>
 800a9ca:	9b02      	ldr	r3, [sp, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dd06      	ble.n	800a9de <__multiply+0x72>
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	425b      	negs	r3, r3
 800a9d4:	449c      	add	ip, r3
 800a9d6:	4663      	mov	r3, ip
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d051      	beq.n	800aa82 <__multiply+0x116>
 800a9de:	9b04      	ldr	r3, [sp, #16]
 800a9e0:	9a02      	ldr	r2, [sp, #8]
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	611a      	str	r2, [r3, #16]
 800a9e6:	b009      	add	sp, #36	; 0x24
 800a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ea:	c302      	stmia	r3!, {r1}
 800a9ec:	e7dd      	b.n	800a9aa <__multiply+0x3e>
 800a9ee:	9b01      	ldr	r3, [sp, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	b298      	uxth	r0, r3
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d01c      	beq.n	800aa32 <__multiply+0xc6>
 800a9f8:	0015      	movs	r5, r2
 800a9fa:	2600      	movs	r6, #0
 800a9fc:	9f03      	ldr	r7, [sp, #12]
 800a9fe:	cf02      	ldmia	r7!, {r1}
 800aa00:	682c      	ldr	r4, [r5, #0]
 800aa02:	b28b      	uxth	r3, r1
 800aa04:	4343      	muls	r3, r0
 800aa06:	0c09      	lsrs	r1, r1, #16
 800aa08:	4341      	muls	r1, r0
 800aa0a:	b2a4      	uxth	r4, r4
 800aa0c:	191b      	adds	r3, r3, r4
 800aa0e:	199b      	adds	r3, r3, r6
 800aa10:	000e      	movs	r6, r1
 800aa12:	6829      	ldr	r1, [r5, #0]
 800aa14:	9506      	str	r5, [sp, #24]
 800aa16:	0c09      	lsrs	r1, r1, #16
 800aa18:	1871      	adds	r1, r6, r1
 800aa1a:	0c1e      	lsrs	r6, r3, #16
 800aa1c:	1989      	adds	r1, r1, r6
 800aa1e:	0c0e      	lsrs	r6, r1, #16
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	0409      	lsls	r1, r1, #16
 800aa24:	430b      	orrs	r3, r1
 800aa26:	c508      	stmia	r5!, {r3}
 800aa28:	9b05      	ldr	r3, [sp, #20]
 800aa2a:	42bb      	cmp	r3, r7
 800aa2c:	d8e7      	bhi.n	800a9fe <__multiply+0x92>
 800aa2e:	9b06      	ldr	r3, [sp, #24]
 800aa30:	605e      	str	r6, [r3, #4]
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	0c1d      	lsrs	r5, r3, #16
 800aa38:	d01e      	beq.n	800aa78 <__multiply+0x10c>
 800aa3a:	0010      	movs	r0, r2
 800aa3c:	2700      	movs	r7, #0
 800aa3e:	6813      	ldr	r3, [r2, #0]
 800aa40:	9e03      	ldr	r6, [sp, #12]
 800aa42:	6831      	ldr	r1, [r6, #0]
 800aa44:	6804      	ldr	r4, [r0, #0]
 800aa46:	b289      	uxth	r1, r1
 800aa48:	4369      	muls	r1, r5
 800aa4a:	0c24      	lsrs	r4, r4, #16
 800aa4c:	1909      	adds	r1, r1, r4
 800aa4e:	19c9      	adds	r1, r1, r7
 800aa50:	040f      	lsls	r7, r1, #16
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	433b      	orrs	r3, r7
 800aa56:	6003      	str	r3, [r0, #0]
 800aa58:	ce80      	ldmia	r6!, {r7}
 800aa5a:	6843      	ldr	r3, [r0, #4]
 800aa5c:	0c3f      	lsrs	r7, r7, #16
 800aa5e:	436f      	muls	r7, r5
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	18fb      	adds	r3, r7, r3
 800aa64:	0c09      	lsrs	r1, r1, #16
 800aa66:	185b      	adds	r3, r3, r1
 800aa68:	9905      	ldr	r1, [sp, #20]
 800aa6a:	9006      	str	r0, [sp, #24]
 800aa6c:	0c1f      	lsrs	r7, r3, #16
 800aa6e:	3004      	adds	r0, #4
 800aa70:	42b1      	cmp	r1, r6
 800aa72:	d8e6      	bhi.n	800aa42 <__multiply+0xd6>
 800aa74:	9906      	ldr	r1, [sp, #24]
 800aa76:	604b      	str	r3, [r1, #4]
 800aa78:	9b01      	ldr	r3, [sp, #4]
 800aa7a:	3204      	adds	r2, #4
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	e79f      	b.n	800a9c2 <__multiply+0x56>
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	9302      	str	r3, [sp, #8]
 800aa88:	e79f      	b.n	800a9ca <__multiply+0x5e>
	...

0800aa8c <__pow5mult>:
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa90:	4013      	ands	r3, r2
 800aa92:	0005      	movs	r5, r0
 800aa94:	000e      	movs	r6, r1
 800aa96:	0014      	movs	r4, r2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d008      	beq.n	800aaae <__pow5mult+0x22>
 800aa9c:	4922      	ldr	r1, [pc, #136]	; (800ab28 <__pow5mult+0x9c>)
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	009a      	lsls	r2, r3, #2
 800aaa2:	5852      	ldr	r2, [r2, r1]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	0031      	movs	r1, r6
 800aaa8:	f7ff fed0 	bl	800a84c <__multadd>
 800aaac:	0006      	movs	r6, r0
 800aaae:	10a3      	asrs	r3, r4, #2
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	d036      	beq.n	800ab22 <__pow5mult+0x96>
 800aab4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800aab6:	2c00      	cmp	r4, #0
 800aab8:	d107      	bne.n	800aaca <__pow5mult+0x3e>
 800aaba:	2010      	movs	r0, #16
 800aabc:	f7fe fa84 	bl	8008fc8 <malloc>
 800aac0:	6268      	str	r0, [r5, #36]	; 0x24
 800aac2:	6044      	str	r4, [r0, #4]
 800aac4:	6084      	str	r4, [r0, #8]
 800aac6:	6004      	str	r4, [r0, #0]
 800aac8:	60c4      	str	r4, [r0, #12]
 800aaca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800aacc:	68bc      	ldr	r4, [r7, #8]
 800aace:	2c00      	cmp	r4, #0
 800aad0:	d107      	bne.n	800aae2 <__pow5mult+0x56>
 800aad2:	4916      	ldr	r1, [pc, #88]	; (800ab2c <__pow5mult+0xa0>)
 800aad4:	0028      	movs	r0, r5
 800aad6:	f7ff ff40 	bl	800a95a <__i2b>
 800aada:	2300      	movs	r3, #0
 800aadc:	0004      	movs	r4, r0
 800aade:	60b8      	str	r0, [r7, #8]
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	2201      	movs	r2, #1
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	4213      	tst	r3, r2
 800aae8:	d00a      	beq.n	800ab00 <__pow5mult+0x74>
 800aaea:	0031      	movs	r1, r6
 800aaec:	0022      	movs	r2, r4
 800aaee:	0028      	movs	r0, r5
 800aaf0:	f7ff ff3c 	bl	800a96c <__multiply>
 800aaf4:	0007      	movs	r7, r0
 800aaf6:	0031      	movs	r1, r6
 800aaf8:	0028      	movs	r0, r5
 800aafa:	f7ff fe8e 	bl	800a81a <_Bfree>
 800aafe:	003e      	movs	r6, r7
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	105b      	asrs	r3, r3, #1
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	d00c      	beq.n	800ab22 <__pow5mult+0x96>
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d107      	bne.n	800ab1e <__pow5mult+0x92>
 800ab0e:	0022      	movs	r2, r4
 800ab10:	0021      	movs	r1, r4
 800ab12:	0028      	movs	r0, r5
 800ab14:	f7ff ff2a 	bl	800a96c <__multiply>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6020      	str	r0, [r4, #0]
 800ab1c:	6003      	str	r3, [r0, #0]
 800ab1e:	0004      	movs	r4, r0
 800ab20:	e7df      	b.n	800aae2 <__pow5mult+0x56>
 800ab22:	0030      	movs	r0, r6
 800ab24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab26:	46c0      	nop			; (mov r8, r8)
 800ab28:	0800c5d8 	.word	0x0800c5d8
 800ab2c:	00000271 	.word	0x00000271

0800ab30 <__lshift>:
 800ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab32:	000d      	movs	r5, r1
 800ab34:	0017      	movs	r7, r2
 800ab36:	692b      	ldr	r3, [r5, #16]
 800ab38:	1154      	asrs	r4, r2, #5
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	18e3      	adds	r3, r4, r3
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	3301      	adds	r3, #1
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	6849      	ldr	r1, [r1, #4]
 800ab46:	68ab      	ldr	r3, [r5, #8]
 800ab48:	9002      	str	r0, [sp, #8]
 800ab4a:	9a00      	ldr	r2, [sp, #0]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	db35      	blt.n	800abbc <__lshift+0x8c>
 800ab50:	9802      	ldr	r0, [sp, #8]
 800ab52:	f7ff fe2a 	bl	800a7aa <_Balloc>
 800ab56:	2300      	movs	r3, #0
 800ab58:	0002      	movs	r2, r0
 800ab5a:	0006      	movs	r6, r0
 800ab5c:	0019      	movs	r1, r3
 800ab5e:	3214      	adds	r2, #20
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	db2e      	blt.n	800abc2 <__lshift+0x92>
 800ab64:	43e3      	mvns	r3, r4
 800ab66:	17db      	asrs	r3, r3, #31
 800ab68:	401c      	ands	r4, r3
 800ab6a:	002b      	movs	r3, r5
 800ab6c:	00a4      	lsls	r4, r4, #2
 800ab6e:	1914      	adds	r4, r2, r4
 800ab70:	692a      	ldr	r2, [r5, #16]
 800ab72:	3314      	adds	r3, #20
 800ab74:	0092      	lsls	r2, r2, #2
 800ab76:	189a      	adds	r2, r3, r2
 800ab78:	4694      	mov	ip, r2
 800ab7a:	221f      	movs	r2, #31
 800ab7c:	4017      	ands	r7, r2
 800ab7e:	d024      	beq.n	800abca <__lshift+0x9a>
 800ab80:	3201      	adds	r2, #1
 800ab82:	1bd2      	subs	r2, r2, r7
 800ab84:	9203      	str	r2, [sp, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	6819      	ldr	r1, [r3, #0]
 800ab8a:	0020      	movs	r0, r4
 800ab8c:	40b9      	lsls	r1, r7
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	c404      	stmia	r4!, {r2}
 800ab92:	cb04      	ldmia	r3!, {r2}
 800ab94:	9903      	ldr	r1, [sp, #12]
 800ab96:	40ca      	lsrs	r2, r1
 800ab98:	459c      	cmp	ip, r3
 800ab9a:	d8f5      	bhi.n	800ab88 <__lshift+0x58>
 800ab9c:	6042      	str	r2, [r0, #4]
 800ab9e:	2a00      	cmp	r2, #0
 800aba0:	d002      	beq.n	800aba8 <__lshift+0x78>
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	3302      	adds	r3, #2
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	9b00      	ldr	r3, [sp, #0]
 800abaa:	9802      	ldr	r0, [sp, #8]
 800abac:	3b01      	subs	r3, #1
 800abae:	6133      	str	r3, [r6, #16]
 800abb0:	0029      	movs	r1, r5
 800abb2:	f7ff fe32 	bl	800a81a <_Bfree>
 800abb6:	0030      	movs	r0, r6
 800abb8:	b005      	add	sp, #20
 800abba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abbc:	3101      	adds	r1, #1
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	e7c3      	b.n	800ab4a <__lshift+0x1a>
 800abc2:	0098      	lsls	r0, r3, #2
 800abc4:	5011      	str	r1, [r2, r0]
 800abc6:	3301      	adds	r3, #1
 800abc8:	e7ca      	b.n	800ab60 <__lshift+0x30>
 800abca:	cb04      	ldmia	r3!, {r2}
 800abcc:	c404      	stmia	r4!, {r2}
 800abce:	459c      	cmp	ip, r3
 800abd0:	d8fb      	bhi.n	800abca <__lshift+0x9a>
 800abd2:	e7e9      	b.n	800aba8 <__lshift+0x78>

0800abd4 <__mcmp>:
 800abd4:	690a      	ldr	r2, [r1, #16]
 800abd6:	6903      	ldr	r3, [r0, #16]
 800abd8:	b530      	push	{r4, r5, lr}
 800abda:	1a9b      	subs	r3, r3, r2
 800abdc:	d10d      	bne.n	800abfa <__mcmp+0x26>
 800abde:	0092      	lsls	r2, r2, #2
 800abe0:	3014      	adds	r0, #20
 800abe2:	3114      	adds	r1, #20
 800abe4:	1884      	adds	r4, r0, r2
 800abe6:	1889      	adds	r1, r1, r2
 800abe8:	3c04      	subs	r4, #4
 800abea:	3904      	subs	r1, #4
 800abec:	6825      	ldr	r5, [r4, #0]
 800abee:	680a      	ldr	r2, [r1, #0]
 800abf0:	4295      	cmp	r5, r2
 800abf2:	d004      	beq.n	800abfe <__mcmp+0x2a>
 800abf4:	2301      	movs	r3, #1
 800abf6:	4295      	cmp	r5, r2
 800abf8:	d304      	bcc.n	800ac04 <__mcmp+0x30>
 800abfa:	0018      	movs	r0, r3
 800abfc:	bd30      	pop	{r4, r5, pc}
 800abfe:	42a0      	cmp	r0, r4
 800ac00:	d3f2      	bcc.n	800abe8 <__mcmp+0x14>
 800ac02:	e7fa      	b.n	800abfa <__mcmp+0x26>
 800ac04:	425b      	negs	r3, r3
 800ac06:	e7f8      	b.n	800abfa <__mcmp+0x26>

0800ac08 <__mdiff>:
 800ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0a:	000d      	movs	r5, r1
 800ac0c:	b085      	sub	sp, #20
 800ac0e:	0007      	movs	r7, r0
 800ac10:	0011      	movs	r1, r2
 800ac12:	0028      	movs	r0, r5
 800ac14:	0014      	movs	r4, r2
 800ac16:	f7ff ffdd 	bl	800abd4 <__mcmp>
 800ac1a:	1e06      	subs	r6, r0, #0
 800ac1c:	d108      	bne.n	800ac30 <__mdiff+0x28>
 800ac1e:	0001      	movs	r1, r0
 800ac20:	0038      	movs	r0, r7
 800ac22:	f7ff fdc2 	bl	800a7aa <_Balloc>
 800ac26:	2301      	movs	r3, #1
 800ac28:	6146      	str	r6, [r0, #20]
 800ac2a:	6103      	str	r3, [r0, #16]
 800ac2c:	b005      	add	sp, #20
 800ac2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac30:	2301      	movs	r3, #1
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	2800      	cmp	r0, #0
 800ac36:	db04      	blt.n	800ac42 <__mdiff+0x3a>
 800ac38:	0023      	movs	r3, r4
 800ac3a:	002c      	movs	r4, r5
 800ac3c:	001d      	movs	r5, r3
 800ac3e:	2300      	movs	r3, #0
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	6861      	ldr	r1, [r4, #4]
 800ac44:	0038      	movs	r0, r7
 800ac46:	f7ff fdb0 	bl	800a7aa <_Balloc>
 800ac4a:	002f      	movs	r7, r5
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	6926      	ldr	r6, [r4, #16]
 800ac52:	60c3      	str	r3, [r0, #12]
 800ac54:	3414      	adds	r4, #20
 800ac56:	00b3      	lsls	r3, r6, #2
 800ac58:	18e3      	adds	r3, r4, r3
 800ac5a:	9302      	str	r3, [sp, #8]
 800ac5c:	692b      	ldr	r3, [r5, #16]
 800ac5e:	3714      	adds	r7, #20
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	18fb      	adds	r3, r7, r3
 800ac64:	9303      	str	r3, [sp, #12]
 800ac66:	0003      	movs	r3, r0
 800ac68:	4694      	mov	ip, r2
 800ac6a:	3314      	adds	r3, #20
 800ac6c:	cc20      	ldmia	r4!, {r5}
 800ac6e:	cf04      	ldmia	r7!, {r2}
 800ac70:	9201      	str	r2, [sp, #4]
 800ac72:	b2aa      	uxth	r2, r5
 800ac74:	4494      	add	ip, r2
 800ac76:	466a      	mov	r2, sp
 800ac78:	4661      	mov	r1, ip
 800ac7a:	8892      	ldrh	r2, [r2, #4]
 800ac7c:	0c2d      	lsrs	r5, r5, #16
 800ac7e:	1a8a      	subs	r2, r1, r2
 800ac80:	9901      	ldr	r1, [sp, #4]
 800ac82:	0c09      	lsrs	r1, r1, #16
 800ac84:	1a69      	subs	r1, r5, r1
 800ac86:	1415      	asrs	r5, r2, #16
 800ac88:	1949      	adds	r1, r1, r5
 800ac8a:	140d      	asrs	r5, r1, #16
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	0409      	lsls	r1, r1, #16
 800ac90:	430a      	orrs	r2, r1
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	9a03      	ldr	r2, [sp, #12]
 800ac96:	46ac      	mov	ip, r5
 800ac98:	3304      	adds	r3, #4
 800ac9a:	42ba      	cmp	r2, r7
 800ac9c:	d8e6      	bhi.n	800ac6c <__mdiff+0x64>
 800ac9e:	9902      	ldr	r1, [sp, #8]
 800aca0:	001a      	movs	r2, r3
 800aca2:	428c      	cmp	r4, r1
 800aca4:	d305      	bcc.n	800acb2 <__mdiff+0xaa>
 800aca6:	3a04      	subs	r2, #4
 800aca8:	6813      	ldr	r3, [r2, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00e      	beq.n	800accc <__mdiff+0xc4>
 800acae:	6106      	str	r6, [r0, #16]
 800acb0:	e7bc      	b.n	800ac2c <__mdiff+0x24>
 800acb2:	cc04      	ldmia	r4!, {r2}
 800acb4:	b291      	uxth	r1, r2
 800acb6:	4461      	add	r1, ip
 800acb8:	140d      	asrs	r5, r1, #16
 800acba:	0c12      	lsrs	r2, r2, #16
 800acbc:	1952      	adds	r2, r2, r5
 800acbe:	1415      	asrs	r5, r2, #16
 800acc0:	b289      	uxth	r1, r1
 800acc2:	0412      	lsls	r2, r2, #16
 800acc4:	430a      	orrs	r2, r1
 800acc6:	46ac      	mov	ip, r5
 800acc8:	c304      	stmia	r3!, {r2}
 800acca:	e7e8      	b.n	800ac9e <__mdiff+0x96>
 800accc:	3e01      	subs	r6, #1
 800acce:	e7ea      	b.n	800aca6 <__mdiff+0x9e>

0800acd0 <__d2b>:
 800acd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acd2:	001d      	movs	r5, r3
 800acd4:	2101      	movs	r1, #1
 800acd6:	0014      	movs	r4, r2
 800acd8:	9f08      	ldr	r7, [sp, #32]
 800acda:	f7ff fd66 	bl	800a7aa <_Balloc>
 800acde:	032b      	lsls	r3, r5, #12
 800ace0:	006d      	lsls	r5, r5, #1
 800ace2:	0006      	movs	r6, r0
 800ace4:	0b1b      	lsrs	r3, r3, #12
 800ace6:	0d6d      	lsrs	r5, r5, #21
 800ace8:	d124      	bne.n	800ad34 <__d2b+0x64>
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	2c00      	cmp	r4, #0
 800acee:	d027      	beq.n	800ad40 <__d2b+0x70>
 800acf0:	4668      	mov	r0, sp
 800acf2:	9400      	str	r4, [sp, #0]
 800acf4:	f7ff fe02 	bl	800a8fc <__lo0bits>
 800acf8:	9c00      	ldr	r4, [sp, #0]
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d01e      	beq.n	800ad3c <__d2b+0x6c>
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	2120      	movs	r1, #32
 800ad02:	001a      	movs	r2, r3
 800ad04:	1a09      	subs	r1, r1, r0
 800ad06:	408a      	lsls	r2, r1
 800ad08:	40c3      	lsrs	r3, r0
 800ad0a:	4322      	orrs	r2, r4
 800ad0c:	6172      	str	r2, [r6, #20]
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	9c01      	ldr	r4, [sp, #4]
 800ad12:	61b4      	str	r4, [r6, #24]
 800ad14:	1e63      	subs	r3, r4, #1
 800ad16:	419c      	sbcs	r4, r3
 800ad18:	3401      	adds	r4, #1
 800ad1a:	6134      	str	r4, [r6, #16]
 800ad1c:	2d00      	cmp	r5, #0
 800ad1e:	d018      	beq.n	800ad52 <__d2b+0x82>
 800ad20:	4b12      	ldr	r3, [pc, #72]	; (800ad6c <__d2b+0x9c>)
 800ad22:	18ed      	adds	r5, r5, r3
 800ad24:	2335      	movs	r3, #53	; 0x35
 800ad26:	182d      	adds	r5, r5, r0
 800ad28:	603d      	str	r5, [r7, #0]
 800ad2a:	1a18      	subs	r0, r3, r0
 800ad2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2e:	6018      	str	r0, [r3, #0]
 800ad30:	0030      	movs	r0, r6
 800ad32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad34:	2280      	movs	r2, #128	; 0x80
 800ad36:	0352      	lsls	r2, r2, #13
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	e7d6      	b.n	800acea <__d2b+0x1a>
 800ad3c:	6174      	str	r4, [r6, #20]
 800ad3e:	e7e7      	b.n	800ad10 <__d2b+0x40>
 800ad40:	a801      	add	r0, sp, #4
 800ad42:	f7ff fddb 	bl	800a8fc <__lo0bits>
 800ad46:	2401      	movs	r4, #1
 800ad48:	9b01      	ldr	r3, [sp, #4]
 800ad4a:	6134      	str	r4, [r6, #16]
 800ad4c:	6173      	str	r3, [r6, #20]
 800ad4e:	3020      	adds	r0, #32
 800ad50:	e7e4      	b.n	800ad1c <__d2b+0x4c>
 800ad52:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <__d2b+0xa0>)
 800ad54:	18c0      	adds	r0, r0, r3
 800ad56:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <__d2b+0xa4>)
 800ad58:	6038      	str	r0, [r7, #0]
 800ad5a:	18e3      	adds	r3, r4, r3
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	18f3      	adds	r3, r6, r3
 800ad60:	6958      	ldr	r0, [r3, #20]
 800ad62:	f7ff fdb1 	bl	800a8c8 <__hi0bits>
 800ad66:	0164      	lsls	r4, r4, #5
 800ad68:	1a20      	subs	r0, r4, r0
 800ad6a:	e7df      	b.n	800ad2c <__d2b+0x5c>
 800ad6c:	fffffbcd 	.word	0xfffffbcd
 800ad70:	fffffbce 	.word	0xfffffbce
 800ad74:	3fffffff 	.word	0x3fffffff

0800ad78 <_calloc_r>:
 800ad78:	434a      	muls	r2, r1
 800ad7a:	b570      	push	{r4, r5, r6, lr}
 800ad7c:	0011      	movs	r1, r2
 800ad7e:	0014      	movs	r4, r2
 800ad80:	f7fe f99a 	bl	80090b8 <_malloc_r>
 800ad84:	1e05      	subs	r5, r0, #0
 800ad86:	d003      	beq.n	800ad90 <_calloc_r+0x18>
 800ad88:	0022      	movs	r2, r4
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f7fe f941 	bl	8009012 <memset>
 800ad90:	0028      	movs	r0, r5
 800ad92:	bd70      	pop	{r4, r5, r6, pc}

0800ad94 <_realloc_r>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	0007      	movs	r7, r0
 800ad98:	000d      	movs	r5, r1
 800ad9a:	0016      	movs	r6, r2
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	d105      	bne.n	800adac <_realloc_r+0x18>
 800ada0:	0011      	movs	r1, r2
 800ada2:	f7fe f989 	bl	80090b8 <_malloc_r>
 800ada6:	0004      	movs	r4, r0
 800ada8:	0020      	movs	r0, r4
 800adaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adac:	2a00      	cmp	r2, #0
 800adae:	d103      	bne.n	800adb8 <_realloc_r+0x24>
 800adb0:	f7fe f938 	bl	8009024 <_free_r>
 800adb4:	0034      	movs	r4, r6
 800adb6:	e7f7      	b.n	800ada8 <_realloc_r+0x14>
 800adb8:	f000 f985 	bl	800b0c6 <_malloc_usable_size_r>
 800adbc:	002c      	movs	r4, r5
 800adbe:	42b0      	cmp	r0, r6
 800adc0:	d2f2      	bcs.n	800ada8 <_realloc_r+0x14>
 800adc2:	0031      	movs	r1, r6
 800adc4:	0038      	movs	r0, r7
 800adc6:	f7fe f977 	bl	80090b8 <_malloc_r>
 800adca:	1e04      	subs	r4, r0, #0
 800adcc:	d0ec      	beq.n	800ada8 <_realloc_r+0x14>
 800adce:	0029      	movs	r1, r5
 800add0:	0032      	movs	r2, r6
 800add2:	f7fe f915 	bl	8009000 <memcpy>
 800add6:	0029      	movs	r1, r5
 800add8:	0038      	movs	r0, r7
 800adda:	f7fe f923 	bl	8009024 <_free_r>
 800adde:	e7e3      	b.n	800ada8 <_realloc_r+0x14>

0800ade0 <__ssputs_r>:
 800ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade2:	688e      	ldr	r6, [r1, #8]
 800ade4:	b085      	sub	sp, #20
 800ade6:	0007      	movs	r7, r0
 800ade8:	000c      	movs	r4, r1
 800adea:	9203      	str	r2, [sp, #12]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	429e      	cmp	r6, r3
 800adf0:	d83c      	bhi.n	800ae6c <__ssputs_r+0x8c>
 800adf2:	2390      	movs	r3, #144	; 0x90
 800adf4:	898a      	ldrh	r2, [r1, #12]
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	421a      	tst	r2, r3
 800adfa:	d034      	beq.n	800ae66 <__ssputs_r+0x86>
 800adfc:	2503      	movs	r5, #3
 800adfe:	6909      	ldr	r1, [r1, #16]
 800ae00:	6823      	ldr	r3, [r4, #0]
 800ae02:	1a5b      	subs	r3, r3, r1
 800ae04:	9302      	str	r3, [sp, #8]
 800ae06:	6963      	ldr	r3, [r4, #20]
 800ae08:	9802      	ldr	r0, [sp, #8]
 800ae0a:	435d      	muls	r5, r3
 800ae0c:	0feb      	lsrs	r3, r5, #31
 800ae0e:	195d      	adds	r5, r3, r5
 800ae10:	9b01      	ldr	r3, [sp, #4]
 800ae12:	106d      	asrs	r5, r5, #1
 800ae14:	3301      	adds	r3, #1
 800ae16:	181b      	adds	r3, r3, r0
 800ae18:	42ab      	cmp	r3, r5
 800ae1a:	d900      	bls.n	800ae1e <__ssputs_r+0x3e>
 800ae1c:	001d      	movs	r5, r3
 800ae1e:	0553      	lsls	r3, r2, #21
 800ae20:	d532      	bpl.n	800ae88 <__ssputs_r+0xa8>
 800ae22:	0029      	movs	r1, r5
 800ae24:	0038      	movs	r0, r7
 800ae26:	f7fe f947 	bl	80090b8 <_malloc_r>
 800ae2a:	1e06      	subs	r6, r0, #0
 800ae2c:	d109      	bne.n	800ae42 <__ssputs_r+0x62>
 800ae2e:	230c      	movs	r3, #12
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	2340      	movs	r3, #64	; 0x40
 800ae34:	2001      	movs	r0, #1
 800ae36:	89a2      	ldrh	r2, [r4, #12]
 800ae38:	4240      	negs	r0, r0
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	b005      	add	sp, #20
 800ae40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae42:	9a02      	ldr	r2, [sp, #8]
 800ae44:	6921      	ldr	r1, [r4, #16]
 800ae46:	f7fe f8db 	bl	8009000 <memcpy>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	4a14      	ldr	r2, [pc, #80]	; (800aea0 <__ssputs_r+0xc0>)
 800ae4e:	401a      	ands	r2, r3
 800ae50:	2380      	movs	r3, #128	; 0x80
 800ae52:	4313      	orrs	r3, r2
 800ae54:	81a3      	strh	r3, [r4, #12]
 800ae56:	9b02      	ldr	r3, [sp, #8]
 800ae58:	6126      	str	r6, [r4, #16]
 800ae5a:	18f6      	adds	r6, r6, r3
 800ae5c:	6026      	str	r6, [r4, #0]
 800ae5e:	6165      	str	r5, [r4, #20]
 800ae60:	9e01      	ldr	r6, [sp, #4]
 800ae62:	1aed      	subs	r5, r5, r3
 800ae64:	60a5      	str	r5, [r4, #8]
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	429e      	cmp	r6, r3
 800ae6a:	d900      	bls.n	800ae6e <__ssputs_r+0x8e>
 800ae6c:	9e01      	ldr	r6, [sp, #4]
 800ae6e:	0032      	movs	r2, r6
 800ae70:	9903      	ldr	r1, [sp, #12]
 800ae72:	6820      	ldr	r0, [r4, #0]
 800ae74:	f000 f914 	bl	800b0a0 <memmove>
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	1b9b      	subs	r3, r3, r6
 800ae7e:	60a3      	str	r3, [r4, #8]
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	199e      	adds	r6, r3, r6
 800ae84:	6026      	str	r6, [r4, #0]
 800ae86:	e7da      	b.n	800ae3e <__ssputs_r+0x5e>
 800ae88:	002a      	movs	r2, r5
 800ae8a:	0038      	movs	r0, r7
 800ae8c:	f7ff ff82 	bl	800ad94 <_realloc_r>
 800ae90:	1e06      	subs	r6, r0, #0
 800ae92:	d1e0      	bne.n	800ae56 <__ssputs_r+0x76>
 800ae94:	6921      	ldr	r1, [r4, #16]
 800ae96:	0038      	movs	r0, r7
 800ae98:	f7fe f8c4 	bl	8009024 <_free_r>
 800ae9c:	e7c7      	b.n	800ae2e <__ssputs_r+0x4e>
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	fffffb7f 	.word	0xfffffb7f

0800aea4 <_svfiprintf_r>:
 800aea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aea6:	b0a1      	sub	sp, #132	; 0x84
 800aea8:	9003      	str	r0, [sp, #12]
 800aeaa:	001d      	movs	r5, r3
 800aeac:	898b      	ldrh	r3, [r1, #12]
 800aeae:	000f      	movs	r7, r1
 800aeb0:	0016      	movs	r6, r2
 800aeb2:	061b      	lsls	r3, r3, #24
 800aeb4:	d511      	bpl.n	800aeda <_svfiprintf_r+0x36>
 800aeb6:	690b      	ldr	r3, [r1, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10e      	bne.n	800aeda <_svfiprintf_r+0x36>
 800aebc:	2140      	movs	r1, #64	; 0x40
 800aebe:	f7fe f8fb 	bl	80090b8 <_malloc_r>
 800aec2:	6038      	str	r0, [r7, #0]
 800aec4:	6138      	str	r0, [r7, #16]
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d105      	bne.n	800aed6 <_svfiprintf_r+0x32>
 800aeca:	230c      	movs	r3, #12
 800aecc:	9a03      	ldr	r2, [sp, #12]
 800aece:	3801      	subs	r0, #1
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	b021      	add	sp, #132	; 0x84
 800aed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed6:	2340      	movs	r3, #64	; 0x40
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	2300      	movs	r3, #0
 800aedc:	ac08      	add	r4, sp, #32
 800aede:	6163      	str	r3, [r4, #20]
 800aee0:	3320      	adds	r3, #32
 800aee2:	7663      	strb	r3, [r4, #25]
 800aee4:	3310      	adds	r3, #16
 800aee6:	76a3      	strb	r3, [r4, #26]
 800aee8:	9507      	str	r5, [sp, #28]
 800aeea:	0035      	movs	r5, r6
 800aeec:	782b      	ldrb	r3, [r5, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <_svfiprintf_r+0x52>
 800aef2:	2b25      	cmp	r3, #37	; 0x25
 800aef4:	d146      	bne.n	800af84 <_svfiprintf_r+0xe0>
 800aef6:	1bab      	subs	r3, r5, r6
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	d00c      	beq.n	800af16 <_svfiprintf_r+0x72>
 800aefc:	0032      	movs	r2, r6
 800aefe:	0039      	movs	r1, r7
 800af00:	9803      	ldr	r0, [sp, #12]
 800af02:	f7ff ff6d 	bl	800ade0 <__ssputs_r>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d100      	bne.n	800af0c <_svfiprintf_r+0x68>
 800af0a:	e0ae      	b.n	800b06a <_svfiprintf_r+0x1c6>
 800af0c:	6962      	ldr	r2, [r4, #20]
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	4694      	mov	ip, r2
 800af12:	4463      	add	r3, ip
 800af14:	6163      	str	r3, [r4, #20]
 800af16:	782b      	ldrb	r3, [r5, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d100      	bne.n	800af1e <_svfiprintf_r+0x7a>
 800af1c:	e0a5      	b.n	800b06a <_svfiprintf_r+0x1c6>
 800af1e:	2201      	movs	r2, #1
 800af20:	2300      	movs	r3, #0
 800af22:	4252      	negs	r2, r2
 800af24:	6062      	str	r2, [r4, #4]
 800af26:	a904      	add	r1, sp, #16
 800af28:	3254      	adds	r2, #84	; 0x54
 800af2a:	1852      	adds	r2, r2, r1
 800af2c:	1c6e      	adds	r6, r5, #1
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	60e3      	str	r3, [r4, #12]
 800af32:	60a3      	str	r3, [r4, #8]
 800af34:	7013      	strb	r3, [r2, #0]
 800af36:	65a3      	str	r3, [r4, #88]	; 0x58
 800af38:	7831      	ldrb	r1, [r6, #0]
 800af3a:	2205      	movs	r2, #5
 800af3c:	4853      	ldr	r0, [pc, #332]	; (800b08c <_svfiprintf_r+0x1e8>)
 800af3e:	f7ff fc27 	bl	800a790 <memchr>
 800af42:	1c75      	adds	r5, r6, #1
 800af44:	2800      	cmp	r0, #0
 800af46:	d11f      	bne.n	800af88 <_svfiprintf_r+0xe4>
 800af48:	6822      	ldr	r2, [r4, #0]
 800af4a:	06d3      	lsls	r3, r2, #27
 800af4c:	d504      	bpl.n	800af58 <_svfiprintf_r+0xb4>
 800af4e:	2353      	movs	r3, #83	; 0x53
 800af50:	a904      	add	r1, sp, #16
 800af52:	185b      	adds	r3, r3, r1
 800af54:	2120      	movs	r1, #32
 800af56:	7019      	strb	r1, [r3, #0]
 800af58:	0713      	lsls	r3, r2, #28
 800af5a:	d504      	bpl.n	800af66 <_svfiprintf_r+0xc2>
 800af5c:	2353      	movs	r3, #83	; 0x53
 800af5e:	a904      	add	r1, sp, #16
 800af60:	185b      	adds	r3, r3, r1
 800af62:	212b      	movs	r1, #43	; 0x2b
 800af64:	7019      	strb	r1, [r3, #0]
 800af66:	7833      	ldrb	r3, [r6, #0]
 800af68:	2b2a      	cmp	r3, #42	; 0x2a
 800af6a:	d016      	beq.n	800af9a <_svfiprintf_r+0xf6>
 800af6c:	0035      	movs	r5, r6
 800af6e:	2100      	movs	r1, #0
 800af70:	200a      	movs	r0, #10
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	782a      	ldrb	r2, [r5, #0]
 800af76:	1c6e      	adds	r6, r5, #1
 800af78:	3a30      	subs	r2, #48	; 0x30
 800af7a:	2a09      	cmp	r2, #9
 800af7c:	d94e      	bls.n	800b01c <_svfiprintf_r+0x178>
 800af7e:	2900      	cmp	r1, #0
 800af80:	d018      	beq.n	800afb4 <_svfiprintf_r+0x110>
 800af82:	e010      	b.n	800afa6 <_svfiprintf_r+0x102>
 800af84:	3501      	adds	r5, #1
 800af86:	e7b1      	b.n	800aeec <_svfiprintf_r+0x48>
 800af88:	4b40      	ldr	r3, [pc, #256]	; (800b08c <_svfiprintf_r+0x1e8>)
 800af8a:	6822      	ldr	r2, [r4, #0]
 800af8c:	1ac0      	subs	r0, r0, r3
 800af8e:	2301      	movs	r3, #1
 800af90:	4083      	lsls	r3, r0
 800af92:	4313      	orrs	r3, r2
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	002e      	movs	r6, r5
 800af98:	e7ce      	b.n	800af38 <_svfiprintf_r+0x94>
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	1d19      	adds	r1, r3, #4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	9107      	str	r1, [sp, #28]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	db01      	blt.n	800afaa <_svfiprintf_r+0x106>
 800afa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa8:	e004      	b.n	800afb4 <_svfiprintf_r+0x110>
 800afaa:	425b      	negs	r3, r3
 800afac:	60e3      	str	r3, [r4, #12]
 800afae:	2302      	movs	r3, #2
 800afb0:	4313      	orrs	r3, r2
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	782b      	ldrb	r3, [r5, #0]
 800afb6:	2b2e      	cmp	r3, #46	; 0x2e
 800afb8:	d10a      	bne.n	800afd0 <_svfiprintf_r+0x12c>
 800afba:	786b      	ldrb	r3, [r5, #1]
 800afbc:	2b2a      	cmp	r3, #42	; 0x2a
 800afbe:	d135      	bne.n	800b02c <_svfiprintf_r+0x188>
 800afc0:	9b07      	ldr	r3, [sp, #28]
 800afc2:	3502      	adds	r5, #2
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	9207      	str	r2, [sp, #28]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	db2b      	blt.n	800b026 <_svfiprintf_r+0x182>
 800afce:	9309      	str	r3, [sp, #36]	; 0x24
 800afd0:	4e2f      	ldr	r6, [pc, #188]	; (800b090 <_svfiprintf_r+0x1ec>)
 800afd2:	7829      	ldrb	r1, [r5, #0]
 800afd4:	2203      	movs	r2, #3
 800afd6:	0030      	movs	r0, r6
 800afd8:	f7ff fbda 	bl	800a790 <memchr>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d006      	beq.n	800afee <_svfiprintf_r+0x14a>
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	1b80      	subs	r0, r0, r6
 800afe4:	4083      	lsls	r3, r0
 800afe6:	6822      	ldr	r2, [r4, #0]
 800afe8:	3501      	adds	r5, #1
 800afea:	4313      	orrs	r3, r2
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	7829      	ldrb	r1, [r5, #0]
 800aff0:	2206      	movs	r2, #6
 800aff2:	4828      	ldr	r0, [pc, #160]	; (800b094 <_svfiprintf_r+0x1f0>)
 800aff4:	1c6e      	adds	r6, r5, #1
 800aff6:	7621      	strb	r1, [r4, #24]
 800aff8:	f7ff fbca 	bl	800a790 <memchr>
 800affc:	2800      	cmp	r0, #0
 800affe:	d03c      	beq.n	800b07a <_svfiprintf_r+0x1d6>
 800b000:	4b25      	ldr	r3, [pc, #148]	; (800b098 <_svfiprintf_r+0x1f4>)
 800b002:	2b00      	cmp	r3, #0
 800b004:	d125      	bne.n	800b052 <_svfiprintf_r+0x1ae>
 800b006:	2207      	movs	r2, #7
 800b008:	9b07      	ldr	r3, [sp, #28]
 800b00a:	3307      	adds	r3, #7
 800b00c:	4393      	bics	r3, r2
 800b00e:	3308      	adds	r3, #8
 800b010:	9307      	str	r3, [sp, #28]
 800b012:	6963      	ldr	r3, [r4, #20]
 800b014:	9a04      	ldr	r2, [sp, #16]
 800b016:	189b      	adds	r3, r3, r2
 800b018:	6163      	str	r3, [r4, #20]
 800b01a:	e766      	b.n	800aeea <_svfiprintf_r+0x46>
 800b01c:	4343      	muls	r3, r0
 800b01e:	2101      	movs	r1, #1
 800b020:	189b      	adds	r3, r3, r2
 800b022:	0035      	movs	r5, r6
 800b024:	e7a6      	b.n	800af74 <_svfiprintf_r+0xd0>
 800b026:	2301      	movs	r3, #1
 800b028:	425b      	negs	r3, r3
 800b02a:	e7d0      	b.n	800afce <_svfiprintf_r+0x12a>
 800b02c:	2300      	movs	r3, #0
 800b02e:	200a      	movs	r0, #10
 800b030:	001a      	movs	r2, r3
 800b032:	3501      	adds	r5, #1
 800b034:	6063      	str	r3, [r4, #4]
 800b036:	7829      	ldrb	r1, [r5, #0]
 800b038:	1c6e      	adds	r6, r5, #1
 800b03a:	3930      	subs	r1, #48	; 0x30
 800b03c:	2909      	cmp	r1, #9
 800b03e:	d903      	bls.n	800b048 <_svfiprintf_r+0x1a4>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0c5      	beq.n	800afd0 <_svfiprintf_r+0x12c>
 800b044:	9209      	str	r2, [sp, #36]	; 0x24
 800b046:	e7c3      	b.n	800afd0 <_svfiprintf_r+0x12c>
 800b048:	4342      	muls	r2, r0
 800b04a:	2301      	movs	r3, #1
 800b04c:	1852      	adds	r2, r2, r1
 800b04e:	0035      	movs	r5, r6
 800b050:	e7f1      	b.n	800b036 <_svfiprintf_r+0x192>
 800b052:	ab07      	add	r3, sp, #28
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	003a      	movs	r2, r7
 800b058:	4b10      	ldr	r3, [pc, #64]	; (800b09c <_svfiprintf_r+0x1f8>)
 800b05a:	0021      	movs	r1, r4
 800b05c:	9803      	ldr	r0, [sp, #12]
 800b05e:	f7fe f925 	bl	80092ac <_printf_float>
 800b062:	9004      	str	r0, [sp, #16]
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	3301      	adds	r3, #1
 800b068:	d1d3      	bne.n	800b012 <_svfiprintf_r+0x16e>
 800b06a:	89bb      	ldrh	r3, [r7, #12]
 800b06c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b06e:	065b      	lsls	r3, r3, #25
 800b070:	d400      	bmi.n	800b074 <_svfiprintf_r+0x1d0>
 800b072:	e72e      	b.n	800aed2 <_svfiprintf_r+0x2e>
 800b074:	2001      	movs	r0, #1
 800b076:	4240      	negs	r0, r0
 800b078:	e72b      	b.n	800aed2 <_svfiprintf_r+0x2e>
 800b07a:	ab07      	add	r3, sp, #28
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	003a      	movs	r2, r7
 800b080:	4b06      	ldr	r3, [pc, #24]	; (800b09c <_svfiprintf_r+0x1f8>)
 800b082:	0021      	movs	r1, r4
 800b084:	9803      	ldr	r0, [sp, #12]
 800b086:	f7fe fbcb 	bl	8009820 <_printf_i>
 800b08a:	e7ea      	b.n	800b062 <_svfiprintf_r+0x1be>
 800b08c:	0800c5e4 	.word	0x0800c5e4
 800b090:	0800c5ea 	.word	0x0800c5ea
 800b094:	0800c5ee 	.word	0x0800c5ee
 800b098:	080092ad 	.word	0x080092ad
 800b09c:	0800ade1 	.word	0x0800ade1

0800b0a0 <memmove>:
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	4288      	cmp	r0, r1
 800b0a4:	d902      	bls.n	800b0ac <memmove+0xc>
 800b0a6:	188b      	adds	r3, r1, r2
 800b0a8:	4298      	cmp	r0, r3
 800b0aa:	d303      	bcc.n	800b0b4 <memmove+0x14>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e007      	b.n	800b0c0 <memmove+0x20>
 800b0b0:	5c8b      	ldrb	r3, [r1, r2]
 800b0b2:	5483      	strb	r3, [r0, r2]
 800b0b4:	3a01      	subs	r2, #1
 800b0b6:	d2fb      	bcs.n	800b0b0 <memmove+0x10>
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	5ccc      	ldrb	r4, [r1, r3]
 800b0bc:	54c4      	strb	r4, [r0, r3]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d1fa      	bne.n	800b0ba <memmove+0x1a>
 800b0c4:	e7f8      	b.n	800b0b8 <memmove+0x18>

0800b0c6 <_malloc_usable_size_r>:
 800b0c6:	1f0b      	subs	r3, r1, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	1f18      	subs	r0, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	da01      	bge.n	800b0d4 <_malloc_usable_size_r+0xe>
 800b0d0:	580b      	ldr	r3, [r1, r0]
 800b0d2:	18c0      	adds	r0, r0, r3
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <pow>:
 800b0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0da:	2400      	movs	r4, #0
 800b0dc:	b091      	sub	sp, #68	; 0x44
 800b0de:	001f      	movs	r7, r3
 800b0e0:	9000      	str	r0, [sp, #0]
 800b0e2:	9101      	str	r1, [sp, #4]
 800b0e4:	0016      	movs	r6, r2
 800b0e6:	f000 f98d 	bl	800b404 <__ieee754_pow>
 800b0ea:	4bbe      	ldr	r3, [pc, #760]	; (800b3e4 <pow+0x30c>)
 800b0ec:	9002      	str	r0, [sp, #8]
 800b0ee:	9103      	str	r1, [sp, #12]
 800b0f0:	571c      	ldrsb	r4, [r3, r4]
 800b0f2:	1c63      	adds	r3, r4, #1
 800b0f4:	d100      	bne.n	800b0f8 <pow+0x20>
 800b0f6:	e0d4      	b.n	800b2a2 <pow+0x1ca>
 800b0f8:	0032      	movs	r2, r6
 800b0fa:	003b      	movs	r3, r7
 800b0fc:	0030      	movs	r0, r6
 800b0fe:	0039      	movs	r1, r7
 800b100:	f7f7 fa4e 	bl	80025a0 <__aeabi_dcmpun>
 800b104:	1e05      	subs	r5, r0, #0
 800b106:	d000      	beq.n	800b10a <pow+0x32>
 800b108:	e0cb      	b.n	800b2a2 <pow+0x1ca>
 800b10a:	9a00      	ldr	r2, [sp, #0]
 800b10c:	9b01      	ldr	r3, [sp, #4]
 800b10e:	0010      	movs	r0, r2
 800b110:	0019      	movs	r1, r3
 800b112:	f7f7 fa45 	bl	80025a0 <__aeabi_dcmpun>
 800b116:	2200      	movs	r2, #0
 800b118:	9005      	str	r0, [sp, #20]
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d01e      	beq.n	800b15c <pow+0x84>
 800b11e:	2300      	movs	r3, #0
 800b120:	0030      	movs	r0, r6
 800b122:	0039      	movs	r1, r7
 800b124:	f7f5 f988 	bl	8000438 <__aeabi_dcmpeq>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d100      	bne.n	800b12e <pow+0x56>
 800b12c:	e0b9      	b.n	800b2a2 <pow+0x1ca>
 800b12e:	2301      	movs	r3, #1
 800b130:	9306      	str	r3, [sp, #24]
 800b132:	4bad      	ldr	r3, [pc, #692]	; (800b3e8 <pow+0x310>)
 800b134:	950e      	str	r5, [sp, #56]	; 0x38
 800b136:	9307      	str	r3, [sp, #28]
 800b138:	9a00      	ldr	r2, [sp, #0]
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	9208      	str	r2, [sp, #32]
 800b13e:	9309      	str	r3, [sp, #36]	; 0x24
 800b140:	2200      	movs	r2, #0
 800b142:	4baa      	ldr	r3, [pc, #680]	; (800b3ec <pow+0x314>)
 800b144:	960a      	str	r6, [sp, #40]	; 0x28
 800b146:	970b      	str	r7, [sp, #44]	; 0x2c
 800b148:	920c      	str	r2, [sp, #48]	; 0x30
 800b14a:	930d      	str	r3, [sp, #52]	; 0x34
 800b14c:	2c02      	cmp	r4, #2
 800b14e:	d033      	beq.n	800b1b8 <pow+0xe0>
 800b150:	a806      	add	r0, sp, #24
 800b152:	f000 ff0b 	bl	800bf6c <matherr>
 800b156:	2800      	cmp	r0, #0
 800b158:	d125      	bne.n	800b1a6 <pow+0xce>
 800b15a:	e059      	b.n	800b210 <pow+0x138>
 800b15c:	2300      	movs	r3, #0
 800b15e:	9800      	ldr	r0, [sp, #0]
 800b160:	9901      	ldr	r1, [sp, #4]
 800b162:	f7f5 f969 	bl	8000438 <__aeabi_dcmpeq>
 800b166:	2800      	cmp	r0, #0
 800b168:	d057      	beq.n	800b21a <pow+0x142>
 800b16a:	2200      	movs	r2, #0
 800b16c:	2300      	movs	r3, #0
 800b16e:	0030      	movs	r0, r6
 800b170:	0039      	movs	r1, r7
 800b172:	f7f5 f961 	bl	8000438 <__aeabi_dcmpeq>
 800b176:	1e05      	subs	r5, r0, #0
 800b178:	d021      	beq.n	800b1be <pow+0xe6>
 800b17a:	2301      	movs	r3, #1
 800b17c:	9306      	str	r3, [sp, #24]
 800b17e:	4b9a      	ldr	r3, [pc, #616]	; (800b3e8 <pow+0x310>)
 800b180:	960a      	str	r6, [sp, #40]	; 0x28
 800b182:	970b      	str	r7, [sp, #44]	; 0x2c
 800b184:	9307      	str	r3, [sp, #28]
 800b186:	9b05      	ldr	r3, [sp, #20]
 800b188:	930e      	str	r3, [sp, #56]	; 0x38
 800b18a:	9a00      	ldr	r2, [sp, #0]
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	9208      	str	r2, [sp, #32]
 800b190:	9309      	str	r3, [sp, #36]	; 0x24
 800b192:	2200      	movs	r2, #0
 800b194:	2300      	movs	r3, #0
 800b196:	920c      	str	r2, [sp, #48]	; 0x30
 800b198:	930d      	str	r3, [sp, #52]	; 0x34
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d0d8      	beq.n	800b150 <pow+0x78>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	4b92      	ldr	r3, [pc, #584]	; (800b3ec <pow+0x314>)
 800b1a2:	920c      	str	r2, [sp, #48]	; 0x30
 800b1a4:	930d      	str	r3, [sp, #52]	; 0x34
 800b1a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <pow+0xe0>
 800b1ae:	f7fd fee1 	bl	8008f74 <__errno>
 800b1b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b1bc:	e06f      	b.n	800b29e <pow+0x1c6>
 800b1be:	0030      	movs	r0, r6
 800b1c0:	0039      	movs	r1, r7
 800b1c2:	f000 fecb 	bl	800bf5c <finite>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d06b      	beq.n	800b2a2 <pow+0x1ca>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	0030      	movs	r0, r6
 800b1d0:	0039      	movs	r1, r7
 800b1d2:	f7f5 f937 	bl	8000444 <__aeabi_dcmplt>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d063      	beq.n	800b2a2 <pow+0x1ca>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	9306      	str	r3, [sp, #24]
 800b1de:	4b82      	ldr	r3, [pc, #520]	; (800b3e8 <pow+0x310>)
 800b1e0:	950e      	str	r5, [sp, #56]	; 0x38
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	9b00      	ldr	r3, [sp, #0]
 800b1e6:	9c01      	ldr	r4, [sp, #4]
 800b1e8:	9308      	str	r3, [sp, #32]
 800b1ea:	9409      	str	r4, [sp, #36]	; 0x24
 800b1ec:	4b7d      	ldr	r3, [pc, #500]	; (800b3e4 <pow+0x30c>)
 800b1ee:	960a      	str	r6, [sp, #40]	; 0x28
 800b1f0:	970b      	str	r7, [sp, #44]	; 0x2c
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	b25b      	sxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d104      	bne.n	800b204 <pow+0x12c>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800b200:	940d      	str	r4, [sp, #52]	; 0x34
 800b202:	e7a5      	b.n	800b150 <pow+0x78>
 800b204:	2000      	movs	r0, #0
 800b206:	497a      	ldr	r1, [pc, #488]	; (800b3f0 <pow+0x318>)
 800b208:	900c      	str	r0, [sp, #48]	; 0x30
 800b20a:	910d      	str	r1, [sp, #52]	; 0x34
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d19f      	bne.n	800b150 <pow+0x78>
 800b210:	f7fd feb0 	bl	8008f74 <__errno>
 800b214:	2321      	movs	r3, #33	; 0x21
 800b216:	6003      	str	r3, [r0, #0]
 800b218:	e7c5      	b.n	800b1a6 <pow+0xce>
 800b21a:	9802      	ldr	r0, [sp, #8]
 800b21c:	9903      	ldr	r1, [sp, #12]
 800b21e:	f000 fe9d 	bl	800bf5c <finite>
 800b222:	9005      	str	r0, [sp, #20]
 800b224:	2800      	cmp	r0, #0
 800b226:	d000      	beq.n	800b22a <pow+0x152>
 800b228:	e0a5      	b.n	800b376 <pow+0x29e>
 800b22a:	9800      	ldr	r0, [sp, #0]
 800b22c:	9901      	ldr	r1, [sp, #4]
 800b22e:	f000 fe95 	bl	800bf5c <finite>
 800b232:	2800      	cmp	r0, #0
 800b234:	d100      	bne.n	800b238 <pow+0x160>
 800b236:	e09e      	b.n	800b376 <pow+0x29e>
 800b238:	0030      	movs	r0, r6
 800b23a:	0039      	movs	r1, r7
 800b23c:	f000 fe8e 	bl	800bf5c <finite>
 800b240:	2800      	cmp	r0, #0
 800b242:	d100      	bne.n	800b246 <pow+0x16e>
 800b244:	e097      	b.n	800b376 <pow+0x29e>
 800b246:	2500      	movs	r5, #0
 800b248:	4b66      	ldr	r3, [pc, #408]	; (800b3e4 <pow+0x30c>)
 800b24a:	ac06      	add	r4, sp, #24
 800b24c:	575d      	ldrsb	r5, [r3, r5]
 800b24e:	9a02      	ldr	r2, [sp, #8]
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	0019      	movs	r1, r3
 800b254:	0010      	movs	r0, r2
 800b256:	f7f7 f9a3 	bl	80025a0 <__aeabi_dcmpun>
 800b25a:	4b63      	ldr	r3, [pc, #396]	; (800b3e8 <pow+0x310>)
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d031      	beq.n	800b2c4 <pow+0x1ec>
 800b260:	2201      	movs	r2, #1
 800b262:	6063      	str	r3, [r4, #4]
 800b264:	9b05      	ldr	r3, [sp, #20]
 800b266:	9206      	str	r2, [sp, #24]
 800b268:	6223      	str	r3, [r4, #32]
 800b26a:	6126      	str	r6, [r4, #16]
 800b26c:	6167      	str	r7, [r4, #20]
 800b26e:	9a00      	ldr	r2, [sp, #0]
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	60a2      	str	r2, [r4, #8]
 800b274:	60e3      	str	r3, [r4, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	2300      	movs	r3, #0
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	d115      	bne.n	800b2aa <pow+0x1d2>
 800b27e:	61a2      	str	r2, [r4, #24]
 800b280:	61e3      	str	r3, [r4, #28]
 800b282:	0020      	movs	r0, r4
 800b284:	f000 fe72 	bl	800bf6c <matherr>
 800b288:	2800      	cmp	r0, #0
 800b28a:	d016      	beq.n	800b2ba <pow+0x1e2>
 800b28c:	6a23      	ldr	r3, [r4, #32]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <pow+0x1c2>
 800b292:	f7fd fe6f 	bl	8008f74 <__errno>
 800b296:	6a23      	ldr	r3, [r4, #32]
 800b298:	6003      	str	r3, [r0, #0]
 800b29a:	69a3      	ldr	r3, [r4, #24]
 800b29c:	69e4      	ldr	r4, [r4, #28]
 800b29e:	9302      	str	r3, [sp, #8]
 800b2a0:	9403      	str	r4, [sp, #12]
 800b2a2:	9802      	ldr	r0, [sp, #8]
 800b2a4:	9903      	ldr	r1, [sp, #12]
 800b2a6:	b011      	add	sp, #68	; 0x44
 800b2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2aa:	0010      	movs	r0, r2
 800b2ac:	0019      	movs	r1, r3
 800b2ae:	f7f5 ffb3 	bl	8001218 <__aeabi_ddiv>
 800b2b2:	61a0      	str	r0, [r4, #24]
 800b2b4:	61e1      	str	r1, [r4, #28]
 800b2b6:	2d02      	cmp	r5, #2
 800b2b8:	d1e3      	bne.n	800b282 <pow+0x1aa>
 800b2ba:	f7fd fe5b 	bl	8008f74 <__errno>
 800b2be:	2321      	movs	r3, #33	; 0x21
 800b2c0:	6003      	str	r3, [r0, #0]
 800b2c2:	e7e3      	b.n	800b28c <pow+0x1b4>
 800b2c4:	2203      	movs	r2, #3
 800b2c6:	6126      	str	r6, [r4, #16]
 800b2c8:	6167      	str	r7, [r4, #20]
 800b2ca:	9206      	str	r2, [sp, #24]
 800b2cc:	6063      	str	r3, [r4, #4]
 800b2ce:	6220      	str	r0, [r4, #32]
 800b2d0:	9a00      	ldr	r2, [sp, #0]
 800b2d2:	9b01      	ldr	r3, [sp, #4]
 800b2d4:	0030      	movs	r0, r6
 800b2d6:	60a2      	str	r2, [r4, #8]
 800b2d8:	60e3      	str	r3, [r4, #12]
 800b2da:	0039      	movs	r1, r7
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4b45      	ldr	r3, [pc, #276]	; (800b3f4 <pow+0x31c>)
 800b2e0:	f7f6 fba4 	bl	8001a2c <__aeabi_dmul>
 800b2e4:	0006      	movs	r6, r0
 800b2e6:	000f      	movs	r7, r1
 800b2e8:	2d00      	cmp	r5, #0
 800b2ea:	d124      	bne.n	800b336 <pow+0x25e>
 800b2ec:	9800      	ldr	r0, [sp, #0]
 800b2ee:	9901      	ldr	r1, [sp, #4]
 800b2f0:	22e0      	movs	r2, #224	; 0xe0
 800b2f2:	4b41      	ldr	r3, [pc, #260]	; (800b3f8 <pow+0x320>)
 800b2f4:	0612      	lsls	r2, r2, #24
 800b2f6:	61a2      	str	r2, [r4, #24]
 800b2f8:	61e3      	str	r3, [r4, #28]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f7f5 f8a1 	bl	8000444 <__aeabi_dcmplt>
 800b302:	2800      	cmp	r0, #0
 800b304:	d030      	beq.n	800b368 <pow+0x290>
 800b306:	0030      	movs	r0, r6
 800b308:	0039      	movs	r1, r7
 800b30a:	f000 fe37 	bl	800bf7c <rint>
 800b30e:	0032      	movs	r2, r6
 800b310:	003b      	movs	r3, r7
 800b312:	f7f5 f891 	bl	8000438 <__aeabi_dcmpeq>
 800b316:	2800      	cmp	r0, #0
 800b318:	d104      	bne.n	800b324 <pow+0x24c>
 800b31a:	22e0      	movs	r2, #224	; 0xe0
 800b31c:	4b37      	ldr	r3, [pc, #220]	; (800b3fc <pow+0x324>)
 800b31e:	0612      	lsls	r2, r2, #24
 800b320:	61a2      	str	r2, [r4, #24]
 800b322:	61e3      	str	r3, [r4, #28]
 800b324:	4b2f      	ldr	r3, [pc, #188]	; (800b3e4 <pow+0x30c>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	b25b      	sxtb	r3, r3
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d11c      	bne.n	800b368 <pow+0x290>
 800b32e:	f7fd fe21 	bl	8008f74 <__errno>
 800b332:	2322      	movs	r3, #34	; 0x22
 800b334:	e7c4      	b.n	800b2c0 <pow+0x1e8>
 800b336:	2200      	movs	r2, #0
 800b338:	9800      	ldr	r0, [sp, #0]
 800b33a:	9901      	ldr	r1, [sp, #4]
 800b33c:	4b30      	ldr	r3, [pc, #192]	; (800b400 <pow+0x328>)
 800b33e:	61a2      	str	r2, [r4, #24]
 800b340:	61e3      	str	r3, [r4, #28]
 800b342:	2200      	movs	r2, #0
 800b344:	2300      	movs	r3, #0
 800b346:	f7f5 f87d 	bl	8000444 <__aeabi_dcmplt>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d0ea      	beq.n	800b324 <pow+0x24c>
 800b34e:	0030      	movs	r0, r6
 800b350:	0039      	movs	r1, r7
 800b352:	f000 fe13 	bl	800bf7c <rint>
 800b356:	0032      	movs	r2, r6
 800b358:	003b      	movs	r3, r7
 800b35a:	f7f5 f86d 	bl	8000438 <__aeabi_dcmpeq>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d1e0      	bne.n	800b324 <pow+0x24c>
 800b362:	2200      	movs	r2, #0
 800b364:	4b22      	ldr	r3, [pc, #136]	; (800b3f0 <pow+0x318>)
 800b366:	e7db      	b.n	800b320 <pow+0x248>
 800b368:	0020      	movs	r0, r4
 800b36a:	f000 fdff 	bl	800bf6c <matherr>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d000      	beq.n	800b374 <pow+0x29c>
 800b372:	e78b      	b.n	800b28c <pow+0x1b4>
 800b374:	e7db      	b.n	800b32e <pow+0x256>
 800b376:	2200      	movs	r2, #0
 800b378:	9802      	ldr	r0, [sp, #8]
 800b37a:	9903      	ldr	r1, [sp, #12]
 800b37c:	2300      	movs	r3, #0
 800b37e:	f7f5 f85b 	bl	8000438 <__aeabi_dcmpeq>
 800b382:	2800      	cmp	r0, #0
 800b384:	d100      	bne.n	800b388 <pow+0x2b0>
 800b386:	e78c      	b.n	800b2a2 <pow+0x1ca>
 800b388:	9800      	ldr	r0, [sp, #0]
 800b38a:	9901      	ldr	r1, [sp, #4]
 800b38c:	f000 fde6 	bl	800bf5c <finite>
 800b390:	2800      	cmp	r0, #0
 800b392:	d100      	bne.n	800b396 <pow+0x2be>
 800b394:	e785      	b.n	800b2a2 <pow+0x1ca>
 800b396:	0030      	movs	r0, r6
 800b398:	0039      	movs	r1, r7
 800b39a:	f000 fddf 	bl	800bf5c <finite>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d100      	bne.n	800b3a4 <pow+0x2cc>
 800b3a2:	e77e      	b.n	800b2a2 <pow+0x1ca>
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	9306      	str	r3, [sp, #24]
 800b3a8:	4b0f      	ldr	r3, [pc, #60]	; (800b3e8 <pow+0x310>)
 800b3aa:	960a      	str	r6, [sp, #40]	; 0x28
 800b3ac:	970b      	str	r7, [sp, #44]	; 0x2c
 800b3ae:	9307      	str	r3, [sp, #28]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	930e      	str	r3, [sp, #56]	; 0x38
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	9c01      	ldr	r4, [sp, #4]
 800b3b8:	9308      	str	r3, [sp, #32]
 800b3ba:	9409      	str	r4, [sp, #36]	; 0x24
 800b3bc:	2300      	movs	r3, #0
 800b3be:	2400      	movs	r4, #0
 800b3c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b3c2:	940d      	str	r4, [sp, #52]	; 0x34
 800b3c4:	4b07      	ldr	r3, [pc, #28]	; (800b3e4 <pow+0x30c>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	b25b      	sxtb	r3, r3
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d103      	bne.n	800b3d6 <pow+0x2fe>
 800b3ce:	f7fd fdd1 	bl	8008f74 <__errno>
 800b3d2:	2322      	movs	r3, #34	; 0x22
 800b3d4:	e71f      	b.n	800b216 <pow+0x13e>
 800b3d6:	a806      	add	r0, sp, #24
 800b3d8:	f000 fdc8 	bl	800bf6c <matherr>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d000      	beq.n	800b3e2 <pow+0x30a>
 800b3e0:	e6e1      	b.n	800b1a6 <pow+0xce>
 800b3e2:	e7f4      	b.n	800b3ce <pow+0x2f6>
 800b3e4:	200001dc 	.word	0x200001dc
 800b3e8:	0800c658 	.word	0x0800c658
 800b3ec:	3ff00000 	.word	0x3ff00000
 800b3f0:	fff00000 	.word	0xfff00000
 800b3f4:	3fe00000 	.word	0x3fe00000
 800b3f8:	47efffff 	.word	0x47efffff
 800b3fc:	c7efffff 	.word	0xc7efffff
 800b400:	7ff00000 	.word	0x7ff00000

0800b404 <__ieee754_pow>:
 800b404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b406:	b095      	sub	sp, #84	; 0x54
 800b408:	9202      	str	r2, [sp, #8]
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	9b03      	ldr	r3, [sp, #12]
 800b40e:	000e      	movs	r6, r1
 800b410:	9902      	ldr	r1, [sp, #8]
 800b412:	005d      	lsls	r5, r3, #1
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	000b      	movs	r3, r1
 800b418:	086d      	lsrs	r5, r5, #1
 800b41a:	0007      	movs	r7, r0
 800b41c:	432b      	orrs	r3, r5
 800b41e:	d101      	bne.n	800b424 <__ieee754_pow+0x20>
 800b420:	f000 fcad 	bl	800bd7e <__ieee754_pow+0x97a>
 800b424:	4b7e      	ldr	r3, [pc, #504]	; (800b620 <__ieee754_pow+0x21c>)
 800b426:	0074      	lsls	r4, r6, #1
 800b428:	9608      	str	r6, [sp, #32]
 800b42a:	9000      	str	r0, [sp, #0]
 800b42c:	0864      	lsrs	r4, r4, #1
 800b42e:	469c      	mov	ip, r3
 800b430:	429c      	cmp	r4, r3
 800b432:	dc0b      	bgt.n	800b44c <__ieee754_pow+0x48>
 800b434:	d104      	bne.n	800b440 <__ieee754_pow+0x3c>
 800b436:	2800      	cmp	r0, #0
 800b438:	d108      	bne.n	800b44c <__ieee754_pow+0x48>
 800b43a:	42a5      	cmp	r5, r4
 800b43c:	dc0c      	bgt.n	800b458 <__ieee754_pow+0x54>
 800b43e:	e001      	b.n	800b444 <__ieee754_pow+0x40>
 800b440:	429d      	cmp	r5, r3
 800b442:	dc03      	bgt.n	800b44c <__ieee754_pow+0x48>
 800b444:	4565      	cmp	r5, ip
 800b446:	d10d      	bne.n	800b464 <__ieee754_pow+0x60>
 800b448:	2900      	cmp	r1, #0
 800b44a:	d00b      	beq.n	800b464 <__ieee754_pow+0x60>
 800b44c:	4b75      	ldr	r3, [pc, #468]	; (800b624 <__ieee754_pow+0x220>)
 800b44e:	18e4      	adds	r4, r4, r3
 800b450:	4327      	orrs	r7, r4
 800b452:	d101      	bne.n	800b458 <__ieee754_pow+0x54>
 800b454:	f000 fc93 	bl	800bd7e <__ieee754_pow+0x97a>
 800b458:	4873      	ldr	r0, [pc, #460]	; (800b628 <__ieee754_pow+0x224>)
 800b45a:	f000 fd89 	bl	800bf70 <nan>
 800b45e:	9000      	str	r0, [sp, #0]
 800b460:	9101      	str	r1, [sp, #4]
 800b462:	e061      	b.n	800b528 <__ieee754_pow+0x124>
 800b464:	2300      	movs	r3, #0
 800b466:	9306      	str	r3, [sp, #24]
 800b468:	2e00      	cmp	r6, #0
 800b46a:	da17      	bge.n	800b49c <__ieee754_pow+0x98>
 800b46c:	4a6f      	ldr	r2, [pc, #444]	; (800b62c <__ieee754_pow+0x228>)
 800b46e:	4295      	cmp	r5, r2
 800b470:	dc4d      	bgt.n	800b50e <__ieee754_pow+0x10a>
 800b472:	4a6f      	ldr	r2, [pc, #444]	; (800b630 <__ieee754_pow+0x22c>)
 800b474:	4295      	cmp	r5, r2
 800b476:	dd11      	ble.n	800b49c <__ieee754_pow+0x98>
 800b478:	4b6e      	ldr	r3, [pc, #440]	; (800b634 <__ieee754_pow+0x230>)
 800b47a:	152a      	asrs	r2, r5, #20
 800b47c:	18d2      	adds	r2, r2, r3
 800b47e:	2a14      	cmp	r2, #20
 800b480:	dd25      	ble.n	800b4ce <__ieee754_pow+0xca>
 800b482:	2034      	movs	r0, #52	; 0x34
 800b484:	1a82      	subs	r2, r0, r2
 800b486:	9802      	ldr	r0, [sp, #8]
 800b488:	40d0      	lsrs	r0, r2
 800b48a:	0003      	movs	r3, r0
 800b48c:	4093      	lsls	r3, r2
 800b48e:	428b      	cmp	r3, r1
 800b490:	d104      	bne.n	800b49c <__ieee754_pow+0x98>
 800b492:	2201      	movs	r2, #1
 800b494:	4010      	ands	r0, r2
 800b496:	1892      	adds	r2, r2, r2
 800b498:	1a13      	subs	r3, r2, r0
 800b49a:	9306      	str	r3, [sp, #24]
 800b49c:	2900      	cmp	r1, #0
 800b49e:	d15e      	bne.n	800b55e <__ieee754_pow+0x15a>
 800b4a0:	4565      	cmp	r5, ip
 800b4a2:	d123      	bne.n	800b4ec <__ieee754_pow+0xe8>
 800b4a4:	4b5f      	ldr	r3, [pc, #380]	; (800b624 <__ieee754_pow+0x220>)
 800b4a6:	18e3      	adds	r3, r4, r3
 800b4a8:	431f      	orrs	r7, r3
 800b4aa:	d101      	bne.n	800b4b0 <__ieee754_pow+0xac>
 800b4ac:	f000 fc67 	bl	800bd7e <__ieee754_pow+0x97a>
 800b4b0:	4b5f      	ldr	r3, [pc, #380]	; (800b630 <__ieee754_pow+0x22c>)
 800b4b2:	429c      	cmp	r4, r3
 800b4b4:	dd2d      	ble.n	800b512 <__ieee754_pow+0x10e>
 800b4b6:	9b02      	ldr	r3, [sp, #8]
 800b4b8:	9c03      	ldr	r4, [sp, #12]
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	9401      	str	r4, [sp, #4]
 800b4be:	9b04      	ldr	r3, [sp, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	da31      	bge.n	800b528 <__ieee754_pow+0x124>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2400      	movs	r4, #0
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	9401      	str	r4, [sp, #4]
 800b4cc:	e02c      	b.n	800b528 <__ieee754_pow+0x124>
 800b4ce:	2900      	cmp	r1, #0
 800b4d0:	d145      	bne.n	800b55e <__ieee754_pow+0x15a>
 800b4d2:	2314      	movs	r3, #20
 800b4d4:	1a9a      	subs	r2, r3, r2
 800b4d6:	002b      	movs	r3, r5
 800b4d8:	4113      	asrs	r3, r2
 800b4da:	0019      	movs	r1, r3
 800b4dc:	4091      	lsls	r1, r2
 800b4de:	42a9      	cmp	r1, r5
 800b4e0:	d104      	bne.n	800b4ec <__ieee754_pow+0xe8>
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	1892      	adds	r2, r2, r2
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	9306      	str	r3, [sp, #24]
 800b4ec:	4b52      	ldr	r3, [pc, #328]	; (800b638 <__ieee754_pow+0x234>)
 800b4ee:	429d      	cmp	r5, r3
 800b4f0:	d11e      	bne.n	800b530 <__ieee754_pow+0x12c>
 800b4f2:	0038      	movs	r0, r7
 800b4f4:	0031      	movs	r1, r6
 800b4f6:	9b04      	ldr	r3, [sp, #16]
 800b4f8:	9000      	str	r0, [sp, #0]
 800b4fa:	9101      	str	r1, [sp, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	da13      	bge.n	800b528 <__ieee754_pow+0x124>
 800b500:	003a      	movs	r2, r7
 800b502:	0033      	movs	r3, r6
 800b504:	2000      	movs	r0, #0
 800b506:	494c      	ldr	r1, [pc, #304]	; (800b638 <__ieee754_pow+0x234>)
 800b508:	f7f5 fe86 	bl	8001218 <__aeabi_ddiv>
 800b50c:	e7a7      	b.n	800b45e <__ieee754_pow+0x5a>
 800b50e:	2302      	movs	r3, #2
 800b510:	e7c3      	b.n	800b49a <__ieee754_pow+0x96>
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	dad5      	bge.n	800b4c4 <__ieee754_pow+0xc0>
 800b518:	2280      	movs	r2, #128	; 0x80
 800b51a:	0612      	lsls	r2, r2, #24
 800b51c:	4694      	mov	ip, r2
 800b51e:	9b02      	ldr	r3, [sp, #8]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	4463      	add	r3, ip
 800b526:	9301      	str	r3, [sp, #4]
 800b528:	9800      	ldr	r0, [sp, #0]
 800b52a:	9901      	ldr	r1, [sp, #4]
 800b52c:	b015      	add	sp, #84	; 0x54
 800b52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b530:	2380      	movs	r3, #128	; 0x80
 800b532:	9a04      	ldr	r2, [sp, #16]
 800b534:	05db      	lsls	r3, r3, #23
 800b536:	429a      	cmp	r2, r3
 800b538:	d106      	bne.n	800b548 <__ieee754_pow+0x144>
 800b53a:	003a      	movs	r2, r7
 800b53c:	0033      	movs	r3, r6
 800b53e:	0038      	movs	r0, r7
 800b540:	0031      	movs	r1, r6
 800b542:	f7f6 fa73 	bl	8001a2c <__aeabi_dmul>
 800b546:	e78a      	b.n	800b45e <__ieee754_pow+0x5a>
 800b548:	4b3c      	ldr	r3, [pc, #240]	; (800b63c <__ieee754_pow+0x238>)
 800b54a:	9a04      	ldr	r2, [sp, #16]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d106      	bne.n	800b55e <__ieee754_pow+0x15a>
 800b550:	2e00      	cmp	r6, #0
 800b552:	db04      	blt.n	800b55e <__ieee754_pow+0x15a>
 800b554:	0038      	movs	r0, r7
 800b556:	0031      	movs	r1, r6
 800b558:	f000 fc4a 	bl	800bdf0 <__ieee754_sqrt>
 800b55c:	e77f      	b.n	800b45e <__ieee754_pow+0x5a>
 800b55e:	0038      	movs	r0, r7
 800b560:	0031      	movs	r1, r6
 800b562:	f000 fcf7 	bl	800bf54 <fabs>
 800b566:	9000      	str	r0, [sp, #0]
 800b568:	9101      	str	r1, [sp, #4]
 800b56a:	2f00      	cmp	r7, #0
 800b56c:	d12e      	bne.n	800b5cc <__ieee754_pow+0x1c8>
 800b56e:	2c00      	cmp	r4, #0
 800b570:	d004      	beq.n	800b57c <__ieee754_pow+0x178>
 800b572:	4a31      	ldr	r2, [pc, #196]	; (800b638 <__ieee754_pow+0x234>)
 800b574:	00b3      	lsls	r3, r6, #2
 800b576:	089b      	lsrs	r3, r3, #2
 800b578:	4293      	cmp	r3, r2
 800b57a:	d127      	bne.n	800b5cc <__ieee754_pow+0x1c8>
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da07      	bge.n	800b592 <__ieee754_pow+0x18e>
 800b582:	9a00      	ldr	r2, [sp, #0]
 800b584:	9b01      	ldr	r3, [sp, #4]
 800b586:	2000      	movs	r0, #0
 800b588:	492b      	ldr	r1, [pc, #172]	; (800b638 <__ieee754_pow+0x234>)
 800b58a:	f7f5 fe45 	bl	8001218 <__aeabi_ddiv>
 800b58e:	9000      	str	r0, [sp, #0]
 800b590:	9101      	str	r1, [sp, #4]
 800b592:	9b08      	ldr	r3, [sp, #32]
 800b594:	2b00      	cmp	r3, #0
 800b596:	dac7      	bge.n	800b528 <__ieee754_pow+0x124>
 800b598:	4b22      	ldr	r3, [pc, #136]	; (800b624 <__ieee754_pow+0x220>)
 800b59a:	18e4      	adds	r4, r4, r3
 800b59c:	9b06      	ldr	r3, [sp, #24]
 800b59e:	431c      	orrs	r4, r3
 800b5a0:	d108      	bne.n	800b5b4 <__ieee754_pow+0x1b0>
 800b5a2:	9a00      	ldr	r2, [sp, #0]
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	0010      	movs	r0, r2
 800b5a8:	0019      	movs	r1, r3
 800b5aa:	f7f6 fcb1 	bl	8001f10 <__aeabi_dsub>
 800b5ae:	0002      	movs	r2, r0
 800b5b0:	000b      	movs	r3, r1
 800b5b2:	e7a9      	b.n	800b508 <__ieee754_pow+0x104>
 800b5b4:	9b06      	ldr	r3, [sp, #24]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d1b6      	bne.n	800b528 <__ieee754_pow+0x124>
 800b5ba:	9800      	ldr	r0, [sp, #0]
 800b5bc:	2180      	movs	r1, #128	; 0x80
 800b5be:	0002      	movs	r2, r0
 800b5c0:	9801      	ldr	r0, [sp, #4]
 800b5c2:	0609      	lsls	r1, r1, #24
 800b5c4:	1843      	adds	r3, r0, r1
 800b5c6:	9200      	str	r2, [sp, #0]
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	e7ad      	b.n	800b528 <__ieee754_pow+0x124>
 800b5cc:	0ff3      	lsrs	r3, r6, #31
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	9310      	str	r3, [sp, #64]	; 0x40
 800b5d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5d4:	9b06      	ldr	r3, [sp, #24]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	d104      	bne.n	800b5e4 <__ieee754_pow+0x1e0>
 800b5da:	003a      	movs	r2, r7
 800b5dc:	0033      	movs	r3, r6
 800b5de:	0038      	movs	r0, r7
 800b5e0:	0031      	movs	r1, r6
 800b5e2:	e7e2      	b.n	800b5aa <__ieee754_pow+0x1a6>
 800b5e4:	4b16      	ldr	r3, [pc, #88]	; (800b640 <__ieee754_pow+0x23c>)
 800b5e6:	429d      	cmp	r5, r3
 800b5e8:	dc00      	bgt.n	800b5ec <__ieee754_pow+0x1e8>
 800b5ea:	e0f7      	b.n	800b7dc <__ieee754_pow+0x3d8>
 800b5ec:	4b15      	ldr	r3, [pc, #84]	; (800b644 <__ieee754_pow+0x240>)
 800b5ee:	429d      	cmp	r5, r3
 800b5f0:	dd0b      	ble.n	800b60a <__ieee754_pow+0x206>
 800b5f2:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <__ieee754_pow+0x22c>)
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	dc0e      	bgt.n	800b616 <__ieee754_pow+0x212>
 800b5f8:	9b04      	ldr	r3, [sp, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	db00      	blt.n	800b600 <__ieee754_pow+0x1fc>
 800b5fe:	e761      	b.n	800b4c4 <__ieee754_pow+0xc0>
 800b600:	4a11      	ldr	r2, [pc, #68]	; (800b648 <__ieee754_pow+0x244>)
 800b602:	4b12      	ldr	r3, [pc, #72]	; (800b64c <__ieee754_pow+0x248>)
 800b604:	0010      	movs	r0, r2
 800b606:	0019      	movs	r1, r3
 800b608:	e79b      	b.n	800b542 <__ieee754_pow+0x13e>
 800b60a:	4b11      	ldr	r3, [pc, #68]	; (800b650 <__ieee754_pow+0x24c>)
 800b60c:	429c      	cmp	r4, r3
 800b60e:	ddf3      	ble.n	800b5f8 <__ieee754_pow+0x1f4>
 800b610:	4b09      	ldr	r3, [pc, #36]	; (800b638 <__ieee754_pow+0x234>)
 800b612:	429c      	cmp	r4, r3
 800b614:	dd1e      	ble.n	800b654 <__ieee754_pow+0x250>
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dcf1      	bgt.n	800b600 <__ieee754_pow+0x1fc>
 800b61c:	e752      	b.n	800b4c4 <__ieee754_pow+0xc0>
 800b61e:	46c0      	nop			; (mov r8, r8)
 800b620:	7ff00000 	.word	0x7ff00000
 800b624:	c0100000 	.word	0xc0100000
 800b628:	0800c5e9 	.word	0x0800c5e9
 800b62c:	433fffff 	.word	0x433fffff
 800b630:	3fefffff 	.word	0x3fefffff
 800b634:	fffffc01 	.word	0xfffffc01
 800b638:	3ff00000 	.word	0x3ff00000
 800b63c:	3fe00000 	.word	0x3fe00000
 800b640:	41e00000 	.word	0x41e00000
 800b644:	43f00000 	.word	0x43f00000
 800b648:	8800759c 	.word	0x8800759c
 800b64c:	7e37e43c 	.word	0x7e37e43c
 800b650:	3feffffe 	.word	0x3feffffe
 800b654:	2200      	movs	r2, #0
 800b656:	9800      	ldr	r0, [sp, #0]
 800b658:	9901      	ldr	r1, [sp, #4]
 800b65a:	4b52      	ldr	r3, [pc, #328]	; (800b7a4 <__ieee754_pow+0x3a0>)
 800b65c:	f7f6 fc58 	bl	8001f10 <__aeabi_dsub>
 800b660:	22c0      	movs	r2, #192	; 0xc0
 800b662:	4b51      	ldr	r3, [pc, #324]	; (800b7a8 <__ieee754_pow+0x3a4>)
 800b664:	05d2      	lsls	r2, r2, #23
 800b666:	0006      	movs	r6, r0
 800b668:	000f      	movs	r7, r1
 800b66a:	f7f6 f9df 	bl	8001a2c <__aeabi_dmul>
 800b66e:	4a4f      	ldr	r2, [pc, #316]	; (800b7ac <__ieee754_pow+0x3a8>)
 800b670:	9000      	str	r0, [sp, #0]
 800b672:	9101      	str	r1, [sp, #4]
 800b674:	4b4e      	ldr	r3, [pc, #312]	; (800b7b0 <__ieee754_pow+0x3ac>)
 800b676:	0030      	movs	r0, r6
 800b678:	0039      	movs	r1, r7
 800b67a:	f7f6 f9d7 	bl	8001a2c <__aeabi_dmul>
 800b67e:	2200      	movs	r2, #0
 800b680:	9004      	str	r0, [sp, #16]
 800b682:	9105      	str	r1, [sp, #20]
 800b684:	4b4b      	ldr	r3, [pc, #300]	; (800b7b4 <__ieee754_pow+0x3b0>)
 800b686:	0030      	movs	r0, r6
 800b688:	0039      	movs	r1, r7
 800b68a:	f7f6 f9cf 	bl	8001a2c <__aeabi_dmul>
 800b68e:	0002      	movs	r2, r0
 800b690:	000b      	movs	r3, r1
 800b692:	4849      	ldr	r0, [pc, #292]	; (800b7b8 <__ieee754_pow+0x3b4>)
 800b694:	4949      	ldr	r1, [pc, #292]	; (800b7bc <__ieee754_pow+0x3b8>)
 800b696:	f7f6 fc3b 	bl	8001f10 <__aeabi_dsub>
 800b69a:	0032      	movs	r2, r6
 800b69c:	003b      	movs	r3, r7
 800b69e:	f7f6 f9c5 	bl	8001a2c <__aeabi_dmul>
 800b6a2:	0002      	movs	r2, r0
 800b6a4:	000b      	movs	r3, r1
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	4945      	ldr	r1, [pc, #276]	; (800b7c0 <__ieee754_pow+0x3bc>)
 800b6aa:	f7f6 fc31 	bl	8001f10 <__aeabi_dsub>
 800b6ae:	0032      	movs	r2, r6
 800b6b0:	0004      	movs	r4, r0
 800b6b2:	000d      	movs	r5, r1
 800b6b4:	003b      	movs	r3, r7
 800b6b6:	0030      	movs	r0, r6
 800b6b8:	0039      	movs	r1, r7
 800b6ba:	f7f6 f9b7 	bl	8001a2c <__aeabi_dmul>
 800b6be:	0002      	movs	r2, r0
 800b6c0:	000b      	movs	r3, r1
 800b6c2:	0020      	movs	r0, r4
 800b6c4:	0029      	movs	r1, r5
 800b6c6:	f7f6 f9b1 	bl	8001a2c <__aeabi_dmul>
 800b6ca:	4a3e      	ldr	r2, [pc, #248]	; (800b7c4 <__ieee754_pow+0x3c0>)
 800b6cc:	4b36      	ldr	r3, [pc, #216]	; (800b7a8 <__ieee754_pow+0x3a4>)
 800b6ce:	f7f6 f9ad 	bl	8001a2c <__aeabi_dmul>
 800b6d2:	0002      	movs	r2, r0
 800b6d4:	000b      	movs	r3, r1
 800b6d6:	9804      	ldr	r0, [sp, #16]
 800b6d8:	9905      	ldr	r1, [sp, #20]
 800b6da:	f7f6 fc19 	bl	8001f10 <__aeabi_dsub>
 800b6de:	0002      	movs	r2, r0
 800b6e0:	000b      	movs	r3, r1
 800b6e2:	0004      	movs	r4, r0
 800b6e4:	000d      	movs	r5, r1
 800b6e6:	9800      	ldr	r0, [sp, #0]
 800b6e8:	9901      	ldr	r1, [sp, #4]
 800b6ea:	f7f5 fa79 	bl	8000be0 <__aeabi_dadd>
 800b6ee:	9a00      	ldr	r2, [sp, #0]
 800b6f0:	9b01      	ldr	r3, [sp, #4]
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	9004      	str	r0, [sp, #16]
 800b6f6:	9105      	str	r1, [sp, #20]
 800b6f8:	f7f6 fc0a 	bl	8001f10 <__aeabi_dsub>
 800b6fc:	0002      	movs	r2, r0
 800b6fe:	000b      	movs	r3, r1
 800b700:	0020      	movs	r0, r4
 800b702:	0029      	movs	r1, r5
 800b704:	f7f6 fc04 	bl	8001f10 <__aeabi_dsub>
 800b708:	9b06      	ldr	r3, [sp, #24]
 800b70a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b70c:	3b01      	subs	r3, #1
 800b70e:	0006      	movs	r6, r0
 800b710:	000f      	movs	r7, r1
 800b712:	4313      	orrs	r3, r2
 800b714:	d000      	beq.n	800b718 <__ieee754_pow+0x314>
 800b716:	e1de      	b.n	800bad6 <__ieee754_pow+0x6d2>
 800b718:	2300      	movs	r3, #0
 800b71a:	4c2b      	ldr	r4, [pc, #172]	; (800b7c8 <__ieee754_pow+0x3c4>)
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	9401      	str	r4, [sp, #4]
 800b720:	9c02      	ldr	r4, [sp, #8]
 800b722:	9d03      	ldr	r5, [sp, #12]
 800b724:	9802      	ldr	r0, [sp, #8]
 800b726:	9903      	ldr	r1, [sp, #12]
 800b728:	2400      	movs	r4, #0
 800b72a:	002b      	movs	r3, r5
 800b72c:	0022      	movs	r2, r4
 800b72e:	f7f6 fbef 	bl	8001f10 <__aeabi_dsub>
 800b732:	9a04      	ldr	r2, [sp, #16]
 800b734:	9b05      	ldr	r3, [sp, #20]
 800b736:	f7f6 f979 	bl	8001a2c <__aeabi_dmul>
 800b73a:	9a02      	ldr	r2, [sp, #8]
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	9006      	str	r0, [sp, #24]
 800b740:	9107      	str	r1, [sp, #28]
 800b742:	0030      	movs	r0, r6
 800b744:	0039      	movs	r1, r7
 800b746:	f7f6 f971 	bl	8001a2c <__aeabi_dmul>
 800b74a:	0002      	movs	r2, r0
 800b74c:	000b      	movs	r3, r1
 800b74e:	9806      	ldr	r0, [sp, #24]
 800b750:	9907      	ldr	r1, [sp, #28]
 800b752:	f7f5 fa45 	bl	8000be0 <__aeabi_dadd>
 800b756:	0022      	movs	r2, r4
 800b758:	002b      	movs	r3, r5
 800b75a:	9006      	str	r0, [sp, #24]
 800b75c:	9107      	str	r1, [sp, #28]
 800b75e:	9804      	ldr	r0, [sp, #16]
 800b760:	9905      	ldr	r1, [sp, #20]
 800b762:	f7f6 f963 	bl	8001a2c <__aeabi_dmul>
 800b766:	0006      	movs	r6, r0
 800b768:	000f      	movs	r7, r1
 800b76a:	000b      	movs	r3, r1
 800b76c:	0002      	movs	r2, r0
 800b76e:	9806      	ldr	r0, [sp, #24]
 800b770:	9907      	ldr	r1, [sp, #28]
 800b772:	9604      	str	r6, [sp, #16]
 800b774:	9705      	str	r7, [sp, #20]
 800b776:	f7f5 fa33 	bl	8000be0 <__aeabi_dadd>
 800b77a:	4b14      	ldr	r3, [pc, #80]	; (800b7cc <__ieee754_pow+0x3c8>)
 800b77c:	0005      	movs	r5, r0
 800b77e:	000c      	movs	r4, r1
 800b780:	9108      	str	r1, [sp, #32]
 800b782:	4299      	cmp	r1, r3
 800b784:	dc00      	bgt.n	800b788 <__ieee754_pow+0x384>
 800b786:	e2d8      	b.n	800bd3a <__ieee754_pow+0x936>
 800b788:	4b11      	ldr	r3, [pc, #68]	; (800b7d0 <__ieee754_pow+0x3cc>)
 800b78a:	18cb      	adds	r3, r1, r3
 800b78c:	4303      	orrs	r3, r0
 800b78e:	d100      	bne.n	800b792 <__ieee754_pow+0x38e>
 800b790:	e1da      	b.n	800bb48 <__ieee754_pow+0x744>
 800b792:	9800      	ldr	r0, [sp, #0]
 800b794:	9901      	ldr	r1, [sp, #4]
 800b796:	4a0f      	ldr	r2, [pc, #60]	; (800b7d4 <__ieee754_pow+0x3d0>)
 800b798:	4b0f      	ldr	r3, [pc, #60]	; (800b7d8 <__ieee754_pow+0x3d4>)
 800b79a:	f7f6 f947 	bl	8001a2c <__aeabi_dmul>
 800b79e:	4a0d      	ldr	r2, [pc, #52]	; (800b7d4 <__ieee754_pow+0x3d0>)
 800b7a0:	4b0d      	ldr	r3, [pc, #52]	; (800b7d8 <__ieee754_pow+0x3d4>)
 800b7a2:	e6ce      	b.n	800b542 <__ieee754_pow+0x13e>
 800b7a4:	3ff00000 	.word	0x3ff00000
 800b7a8:	3ff71547 	.word	0x3ff71547
 800b7ac:	f85ddf44 	.word	0xf85ddf44
 800b7b0:	3e54ae0b 	.word	0x3e54ae0b
 800b7b4:	3fd00000 	.word	0x3fd00000
 800b7b8:	55555555 	.word	0x55555555
 800b7bc:	3fd55555 	.word	0x3fd55555
 800b7c0:	3fe00000 	.word	0x3fe00000
 800b7c4:	652b82fe 	.word	0x652b82fe
 800b7c8:	bff00000 	.word	0xbff00000
 800b7cc:	408fffff 	.word	0x408fffff
 800b7d0:	bf700000 	.word	0xbf700000
 800b7d4:	8800759c 	.word	0x8800759c
 800b7d8:	7e37e43c 	.word	0x7e37e43c
 800b7dc:	4bbf      	ldr	r3, [pc, #764]	; (800badc <__ieee754_pow+0x6d8>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	dc0a      	bgt.n	800b7fa <__ieee754_pow+0x3f6>
 800b7e4:	9800      	ldr	r0, [sp, #0]
 800b7e6:	9901      	ldr	r1, [sp, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4bbd      	ldr	r3, [pc, #756]	; (800bae0 <__ieee754_pow+0x6dc>)
 800b7ec:	f7f6 f91e 	bl	8001a2c <__aeabi_dmul>
 800b7f0:	2235      	movs	r2, #53	; 0x35
 800b7f2:	9000      	str	r0, [sp, #0]
 800b7f4:	9101      	str	r1, [sp, #4]
 800b7f6:	9c01      	ldr	r4, [sp, #4]
 800b7f8:	4252      	negs	r2, r2
 800b7fa:	49ba      	ldr	r1, [pc, #744]	; (800bae4 <__ieee754_pow+0x6e0>)
 800b7fc:	1523      	asrs	r3, r4, #20
 800b7fe:	185b      	adds	r3, r3, r1
 800b800:	189b      	adds	r3, r3, r2
 800b802:	0324      	lsls	r4, r4, #12
 800b804:	4db8      	ldr	r5, [pc, #736]	; (800bae8 <__ieee754_pow+0x6e4>)
 800b806:	4ab9      	ldr	r2, [pc, #740]	; (800baec <__ieee754_pow+0x6e8>)
 800b808:	930d      	str	r3, [sp, #52]	; 0x34
 800b80a:	0b23      	lsrs	r3, r4, #12
 800b80c:	431d      	orrs	r5, r3
 800b80e:	2400      	movs	r4, #0
 800b810:	4293      	cmp	r3, r2
 800b812:	dd09      	ble.n	800b828 <__ieee754_pow+0x424>
 800b814:	4ab6      	ldr	r2, [pc, #728]	; (800baf0 <__ieee754_pow+0x6ec>)
 800b816:	3401      	adds	r4, #1
 800b818:	4293      	cmp	r3, r2
 800b81a:	dd05      	ble.n	800b828 <__ieee754_pow+0x424>
 800b81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b81e:	191b      	adds	r3, r3, r4
 800b820:	2400      	movs	r4, #0
 800b822:	930d      	str	r3, [sp, #52]	; 0x34
 800b824:	4bb3      	ldr	r3, [pc, #716]	; (800baf4 <__ieee754_pow+0x6f0>)
 800b826:	18ed      	adds	r5, r5, r3
 800b828:	9800      	ldr	r0, [sp, #0]
 800b82a:	9901      	ldr	r1, [sp, #4]
 800b82c:	0029      	movs	r1, r5
 800b82e:	00e3      	lsls	r3, r4, #3
 800b830:	9311      	str	r3, [sp, #68]	; 0x44
 800b832:	4bb1      	ldr	r3, [pc, #708]	; (800baf8 <__ieee754_pow+0x6f4>)
 800b834:	00e2      	lsls	r2, r4, #3
 800b836:	189b      	adds	r3, r3, r2
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	900e      	str	r0, [sp, #56]	; 0x38
 800b83e:	910f      	str	r1, [sp, #60]	; 0x3c
 800b840:	920a      	str	r2, [sp, #40]	; 0x28
 800b842:	930b      	str	r3, [sp, #44]	; 0x2c
 800b844:	f7f6 fb64 	bl	8001f10 <__aeabi_dsub>
 800b848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b84a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b84c:	0006      	movs	r6, r0
 800b84e:	000f      	movs	r7, r1
 800b850:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b852:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b854:	f7f5 f9c4 	bl	8000be0 <__aeabi_dadd>
 800b858:	0002      	movs	r2, r0
 800b85a:	000b      	movs	r3, r1
 800b85c:	2000      	movs	r0, #0
 800b85e:	49a2      	ldr	r1, [pc, #648]	; (800bae8 <__ieee754_pow+0x6e4>)
 800b860:	f7f5 fcda 	bl	8001218 <__aeabi_ddiv>
 800b864:	9012      	str	r0, [sp, #72]	; 0x48
 800b866:	9113      	str	r1, [sp, #76]	; 0x4c
 800b868:	0002      	movs	r2, r0
 800b86a:	000b      	movs	r3, r1
 800b86c:	0030      	movs	r0, r6
 800b86e:	0039      	movs	r1, r7
 800b870:	f7f6 f8dc 	bl	8001a2c <__aeabi_dmul>
 800b874:	9008      	str	r0, [sp, #32]
 800b876:	9109      	str	r1, [sp, #36]	; 0x24
 800b878:	9a08      	ldr	r2, [sp, #32]
 800b87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87c:	2180      	movs	r1, #128	; 0x80
 800b87e:	9204      	str	r2, [sp, #16]
 800b880:	9305      	str	r3, [sp, #20]
 800b882:	2300      	movs	r3, #0
 800b884:	0589      	lsls	r1, r1, #22
 800b886:	106d      	asrs	r5, r5, #1
 800b888:	430d      	orrs	r5, r1
 800b88a:	2180      	movs	r1, #128	; 0x80
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	9a04      	ldr	r2, [sp, #16]
 800b890:	9b05      	ldr	r3, [sp, #20]
 800b892:	9200      	str	r2, [sp, #0]
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	0309      	lsls	r1, r1, #12
 800b89a:	186d      	adds	r5, r5, r1
 800b89c:	04a4      	lsls	r4, r4, #18
 800b89e:	192b      	adds	r3, r5, r4
 800b8a0:	9800      	ldr	r0, [sp, #0]
 800b8a2:	9901      	ldr	r1, [sp, #4]
 800b8a4:	0014      	movs	r4, r2
 800b8a6:	001d      	movs	r5, r3
 800b8a8:	f7f6 f8c0 	bl	8001a2c <__aeabi_dmul>
 800b8ac:	0002      	movs	r2, r0
 800b8ae:	000b      	movs	r3, r1
 800b8b0:	0030      	movs	r0, r6
 800b8b2:	0039      	movs	r1, r7
 800b8b4:	f7f6 fb2c 	bl	8001f10 <__aeabi_dsub>
 800b8b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8bc:	0006      	movs	r6, r0
 800b8be:	000f      	movs	r7, r1
 800b8c0:	0020      	movs	r0, r4
 800b8c2:	0029      	movs	r1, r5
 800b8c4:	f7f6 fb24 	bl	8001f10 <__aeabi_dsub>
 800b8c8:	0002      	movs	r2, r0
 800b8ca:	000b      	movs	r3, r1
 800b8cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b8ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b8d0:	f7f6 fb1e 	bl	8001f10 <__aeabi_dsub>
 800b8d4:	9a00      	ldr	r2, [sp, #0]
 800b8d6:	9b01      	ldr	r3, [sp, #4]
 800b8d8:	f7f6 f8a8 	bl	8001a2c <__aeabi_dmul>
 800b8dc:	0002      	movs	r2, r0
 800b8de:	000b      	movs	r3, r1
 800b8e0:	0030      	movs	r0, r6
 800b8e2:	0039      	movs	r1, r7
 800b8e4:	f7f6 fb14 	bl	8001f10 <__aeabi_dsub>
 800b8e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8ec:	f7f6 f89e 	bl	8001a2c <__aeabi_dmul>
 800b8f0:	9a08      	ldr	r2, [sp, #32]
 800b8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f4:	900a      	str	r0, [sp, #40]	; 0x28
 800b8f6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b8f8:	0010      	movs	r0, r2
 800b8fa:	0019      	movs	r1, r3
 800b8fc:	f7f6 f896 	bl	8001a2c <__aeabi_dmul>
 800b900:	0006      	movs	r6, r0
 800b902:	000f      	movs	r7, r1
 800b904:	4a7d      	ldr	r2, [pc, #500]	; (800bafc <__ieee754_pow+0x6f8>)
 800b906:	4b7e      	ldr	r3, [pc, #504]	; (800bb00 <__ieee754_pow+0x6fc>)
 800b908:	f7f6 f890 	bl	8001a2c <__aeabi_dmul>
 800b90c:	4a7d      	ldr	r2, [pc, #500]	; (800bb04 <__ieee754_pow+0x700>)
 800b90e:	4b7e      	ldr	r3, [pc, #504]	; (800bb08 <__ieee754_pow+0x704>)
 800b910:	f7f5 f966 	bl	8000be0 <__aeabi_dadd>
 800b914:	0032      	movs	r2, r6
 800b916:	003b      	movs	r3, r7
 800b918:	f7f6 f888 	bl	8001a2c <__aeabi_dmul>
 800b91c:	4a7b      	ldr	r2, [pc, #492]	; (800bb0c <__ieee754_pow+0x708>)
 800b91e:	4b7c      	ldr	r3, [pc, #496]	; (800bb10 <__ieee754_pow+0x70c>)
 800b920:	f7f5 f95e 	bl	8000be0 <__aeabi_dadd>
 800b924:	0032      	movs	r2, r6
 800b926:	003b      	movs	r3, r7
 800b928:	f7f6 f880 	bl	8001a2c <__aeabi_dmul>
 800b92c:	4a79      	ldr	r2, [pc, #484]	; (800bb14 <__ieee754_pow+0x710>)
 800b92e:	4b7a      	ldr	r3, [pc, #488]	; (800bb18 <__ieee754_pow+0x714>)
 800b930:	f7f5 f956 	bl	8000be0 <__aeabi_dadd>
 800b934:	0032      	movs	r2, r6
 800b936:	003b      	movs	r3, r7
 800b938:	f7f6 f878 	bl	8001a2c <__aeabi_dmul>
 800b93c:	4a77      	ldr	r2, [pc, #476]	; (800bb1c <__ieee754_pow+0x718>)
 800b93e:	4b78      	ldr	r3, [pc, #480]	; (800bb20 <__ieee754_pow+0x71c>)
 800b940:	f7f5 f94e 	bl	8000be0 <__aeabi_dadd>
 800b944:	0032      	movs	r2, r6
 800b946:	003b      	movs	r3, r7
 800b948:	f7f6 f870 	bl	8001a2c <__aeabi_dmul>
 800b94c:	4a75      	ldr	r2, [pc, #468]	; (800bb24 <__ieee754_pow+0x720>)
 800b94e:	4b76      	ldr	r3, [pc, #472]	; (800bb28 <__ieee754_pow+0x724>)
 800b950:	f7f5 f946 	bl	8000be0 <__aeabi_dadd>
 800b954:	0032      	movs	r2, r6
 800b956:	0004      	movs	r4, r0
 800b958:	000d      	movs	r5, r1
 800b95a:	003b      	movs	r3, r7
 800b95c:	0030      	movs	r0, r6
 800b95e:	0039      	movs	r1, r7
 800b960:	f7f6 f864 	bl	8001a2c <__aeabi_dmul>
 800b964:	0002      	movs	r2, r0
 800b966:	000b      	movs	r3, r1
 800b968:	0020      	movs	r0, r4
 800b96a:	0029      	movs	r1, r5
 800b96c:	f7f6 f85e 	bl	8001a2c <__aeabi_dmul>
 800b970:	9a00      	ldr	r2, [sp, #0]
 800b972:	9b01      	ldr	r3, [sp, #4]
 800b974:	0004      	movs	r4, r0
 800b976:	000d      	movs	r5, r1
 800b978:	9808      	ldr	r0, [sp, #32]
 800b97a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b97c:	f7f5 f930 	bl	8000be0 <__aeabi_dadd>
 800b980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b984:	f7f6 f852 	bl	8001a2c <__aeabi_dmul>
 800b988:	0022      	movs	r2, r4
 800b98a:	002b      	movs	r3, r5
 800b98c:	f7f5 f928 	bl	8000be0 <__aeabi_dadd>
 800b990:	9a00      	ldr	r2, [sp, #0]
 800b992:	9b01      	ldr	r3, [sp, #4]
 800b994:	900e      	str	r0, [sp, #56]	; 0x38
 800b996:	910f      	str	r1, [sp, #60]	; 0x3c
 800b998:	0010      	movs	r0, r2
 800b99a:	0019      	movs	r1, r3
 800b99c:	f7f6 f846 	bl	8001a2c <__aeabi_dmul>
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4b62      	ldr	r3, [pc, #392]	; (800bb2c <__ieee754_pow+0x728>)
 800b9a4:	0004      	movs	r4, r0
 800b9a6:	000d      	movs	r5, r1
 800b9a8:	f7f5 f91a 	bl	8000be0 <__aeabi_dadd>
 800b9ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9b0:	f7f5 f916 	bl	8000be0 <__aeabi_dadd>
 800b9b4:	9e04      	ldr	r6, [sp, #16]
 800b9b6:	000f      	movs	r7, r1
 800b9b8:	0032      	movs	r2, r6
 800b9ba:	000b      	movs	r3, r1
 800b9bc:	9800      	ldr	r0, [sp, #0]
 800b9be:	9901      	ldr	r1, [sp, #4]
 800b9c0:	f7f6 f834 	bl	8001a2c <__aeabi_dmul>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	9000      	str	r0, [sp, #0]
 800b9c8:	9101      	str	r1, [sp, #4]
 800b9ca:	4b58      	ldr	r3, [pc, #352]	; (800bb2c <__ieee754_pow+0x728>)
 800b9cc:	0030      	movs	r0, r6
 800b9ce:	0039      	movs	r1, r7
 800b9d0:	f7f6 fa9e 	bl	8001f10 <__aeabi_dsub>
 800b9d4:	0022      	movs	r2, r4
 800b9d6:	002b      	movs	r3, r5
 800b9d8:	f7f6 fa9a 	bl	8001f10 <__aeabi_dsub>
 800b9dc:	0002      	movs	r2, r0
 800b9de:	000b      	movs	r3, r1
 800b9e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b9e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b9e4:	f7f6 fa94 	bl	8001f10 <__aeabi_dsub>
 800b9e8:	9a08      	ldr	r2, [sp, #32]
 800b9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ec:	f7f6 f81e 	bl	8001a2c <__aeabi_dmul>
 800b9f0:	0032      	movs	r2, r6
 800b9f2:	0004      	movs	r4, r0
 800b9f4:	000d      	movs	r5, r1
 800b9f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9fa:	003b      	movs	r3, r7
 800b9fc:	f7f6 f816 	bl	8001a2c <__aeabi_dmul>
 800ba00:	0002      	movs	r2, r0
 800ba02:	000b      	movs	r3, r1
 800ba04:	0020      	movs	r0, r4
 800ba06:	0029      	movs	r1, r5
 800ba08:	f7f5 f8ea 	bl	8000be0 <__aeabi_dadd>
 800ba0c:	0004      	movs	r4, r0
 800ba0e:	000d      	movs	r5, r1
 800ba10:	0002      	movs	r2, r0
 800ba12:	000b      	movs	r3, r1
 800ba14:	9800      	ldr	r0, [sp, #0]
 800ba16:	9901      	ldr	r1, [sp, #4]
 800ba18:	f7f5 f8e2 	bl	8000be0 <__aeabi_dadd>
 800ba1c:	22e0      	movs	r2, #224	; 0xe0
 800ba1e:	9e04      	ldr	r6, [sp, #16]
 800ba20:	0612      	lsls	r2, r2, #24
 800ba22:	4b43      	ldr	r3, [pc, #268]	; (800bb30 <__ieee754_pow+0x72c>)
 800ba24:	0030      	movs	r0, r6
 800ba26:	000f      	movs	r7, r1
 800ba28:	f7f6 f800 	bl	8001a2c <__aeabi_dmul>
 800ba2c:	9008      	str	r0, [sp, #32]
 800ba2e:	9109      	str	r1, [sp, #36]	; 0x24
 800ba30:	9a00      	ldr	r2, [sp, #0]
 800ba32:	9b01      	ldr	r3, [sp, #4]
 800ba34:	0030      	movs	r0, r6
 800ba36:	0039      	movs	r1, r7
 800ba38:	f7f6 fa6a 	bl	8001f10 <__aeabi_dsub>
 800ba3c:	0002      	movs	r2, r0
 800ba3e:	000b      	movs	r3, r1
 800ba40:	0020      	movs	r0, r4
 800ba42:	0029      	movs	r1, r5
 800ba44:	f7f6 fa64 	bl	8001f10 <__aeabi_dsub>
 800ba48:	4a3a      	ldr	r2, [pc, #232]	; (800bb34 <__ieee754_pow+0x730>)
 800ba4a:	4b39      	ldr	r3, [pc, #228]	; (800bb30 <__ieee754_pow+0x72c>)
 800ba4c:	f7f5 ffee 	bl	8001a2c <__aeabi_dmul>
 800ba50:	4a39      	ldr	r2, [pc, #228]	; (800bb38 <__ieee754_pow+0x734>)
 800ba52:	0004      	movs	r4, r0
 800ba54:	000d      	movs	r5, r1
 800ba56:	4b39      	ldr	r3, [pc, #228]	; (800bb3c <__ieee754_pow+0x738>)
 800ba58:	0030      	movs	r0, r6
 800ba5a:	0039      	movs	r1, r7
 800ba5c:	f7f5 ffe6 	bl	8001a2c <__aeabi_dmul>
 800ba60:	0002      	movs	r2, r0
 800ba62:	000b      	movs	r3, r1
 800ba64:	0020      	movs	r0, r4
 800ba66:	0029      	movs	r1, r5
 800ba68:	f7f5 f8ba 	bl	8000be0 <__aeabi_dadd>
 800ba6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba6e:	4b34      	ldr	r3, [pc, #208]	; (800bb40 <__ieee754_pow+0x73c>)
 800ba70:	189b      	adds	r3, r3, r2
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	f7f5 f8b3 	bl	8000be0 <__aeabi_dadd>
 800ba7a:	9000      	str	r0, [sp, #0]
 800ba7c:	9101      	str	r1, [sp, #4]
 800ba7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ba80:	f7f6 fde0 	bl	8002644 <__aeabi_i2d>
 800ba84:	0004      	movs	r4, r0
 800ba86:	000d      	movs	r5, r1
 800ba88:	9808      	ldr	r0, [sp, #32]
 800ba8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba8e:	4b2d      	ldr	r3, [pc, #180]	; (800bb44 <__ieee754_pow+0x740>)
 800ba90:	189b      	adds	r3, r3, r2
 800ba92:	681e      	ldr	r6, [r3, #0]
 800ba94:	685f      	ldr	r7, [r3, #4]
 800ba96:	9a00      	ldr	r2, [sp, #0]
 800ba98:	9b01      	ldr	r3, [sp, #4]
 800ba9a:	f7f5 f8a1 	bl	8000be0 <__aeabi_dadd>
 800ba9e:	0032      	movs	r2, r6
 800baa0:	003b      	movs	r3, r7
 800baa2:	f7f5 f89d 	bl	8000be0 <__aeabi_dadd>
 800baa6:	0022      	movs	r2, r4
 800baa8:	002b      	movs	r3, r5
 800baaa:	f7f5 f899 	bl	8000be0 <__aeabi_dadd>
 800baae:	9804      	ldr	r0, [sp, #16]
 800bab0:	0022      	movs	r2, r4
 800bab2:	002b      	movs	r3, r5
 800bab4:	9004      	str	r0, [sp, #16]
 800bab6:	9105      	str	r1, [sp, #20]
 800bab8:	f7f6 fa2a 	bl	8001f10 <__aeabi_dsub>
 800babc:	0032      	movs	r2, r6
 800babe:	003b      	movs	r3, r7
 800bac0:	f7f6 fa26 	bl	8001f10 <__aeabi_dsub>
 800bac4:	9a08      	ldr	r2, [sp, #32]
 800bac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac8:	f7f6 fa22 	bl	8001f10 <__aeabi_dsub>
 800bacc:	0002      	movs	r2, r0
 800bace:	000b      	movs	r3, r1
 800bad0:	9800      	ldr	r0, [sp, #0]
 800bad2:	9901      	ldr	r1, [sp, #4]
 800bad4:	e616      	b.n	800b704 <__ieee754_pow+0x300>
 800bad6:	2300      	movs	r3, #0
 800bad8:	4c03      	ldr	r4, [pc, #12]	; (800bae8 <__ieee754_pow+0x6e4>)
 800bada:	e61f      	b.n	800b71c <__ieee754_pow+0x318>
 800badc:	000fffff 	.word	0x000fffff
 800bae0:	43400000 	.word	0x43400000
 800bae4:	fffffc01 	.word	0xfffffc01
 800bae8:	3ff00000 	.word	0x3ff00000
 800baec:	0003988e 	.word	0x0003988e
 800baf0:	000bb679 	.word	0x000bb679
 800baf4:	fff00000 	.word	0xfff00000
 800baf8:	0800c660 	.word	0x0800c660
 800bafc:	4a454eef 	.word	0x4a454eef
 800bb00:	3fca7e28 	.word	0x3fca7e28
 800bb04:	93c9db65 	.word	0x93c9db65
 800bb08:	3fcd864a 	.word	0x3fcd864a
 800bb0c:	a91d4101 	.word	0xa91d4101
 800bb10:	3fd17460 	.word	0x3fd17460
 800bb14:	518f264d 	.word	0x518f264d
 800bb18:	3fd55555 	.word	0x3fd55555
 800bb1c:	db6fabff 	.word	0xdb6fabff
 800bb20:	3fdb6db6 	.word	0x3fdb6db6
 800bb24:	33333303 	.word	0x33333303
 800bb28:	3fe33333 	.word	0x3fe33333
 800bb2c:	40080000 	.word	0x40080000
 800bb30:	3feec709 	.word	0x3feec709
 800bb34:	dc3a03fd 	.word	0xdc3a03fd
 800bb38:	145b01f5 	.word	0x145b01f5
 800bb3c:	be3e2fe0 	.word	0xbe3e2fe0
 800bb40:	0800c680 	.word	0x0800c680
 800bb44:	0800c670 	.word	0x0800c670
 800bb48:	4a8f      	ldr	r2, [pc, #572]	; (800bd88 <__ieee754_pow+0x984>)
 800bb4a:	4b90      	ldr	r3, [pc, #576]	; (800bd8c <__ieee754_pow+0x988>)
 800bb4c:	9806      	ldr	r0, [sp, #24]
 800bb4e:	9907      	ldr	r1, [sp, #28]
 800bb50:	f7f5 f846 	bl	8000be0 <__aeabi_dadd>
 800bb54:	0032      	movs	r2, r6
 800bb56:	9002      	str	r0, [sp, #8]
 800bb58:	9103      	str	r1, [sp, #12]
 800bb5a:	003b      	movs	r3, r7
 800bb5c:	0028      	movs	r0, r5
 800bb5e:	0021      	movs	r1, r4
 800bb60:	f7f6 f9d6 	bl	8001f10 <__aeabi_dsub>
 800bb64:	0002      	movs	r2, r0
 800bb66:	000b      	movs	r3, r1
 800bb68:	9802      	ldr	r0, [sp, #8]
 800bb6a:	9903      	ldr	r1, [sp, #12]
 800bb6c:	f7f4 fc7e 	bl	800046c <__aeabi_dcmpgt>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d000      	beq.n	800bb76 <__ieee754_pow+0x772>
 800bb74:	e60d      	b.n	800b792 <__ieee754_pow+0x38e>
 800bb76:	2100      	movs	r1, #0
 800bb78:	4a85      	ldr	r2, [pc, #532]	; (800bd90 <__ieee754_pow+0x98c>)
 800bb7a:	0063      	lsls	r3, r4, #1
 800bb7c:	085b      	lsrs	r3, r3, #1
 800bb7e:	9102      	str	r1, [sp, #8]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	dd25      	ble.n	800bbd0 <__ieee754_pow+0x7cc>
 800bb84:	4a83      	ldr	r2, [pc, #524]	; (800bd94 <__ieee754_pow+0x990>)
 800bb86:	151b      	asrs	r3, r3, #20
 800bb88:	189b      	adds	r3, r3, r2
 800bb8a:	2280      	movs	r2, #128	; 0x80
 800bb8c:	0352      	lsls	r2, r2, #13
 800bb8e:	4694      	mov	ip, r2
 800bb90:	411a      	asrs	r2, r3
 800bb92:	1914      	adds	r4, r2, r4
 800bb94:	0060      	lsls	r0, r4, #1
 800bb96:	4b80      	ldr	r3, [pc, #512]	; (800bd98 <__ieee754_pow+0x994>)
 800bb98:	0d40      	lsrs	r0, r0, #21
 800bb9a:	4d80      	ldr	r5, [pc, #512]	; (800bd9c <__ieee754_pow+0x998>)
 800bb9c:	18c0      	adds	r0, r0, r3
 800bb9e:	4105      	asrs	r5, r0
 800bba0:	0021      	movs	r1, r4
 800bba2:	43a9      	bics	r1, r5
 800bba4:	000b      	movs	r3, r1
 800bba6:	4661      	mov	r1, ip
 800bba8:	0324      	lsls	r4, r4, #12
 800bbaa:	0b24      	lsrs	r4, r4, #12
 800bbac:	4321      	orrs	r1, r4
 800bbae:	2414      	movs	r4, #20
 800bbb0:	1a20      	subs	r0, r4, r0
 800bbb2:	4101      	asrs	r1, r0
 800bbb4:	9102      	str	r1, [sp, #8]
 800bbb6:	9908      	ldr	r1, [sp, #32]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2900      	cmp	r1, #0
 800bbbc:	da02      	bge.n	800bbc4 <__ieee754_pow+0x7c0>
 800bbbe:	9902      	ldr	r1, [sp, #8]
 800bbc0:	4249      	negs	r1, r1
 800bbc2:	9102      	str	r1, [sp, #8]
 800bbc4:	0030      	movs	r0, r6
 800bbc6:	0039      	movs	r1, r7
 800bbc8:	f7f6 f9a2 	bl	8001f10 <__aeabi_dsub>
 800bbcc:	9004      	str	r0, [sp, #16]
 800bbce:	9105      	str	r1, [sp, #20]
 800bbd0:	9a06      	ldr	r2, [sp, #24]
 800bbd2:	9b07      	ldr	r3, [sp, #28]
 800bbd4:	9804      	ldr	r0, [sp, #16]
 800bbd6:	9905      	ldr	r1, [sp, #20]
 800bbd8:	2600      	movs	r6, #0
 800bbda:	f7f5 f801 	bl	8000be0 <__aeabi_dadd>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4b6f      	ldr	r3, [pc, #444]	; (800bda0 <__ieee754_pow+0x99c>)
 800bbe2:	0030      	movs	r0, r6
 800bbe4:	000f      	movs	r7, r1
 800bbe6:	f7f5 ff21 	bl	8001a2c <__aeabi_dmul>
 800bbea:	9a04      	ldr	r2, [sp, #16]
 800bbec:	9b05      	ldr	r3, [sp, #20]
 800bbee:	9008      	str	r0, [sp, #32]
 800bbf0:	9109      	str	r1, [sp, #36]	; 0x24
 800bbf2:	0030      	movs	r0, r6
 800bbf4:	0039      	movs	r1, r7
 800bbf6:	f7f6 f98b 	bl	8001f10 <__aeabi_dsub>
 800bbfa:	0002      	movs	r2, r0
 800bbfc:	000b      	movs	r3, r1
 800bbfe:	9806      	ldr	r0, [sp, #24]
 800bc00:	9907      	ldr	r1, [sp, #28]
 800bc02:	f7f6 f985 	bl	8001f10 <__aeabi_dsub>
 800bc06:	4a67      	ldr	r2, [pc, #412]	; (800bda4 <__ieee754_pow+0x9a0>)
 800bc08:	4b67      	ldr	r3, [pc, #412]	; (800bda8 <__ieee754_pow+0x9a4>)
 800bc0a:	f7f5 ff0f 	bl	8001a2c <__aeabi_dmul>
 800bc0e:	4a67      	ldr	r2, [pc, #412]	; (800bdac <__ieee754_pow+0x9a8>)
 800bc10:	0004      	movs	r4, r0
 800bc12:	000d      	movs	r5, r1
 800bc14:	4b66      	ldr	r3, [pc, #408]	; (800bdb0 <__ieee754_pow+0x9ac>)
 800bc16:	0030      	movs	r0, r6
 800bc18:	0039      	movs	r1, r7
 800bc1a:	f7f5 ff07 	bl	8001a2c <__aeabi_dmul>
 800bc1e:	0002      	movs	r2, r0
 800bc20:	000b      	movs	r3, r1
 800bc22:	0020      	movs	r0, r4
 800bc24:	0029      	movs	r1, r5
 800bc26:	f7f4 ffdb 	bl	8000be0 <__aeabi_dadd>
 800bc2a:	0004      	movs	r4, r0
 800bc2c:	000d      	movs	r5, r1
 800bc2e:	0002      	movs	r2, r0
 800bc30:	000b      	movs	r3, r1
 800bc32:	9808      	ldr	r0, [sp, #32]
 800bc34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc36:	f7f4 ffd3 	bl	8000be0 <__aeabi_dadd>
 800bc3a:	9a08      	ldr	r2, [sp, #32]
 800bc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3e:	0006      	movs	r6, r0
 800bc40:	000f      	movs	r7, r1
 800bc42:	f7f6 f965 	bl	8001f10 <__aeabi_dsub>
 800bc46:	0002      	movs	r2, r0
 800bc48:	000b      	movs	r3, r1
 800bc4a:	0020      	movs	r0, r4
 800bc4c:	0029      	movs	r1, r5
 800bc4e:	f7f6 f95f 	bl	8001f10 <__aeabi_dsub>
 800bc52:	0032      	movs	r2, r6
 800bc54:	9004      	str	r0, [sp, #16]
 800bc56:	9105      	str	r1, [sp, #20]
 800bc58:	003b      	movs	r3, r7
 800bc5a:	0030      	movs	r0, r6
 800bc5c:	0039      	movs	r1, r7
 800bc5e:	f7f5 fee5 	bl	8001a2c <__aeabi_dmul>
 800bc62:	0004      	movs	r4, r0
 800bc64:	000d      	movs	r5, r1
 800bc66:	4a53      	ldr	r2, [pc, #332]	; (800bdb4 <__ieee754_pow+0x9b0>)
 800bc68:	4b53      	ldr	r3, [pc, #332]	; (800bdb8 <__ieee754_pow+0x9b4>)
 800bc6a:	f7f5 fedf 	bl	8001a2c <__aeabi_dmul>
 800bc6e:	4a53      	ldr	r2, [pc, #332]	; (800bdbc <__ieee754_pow+0x9b8>)
 800bc70:	4b53      	ldr	r3, [pc, #332]	; (800bdc0 <__ieee754_pow+0x9bc>)
 800bc72:	f7f6 f94d 	bl	8001f10 <__aeabi_dsub>
 800bc76:	0022      	movs	r2, r4
 800bc78:	002b      	movs	r3, r5
 800bc7a:	f7f5 fed7 	bl	8001a2c <__aeabi_dmul>
 800bc7e:	4a51      	ldr	r2, [pc, #324]	; (800bdc4 <__ieee754_pow+0x9c0>)
 800bc80:	4b51      	ldr	r3, [pc, #324]	; (800bdc8 <__ieee754_pow+0x9c4>)
 800bc82:	f7f4 ffad 	bl	8000be0 <__aeabi_dadd>
 800bc86:	0022      	movs	r2, r4
 800bc88:	002b      	movs	r3, r5
 800bc8a:	f7f5 fecf 	bl	8001a2c <__aeabi_dmul>
 800bc8e:	4a4f      	ldr	r2, [pc, #316]	; (800bdcc <__ieee754_pow+0x9c8>)
 800bc90:	4b4f      	ldr	r3, [pc, #316]	; (800bdd0 <__ieee754_pow+0x9cc>)
 800bc92:	f7f6 f93d 	bl	8001f10 <__aeabi_dsub>
 800bc96:	0022      	movs	r2, r4
 800bc98:	002b      	movs	r3, r5
 800bc9a:	f7f5 fec7 	bl	8001a2c <__aeabi_dmul>
 800bc9e:	4a4d      	ldr	r2, [pc, #308]	; (800bdd4 <__ieee754_pow+0x9d0>)
 800bca0:	4b4d      	ldr	r3, [pc, #308]	; (800bdd8 <__ieee754_pow+0x9d4>)
 800bca2:	f7f4 ff9d 	bl	8000be0 <__aeabi_dadd>
 800bca6:	0022      	movs	r2, r4
 800bca8:	002b      	movs	r3, r5
 800bcaa:	f7f5 febf 	bl	8001a2c <__aeabi_dmul>
 800bcae:	0002      	movs	r2, r0
 800bcb0:	000b      	movs	r3, r1
 800bcb2:	0030      	movs	r0, r6
 800bcb4:	0039      	movs	r1, r7
 800bcb6:	f7f6 f92b 	bl	8001f10 <__aeabi_dsub>
 800bcba:	0004      	movs	r4, r0
 800bcbc:	000d      	movs	r5, r1
 800bcbe:	0002      	movs	r2, r0
 800bcc0:	000b      	movs	r3, r1
 800bcc2:	0030      	movs	r0, r6
 800bcc4:	0039      	movs	r1, r7
 800bcc6:	f7f5 feb1 	bl	8001a2c <__aeabi_dmul>
 800bcca:	2380      	movs	r3, #128	; 0x80
 800bccc:	9006      	str	r0, [sp, #24]
 800bcce:	9107      	str	r1, [sp, #28]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	05db      	lsls	r3, r3, #23
 800bcd4:	0020      	movs	r0, r4
 800bcd6:	0029      	movs	r1, r5
 800bcd8:	f7f6 f91a 	bl	8001f10 <__aeabi_dsub>
 800bcdc:	0002      	movs	r2, r0
 800bcde:	000b      	movs	r3, r1
 800bce0:	9806      	ldr	r0, [sp, #24]
 800bce2:	9907      	ldr	r1, [sp, #28]
 800bce4:	f7f5 fa98 	bl	8001218 <__aeabi_ddiv>
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	9b05      	ldr	r3, [sp, #20]
 800bcec:	0004      	movs	r4, r0
 800bcee:	000d      	movs	r5, r1
 800bcf0:	0030      	movs	r0, r6
 800bcf2:	0039      	movs	r1, r7
 800bcf4:	f7f5 fe9a 	bl	8001a2c <__aeabi_dmul>
 800bcf8:	9a04      	ldr	r2, [sp, #16]
 800bcfa:	9b05      	ldr	r3, [sp, #20]
 800bcfc:	f7f4 ff70 	bl	8000be0 <__aeabi_dadd>
 800bd00:	0002      	movs	r2, r0
 800bd02:	000b      	movs	r3, r1
 800bd04:	0020      	movs	r0, r4
 800bd06:	0029      	movs	r1, r5
 800bd08:	f7f6 f902 	bl	8001f10 <__aeabi_dsub>
 800bd0c:	0032      	movs	r2, r6
 800bd0e:	003b      	movs	r3, r7
 800bd10:	f7f6 f8fe 	bl	8001f10 <__aeabi_dsub>
 800bd14:	0002      	movs	r2, r0
 800bd16:	000b      	movs	r3, r1
 800bd18:	2000      	movs	r0, #0
 800bd1a:	4930      	ldr	r1, [pc, #192]	; (800bddc <__ieee754_pow+0x9d8>)
 800bd1c:	f7f6 f8f8 	bl	8001f10 <__aeabi_dsub>
 800bd20:	9b02      	ldr	r3, [sp, #8]
 800bd22:	051b      	lsls	r3, r3, #20
 800bd24:	185b      	adds	r3, r3, r1
 800bd26:	151a      	asrs	r2, r3, #20
 800bd28:	2a00      	cmp	r2, #0
 800bd2a:	dc26      	bgt.n	800bd7a <__ieee754_pow+0x976>
 800bd2c:	9a02      	ldr	r2, [sp, #8]
 800bd2e:	f000 f9ad 	bl	800c08c <scalbn>
 800bd32:	9a00      	ldr	r2, [sp, #0]
 800bd34:	9b01      	ldr	r3, [sp, #4]
 800bd36:	f7ff fc04 	bl	800b542 <__ieee754_pow+0x13e>
 800bd3a:	4a29      	ldr	r2, [pc, #164]	; (800bde0 <__ieee754_pow+0x9dc>)
 800bd3c:	004b      	lsls	r3, r1, #1
 800bd3e:	085b      	lsrs	r3, r3, #1
 800bd40:	4293      	cmp	r3, r2
 800bd42:	dc00      	bgt.n	800bd46 <__ieee754_pow+0x942>
 800bd44:	e717      	b.n	800bb76 <__ieee754_pow+0x772>
 800bd46:	4b27      	ldr	r3, [pc, #156]	; (800bde4 <__ieee754_pow+0x9e0>)
 800bd48:	18cb      	adds	r3, r1, r3
 800bd4a:	4303      	orrs	r3, r0
 800bd4c:	d009      	beq.n	800bd62 <__ieee754_pow+0x95e>
 800bd4e:	9800      	ldr	r0, [sp, #0]
 800bd50:	9901      	ldr	r1, [sp, #4]
 800bd52:	4a25      	ldr	r2, [pc, #148]	; (800bde8 <__ieee754_pow+0x9e4>)
 800bd54:	4b25      	ldr	r3, [pc, #148]	; (800bdec <__ieee754_pow+0x9e8>)
 800bd56:	f7f5 fe69 	bl	8001a2c <__aeabi_dmul>
 800bd5a:	4a23      	ldr	r2, [pc, #140]	; (800bde8 <__ieee754_pow+0x9e4>)
 800bd5c:	4b23      	ldr	r3, [pc, #140]	; (800bdec <__ieee754_pow+0x9e8>)
 800bd5e:	f7ff fbf0 	bl	800b542 <__ieee754_pow+0x13e>
 800bd62:	0032      	movs	r2, r6
 800bd64:	003b      	movs	r3, r7
 800bd66:	f7f6 f8d3 	bl	8001f10 <__aeabi_dsub>
 800bd6a:	9a06      	ldr	r2, [sp, #24]
 800bd6c:	9b07      	ldr	r3, [sp, #28]
 800bd6e:	f7f4 fb87 	bl	8000480 <__aeabi_dcmpge>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d100      	bne.n	800bd78 <__ieee754_pow+0x974>
 800bd76:	e6fe      	b.n	800bb76 <__ieee754_pow+0x772>
 800bd78:	e7e9      	b.n	800bd4e <__ieee754_pow+0x94a>
 800bd7a:	0019      	movs	r1, r3
 800bd7c:	e7d9      	b.n	800bd32 <__ieee754_pow+0x92e>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	4c16      	ldr	r4, [pc, #88]	; (800bddc <__ieee754_pow+0x9d8>)
 800bd82:	f7ff fba1 	bl	800b4c8 <__ieee754_pow+0xc4>
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	652b82fe 	.word	0x652b82fe
 800bd8c:	3c971547 	.word	0x3c971547
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	fffffc02 	.word	0xfffffc02
 800bd98:	fffffc01 	.word	0xfffffc01
 800bd9c:	000fffff 	.word	0x000fffff
 800bda0:	3fe62e43 	.word	0x3fe62e43
 800bda4:	fefa39ef 	.word	0xfefa39ef
 800bda8:	3fe62e42 	.word	0x3fe62e42
 800bdac:	0ca86c39 	.word	0x0ca86c39
 800bdb0:	be205c61 	.word	0xbe205c61
 800bdb4:	72bea4d0 	.word	0x72bea4d0
 800bdb8:	3e663769 	.word	0x3e663769
 800bdbc:	c5d26bf1 	.word	0xc5d26bf1
 800bdc0:	3ebbbd41 	.word	0x3ebbbd41
 800bdc4:	af25de2c 	.word	0xaf25de2c
 800bdc8:	3f11566a 	.word	0x3f11566a
 800bdcc:	16bebd93 	.word	0x16bebd93
 800bdd0:	3f66c16c 	.word	0x3f66c16c
 800bdd4:	5555553e 	.word	0x5555553e
 800bdd8:	3fc55555 	.word	0x3fc55555
 800bddc:	3ff00000 	.word	0x3ff00000
 800bde0:	4090cbff 	.word	0x4090cbff
 800bde4:	3f6f3400 	.word	0x3f6f3400
 800bde8:	c2f8f359 	.word	0xc2f8f359
 800bdec:	01a56e1f 	.word	0x01a56e1f

0800bdf0 <__ieee754_sqrt>:
 800bdf0:	4b55      	ldr	r3, [pc, #340]	; (800bf48 <__ieee754_sqrt+0x158>)
 800bdf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf4:	001a      	movs	r2, r3
 800bdf6:	0005      	movs	r5, r0
 800bdf8:	000c      	movs	r4, r1
 800bdfa:	400a      	ands	r2, r1
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d10f      	bne.n	800be20 <__ieee754_sqrt+0x30>
 800be00:	0002      	movs	r2, r0
 800be02:	000b      	movs	r3, r1
 800be04:	f7f5 fe12 	bl	8001a2c <__aeabi_dmul>
 800be08:	0002      	movs	r2, r0
 800be0a:	000b      	movs	r3, r1
 800be0c:	0028      	movs	r0, r5
 800be0e:	0021      	movs	r1, r4
 800be10:	f7f4 fee6 	bl	8000be0 <__aeabi_dadd>
 800be14:	0005      	movs	r5, r0
 800be16:	000c      	movs	r4, r1
 800be18:	0028      	movs	r0, r5
 800be1a:	0021      	movs	r1, r4
 800be1c:	b003      	add	sp, #12
 800be1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be20:	0002      	movs	r2, r0
 800be22:	2900      	cmp	r1, #0
 800be24:	dc10      	bgt.n	800be48 <__ieee754_sqrt+0x58>
 800be26:	004b      	lsls	r3, r1, #1
 800be28:	085b      	lsrs	r3, r3, #1
 800be2a:	4303      	orrs	r3, r0
 800be2c:	d0f4      	beq.n	800be18 <__ieee754_sqrt+0x28>
 800be2e:	2000      	movs	r0, #0
 800be30:	4281      	cmp	r1, r0
 800be32:	d100      	bne.n	800be36 <__ieee754_sqrt+0x46>
 800be34:	e07f      	b.n	800bf36 <__ieee754_sqrt+0x146>
 800be36:	000b      	movs	r3, r1
 800be38:	0028      	movs	r0, r5
 800be3a:	f7f6 f869 	bl	8001f10 <__aeabi_dsub>
 800be3e:	0002      	movs	r2, r0
 800be40:	000b      	movs	r3, r1
 800be42:	f7f5 f9e9 	bl	8001218 <__aeabi_ddiv>
 800be46:	e7e5      	b.n	800be14 <__ieee754_sqrt+0x24>
 800be48:	1508      	asrs	r0, r1, #20
 800be4a:	d074      	beq.n	800bf36 <__ieee754_sqrt+0x146>
 800be4c:	4b3f      	ldr	r3, [pc, #252]	; (800bf4c <__ieee754_sqrt+0x15c>)
 800be4e:	0309      	lsls	r1, r1, #12
 800be50:	18c0      	adds	r0, r0, r3
 800be52:	2380      	movs	r3, #128	; 0x80
 800be54:	0b09      	lsrs	r1, r1, #12
 800be56:	035b      	lsls	r3, r3, #13
 800be58:	4319      	orrs	r1, r3
 800be5a:	07c3      	lsls	r3, r0, #31
 800be5c:	d503      	bpl.n	800be66 <__ieee754_sqrt+0x76>
 800be5e:	0fd3      	lsrs	r3, r2, #31
 800be60:	0049      	lsls	r1, r1, #1
 800be62:	18c9      	adds	r1, r1, r3
 800be64:	0052      	lsls	r2, r2, #1
 800be66:	2400      	movs	r4, #0
 800be68:	1043      	asrs	r3, r0, #1
 800be6a:	0049      	lsls	r1, r1, #1
 800be6c:	9301      	str	r3, [sp, #4]
 800be6e:	2580      	movs	r5, #128	; 0x80
 800be70:	0fd3      	lsrs	r3, r2, #31
 800be72:	18cb      	adds	r3, r1, r3
 800be74:	0020      	movs	r0, r4
 800be76:	2116      	movs	r1, #22
 800be78:	0052      	lsls	r2, r2, #1
 800be7a:	03ad      	lsls	r5, r5, #14
 800be7c:	1946      	adds	r6, r0, r5
 800be7e:	429e      	cmp	r6, r3
 800be80:	dc02      	bgt.n	800be88 <__ieee754_sqrt+0x98>
 800be82:	1970      	adds	r0, r6, r5
 800be84:	1b9b      	subs	r3, r3, r6
 800be86:	1964      	adds	r4, r4, r5
 800be88:	0fd6      	lsrs	r6, r2, #31
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	3901      	subs	r1, #1
 800be8e:	199b      	adds	r3, r3, r6
 800be90:	0052      	lsls	r2, r2, #1
 800be92:	086d      	lsrs	r5, r5, #1
 800be94:	2900      	cmp	r1, #0
 800be96:	d1f1      	bne.n	800be7c <__ieee754_sqrt+0x8c>
 800be98:	2520      	movs	r5, #32
 800be9a:	2680      	movs	r6, #128	; 0x80
 800be9c:	46ac      	mov	ip, r5
 800be9e:	9100      	str	r1, [sp, #0]
 800bea0:	0636      	lsls	r6, r6, #24
 800bea2:	9d00      	ldr	r5, [sp, #0]
 800bea4:	1977      	adds	r7, r6, r5
 800bea6:	4283      	cmp	r3, r0
 800bea8:	dc02      	bgt.n	800beb0 <__ieee754_sqrt+0xc0>
 800beaa:	d112      	bne.n	800bed2 <__ieee754_sqrt+0xe2>
 800beac:	4297      	cmp	r7, r2
 800beae:	d810      	bhi.n	800bed2 <__ieee754_sqrt+0xe2>
 800beb0:	19bd      	adds	r5, r7, r6
 800beb2:	9500      	str	r5, [sp, #0]
 800beb4:	0005      	movs	r5, r0
 800beb6:	2f00      	cmp	r7, #0
 800beb8:	da03      	bge.n	800bec2 <__ieee754_sqrt+0xd2>
 800beba:	9d00      	ldr	r5, [sp, #0]
 800bebc:	43ed      	mvns	r5, r5
 800bebe:	0fed      	lsrs	r5, r5, #31
 800bec0:	1945      	adds	r5, r0, r5
 800bec2:	1a1b      	subs	r3, r3, r0
 800bec4:	42ba      	cmp	r2, r7
 800bec6:	4180      	sbcs	r0, r0
 800bec8:	4240      	negs	r0, r0
 800beca:	1a1b      	subs	r3, r3, r0
 800becc:	0028      	movs	r0, r5
 800bece:	1bd2      	subs	r2, r2, r7
 800bed0:	1989      	adds	r1, r1, r6
 800bed2:	0fd5      	lsrs	r5, r2, #31
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	18eb      	adds	r3, r5, r3
 800bed8:	2501      	movs	r5, #1
 800beda:	426d      	negs	r5, r5
 800bedc:	44ac      	add	ip, r5
 800bede:	4665      	mov	r5, ip
 800bee0:	0052      	lsls	r2, r2, #1
 800bee2:	0876      	lsrs	r6, r6, #1
 800bee4:	2d00      	cmp	r5, #0
 800bee6:	d1dc      	bne.n	800bea2 <__ieee754_sqrt+0xb2>
 800bee8:	4313      	orrs	r3, r2
 800beea:	d003      	beq.n	800bef4 <__ieee754_sqrt+0x104>
 800beec:	1c4b      	adds	r3, r1, #1
 800beee:	d127      	bne.n	800bf40 <__ieee754_sqrt+0x150>
 800bef0:	4661      	mov	r1, ip
 800bef2:	3401      	adds	r4, #1
 800bef4:	4b16      	ldr	r3, [pc, #88]	; (800bf50 <__ieee754_sqrt+0x160>)
 800bef6:	1060      	asrs	r0, r4, #1
 800bef8:	18c0      	adds	r0, r0, r3
 800befa:	0849      	lsrs	r1, r1, #1
 800befc:	07e3      	lsls	r3, r4, #31
 800befe:	d502      	bpl.n	800bf06 <__ieee754_sqrt+0x116>
 800bf00:	2380      	movs	r3, #128	; 0x80
 800bf02:	061b      	lsls	r3, r3, #24
 800bf04:	4319      	orrs	r1, r3
 800bf06:	9b01      	ldr	r3, [sp, #4]
 800bf08:	000d      	movs	r5, r1
 800bf0a:	051c      	lsls	r4, r3, #20
 800bf0c:	1823      	adds	r3, r4, r0
 800bf0e:	001c      	movs	r4, r3
 800bf10:	e782      	b.n	800be18 <__ieee754_sqrt+0x28>
 800bf12:	0ad1      	lsrs	r1, r2, #11
 800bf14:	3b15      	subs	r3, #21
 800bf16:	0552      	lsls	r2, r2, #21
 800bf18:	2900      	cmp	r1, #0
 800bf1a:	d0fa      	beq.n	800bf12 <__ieee754_sqrt+0x122>
 800bf1c:	2480      	movs	r4, #128	; 0x80
 800bf1e:	0364      	lsls	r4, r4, #13
 800bf20:	4221      	tst	r1, r4
 800bf22:	d00a      	beq.n	800bf3a <__ieee754_sqrt+0x14a>
 800bf24:	2420      	movs	r4, #32
 800bf26:	0016      	movs	r6, r2
 800bf28:	1a24      	subs	r4, r4, r0
 800bf2a:	40e6      	lsrs	r6, r4
 800bf2c:	1e45      	subs	r5, r0, #1
 800bf2e:	4082      	lsls	r2, r0
 800bf30:	4331      	orrs	r1, r6
 800bf32:	1b58      	subs	r0, r3, r5
 800bf34:	e78a      	b.n	800be4c <__ieee754_sqrt+0x5c>
 800bf36:	2300      	movs	r3, #0
 800bf38:	e7ee      	b.n	800bf18 <__ieee754_sqrt+0x128>
 800bf3a:	0049      	lsls	r1, r1, #1
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	e7ef      	b.n	800bf20 <__ieee754_sqrt+0x130>
 800bf40:	2301      	movs	r3, #1
 800bf42:	3101      	adds	r1, #1
 800bf44:	4399      	bics	r1, r3
 800bf46:	e7d5      	b.n	800bef4 <__ieee754_sqrt+0x104>
 800bf48:	7ff00000 	.word	0x7ff00000
 800bf4c:	fffffc01 	.word	0xfffffc01
 800bf50:	3fe00000 	.word	0x3fe00000

0800bf54 <fabs>:
 800bf54:	0049      	lsls	r1, r1, #1
 800bf56:	084b      	lsrs	r3, r1, #1
 800bf58:	0019      	movs	r1, r3
 800bf5a:	4770      	bx	lr

0800bf5c <finite>:
 800bf5c:	0048      	lsls	r0, r1, #1
 800bf5e:	4b02      	ldr	r3, [pc, #8]	; (800bf68 <finite+0xc>)
 800bf60:	0840      	lsrs	r0, r0, #1
 800bf62:	18c0      	adds	r0, r0, r3
 800bf64:	0fc0      	lsrs	r0, r0, #31
 800bf66:	4770      	bx	lr
 800bf68:	80100000 	.word	0x80100000

0800bf6c <matherr>:
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	4770      	bx	lr

0800bf70 <nan>:
 800bf70:	2000      	movs	r0, #0
 800bf72:	4901      	ldr	r1, [pc, #4]	; (800bf78 <nan+0x8>)
 800bf74:	4770      	bx	lr
 800bf76:	46c0      	nop			; (mov r8, r8)
 800bf78:	7ff80000 	.word	0x7ff80000

0800bf7c <rint>:
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7e:	004a      	lsls	r2, r1, #1
 800bf80:	4e3e      	ldr	r6, [pc, #248]	; (800c07c <rint+0x100>)
 800bf82:	0d52      	lsrs	r2, r2, #21
 800bf84:	b085      	sub	sp, #20
 800bf86:	1996      	adds	r6, r2, r6
 800bf88:	000d      	movs	r5, r1
 800bf8a:	9101      	str	r1, [sp, #4]
 800bf8c:	0003      	movs	r3, r0
 800bf8e:	0fcc      	lsrs	r4, r1, #31
 800bf90:	2e13      	cmp	r6, #19
 800bf92:	dc57      	bgt.n	800c044 <rint+0xc8>
 800bf94:	2e00      	cmp	r6, #0
 800bf96:	da2a      	bge.n	800bfee <rint+0x72>
 800bf98:	004a      	lsls	r2, r1, #1
 800bf9a:	0852      	lsrs	r2, r2, #1
 800bf9c:	4302      	orrs	r2, r0
 800bf9e:	d024      	beq.n	800bfea <rint+0x6e>
 800bfa0:	030a      	lsls	r2, r1, #12
 800bfa2:	0b12      	lsrs	r2, r2, #12
 800bfa4:	4302      	orrs	r2, r0
 800bfa6:	4253      	negs	r3, r2
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	2280      	movs	r2, #128	; 0x80
 800bfac:	0c4d      	lsrs	r5, r1, #17
 800bfae:	0312      	lsls	r2, r2, #12
 800bfb0:	0b1b      	lsrs	r3, r3, #12
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	046d      	lsls	r5, r5, #17
 800bfb6:	432b      	orrs	r3, r5
 800bfb8:	0019      	movs	r1, r3
 800bfba:	4b31      	ldr	r3, [pc, #196]	; (800c080 <rint+0x104>)
 800bfbc:	00e2      	lsls	r2, r4, #3
 800bfbe:	189b      	adds	r3, r3, r2
 800bfc0:	681e      	ldr	r6, [r3, #0]
 800bfc2:	685f      	ldr	r7, [r3, #4]
 800bfc4:	0002      	movs	r2, r0
 800bfc6:	000b      	movs	r3, r1
 800bfc8:	0030      	movs	r0, r6
 800bfca:	0039      	movs	r1, r7
 800bfcc:	f7f4 fe08 	bl	8000be0 <__aeabi_dadd>
 800bfd0:	9002      	str	r0, [sp, #8]
 800bfd2:	9103      	str	r1, [sp, #12]
 800bfd4:	9802      	ldr	r0, [sp, #8]
 800bfd6:	9903      	ldr	r1, [sp, #12]
 800bfd8:	003b      	movs	r3, r7
 800bfda:	0032      	movs	r2, r6
 800bfdc:	f7f5 ff98 	bl	8001f10 <__aeabi_dsub>
 800bfe0:	004b      	lsls	r3, r1, #1
 800bfe2:	085b      	lsrs	r3, r3, #1
 800bfe4:	07e4      	lsls	r4, r4, #31
 800bfe6:	4323      	orrs	r3, r4
 800bfe8:	0019      	movs	r1, r3
 800bfea:	b005      	add	sp, #20
 800bfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfee:	4a25      	ldr	r2, [pc, #148]	; (800c084 <rint+0x108>)
 800bff0:	4132      	asrs	r2, r6
 800bff2:	0017      	movs	r7, r2
 800bff4:	400f      	ands	r7, r1
 800bff6:	4307      	orrs	r7, r0
 800bff8:	d0f7      	beq.n	800bfea <rint+0x6e>
 800bffa:	0852      	lsrs	r2, r2, #1
 800bffc:	0011      	movs	r1, r2
 800bffe:	4029      	ands	r1, r5
 800c000:	430b      	orrs	r3, r1
 800c002:	d00a      	beq.n	800c01a <rint+0x9e>
 800c004:	2300      	movs	r3, #0
 800c006:	2e13      	cmp	r6, #19
 800c008:	d101      	bne.n	800c00e <rint+0x92>
 800c00a:	2380      	movs	r3, #128	; 0x80
 800c00c:	061b      	lsls	r3, r3, #24
 800c00e:	2780      	movs	r7, #128	; 0x80
 800c010:	02ff      	lsls	r7, r7, #11
 800c012:	4137      	asrs	r7, r6
 800c014:	4395      	bics	r5, r2
 800c016:	432f      	orrs	r7, r5
 800c018:	9701      	str	r7, [sp, #4]
 800c01a:	9901      	ldr	r1, [sp, #4]
 800c01c:	001a      	movs	r2, r3
 800c01e:	000b      	movs	r3, r1
 800c020:	4917      	ldr	r1, [pc, #92]	; (800c080 <rint+0x104>)
 800c022:	00e4      	lsls	r4, r4, #3
 800c024:	190c      	adds	r4, r1, r4
 800c026:	6865      	ldr	r5, [r4, #4]
 800c028:	6824      	ldr	r4, [r4, #0]
 800c02a:	0020      	movs	r0, r4
 800c02c:	0029      	movs	r1, r5
 800c02e:	f7f4 fdd7 	bl	8000be0 <__aeabi_dadd>
 800c032:	9002      	str	r0, [sp, #8]
 800c034:	9103      	str	r1, [sp, #12]
 800c036:	9802      	ldr	r0, [sp, #8]
 800c038:	9903      	ldr	r1, [sp, #12]
 800c03a:	0022      	movs	r2, r4
 800c03c:	002b      	movs	r3, r5
 800c03e:	f7f5 ff67 	bl	8001f10 <__aeabi_dsub>
 800c042:	e7d2      	b.n	800bfea <rint+0x6e>
 800c044:	2e33      	cmp	r6, #51	; 0x33
 800c046:	dd08      	ble.n	800c05a <rint+0xde>
 800c048:	2380      	movs	r3, #128	; 0x80
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	429e      	cmp	r6, r3
 800c04e:	d1cc      	bne.n	800bfea <rint+0x6e>
 800c050:	0002      	movs	r2, r0
 800c052:	000b      	movs	r3, r1
 800c054:	f7f4 fdc4 	bl	8000be0 <__aeabi_dadd>
 800c058:	e7c7      	b.n	800bfea <rint+0x6e>
 800c05a:	2601      	movs	r6, #1
 800c05c:	4d0a      	ldr	r5, [pc, #40]	; (800c088 <rint+0x10c>)
 800c05e:	4276      	negs	r6, r6
 800c060:	1952      	adds	r2, r2, r5
 800c062:	40d6      	lsrs	r6, r2
 800c064:	4206      	tst	r6, r0
 800c066:	d0c0      	beq.n	800bfea <rint+0x6e>
 800c068:	0876      	lsrs	r6, r6, #1
 800c06a:	4206      	tst	r6, r0
 800c06c:	d0d5      	beq.n	800c01a <rint+0x9e>
 800c06e:	2180      	movs	r1, #128	; 0x80
 800c070:	05c9      	lsls	r1, r1, #23
 800c072:	4111      	asrs	r1, r2
 800c074:	43b3      	bics	r3, r6
 800c076:	430b      	orrs	r3, r1
 800c078:	e7cf      	b.n	800c01a <rint+0x9e>
 800c07a:	46c0      	nop			; (mov r8, r8)
 800c07c:	fffffc01 	.word	0xfffffc01
 800c080:	0800c690 	.word	0x0800c690
 800c084:	000fffff 	.word	0x000fffff
 800c088:	fffffbed 	.word	0xfffffbed

0800c08c <scalbn>:
 800c08c:	004b      	lsls	r3, r1, #1
 800c08e:	b570      	push	{r4, r5, r6, lr}
 800c090:	0d5b      	lsrs	r3, r3, #21
 800c092:	0014      	movs	r4, r2
 800c094:	000a      	movs	r2, r1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10d      	bne.n	800c0b6 <scalbn+0x2a>
 800c09a:	004b      	lsls	r3, r1, #1
 800c09c:	085b      	lsrs	r3, r3, #1
 800c09e:	4303      	orrs	r3, r0
 800c0a0:	d010      	beq.n	800c0c4 <scalbn+0x38>
 800c0a2:	4b21      	ldr	r3, [pc, #132]	; (800c128 <scalbn+0x9c>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f7f5 fcc1 	bl	8001a2c <__aeabi_dmul>
 800c0aa:	4b20      	ldr	r3, [pc, #128]	; (800c12c <scalbn+0xa0>)
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	da0a      	bge.n	800c0c6 <scalbn+0x3a>
 800c0b0:	4a1f      	ldr	r2, [pc, #124]	; (800c130 <scalbn+0xa4>)
 800c0b2:	4b20      	ldr	r3, [pc, #128]	; (800c134 <scalbn+0xa8>)
 800c0b4:	e017      	b.n	800c0e6 <scalbn+0x5a>
 800c0b6:	4d20      	ldr	r5, [pc, #128]	; (800c138 <scalbn+0xac>)
 800c0b8:	42ab      	cmp	r3, r5
 800c0ba:	d108      	bne.n	800c0ce <scalbn+0x42>
 800c0bc:	0002      	movs	r2, r0
 800c0be:	000b      	movs	r3, r1
 800c0c0:	f7f4 fd8e 	bl	8000be0 <__aeabi_dadd>
 800c0c4:	bd70      	pop	{r4, r5, r6, pc}
 800c0c6:	000a      	movs	r2, r1
 800c0c8:	004b      	lsls	r3, r1, #1
 800c0ca:	0d5b      	lsrs	r3, r3, #21
 800c0cc:	3b36      	subs	r3, #54	; 0x36
 800c0ce:	4d1b      	ldr	r5, [pc, #108]	; (800c13c <scalbn+0xb0>)
 800c0d0:	18e3      	adds	r3, r4, r3
 800c0d2:	42ab      	cmp	r3, r5
 800c0d4:	dd0a      	ble.n	800c0ec <scalbn+0x60>
 800c0d6:	0002      	movs	r2, r0
 800c0d8:	000b      	movs	r3, r1
 800c0da:	4819      	ldr	r0, [pc, #100]	; (800c140 <scalbn+0xb4>)
 800c0dc:	4919      	ldr	r1, [pc, #100]	; (800c144 <scalbn+0xb8>)
 800c0de:	f000 f839 	bl	800c154 <copysign>
 800c0e2:	4a17      	ldr	r2, [pc, #92]	; (800c140 <scalbn+0xb4>)
 800c0e4:	4b17      	ldr	r3, [pc, #92]	; (800c144 <scalbn+0xb8>)
 800c0e6:	f7f5 fca1 	bl	8001a2c <__aeabi_dmul>
 800c0ea:	e7eb      	b.n	800c0c4 <scalbn+0x38>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dd05      	ble.n	800c0fc <scalbn+0x70>
 800c0f0:	4c15      	ldr	r4, [pc, #84]	; (800c148 <scalbn+0xbc>)
 800c0f2:	051b      	lsls	r3, r3, #20
 800c0f4:	4022      	ands	r2, r4
 800c0f6:	431a      	orrs	r2, r3
 800c0f8:	0011      	movs	r1, r2
 800c0fa:	e7e3      	b.n	800c0c4 <scalbn+0x38>
 800c0fc:	001d      	movs	r5, r3
 800c0fe:	3535      	adds	r5, #53	; 0x35
 800c100:	da09      	bge.n	800c116 <scalbn+0x8a>
 800c102:	4b12      	ldr	r3, [pc, #72]	; (800c14c <scalbn+0xc0>)
 800c104:	0002      	movs	r2, r0
 800c106:	429c      	cmp	r4, r3
 800c108:	dce6      	bgt.n	800c0d8 <scalbn+0x4c>
 800c10a:	000b      	movs	r3, r1
 800c10c:	4808      	ldr	r0, [pc, #32]	; (800c130 <scalbn+0xa4>)
 800c10e:	4909      	ldr	r1, [pc, #36]	; (800c134 <scalbn+0xa8>)
 800c110:	f000 f820 	bl	800c154 <copysign>
 800c114:	e7cc      	b.n	800c0b0 <scalbn+0x24>
 800c116:	4c0c      	ldr	r4, [pc, #48]	; (800c148 <scalbn+0xbc>)
 800c118:	3336      	adds	r3, #54	; 0x36
 800c11a:	4022      	ands	r2, r4
 800c11c:	051b      	lsls	r3, r3, #20
 800c11e:	4313      	orrs	r3, r2
 800c120:	0019      	movs	r1, r3
 800c122:	2200      	movs	r2, #0
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <scalbn+0xc4>)
 800c126:	e7de      	b.n	800c0e6 <scalbn+0x5a>
 800c128:	43500000 	.word	0x43500000
 800c12c:	ffff3cb0 	.word	0xffff3cb0
 800c130:	c2f8f359 	.word	0xc2f8f359
 800c134:	01a56e1f 	.word	0x01a56e1f
 800c138:	000007ff 	.word	0x000007ff
 800c13c:	000007fe 	.word	0x000007fe
 800c140:	8800759c 	.word	0x8800759c
 800c144:	7e37e43c 	.word	0x7e37e43c
 800c148:	800fffff 	.word	0x800fffff
 800c14c:	0000c350 	.word	0x0000c350
 800c150:	3c900000 	.word	0x3c900000

0800c154 <copysign>:
 800c154:	b530      	push	{r4, r5, lr}
 800c156:	004a      	lsls	r2, r1, #1
 800c158:	0fdb      	lsrs	r3, r3, #31
 800c15a:	07db      	lsls	r3, r3, #31
 800c15c:	0852      	lsrs	r2, r2, #1
 800c15e:	431a      	orrs	r2, r3
 800c160:	0011      	movs	r1, r2
 800c162:	bd30      	pop	{r4, r5, pc}

0800c164 <_init>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	46c0      	nop			; (mov r8, r8)
 800c168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16a:	bc08      	pop	{r3}
 800c16c:	469e      	mov	lr, r3
 800c16e:	4770      	bx	lr

0800c170 <_fini>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	46c0      	nop			; (mov r8, r8)
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr
