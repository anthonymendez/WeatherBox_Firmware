
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a10  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003b6c  08003b6c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b6c  08003b6c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000004  08003b78  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003b78  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089c4  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f1  00000000  00000000  000289f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  00029ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002a868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013682  00000000  00000000  0002b130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f03  00000000  00000000  0003e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b055  00000000  00000000  000456b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c070a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002290  00000000  00000000  000c0788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ab8 	.word	0x08003ab8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003ab8 	.word	0x08003ab8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	46de      	mov	lr, fp
 8000226:	464e      	mov	r6, r9
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4683      	mov	fp, r0
 800022e:	0007      	movs	r7, r0
 8000230:	030e      	lsls	r6, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	b085      	sub	sp, #20
 8000236:	4692      	mov	sl, r2
 8000238:	001c      	movs	r4, r3
 800023a:	0b36      	lsrs	r6, r6, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fcd      	lsrs	r5, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d100      	bne.n	8000246 <__aeabi_ddiv+0x26>
 8000244:	e09d      	b.n	8000382 <__aeabi_ddiv+0x162>
 8000246:	4b95      	ldr	r3, [pc, #596]	; (800049c <__aeabi_ddiv+0x27c>)
 8000248:	4298      	cmp	r0, r3
 800024a:	d039      	beq.n	80002c0 <__aeabi_ddiv+0xa0>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	00f6      	lsls	r6, r6, #3
 8000250:	041b      	lsls	r3, r3, #16
 8000252:	431e      	orrs	r6, r3
 8000254:	4a92      	ldr	r2, [pc, #584]	; (80004a0 <__aeabi_ddiv+0x280>)
 8000256:	0f7b      	lsrs	r3, r7, #29
 8000258:	4333      	orrs	r3, r6
 800025a:	4699      	mov	r9, r3
 800025c:	4694      	mov	ip, r2
 800025e:	0003      	movs	r3, r0
 8000260:	4463      	add	r3, ip
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2300      	movs	r3, #0
 8000266:	2600      	movs	r6, #0
 8000268:	00ff      	lsls	r7, r7, #3
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	0323      	lsls	r3, r4, #12
 800026e:	0b1b      	lsrs	r3, r3, #12
 8000270:	4698      	mov	r8, r3
 8000272:	0063      	lsls	r3, r4, #1
 8000274:	0fe4      	lsrs	r4, r4, #31
 8000276:	4652      	mov	r2, sl
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	9401      	str	r4, [sp, #4]
 800027c:	d100      	bne.n	8000280 <__aeabi_ddiv+0x60>
 800027e:	e0b3      	b.n	80003e8 <__aeabi_ddiv+0x1c8>
 8000280:	4986      	ldr	r1, [pc, #536]	; (800049c <__aeabi_ddiv+0x27c>)
 8000282:	428b      	cmp	r3, r1
 8000284:	d100      	bne.n	8000288 <__aeabi_ddiv+0x68>
 8000286:	e09e      	b.n	80003c6 <__aeabi_ddiv+0x1a6>
 8000288:	4642      	mov	r2, r8
 800028a:	00d1      	lsls	r1, r2, #3
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	430a      	orrs	r2, r1
 8000292:	4651      	mov	r1, sl
 8000294:	0f49      	lsrs	r1, r1, #29
 8000296:	4311      	orrs	r1, r2
 8000298:	468b      	mov	fp, r1
 800029a:	4981      	ldr	r1, [pc, #516]	; (80004a0 <__aeabi_ddiv+0x280>)
 800029c:	4652      	mov	r2, sl
 800029e:	468c      	mov	ip, r1
 80002a0:	9900      	ldr	r1, [sp, #0]
 80002a2:	4463      	add	r3, ip
 80002a4:	1acb      	subs	r3, r1, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	00d2      	lsls	r2, r2, #3
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	002b      	movs	r3, r5
 80002ae:	4063      	eors	r3, r4
 80002b0:	469a      	mov	sl, r3
 80002b2:	2e0f      	cmp	r6, #15
 80002b4:	d900      	bls.n	80002b8 <__aeabi_ddiv+0x98>
 80002b6:	e105      	b.n	80004c4 <__aeabi_ddiv+0x2a4>
 80002b8:	4b7a      	ldr	r3, [pc, #488]	; (80004a4 <__aeabi_ddiv+0x284>)
 80002ba:	00b6      	lsls	r6, r6, #2
 80002bc:	599b      	ldr	r3, [r3, r6]
 80002be:	469f      	mov	pc, r3
 80002c0:	465b      	mov	r3, fp
 80002c2:	4333      	orrs	r3, r6
 80002c4:	4699      	mov	r9, r3
 80002c6:	d000      	beq.n	80002ca <__aeabi_ddiv+0xaa>
 80002c8:	e0b8      	b.n	800043c <__aeabi_ddiv+0x21c>
 80002ca:	2302      	movs	r3, #2
 80002cc:	2608      	movs	r6, #8
 80002ce:	2700      	movs	r7, #0
 80002d0:	9000      	str	r0, [sp, #0]
 80002d2:	9302      	str	r3, [sp, #8]
 80002d4:	e7ca      	b.n	800026c <__aeabi_ddiv+0x4c>
 80002d6:	46cb      	mov	fp, r9
 80002d8:	003a      	movs	r2, r7
 80002da:	9902      	ldr	r1, [sp, #8]
 80002dc:	9501      	str	r5, [sp, #4]
 80002de:	9b01      	ldr	r3, [sp, #4]
 80002e0:	469a      	mov	sl, r3
 80002e2:	2902      	cmp	r1, #2
 80002e4:	d027      	beq.n	8000336 <__aeabi_ddiv+0x116>
 80002e6:	2903      	cmp	r1, #3
 80002e8:	d100      	bne.n	80002ec <__aeabi_ddiv+0xcc>
 80002ea:	e280      	b.n	80007ee <__aeabi_ddiv+0x5ce>
 80002ec:	2901      	cmp	r1, #1
 80002ee:	d044      	beq.n	800037a <__aeabi_ddiv+0x15a>
 80002f0:	496d      	ldr	r1, [pc, #436]	; (80004a8 <__aeabi_ddiv+0x288>)
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	468c      	mov	ip, r1
 80002f6:	4463      	add	r3, ip
 80002f8:	001c      	movs	r4, r3
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	dd38      	ble.n	8000370 <__aeabi_ddiv+0x150>
 80002fe:	0753      	lsls	r3, r2, #29
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xe4>
 8000302:	e213      	b.n	800072c <__aeabi_ddiv+0x50c>
 8000304:	08d2      	lsrs	r2, r2, #3
 8000306:	465b      	mov	r3, fp
 8000308:	01db      	lsls	r3, r3, #7
 800030a:	d509      	bpl.n	8000320 <__aeabi_ddiv+0x100>
 800030c:	4659      	mov	r1, fp
 800030e:	4b67      	ldr	r3, [pc, #412]	; (80004ac <__aeabi_ddiv+0x28c>)
 8000310:	4019      	ands	r1, r3
 8000312:	468b      	mov	fp, r1
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	00c9      	lsls	r1, r1, #3
 8000318:	468c      	mov	ip, r1
 800031a:	9b00      	ldr	r3, [sp, #0]
 800031c:	4463      	add	r3, ip
 800031e:	001c      	movs	r4, r3
 8000320:	4b63      	ldr	r3, [pc, #396]	; (80004b0 <__aeabi_ddiv+0x290>)
 8000322:	429c      	cmp	r4, r3
 8000324:	dc07      	bgt.n	8000336 <__aeabi_ddiv+0x116>
 8000326:	465b      	mov	r3, fp
 8000328:	0564      	lsls	r4, r4, #21
 800032a:	075f      	lsls	r7, r3, #29
 800032c:	025b      	lsls	r3, r3, #9
 800032e:	4317      	orrs	r7, r2
 8000330:	0b1b      	lsrs	r3, r3, #12
 8000332:	0d62      	lsrs	r2, r4, #21
 8000334:	e002      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000336:	2300      	movs	r3, #0
 8000338:	2700      	movs	r7, #0
 800033a:	4a58      	ldr	r2, [pc, #352]	; (800049c <__aeabi_ddiv+0x27c>)
 800033c:	2100      	movs	r1, #0
 800033e:	031b      	lsls	r3, r3, #12
 8000340:	0b1c      	lsrs	r4, r3, #12
 8000342:	0d0b      	lsrs	r3, r1, #20
 8000344:	051b      	lsls	r3, r3, #20
 8000346:	4323      	orrs	r3, r4
 8000348:	0514      	lsls	r4, r2, #20
 800034a:	4a5a      	ldr	r2, [pc, #360]	; (80004b4 <__aeabi_ddiv+0x294>)
 800034c:	0038      	movs	r0, r7
 800034e:	4013      	ands	r3, r2
 8000350:	431c      	orrs	r4, r3
 8000352:	4653      	mov	r3, sl
 8000354:	0064      	lsls	r4, r4, #1
 8000356:	07db      	lsls	r3, r3, #31
 8000358:	0864      	lsrs	r4, r4, #1
 800035a:	431c      	orrs	r4, r3
 800035c:	0021      	movs	r1, r4
 800035e:	b005      	add	sp, #20
 8000360:	bc3c      	pop	{r2, r3, r4, r5}
 8000362:	4690      	mov	r8, r2
 8000364:	4699      	mov	r9, r3
 8000366:	46a2      	mov	sl, r4
 8000368:	46ab      	mov	fp, r5
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	2201      	movs	r2, #1
 800036e:	4252      	negs	r2, r2
 8000370:	2301      	movs	r3, #1
 8000372:	1b1b      	subs	r3, r3, r4
 8000374:	2b38      	cmp	r3, #56	; 0x38
 8000376:	dc00      	bgt.n	800037a <__aeabi_ddiv+0x15a>
 8000378:	e1ad      	b.n	80006d6 <__aeabi_ddiv+0x4b6>
 800037a:	2200      	movs	r2, #0
 800037c:	2300      	movs	r3, #0
 800037e:	2700      	movs	r7, #0
 8000380:	e7dc      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000382:	465b      	mov	r3, fp
 8000384:	4333      	orrs	r3, r6
 8000386:	4699      	mov	r9, r3
 8000388:	d05e      	beq.n	8000448 <__aeabi_ddiv+0x228>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d100      	bne.n	8000390 <__aeabi_ddiv+0x170>
 800038e:	e18a      	b.n	80006a6 <__aeabi_ddiv+0x486>
 8000390:	0030      	movs	r0, r6
 8000392:	f000 fd77 	bl	8000e84 <__clzsi2>
 8000396:	0003      	movs	r3, r0
 8000398:	3b0b      	subs	r3, #11
 800039a:	2b1c      	cmp	r3, #28
 800039c:	dd00      	ble.n	80003a0 <__aeabi_ddiv+0x180>
 800039e:	e17b      	b.n	8000698 <__aeabi_ddiv+0x478>
 80003a0:	221d      	movs	r2, #29
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	465a      	mov	r2, fp
 80003a6:	0001      	movs	r1, r0
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	3908      	subs	r1, #8
 80003ac:	408e      	lsls	r6, r1
 80003ae:	0013      	movs	r3, r2
 80003b0:	465f      	mov	r7, fp
 80003b2:	4333      	orrs	r3, r6
 80003b4:	4699      	mov	r9, r3
 80003b6:	408f      	lsls	r7, r1
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <__aeabi_ddiv+0x298>)
 80003ba:	2600      	movs	r6, #0
 80003bc:	1a1b      	subs	r3, r3, r0
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	9302      	str	r3, [sp, #8]
 80003c4:	e752      	b.n	800026c <__aeabi_ddiv+0x4c>
 80003c6:	4641      	mov	r1, r8
 80003c8:	4653      	mov	r3, sl
 80003ca:	430b      	orrs	r3, r1
 80003cc:	493b      	ldr	r1, [pc, #236]	; (80004bc <__aeabi_ddiv+0x29c>)
 80003ce:	469b      	mov	fp, r3
 80003d0:	468c      	mov	ip, r1
 80003d2:	9b00      	ldr	r3, [sp, #0]
 80003d4:	4463      	add	r3, ip
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	465b      	mov	r3, fp
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d13b      	bne.n	8000456 <__aeabi_ddiv+0x236>
 80003de:	2302      	movs	r3, #2
 80003e0:	2200      	movs	r2, #0
 80003e2:	431e      	orrs	r6, r3
 80003e4:	2102      	movs	r1, #2
 80003e6:	e761      	b.n	80002ac <__aeabi_ddiv+0x8c>
 80003e8:	4643      	mov	r3, r8
 80003ea:	4313      	orrs	r3, r2
 80003ec:	469b      	mov	fp, r3
 80003ee:	d037      	beq.n	8000460 <__aeabi_ddiv+0x240>
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d100      	bne.n	80003f8 <__aeabi_ddiv+0x1d8>
 80003f6:	e162      	b.n	80006be <__aeabi_ddiv+0x49e>
 80003f8:	4640      	mov	r0, r8
 80003fa:	f000 fd43 	bl	8000e84 <__clzsi2>
 80003fe:	0003      	movs	r3, r0
 8000400:	3b0b      	subs	r3, #11
 8000402:	2b1c      	cmp	r3, #28
 8000404:	dd00      	ble.n	8000408 <__aeabi_ddiv+0x1e8>
 8000406:	e153      	b.n	80006b0 <__aeabi_ddiv+0x490>
 8000408:	0002      	movs	r2, r0
 800040a:	4641      	mov	r1, r8
 800040c:	3a08      	subs	r2, #8
 800040e:	4091      	lsls	r1, r2
 8000410:	4688      	mov	r8, r1
 8000412:	211d      	movs	r1, #29
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	4651      	mov	r1, sl
 8000418:	40d9      	lsrs	r1, r3
 800041a:	000b      	movs	r3, r1
 800041c:	4641      	mov	r1, r8
 800041e:	430b      	orrs	r3, r1
 8000420:	469b      	mov	fp, r3
 8000422:	4653      	mov	r3, sl
 8000424:	4093      	lsls	r3, r2
 8000426:	001a      	movs	r2, r3
 8000428:	9b00      	ldr	r3, [sp, #0]
 800042a:	4925      	ldr	r1, [pc, #148]	; (80004c0 <__aeabi_ddiv+0x2a0>)
 800042c:	469c      	mov	ip, r3
 800042e:	4460      	add	r0, ip
 8000430:	0003      	movs	r3, r0
 8000432:	468c      	mov	ip, r1
 8000434:	4463      	add	r3, ip
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2100      	movs	r1, #0
 800043a:	e737      	b.n	80002ac <__aeabi_ddiv+0x8c>
 800043c:	2303      	movs	r3, #3
 800043e:	46b1      	mov	r9, r6
 8000440:	9000      	str	r0, [sp, #0]
 8000442:	260c      	movs	r6, #12
 8000444:	9302      	str	r3, [sp, #8]
 8000446:	e711      	b.n	800026c <__aeabi_ddiv+0x4c>
 8000448:	2300      	movs	r3, #0
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	2604      	movs	r6, #4
 8000450:	2700      	movs	r7, #0
 8000452:	9302      	str	r3, [sp, #8]
 8000454:	e70a      	b.n	800026c <__aeabi_ddiv+0x4c>
 8000456:	2303      	movs	r3, #3
 8000458:	46c3      	mov	fp, r8
 800045a:	431e      	orrs	r6, r3
 800045c:	2103      	movs	r1, #3
 800045e:	e725      	b.n	80002ac <__aeabi_ddiv+0x8c>
 8000460:	3301      	adds	r3, #1
 8000462:	431e      	orrs	r6, r3
 8000464:	2200      	movs	r2, #0
 8000466:	2101      	movs	r1, #1
 8000468:	e720      	b.n	80002ac <__aeabi_ddiv+0x8c>
 800046a:	2300      	movs	r3, #0
 800046c:	469a      	mov	sl, r3
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	2700      	movs	r7, #0
 8000472:	031b      	lsls	r3, r3, #12
 8000474:	4a09      	ldr	r2, [pc, #36]	; (800049c <__aeabi_ddiv+0x27c>)
 8000476:	e761      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	4649      	mov	r1, r9
 800047c:	031b      	lsls	r3, r3, #12
 800047e:	4219      	tst	r1, r3
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x264>
 8000482:	e0e2      	b.n	800064a <__aeabi_ddiv+0x42a>
 8000484:	4659      	mov	r1, fp
 8000486:	4219      	tst	r1, r3
 8000488:	d000      	beq.n	800048c <__aeabi_ddiv+0x26c>
 800048a:	e0de      	b.n	800064a <__aeabi_ddiv+0x42a>
 800048c:	430b      	orrs	r3, r1
 800048e:	031b      	lsls	r3, r3, #12
 8000490:	0017      	movs	r7, r2
 8000492:	0b1b      	lsrs	r3, r3, #12
 8000494:	46a2      	mov	sl, r4
 8000496:	4a01      	ldr	r2, [pc, #4]	; (800049c <__aeabi_ddiv+0x27c>)
 8000498:	e750      	b.n	800033c <__aeabi_ddiv+0x11c>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	000007ff 	.word	0x000007ff
 80004a0:	fffffc01 	.word	0xfffffc01
 80004a4:	08003ad0 	.word	0x08003ad0
 80004a8:	000003ff 	.word	0x000003ff
 80004ac:	feffffff 	.word	0xfeffffff
 80004b0:	000007fe 	.word	0x000007fe
 80004b4:	800fffff 	.word	0x800fffff
 80004b8:	fffffc0d 	.word	0xfffffc0d
 80004bc:	fffff801 	.word	0xfffff801
 80004c0:	000003f3 	.word	0x000003f3
 80004c4:	45d9      	cmp	r9, fp
 80004c6:	d900      	bls.n	80004ca <__aeabi_ddiv+0x2aa>
 80004c8:	e0cb      	b.n	8000662 <__aeabi_ddiv+0x442>
 80004ca:	d100      	bne.n	80004ce <__aeabi_ddiv+0x2ae>
 80004cc:	e0c6      	b.n	800065c <__aeabi_ddiv+0x43c>
 80004ce:	003c      	movs	r4, r7
 80004d0:	4648      	mov	r0, r9
 80004d2:	2700      	movs	r7, #0
 80004d4:	9b00      	ldr	r3, [sp, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	465b      	mov	r3, fp
 80004dc:	0e16      	lsrs	r6, r2, #24
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	431e      	orrs	r6, r3
 80004e2:	0213      	lsls	r3, r2, #8
 80004e4:	4698      	mov	r8, r3
 80004e6:	0433      	lsls	r3, r6, #16
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	4699      	mov	r9, r3
 80004ec:	0c31      	lsrs	r1, r6, #16
 80004ee:	9101      	str	r1, [sp, #4]
 80004f0:	f7ff fe90 	bl	8000214 <__aeabi_uidivmod>
 80004f4:	464a      	mov	r2, r9
 80004f6:	4342      	muls	r2, r0
 80004f8:	040b      	lsls	r3, r1, #16
 80004fa:	0c21      	lsrs	r1, r4, #16
 80004fc:	0005      	movs	r5, r0
 80004fe:	4319      	orrs	r1, r3
 8000500:	428a      	cmp	r2, r1
 8000502:	d907      	bls.n	8000514 <__aeabi_ddiv+0x2f4>
 8000504:	1989      	adds	r1, r1, r6
 8000506:	3d01      	subs	r5, #1
 8000508:	428e      	cmp	r6, r1
 800050a:	d803      	bhi.n	8000514 <__aeabi_ddiv+0x2f4>
 800050c:	428a      	cmp	r2, r1
 800050e:	d901      	bls.n	8000514 <__aeabi_ddiv+0x2f4>
 8000510:	1e85      	subs	r5, r0, #2
 8000512:	1989      	adds	r1, r1, r6
 8000514:	1a88      	subs	r0, r1, r2
 8000516:	9901      	ldr	r1, [sp, #4]
 8000518:	f7ff fe7c 	bl	8000214 <__aeabi_uidivmod>
 800051c:	0409      	lsls	r1, r1, #16
 800051e:	468c      	mov	ip, r1
 8000520:	464a      	mov	r2, r9
 8000522:	0421      	lsls	r1, r4, #16
 8000524:	4664      	mov	r4, ip
 8000526:	4342      	muls	r2, r0
 8000528:	0c09      	lsrs	r1, r1, #16
 800052a:	0003      	movs	r3, r0
 800052c:	4321      	orrs	r1, r4
 800052e:	428a      	cmp	r2, r1
 8000530:	d904      	bls.n	800053c <__aeabi_ddiv+0x31c>
 8000532:	1989      	adds	r1, r1, r6
 8000534:	3b01      	subs	r3, #1
 8000536:	428e      	cmp	r6, r1
 8000538:	d800      	bhi.n	800053c <__aeabi_ddiv+0x31c>
 800053a:	e0f1      	b.n	8000720 <__aeabi_ddiv+0x500>
 800053c:	042d      	lsls	r5, r5, #16
 800053e:	431d      	orrs	r5, r3
 8000540:	46ab      	mov	fp, r5
 8000542:	4643      	mov	r3, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	4642      	mov	r2, r8
 8000548:	0c28      	lsrs	r0, r5, #16
 800054a:	0412      	lsls	r2, r2, #16
 800054c:	0c1d      	lsrs	r5, r3, #16
 800054e:	465b      	mov	r3, fp
 8000550:	0c14      	lsrs	r4, r2, #16
 8000552:	0022      	movs	r2, r4
 8000554:	041b      	lsls	r3, r3, #16
 8000556:	0c1b      	lsrs	r3, r3, #16
 8000558:	435a      	muls	r2, r3
 800055a:	9403      	str	r4, [sp, #12]
 800055c:	436b      	muls	r3, r5
 800055e:	4344      	muls	r4, r0
 8000560:	9502      	str	r5, [sp, #8]
 8000562:	4368      	muls	r0, r5
 8000564:	191b      	adds	r3, r3, r4
 8000566:	0c15      	lsrs	r5, r2, #16
 8000568:	18eb      	adds	r3, r5, r3
 800056a:	429c      	cmp	r4, r3
 800056c:	d903      	bls.n	8000576 <__aeabi_ddiv+0x356>
 800056e:	2480      	movs	r4, #128	; 0x80
 8000570:	0264      	lsls	r4, r4, #9
 8000572:	46a4      	mov	ip, r4
 8000574:	4460      	add	r0, ip
 8000576:	0c1c      	lsrs	r4, r3, #16
 8000578:	0415      	lsls	r5, r2, #16
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	0c2d      	lsrs	r5, r5, #16
 800057e:	1820      	adds	r0, r4, r0
 8000580:	195d      	adds	r5, r3, r5
 8000582:	4281      	cmp	r1, r0
 8000584:	d377      	bcc.n	8000676 <__aeabi_ddiv+0x456>
 8000586:	d073      	beq.n	8000670 <__aeabi_ddiv+0x450>
 8000588:	1a0c      	subs	r4, r1, r0
 800058a:	4aa2      	ldr	r2, [pc, #648]	; (8000814 <__aeabi_ddiv+0x5f4>)
 800058c:	1b7d      	subs	r5, r7, r5
 800058e:	42af      	cmp	r7, r5
 8000590:	41bf      	sbcs	r7, r7
 8000592:	4694      	mov	ip, r2
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	427f      	negs	r7, r7
 8000598:	4463      	add	r3, ip
 800059a:	1be0      	subs	r0, r4, r7
 800059c:	001c      	movs	r4, r3
 800059e:	4286      	cmp	r6, r0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_ddiv+0x384>
 80005a2:	e0db      	b.n	800075c <__aeabi_ddiv+0x53c>
 80005a4:	9901      	ldr	r1, [sp, #4]
 80005a6:	f7ff fe35 	bl	8000214 <__aeabi_uidivmod>
 80005aa:	464a      	mov	r2, r9
 80005ac:	4342      	muls	r2, r0
 80005ae:	040b      	lsls	r3, r1, #16
 80005b0:	0c29      	lsrs	r1, r5, #16
 80005b2:	0007      	movs	r7, r0
 80005b4:	4319      	orrs	r1, r3
 80005b6:	428a      	cmp	r2, r1
 80005b8:	d907      	bls.n	80005ca <__aeabi_ddiv+0x3aa>
 80005ba:	1989      	adds	r1, r1, r6
 80005bc:	3f01      	subs	r7, #1
 80005be:	428e      	cmp	r6, r1
 80005c0:	d803      	bhi.n	80005ca <__aeabi_ddiv+0x3aa>
 80005c2:	428a      	cmp	r2, r1
 80005c4:	d901      	bls.n	80005ca <__aeabi_ddiv+0x3aa>
 80005c6:	1e87      	subs	r7, r0, #2
 80005c8:	1989      	adds	r1, r1, r6
 80005ca:	1a88      	subs	r0, r1, r2
 80005cc:	9901      	ldr	r1, [sp, #4]
 80005ce:	f7ff fe21 	bl	8000214 <__aeabi_uidivmod>
 80005d2:	0409      	lsls	r1, r1, #16
 80005d4:	464a      	mov	r2, r9
 80005d6:	4689      	mov	r9, r1
 80005d8:	0429      	lsls	r1, r5, #16
 80005da:	464d      	mov	r5, r9
 80005dc:	4342      	muls	r2, r0
 80005de:	0c09      	lsrs	r1, r1, #16
 80005e0:	0003      	movs	r3, r0
 80005e2:	4329      	orrs	r1, r5
 80005e4:	428a      	cmp	r2, r1
 80005e6:	d907      	bls.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005e8:	1989      	adds	r1, r1, r6
 80005ea:	3b01      	subs	r3, #1
 80005ec:	428e      	cmp	r6, r1
 80005ee:	d803      	bhi.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005f0:	428a      	cmp	r2, r1
 80005f2:	d901      	bls.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005f4:	1e83      	subs	r3, r0, #2
 80005f6:	1989      	adds	r1, r1, r6
 80005f8:	043f      	lsls	r7, r7, #16
 80005fa:	1a89      	subs	r1, r1, r2
 80005fc:	003a      	movs	r2, r7
 80005fe:	9f03      	ldr	r7, [sp, #12]
 8000600:	431a      	orrs	r2, r3
 8000602:	0038      	movs	r0, r7
 8000604:	0413      	lsls	r3, r2, #16
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	4358      	muls	r0, r3
 800060a:	4681      	mov	r9, r0
 800060c:	9802      	ldr	r0, [sp, #8]
 800060e:	0c15      	lsrs	r5, r2, #16
 8000610:	436f      	muls	r7, r5
 8000612:	4343      	muls	r3, r0
 8000614:	4345      	muls	r5, r0
 8000616:	4648      	mov	r0, r9
 8000618:	0c00      	lsrs	r0, r0, #16
 800061a:	4684      	mov	ip, r0
 800061c:	19db      	adds	r3, r3, r7
 800061e:	4463      	add	r3, ip
 8000620:	429f      	cmp	r7, r3
 8000622:	d903      	bls.n	800062c <__aeabi_ddiv+0x40c>
 8000624:	2080      	movs	r0, #128	; 0x80
 8000626:	0240      	lsls	r0, r0, #9
 8000628:	4684      	mov	ip, r0
 800062a:	4465      	add	r5, ip
 800062c:	4648      	mov	r0, r9
 800062e:	0c1f      	lsrs	r7, r3, #16
 8000630:	0400      	lsls	r0, r0, #16
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	0c00      	lsrs	r0, r0, #16
 8000636:	197d      	adds	r5, r7, r5
 8000638:	1818      	adds	r0, r3, r0
 800063a:	42a9      	cmp	r1, r5
 800063c:	d200      	bcs.n	8000640 <__aeabi_ddiv+0x420>
 800063e:	e084      	b.n	800074a <__aeabi_ddiv+0x52a>
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x424>
 8000642:	e07f      	b.n	8000744 <__aeabi_ddiv+0x524>
 8000644:	2301      	movs	r3, #1
 8000646:	431a      	orrs	r2, r3
 8000648:	e657      	b.n	80002fa <__aeabi_ddiv+0xda>
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	464a      	mov	r2, r9
 800064e:	031b      	lsls	r3, r3, #12
 8000650:	4313      	orrs	r3, r2
 8000652:	031b      	lsls	r3, r3, #12
 8000654:	0b1b      	lsrs	r3, r3, #12
 8000656:	46aa      	mov	sl, r5
 8000658:	4a6f      	ldr	r2, [pc, #444]	; (8000818 <__aeabi_ddiv+0x5f8>)
 800065a:	e66f      	b.n	800033c <__aeabi_ddiv+0x11c>
 800065c:	42ba      	cmp	r2, r7
 800065e:	d900      	bls.n	8000662 <__aeabi_ddiv+0x442>
 8000660:	e735      	b.n	80004ce <__aeabi_ddiv+0x2ae>
 8000662:	464b      	mov	r3, r9
 8000664:	07dc      	lsls	r4, r3, #31
 8000666:	0858      	lsrs	r0, r3, #1
 8000668:	087b      	lsrs	r3, r7, #1
 800066a:	431c      	orrs	r4, r3
 800066c:	07ff      	lsls	r7, r7, #31
 800066e:	e734      	b.n	80004da <__aeabi_ddiv+0x2ba>
 8000670:	2400      	movs	r4, #0
 8000672:	42af      	cmp	r7, r5
 8000674:	d289      	bcs.n	800058a <__aeabi_ddiv+0x36a>
 8000676:	4447      	add	r7, r8
 8000678:	4547      	cmp	r7, r8
 800067a:	41a4      	sbcs	r4, r4
 800067c:	465b      	mov	r3, fp
 800067e:	4264      	negs	r4, r4
 8000680:	19a4      	adds	r4, r4, r6
 8000682:	1864      	adds	r4, r4, r1
 8000684:	3b01      	subs	r3, #1
 8000686:	42a6      	cmp	r6, r4
 8000688:	d21e      	bcs.n	80006c8 <__aeabi_ddiv+0x4a8>
 800068a:	42a0      	cmp	r0, r4
 800068c:	d86d      	bhi.n	800076a <__aeabi_ddiv+0x54a>
 800068e:	d100      	bne.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e0b6      	b.n	8000800 <__aeabi_ddiv+0x5e0>
 8000692:	1a24      	subs	r4, r4, r0
 8000694:	469b      	mov	fp, r3
 8000696:	e778      	b.n	800058a <__aeabi_ddiv+0x36a>
 8000698:	0003      	movs	r3, r0
 800069a:	465a      	mov	r2, fp
 800069c:	3b28      	subs	r3, #40	; 0x28
 800069e:	409a      	lsls	r2, r3
 80006a0:	2700      	movs	r7, #0
 80006a2:	4691      	mov	r9, r2
 80006a4:	e688      	b.n	80003b8 <__aeabi_ddiv+0x198>
 80006a6:	4658      	mov	r0, fp
 80006a8:	f000 fbec 	bl	8000e84 <__clzsi2>
 80006ac:	3020      	adds	r0, #32
 80006ae:	e672      	b.n	8000396 <__aeabi_ddiv+0x176>
 80006b0:	0003      	movs	r3, r0
 80006b2:	4652      	mov	r2, sl
 80006b4:	3b28      	subs	r3, #40	; 0x28
 80006b6:	409a      	lsls	r2, r3
 80006b8:	4693      	mov	fp, r2
 80006ba:	2200      	movs	r2, #0
 80006bc:	e6b4      	b.n	8000428 <__aeabi_ddiv+0x208>
 80006be:	4650      	mov	r0, sl
 80006c0:	f000 fbe0 	bl	8000e84 <__clzsi2>
 80006c4:	3020      	adds	r0, #32
 80006c6:	e69a      	b.n	80003fe <__aeabi_ddiv+0x1de>
 80006c8:	42a6      	cmp	r6, r4
 80006ca:	d1e2      	bne.n	8000692 <__aeabi_ddiv+0x472>
 80006cc:	45b8      	cmp	r8, r7
 80006ce:	d9dc      	bls.n	800068a <__aeabi_ddiv+0x46a>
 80006d0:	1a34      	subs	r4, r6, r0
 80006d2:	469b      	mov	fp, r3
 80006d4:	e759      	b.n	800058a <__aeabi_ddiv+0x36a>
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	dc65      	bgt.n	80007a6 <__aeabi_ddiv+0x586>
 80006da:	4c50      	ldr	r4, [pc, #320]	; (800081c <__aeabi_ddiv+0x5fc>)
 80006dc:	9900      	ldr	r1, [sp, #0]
 80006de:	46a4      	mov	ip, r4
 80006e0:	465c      	mov	r4, fp
 80006e2:	4461      	add	r1, ip
 80006e4:	0008      	movs	r0, r1
 80006e6:	408c      	lsls	r4, r1
 80006e8:	0011      	movs	r1, r2
 80006ea:	4082      	lsls	r2, r0
 80006ec:	40d9      	lsrs	r1, r3
 80006ee:	1e50      	subs	r0, r2, #1
 80006f0:	4182      	sbcs	r2, r0
 80006f2:	430c      	orrs	r4, r1
 80006f4:	4314      	orrs	r4, r2
 80006f6:	465a      	mov	r2, fp
 80006f8:	40da      	lsrs	r2, r3
 80006fa:	0013      	movs	r3, r2
 80006fc:	0762      	lsls	r2, r4, #29
 80006fe:	d009      	beq.n	8000714 <__aeabi_ddiv+0x4f4>
 8000700:	220f      	movs	r2, #15
 8000702:	4022      	ands	r2, r4
 8000704:	2a04      	cmp	r2, #4
 8000706:	d005      	beq.n	8000714 <__aeabi_ddiv+0x4f4>
 8000708:	0022      	movs	r2, r4
 800070a:	1d14      	adds	r4, r2, #4
 800070c:	4294      	cmp	r4, r2
 800070e:	4189      	sbcs	r1, r1
 8000710:	4249      	negs	r1, r1
 8000712:	185b      	adds	r3, r3, r1
 8000714:	021a      	lsls	r2, r3, #8
 8000716:	d562      	bpl.n	80007de <__aeabi_ddiv+0x5be>
 8000718:	2201      	movs	r2, #1
 800071a:	2300      	movs	r3, #0
 800071c:	2700      	movs	r7, #0
 800071e:	e60d      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000720:	428a      	cmp	r2, r1
 8000722:	d800      	bhi.n	8000726 <__aeabi_ddiv+0x506>
 8000724:	e70a      	b.n	800053c <__aeabi_ddiv+0x31c>
 8000726:	1e83      	subs	r3, r0, #2
 8000728:	1989      	adds	r1, r1, r6
 800072a:	e707      	b.n	800053c <__aeabi_ddiv+0x31c>
 800072c:	230f      	movs	r3, #15
 800072e:	4013      	ands	r3, r2
 8000730:	2b04      	cmp	r3, #4
 8000732:	d100      	bne.n	8000736 <__aeabi_ddiv+0x516>
 8000734:	e5e6      	b.n	8000304 <__aeabi_ddiv+0xe4>
 8000736:	1d17      	adds	r7, r2, #4
 8000738:	4297      	cmp	r7, r2
 800073a:	4192      	sbcs	r2, r2
 800073c:	4253      	negs	r3, r2
 800073e:	449b      	add	fp, r3
 8000740:	08fa      	lsrs	r2, r7, #3
 8000742:	e5e0      	b.n	8000306 <__aeabi_ddiv+0xe6>
 8000744:	2800      	cmp	r0, #0
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0x52a>
 8000748:	e5d7      	b.n	80002fa <__aeabi_ddiv+0xda>
 800074a:	1871      	adds	r1, r6, r1
 800074c:	1e53      	subs	r3, r2, #1
 800074e:	42b1      	cmp	r1, r6
 8000750:	d327      	bcc.n	80007a2 <__aeabi_ddiv+0x582>
 8000752:	42a9      	cmp	r1, r5
 8000754:	d315      	bcc.n	8000782 <__aeabi_ddiv+0x562>
 8000756:	d058      	beq.n	800080a <__aeabi_ddiv+0x5ea>
 8000758:	001a      	movs	r2, r3
 800075a:	e773      	b.n	8000644 <__aeabi_ddiv+0x424>
 800075c:	2b00      	cmp	r3, #0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_ddiv+0x542>
 8000760:	e604      	b.n	800036c <__aeabi_ddiv+0x14c>
 8000762:	2301      	movs	r3, #1
 8000764:	2200      	movs	r2, #0
 8000766:	449b      	add	fp, r3
 8000768:	e5cd      	b.n	8000306 <__aeabi_ddiv+0xe6>
 800076a:	2302      	movs	r3, #2
 800076c:	4447      	add	r7, r8
 800076e:	4547      	cmp	r7, r8
 8000770:	4189      	sbcs	r1, r1
 8000772:	425b      	negs	r3, r3
 8000774:	469c      	mov	ip, r3
 8000776:	4249      	negs	r1, r1
 8000778:	1989      	adds	r1, r1, r6
 800077a:	190c      	adds	r4, r1, r4
 800077c:	44e3      	add	fp, ip
 800077e:	1a24      	subs	r4, r4, r0
 8000780:	e703      	b.n	800058a <__aeabi_ddiv+0x36a>
 8000782:	4643      	mov	r3, r8
 8000784:	005f      	lsls	r7, r3, #1
 8000786:	4547      	cmp	r7, r8
 8000788:	419b      	sbcs	r3, r3
 800078a:	46b8      	mov	r8, r7
 800078c:	425b      	negs	r3, r3
 800078e:	199e      	adds	r6, r3, r6
 8000790:	3a02      	subs	r2, #2
 8000792:	1989      	adds	r1, r1, r6
 8000794:	42a9      	cmp	r1, r5
 8000796:	d000      	beq.n	800079a <__aeabi_ddiv+0x57a>
 8000798:	e754      	b.n	8000644 <__aeabi_ddiv+0x424>
 800079a:	4540      	cmp	r0, r8
 800079c:	d000      	beq.n	80007a0 <__aeabi_ddiv+0x580>
 800079e:	e751      	b.n	8000644 <__aeabi_ddiv+0x424>
 80007a0:	e5ab      	b.n	80002fa <__aeabi_ddiv+0xda>
 80007a2:	001a      	movs	r2, r3
 80007a4:	e7f6      	b.n	8000794 <__aeabi_ddiv+0x574>
 80007a6:	211f      	movs	r1, #31
 80007a8:	465f      	mov	r7, fp
 80007aa:	4249      	negs	r1, r1
 80007ac:	1b0c      	subs	r4, r1, r4
 80007ae:	40e7      	lsrs	r7, r4
 80007b0:	2b20      	cmp	r3, #32
 80007b2:	d007      	beq.n	80007c4 <__aeabi_ddiv+0x5a4>
 80007b4:	491a      	ldr	r1, [pc, #104]	; (8000820 <__aeabi_ddiv+0x600>)
 80007b6:	9b00      	ldr	r3, [sp, #0]
 80007b8:	468c      	mov	ip, r1
 80007ba:	4463      	add	r3, ip
 80007bc:	0018      	movs	r0, r3
 80007be:	465b      	mov	r3, fp
 80007c0:	4083      	lsls	r3, r0
 80007c2:	431a      	orrs	r2, r3
 80007c4:	1e50      	subs	r0, r2, #1
 80007c6:	4182      	sbcs	r2, r0
 80007c8:	433a      	orrs	r2, r7
 80007ca:	2707      	movs	r7, #7
 80007cc:	2300      	movs	r3, #0
 80007ce:	4017      	ands	r7, r2
 80007d0:	d009      	beq.n	80007e6 <__aeabi_ddiv+0x5c6>
 80007d2:	210f      	movs	r1, #15
 80007d4:	2300      	movs	r3, #0
 80007d6:	4011      	ands	r1, r2
 80007d8:	0014      	movs	r4, r2
 80007da:	2904      	cmp	r1, #4
 80007dc:	d195      	bne.n	800070a <__aeabi_ddiv+0x4ea>
 80007de:	0022      	movs	r2, r4
 80007e0:	075f      	lsls	r7, r3, #29
 80007e2:	025b      	lsls	r3, r3, #9
 80007e4:	0b1b      	lsrs	r3, r3, #12
 80007e6:	08d2      	lsrs	r2, r2, #3
 80007e8:	4317      	orrs	r7, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	e5a6      	b.n	800033c <__aeabi_ddiv+0x11c>
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	4659      	mov	r1, fp
 80007f2:	031b      	lsls	r3, r3, #12
 80007f4:	430b      	orrs	r3, r1
 80007f6:	031b      	lsls	r3, r3, #12
 80007f8:	0017      	movs	r7, r2
 80007fa:	0b1b      	lsrs	r3, r3, #12
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <__aeabi_ddiv+0x5f8>)
 80007fe:	e59d      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000800:	42bd      	cmp	r5, r7
 8000802:	d8b2      	bhi.n	800076a <__aeabi_ddiv+0x54a>
 8000804:	469b      	mov	fp, r3
 8000806:	2400      	movs	r4, #0
 8000808:	e6bf      	b.n	800058a <__aeabi_ddiv+0x36a>
 800080a:	4580      	cmp	r8, r0
 800080c:	d3b9      	bcc.n	8000782 <__aeabi_ddiv+0x562>
 800080e:	001a      	movs	r2, r3
 8000810:	e7c3      	b.n	800079a <__aeabi_ddiv+0x57a>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000003ff 	.word	0x000003ff
 8000818:	000007ff 	.word	0x000007ff
 800081c:	0000041e 	.word	0x0000041e
 8000820:	0000043e 	.word	0x0000043e

08000824 <__aeabi_dmul>:
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	4657      	mov	r7, sl
 8000828:	46de      	mov	lr, fp
 800082a:	464e      	mov	r6, r9
 800082c:	4645      	mov	r5, r8
 800082e:	b5e0      	push	{r5, r6, r7, lr}
 8000830:	4683      	mov	fp, r0
 8000832:	0006      	movs	r6, r0
 8000834:	030f      	lsls	r7, r1, #12
 8000836:	0048      	lsls	r0, r1, #1
 8000838:	b087      	sub	sp, #28
 800083a:	4692      	mov	sl, r2
 800083c:	001d      	movs	r5, r3
 800083e:	0b3f      	lsrs	r7, r7, #12
 8000840:	0d40      	lsrs	r0, r0, #21
 8000842:	0fcc      	lsrs	r4, r1, #31
 8000844:	2800      	cmp	r0, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dmul+0x26>
 8000848:	e06f      	b.n	800092a <__aeabi_dmul+0x106>
 800084a:	4bde      	ldr	r3, [pc, #888]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 800084c:	4298      	cmp	r0, r3
 800084e:	d038      	beq.n	80008c2 <__aeabi_dmul+0x9e>
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	00ff      	lsls	r7, r7, #3
 8000854:	041b      	lsls	r3, r3, #16
 8000856:	431f      	orrs	r7, r3
 8000858:	0f73      	lsrs	r3, r6, #29
 800085a:	433b      	orrs	r3, r7
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	4bda      	ldr	r3, [pc, #872]	; (8000bc8 <__aeabi_dmul+0x3a4>)
 8000860:	2700      	movs	r7, #0
 8000862:	4699      	mov	r9, r3
 8000864:	2300      	movs	r3, #0
 8000866:	469b      	mov	fp, r3
 8000868:	00f6      	lsls	r6, r6, #3
 800086a:	4481      	add	r9, r0
 800086c:	032b      	lsls	r3, r5, #12
 800086e:	0069      	lsls	r1, r5, #1
 8000870:	0b1b      	lsrs	r3, r3, #12
 8000872:	4652      	mov	r2, sl
 8000874:	4698      	mov	r8, r3
 8000876:	0d49      	lsrs	r1, r1, #21
 8000878:	0fed      	lsrs	r5, r5, #31
 800087a:	2900      	cmp	r1, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dmul+0x5c>
 800087e:	e085      	b.n	800098c <__aeabi_dmul+0x168>
 8000880:	4bd0      	ldr	r3, [pc, #832]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 8000882:	4299      	cmp	r1, r3
 8000884:	d100      	bne.n	8000888 <__aeabi_dmul+0x64>
 8000886:	e073      	b.n	8000970 <__aeabi_dmul+0x14c>
 8000888:	4643      	mov	r3, r8
 800088a:	00da      	lsls	r2, r3, #3
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	041b      	lsls	r3, r3, #16
 8000890:	4313      	orrs	r3, r2
 8000892:	4652      	mov	r2, sl
 8000894:	48cc      	ldr	r0, [pc, #816]	; (8000bc8 <__aeabi_dmul+0x3a4>)
 8000896:	0f52      	lsrs	r2, r2, #29
 8000898:	4684      	mov	ip, r0
 800089a:	4313      	orrs	r3, r2
 800089c:	4652      	mov	r2, sl
 800089e:	2000      	movs	r0, #0
 80008a0:	4461      	add	r1, ip
 80008a2:	00d2      	lsls	r2, r2, #3
 80008a4:	4489      	add	r9, r1
 80008a6:	0021      	movs	r1, r4
 80008a8:	4069      	eors	r1, r5
 80008aa:	9100      	str	r1, [sp, #0]
 80008ac:	468c      	mov	ip, r1
 80008ae:	2101      	movs	r1, #1
 80008b0:	4449      	add	r1, r9
 80008b2:	468a      	mov	sl, r1
 80008b4:	2f0f      	cmp	r7, #15
 80008b6:	d900      	bls.n	80008ba <__aeabi_dmul+0x96>
 80008b8:	e090      	b.n	80009dc <__aeabi_dmul+0x1b8>
 80008ba:	49c4      	ldr	r1, [pc, #784]	; (8000bcc <__aeabi_dmul+0x3a8>)
 80008bc:	00bf      	lsls	r7, r7, #2
 80008be:	59cf      	ldr	r7, [r1, r7]
 80008c0:	46bf      	mov	pc, r7
 80008c2:	465b      	mov	r3, fp
 80008c4:	433b      	orrs	r3, r7
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	d000      	beq.n	80008cc <__aeabi_dmul+0xa8>
 80008ca:	e16a      	b.n	8000ba2 <__aeabi_dmul+0x37e>
 80008cc:	2302      	movs	r3, #2
 80008ce:	2708      	movs	r7, #8
 80008d0:	2600      	movs	r6, #0
 80008d2:	4681      	mov	r9, r0
 80008d4:	469b      	mov	fp, r3
 80008d6:	e7c9      	b.n	800086c <__aeabi_dmul+0x48>
 80008d8:	0032      	movs	r2, r6
 80008da:	4658      	mov	r0, fp
 80008dc:	9b01      	ldr	r3, [sp, #4]
 80008de:	4661      	mov	r1, ip
 80008e0:	9100      	str	r1, [sp, #0]
 80008e2:	2802      	cmp	r0, #2
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dmul+0xc4>
 80008e6:	e075      	b.n	80009d4 <__aeabi_dmul+0x1b0>
 80008e8:	2803      	cmp	r0, #3
 80008ea:	d100      	bne.n	80008ee <__aeabi_dmul+0xca>
 80008ec:	e1fe      	b.n	8000cec <__aeabi_dmul+0x4c8>
 80008ee:	2801      	cmp	r0, #1
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dmul+0xd0>
 80008f2:	e12c      	b.n	8000b4e <__aeabi_dmul+0x32a>
 80008f4:	2300      	movs	r3, #0
 80008f6:	2700      	movs	r7, #0
 80008f8:	2600      	movs	r6, #0
 80008fa:	2500      	movs	r5, #0
 80008fc:	033f      	lsls	r7, r7, #12
 80008fe:	0d2a      	lsrs	r2, r5, #20
 8000900:	0b3f      	lsrs	r7, r7, #12
 8000902:	48b3      	ldr	r0, [pc, #716]	; (8000bd0 <__aeabi_dmul+0x3ac>)
 8000904:	0512      	lsls	r2, r2, #20
 8000906:	433a      	orrs	r2, r7
 8000908:	4002      	ands	r2, r0
 800090a:	051b      	lsls	r3, r3, #20
 800090c:	4313      	orrs	r3, r2
 800090e:	9a00      	ldr	r2, [sp, #0]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	07d1      	lsls	r1, r2, #31
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	430b      	orrs	r3, r1
 8000918:	0030      	movs	r0, r6
 800091a:	0019      	movs	r1, r3
 800091c:	b007      	add	sp, #28
 800091e:	bc3c      	pop	{r2, r3, r4, r5}
 8000920:	4690      	mov	r8, r2
 8000922:	4699      	mov	r9, r3
 8000924:	46a2      	mov	sl, r4
 8000926:	46ab      	mov	fp, r5
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092a:	465b      	mov	r3, fp
 800092c:	433b      	orrs	r3, r7
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	d100      	bne.n	8000934 <__aeabi_dmul+0x110>
 8000932:	e12f      	b.n	8000b94 <__aeabi_dmul+0x370>
 8000934:	2f00      	cmp	r7, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dmul+0x116>
 8000938:	e1a5      	b.n	8000c86 <__aeabi_dmul+0x462>
 800093a:	0038      	movs	r0, r7
 800093c:	f000 faa2 	bl	8000e84 <__clzsi2>
 8000940:	0003      	movs	r3, r0
 8000942:	3b0b      	subs	r3, #11
 8000944:	2b1c      	cmp	r3, #28
 8000946:	dd00      	ble.n	800094a <__aeabi_dmul+0x126>
 8000948:	e196      	b.n	8000c78 <__aeabi_dmul+0x454>
 800094a:	221d      	movs	r2, #29
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	465a      	mov	r2, fp
 8000950:	0001      	movs	r1, r0
 8000952:	40da      	lsrs	r2, r3
 8000954:	465e      	mov	r6, fp
 8000956:	3908      	subs	r1, #8
 8000958:	408f      	lsls	r7, r1
 800095a:	0013      	movs	r3, r2
 800095c:	408e      	lsls	r6, r1
 800095e:	433b      	orrs	r3, r7
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	4b9c      	ldr	r3, [pc, #624]	; (8000bd4 <__aeabi_dmul+0x3b0>)
 8000964:	2700      	movs	r7, #0
 8000966:	1a1b      	subs	r3, r3, r0
 8000968:	4699      	mov	r9, r3
 800096a:	2300      	movs	r3, #0
 800096c:	469b      	mov	fp, r3
 800096e:	e77d      	b.n	800086c <__aeabi_dmul+0x48>
 8000970:	4641      	mov	r1, r8
 8000972:	4653      	mov	r3, sl
 8000974:	430b      	orrs	r3, r1
 8000976:	4993      	ldr	r1, [pc, #588]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 8000978:	468c      	mov	ip, r1
 800097a:	44e1      	add	r9, ip
 800097c:	2b00      	cmp	r3, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dmul+0x15e>
 8000980:	e11a      	b.n	8000bb8 <__aeabi_dmul+0x394>
 8000982:	2202      	movs	r2, #2
 8000984:	2002      	movs	r0, #2
 8000986:	4317      	orrs	r7, r2
 8000988:	2200      	movs	r2, #0
 800098a:	e78c      	b.n	80008a6 <__aeabi_dmul+0x82>
 800098c:	4313      	orrs	r3, r2
 800098e:	d100      	bne.n	8000992 <__aeabi_dmul+0x16e>
 8000990:	e10d      	b.n	8000bae <__aeabi_dmul+0x38a>
 8000992:	4643      	mov	r3, r8
 8000994:	2b00      	cmp	r3, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dmul+0x176>
 8000998:	e181      	b.n	8000c9e <__aeabi_dmul+0x47a>
 800099a:	4640      	mov	r0, r8
 800099c:	f000 fa72 	bl	8000e84 <__clzsi2>
 80009a0:	0002      	movs	r2, r0
 80009a2:	3a0b      	subs	r2, #11
 80009a4:	2a1c      	cmp	r2, #28
 80009a6:	dd00      	ble.n	80009aa <__aeabi_dmul+0x186>
 80009a8:	e172      	b.n	8000c90 <__aeabi_dmul+0x46c>
 80009aa:	0001      	movs	r1, r0
 80009ac:	4643      	mov	r3, r8
 80009ae:	3908      	subs	r1, #8
 80009b0:	408b      	lsls	r3, r1
 80009b2:	4698      	mov	r8, r3
 80009b4:	231d      	movs	r3, #29
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	4653      	mov	r3, sl
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	001a      	movs	r2, r3
 80009be:	4643      	mov	r3, r8
 80009c0:	4313      	orrs	r3, r2
 80009c2:	4652      	mov	r2, sl
 80009c4:	408a      	lsls	r2, r1
 80009c6:	4649      	mov	r1, r9
 80009c8:	1a08      	subs	r0, r1, r0
 80009ca:	4982      	ldr	r1, [pc, #520]	; (8000bd4 <__aeabi_dmul+0x3b0>)
 80009cc:	4689      	mov	r9, r1
 80009ce:	4481      	add	r9, r0
 80009d0:	2000      	movs	r0, #0
 80009d2:	e768      	b.n	80008a6 <__aeabi_dmul+0x82>
 80009d4:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 80009d6:	2700      	movs	r7, #0
 80009d8:	2600      	movs	r6, #0
 80009da:	e78e      	b.n	80008fa <__aeabi_dmul+0xd6>
 80009dc:	0c14      	lsrs	r4, r2, #16
 80009de:	0412      	lsls	r2, r2, #16
 80009e0:	0c12      	lsrs	r2, r2, #16
 80009e2:	0011      	movs	r1, r2
 80009e4:	0c37      	lsrs	r7, r6, #16
 80009e6:	0436      	lsls	r6, r6, #16
 80009e8:	0c35      	lsrs	r5, r6, #16
 80009ea:	4379      	muls	r1, r7
 80009ec:	0028      	movs	r0, r5
 80009ee:	468c      	mov	ip, r1
 80009f0:	002e      	movs	r6, r5
 80009f2:	4360      	muls	r0, r4
 80009f4:	4460      	add	r0, ip
 80009f6:	4683      	mov	fp, r0
 80009f8:	4356      	muls	r6, r2
 80009fa:	0021      	movs	r1, r4
 80009fc:	0c30      	lsrs	r0, r6, #16
 80009fe:	4680      	mov	r8, r0
 8000a00:	4658      	mov	r0, fp
 8000a02:	4379      	muls	r1, r7
 8000a04:	4440      	add	r0, r8
 8000a06:	9102      	str	r1, [sp, #8]
 8000a08:	4584      	cmp	ip, r0
 8000a0a:	d906      	bls.n	8000a1a <__aeabi_dmul+0x1f6>
 8000a0c:	4688      	mov	r8, r1
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	0249      	lsls	r1, r1, #9
 8000a12:	468c      	mov	ip, r1
 8000a14:	44e0      	add	r8, ip
 8000a16:	4641      	mov	r1, r8
 8000a18:	9102      	str	r1, [sp, #8]
 8000a1a:	0436      	lsls	r6, r6, #16
 8000a1c:	0c01      	lsrs	r1, r0, #16
 8000a1e:	0c36      	lsrs	r6, r6, #16
 8000a20:	0400      	lsls	r0, r0, #16
 8000a22:	468b      	mov	fp, r1
 8000a24:	1981      	adds	r1, r0, r6
 8000a26:	0c1e      	lsrs	r6, r3, #16
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	0c1b      	lsrs	r3, r3, #16
 8000a2c:	9103      	str	r1, [sp, #12]
 8000a2e:	0019      	movs	r1, r3
 8000a30:	4379      	muls	r1, r7
 8000a32:	468c      	mov	ip, r1
 8000a34:	0028      	movs	r0, r5
 8000a36:	4375      	muls	r5, r6
 8000a38:	4465      	add	r5, ip
 8000a3a:	46a8      	mov	r8, r5
 8000a3c:	4358      	muls	r0, r3
 8000a3e:	0c05      	lsrs	r5, r0, #16
 8000a40:	4445      	add	r5, r8
 8000a42:	4377      	muls	r7, r6
 8000a44:	42a9      	cmp	r1, r5
 8000a46:	d903      	bls.n	8000a50 <__aeabi_dmul+0x22c>
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0249      	lsls	r1, r1, #9
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	4467      	add	r7, ip
 8000a50:	0c29      	lsrs	r1, r5, #16
 8000a52:	468c      	mov	ip, r1
 8000a54:	0039      	movs	r1, r7
 8000a56:	0400      	lsls	r0, r0, #16
 8000a58:	0c00      	lsrs	r0, r0, #16
 8000a5a:	042d      	lsls	r5, r5, #16
 8000a5c:	182d      	adds	r5, r5, r0
 8000a5e:	4461      	add	r1, ip
 8000a60:	44ab      	add	fp, r5
 8000a62:	9105      	str	r1, [sp, #20]
 8000a64:	4659      	mov	r1, fp
 8000a66:	9104      	str	r1, [sp, #16]
 8000a68:	9901      	ldr	r1, [sp, #4]
 8000a6a:	040f      	lsls	r7, r1, #16
 8000a6c:	0c3f      	lsrs	r7, r7, #16
 8000a6e:	0c08      	lsrs	r0, r1, #16
 8000a70:	0039      	movs	r1, r7
 8000a72:	4351      	muls	r1, r2
 8000a74:	4342      	muls	r2, r0
 8000a76:	4690      	mov	r8, r2
 8000a78:	0002      	movs	r2, r0
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	0c09      	lsrs	r1, r1, #16
 8000a7e:	468b      	mov	fp, r1
 8000a80:	4362      	muls	r2, r4
 8000a82:	437c      	muls	r4, r7
 8000a84:	4444      	add	r4, r8
 8000a86:	445c      	add	r4, fp
 8000a88:	45a0      	cmp	r8, r4
 8000a8a:	d903      	bls.n	8000a94 <__aeabi_dmul+0x270>
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0249      	lsls	r1, r1, #9
 8000a90:	4688      	mov	r8, r1
 8000a92:	4442      	add	r2, r8
 8000a94:	0c21      	lsrs	r1, r4, #16
 8000a96:	4688      	mov	r8, r1
 8000a98:	4661      	mov	r1, ip
 8000a9a:	0409      	lsls	r1, r1, #16
 8000a9c:	0c09      	lsrs	r1, r1, #16
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	0039      	movs	r1, r7
 8000aa2:	4359      	muls	r1, r3
 8000aa4:	4343      	muls	r3, r0
 8000aa6:	4370      	muls	r0, r6
 8000aa8:	437e      	muls	r6, r7
 8000aaa:	0c0f      	lsrs	r7, r1, #16
 8000aac:	18f6      	adds	r6, r6, r3
 8000aae:	0424      	lsls	r4, r4, #16
 8000ab0:	19be      	adds	r6, r7, r6
 8000ab2:	4464      	add	r4, ip
 8000ab4:	4442      	add	r2, r8
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	42b3      	cmp	r3, r6
 8000aba:	d903      	bls.n	8000ac4 <__aeabi_dmul+0x2a0>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	4440      	add	r0, r8
 8000ac4:	9b02      	ldr	r3, [sp, #8]
 8000ac6:	4661      	mov	r1, ip
 8000ac8:	4698      	mov	r8, r3
 8000aca:	9b04      	ldr	r3, [sp, #16]
 8000acc:	0437      	lsls	r7, r6, #16
 8000ace:	4443      	add	r3, r8
 8000ad0:	469b      	mov	fp, r3
 8000ad2:	45ab      	cmp	fp, r5
 8000ad4:	41ad      	sbcs	r5, r5
 8000ad6:	426b      	negs	r3, r5
 8000ad8:	040d      	lsls	r5, r1, #16
 8000ada:	9905      	ldr	r1, [sp, #20]
 8000adc:	0c2d      	lsrs	r5, r5, #16
 8000ade:	468c      	mov	ip, r1
 8000ae0:	197f      	adds	r7, r7, r5
 8000ae2:	4467      	add	r7, ip
 8000ae4:	18fd      	adds	r5, r7, r3
 8000ae6:	46a8      	mov	r8, r5
 8000ae8:	465d      	mov	r5, fp
 8000aea:	192d      	adds	r5, r5, r4
 8000aec:	42a5      	cmp	r5, r4
 8000aee:	41a4      	sbcs	r4, r4
 8000af0:	4693      	mov	fp, r2
 8000af2:	4264      	negs	r4, r4
 8000af4:	46a4      	mov	ip, r4
 8000af6:	44c3      	add	fp, r8
 8000af8:	44dc      	add	ip, fp
 8000afa:	428f      	cmp	r7, r1
 8000afc:	41bf      	sbcs	r7, r7
 8000afe:	4598      	cmp	r8, r3
 8000b00:	419b      	sbcs	r3, r3
 8000b02:	4593      	cmp	fp, r2
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	41a4      	sbcs	r4, r4
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	427f      	negs	r7, r7
 8000b0e:	431f      	orrs	r7, r3
 8000b10:	0c36      	lsrs	r6, r6, #16
 8000b12:	4252      	negs	r2, r2
 8000b14:	4264      	negs	r4, r4
 8000b16:	19bf      	adds	r7, r7, r6
 8000b18:	4322      	orrs	r2, r4
 8000b1a:	18bf      	adds	r7, r7, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	1838      	adds	r0, r7, r0
 8000b20:	0243      	lsls	r3, r0, #9
 8000b22:	0dd2      	lsrs	r2, r2, #23
 8000b24:	9903      	ldr	r1, [sp, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	026a      	lsls	r2, r5, #9
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	1e50      	subs	r0, r2, #1
 8000b2e:	4182      	sbcs	r2, r0
 8000b30:	4661      	mov	r1, ip
 8000b32:	0ded      	lsrs	r5, r5, #23
 8000b34:	432a      	orrs	r2, r5
 8000b36:	024e      	lsls	r6, r1, #9
 8000b38:	4332      	orrs	r2, r6
 8000b3a:	01d9      	lsls	r1, r3, #7
 8000b3c:	d400      	bmi.n	8000b40 <__aeabi_dmul+0x31c>
 8000b3e:	e0b3      	b.n	8000ca8 <__aeabi_dmul+0x484>
 8000b40:	2601      	movs	r6, #1
 8000b42:	0850      	lsrs	r0, r2, #1
 8000b44:	4032      	ands	r2, r6
 8000b46:	4302      	orrs	r2, r0
 8000b48:	07de      	lsls	r6, r3, #31
 8000b4a:	4332      	orrs	r2, r6
 8000b4c:	085b      	lsrs	r3, r3, #1
 8000b4e:	4c22      	ldr	r4, [pc, #136]	; (8000bd8 <__aeabi_dmul+0x3b4>)
 8000b50:	4454      	add	r4, sl
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	dd62      	ble.n	8000c1c <__aeabi_dmul+0x3f8>
 8000b56:	0751      	lsls	r1, r2, #29
 8000b58:	d009      	beq.n	8000b6e <__aeabi_dmul+0x34a>
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	4010      	ands	r0, r2
 8000b5e:	2804      	cmp	r0, #4
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dmul+0x34a>
 8000b62:	1d10      	adds	r0, r2, #4
 8000b64:	4290      	cmp	r0, r2
 8000b66:	4192      	sbcs	r2, r2
 8000b68:	4252      	negs	r2, r2
 8000b6a:	189b      	adds	r3, r3, r2
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	01d9      	lsls	r1, r3, #7
 8000b70:	d504      	bpl.n	8000b7c <__aeabi_dmul+0x358>
 8000b72:	2480      	movs	r4, #128	; 0x80
 8000b74:	4819      	ldr	r0, [pc, #100]	; (8000bdc <__aeabi_dmul+0x3b8>)
 8000b76:	00e4      	lsls	r4, r4, #3
 8000b78:	4003      	ands	r3, r0
 8000b7a:	4454      	add	r4, sl
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <__aeabi_dmul+0x3bc>)
 8000b7e:	4284      	cmp	r4, r0
 8000b80:	dd00      	ble.n	8000b84 <__aeabi_dmul+0x360>
 8000b82:	e727      	b.n	80009d4 <__aeabi_dmul+0x1b0>
 8000b84:	075e      	lsls	r6, r3, #29
 8000b86:	025b      	lsls	r3, r3, #9
 8000b88:	08d2      	lsrs	r2, r2, #3
 8000b8a:	0b1f      	lsrs	r7, r3, #12
 8000b8c:	0563      	lsls	r3, r4, #21
 8000b8e:	4316      	orrs	r6, r2
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	e6b2      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000b94:	2300      	movs	r3, #0
 8000b96:	4699      	mov	r9, r3
 8000b98:	3301      	adds	r3, #1
 8000b9a:	2704      	movs	r7, #4
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	469b      	mov	fp, r3
 8000ba0:	e664      	b.n	800086c <__aeabi_dmul+0x48>
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	9701      	str	r7, [sp, #4]
 8000ba6:	4681      	mov	r9, r0
 8000ba8:	270c      	movs	r7, #12
 8000baa:	469b      	mov	fp, r3
 8000bac:	e65e      	b.n	800086c <__aeabi_dmul+0x48>
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4317      	orrs	r7, r2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	e676      	b.n	80008a6 <__aeabi_dmul+0x82>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	2003      	movs	r0, #3
 8000bbc:	431f      	orrs	r7, r3
 8000bbe:	4643      	mov	r3, r8
 8000bc0:	e671      	b.n	80008a6 <__aeabi_dmul+0x82>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	000007ff 	.word	0x000007ff
 8000bc8:	fffffc01 	.word	0xfffffc01
 8000bcc:	08003b10 	.word	0x08003b10
 8000bd0:	800fffff 	.word	0x800fffff
 8000bd4:	fffffc0d 	.word	0xfffffc0d
 8000bd8:	000003ff 	.word	0x000003ff
 8000bdc:	feffffff 	.word	0xfeffffff
 8000be0:	000007fe 	.word	0x000007fe
 8000be4:	2300      	movs	r3, #0
 8000be6:	2780      	movs	r7, #128	; 0x80
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	033f      	lsls	r7, r7, #12
 8000bec:	2600      	movs	r6, #0
 8000bee:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000bf0:	e683      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000bf2:	9b01      	ldr	r3, [sp, #4]
 8000bf4:	0032      	movs	r2, r6
 8000bf6:	46a4      	mov	ip, r4
 8000bf8:	4658      	mov	r0, fp
 8000bfa:	e670      	b.n	80008de <__aeabi_dmul+0xba>
 8000bfc:	46ac      	mov	ip, r5
 8000bfe:	e66e      	b.n	80008de <__aeabi_dmul+0xba>
 8000c00:	2780      	movs	r7, #128	; 0x80
 8000c02:	9901      	ldr	r1, [sp, #4]
 8000c04:	033f      	lsls	r7, r7, #12
 8000c06:	4239      	tst	r1, r7
 8000c08:	d02d      	beq.n	8000c66 <__aeabi_dmul+0x442>
 8000c0a:	423b      	tst	r3, r7
 8000c0c:	d12b      	bne.n	8000c66 <__aeabi_dmul+0x442>
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	033f      	lsls	r7, r7, #12
 8000c12:	0b3f      	lsrs	r7, r7, #12
 8000c14:	9500      	str	r5, [sp, #0]
 8000c16:	0016      	movs	r6, r2
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000c1a:	e66e      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000c1c:	2501      	movs	r5, #1
 8000c1e:	1b2d      	subs	r5, r5, r4
 8000c20:	2d38      	cmp	r5, #56	; 0x38
 8000c22:	dd00      	ble.n	8000c26 <__aeabi_dmul+0x402>
 8000c24:	e666      	b.n	80008f4 <__aeabi_dmul+0xd0>
 8000c26:	2d1f      	cmp	r5, #31
 8000c28:	dc40      	bgt.n	8000cac <__aeabi_dmul+0x488>
 8000c2a:	4835      	ldr	r0, [pc, #212]	; (8000d00 <__aeabi_dmul+0x4dc>)
 8000c2c:	001c      	movs	r4, r3
 8000c2e:	4450      	add	r0, sl
 8000c30:	0016      	movs	r6, r2
 8000c32:	4082      	lsls	r2, r0
 8000c34:	4084      	lsls	r4, r0
 8000c36:	40ee      	lsrs	r6, r5
 8000c38:	1e50      	subs	r0, r2, #1
 8000c3a:	4182      	sbcs	r2, r0
 8000c3c:	4334      	orrs	r4, r6
 8000c3e:	4314      	orrs	r4, r2
 8000c40:	40eb      	lsrs	r3, r5
 8000c42:	0762      	lsls	r2, r4, #29
 8000c44:	d009      	beq.n	8000c5a <__aeabi_dmul+0x436>
 8000c46:	220f      	movs	r2, #15
 8000c48:	4022      	ands	r2, r4
 8000c4a:	2a04      	cmp	r2, #4
 8000c4c:	d005      	beq.n	8000c5a <__aeabi_dmul+0x436>
 8000c4e:	0022      	movs	r2, r4
 8000c50:	1d14      	adds	r4, r2, #4
 8000c52:	4294      	cmp	r4, r2
 8000c54:	4180      	sbcs	r0, r0
 8000c56:	4240      	negs	r0, r0
 8000c58:	181b      	adds	r3, r3, r0
 8000c5a:	021a      	lsls	r2, r3, #8
 8000c5c:	d53e      	bpl.n	8000cdc <__aeabi_dmul+0x4b8>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	2700      	movs	r7, #0
 8000c62:	2600      	movs	r6, #0
 8000c64:	e649      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000c66:	2780      	movs	r7, #128	; 0x80
 8000c68:	9b01      	ldr	r3, [sp, #4]
 8000c6a:	033f      	lsls	r7, r7, #12
 8000c6c:	431f      	orrs	r7, r3
 8000c6e:	033f      	lsls	r7, r7, #12
 8000c70:	0b3f      	lsrs	r7, r7, #12
 8000c72:	9400      	str	r4, [sp, #0]
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000c76:	e640      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	465a      	mov	r2, fp
 8000c7c:	3b28      	subs	r3, #40	; 0x28
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	2600      	movs	r6, #0
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	e66d      	b.n	8000962 <__aeabi_dmul+0x13e>
 8000c86:	4658      	mov	r0, fp
 8000c88:	f000 f8fc 	bl	8000e84 <__clzsi2>
 8000c8c:	3020      	adds	r0, #32
 8000c8e:	e657      	b.n	8000940 <__aeabi_dmul+0x11c>
 8000c90:	0003      	movs	r3, r0
 8000c92:	4652      	mov	r2, sl
 8000c94:	3b28      	subs	r3, #40	; 0x28
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e693      	b.n	80009c6 <__aeabi_dmul+0x1a2>
 8000c9e:	4650      	mov	r0, sl
 8000ca0:	f000 f8f0 	bl	8000e84 <__clzsi2>
 8000ca4:	3020      	adds	r0, #32
 8000ca6:	e67b      	b.n	80009a0 <__aeabi_dmul+0x17c>
 8000ca8:	46ca      	mov	sl, r9
 8000caa:	e750      	b.n	8000b4e <__aeabi_dmul+0x32a>
 8000cac:	201f      	movs	r0, #31
 8000cae:	001e      	movs	r6, r3
 8000cb0:	4240      	negs	r0, r0
 8000cb2:	1b04      	subs	r4, r0, r4
 8000cb4:	40e6      	lsrs	r6, r4
 8000cb6:	2d20      	cmp	r5, #32
 8000cb8:	d003      	beq.n	8000cc2 <__aeabi_dmul+0x49e>
 8000cba:	4c12      	ldr	r4, [pc, #72]	; (8000d04 <__aeabi_dmul+0x4e0>)
 8000cbc:	4454      	add	r4, sl
 8000cbe:	40a3      	lsls	r3, r4
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	1e50      	subs	r0, r2, #1
 8000cc4:	4182      	sbcs	r2, r0
 8000cc6:	4332      	orrs	r2, r6
 8000cc8:	2607      	movs	r6, #7
 8000cca:	2700      	movs	r7, #0
 8000ccc:	4016      	ands	r6, r2
 8000cce:	d009      	beq.n	8000ce4 <__aeabi_dmul+0x4c0>
 8000cd0:	200f      	movs	r0, #15
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	4010      	ands	r0, r2
 8000cd6:	0014      	movs	r4, r2
 8000cd8:	2804      	cmp	r0, #4
 8000cda:	d1b9      	bne.n	8000c50 <__aeabi_dmul+0x42c>
 8000cdc:	0022      	movs	r2, r4
 8000cde:	075e      	lsls	r6, r3, #29
 8000ce0:	025b      	lsls	r3, r3, #9
 8000ce2:	0b1f      	lsrs	r7, r3, #12
 8000ce4:	08d2      	lsrs	r2, r2, #3
 8000ce6:	4316      	orrs	r6, r2
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e606      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000cec:	2780      	movs	r7, #128	; 0x80
 8000cee:	033f      	lsls	r7, r7, #12
 8000cf0:	431f      	orrs	r7, r3
 8000cf2:	033f      	lsls	r7, r7, #12
 8000cf4:	0b3f      	lsrs	r7, r7, #12
 8000cf6:	0016      	movs	r6, r2
 8000cf8:	4b00      	ldr	r3, [pc, #0]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000cfa:	e5fe      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000cfc:	000007ff 	.word	0x000007ff
 8000d00:	0000041e 	.word	0x0000041e
 8000d04:	0000043e 	.word	0x0000043e

08000d08 <__aeabi_i2d>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d02d      	beq.n	8000d6a <__aeabi_i2d+0x62>
 8000d0e:	17c3      	asrs	r3, r0, #31
 8000d10:	18c5      	adds	r5, r0, r3
 8000d12:	405d      	eors	r5, r3
 8000d14:	0fc4      	lsrs	r4, r0, #31
 8000d16:	0028      	movs	r0, r5
 8000d18:	f000 f8b4 	bl	8000e84 <__clzsi2>
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <__aeabi_i2d+0x6c>)
 8000d1e:	1a1b      	subs	r3, r3, r0
 8000d20:	055b      	lsls	r3, r3, #21
 8000d22:	0d5b      	lsrs	r3, r3, #21
 8000d24:	280a      	cmp	r0, #10
 8000d26:	dd15      	ble.n	8000d54 <__aeabi_i2d+0x4c>
 8000d28:	380b      	subs	r0, #11
 8000d2a:	4085      	lsls	r5, r0
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	032d      	lsls	r5, r5, #12
 8000d30:	0b2d      	lsrs	r5, r5, #12
 8000d32:	2100      	movs	r1, #0
 8000d34:	0010      	movs	r0, r2
 8000d36:	032d      	lsls	r5, r5, #12
 8000d38:	0d0a      	lsrs	r2, r1, #20
 8000d3a:	0b2d      	lsrs	r5, r5, #12
 8000d3c:	0512      	lsls	r2, r2, #20
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	4d0d      	ldr	r5, [pc, #52]	; (8000d78 <__aeabi_i2d+0x70>)
 8000d42:	051b      	lsls	r3, r3, #20
 8000d44:	402a      	ands	r2, r5
 8000d46:	4313      	orrs	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	07e4      	lsls	r4, r4, #31
 8000d4c:	085b      	lsrs	r3, r3, #1
 8000d4e:	4323      	orrs	r3, r4
 8000d50:	0019      	movs	r1, r3
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	0002      	movs	r2, r0
 8000d56:	0029      	movs	r1, r5
 8000d58:	3215      	adds	r2, #21
 8000d5a:	4091      	lsls	r1, r2
 8000d5c:	000a      	movs	r2, r1
 8000d5e:	210b      	movs	r1, #11
 8000d60:	1a08      	subs	r0, r1, r0
 8000d62:	40c5      	lsrs	r5, r0
 8000d64:	032d      	lsls	r5, r5, #12
 8000d66:	0b2d      	lsrs	r5, r5, #12
 8000d68:	e7e3      	b.n	8000d32 <__aeabi_i2d+0x2a>
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	e7de      	b.n	8000d32 <__aeabi_i2d+0x2a>
 8000d74:	0000041e 	.word	0x0000041e
 8000d78:	800fffff 	.word	0x800fffff

08000d7c <__aeabi_d2f>:
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	004c      	lsls	r4, r1, #1
 8000d80:	0d64      	lsrs	r4, r4, #21
 8000d82:	030b      	lsls	r3, r1, #12
 8000d84:	1c62      	adds	r2, r4, #1
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	0f46      	lsrs	r6, r0, #29
 8000d8a:	0552      	lsls	r2, r2, #21
 8000d8c:	0fc9      	lsrs	r1, r1, #31
 8000d8e:	431e      	orrs	r6, r3
 8000d90:	00c5      	lsls	r5, r0, #3
 8000d92:	0d52      	lsrs	r2, r2, #21
 8000d94:	2a01      	cmp	r2, #1
 8000d96:	dd29      	ble.n	8000dec <__aeabi_d2f+0x70>
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <__aeabi_d2f+0xfc>)
 8000d9a:	18e7      	adds	r7, r4, r3
 8000d9c:	2ffe      	cmp	r7, #254	; 0xfe
 8000d9e:	dc1c      	bgt.n	8000dda <__aeabi_d2f+0x5e>
 8000da0:	2f00      	cmp	r7, #0
 8000da2:	dd3b      	ble.n	8000e1c <__aeabi_d2f+0xa0>
 8000da4:	0180      	lsls	r0, r0, #6
 8000da6:	1e43      	subs	r3, r0, #1
 8000da8:	4198      	sbcs	r0, r3
 8000daa:	2207      	movs	r2, #7
 8000dac:	00f3      	lsls	r3, r6, #3
 8000dae:	0f6d      	lsrs	r5, r5, #29
 8000db0:	4303      	orrs	r3, r0
 8000db2:	432b      	orrs	r3, r5
 8000db4:	401a      	ands	r2, r3
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d004      	beq.n	8000dc4 <__aeabi_d2f+0x48>
 8000dba:	220f      	movs	r2, #15
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	2a04      	cmp	r2, #4
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_d2f+0x48>
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	04d2      	lsls	r2, r2, #19
 8000dc8:	401a      	ands	r2, r3
 8000dca:	d024      	beq.n	8000e16 <__aeabi_d2f+0x9a>
 8000dcc:	3701      	adds	r7, #1
 8000dce:	b2fa      	uxtb	r2, r7
 8000dd0:	2fff      	cmp	r7, #255	; 0xff
 8000dd2:	d002      	beq.n	8000dda <__aeabi_d2f+0x5e>
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	0a58      	lsrs	r0, r3, #9
 8000dd8:	e001      	b.n	8000dde <__aeabi_d2f+0x62>
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	2000      	movs	r0, #0
 8000dde:	0240      	lsls	r0, r0, #9
 8000de0:	05d2      	lsls	r2, r2, #23
 8000de2:	0a40      	lsrs	r0, r0, #9
 8000de4:	07c9      	lsls	r1, r1, #31
 8000de6:	4310      	orrs	r0, r2
 8000de8:	4308      	orrs	r0, r1
 8000dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dec:	4335      	orrs	r5, r6
 8000dee:	2c00      	cmp	r4, #0
 8000df0:	d104      	bne.n	8000dfc <__aeabi_d2f+0x80>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d10a      	bne.n	8000e0c <__aeabi_d2f+0x90>
 8000df6:	2200      	movs	r2, #0
 8000df8:	2000      	movs	r0, #0
 8000dfa:	e7f0      	b.n	8000dde <__aeabi_d2f+0x62>
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0ec      	beq.n	8000dda <__aeabi_d2f+0x5e>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	03c0      	lsls	r0, r0, #15
 8000e04:	4330      	orrs	r0, r6
 8000e06:	22ff      	movs	r2, #255	; 0xff
 8000e08:	e7e9      	b.n	8000dde <__aeabi_d2f+0x62>
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	025b      	lsls	r3, r3, #9
 8000e10:	0a58      	lsrs	r0, r3, #9
 8000e12:	b2e2      	uxtb	r2, r4
 8000e14:	e7e3      	b.n	8000dde <__aeabi_d2f+0x62>
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	003c      	movs	r4, r7
 8000e1a:	e7f8      	b.n	8000e0e <__aeabi_d2f+0x92>
 8000e1c:	003b      	movs	r3, r7
 8000e1e:	3317      	adds	r3, #23
 8000e20:	dbf3      	blt.n	8000e0a <__aeabi_d2f+0x8e>
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	4333      	orrs	r3, r6
 8000e28:	261e      	movs	r6, #30
 8000e2a:	1bf6      	subs	r6, r6, r7
 8000e2c:	2e1f      	cmp	r6, #31
 8000e2e:	dd14      	ble.n	8000e5a <__aeabi_d2f+0xde>
 8000e30:	2202      	movs	r2, #2
 8000e32:	4252      	negs	r2, r2
 8000e34:	1bd7      	subs	r7, r2, r7
 8000e36:	001a      	movs	r2, r3
 8000e38:	40fa      	lsrs	r2, r7
 8000e3a:	0017      	movs	r7, r2
 8000e3c:	2e20      	cmp	r6, #32
 8000e3e:	d004      	beq.n	8000e4a <__aeabi_d2f+0xce>
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <__aeabi_d2f+0x100>)
 8000e42:	4694      	mov	ip, r2
 8000e44:	4464      	add	r4, ip
 8000e46:	40a3      	lsls	r3, r4
 8000e48:	431d      	orrs	r5, r3
 8000e4a:	002b      	movs	r3, r5
 8000e4c:	1e5d      	subs	r5, r3, #1
 8000e4e:	41ab      	sbcs	r3, r5
 8000e50:	2207      	movs	r2, #7
 8000e52:	433b      	orrs	r3, r7
 8000e54:	401a      	ands	r2, r3
 8000e56:	2700      	movs	r7, #0
 8000e58:	e7ad      	b.n	8000db6 <__aeabi_d2f+0x3a>
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <__aeabi_d2f+0x104>)
 8000e5c:	0028      	movs	r0, r5
 8000e5e:	18a2      	adds	r2, r4, r2
 8000e60:	4095      	lsls	r5, r2
 8000e62:	4093      	lsls	r3, r2
 8000e64:	1e6c      	subs	r4, r5, #1
 8000e66:	41a5      	sbcs	r5, r4
 8000e68:	40f0      	lsrs	r0, r6
 8000e6a:	2207      	movs	r2, #7
 8000e6c:	432b      	orrs	r3, r5
 8000e6e:	4303      	orrs	r3, r0
 8000e70:	401a      	ands	r2, r3
 8000e72:	2700      	movs	r7, #0
 8000e74:	e79f      	b.n	8000db6 <__aeabi_d2f+0x3a>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	fffffc80 	.word	0xfffffc80
 8000e7c:	fffffca2 	.word	0xfffffca2
 8000e80:	fffffc82 	.word	0xfffffc82

08000e84 <__clzsi2>:
 8000e84:	211c      	movs	r1, #28
 8000e86:	2301      	movs	r3, #1
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d301      	bcc.n	8000e92 <__clzsi2+0xe>
 8000e8e:	0c00      	lsrs	r0, r0, #16
 8000e90:	3910      	subs	r1, #16
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d301      	bcc.n	8000e9c <__clzsi2+0x18>
 8000e98:	0a00      	lsrs	r0, r0, #8
 8000e9a:	3908      	subs	r1, #8
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d301      	bcc.n	8000ea6 <__clzsi2+0x22>
 8000ea2:	0900      	lsrs	r0, r0, #4
 8000ea4:	3904      	subs	r1, #4
 8000ea6:	a202      	add	r2, pc, #8	; (adr r2, 8000eb0 <__clzsi2+0x2c>)
 8000ea8:	5c10      	ldrb	r0, [r2, r0]
 8000eaa:	1840      	adds	r0, r0, r1
 8000eac:	4770      	bx	lr
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	02020304 	.word	0x02020304
 8000eb4:	01010101 	.word	0x01010101
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fba6 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f80a 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f916 	bl	80010fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ed0:	f000 f868 	bl	8000fa4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ed4:	f000 f89e 	bl	8001014 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ed8:	f000 f856 	bl	8000f88 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <main+0x1c>
	...

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b095      	sub	sp, #84	; 0x54
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	2418      	movs	r4, #24
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	0018      	movs	r0, r3
 8000eec:	2338      	movs	r3, #56	; 0x38
 8000eee:	001a      	movs	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f002 fdd9 	bl	8003aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	0018      	movs	r0, r3
 8000efa:	2314      	movs	r3, #20
 8000efc:	001a      	movs	r2, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	f002 fdd2 	bl	8003aa8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <SystemClock_Config+0xa0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <SystemClock_Config+0xa4>)
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <SystemClock_Config+0xa0>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0109      	lsls	r1, r1, #4
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f16:	0021      	movs	r1, r4
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2201      	movs	r2, #1
 8000f22:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	22a0      	movs	r2, #160	; 0xa0
 8000f2e:	0212      	lsls	r2, r2, #8
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fe46 	bl	8001bcc <HAL_RCC_OscConfig>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000f44:	f000 f99c 	bl	8001280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2100      	movs	r1, #0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 f9fe 	bl	800236c <HAL_RCC_ClockConfig>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f74:	f000 f984 	bl	8001280 <Error_Handler>
  }
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b015      	add	sp, #84	; 0x54
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	40007000 	.word	0x40007000
 8000f84:	ffffe7ff 	.word	0xffffe7ff

08000f88 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2101      	movs	r1, #1
 8000f90:	200f      	movs	r0, #15
 8000f92:	f000 fc3b 	bl	800180c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 fc4d 	bl	8001836 <HAL_NVIC_EnableIRQ>
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_SPI1_Init+0x68>)
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <MX_SPI1_Init+0x6c>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_SPI1_Init+0x68>)
 8000fb0:	2282      	movs	r2, #130	; 0x82
 8000fb2:	0052      	lsls	r2, r2, #1
 8000fb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_SPI1_Init+0x68>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_SPI1_Init+0x68>)
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_SPI1_Init+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_SPI1_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_SPI1_Init+0x68>)
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	02d2      	lsls	r2, r2, #11
 8000fd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_SPI1_Init+0x68>)
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_SPI1_Init+0x68>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_SPI1_Init+0x68>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_SPI1_Init+0x68>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_SPI1_Init+0x68>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <MX_SPI1_Init+0x68>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fb65 	bl	80026c8 <HAL_SPI_Init>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001002:	f000 f93d 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000020 	.word	0x20000020
 8001010:	40013000 	.word	0x40013000

08001014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	2320      	movs	r3, #32
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	0018      	movs	r0, r3
 8001020:	2310      	movs	r3, #16
 8001022:	001a      	movs	r2, r3
 8001024:	2100      	movs	r1, #0
 8001026:	f002 fd3f 	bl	8003aa8 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800102a:	230c      	movs	r3, #12
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	0018      	movs	r0, r3
 8001030:	2314      	movs	r3, #20
 8001032:	001a      	movs	r2, r3
 8001034:	2100      	movs	r1, #0
 8001036:	f002 fd37 	bl	8003aa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	0018      	movs	r0, r3
 800103e:	2308      	movs	r3, #8
 8001040:	001a      	movs	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f002 fd30 	bl	8003aa8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <MX_TIM2_Init+0xdc>)
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	05d2      	lsls	r2, r2, #23
 800104e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <MX_TIM2_Init+0xdc>)
 8001052:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <MX_TIM2_Init+0xe0>)
 8001054:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_TIM2_Init+0xdc>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_TIM2_Init+0xdc>)
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <MX_TIM2_Init+0xe4>)
 8001060:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_TIM2_Init+0xdc>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_TIM2_Init+0xdc>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_TIM2_Init+0xdc>)
 8001070:	0018      	movs	r0, r3
 8001072:	f002 f8d2 	bl	800321a <HAL_TIM_Base_Init>
 8001076:	1e03      	subs	r3, r0, #0
 8001078:	d001      	beq.n	800107e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800107a:	f000 f901 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	2120      	movs	r1, #32
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	0152      	lsls	r2, r2, #5
 8001086:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001088:	187a      	adds	r2, r7, r1
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_TIM2_Init+0xdc>)
 800108c:	0011      	movs	r1, r2
 800108e:	0018      	movs	r0, r3
 8001090:	f002 f9fa 	bl	8003488 <HAL_TIM_ConfigClockSource>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001098:	f000 f8f2 	bl	8001280 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800109c:	210c      	movs	r1, #12
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80010aa:	187a      	adds	r2, r7, r1
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_TIM2_Init+0xdc>)
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f002 faa7 	bl	8003604 <HAL_TIM_SlaveConfigSynchro>
 80010b6:	1e03      	subs	r3, r0, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80010ba:	f000 f8e1 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ca:	1d3a      	adds	r2, r7, #4
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_TIM2_Init+0xdc>)
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 fc81 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80010da:	f000 f8d1 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <MX_TIM2_Init+0xdc>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 f8c6 	bl	8003272 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b00c      	add	sp, #48	; 0x30
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	20000078 	.word	0x20000078
 80010f4:	00001b58 	.word	0x00001b58
 80010f8:	00000bb8 	.word	0x00000bb8

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	2414      	movs	r4, #20
 8001104:	193b      	adds	r3, r7, r4
 8001106:	0018      	movs	r0, r3
 8001108:	2314      	movs	r3, #20
 800110a:	001a      	movs	r2, r3
 800110c:	2100      	movs	r1, #0
 800110e:	f002 fccb 	bl	8003aa8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b56      	ldr	r3, [pc, #344]	; (800126c <MX_GPIO_Init+0x170>)
 8001114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001116:	4b55      	ldr	r3, [pc, #340]	; (800126c <MX_GPIO_Init+0x170>)
 8001118:	2104      	movs	r1, #4
 800111a:	430a      	orrs	r2, r1
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <MX_GPIO_Init+0x170>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	2204      	movs	r2, #4
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <MX_GPIO_Init+0x170>)
 800112c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112e:	4b4f      	ldr	r3, [pc, #316]	; (800126c <MX_GPIO_Init+0x170>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	430a      	orrs	r2, r1
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
 8001136:	4b4d      	ldr	r3, [pc, #308]	; (800126c <MX_GPIO_Init+0x170>)
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <MX_GPIO_Init+0x170>)
 8001144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001146:	4b49      	ldr	r3, [pc, #292]	; (800126c <MX_GPIO_Init+0x170>)
 8001148:	2101      	movs	r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <MX_GPIO_Init+0x170>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	2201      	movs	r2, #1
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <MX_GPIO_Init+0x170>)
 800115c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115e:	4b43      	ldr	r3, [pc, #268]	; (800126c <MX_GPIO_Init+0x170>)
 8001160:	2102      	movs	r1, #2
 8001162:	430a      	orrs	r2, r1
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <MX_GPIO_Init+0x170>)
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 8001172:	23a0      	movs	r3, #160	; 0xa0
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fcf6 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <MX_GPIO_Init+0x174>)
 8001182:	2201      	movs	r2, #1
 8001184:	2110      	movs	r1, #16
 8001186:	0018      	movs	r0, r3
 8001188:	f000 fcf0 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <MX_GPIO_Init+0x174>)
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fcea 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8001198:	4936      	ldr	r1, [pc, #216]	; (8001274 <MX_GPIO_Init+0x178>)
 800119a:	4b37      	ldr	r3, [pc, #220]	; (8001278 <MX_GPIO_Init+0x17c>)
 800119c:	2200      	movs	r2, #0
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fce4 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	0192      	lsls	r2, r2, #6
 80011aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	4a33      	ldr	r2, [pc, #204]	; (800127c <MX_GPIO_Init+0x180>)
 80011b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <MX_GPIO_Init+0x174>)
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f000 fb56 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	2202      	movs	r2, #2
 80011ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	2203      	movs	r2, #3
 80011da:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	2204      	movs	r2, #4
 80011e0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	193a      	adds	r2, r7, r4
 80011e4:	23a0      	movs	r3, #160	; 0xa0
 80011e6:	05db      	lsls	r3, r3, #23
 80011e8:	0011      	movs	r1, r2
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 fb40 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	2220      	movs	r2, #32
 80011f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	193b      	adds	r3, r7, r4
 80011f8:	2201      	movs	r2, #1
 80011fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	193b      	adds	r3, r7, r4
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8001208:	193a      	adds	r2, r7, r4
 800120a:	23a0      	movs	r3, #160	; 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f000 fb2d 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8001216:	0021      	movs	r1, r4
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2201      	movs	r2, #1
 8001222:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	000c      	movs	r4, r1
 8001232:	187b      	adds	r3, r7, r1
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <MX_GPIO_Init+0x174>)
 8001236:	0019      	movs	r1, r3
 8001238:	0010      	movs	r0, r2
 800123a:	f000 fb19 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 800123e:	0021      	movs	r1, r4
 8001240:	187b      	adds	r3, r7, r1
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <MX_GPIO_Init+0x178>)
 8001244:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2201      	movs	r2, #1
 800124a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	187b      	adds	r3, r7, r1
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <MX_GPIO_Init+0x17c>)
 800125c:	0019      	movs	r1, r3
 800125e:	0010      	movs	r0, r2
 8001260:	f000 fb06 	bl	8001870 <HAL_GPIO_Init>

}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b00b      	add	sp, #44	; 0x2c
 800126a:	bd90      	pop	{r4, r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	50000800 	.word	0x50000800
 8001274:	00002001 	.word	0x00002001
 8001278:	50000400 	.word	0x50000400
 800127c:	10210000 	.word	0x10210000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_MspInit+0x24>)
 8001292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x24>)
 8001296:	2101      	movs	r1, #1
 8001298:	430a      	orrs	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <HAL_MspInit+0x24>)
 800129e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_MspInit+0x24>)
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	0549      	lsls	r1, r1, #21
 80012a6:	430a      	orrs	r2, r1
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b08b      	sub	sp, #44	; 0x2c
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	2314      	movs	r3, #20
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	0018      	movs	r0, r3
 80012c2:	2314      	movs	r3, #20
 80012c4:	001a      	movs	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	f002 fbee 	bl	8003aa8 <memset>
  if(hspi->Instance==SPI1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_SPI_MspInit+0xc4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d14b      	bne.n	800136e <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_SPI_MspInit+0xc8>)
 80012d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <HAL_SPI_MspInit+0xc8>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0149      	lsls	r1, r1, #5
 80012e0:	430a      	orrs	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <HAL_SPI_MspInit+0xc8>)
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_SPI_MspInit+0xc8>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	430a      	orrs	r2, r1
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_SPI_MspInit+0xc8>)
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	2201      	movs	r2, #1
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_SPI_MspInit+0xc8>)
 80012fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_SPI_MspInit+0xc8>)
 8001302:	2102      	movs	r1, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_SPI_MspInit+0xc8>)
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	2202      	movs	r2, #2
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001314:	2414      	movs	r4, #20
 8001316:	193b      	adds	r3, r7, r4
 8001318:	22d0      	movs	r2, #208	; 0xd0
 800131a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	193b      	adds	r3, r7, r4
 800131e:	2202      	movs	r2, #2
 8001320:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	193b      	adds	r3, r7, r4
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	193b      	adds	r3, r7, r4
 800132a:	2203      	movs	r2, #3
 800132c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800132e:	193b      	adds	r3, r7, r4
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	193a      	adds	r2, r7, r4
 8001336:	23a0      	movs	r3, #160	; 0xa0
 8001338:	05db      	lsls	r3, r3, #23
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fa97 	bl	8001870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8001342:	0021      	movs	r1, r4
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2208      	movs	r2, #8
 8001348:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2202      	movs	r2, #2
 800134e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2203      	movs	r2, #3
 800135a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8001362:	187b      	adds	r3, r7, r1
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_SPI_MspInit+0xcc>)
 8001366:	0019      	movs	r1, r3
 8001368:	0010      	movs	r0, r2
 800136a:	f000 fa81 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b00b      	add	sp, #44	; 0x2c
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	40013000 	.word	0x40013000
 800137c:	40021000 	.word	0x40021000
 8001380:	50000400 	.word	0x50000400

08001384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	05db      	lsls	r3, r3, #23
 8001394:	429a      	cmp	r2, r3
 8001396:	d105      	bne.n	80013a4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <HAL_TIM_Base_MspInit+0x28>)
 800139a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_TIM_Base_MspInit+0x28>)
 800139e:	2101      	movs	r1, #1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed = 0;
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
  uint16_t adc_ch_select = (uint16_t)(ADC_DIN_CH0);
 80013ec:	003b      	movs	r3, r7
 80013ee:	2203      	movs	r2, #3
 80013f0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <TIM2_IRQHandler+0xcc>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 ff5e 	bl	80032b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  int timeout = 500;
 80013fa:	23fa      	movs	r3, #250	; 0xfa
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
  /* Toggle LED to signify interrupt */
  HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	2120      	movs	r1, #32
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fbcd 	bl	8001ba6 <HAL_GPIO_TogglePin>

  /* Toggle SS0 Pin (CS) Low to select wind sensor */
  HAL_GPIO_TogglePin(SS0_GPIO_Port, SS0_Pin);
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <TIM2_IRQHandler+0xd0>)
 800140e:	2110      	movs	r1, #16
 8001410:	0018      	movs	r0, r3
 8001412:	f000 fbc8 	bl	8001ba6 <HAL_GPIO_TogglePin>
  /* Send to DIN CH0 Select */
  HAL_SPI_Transmit(&hspi1, &adc_ch_select, sizeof(adc_ch_select), timeout);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0039      	movs	r1, r7
 800141a:	4826      	ldr	r0, [pc, #152]	; (80014b4 <TIM2_IRQHandler+0xd4>)
 800141c:	2202      	movs	r2, #2
 800141e:	f001 f9bd 	bl	800279c <HAL_SPI_Transmit>
  /* Read from Dout of ADC */
  HAL_SPI_Receive(&hspi1, &wind_speed, sizeof(wind_speed), timeout);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1cb9      	adds	r1, r7, #2
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <TIM2_IRQHandler+0xd4>)
 8001428:	2202      	movs	r2, #2
 800142a:	f001 fb05 	bl	8002a38 <HAL_SPI_Receive>
  // TODO: Read from Sensor
  HAL_GPIO_TogglePin(SS0_GPIO_Port, SS0_Pin);
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <TIM2_IRQHandler+0xd0>)
 8001430:	2110      	movs	r1, #16
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fbb7 	bl	8001ba6 <HAL_GPIO_TogglePin>
  /* Toggle SS0 High (CS) to un-select sensor */

  /* Calculate Wind Sensor Voltage */
  uint16_t wind_speed_shift = convert_from_adc(wind_speed);
 8001438:	1cbb      	adds	r3, r7, #2
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	250a      	movs	r5, #10
 800143e:	197c      	adds	r4, r7, r5
 8001440:	0018      	movs	r0, r3
 8001442:	f000 f86c 	bl	800151e <convert_from_adc>
 8001446:	0003      	movs	r3, r0
 8001448:	8023      	strh	r3, [r4, #0]
  float wind_speed_vin = 5.0 * wind_speed_shift / 1024;
 800144a:	197b      	adds	r3, r7, r5
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff fc5a 	bl	8000d08 <__aeabi_i2d>
 8001454:	2200      	movs	r2, #0
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <TIM2_IRQHandler+0xd8>)
 8001458:	f7ff f9e4 	bl	8000824 <__aeabi_dmul>
 800145c:	0003      	movs	r3, r0
 800145e:	000c      	movs	r4, r1
 8001460:	0018      	movs	r0, r3
 8001462:	0021      	movs	r1, r4
 8001464:	2200      	movs	r2, #0
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <TIM2_IRQHandler+0xdc>)
 8001468:	f7fe feda 	bl	8000220 <__aeabi_ddiv>
 800146c:	0003      	movs	r3, r0
 800146e:	000c      	movs	r4, r1
 8001470:	0018      	movs	r0, r3
 8001472:	0021      	movs	r1, r4
 8001474:	f7ff fc82 	bl	8000d7c <__aeabi_d2f>
 8001478:	1c03      	adds	r3, r0, #0
 800147a:	607b      	str	r3, [r7, #4]

  /* Toggle SS1 Pin Low to select sensor */
  HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <TIM2_IRQHandler+0xd0>)
 800147e:	2120      	movs	r1, #32
 8001480:	0018      	movs	r0, r3
 8001482:	f000 fb90 	bl	8001ba6 <HAL_GPIO_TogglePin>
  // TODO: Read from Sensor
  HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <TIM2_IRQHandler+0xd0>)
 8001488:	2120      	movs	r1, #32
 800148a:	0018      	movs	r0, r3
 800148c:	f000 fb8b 	bl	8001ba6 <HAL_GPIO_TogglePin>
  /* Toggle SS1 High to un-select sensor */

  /* Toggle SS2 Pin Low to select sensor */
  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <TIM2_IRQHandler+0xe0>)
 8001492:	2101      	movs	r1, #1
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fb86 	bl	8001ba6 <HAL_GPIO_TogglePin>
  // TODO: Read from Sensor
  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <TIM2_IRQHandler+0xe0>)
 800149c:	2101      	movs	r1, #1
 800149e:	0018      	movs	r0, r3
 80014a0:	f000 fb81 	bl	8001ba6 <HAL_GPIO_TogglePin>
  /* Toggle SS2 High to un-select sensor */
  /* USER CODE END TIM2_IRQn 1 */
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bdb0      	pop	{r4, r5, r7, pc}
 80014ac:	20000078 	.word	0x20000078
 80014b0:	50000800 	.word	0x50000800
 80014b4:	20000020 	.word	0x20000020
 80014b8:	40140000 	.word	0x40140000
 80014bc:	40900000 	.word	0x40900000
 80014c0:	50000400 	.word	0x50000400

080014c4 <reverse>:

/* USER CODE BEGIN 1 */
static unsigned int reverse(uint16_t x)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0002      	movs	r2, r0
 80014cc:	1dbb      	adds	r3, r7, #6
 80014ce:	801a      	strh	r2, [r3, #0]
	/* Retrieved from https://stackoverflow.com/questions/746171/efficient-algorithm-for-bit-reversal-from-msb-lsb-to-lsb-msb-in-c */
	uint16_t y = 0;
 80014d0:	230e      	movs	r3, #14
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	2200      	movs	r2, #0
 80014d6:	801a      	strh	r2, [r3, #0]
	int position = 15;
 80014d8:	230f      	movs	r3, #15
 80014da:	60bb      	str	r3, [r7, #8]
	for(; position >= 0; position--){
 80014dc:	e015      	b.n	800150a <reverse+0x46>
		y += ((x&1) << position);
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	401a      	ands	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	b299      	uxth	r1, r3
 80014ee:	220e      	movs	r2, #14
 80014f0:	18bb      	adds	r3, r7, r2
 80014f2:	18ba      	adds	r2, r7, r2
 80014f4:	8812      	ldrh	r2, [r2, #0]
 80014f6:	188a      	adds	r2, r1, r2
 80014f8:	801a      	strh	r2, [r3, #0]
		x >>= 1;
 80014fa:	1dbb      	adds	r3, r7, #6
 80014fc:	1dba      	adds	r2, r7, #6
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	0852      	lsrs	r2, r2, #1
 8001502:	801a      	strh	r2, [r3, #0]
	for(; position >= 0; position--){
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3b01      	subs	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	dae6      	bge.n	80014de <reverse+0x1a>
	}
	return y;
 8001510:	230e      	movs	r3, #14
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	881b      	ldrh	r3, [r3, #0]
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}

0800151e <convert_from_adc>:

static uint16_t convert_from_adc(uint16_t adc_value)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	0002      	movs	r2, r0
 8001526:	1dbb      	adds	r3, r7, #6
 8001528:	801a      	strh	r2, [r3, #0]
	return reverse(adc_value) << 2;
 800152a:	1dbb      	adds	r3, r7, #6
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff ffc8 	bl	80014c4 <reverse>
 8001534:	0003      	movs	r3, r0
 8001536:	b29b      	uxth	r3, r3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	b29b      	uxth	r3, r3
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <SystemInit+0x64>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <SystemInit+0x64>)
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	0049      	lsls	r1, r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <SystemInit+0x64>)
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <SystemInit+0x64>)
 800155c:	4913      	ldr	r1, [pc, #76]	; (80015ac <SystemInit+0x68>)
 800155e:	400a      	ands	r2, r1
 8001560:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <SystemInit+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <SystemInit+0x64>)
 8001568:	4911      	ldr	r1, [pc, #68]	; (80015b0 <SystemInit+0x6c>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <SystemInit+0x64>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <SystemInit+0x64>)
 8001574:	2101      	movs	r1, #1
 8001576:	438a      	bics	r2, r1
 8001578:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SystemInit+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <SystemInit+0x64>)
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <SystemInit+0x70>)
 8001582:	400a      	ands	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <SystemInit+0x64>)
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <SystemInit+0x64>)
 800158c:	490a      	ldr	r1, [pc, #40]	; (80015b8 <SystemInit+0x74>)
 800158e:	400a      	ands	r2, r1
 8001590:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SystemInit+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <SystemInit+0x78>)
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	0512      	lsls	r2, r2, #20
 800159e:	609a      	str	r2, [r3, #8]
#endif
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	88ff400c 	.word	0x88ff400c
 80015b0:	fef6fff6 	.word	0xfef6fff6
 80015b4:	fffbffff 	.word	0xfffbffff
 80015b8:	ff02ffff 	.word	0xff02ffff
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80015c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80015c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015c6:	e003      	b.n	80015d0 <LoopCopyDataInit>

080015c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80015ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ce:	3104      	adds	r1, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <LoopForever+0xa>)
  ldr  r3, =_edata
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <LoopForever+0xe>)
  adds  r2, r0, r1
 80015d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015d8:	d3f6      	bcc.n	80015c8 <CopyDataInit>
  ldr  r2, =_sbss
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopForever+0x12>)
  b  LoopFillZerobss
 80015dc:	e002      	b.n	80015e4 <LoopFillZerobss>

080015de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80015de:	2300      	movs	r3, #0
  str  r3, [r2]
 80015e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e2:	3204      	adds	r2, #4

080015e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <LoopForever+0x16>)
  cmp  r2, r3
 80015e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015e8:	d3f9      	bcc.n	80015de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015ea:	f7ff ffab 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f002 fa37 	bl	8003a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff fc65 	bl	8000ec0 <main>

080015f6 <LoopForever>:

LoopForever:
    b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
   ldr   r0, =_estack
 80015f8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80015fc:	08003b74 	.word	0x08003b74
  ldr  r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001604:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001608:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800160c:	200000b8 	.word	0x200000b8

08001610 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_COMP_IRQHandler>
	...

08001614 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x3c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Init+0x3c>)
 8001626:	2140      	movs	r1, #64	; 0x40
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162c:	2000      	movs	r0, #0
 800162e:	f000 f811 	bl	8001654 <HAL_InitTick>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d003      	beq.n	800163e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e001      	b.n	8001642 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800163e:	f7ff fe25 	bl	800128c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800165c:	230f      	movs	r3, #15
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_InitTick+0x50>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	23fa      	movs	r3, #250	; 0xfa
 800166a:	0099      	lsls	r1, r3, #2
 800166c:	0010      	movs	r0, r2
 800166e:	f7fe fd4b 	bl	8000108 <__udivsi3>
 8001672:	0003      	movs	r3, r0
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f8ee 	bl	8001856 <HAL_SYSTICK_Config>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d004      	beq.n	8001688 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800167e:	230f      	movs	r3, #15
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	e006      	b.n	8001696 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	2301      	movs	r3, #1
 800168c:	425b      	negs	r3, r3
 800168e:	2200      	movs	r2, #0
 8001690:	0018      	movs	r0, r3
 8001692:	f000 f8bb 	bl	800180c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001696:	230f      	movs	r3, #15
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	781b      	ldrb	r3, [r3, #0]
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	200000b4 	.word	0x200000b4

080016bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	0002      	movs	r2, r0
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	001a      	movs	r2, r3
 80016ce:	231f      	movs	r3, #31
 80016d0:	401a      	ands	r2, r3
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <NVIC_EnableIRQ+0x28>)
 80016d4:	2101      	movs	r1, #1
 80016d6:	4091      	lsls	r1, r2
 80016d8:	000a      	movs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	0002      	movs	r2, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b7f      	cmp	r3, #127	; 0x7f
 80016fc:	d932      	bls.n	8001764 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016fe:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <NVIC_SetPriority+0xd4>)
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	0019      	movs	r1, r3
 8001706:	230f      	movs	r3, #15
 8001708:	400b      	ands	r3, r1
 800170a:	3b08      	subs	r3, #8
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3306      	adds	r3, #6
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	18d3      	adds	r3, r2, r3
 8001714:	3304      	adds	r3, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	1dfa      	adds	r2, r7, #7
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	0011      	movs	r1, r2
 800171e:	2203      	movs	r2, #3
 8001720:	400a      	ands	r2, r1
 8001722:	00d2      	lsls	r2, r2, #3
 8001724:	21ff      	movs	r1, #255	; 0xff
 8001726:	4091      	lsls	r1, r2
 8001728:	000a      	movs	r2, r1
 800172a:	43d2      	mvns	r2, r2
 800172c:	401a      	ands	r2, r3
 800172e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	019b      	lsls	r3, r3, #6
 8001734:	22ff      	movs	r2, #255	; 0xff
 8001736:	401a      	ands	r2, r3
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	0018      	movs	r0, r3
 800173e:	2303      	movs	r3, #3
 8001740:	4003      	ands	r3, r0
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <NVIC_SetPriority+0xd4>)
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	001c      	movs	r4, r3
 800174e:	230f      	movs	r3, #15
 8001750:	4023      	ands	r3, r4
 8001752:	3b08      	subs	r3, #8
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	430a      	orrs	r2, r1
 8001758:	3306      	adds	r3, #6
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	18c3      	adds	r3, r0, r3
 800175e:	3304      	adds	r3, #4
 8001760:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001762:	e027      	b.n	80017b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001764:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <NVIC_SetPriority+0xd8>)
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b25b      	sxtb	r3, r3
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	33c0      	adds	r3, #192	; 0xc0
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	589b      	ldr	r3, [r3, r2]
 8001774:	1dfa      	adds	r2, r7, #7
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	0011      	movs	r1, r2
 800177a:	2203      	movs	r2, #3
 800177c:	400a      	ands	r2, r1
 800177e:	00d2      	lsls	r2, r2, #3
 8001780:	21ff      	movs	r1, #255	; 0xff
 8001782:	4091      	lsls	r1, r2
 8001784:	000a      	movs	r2, r1
 8001786:	43d2      	mvns	r2, r2
 8001788:	401a      	ands	r2, r3
 800178a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	019b      	lsls	r3, r3, #6
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	401a      	ands	r2, r3
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	2303      	movs	r3, #3
 800179c:	4003      	ands	r3, r0
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <NVIC_SetPriority+0xd8>)
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	430a      	orrs	r2, r1
 80017ae:	33c0      	adds	r3, #192	; 0xc0
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	501a      	str	r2, [r3, r0]
}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b003      	add	sp, #12
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <SysTick_Config+0x40>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e010      	b.n	80017fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <SysTick_Config+0x44>)
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	3a01      	subs	r2, #1
 80017e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	2301      	movs	r3, #1
 80017e4:	425b      	negs	r3, r3
 80017e6:	2103      	movs	r1, #3
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ff7d 	bl	80016e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SysTick_Config+0x44>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x44>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	00ffffff 	.word	0x00ffffff
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	210f      	movs	r1, #15
 8001818:	187b      	adds	r3, r7, r1
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	187b      	adds	r3, r7, r1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	0011      	movs	r1, r2
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff ff5d 	bl	80016e8 <NVIC_SetPriority>
}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b004      	add	sp, #16
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	0002      	movs	r2, r0
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b25b      	sxtb	r3, r3
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff ff37 	bl	80016bc <NVIC_EnableIRQ>
}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ffaf 	bl	80017c4 <SysTick_Config>
 8001866:	0003      	movs	r3, r0
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001886:	e155      	b.n	8001b34 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4091      	lsls	r1, r2
 8001892:	000a      	movs	r2, r1
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d100      	bne.n	80018a0 <HAL_GPIO_Init+0x30>
 800189e:	e146      	b.n	8001b2e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x40>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	58d3      	ldr	r3, [r2, r3]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2207      	movs	r2, #7
 80018c2:	4013      	ands	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2107      	movs	r1, #7
 80018dc:	400b      	ands	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	409a      	lsls	r2, r3
 80018e2:	0013      	movs	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	6939      	ldr	r1, [r7, #16]
 80018f6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00b      	beq.n	8001918 <HAL_GPIO_Init+0xa8>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190c:	2b11      	cmp	r3, #17
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b12      	cmp	r3, #18
 8001916:	d130      	bne.n	800197a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194e:	2201      	movs	r2, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	2201      	movs	r2, #1
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	409a      	lsls	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	43da      	mvns	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	401a      	ands	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	43da      	mvns	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	4013      	ands	r3, r2
 80019e8:	d100      	bne.n	80019ec <HAL_GPIO_Init+0x17c>
 80019ea:	e0a0      	b.n	8001b2e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ec:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_GPIO_Init+0x2dc>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <HAL_GPIO_Init+0x2dc>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80019f8:	4a55      	ldr	r2, [pc, #340]	; (8001b50 <HAL_GPIO_Init+0x2e0>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	589b      	ldr	r3, [r3, r2]
 8001a04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	409a      	lsls	r2, r3
 8001a12:	0013      	movs	r3, r2
 8001a14:	43da      	mvns	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	23a0      	movs	r3, #160	; 0xa0
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d01f      	beq.n	8001a66 <HAL_GPIO_Init+0x1f6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <HAL_GPIO_Init+0x2e4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_Init+0x1f2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a49      	ldr	r2, [pc, #292]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <HAL_GPIO_Init+0x2ec>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_Init+0x1ea>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a47      	ldr	r2, [pc, #284]	; (8001b60 <HAL_GPIO_Init+0x2f0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_Init+0x1e6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <HAL_GPIO_Init+0x2f4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_Init+0x1e2>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e00a      	b.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a66:	2300      	movs	r3, #0
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a78:	4935      	ldr	r1, [pc, #212]	; (8001b50 <HAL_GPIO_Init+0x2e0>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	035b      	lsls	r3, r3, #13
 8001af2:	4013      	ands	r3, r2
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	039b      	lsls	r3, r3, #14
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	40da      	lsrs	r2, r3
 8001b3c:	1e13      	subs	r3, r2, #0
 8001b3e:	d000      	beq.n	8001b42 <HAL_GPIO_Init+0x2d2>
 8001b40:	e6a2      	b.n	8001888 <HAL_GPIO_Init+0x18>
  }
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b006      	add	sp, #24
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	50000400 	.word	0x50000400
 8001b58:	50000800 	.word	0x50000800
 8001b5c:	50000c00 	.word	0x50000c00
 8001b60:	50001000 	.word	0x50001000
 8001b64:	50001c00 	.word	0x50001c00
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	0008      	movs	r0, r1
 8001b76:	0011      	movs	r1, r2
 8001b78:	1cbb      	adds	r3, r7, #2
 8001b7a:	1c02      	adds	r2, r0, #0
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	1c7b      	adds	r3, r7, #1
 8001b80:	1c0a      	adds	r2, r1, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001b84:	1c7b      	adds	r3, r7, #1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8c:	1cbb      	adds	r3, r7, #2
 8001b8e:	881a      	ldrh	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b96:	1cbb      	adds	r3, r7, #2
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	000a      	movs	r2, r1
 8001bb0:	1cbb      	adds	r3, r7, #2
 8001bb2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	1cbb      	adds	r3, r7, #2
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	405a      	eors	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	615a      	str	r2, [r3, #20]
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f000 fbbc 	bl	8002358 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be0:	4bc8      	ldr	r3, [pc, #800]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bea:	4bc6      	ldr	r3, [pc, #792]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x36>
 8001c00:	e07e      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d007      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4bba      	ldr	r3, [pc, #744]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5a>
 8001c24:	e06b      	b.n	8001cfe <HAL_RCC_OscConfig+0x132>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d167      	bne.n	8001cfe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 fb92 	bl	8002358 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_OscConfig+0x84>
 8001c40:	4bb0      	ldr	r3, [pc, #704]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4baf      	ldr	r3, [pc, #700]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	0249      	lsls	r1, r1, #9
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e027      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	23a0      	movs	r3, #160	; 0xa0
 8001c56:	02db      	lsls	r3, r3, #11
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d10e      	bne.n	8001c7a <HAL_RCC_OscConfig+0xae>
 8001c5c:	4ba9      	ldr	r3, [pc, #676]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4ba8      	ldr	r3, [pc, #672]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	02c9      	lsls	r1, r1, #11
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	4ba6      	ldr	r3, [pc, #664]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4ba5      	ldr	r3, [pc, #660]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0249      	lsls	r1, r1, #9
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e012      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	4ba2      	ldr	r3, [pc, #648]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4ba1      	ldr	r3, [pc, #644]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c80:	49a1      	ldr	r1, [pc, #644]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b9f      	ldr	r3, [pc, #636]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	025b      	lsls	r3, r3, #9
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4b9b      	ldr	r3, [pc, #620]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	499c      	ldr	r1, [pc, #624]	; (8001f0c <HAL_RCC_OscConfig+0x340>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d015      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fcfe 	bl	80016a8 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fcf9 	bl	80016a8 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d902      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f000 fb49 	bl	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc6:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	029b      	lsls	r3, r3, #10
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0ef      	beq.n	8001cb2 <HAL_RCC_OscConfig+0xe6>
 8001cd2:	e015      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fce8 	bl	80016a8 <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cde:	f7ff fce3 	bl	80016a8 <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e333      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cf0:	4b84      	ldr	r3, [pc, #528]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x112>
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d100      	bne.n	8001d0c <HAL_RCC_OscConfig+0x140>
 8001d0a:	e098      	b.n	8001e3e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	2220      	movs	r2, #32
 8001d16:	4013      	ands	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d20:	2120      	movs	r1, #32
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	2220      	movs	r2, #32
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d13d      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1ea>
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d13a      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_RCC_OscConfig+0x188>
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e301      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a6d      	ldr	r2, [pc, #436]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	021a      	lsls	r2, r3, #8
 8001d64:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d6a:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2209      	movs	r2, #9
 8001d70:	4393      	bics	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7c:	f000 fc20 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	220f      	movs	r2, #15
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a61      	ldr	r2, [pc, #388]	; (8001f14 <HAL_RCC_OscConfig+0x348>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	000a      	movs	r2, r1
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <HAL_RCC_OscConfig+0x34c>)
 8001d96:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d98:	2513      	movs	r5, #19
 8001d9a:	197c      	adds	r4, r7, r5
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fc59 	bl	8001654 <HAL_InitTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001da6:	197b      	adds	r3, r7, r5
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d047      	beq.n	8001e3e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001dae:	2313      	movs	r3, #19
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	e2d0      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d027      	beq.n	8001e0c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dbc:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2209      	movs	r2, #9
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fc6b 	bl	80016a8 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc66 	bl	80016a8 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e2b6      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2204      	movs	r2, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f1      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a45      	ldr	r2, [pc, #276]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	021a      	lsls	r2, r3, #8
 8001e04:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e018      	b.n	8001e3e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	438a      	bics	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fc46 	bl	80016a8 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e22:	f7ff fc41 	bl	80016a8 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e291      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1f1      	bne.n	8001e22 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2210      	movs	r2, #16
 8001e44:	4013      	ands	r3, r2
 8001e46:	d100      	bne.n	8001e4a <HAL_RCC_OscConfig+0x27e>
 8001e48:	e09f      	b.n	8001f8a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d13f      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x29c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e277      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <HAL_RCC_OscConfig+0x350>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	0a19      	lsrs	r1, r3, #8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	0b5b      	lsrs	r3, r3, #13
 8001e96:	3301      	adds	r3, #1
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0212      	lsls	r2, r2, #8
 8001e9c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	210f      	movs	r1, #15
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	491a      	ldr	r1, [pc, #104]	; (8001f14 <HAL_RCC_OscConfig+0x348>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_RCC_OscConfig+0x34c>)
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001eb2:	2513      	movs	r5, #19
 8001eb4:	197c      	adds	r4, r7, r5
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fbcc 	bl	8001654 <HAL_InitTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ec0:	197b      	adds	r3, r7, r5
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d060      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001ec8:	2313      	movs	r3, #19
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	e243      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03e      	beq.n	8001f56 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0049      	lsls	r1, r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fbdf 	bl	80016a8 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eee:	e017      	b.n	8001f20 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fbda 	bl	80016a8 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e22a      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	fffeffff 	.word	0xfffeffff
 8001f0c:	fffbffff 	.word	0xfffbffff
 8001f10:	ffffe0ff 	.word	0xffffe0ff
 8001f14:	08003b50 	.word	0x08003b50
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f20:	4bc6      	ldr	r3, [pc, #792]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0e1      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2c:	4bc3      	ldr	r3, [pc, #780]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4ac3      	ldr	r2, [pc, #780]	; (8002240 <HAL_RCC_OscConfig+0x674>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3a:	4bc0      	ldr	r3, [pc, #768]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f40:	4bbe      	ldr	r3, [pc, #760]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	0a19      	lsrs	r1, r3, #8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	061a      	lsls	r2, r3, #24
 8001f4e:	4bbb      	ldr	r3, [pc, #748]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	e019      	b.n	8001f8a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f56:	4bb9      	ldr	r3, [pc, #740]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4bb8      	ldr	r3, [pc, #736]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f5c:	49b9      	ldr	r1, [pc, #740]	; (8002244 <HAL_RCC_OscConfig+0x678>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fba1 	bl	80016a8 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fb9c 	bl	80016a8 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1ec      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f7e:	4baf      	ldr	r3, [pc, #700]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4013      	ands	r3, r2
 8001f92:	d036      	beq.n	8002002 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	4ba7      	ldr	r3, [pc, #668]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa0:	4ba6      	ldr	r3, [pc, #664]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fb7e 	bl	80016a8 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fb79 	bl	80016a8 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1c9      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fc4:	4b9d      	ldr	r3, [pc, #628]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0f1      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3e6>
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd0:	4b9a      	ldr	r3, [pc, #616]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd4:	4b99      	ldr	r3, [pc, #612]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fb64 	bl	80016a8 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fb5f 	bl	80016a8 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1af      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff8:	4b90      	ldr	r3, [pc, #576]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCC_OscConfig+0x442>
 800200c:	e0af      	b.n	800216e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2323      	movs	r3, #35	; 0x23
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	4013      	ands	r3, r2
 8002020:	d10a      	bne.n	8002038 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b86      	ldr	r3, [pc, #536]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002026:	4b85      	ldr	r3, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0549      	lsls	r1, r1, #21
 800202c:	430a      	orrs	r2, r1
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002030:	2323      	movs	r3, #35	; 0x23
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b83      	ldr	r3, [pc, #524]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d11a      	bne.n	800207a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002044:	4b80      	ldr	r3, [pc, #512]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7ff fb29 	bl	80016a8 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7ff fb24 	bl	80016a8 <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e174      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	429a      	cmp	r2, r3
 8002084:	d107      	bne.n	8002096 <HAL_RCC_OscConfig+0x4ca>
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800208a:	4b6c      	ldr	r3, [pc, #432]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	0049      	lsls	r1, r1, #1
 8002090:	430a      	orrs	r2, r1
 8002092:	651a      	str	r2, [r3, #80]	; 0x50
 8002094:	e031      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a2:	4b66      	ldr	r3, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020a4:	4967      	ldr	r1, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x678>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	651a      	str	r2, [r3, #80]	; 0x50
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020b0:	4966      	ldr	r1, [pc, #408]	; (800224c <HAL_RCC_OscConfig+0x680>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	651a      	str	r2, [r3, #80]	; 0x50
 80020b6:	e020      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	23a0      	movs	r3, #160	; 0xa0
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10e      	bne.n	80020e2 <HAL_RCC_OscConfig+0x516>
 80020c4:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	00c9      	lsls	r1, r1, #3
 80020ce:	430a      	orrs	r2, r1
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50
 80020d2:	4b5a      	ldr	r3, [pc, #360]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d6:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0049      	lsls	r1, r1, #1
 80020dc:	430a      	orrs	r2, r1
 80020de:	651a      	str	r2, [r3, #80]	; 0x50
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 80020e2:	4b56      	ldr	r3, [pc, #344]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e6:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020e8:	4956      	ldr	r1, [pc, #344]	; (8002244 <HAL_RCC_OscConfig+0x678>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	651a      	str	r2, [r3, #80]	; 0x50
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f2:	4b52      	ldr	r3, [pc, #328]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020f4:	4955      	ldr	r1, [pc, #340]	; (800224c <HAL_RCC_OscConfig+0x680>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fad1 	bl	80016a8 <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800210a:	e009      	b.n	8002120 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7ff facc 	bl	80016a8 <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_RCC_OscConfig+0x684>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e11b      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002120:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d0ef      	beq.n	800210c <HAL_RCC_OscConfig+0x540>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff fabb 	bl	80016a8 <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002136:	e009      	b.n	800214c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff fab6 	bl	80016a8 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <HAL_RCC_OscConfig+0x684>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e105      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800214e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d1ef      	bne.n	8002138 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002158:	2323      	movs	r3, #35	; 0x23
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002166:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002168:	493a      	ldr	r1, [pc, #232]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800216a:	400a      	ands	r2, r1
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2220      	movs	r2, #32
 8002174:	4013      	ands	r3, r2
 8002176:	d049      	beq.n	800220c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d026      	beq.n	80021ce <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800218e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002192:	2101      	movs	r1, #1
 8002194:	430a      	orrs	r2, r1
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	0189      	lsls	r1, r1, #6
 80021a2:	430a      	orrs	r2, r1
 80021a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff fa7f 	bl	80016a8 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7ff fa7a 	bl	80016a8 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0ca      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_OscConfig+0x5e4>
 80021cc:	e01e      	b.n	800220c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	438a      	bics	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 80021e0:	491e      	ldr	r1, [pc, #120]	; (800225c <HAL_RCC_OscConfig+0x690>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fa5f 	bl	80016a8 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f0:	f7ff fa5a 	bl	80016a8 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0aa      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	d1f1      	bne.n	80021f0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x64a>
 8002214:	e09f      	b.n	8002356 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d100      	bne.n	800221e <HAL_RCC_OscConfig+0x652>
 800221c:	e078      	b.n	8002310 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	2b02      	cmp	r3, #2
 8002224:	d159      	bne.n	80022da <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <HAL_RCC_OscConfig+0x694>)
 800222e:	400a      	ands	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fa39 	bl	80016a8 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x6aa>
 800223c:	40021000 	.word	0x40021000
 8002240:	ffff1fff 	.word	0xffff1fff
 8002244:	fffffeff 	.word	0xfffffeff
 8002248:	40007000 	.word	0x40007000
 800224c:	fffffbff 	.word	0xfffffbff
 8002250:	00001388 	.word	0x00001388
 8002254:	efffffff 	.word	0xefffffff
 8002258:	40010000 	.word	0x40010000
 800225c:	ffffdfff 	.word	0xffffdfff
 8002260:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fa20 	bl	80016a8 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e070      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	049b      	lsls	r3, r3, #18
 800227e:	4013      	ands	r3, r2
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4a37      	ldr	r2, [pc, #220]	; (8002364 <HAL_RCC_OscConfig+0x798>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	431a      	orrs	r2, r3
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0449      	lsls	r1, r1, #17
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff f9fa 	bl	80016a8 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff f9f5 	bl	80016a8 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e045      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	049b      	lsls	r3, r3, #18
 80022d4:	4013      	ands	r3, r2
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x6ee>
 80022d8:	e03d      	b.n	8002356 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022e0:	4921      	ldr	r1, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff f9df 	bl	80016a8 <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff f9da 	bl	80016a8 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e02a      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	4013      	ands	r3, r2
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x724>
 800230e:	e022      	b.n	8002356 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	401a      	ands	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	429a      	cmp	r2, r3
 8002330:	d10f      	bne.n	8002352 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	23f0      	movs	r3, #240	; 0xf0
 8002336:	039b      	lsls	r3, r3, #14
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	23c0      	movs	r3, #192	; 0xc0
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b00a      	add	sp, #40	; 0x28
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	ff02ffff 	.word	0xff02ffff
 8002368:	feffffff 	.word	0xfeffffff

0800236c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e10d      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d911      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4393      	bics	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a0:	4b80      	ldr	r3, [pc, #512]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0f4      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2202      	movs	r2, #2
 80023b8:	4013      	ands	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	22f0      	movs	r2, #240	; 0xf0
 80023c2:	4393      	bics	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b77      	ldr	r3, [pc, #476]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_ClockConfig+0x70>
 80023da:	e089      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e4:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d120      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d3      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	049b      	lsls	r3, r3, #18
 8002404:	4013      	ands	r3, r2
 8002406:	d114      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0c7      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d106      	bne.n	8002422 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2204      	movs	r2, #4
 800241a:	4013      	ands	r3, r2
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0bc      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002422:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4013      	ands	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0b4      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2203      	movs	r2, #3
 8002438:	4393      	bics	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002446:	f7ff f92f 	bl	80016a8 <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d111      	bne.n	800247a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002456:	e009      	b.n	800246c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7ff f926 	bl	80016a8 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e097      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800246c:	4b4e      	ldr	r3, [pc, #312]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	220c      	movs	r2, #12
 8002472:	4013      	ands	r3, r2
 8002474:	2b08      	cmp	r3, #8
 8002476:	d1ef      	bne.n	8002458 <HAL_RCC_ClockConfig+0xec>
 8002478:	e03a      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d111      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002482:	e009      	b.n	8002498 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7ff f910 	bl	80016a8 <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	4a47      	ldr	r2, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e081      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	220c      	movs	r2, #12
 800249e:	4013      	ands	r3, r2
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d1ef      	bne.n	8002484 <HAL_RCC_ClockConfig+0x118>
 80024a4:	e024      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d11b      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	e009      	b.n	80024c4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7ff f8fa 	bl	80016a8 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e06b      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c4:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	220c      	movs	r2, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d1ef      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x144>
 80024d0:	e00e      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7ff f8e9 	bl	80016a8 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a33      	ldr	r2, [pc, #204]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e05a      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	220c      	movs	r2, #12
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d211      	bcs.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	4393      	bics	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03c      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2204      	movs	r2, #4
 8002528:	4013      	ands	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_RCC_ClockConfig+0x244>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	4013      	ands	r3, r2
 8002548:	d00a      	beq.n	8002560 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_RCC_ClockConfig+0x248>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00da      	lsls	r2, r3, #3
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800255c:	430a      	orrs	r2, r1
 800255e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002560:	f000 f82e 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002564:	0001      	movs	r1, r0
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	220f      	movs	r2, #15
 800256e:	4013      	ands	r3, r2
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_RCC_ClockConfig+0x24c>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	000a      	movs	r2, r1
 8002576:	40da      	lsrs	r2, r3
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_RCC_ClockConfig+0x250>)
 800257a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800257c:	250b      	movs	r5, #11
 800257e:	197c      	adds	r4, r7, r5
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff f867 	bl	8001654 <HAL_InitTick>
 8002586:	0003      	movs	r3, r0
 8002588:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800258a:	197b      	adds	r3, r7, r5
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002592:	230b      	movs	r3, #11
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	e000      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	00001388 	.word	0x00001388
 80025b0:	fffff8ff 	.word	0xfffff8ff
 80025b4:	ffffc7ff 	.word	0xffffc7ff
 80025b8:	08003b50 	.word	0x08003b50
 80025bc:	20000000 	.word	0x20000000

080025c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	220c      	movs	r2, #12
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d00e      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x34>
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d00f      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d157      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025de:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2210      	movs	r2, #16
 80025e4:	4013      	ands	r3, r2
 80025e6:	d002      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ea:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025ec:	e05d      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80025f0:	613b      	str	r3, [r7, #16]
      break;
 80025f2:	e05a      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	e057      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	220f      	movs	r2, #15
 8002600:	4013      	ands	r3, r2
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	0d9b      	lsrs	r3, r3, #22
 800260c:	2203      	movs	r2, #3
 800260e:	4013      	ands	r3, r2
 8002610:	3301      	adds	r3, #1
 8002612:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	4013      	ands	r3, r2
 800261e:	d00f      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	000a      	movs	r2, r1
 8002624:	0152      	lsls	r2, r2, #5
 8002626:	1a52      	subs	r2, r2, r1
 8002628:	0193      	lsls	r3, r2, #6
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	185b      	adds	r3, r3, r1
 8002630:	025b      	lsls	r3, r3, #9
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f7fd fd67 	bl	8000108 <__udivsi3>
 800263a:	0003      	movs	r3, r0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e023      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d00f      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	000a      	movs	r2, r1
 800264e:	0152      	lsls	r2, r2, #5
 8002650:	1a52      	subs	r2, r2, r1
 8002652:	0193      	lsls	r3, r2, #6
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	185b      	adds	r3, r3, r1
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f7fd fd52 	bl	8000108 <__udivsi3>
 8002664:	0003      	movs	r3, r0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e00e      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	000a      	movs	r2, r1
 800266e:	0152      	lsls	r2, r2, #5
 8002670:	1a52      	subs	r2, r2, r1
 8002672:	0193      	lsls	r3, r2, #6
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	185b      	adds	r3, r3, r1
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f7fd fd42 	bl	8000108 <__udivsi3>
 8002684:	0003      	movs	r3, r0
 8002686:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
      break;
 800268c:	e00d      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0b5b      	lsrs	r3, r3, #13
 8002694:	2207      	movs	r2, #7
 8002696:	4013      	ands	r3, r2
 8002698:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	0212      	lsls	r2, r2, #8
 80026a2:	409a      	lsls	r2, r3
 80026a4:	0013      	movs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      break;
 80026a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026aa:	693b      	ldr	r3, [r7, #16]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b006      	add	sp, #24
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	003d0900 	.word	0x003d0900
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	08003b60 	.word	0x08003b60

080026c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e059      	b.n	800278e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2251      	movs	r2, #81	; 0x51
 80026e4:	5c9b      	ldrb	r3, [r3, r2]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2250      	movs	r2, #80	; 0x50
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fe fddc 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2251      	movs	r2, #81	; 0x51
 8002700:	2102      	movs	r1, #2
 8002702:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2140      	movs	r1, #64	; 0x40
 8002710:	438a      	bics	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6999      	ldr	r1, [r3, #24]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	400b      	ands	r3, r1
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	431a      	orrs	r2, r3
 8002748:	0011      	movs	r1, r2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	2204      	movs	r2, #4
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <HAL_SPI_Init+0xd0>)
 800277a:	400a      	ands	r2, r1
 800277c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2251      	movs	r2, #81	; 0x51
 8002788:	2101      	movs	r1, #1
 800278a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	fffff7ff 	.word	0xfffff7ff

0800279c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	1dbb      	adds	r3, r7, #6
 80027aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027ac:	231f      	movs	r3, #31
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2250      	movs	r2, #80	; 0x50
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_SPI_Transmit+0x26>
 80027be:	2302      	movs	r3, #2
 80027c0:	e136      	b.n	8002a30 <HAL_SPI_Transmit+0x294>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2250      	movs	r2, #80	; 0x50
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ca:	f7fe ff6d 	bl	80016a8 <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027d2:	2316      	movs	r3, #22
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	1dba      	adds	r2, r7, #6
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2251      	movs	r2, #81	; 0x51
 80027e0:	5c9b      	ldrb	r3, [r3, r2]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d004      	beq.n	80027f2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80027e8:	231f      	movs	r3, #31
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80027f0:	e113      	b.n	8002a1a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_SPI_Transmit+0x64>
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002800:	231f      	movs	r3, #31
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
    goto error;
 8002808:	e107      	b.n	8002a1a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2251      	movs	r2, #81	; 0x51
 800280e:	2103      	movs	r1, #3
 8002810:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1dba      	adds	r2, r7, #6
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1dba      	adds	r2, r7, #6
 800282a:	8812      	ldrh	r2, [r2, #0]
 800282c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	429a      	cmp	r2, r3
 8002856:	d108      	bne.n	800286a <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	01c9      	lsls	r1, r1, #7
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	4013      	ands	r3, r2
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d007      	beq.n	8002888 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2140      	movs	r1, #64	; 0x40
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	429a      	cmp	r2, r3
 8002892:	d14e      	bne.n	8002932 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_SPI_Transmit+0x10a>
 800289c:	2316      	movs	r3, #22
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d13f      	bne.n	8002926 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ca:	e02c      	b.n	8002926 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d112      	bne.n	8002900 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80028fe:	e012      	b.n	8002926 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002900:	f7fe fed2 	bl	80016a8 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d802      	bhi.n	8002916 <HAL_SPI_Transmit+0x17a>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	d102      	bne.n	800291c <HAL_SPI_Transmit+0x180>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800291c:	231f      	movs	r3, #31
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2203      	movs	r2, #3
 8002922:	701a      	strb	r2, [r3, #0]
          goto error;
 8002924:	e079      	b.n	8002a1a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1cd      	bne.n	80028cc <HAL_SPI_Transmit+0x130>
 8002930:	e04f      	b.n	80029d2 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_SPI_Transmit+0x1a8>
 800293a:	2316      	movs	r3, #22
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d141      	bne.n	80029c8 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800296a:	e02d      	b.n	80029c8 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d113      	bne.n	80029a2 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	86da      	strh	r2, [r3, #54]	; 0x36
 80029a0:	e012      	b.n	80029c8 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a2:	f7fe fe81 	bl	80016a8 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d802      	bhi.n	80029b8 <HAL_SPI_Transmit+0x21c>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_SPI_Transmit+0x222>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80029be:	231f      	movs	r3, #31
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2203      	movs	r2, #3
 80029c4:	701a      	strb	r2, [r3, #0]
          goto error;
 80029c6:	e028      	b.n	8002a1a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1cc      	bne.n	800296c <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 fbe1 	bl	80031a0 <SPI_EndRxTxTransaction>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8002a0e:	231f      	movs	r3, #31
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e000      	b.n	8002a1a <HAL_SPI_Transmit+0x27e>
  }

error:
 8002a18:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2251      	movs	r2, #81	; 0x51
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2250      	movs	r2, #80	; 0x50
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a2a:	231f      	movs	r3, #31
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b008      	add	sp, #32
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	1dbb      	adds	r3, r7, #6
 8002a46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a48:	2317      	movs	r3, #23
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	2382      	movs	r3, #130	; 0x82
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d113      	bne.n	8002a84 <HAL_SPI_Receive+0x4c>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10f      	bne.n	8002a84 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2251      	movs	r2, #81	; 0x51
 8002a68:	2104      	movs	r1, #4
 8002a6a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a6c:	1dbb      	adds	r3, r7, #6
 8002a6e:	881c      	ldrh	r4, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	0023      	movs	r3, r4
 8002a7c:	f000 f8fa 	bl	8002c74 <HAL_SPI_TransmitReceive>
 8002a80:	0003      	movs	r3, r0
 8002a82:	e0f1      	b.n	8002c68 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2250      	movs	r2, #80	; 0x50
 8002a88:	5c9b      	ldrb	r3, [r3, r2]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Receive+0x5a>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0ea      	b.n	8002c68 <HAL_SPI_Receive+0x230>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2250      	movs	r2, #80	; 0x50
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9a:	f7fe fe05 	bl	80016a8 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2251      	movs	r2, #81	; 0x51
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d004      	beq.n	8002ab8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002aae:	2317      	movs	r3, #23
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ab6:	e0cc      	b.n	8002c52 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_SPI_Receive+0x8e>
 8002abe:	1dbb      	adds	r3, r7, #6
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002ac6:	2317      	movs	r3, #23
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ace:	e0c0      	b.n	8002c52 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2251      	movs	r2, #81	; 0x51
 8002ad4:	2104      	movs	r1, #4
 8002ad6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1dba      	adds	r2, r7, #6
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1dba      	adds	r2, r7, #6
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d107      	bne.n	8002b2e <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4951      	ldr	r1, [pc, #324]	; (8002c70 <HAL_SPI_Receive+0x238>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d007      	beq.n	8002b4c <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2140      	movs	r1, #64	; 0x40
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d164      	bne.n	8002c1e <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b54:	e02f      	b.n	8002bb6 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d115      	bne.n	8002b90 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b8e:	e012      	b.n	8002bb6 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b90:	f7fe fd8a 	bl	80016a8 <HAL_GetTick>
 8002b94:	0002      	movs	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d802      	bhi.n	8002ba6 <HAL_SPI_Receive+0x16e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	d102      	bne.n	8002bac <HAL_SPI_Receive+0x174>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d104      	bne.n	8002bb6 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 8002bac:	2317      	movs	r3, #23
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	701a      	strb	r2, [r3, #0]
          goto error;
 8002bb4:	e04d      	b.n	8002c52 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ca      	bne.n	8002b56 <HAL_SPI_Receive+0x11e>
 8002bc0:	e032      	b.n	8002c28 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d113      	bne.n	8002bf8 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	b292      	uxth	r2, r2
 8002bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	1c9a      	adds	r2, r3, #2
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bf6:	e012      	b.n	8002c1e <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf8:	f7fe fd56 	bl	80016a8 <HAL_GetTick>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d802      	bhi.n	8002c0e <HAL_SPI_Receive+0x1d6>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	d102      	bne.n	8002c14 <HAL_SPI_Receive+0x1dc>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8002c14:	2317      	movs	r3, #23
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2203      	movs	r2, #3
 8002c1a:	701a      	strb	r2, [r3, #0]
          goto error;
 8002c1c:	e019      	b.n	8002c52 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1cc      	bne.n	8002bc2 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 fa4c 	bl	80030cc <SPI_EndRxTransaction>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8002c46:	2317      	movs	r3, #23
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e000      	b.n	8002c52 <HAL_SPI_Receive+0x21a>
  }

error :
 8002c50:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2251      	movs	r2, #81	; 0x51
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2250      	movs	r2, #80	; 0x50
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c62:	2317      	movs	r3, #23
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	781b      	ldrb	r3, [r3, #0]
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b007      	add	sp, #28
 8002c6e:	bd90      	pop	{r4, r7, pc}
 8002c70:	ffffbfff 	.word	0xffffbfff

08002c74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08c      	sub	sp, #48	; 0x30
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	001a      	movs	r2, r3
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c86:	2301      	movs	r3, #1
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c8a:	232b      	movs	r3, #43	; 0x2b
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2250      	movs	r2, #80	; 0x50
 8002c96:	5c9b      	ldrb	r3, [r3, r2]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e1a1      	b.n	8002fe4 <HAL_SPI_TransmitReceive+0x370>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2250      	movs	r2, #80	; 0x50
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ca8:	f7fe fcfe 	bl	80016a8 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cb0:	2023      	movs	r0, #35	; 0x23
 8002cb2:	183b      	adds	r3, r7, r0
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	2151      	movs	r1, #81	; 0x51
 8002cb8:	5c52      	ldrb	r2, [r2, r1]
 8002cba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cc2:	231a      	movs	r3, #26
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	1cba      	adds	r2, r7, #2
 8002cc8:	8812      	ldrh	r2, [r2, #0]
 8002cca:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ccc:	183b      	adds	r3, r7, r0
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d012      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x86>
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	2382      	movs	r3, #130	; 0x82
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d108      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x7c>
 8002ce6:	2323      	movs	r3, #35	; 0x23
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d004      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8002cf0:	232b      	movs	r3, #43	; 0x2b
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002cf8:	e169      	b.n	8002fce <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x9a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x9a>
 8002d06:	1cbb      	adds	r3, r7, #2
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8002d0e:	232b      	movs	r3, #43	; 0x2b
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d16:	e15a      	b.n	8002fce <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2251      	movs	r2, #81	; 0x51
 8002d1c:	5c9b      	ldrb	r3, [r3, r2]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d003      	beq.n	8002d2c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2251      	movs	r2, #81	; 0x51
 8002d28:	2105      	movs	r1, #5
 8002d2a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1cba      	adds	r2, r7, #2
 8002d3c:	8812      	ldrh	r2, [r2, #0]
 8002d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1cba      	adds	r2, r7, #2
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1cba      	adds	r2, r7, #2
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1cba      	adds	r2, r7, #2
 8002d5a:	8812      	ldrh	r2, [r2, #0]
 8002d5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d007      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2140      	movs	r1, #64	; 0x40
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d000      	beq.n	8002d96 <HAL_SPI_TransmitReceive+0x122>
 8002d94:	e07a      	b.n	8002e8c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x134>
 8002d9e:	231a      	movs	r3, #26
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d166      	bne.n	8002e76 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	881a      	ldrh	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	1c9a      	adds	r2, r3, #2
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dcc:	e053      	b.n	8002e76 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d11b      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x1a0>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x1a0>
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d113      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d119      	bne.n	8002e56 <HAL_SPI_TransmitReceive+0x1e2>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d014      	beq.n	8002e56 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	b292      	uxth	r2, r2
 8002e38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e56:	f7fe fc27 	bl	80016a8 <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d807      	bhi.n	8002e76 <HAL_SPI_TransmitReceive+0x202>
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	3301      	adds	r3, #1
 8002e6a:	d004      	beq.n	8002e76 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8002e6c:	232b      	movs	r3, #43	; 0x2b
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2203      	movs	r2, #3
 8002e72:	701a      	strb	r2, [r3, #0]
        goto error;
 8002e74:	e0ab      	b.n	8002fce <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1a6      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x15a>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1a1      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x15a>
 8002e8a:	e07f      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x22c>
 8002e94:	231a      	movs	r3, #26
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d000      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x22c>
 8002e9e:	e06b      	b.n	8002f78 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec6:	e057      	b.n	8002f78 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d11c      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x29c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d017      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x29c>
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d114      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2201      	movs	r2, #1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d119      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x2de>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d014      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f52:	f7fe fba9 	bl	80016a8 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d802      	bhi.n	8002f68 <HAL_SPI_TransmitReceive+0x2f4>
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	3301      	adds	r3, #1
 8002f66:	d102      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x2fa>
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8002f6e:	232b      	movs	r3, #43	; 0x2b
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	2203      	movs	r2, #3
 8002f74:	701a      	strb	r2, [r3, #0]
        goto error;
 8002f76:	e02a      	b.n	8002fce <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1a2      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x254>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d19d      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 f904 	bl	80031a0 <SPI_EndRxTxTransaction>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8002f9c:	232b      	movs	r3, #43	; 0x2b
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002faa:	e010      	b.n	8002fce <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	e000      	b.n	8002fce <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8002fcc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2251      	movs	r2, #81	; 0x51
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2250      	movs	r2, #80	; 0x50
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002fde:	232b      	movs	r3, #43	; 0x2b
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	781b      	ldrb	r3, [r3, #0]
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b00c      	add	sp, #48	; 0x30
 8002fea:	bd80      	pop	{r7, pc}

08002fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ffc:	e050      	b.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	d04d      	beq.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003004:	f7fe fb50 	bl	80016a8 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d902      	bls.n	800301a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d142      	bne.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	21e0      	movs	r1, #224	; 0xe0
 8003026:	438a      	bics	r2, r1
 8003028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	2382      	movs	r3, #130	; 0x82
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	429a      	cmp	r2, r3
 8003034:	d113      	bne.n	800305e <SPI_WaitFlagStateUntilTimeout+0x72>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	429a      	cmp	r2, r3
 8003040:	d005      	beq.n	800304e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	429a      	cmp	r2, r3
 800304c:	d107      	bne.n	800305e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	438a      	bics	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	429a      	cmp	r2, r3
 8003068:	d110      	bne.n	800308c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4914      	ldr	r1, [pc, #80]	; (80030c8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003076:	400a      	ands	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	0189      	lsls	r1, r1, #6
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2251      	movs	r2, #81	; 0x51
 8003090:	2101      	movs	r1, #1
 8003092:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2250      	movs	r2, #80	; 0x50
 8003098:	2100      	movs	r1, #0
 800309a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e00f      	b.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	425a      	negs	r2, r3
 80030b0:	4153      	adcs	r3, r2
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	001a      	movs	r2, r3
 80030b6:	1dfb      	adds	r3, r7, #7
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d19f      	bne.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	ffffdfff 	.word	0xffffdfff

080030cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	2382      	movs	r3, #130	; 0x82
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d113      	bne.n	800310c <SPI_EndRxTransaction+0x40>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d005      	beq.n	80030fc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d107      	bne.n	800310c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2140      	movs	r1, #64	; 0x40
 8003108:	438a      	bics	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	2382      	movs	r3, #130	; 0x82
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	429a      	cmp	r2, r3
 8003116:	d12b      	bne.n	8003170 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	429a      	cmp	r2, r3
 8003122:	d012      	beq.n	800314a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	0013      	movs	r3, r2
 800312e:	2200      	movs	r2, #0
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	f7ff ff5b 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d02d      	beq.n	8003196 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	2220      	movs	r2, #32
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e026      	b.n	8003198 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	0013      	movs	r3, r2
 8003154:	2200      	movs	r2, #0
 8003156:	2101      	movs	r1, #1
 8003158:	f7ff ff48 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d01a      	beq.n	8003196 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	2220      	movs	r2, #32
 8003166:	431a      	orrs	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e013      	b.n	8003198 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	0013      	movs	r3, r2
 800317a:	2200      	movs	r2, #0
 800317c:	2101      	movs	r1, #1
 800317e:	f7ff ff35 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d007      	beq.n	8003196 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	2220      	movs	r2, #32
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e000      	b.n	8003198 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}

080031a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	2382      	movs	r3, #130	; 0x82
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d112      	bne.n	80031de <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	0013      	movs	r3, r2
 80031c2:	2200      	movs	r2, #0
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	f7ff ff11 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d020      	beq.n	8003210 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	2220      	movs	r2, #32
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e019      	b.n	8003212 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2251      	movs	r2, #81	; 0x51
 80031e2:	5c9b      	ldrb	r3, [r3, r2]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d112      	bne.n	8003210 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	0013      	movs	r3, r2
 80031f4:	2200      	movs	r2, #0
 80031f6:	2101      	movs	r1, #1
 80031f8:	f7ff fef8 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 80031fc:	1e03      	subs	r3, r0, #0
 80031fe:	d007      	beq.n	8003210 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	2220      	movs	r2, #32
 8003206:	431a      	orrs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e000      	b.n	8003212 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e01e      	b.n	800326a <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2239      	movs	r2, #57	; 0x39
 8003230:	5c9b      	ldrb	r3, [r3, r2]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2238      	movs	r2, #56	; 0x38
 800323c:	2100      	movs	r1, #0
 800323e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	0018      	movs	r0, r3
 8003244:	f7fe f89e 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2239      	movs	r2, #57	; 0x39
 800324c:	2102      	movs	r1, #2
 800324e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	0019      	movs	r1, r3
 800325a:	0010      	movs	r0, r2
 800325c:	f000 fa40 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2239      	movs	r2, #57	; 0x39
 8003264:	2101      	movs	r1, #1
 8003266:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b002      	add	sp, #8
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2207      	movs	r2, #7
 8003292:	4013      	ands	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b06      	cmp	r3, #6
 800329a:	d007      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2101      	movs	r1, #1
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2202      	movs	r2, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d124      	bne.n	8003316 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d11d      	bne.n	8003316 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2203      	movs	r2, #3
 80032e0:	4252      	negs	r2, r2
 80032e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2203      	movs	r2, #3
 80032f2:	4013      	ands	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 f9d9 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 80032fe:	e007      	b.n	8003310 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	0018      	movs	r0, r3
 8003304:	f000 f9cc 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f9d8 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2204      	movs	r2, #4
 800331e:	4013      	ands	r3, r2
 8003320:	2b04      	cmp	r3, #4
 8003322:	d125      	bne.n	8003370 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2204      	movs	r2, #4
 800332c:	4013      	ands	r3, r2
 800332e:	2b04      	cmp	r3, #4
 8003330:	d11e      	bne.n	8003370 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2205      	movs	r2, #5
 8003338:	4252      	negs	r2, r2
 800333a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	23c0      	movs	r3, #192	; 0xc0
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4013      	ands	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	0018      	movs	r0, r3
 8003354:	f000 f9ac 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 8003358:	e007      	b.n	800336a <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f000 f99f 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f9ab 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2208      	movs	r2, #8
 8003378:	4013      	ands	r3, r2
 800337a:	2b08      	cmp	r3, #8
 800337c:	d124      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2208      	movs	r2, #8
 8003386:	4013      	ands	r3, r2
 8003388:	2b08      	cmp	r3, #8
 800338a:	d11d      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2209      	movs	r2, #9
 8003392:	4252      	negs	r2, r2
 8003394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2204      	movs	r2, #4
 800339a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	2203      	movs	r2, #3
 80033a4:	4013      	ands	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 f980 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 80033b0:	e007      	b.n	80033c2 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 f973 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0018      	movs	r0, r3
 80033be:	f000 f97f 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2210      	movs	r2, #16
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d125      	bne.n	8003422 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2210      	movs	r2, #16
 80033de:	4013      	ands	r3, r2
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d11e      	bne.n	8003422 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2211      	movs	r2, #17
 80033ea:	4252      	negs	r2, r2
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2208      	movs	r2, #8
 80033f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f953 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 800340a:	e007      	b.n	800341c <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f946 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f952 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2201      	movs	r2, #1
 800342a:	4013      	ands	r3, r2
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10f      	bne.n	8003450 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	4013      	ands	r3, r2
 800343a:	2b01      	cmp	r3, #1
 800343c:	d108      	bne.n	8003450 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2202      	movs	r2, #2
 8003444:	4252      	negs	r2, r2
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f000 f920 	bl	8003690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	4013      	ands	r3, r2
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d10f      	bne.n	800347e <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2240      	movs	r2, #64	; 0x40
 8003466:	4013      	ands	r3, r2
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d108      	bne.n	800347e <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2241      	movs	r2, #65	; 0x41
 8003472:	4252      	negs	r2, r2
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 f929 	bl	80036d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2238      	movs	r2, #56	; 0x38
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_TIM_ConfigClockSource+0x18>
 800349c:	2302      	movs	r3, #2
 800349e:	e0ab      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2238      	movs	r2, #56	; 0x38
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2239      	movs	r2, #57	; 0x39
 80034ac:	2102      	movs	r1, #2
 80034ae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2277      	movs	r2, #119	; 0x77
 80034bc:	4393      	bics	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <HAL_TIM_ConfigClockSource+0x178>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d100      	bne.n	80034da <HAL_TIM_ConfigClockSource+0x52>
 80034d8:	e06b      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x12a>
 80034da:	d80e      	bhi.n	80034fa <HAL_TIM_ConfigClockSource+0x72>
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d100      	bne.n	80034e2 <HAL_TIM_ConfigClockSource+0x5a>
 80034e0:	e077      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x14a>
 80034e2:	d803      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x64>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d100      	bne.n	80034ea <HAL_TIM_ConfigClockSource+0x62>
 80034e8:	e073      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034ea:	e07c      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d100      	bne.n	80034f2 <HAL_TIM_ConfigClockSource+0x6a>
 80034f0:	e06f      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x14a>
 80034f2:	2b30      	cmp	r3, #48	; 0x30
 80034f4:	d100      	bne.n	80034f8 <HAL_TIM_ConfigClockSource+0x70>
 80034f6:	e06c      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80034f8:	e075      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80034fa:	2b70      	cmp	r3, #112	; 0x70
 80034fc:	d00e      	beq.n	800351c <HAL_TIM_ConfigClockSource+0x94>
 80034fe:	d804      	bhi.n	800350a <HAL_TIM_ConfigClockSource+0x82>
 8003500:	2b50      	cmp	r3, #80	; 0x50
 8003502:	d036      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0xea>
 8003504:	2b60      	cmp	r3, #96	; 0x60
 8003506:	d044      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003508:	e06d      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	0152      	lsls	r2, r2, #5
 800350e:	4293      	cmp	r3, r2
 8003510:	d068      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x15c>
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	0192      	lsls	r2, r2, #6
 8003516:	4293      	cmp	r3, r2
 8003518:	d017      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800351a:	e064      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f000 fa34 	bl	8003998 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2277      	movs	r2, #119	; 0x77
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]
      break;
 8003548:	e04d      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f000 fa1d 	bl	8003998 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	01c9      	lsls	r1, r1, #7
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
      break;
 8003570:	e039      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	001a      	movs	r2, r3
 8003580:	f000 f990 	bl	80038a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2150      	movs	r1, #80	; 0x50
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f9ea 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 8003590:	e029      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	001a      	movs	r2, r3
 80035a0:	f000 f9ae 	bl	8003900 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2160      	movs	r1, #96	; 0x60
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f9da 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 80035b0:	e019      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	001a      	movs	r2, r3
 80035c0:	f000 f970 	bl	80038a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2140      	movs	r1, #64	; 0x40
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 f9ca 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 80035d0:	e009      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0019      	movs	r1, r3
 80035dc:	0010      	movs	r0, r2
 80035de:	f000 f9c1 	bl	8003964 <TIM_ITRx_SetConfig>
      break;
 80035e2:	e000      	b.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80035e4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2239      	movs	r2, #57	; 0x39
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2238      	movs	r2, #56	; 0x38
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	ffff00ff 	.word	0xffff00ff

08003604 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2238      	movs	r2, #56	; 0x38
 8003612:	5c9b      	ldrb	r3, [r3, r2]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003618:	2302      	movs	r3, #2
 800361a:	e032      	b.n	8003682 <HAL_TIM_SlaveConfigSynchro+0x7e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2238      	movs	r2, #56	; 0x38
 8003620:	2101      	movs	r1, #1
 8003622:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2239      	movs	r2, #57	; 0x39
 8003628:	2102      	movs	r1, #2
 800362a:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0011      	movs	r1, r2
 8003632:	0018      	movs	r0, r3
 8003634:	f000 f8b2 	bl	800379c <TIM_SlaveTimer_SetConfig>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d009      	beq.n	8003650 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2239      	movs	r2, #57	; 0x39
 8003640:	2101      	movs	r1, #1
 8003642:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2238      	movs	r2, #56	; 0x38
 8003648:	2100      	movs	r1, #0
 800364a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e018      	b.n	8003682 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2140      	movs	r1, #64	; 0x40
 800365c:	438a      	bics	r2, r1
 800365e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4908      	ldr	r1, [pc, #32]	; (800368c <HAL_TIM_SlaveConfigSynchro+0x88>)
 800366c:	400a      	ands	r2, r1
 800366e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2239      	movs	r2, #57	; 0x39
 8003674:	2101      	movs	r1, #1
 8003676:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2238      	movs	r2, #56	; 0x38
 800367c:	2100      	movs	r1, #0
 800367e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	ffffbfff 	.word	0xffffbfff

08003690 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	05db      	lsls	r3, r3, #23
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d00b      	beq.n	8003712 <TIM_Base_SetConfig+0x32>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a23      	ldr	r2, [pc, #140]	; (800378c <TIM_Base_SetConfig+0xac>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <TIM_Base_SetConfig+0x32>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a22      	ldr	r2, [pc, #136]	; (8003790 <TIM_Base_SetConfig+0xb0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_Base_SetConfig+0x32>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a21      	ldr	r2, [pc, #132]	; (8003794 <TIM_Base_SetConfig+0xb4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2270      	movs	r2, #112	; 0x70
 8003716:	4393      	bics	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	05db      	lsls	r3, r3, #23
 800372a:	429a      	cmp	r2, r3
 800372c:	d00b      	beq.n	8003746 <TIM_Base_SetConfig+0x66>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a16      	ldr	r2, [pc, #88]	; (800378c <TIM_Base_SetConfig+0xac>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <TIM_Base_SetConfig+0x66>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <TIM_Base_SetConfig+0xb0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <TIM_Base_SetConfig+0x66>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <TIM_Base_SetConfig+0xb4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d108      	bne.n	8003758 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a13      	ldr	r2, [pc, #76]	; (8003798 <TIM_Base_SetConfig+0xb8>)
 800374a:	4013      	ands	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	4393      	bics	r3, r2
 800375e:	001a      	movs	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	615a      	str	r2, [r3, #20]
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b004      	add	sp, #16
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40000400 	.word	0x40000400
 8003790:	40010800 	.word	0x40010800
 8003794:	40011400 	.word	0x40011400
 8003798:	fffffcff 	.word	0xfffffcff

0800379c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2270      	movs	r2, #112	; 0x70
 80037b2:	4393      	bics	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2207      	movs	r2, #7
 80037c4:	4393      	bics	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b30      	cmp	r3, #48	; 0x30
 80037e0:	d05a      	beq.n	8003898 <TIM_SlaveTimer_SetConfig+0xfc>
 80037e2:	d806      	bhi.n	80037f2 <TIM_SlaveTimer_SetConfig+0x56>
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d057      	beq.n	8003898 <TIM_SlaveTimer_SetConfig+0xfc>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d055      	beq.n	8003898 <TIM_SlaveTimer_SetConfig+0xfc>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d053      	beq.n	8003898 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80037f0:	e053      	b.n	800389a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 80037f2:	2b50      	cmp	r3, #80	; 0x50
 80037f4:	d03c      	beq.n	8003870 <TIM_SlaveTimer_SetConfig+0xd4>
 80037f6:	d802      	bhi.n	80037fe <TIM_SlaveTimer_SetConfig+0x62>
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d010      	beq.n	800381e <TIM_SlaveTimer_SetConfig+0x82>
      break;
 80037fc:	e04d      	b.n	800389a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 80037fe:	2b60      	cmp	r3, #96	; 0x60
 8003800:	d040      	beq.n	8003884 <TIM_SlaveTimer_SetConfig+0xe8>
 8003802:	2b70      	cmp	r3, #112	; 0x70
 8003804:	d000      	beq.n	8003808 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8003806:	e048      	b.n	800389a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68d9      	ldr	r1, [r3, #12]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f000 f8be 	bl	8003998 <TIM_ETR_SetConfig>
      break;
 800381c:	e03d      	b.n	800389a <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d101      	bne.n	800382a <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e038      	b.n	800389c <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2101      	movs	r1, #1
 800383e:	438a      	bics	r2, r1
 8003840:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	22f0      	movs	r2, #240	; 0xf0
 800384e:	4393      	bics	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	621a      	str	r2, [r3, #32]
      break;
 800386e:	e014      	b.n	800389a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	001a      	movs	r2, r3
 800387e:	f000 f811 	bl	80038a4 <TIM_TI1_ConfigInputStage>
      break;
 8003882:	e00a      	b.n	800389a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	001a      	movs	r2, r3
 8003892:	f000 f835 	bl	8003900 <TIM_TI2_ConfigInputStage>
      break;
 8003896:	e000      	b.n	800389a <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8003898:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b006      	add	sp, #24
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4393      	bics	r3, r2
 80038be:	001a      	movs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	22f0      	movs	r2, #240	; 0xf0
 80038ce:	4393      	bics	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	220a      	movs	r2, #10
 80038e0:	4393      	bics	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b006      	add	sp, #24
 80038fe:	bd80      	pop	{r7, pc}

08003900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	2210      	movs	r2, #16
 8003912:	4393      	bics	r3, r2
 8003914:	001a      	movs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <TIM_TI2_ConfigInputStage+0x60>)
 800392a:	4013      	ands	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	22a0      	movs	r2, #160	; 0xa0
 800393c:	4393      	bics	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b006      	add	sp, #24
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	ffff0fff 	.word	0xffff0fff

08003964 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2270      	movs	r2, #112	; 0x70
 8003978:	4393      	bics	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	2207      	movs	r2, #7
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	609a      	str	r2, [r3, #8]
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b004      	add	sp, #16
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <TIM_ETR_SetConfig+0x3c>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b006      	add	sp, #24
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	ffff00ff 	.word	0xffff00ff

080039d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2238      	movs	r2, #56	; 0x38
 80039e6:	5c9b      	ldrb	r3, [r3, r2]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e032      	b.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2238      	movs	r2, #56	; 0x38
 80039f4:	2101      	movs	r1, #1
 80039f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2239      	movs	r2, #57	; 0x39
 80039fc:	2102      	movs	r1, #2
 80039fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2270      	movs	r2, #112	; 0x70
 8003a14:	4393      	bics	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	4393      	bics	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2239      	movs	r2, #57	; 0x39
 8003a48:	2101      	movs	r1, #1
 8003a4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2238      	movs	r2, #56	; 0x38
 8003a50:	2100      	movs	r1, #0
 8003a52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <__libc_init_array>:
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	2600      	movs	r6, #0
 8003a64:	4d0c      	ldr	r5, [pc, #48]	; (8003a98 <__libc_init_array+0x38>)
 8003a66:	4c0d      	ldr	r4, [pc, #52]	; (8003a9c <__libc_init_array+0x3c>)
 8003a68:	1b64      	subs	r4, r4, r5
 8003a6a:	10a4      	asrs	r4, r4, #2
 8003a6c:	42a6      	cmp	r6, r4
 8003a6e:	d109      	bne.n	8003a84 <__libc_init_array+0x24>
 8003a70:	2600      	movs	r6, #0
 8003a72:	f000 f821 	bl	8003ab8 <_init>
 8003a76:	4d0a      	ldr	r5, [pc, #40]	; (8003aa0 <__libc_init_array+0x40>)
 8003a78:	4c0a      	ldr	r4, [pc, #40]	; (8003aa4 <__libc_init_array+0x44>)
 8003a7a:	1b64      	subs	r4, r4, r5
 8003a7c:	10a4      	asrs	r4, r4, #2
 8003a7e:	42a6      	cmp	r6, r4
 8003a80:	d105      	bne.n	8003a8e <__libc_init_array+0x2e>
 8003a82:	bd70      	pop	{r4, r5, r6, pc}
 8003a84:	00b3      	lsls	r3, r6, #2
 8003a86:	58eb      	ldr	r3, [r5, r3]
 8003a88:	4798      	blx	r3
 8003a8a:	3601      	adds	r6, #1
 8003a8c:	e7ee      	b.n	8003a6c <__libc_init_array+0xc>
 8003a8e:	00b3      	lsls	r3, r6, #2
 8003a90:	58eb      	ldr	r3, [r5, r3]
 8003a92:	4798      	blx	r3
 8003a94:	3601      	adds	r6, #1
 8003a96:	e7f2      	b.n	8003a7e <__libc_init_array+0x1e>
 8003a98:	08003b6c 	.word	0x08003b6c
 8003a9c:	08003b6c 	.word	0x08003b6c
 8003aa0:	08003b6c 	.word	0x08003b6c
 8003aa4:	08003b70 	.word	0x08003b70

08003aa8 <memset>:
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	1812      	adds	r2, r2, r0
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <memset+0xa>
 8003ab0:	4770      	bx	lr
 8003ab2:	7019      	strb	r1, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	e7f9      	b.n	8003aac <memset+0x4>

08003ab8 <_init>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr

08003ac4 <_fini>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr
