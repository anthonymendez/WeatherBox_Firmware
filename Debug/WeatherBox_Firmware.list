
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e56c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800e630  0800e630  0001e630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ede0  0800ede0  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800ede0  0800ede0  0001ede0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ede8  0800ede8  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ede8  0800ede8  0001ede8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edec  0800edec  0001edec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800edf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000248  0800f038  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800f038  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fa7  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002908  00000000  00000000  00035217  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001268  00000000  00000000  00037b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  00038d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017784  00000000  00000000  00039ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e63d  00000000  00000000  0005162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e22c  00000000  00000000  0005fc69  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ede95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000578c  00000000  00000000  000edf10  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f369c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f36c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000248 	.word	0x20000248
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e614 	.word	0x0800e614

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000024c 	.word	0x2000024c
 8000104:	0800e614 	.word	0x0800e614

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 faad 	bl	800199c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa05 	bl	800185c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa9f 	bl	800199c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa95 	bl	800199c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa27 	bl	80018d4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa1d 	bl	80018d4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f98b 	bl	80007cc <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f90d 	bl	80006e0 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f97d 	bl	80007cc <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f973 	bl	80007cc <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f91b 	bl	8000730 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f911 	bl	8000730 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f806 	bl	800055c <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__udivmoddi4>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	464f      	mov	r7, r9
 8000560:	4646      	mov	r6, r8
 8000562:	46d6      	mov	lr, sl
 8000564:	b5c0      	push	{r6, r7, lr}
 8000566:	0004      	movs	r4, r0
 8000568:	b082      	sub	sp, #8
 800056a:	000d      	movs	r5, r1
 800056c:	4691      	mov	r9, r2
 800056e:	4698      	mov	r8, r3
 8000570:	428b      	cmp	r3, r1
 8000572:	d82f      	bhi.n	80005d4 <__udivmoddi4+0x78>
 8000574:	d02c      	beq.n	80005d0 <__udivmoddi4+0x74>
 8000576:	4641      	mov	r1, r8
 8000578:	4648      	mov	r0, r9
 800057a:	f002 f9e3 	bl	8002944 <__clzdi2>
 800057e:	0029      	movs	r1, r5
 8000580:	0006      	movs	r6, r0
 8000582:	0020      	movs	r0, r4
 8000584:	f002 f9de 	bl	8002944 <__clzdi2>
 8000588:	1a33      	subs	r3, r6, r0
 800058a:	469c      	mov	ip, r3
 800058c:	3b20      	subs	r3, #32
 800058e:	469a      	mov	sl, r3
 8000590:	d500      	bpl.n	8000594 <__udivmoddi4+0x38>
 8000592:	e076      	b.n	8000682 <__udivmoddi4+0x126>
 8000594:	464b      	mov	r3, r9
 8000596:	4652      	mov	r2, sl
 8000598:	4093      	lsls	r3, r2
 800059a:	001f      	movs	r7, r3
 800059c:	464b      	mov	r3, r9
 800059e:	4662      	mov	r2, ip
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d828      	bhi.n	80005fa <__udivmoddi4+0x9e>
 80005a8:	d025      	beq.n	80005f6 <__udivmoddi4+0x9a>
 80005aa:	4653      	mov	r3, sl
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	41bd      	sbcs	r5, r7
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <__udivmoddi4+0x5a>
 80005b4:	e07b      	b.n	80006ae <__udivmoddi4+0x152>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2300      	movs	r3, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	4652      	mov	r2, sl
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4662      	mov	r2, ip
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	e018      	b.n	8000602 <__udivmoddi4+0xa6>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	d9d0      	bls.n	8000576 <__udivmoddi4+0x1a>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <__udivmoddi4+0x8a>
 80005e2:	601c      	str	r4, [r3, #0]
 80005e4:	605d      	str	r5, [r3, #4]
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	b002      	add	sp, #8
 80005ec:	bc1c      	pop	{r2, r3, r4}
 80005ee:	4690      	mov	r8, r2
 80005f0:	4699      	mov	r9, r3
 80005f2:	46a2      	mov	sl, r4
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	42a3      	cmp	r3, r4
 80005f8:	d9d7      	bls.n	80005aa <__udivmoddi4+0x4e>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	4663      	mov	r3, ip
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0e9      	beq.n	80005dc <__udivmoddi4+0x80>
 8000608:	07fb      	lsls	r3, r7, #31
 800060a:	4698      	mov	r8, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0872      	lsrs	r2, r6, #1
 8000610:	430a      	orrs	r2, r1
 8000612:	087b      	lsrs	r3, r7, #1
 8000614:	4666      	mov	r6, ip
 8000616:	e00e      	b.n	8000636 <__udivmoddi4+0xda>
 8000618:	42ab      	cmp	r3, r5
 800061a:	d101      	bne.n	8000620 <__udivmoddi4+0xc4>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d80c      	bhi.n	800063a <__udivmoddi4+0xde>
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	419d      	sbcs	r5, r3
 8000624:	2001      	movs	r0, #1
 8000626:	1924      	adds	r4, r4, r4
 8000628:	416d      	adcs	r5, r5
 800062a:	2100      	movs	r1, #0
 800062c:	3e01      	subs	r6, #1
 800062e:	1824      	adds	r4, r4, r0
 8000630:	414d      	adcs	r5, r1
 8000632:	2e00      	cmp	r6, #0
 8000634:	d006      	beq.n	8000644 <__udivmoddi4+0xe8>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d9ee      	bls.n	8000618 <__udivmoddi4+0xbc>
 800063a:	3e01      	subs	r6, #1
 800063c:	1924      	adds	r4, r4, r4
 800063e:	416d      	adcs	r5, r5
 8000640:	2e00      	cmp	r6, #0
 8000642:	d1f8      	bne.n	8000636 <__udivmoddi4+0xda>
 8000644:	9800      	ldr	r0, [sp, #0]
 8000646:	9901      	ldr	r1, [sp, #4]
 8000648:	4653      	mov	r3, sl
 800064a:	1900      	adds	r0, r0, r4
 800064c:	4169      	adcs	r1, r5
 800064e:	2b00      	cmp	r3, #0
 8000650:	db23      	blt.n	800069a <__udivmoddi4+0x13e>
 8000652:	002b      	movs	r3, r5
 8000654:	4652      	mov	r2, sl
 8000656:	40d3      	lsrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	4664      	mov	r4, ip
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	4653      	mov	r3, sl
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	db2d      	blt.n	80006c4 <__udivmoddi4+0x168>
 8000668:	0026      	movs	r6, r4
 800066a:	4657      	mov	r7, sl
 800066c:	40be      	lsls	r6, r7
 800066e:	0033      	movs	r3, r6
 8000670:	0026      	movs	r6, r4
 8000672:	4667      	mov	r7, ip
 8000674:	40be      	lsls	r6, r7
 8000676:	0032      	movs	r2, r6
 8000678:	1a80      	subs	r0, r0, r2
 800067a:	4199      	sbcs	r1, r3
 800067c:	9000      	str	r0, [sp, #0]
 800067e:	9101      	str	r1, [sp, #4]
 8000680:	e7ac      	b.n	80005dc <__udivmoddi4+0x80>
 8000682:	4662      	mov	r2, ip
 8000684:	2320      	movs	r3, #32
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	464a      	mov	r2, r9
 800068a:	40da      	lsrs	r2, r3
 800068c:	4661      	mov	r1, ip
 800068e:	0013      	movs	r3, r2
 8000690:	4642      	mov	r2, r8
 8000692:	408a      	lsls	r2, r1
 8000694:	0017      	movs	r7, r2
 8000696:	431f      	orrs	r7, r3
 8000698:	e780      	b.n	800059c <__udivmoddi4+0x40>
 800069a:	4662      	mov	r2, ip
 800069c:	2320      	movs	r3, #32
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	4666      	mov	r6, ip
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	40f3      	lsrs	r3, r6
 80006aa:	4313      	orrs	r3, r2
 80006ac:	e7d4      	b.n	8000658 <__udivmoddi4+0xfc>
 80006ae:	4662      	mov	r2, ip
 80006b0:	2320      	movs	r3, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	2200      	movs	r2, #0
 80006b8:	9100      	str	r1, [sp, #0]
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	40da      	lsrs	r2, r3
 80006c0:	9201      	str	r2, [sp, #4]
 80006c2:	e780      	b.n	80005c6 <__udivmoddi4+0x6a>
 80006c4:	2320      	movs	r3, #32
 80006c6:	4662      	mov	r2, ip
 80006c8:	0026      	movs	r6, r4
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	40de      	lsrs	r6, r3
 80006ce:	002f      	movs	r7, r5
 80006d0:	46b0      	mov	r8, r6
 80006d2:	4666      	mov	r6, ip
 80006d4:	40b7      	lsls	r7, r6
 80006d6:	4646      	mov	r6, r8
 80006d8:	003b      	movs	r3, r7
 80006da:	4333      	orrs	r3, r6
 80006dc:	e7c8      	b.n	8000670 <__udivmoddi4+0x114>
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <__eqsf2>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	0042      	lsls	r2, r0, #1
 80006e4:	024e      	lsls	r6, r1, #9
 80006e6:	004c      	lsls	r4, r1, #1
 80006e8:	0245      	lsls	r5, r0, #9
 80006ea:	0a6d      	lsrs	r5, r5, #9
 80006ec:	0e12      	lsrs	r2, r2, #24
 80006ee:	0fc3      	lsrs	r3, r0, #31
 80006f0:	0a76      	lsrs	r6, r6, #9
 80006f2:	0e24      	lsrs	r4, r4, #24
 80006f4:	0fc9      	lsrs	r1, r1, #31
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d00f      	beq.n	800071a <__eqsf2+0x3a>
 80006fa:	2cff      	cmp	r4, #255	; 0xff
 80006fc:	d011      	beq.n	8000722 <__eqsf2+0x42>
 80006fe:	2001      	movs	r0, #1
 8000700:	42a2      	cmp	r2, r4
 8000702:	d000      	beq.n	8000706 <__eqsf2+0x26>
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	42b5      	cmp	r5, r6
 8000708:	d1fc      	bne.n	8000704 <__eqsf2+0x24>
 800070a:	428b      	cmp	r3, r1
 800070c:	d00d      	beq.n	800072a <__eqsf2+0x4a>
 800070e:	2a00      	cmp	r2, #0
 8000710:	d1f8      	bne.n	8000704 <__eqsf2+0x24>
 8000712:	0028      	movs	r0, r5
 8000714:	1e45      	subs	r5, r0, #1
 8000716:	41a8      	sbcs	r0, r5
 8000718:	e7f4      	b.n	8000704 <__eqsf2+0x24>
 800071a:	2001      	movs	r0, #1
 800071c:	2d00      	cmp	r5, #0
 800071e:	d1f1      	bne.n	8000704 <__eqsf2+0x24>
 8000720:	e7eb      	b.n	80006fa <__eqsf2+0x1a>
 8000722:	2001      	movs	r0, #1
 8000724:	2e00      	cmp	r6, #0
 8000726:	d1ed      	bne.n	8000704 <__eqsf2+0x24>
 8000728:	e7e9      	b.n	80006fe <__eqsf2+0x1e>
 800072a:	2000      	movs	r0, #0
 800072c:	e7ea      	b.n	8000704 <__eqsf2+0x24>
 800072e:	46c0      	nop			; (mov r8, r8)

08000730 <__gesf2>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	004a      	lsls	r2, r1, #1
 8000734:	024e      	lsls	r6, r1, #9
 8000736:	0245      	lsls	r5, r0, #9
 8000738:	0044      	lsls	r4, r0, #1
 800073a:	0a6d      	lsrs	r5, r5, #9
 800073c:	0e24      	lsrs	r4, r4, #24
 800073e:	0fc3      	lsrs	r3, r0, #31
 8000740:	0a76      	lsrs	r6, r6, #9
 8000742:	0e12      	lsrs	r2, r2, #24
 8000744:	0fc9      	lsrs	r1, r1, #31
 8000746:	2cff      	cmp	r4, #255	; 0xff
 8000748:	d015      	beq.n	8000776 <__gesf2+0x46>
 800074a:	2aff      	cmp	r2, #255	; 0xff
 800074c:	d00e      	beq.n	800076c <__gesf2+0x3c>
 800074e:	2c00      	cmp	r4, #0
 8000750:	d115      	bne.n	800077e <__gesf2+0x4e>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d101      	bne.n	800075a <__gesf2+0x2a>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d01c      	beq.n	8000794 <__gesf2+0x64>
 800075a:	2d00      	cmp	r5, #0
 800075c:	d014      	beq.n	8000788 <__gesf2+0x58>
 800075e:	428b      	cmp	r3, r1
 8000760:	d027      	beq.n	80007b2 <__gesf2+0x82>
 8000762:	2002      	movs	r0, #2
 8000764:	3b01      	subs	r3, #1
 8000766:	4018      	ands	r0, r3
 8000768:	3801      	subs	r0, #1
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	2e00      	cmp	r6, #0
 800076e:	d0ee      	beq.n	800074e <__gesf2+0x1e>
 8000770:	2002      	movs	r0, #2
 8000772:	4240      	negs	r0, r0
 8000774:	e7f9      	b.n	800076a <__gesf2+0x3a>
 8000776:	2d00      	cmp	r5, #0
 8000778:	d1fa      	bne.n	8000770 <__gesf2+0x40>
 800077a:	2aff      	cmp	r2, #255	; 0xff
 800077c:	d00e      	beq.n	800079c <__gesf2+0x6c>
 800077e:	2a00      	cmp	r2, #0
 8000780:	d10e      	bne.n	80007a0 <__gesf2+0x70>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d0ed      	beq.n	8000762 <__gesf2+0x32>
 8000786:	e00b      	b.n	80007a0 <__gesf2+0x70>
 8000788:	2301      	movs	r3, #1
 800078a:	3901      	subs	r1, #1
 800078c:	4399      	bics	r1, r3
 800078e:	0008      	movs	r0, r1
 8000790:	3001      	adds	r0, #1
 8000792:	e7ea      	b.n	800076a <__gesf2+0x3a>
 8000794:	2000      	movs	r0, #0
 8000796:	2d00      	cmp	r5, #0
 8000798:	d0e7      	beq.n	800076a <__gesf2+0x3a>
 800079a:	e7e2      	b.n	8000762 <__gesf2+0x32>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d1e7      	bne.n	8000770 <__gesf2+0x40>
 80007a0:	428b      	cmp	r3, r1
 80007a2:	d1de      	bne.n	8000762 <__gesf2+0x32>
 80007a4:	4294      	cmp	r4, r2
 80007a6:	dd05      	ble.n	80007b4 <__gesf2+0x84>
 80007a8:	2102      	movs	r1, #2
 80007aa:	1e58      	subs	r0, r3, #1
 80007ac:	4008      	ands	r0, r1
 80007ae:	3801      	subs	r0, #1
 80007b0:	e7db      	b.n	800076a <__gesf2+0x3a>
 80007b2:	2400      	movs	r4, #0
 80007b4:	42a2      	cmp	r2, r4
 80007b6:	dc04      	bgt.n	80007c2 <__gesf2+0x92>
 80007b8:	42b5      	cmp	r5, r6
 80007ba:	d8d2      	bhi.n	8000762 <__gesf2+0x32>
 80007bc:	2000      	movs	r0, #0
 80007be:	42b5      	cmp	r5, r6
 80007c0:	d2d3      	bcs.n	800076a <__gesf2+0x3a>
 80007c2:	1e58      	subs	r0, r3, #1
 80007c4:	2301      	movs	r3, #1
 80007c6:	4398      	bics	r0, r3
 80007c8:	3001      	adds	r0, #1
 80007ca:	e7ce      	b.n	800076a <__gesf2+0x3a>

080007cc <__lesf2>:
 80007cc:	b530      	push	{r4, r5, lr}
 80007ce:	0042      	lsls	r2, r0, #1
 80007d0:	0244      	lsls	r4, r0, #9
 80007d2:	024d      	lsls	r5, r1, #9
 80007d4:	0fc3      	lsrs	r3, r0, #31
 80007d6:	0048      	lsls	r0, r1, #1
 80007d8:	0a64      	lsrs	r4, r4, #9
 80007da:	0e12      	lsrs	r2, r2, #24
 80007dc:	0a6d      	lsrs	r5, r5, #9
 80007de:	0e00      	lsrs	r0, r0, #24
 80007e0:	0fc9      	lsrs	r1, r1, #31
 80007e2:	2aff      	cmp	r2, #255	; 0xff
 80007e4:	d012      	beq.n	800080c <__lesf2+0x40>
 80007e6:	28ff      	cmp	r0, #255	; 0xff
 80007e8:	d00c      	beq.n	8000804 <__lesf2+0x38>
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d112      	bne.n	8000814 <__lesf2+0x48>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d119      	bne.n	8000826 <__lesf2+0x5a>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d117      	bne.n	8000826 <__lesf2+0x5a>
 80007f6:	2c00      	cmp	r4, #0
 80007f8:	d02b      	beq.n	8000852 <__lesf2+0x86>
 80007fa:	2002      	movs	r0, #2
 80007fc:	3b01      	subs	r3, #1
 80007fe:	4018      	ands	r0, r3
 8000800:	3801      	subs	r0, #1
 8000802:	e026      	b.n	8000852 <__lesf2+0x86>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d0f0      	beq.n	80007ea <__lesf2+0x1e>
 8000808:	2002      	movs	r0, #2
 800080a:	e022      	b.n	8000852 <__lesf2+0x86>
 800080c:	2c00      	cmp	r4, #0
 800080e:	d1fb      	bne.n	8000808 <__lesf2+0x3c>
 8000810:	28ff      	cmp	r0, #255	; 0xff
 8000812:	d01f      	beq.n	8000854 <__lesf2+0x88>
 8000814:	2800      	cmp	r0, #0
 8000816:	d11f      	bne.n	8000858 <__lesf2+0x8c>
 8000818:	2d00      	cmp	r5, #0
 800081a:	d11d      	bne.n	8000858 <__lesf2+0x8c>
 800081c:	2002      	movs	r0, #2
 800081e:	3b01      	subs	r3, #1
 8000820:	4018      	ands	r0, r3
 8000822:	3801      	subs	r0, #1
 8000824:	e015      	b.n	8000852 <__lesf2+0x86>
 8000826:	2c00      	cmp	r4, #0
 8000828:	d00e      	beq.n	8000848 <__lesf2+0x7c>
 800082a:	428b      	cmp	r3, r1
 800082c:	d1e5      	bne.n	80007fa <__lesf2+0x2e>
 800082e:	2200      	movs	r2, #0
 8000830:	4290      	cmp	r0, r2
 8000832:	dc04      	bgt.n	800083e <__lesf2+0x72>
 8000834:	42ac      	cmp	r4, r5
 8000836:	d8e0      	bhi.n	80007fa <__lesf2+0x2e>
 8000838:	2000      	movs	r0, #0
 800083a:	42ac      	cmp	r4, r5
 800083c:	d209      	bcs.n	8000852 <__lesf2+0x86>
 800083e:	1e58      	subs	r0, r3, #1
 8000840:	2301      	movs	r3, #1
 8000842:	4398      	bics	r0, r3
 8000844:	3001      	adds	r0, #1
 8000846:	e004      	b.n	8000852 <__lesf2+0x86>
 8000848:	2301      	movs	r3, #1
 800084a:	3901      	subs	r1, #1
 800084c:	4399      	bics	r1, r3
 800084e:	0008      	movs	r0, r1
 8000850:	3001      	adds	r0, #1
 8000852:	bd30      	pop	{r4, r5, pc}
 8000854:	2d00      	cmp	r5, #0
 8000856:	d1d7      	bne.n	8000808 <__lesf2+0x3c>
 8000858:	428b      	cmp	r3, r1
 800085a:	d1ce      	bne.n	80007fa <__lesf2+0x2e>
 800085c:	4282      	cmp	r2, r0
 800085e:	dde7      	ble.n	8000830 <__lesf2+0x64>
 8000860:	2102      	movs	r1, #2
 8000862:	1e58      	subs	r0, r3, #1
 8000864:	4008      	ands	r0, r1
 8000866:	3801      	subs	r0, #1
 8000868:	e7f3      	b.n	8000852 <__lesf2+0x86>
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <__aeabi_fsub>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	4647      	mov	r7, r8
 8000870:	46ce      	mov	lr, r9
 8000872:	0044      	lsls	r4, r0, #1
 8000874:	0fc2      	lsrs	r2, r0, #31
 8000876:	b580      	push	{r7, lr}
 8000878:	0247      	lsls	r7, r0, #9
 800087a:	0248      	lsls	r0, r1, #9
 800087c:	0a40      	lsrs	r0, r0, #9
 800087e:	4684      	mov	ip, r0
 8000880:	4666      	mov	r6, ip
 8000882:	0048      	lsls	r0, r1, #1
 8000884:	0a7f      	lsrs	r7, r7, #9
 8000886:	0e24      	lsrs	r4, r4, #24
 8000888:	00f6      	lsls	r6, r6, #3
 800088a:	0025      	movs	r5, r4
 800088c:	4690      	mov	r8, r2
 800088e:	00fb      	lsls	r3, r7, #3
 8000890:	0e00      	lsrs	r0, r0, #24
 8000892:	0fc9      	lsrs	r1, r1, #31
 8000894:	46b1      	mov	r9, r6
 8000896:	28ff      	cmp	r0, #255	; 0xff
 8000898:	d100      	bne.n	800089c <__aeabi_fsub+0x30>
 800089a:	e085      	b.n	80009a8 <__aeabi_fsub+0x13c>
 800089c:	2601      	movs	r6, #1
 800089e:	4071      	eors	r1, r6
 80008a0:	1a26      	subs	r6, r4, r0
 80008a2:	4291      	cmp	r1, r2
 80008a4:	d057      	beq.n	8000956 <__aeabi_fsub+0xea>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	dd43      	ble.n	8000932 <__aeabi_fsub+0xc6>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d000      	beq.n	80008b0 <__aeabi_fsub+0x44>
 80008ae:	e07f      	b.n	80009b0 <__aeabi_fsub+0x144>
 80008b0:	4649      	mov	r1, r9
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fsub+0x4c>
 80008b6:	e0aa      	b.n	8000a0e <__aeabi_fsub+0x1a2>
 80008b8:	3e01      	subs	r6, #1
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fsub+0x54>
 80008be:	e0f7      	b.n	8000ab0 <__aeabi_fsub+0x244>
 80008c0:	1a5b      	subs	r3, r3, r1
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d400      	bmi.n	80008c8 <__aeabi_fsub+0x5c>
 80008c6:	e08b      	b.n	80009e0 <__aeabi_fsub+0x174>
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	099c      	lsrs	r4, r3, #6
 80008cc:	0020      	movs	r0, r4
 80008ce:	f002 f81b 	bl	8002908 <__clzsi2>
 80008d2:	3805      	subs	r0, #5
 80008d4:	4084      	lsls	r4, r0
 80008d6:	4285      	cmp	r5, r0
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fsub+0x70>
 80008da:	e0d3      	b.n	8000a84 <__aeabi_fsub+0x218>
 80008dc:	1b45      	subs	r5, r0, r5
 80008de:	0023      	movs	r3, r4
 80008e0:	2020      	movs	r0, #32
 80008e2:	3501      	adds	r5, #1
 80008e4:	40eb      	lsrs	r3, r5
 80008e6:	1b45      	subs	r5, r0, r5
 80008e8:	40ac      	lsls	r4, r5
 80008ea:	1e62      	subs	r2, r4, #1
 80008ec:	4194      	sbcs	r4, r2
 80008ee:	4323      	orrs	r3, r4
 80008f0:	2407      	movs	r4, #7
 80008f2:	2500      	movs	r5, #0
 80008f4:	401c      	ands	r4, r3
 80008f6:	2201      	movs	r2, #1
 80008f8:	4641      	mov	r1, r8
 80008fa:	400a      	ands	r2, r1
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d004      	beq.n	800090a <__aeabi_fsub+0x9e>
 8000900:	210f      	movs	r1, #15
 8000902:	4019      	ands	r1, r3
 8000904:	2904      	cmp	r1, #4
 8000906:	d000      	beq.n	800090a <__aeabi_fsub+0x9e>
 8000908:	3304      	adds	r3, #4
 800090a:	0159      	lsls	r1, r3, #5
 800090c:	d400      	bmi.n	8000910 <__aeabi_fsub+0xa4>
 800090e:	e080      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000910:	3501      	adds	r5, #1
 8000912:	b2ec      	uxtb	r4, r5
 8000914:	2dff      	cmp	r5, #255	; 0xff
 8000916:	d000      	beq.n	800091a <__aeabi_fsub+0xae>
 8000918:	e0a3      	b.n	8000a62 <__aeabi_fsub+0x1f6>
 800091a:	24ff      	movs	r4, #255	; 0xff
 800091c:	2300      	movs	r3, #0
 800091e:	025b      	lsls	r3, r3, #9
 8000920:	05e4      	lsls	r4, r4, #23
 8000922:	0a58      	lsrs	r0, r3, #9
 8000924:	07d2      	lsls	r2, r2, #31
 8000926:	4320      	orrs	r0, r4
 8000928:	4310      	orrs	r0, r2
 800092a:	bc0c      	pop	{r2, r3}
 800092c:	4690      	mov	r8, r2
 800092e:	4699      	mov	r9, r3
 8000930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000932:	2e00      	cmp	r6, #0
 8000934:	d174      	bne.n	8000a20 <__aeabi_fsub+0x1b4>
 8000936:	1c60      	adds	r0, r4, #1
 8000938:	b2c0      	uxtb	r0, r0
 800093a:	2801      	cmp	r0, #1
 800093c:	dc00      	bgt.n	8000940 <__aeabi_fsub+0xd4>
 800093e:	e0a7      	b.n	8000a90 <__aeabi_fsub+0x224>
 8000940:	464a      	mov	r2, r9
 8000942:	1a9c      	subs	r4, r3, r2
 8000944:	0162      	lsls	r2, r4, #5
 8000946:	d500      	bpl.n	800094a <__aeabi_fsub+0xde>
 8000948:	e0b6      	b.n	8000ab8 <__aeabi_fsub+0x24c>
 800094a:	2c00      	cmp	r4, #0
 800094c:	d1be      	bne.n	80008cc <__aeabi_fsub+0x60>
 800094e:	2200      	movs	r2, #0
 8000950:	2400      	movs	r4, #0
 8000952:	2300      	movs	r3, #0
 8000954:	e7e3      	b.n	800091e <__aeabi_fsub+0xb2>
 8000956:	2e00      	cmp	r6, #0
 8000958:	dc00      	bgt.n	800095c <__aeabi_fsub+0xf0>
 800095a:	e085      	b.n	8000a68 <__aeabi_fsub+0x1fc>
 800095c:	2800      	cmp	r0, #0
 800095e:	d046      	beq.n	80009ee <__aeabi_fsub+0x182>
 8000960:	2cff      	cmp	r4, #255	; 0xff
 8000962:	d049      	beq.n	80009f8 <__aeabi_fsub+0x18c>
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	4648      	mov	r0, r9
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4310      	orrs	r0, r2
 800096c:	4681      	mov	r9, r0
 800096e:	2201      	movs	r2, #1
 8000970:	2e1b      	cmp	r6, #27
 8000972:	dc09      	bgt.n	8000988 <__aeabi_fsub+0x11c>
 8000974:	2020      	movs	r0, #32
 8000976:	464c      	mov	r4, r9
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	4084      	lsls	r4, r0
 800097c:	464a      	mov	r2, r9
 800097e:	0020      	movs	r0, r4
 8000980:	40f2      	lsrs	r2, r6
 8000982:	1e44      	subs	r4, r0, #1
 8000984:	41a0      	sbcs	r0, r4
 8000986:	4302      	orrs	r2, r0
 8000988:	189b      	adds	r3, r3, r2
 800098a:	015a      	lsls	r2, r3, #5
 800098c:	d528      	bpl.n	80009e0 <__aeabi_fsub+0x174>
 800098e:	3501      	adds	r5, #1
 8000990:	2dff      	cmp	r5, #255	; 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x12a>
 8000994:	e0a8      	b.n	8000ae8 <__aeabi_fsub+0x27c>
 8000996:	2201      	movs	r2, #1
 8000998:	2407      	movs	r4, #7
 800099a:	4994      	ldr	r1, [pc, #592]	; (8000bec <__aeabi_fsub+0x380>)
 800099c:	401a      	ands	r2, r3
 800099e:	085b      	lsrs	r3, r3, #1
 80009a0:	400b      	ands	r3, r1
 80009a2:	4313      	orrs	r3, r2
 80009a4:	401c      	ands	r4, r3
 80009a6:	e7a6      	b.n	80008f6 <__aeabi_fsub+0x8a>
 80009a8:	2e00      	cmp	r6, #0
 80009aa:	d000      	beq.n	80009ae <__aeabi_fsub+0x142>
 80009ac:	e778      	b.n	80008a0 <__aeabi_fsub+0x34>
 80009ae:	e775      	b.n	800089c <__aeabi_fsub+0x30>
 80009b0:	2cff      	cmp	r4, #255	; 0xff
 80009b2:	d054      	beq.n	8000a5e <__aeabi_fsub+0x1f2>
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	4649      	mov	r1, r9
 80009b8:	04d2      	lsls	r2, r2, #19
 80009ba:	4311      	orrs	r1, r2
 80009bc:	4689      	mov	r9, r1
 80009be:	2201      	movs	r2, #1
 80009c0:	2e1b      	cmp	r6, #27
 80009c2:	dc09      	bgt.n	80009d8 <__aeabi_fsub+0x16c>
 80009c4:	2120      	movs	r1, #32
 80009c6:	4648      	mov	r0, r9
 80009c8:	1b89      	subs	r1, r1, r6
 80009ca:	4088      	lsls	r0, r1
 80009cc:	464a      	mov	r2, r9
 80009ce:	0001      	movs	r1, r0
 80009d0:	40f2      	lsrs	r2, r6
 80009d2:	1e48      	subs	r0, r1, #1
 80009d4:	4181      	sbcs	r1, r0
 80009d6:	430a      	orrs	r2, r1
 80009d8:	1a9b      	subs	r3, r3, r2
 80009da:	015a      	lsls	r2, r3, #5
 80009dc:	d500      	bpl.n	80009e0 <__aeabi_fsub+0x174>
 80009de:	e773      	b.n	80008c8 <__aeabi_fsub+0x5c>
 80009e0:	2201      	movs	r2, #1
 80009e2:	4641      	mov	r1, r8
 80009e4:	400a      	ands	r2, r1
 80009e6:	0759      	lsls	r1, r3, #29
 80009e8:	d000      	beq.n	80009ec <__aeabi_fsub+0x180>
 80009ea:	e789      	b.n	8000900 <__aeabi_fsub+0x94>
 80009ec:	e011      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 80009ee:	4648      	mov	r0, r9
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d158      	bne.n	8000aa6 <__aeabi_fsub+0x23a>
 80009f4:	2cff      	cmp	r4, #255	; 0xff
 80009f6:	d10c      	bne.n	8000a12 <__aeabi_fsub+0x1a6>
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fsub+0x194>
 80009fe:	e78c      	b.n	800091a <__aeabi_fsub+0xae>
 8000a00:	2080      	movs	r0, #128	; 0x80
 8000a02:	03c0      	lsls	r0, r0, #15
 8000a04:	4303      	orrs	r3, r0
 8000a06:	025b      	lsls	r3, r3, #9
 8000a08:	0a5b      	lsrs	r3, r3, #9
 8000a0a:	24ff      	movs	r4, #255	; 0xff
 8000a0c:	e787      	b.n	800091e <__aeabi_fsub+0xb2>
 8000a0e:	2cff      	cmp	r4, #255	; 0xff
 8000a10:	d025      	beq.n	8000a5e <__aeabi_fsub+0x1f2>
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	2dff      	cmp	r5, #255	; 0xff
 8000a16:	d0f0      	beq.n	80009fa <__aeabi_fsub+0x18e>
 8000a18:	025b      	lsls	r3, r3, #9
 8000a1a:	0a5b      	lsrs	r3, r3, #9
 8000a1c:	b2ec      	uxtb	r4, r5
 8000a1e:	e77e      	b.n	800091e <__aeabi_fsub+0xb2>
 8000a20:	2c00      	cmp	r4, #0
 8000a22:	d04d      	beq.n	8000ac0 <__aeabi_fsub+0x254>
 8000a24:	28ff      	cmp	r0, #255	; 0xff
 8000a26:	d018      	beq.n	8000a5a <__aeabi_fsub+0x1ee>
 8000a28:	2480      	movs	r4, #128	; 0x80
 8000a2a:	04e4      	lsls	r4, r4, #19
 8000a2c:	4272      	negs	r2, r6
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	2a1b      	cmp	r2, #27
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_fsub+0x1ca>
 8000a34:	e0c4      	b.n	8000bc0 <__aeabi_fsub+0x354>
 8000a36:	001c      	movs	r4, r3
 8000a38:	2520      	movs	r5, #32
 8000a3a:	40d4      	lsrs	r4, r2
 8000a3c:	1aaa      	subs	r2, r5, r2
 8000a3e:	4093      	lsls	r3, r2
 8000a40:	1e5a      	subs	r2, r3, #1
 8000a42:	4193      	sbcs	r3, r2
 8000a44:	4323      	orrs	r3, r4
 8000a46:	464a      	mov	r2, r9
 8000a48:	0005      	movs	r5, r0
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	4688      	mov	r8, r1
 8000a4e:	e738      	b.n	80008c2 <__aeabi_fsub+0x56>
 8000a50:	1c72      	adds	r2, r6, #1
 8000a52:	d0f8      	beq.n	8000a46 <__aeabi_fsub+0x1da>
 8000a54:	43f2      	mvns	r2, r6
 8000a56:	28ff      	cmp	r0, #255	; 0xff
 8000a58:	d1ea      	bne.n	8000a30 <__aeabi_fsub+0x1c4>
 8000a5a:	000a      	movs	r2, r1
 8000a5c:	464b      	mov	r3, r9
 8000a5e:	25ff      	movs	r5, #255	; 0xff
 8000a60:	e7d7      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000a62:	019b      	lsls	r3, r3, #6
 8000a64:	0a5b      	lsrs	r3, r3, #9
 8000a66:	e75a      	b.n	800091e <__aeabi_fsub+0xb2>
 8000a68:	2e00      	cmp	r6, #0
 8000a6a:	d141      	bne.n	8000af0 <__aeabi_fsub+0x284>
 8000a6c:	1c65      	adds	r5, r4, #1
 8000a6e:	b2e9      	uxtb	r1, r5
 8000a70:	2901      	cmp	r1, #1
 8000a72:	dd45      	ble.n	8000b00 <__aeabi_fsub+0x294>
 8000a74:	2dff      	cmp	r5, #255	; 0xff
 8000a76:	d100      	bne.n	8000a7a <__aeabi_fsub+0x20e>
 8000a78:	e74f      	b.n	800091a <__aeabi_fsub+0xae>
 8000a7a:	2407      	movs	r4, #7
 8000a7c:	444b      	add	r3, r9
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	401c      	ands	r4, r3
 8000a82:	e738      	b.n	80008f6 <__aeabi_fsub+0x8a>
 8000a84:	2207      	movs	r2, #7
 8000a86:	4b5a      	ldr	r3, [pc, #360]	; (8000bf0 <__aeabi_fsub+0x384>)
 8000a88:	1a2d      	subs	r5, r5, r0
 8000a8a:	4023      	ands	r3, r4
 8000a8c:	4014      	ands	r4, r2
 8000a8e:	e732      	b.n	80008f6 <__aeabi_fsub+0x8a>
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d11d      	bne.n	8000ad0 <__aeabi_fsub+0x264>
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d17a      	bne.n	8000b8e <__aeabi_fsub+0x322>
 8000a98:	464b      	mov	r3, r9
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fsub+0x234>
 8000a9e:	e091      	b.n	8000bc4 <__aeabi_fsub+0x358>
 8000aa0:	000a      	movs	r2, r1
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	e7b5      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000aa6:	3e01      	subs	r6, #1
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d119      	bne.n	8000ae0 <__aeabi_fsub+0x274>
 8000aac:	444b      	add	r3, r9
 8000aae:	e76c      	b.n	800098a <__aeabi_fsub+0x11e>
 8000ab0:	2cff      	cmp	r4, #255	; 0xff
 8000ab2:	d184      	bne.n	80009be <__aeabi_fsub+0x152>
 8000ab4:	25ff      	movs	r5, #255	; 0xff
 8000ab6:	e7ac      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000ab8:	464a      	mov	r2, r9
 8000aba:	4688      	mov	r8, r1
 8000abc:	1ad4      	subs	r4, r2, r3
 8000abe:	e705      	b.n	80008cc <__aeabi_fsub+0x60>
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1c5      	bne.n	8000a50 <__aeabi_fsub+0x1e4>
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	28ff      	cmp	r0, #255	; 0xff
 8000ac8:	d0c8      	beq.n	8000a5c <__aeabi_fsub+0x1f0>
 8000aca:	0005      	movs	r5, r0
 8000acc:	464b      	mov	r3, r9
 8000ace:	e7a0      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d149      	bne.n	8000b68 <__aeabi_fsub+0x2fc>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d077      	beq.n	8000bca <__aeabi_fsub+0x35e>
 8000ada:	000a      	movs	r2, r1
 8000adc:	25ff      	movs	r5, #255	; 0xff
 8000ade:	e798      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000ae0:	2cff      	cmp	r4, #255	; 0xff
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fsub+0x27a>
 8000ae4:	e743      	b.n	800096e <__aeabi_fsub+0x102>
 8000ae6:	e787      	b.n	80009f8 <__aeabi_fsub+0x18c>
 8000ae8:	000a      	movs	r2, r1
 8000aea:	24ff      	movs	r4, #255	; 0xff
 8000aec:	2300      	movs	r3, #0
 8000aee:	e716      	b.n	800091e <__aeabi_fsub+0xb2>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d115      	bne.n	8000b20 <__aeabi_fsub+0x2b4>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d157      	bne.n	8000ba8 <__aeabi_fsub+0x33c>
 8000af8:	28ff      	cmp	r0, #255	; 0xff
 8000afa:	d1e6      	bne.n	8000aca <__aeabi_fsub+0x25e>
 8000afc:	464b      	mov	r3, r9
 8000afe:	e77b      	b.n	80009f8 <__aeabi_fsub+0x18c>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d120      	bne.n	8000b46 <__aeabi_fsub+0x2da>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d057      	beq.n	8000bb8 <__aeabi_fsub+0x34c>
 8000b08:	4649      	mov	r1, r9
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d053      	beq.n	8000bb6 <__aeabi_fsub+0x34a>
 8000b0e:	444b      	add	r3, r9
 8000b10:	015a      	lsls	r2, r3, #5
 8000b12:	d568      	bpl.n	8000be6 <__aeabi_fsub+0x37a>
 8000b14:	2407      	movs	r4, #7
 8000b16:	4a36      	ldr	r2, [pc, #216]	; (8000bf0 <__aeabi_fsub+0x384>)
 8000b18:	401c      	ands	r4, r3
 8000b1a:	2501      	movs	r5, #1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	e6ea      	b.n	80008f6 <__aeabi_fsub+0x8a>
 8000b20:	28ff      	cmp	r0, #255	; 0xff
 8000b22:	d0eb      	beq.n	8000afc <__aeabi_fsub+0x290>
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	04d2      	lsls	r2, r2, #19
 8000b28:	4276      	negs	r6, r6
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	2e1b      	cmp	r6, #27
 8000b2e:	dc53      	bgt.n	8000bd8 <__aeabi_fsub+0x36c>
 8000b30:	2520      	movs	r5, #32
 8000b32:	1bad      	subs	r5, r5, r6
 8000b34:	001a      	movs	r2, r3
 8000b36:	40ab      	lsls	r3, r5
 8000b38:	40f2      	lsrs	r2, r6
 8000b3a:	1e5c      	subs	r4, r3, #1
 8000b3c:	41a3      	sbcs	r3, r4
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	444b      	add	r3, r9
 8000b42:	0005      	movs	r5, r0
 8000b44:	e721      	b.n	800098a <__aeabi_fsub+0x11e>
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0d8      	beq.n	8000afc <__aeabi_fsub+0x290>
 8000b4a:	4649      	mov	r1, r9
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_fsub+0x2e6>
 8000b50:	e752      	b.n	80009f8 <__aeabi_fsub+0x18c>
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	03c9      	lsls	r1, r1, #15
 8000b56:	420f      	tst	r7, r1
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x2f0>
 8000b5a:	e74d      	b.n	80009f8 <__aeabi_fsub+0x18c>
 8000b5c:	4660      	mov	r0, ip
 8000b5e:	4208      	tst	r0, r1
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fsub+0x2f8>
 8000b62:	e749      	b.n	80009f8 <__aeabi_fsub+0x18c>
 8000b64:	464b      	mov	r3, r9
 8000b66:	e747      	b.n	80009f8 <__aeabi_fsub+0x18c>
 8000b68:	4648      	mov	r0, r9
 8000b6a:	25ff      	movs	r5, #255	; 0xff
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fsub+0x306>
 8000b70:	e74f      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	03d2      	lsls	r2, r2, #15
 8000b76:	4217      	tst	r7, r2
 8000b78:	d004      	beq.n	8000b84 <__aeabi_fsub+0x318>
 8000b7a:	4660      	mov	r0, ip
 8000b7c:	4210      	tst	r0, r2
 8000b7e:	d101      	bne.n	8000b84 <__aeabi_fsub+0x318>
 8000b80:	464b      	mov	r3, r9
 8000b82:	4688      	mov	r8, r1
 8000b84:	2201      	movs	r2, #1
 8000b86:	4641      	mov	r1, r8
 8000b88:	25ff      	movs	r5, #255	; 0xff
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	e741      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000b8e:	4648      	mov	r0, r9
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d01f      	beq.n	8000bd4 <__aeabi_fsub+0x368>
 8000b94:	1a1a      	subs	r2, r3, r0
 8000b96:	0150      	lsls	r0, r2, #5
 8000b98:	d520      	bpl.n	8000bdc <__aeabi_fsub+0x370>
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	2407      	movs	r4, #7
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	401c      	ands	r4, r3
 8000ba2:	4688      	mov	r8, r1
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	e6a6      	b.n	80008f6 <__aeabi_fsub+0x8a>
 8000ba8:	1c74      	adds	r4, r6, #1
 8000baa:	d0c9      	beq.n	8000b40 <__aeabi_fsub+0x2d4>
 8000bac:	43f6      	mvns	r6, r6
 8000bae:	28ff      	cmp	r0, #255	; 0xff
 8000bb0:	d1bc      	bne.n	8000b2c <__aeabi_fsub+0x2c0>
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	e720      	b.n	80009f8 <__aeabi_fsub+0x18c>
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	464b      	mov	r3, r9
 8000bba:	2500      	movs	r5, #0
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	e72b      	b.n	8000a18 <__aeabi_fsub+0x1ac>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e740      	b.n	8000a46 <__aeabi_fsub+0x1da>
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e6a9      	b.n	800091e <__aeabi_fsub+0xb2>
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	2200      	movs	r2, #0
 8000bce:	03db      	lsls	r3, r3, #15
 8000bd0:	24ff      	movs	r4, #255	; 0xff
 8000bd2:	e6a4      	b.n	800091e <__aeabi_fsub+0xb2>
 8000bd4:	2500      	movs	r5, #0
 8000bd6:	e71c      	b.n	8000a12 <__aeabi_fsub+0x1a6>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e7b1      	b.n	8000b40 <__aeabi_fsub+0x2d4>
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d0f1      	beq.n	8000bc4 <__aeabi_fsub+0x358>
 8000be0:	0013      	movs	r3, r2
 8000be2:	2500      	movs	r5, #0
 8000be4:	e6fc      	b.n	80009e0 <__aeabi_fsub+0x174>
 8000be6:	2500      	movs	r5, #0
 8000be8:	e6fa      	b.n	80009e0 <__aeabi_fsub+0x174>
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	7dffffff 	.word	0x7dffffff
 8000bf0:	fbffffff 	.word	0xfbffffff

08000bf4 <__aeabi_fcmpun>:
 8000bf4:	0242      	lsls	r2, r0, #9
 8000bf6:	024b      	lsls	r3, r1, #9
 8000bf8:	0040      	lsls	r0, r0, #1
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	0a52      	lsrs	r2, r2, #9
 8000bfe:	0a5b      	lsrs	r3, r3, #9
 8000c00:	0e09      	lsrs	r1, r1, #24
 8000c02:	0e00      	lsrs	r0, r0, #24
 8000c04:	28ff      	cmp	r0, #255	; 0xff
 8000c06:	d006      	beq.n	8000c16 <__aeabi_fcmpun+0x22>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	29ff      	cmp	r1, #255	; 0xff
 8000c0c:	d102      	bne.n	8000c14 <__aeabi_fcmpun+0x20>
 8000c0e:	0018      	movs	r0, r3
 8000c10:	1e43      	subs	r3, r0, #1
 8000c12:	4198      	sbcs	r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	38fe      	subs	r0, #254	; 0xfe
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d1fb      	bne.n	8000c14 <__aeabi_fcmpun+0x20>
 8000c1c:	e7f4      	b.n	8000c08 <__aeabi_fcmpun+0x14>
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <__aeabi_dadd>:
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	464f      	mov	r7, r9
 8000c24:	4646      	mov	r6, r8
 8000c26:	46d6      	mov	lr, sl
 8000c28:	000c      	movs	r4, r1
 8000c2a:	0309      	lsls	r1, r1, #12
 8000c2c:	b5c0      	push	{r6, r7, lr}
 8000c2e:	0a49      	lsrs	r1, r1, #9
 8000c30:	0f47      	lsrs	r7, r0, #29
 8000c32:	005e      	lsls	r6, r3, #1
 8000c34:	4339      	orrs	r1, r7
 8000c36:	031f      	lsls	r7, r3, #12
 8000c38:	0fdb      	lsrs	r3, r3, #31
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	0065      	lsls	r5, r4, #1
 8000c3e:	0a7b      	lsrs	r3, r7, #9
 8000c40:	0f57      	lsrs	r7, r2, #29
 8000c42:	431f      	orrs	r7, r3
 8000c44:	0d6d      	lsrs	r5, r5, #21
 8000c46:	0fe4      	lsrs	r4, r4, #31
 8000c48:	0d76      	lsrs	r6, r6, #21
 8000c4a:	46a1      	mov	r9, r4
 8000c4c:	00c0      	lsls	r0, r0, #3
 8000c4e:	46b8      	mov	r8, r7
 8000c50:	00d2      	lsls	r2, r2, #3
 8000c52:	1bab      	subs	r3, r5, r6
 8000c54:	4564      	cmp	r4, ip
 8000c56:	d07b      	beq.n	8000d50 <__aeabi_dadd+0x130>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dd5f      	ble.n	8000d1c <__aeabi_dadd+0xfc>
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_dadd+0x42>
 8000c60:	e0a4      	b.n	8000dac <__aeabi_dadd+0x18c>
 8000c62:	003e      	movs	r6, r7
 8000c64:	4316      	orrs	r6, r2
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x4a>
 8000c68:	e112      	b.n	8000e90 <__aeabi_dadd+0x270>
 8000c6a:	1e5e      	subs	r6, r3, #1
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_dadd+0x52>
 8000c70:	e19e      	b.n	8000fb0 <__aeabi_dadd+0x390>
 8000c72:	1a87      	subs	r7, r0, r2
 8000c74:	4643      	mov	r3, r8
 8000c76:	42b8      	cmp	r0, r7
 8000c78:	4180      	sbcs	r0, r0
 8000c7a:	2501      	movs	r5, #1
 8000c7c:	1ac9      	subs	r1, r1, r3
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a09      	subs	r1, r1, r0
 8000c82:	020b      	lsls	r3, r1, #8
 8000c84:	d400      	bmi.n	8000c88 <__aeabi_dadd+0x68>
 8000c86:	e131      	b.n	8000eec <__aeabi_dadd+0x2cc>
 8000c88:	0249      	lsls	r1, r1, #9
 8000c8a:	0a4e      	lsrs	r6, r1, #9
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x72>
 8000c90:	e16e      	b.n	8000f70 <__aeabi_dadd+0x350>
 8000c92:	0030      	movs	r0, r6
 8000c94:	f001 fe38 	bl	8002908 <__clzsi2>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	3b08      	subs	r3, #8
 8000c9c:	2b1f      	cmp	r3, #31
 8000c9e:	dd00      	ble.n	8000ca2 <__aeabi_dadd+0x82>
 8000ca0:	e161      	b.n	8000f66 <__aeabi_dadd+0x346>
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	0039      	movs	r1, r7
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	409e      	lsls	r6, r3
 8000caa:	40d1      	lsrs	r1, r2
 8000cac:	409f      	lsls	r7, r3
 8000cae:	430e      	orrs	r6, r1
 8000cb0:	429d      	cmp	r5, r3
 8000cb2:	dd00      	ble.n	8000cb6 <__aeabi_dadd+0x96>
 8000cb4:	e151      	b.n	8000f5a <__aeabi_dadd+0x33a>
 8000cb6:	1b5d      	subs	r5, r3, r5
 8000cb8:	1c6b      	adds	r3, r5, #1
 8000cba:	2b1f      	cmp	r3, #31
 8000cbc:	dd00      	ble.n	8000cc0 <__aeabi_dadd+0xa0>
 8000cbe:	e17c      	b.n	8000fba <__aeabi_dadd+0x39a>
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	1ac9      	subs	r1, r1, r3
 8000cc4:	003d      	movs	r5, r7
 8000cc6:	0030      	movs	r0, r6
 8000cc8:	408f      	lsls	r7, r1
 8000cca:	4088      	lsls	r0, r1
 8000ccc:	40dd      	lsrs	r5, r3
 8000cce:	1e79      	subs	r1, r7, #1
 8000cd0:	418f      	sbcs	r7, r1
 8000cd2:	0031      	movs	r1, r6
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4328      	orrs	r0, r5
 8000cd8:	40d9      	lsrs	r1, r3
 8000cda:	2500      	movs	r5, #0
 8000cdc:	4307      	orrs	r7, r0
 8000cde:	403a      	ands	r2, r7
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d009      	beq.n	8000cf8 <__aeabi_dadd+0xd8>
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	403b      	ands	r3, r7
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d005      	beq.n	8000cf8 <__aeabi_dadd+0xd8>
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	42bb      	cmp	r3, r7
 8000cf0:	41bf      	sbcs	r7, r7
 8000cf2:	427f      	negs	r7, r7
 8000cf4:	19c9      	adds	r1, r1, r7
 8000cf6:	001f      	movs	r7, r3
 8000cf8:	020b      	lsls	r3, r1, #8
 8000cfa:	d400      	bmi.n	8000cfe <__aeabi_dadd+0xde>
 8000cfc:	e226      	b.n	800114c <__aeabi_dadd+0x52c>
 8000cfe:	1c6a      	adds	r2, r5, #1
 8000d00:	4bc6      	ldr	r3, [pc, #792]	; (800101c <__aeabi_dadd+0x3fc>)
 8000d02:	0555      	lsls	r5, r2, #21
 8000d04:	0d6d      	lsrs	r5, r5, #21
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0xec>
 8000d0a:	e106      	b.n	8000f1a <__aeabi_dadd+0x2fa>
 8000d0c:	4ac4      	ldr	r2, [pc, #784]	; (8001020 <__aeabi_dadd+0x400>)
 8000d0e:	08ff      	lsrs	r7, r7, #3
 8000d10:	400a      	ands	r2, r1
 8000d12:	0753      	lsls	r3, r2, #29
 8000d14:	0252      	lsls	r2, r2, #9
 8000d16:	433b      	orrs	r3, r7
 8000d18:	0b12      	lsrs	r2, r2, #12
 8000d1a:	e08e      	b.n	8000e3a <__aeabi_dadd+0x21a>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dadd+0x102>
 8000d20:	e0b8      	b.n	8000e94 <__aeabi_dadd+0x274>
 8000d22:	1c6b      	adds	r3, r5, #1
 8000d24:	055b      	lsls	r3, r3, #21
 8000d26:	0d5b      	lsrs	r3, r3, #21
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	dc00      	bgt.n	8000d2e <__aeabi_dadd+0x10e>
 8000d2c:	e130      	b.n	8000f90 <__aeabi_dadd+0x370>
 8000d2e:	1a87      	subs	r7, r0, r2
 8000d30:	4643      	mov	r3, r8
 8000d32:	42b8      	cmp	r0, r7
 8000d34:	41b6      	sbcs	r6, r6
 8000d36:	1acb      	subs	r3, r1, r3
 8000d38:	4276      	negs	r6, r6
 8000d3a:	1b9e      	subs	r6, r3, r6
 8000d3c:	0233      	lsls	r3, r6, #8
 8000d3e:	d500      	bpl.n	8000d42 <__aeabi_dadd+0x122>
 8000d40:	e14c      	b.n	8000fdc <__aeabi_dadd+0x3bc>
 8000d42:	003b      	movs	r3, r7
 8000d44:	4333      	orrs	r3, r6
 8000d46:	d1a1      	bne.n	8000c8c <__aeabi_dadd+0x6c>
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	e070      	b.n	8000e32 <__aeabi_dadd+0x212>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dc00      	bgt.n	8000d56 <__aeabi_dadd+0x136>
 8000d54:	e0e5      	b.n	8000f22 <__aeabi_dadd+0x302>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x13c>
 8000d5a:	e083      	b.n	8000e64 <__aeabi_dadd+0x244>
 8000d5c:	4eaf      	ldr	r6, [pc, #700]	; (800101c <__aeabi_dadd+0x3fc>)
 8000d5e:	42b5      	cmp	r5, r6
 8000d60:	d060      	beq.n	8000e24 <__aeabi_dadd+0x204>
 8000d62:	2680      	movs	r6, #128	; 0x80
 8000d64:	0436      	lsls	r6, r6, #16
 8000d66:	4337      	orrs	r7, r6
 8000d68:	46b8      	mov	r8, r7
 8000d6a:	2b38      	cmp	r3, #56	; 0x38
 8000d6c:	dc00      	bgt.n	8000d70 <__aeabi_dadd+0x150>
 8000d6e:	e13e      	b.n	8000fee <__aeabi_dadd+0x3ce>
 8000d70:	4643      	mov	r3, r8
 8000d72:	4313      	orrs	r3, r2
 8000d74:	001f      	movs	r7, r3
 8000d76:	1e7a      	subs	r2, r7, #1
 8000d78:	4197      	sbcs	r7, r2
 8000d7a:	183f      	adds	r7, r7, r0
 8000d7c:	4287      	cmp	r7, r0
 8000d7e:	4180      	sbcs	r0, r0
 8000d80:	4240      	negs	r0, r0
 8000d82:	1809      	adds	r1, r1, r0
 8000d84:	020b      	lsls	r3, r1, #8
 8000d86:	d400      	bmi.n	8000d8a <__aeabi_dadd+0x16a>
 8000d88:	e0b0      	b.n	8000eec <__aeabi_dadd+0x2cc>
 8000d8a:	4ba4      	ldr	r3, [pc, #656]	; (800101c <__aeabi_dadd+0x3fc>)
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	429d      	cmp	r5, r3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x174>
 8000d92:	e0c3      	b.n	8000f1c <__aeabi_dadd+0x2fc>
 8000d94:	4aa2      	ldr	r2, [pc, #648]	; (8001020 <__aeabi_dadd+0x400>)
 8000d96:	087b      	lsrs	r3, r7, #1
 8000d98:	400a      	ands	r2, r1
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	400f      	ands	r7, r1
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	0851      	lsrs	r1, r2, #1
 8000da2:	07d3      	lsls	r3, r2, #31
 8000da4:	2207      	movs	r2, #7
 8000da6:	431f      	orrs	r7, r3
 8000da8:	403a      	ands	r2, r7
 8000daa:	e799      	b.n	8000ce0 <__aeabi_dadd+0xc0>
 8000dac:	4e9b      	ldr	r6, [pc, #620]	; (800101c <__aeabi_dadd+0x3fc>)
 8000dae:	42b5      	cmp	r5, r6
 8000db0:	d038      	beq.n	8000e24 <__aeabi_dadd+0x204>
 8000db2:	2680      	movs	r6, #128	; 0x80
 8000db4:	0436      	lsls	r6, r6, #16
 8000db6:	4337      	orrs	r7, r6
 8000db8:	46b8      	mov	r8, r7
 8000dba:	2b38      	cmp	r3, #56	; 0x38
 8000dbc:	dd00      	ble.n	8000dc0 <__aeabi_dadd+0x1a0>
 8000dbe:	e0dc      	b.n	8000f7a <__aeabi_dadd+0x35a>
 8000dc0:	2b1f      	cmp	r3, #31
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_dadd+0x1a6>
 8000dc4:	e130      	b.n	8001028 <__aeabi_dadd+0x408>
 8000dc6:	001e      	movs	r6, r3
 8000dc8:	4647      	mov	r7, r8
 8000dca:	3e20      	subs	r6, #32
 8000dcc:	40f7      	lsrs	r7, r6
 8000dce:	46bc      	mov	ip, r7
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	d004      	beq.n	8000dde <__aeabi_dadd+0x1be>
 8000dd4:	2640      	movs	r6, #64	; 0x40
 8000dd6:	1af3      	subs	r3, r6, r3
 8000dd8:	4646      	mov	r6, r8
 8000dda:	409e      	lsls	r6, r3
 8000ddc:	4332      	orrs	r2, r6
 8000dde:	0017      	movs	r7, r2
 8000de0:	4663      	mov	r3, ip
 8000de2:	1e7a      	subs	r2, r7, #1
 8000de4:	4197      	sbcs	r7, r2
 8000de6:	431f      	orrs	r7, r3
 8000de8:	e0cc      	b.n	8000f84 <__aeabi_dadd+0x364>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dadd+0x1d0>
 8000dee:	e204      	b.n	80011fa <__aeabi_dadd+0x5da>
 8000df0:	4643      	mov	r3, r8
 8000df2:	4313      	orrs	r3, r2
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x1d8>
 8000df6:	e159      	b.n	80010ac <__aeabi_dadd+0x48c>
 8000df8:	074b      	lsls	r3, r1, #29
 8000dfa:	08c0      	lsrs	r0, r0, #3
 8000dfc:	4318      	orrs	r0, r3
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	08c9      	lsrs	r1, r1, #3
 8000e02:	031b      	lsls	r3, r3, #12
 8000e04:	4219      	tst	r1, r3
 8000e06:	d008      	beq.n	8000e1a <__aeabi_dadd+0x1fa>
 8000e08:	4645      	mov	r5, r8
 8000e0a:	08ed      	lsrs	r5, r5, #3
 8000e0c:	421d      	tst	r5, r3
 8000e0e:	d104      	bne.n	8000e1a <__aeabi_dadd+0x1fa>
 8000e10:	4643      	mov	r3, r8
 8000e12:	08d0      	lsrs	r0, r2, #3
 8000e14:	0759      	lsls	r1, r3, #29
 8000e16:	4308      	orrs	r0, r1
 8000e18:	0029      	movs	r1, r5
 8000e1a:	0f42      	lsrs	r2, r0, #29
 8000e1c:	00c9      	lsls	r1, r1, #3
 8000e1e:	4d7f      	ldr	r5, [pc, #508]	; (800101c <__aeabi_dadd+0x3fc>)
 8000e20:	4311      	orrs	r1, r2
 8000e22:	00c0      	lsls	r0, r0, #3
 8000e24:	074b      	lsls	r3, r1, #29
 8000e26:	08ca      	lsrs	r2, r1, #3
 8000e28:	497c      	ldr	r1, [pc, #496]	; (800101c <__aeabi_dadd+0x3fc>)
 8000e2a:	08c0      	lsrs	r0, r0, #3
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	428d      	cmp	r5, r1
 8000e30:	d068      	beq.n	8000f04 <__aeabi_dadd+0x2e4>
 8000e32:	0312      	lsls	r2, r2, #12
 8000e34:	056d      	lsls	r5, r5, #21
 8000e36:	0b12      	lsrs	r2, r2, #12
 8000e38:	0d6d      	lsrs	r5, r5, #21
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	0312      	lsls	r2, r2, #12
 8000e3e:	0018      	movs	r0, r3
 8000e40:	0b13      	lsrs	r3, r2, #12
 8000e42:	0d0a      	lsrs	r2, r1, #20
 8000e44:	0512      	lsls	r2, r2, #20
 8000e46:	431a      	orrs	r2, r3
 8000e48:	4b76      	ldr	r3, [pc, #472]	; (8001024 <__aeabi_dadd+0x404>)
 8000e4a:	052d      	lsls	r5, r5, #20
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	432b      	orrs	r3, r5
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	07e4      	lsls	r4, r4, #31
 8000e54:	085b      	lsrs	r3, r3, #1
 8000e56:	4323      	orrs	r3, r4
 8000e58:	0019      	movs	r1, r3
 8000e5a:	bc1c      	pop	{r2, r3, r4}
 8000e5c:	4690      	mov	r8, r2
 8000e5e:	4699      	mov	r9, r3
 8000e60:	46a2      	mov	sl, r4
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e64:	003e      	movs	r6, r7
 8000e66:	4316      	orrs	r6, r2
 8000e68:	d012      	beq.n	8000e90 <__aeabi_dadd+0x270>
 8000e6a:	1e5e      	subs	r6, r3, #1
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_dadd+0x252>
 8000e70:	e100      	b.n	8001074 <__aeabi_dadd+0x454>
 8000e72:	1887      	adds	r7, r0, r2
 8000e74:	4287      	cmp	r7, r0
 8000e76:	4180      	sbcs	r0, r0
 8000e78:	4441      	add	r1, r8
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	1809      	adds	r1, r1, r0
 8000e7e:	2501      	movs	r5, #1
 8000e80:	020b      	lsls	r3, r1, #8
 8000e82:	d533      	bpl.n	8000eec <__aeabi_dadd+0x2cc>
 8000e84:	2502      	movs	r5, #2
 8000e86:	e785      	b.n	8000d94 <__aeabi_dadd+0x174>
 8000e88:	4664      	mov	r4, ip
 8000e8a:	0033      	movs	r3, r6
 8000e8c:	4641      	mov	r1, r8
 8000e8e:	0010      	movs	r0, r2
 8000e90:	001d      	movs	r5, r3
 8000e92:	e7c7      	b.n	8000e24 <__aeabi_dadd+0x204>
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d000      	beq.n	8000e9a <__aeabi_dadd+0x27a>
 8000e98:	e0da      	b.n	8001050 <__aeabi_dadd+0x430>
 8000e9a:	000c      	movs	r4, r1
 8000e9c:	4304      	orrs	r4, r0
 8000e9e:	d0f3      	beq.n	8000e88 <__aeabi_dadd+0x268>
 8000ea0:	1c5c      	adds	r4, r3, #1
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dadd+0x286>
 8000ea4:	e19f      	b.n	80011e6 <__aeabi_dadd+0x5c6>
 8000ea6:	4c5d      	ldr	r4, [pc, #372]	; (800101c <__aeabi_dadd+0x3fc>)
 8000ea8:	42a6      	cmp	r6, r4
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dadd+0x28e>
 8000eac:	e12f      	b.n	800110e <__aeabi_dadd+0x4ee>
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	2b38      	cmp	r3, #56	; 0x38
 8000eb2:	dd00      	ble.n	8000eb6 <__aeabi_dadd+0x296>
 8000eb4:	e166      	b.n	8001184 <__aeabi_dadd+0x564>
 8000eb6:	2b1f      	cmp	r3, #31
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_dadd+0x29c>
 8000eba:	e183      	b.n	80011c4 <__aeabi_dadd+0x5a4>
 8000ebc:	2420      	movs	r4, #32
 8000ebe:	0005      	movs	r5, r0
 8000ec0:	1ae4      	subs	r4, r4, r3
 8000ec2:	000f      	movs	r7, r1
 8000ec4:	40dd      	lsrs	r5, r3
 8000ec6:	40d9      	lsrs	r1, r3
 8000ec8:	40a0      	lsls	r0, r4
 8000eca:	4643      	mov	r3, r8
 8000ecc:	40a7      	lsls	r7, r4
 8000ece:	1a5b      	subs	r3, r3, r1
 8000ed0:	1e44      	subs	r4, r0, #1
 8000ed2:	41a0      	sbcs	r0, r4
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	432f      	orrs	r7, r5
 8000ed8:	4338      	orrs	r0, r7
 8000eda:	1a17      	subs	r7, r2, r0
 8000edc:	42ba      	cmp	r2, r7
 8000ede:	4192      	sbcs	r2, r2
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	4252      	negs	r2, r2
 8000ee4:	1a99      	subs	r1, r3, r2
 8000ee6:	4664      	mov	r4, ip
 8000ee8:	0035      	movs	r5, r6
 8000eea:	e6ca      	b.n	8000c82 <__aeabi_dadd+0x62>
 8000eec:	2207      	movs	r2, #7
 8000eee:	403a      	ands	r2, r7
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_dadd+0x2d6>
 8000ef4:	e6f6      	b.n	8000ce4 <__aeabi_dadd+0xc4>
 8000ef6:	074b      	lsls	r3, r1, #29
 8000ef8:	08ca      	lsrs	r2, r1, #3
 8000efa:	4948      	ldr	r1, [pc, #288]	; (800101c <__aeabi_dadd+0x3fc>)
 8000efc:	08ff      	lsrs	r7, r7, #3
 8000efe:	433b      	orrs	r3, r7
 8000f00:	428d      	cmp	r5, r1
 8000f02:	d196      	bne.n	8000e32 <__aeabi_dadd+0x212>
 8000f04:	0019      	movs	r1, r3
 8000f06:	4311      	orrs	r1, r2
 8000f08:	d100      	bne.n	8000f0c <__aeabi_dadd+0x2ec>
 8000f0a:	e19e      	b.n	800124a <__aeabi_dadd+0x62a>
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0309      	lsls	r1, r1, #12
 8000f10:	430a      	orrs	r2, r1
 8000f12:	0312      	lsls	r2, r2, #12
 8000f14:	0b12      	lsrs	r2, r2, #12
 8000f16:	4d41      	ldr	r5, [pc, #260]	; (800101c <__aeabi_dadd+0x3fc>)
 8000f18:	e78f      	b.n	8000e3a <__aeabi_dadd+0x21a>
 8000f1a:	0015      	movs	r5, r2
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e78b      	b.n	8000e3a <__aeabi_dadd+0x21a>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d000      	beq.n	8000f28 <__aeabi_dadd+0x308>
 8000f26:	e0c7      	b.n	80010b8 <__aeabi_dadd+0x498>
 8000f28:	1c6b      	adds	r3, r5, #1
 8000f2a:	055f      	lsls	r7, r3, #21
 8000f2c:	0d7f      	lsrs	r7, r7, #21
 8000f2e:	2f01      	cmp	r7, #1
 8000f30:	dc00      	bgt.n	8000f34 <__aeabi_dadd+0x314>
 8000f32:	e0f1      	b.n	8001118 <__aeabi_dadd+0x4f8>
 8000f34:	4d39      	ldr	r5, [pc, #228]	; (800101c <__aeabi_dadd+0x3fc>)
 8000f36:	42ab      	cmp	r3, r5
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x31c>
 8000f3a:	e0b9      	b.n	80010b0 <__aeabi_dadd+0x490>
 8000f3c:	1885      	adds	r5, r0, r2
 8000f3e:	000a      	movs	r2, r1
 8000f40:	4285      	cmp	r5, r0
 8000f42:	4189      	sbcs	r1, r1
 8000f44:	4442      	add	r2, r8
 8000f46:	4249      	negs	r1, r1
 8000f48:	1851      	adds	r1, r2, r1
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	07cf      	lsls	r7, r1, #31
 8000f4e:	086d      	lsrs	r5, r5, #1
 8000f50:	432f      	orrs	r7, r5
 8000f52:	0849      	lsrs	r1, r1, #1
 8000f54:	403a      	ands	r2, r7
 8000f56:	001d      	movs	r5, r3
 8000f58:	e6c2      	b.n	8000ce0 <__aeabi_dadd+0xc0>
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	4930      	ldr	r1, [pc, #192]	; (8001020 <__aeabi_dadd+0x400>)
 8000f5e:	1aed      	subs	r5, r5, r3
 8000f60:	4031      	ands	r1, r6
 8000f62:	403a      	ands	r2, r7
 8000f64:	e6bc      	b.n	8000ce0 <__aeabi_dadd+0xc0>
 8000f66:	003e      	movs	r6, r7
 8000f68:	3828      	subs	r0, #40	; 0x28
 8000f6a:	4086      	lsls	r6, r0
 8000f6c:	2700      	movs	r7, #0
 8000f6e:	e69f      	b.n	8000cb0 <__aeabi_dadd+0x90>
 8000f70:	0038      	movs	r0, r7
 8000f72:	f001 fcc9 	bl	8002908 <__clzsi2>
 8000f76:	3020      	adds	r0, #32
 8000f78:	e68e      	b.n	8000c98 <__aeabi_dadd+0x78>
 8000f7a:	4643      	mov	r3, r8
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	001f      	movs	r7, r3
 8000f80:	1e7a      	subs	r2, r7, #1
 8000f82:	4197      	sbcs	r7, r2
 8000f84:	1bc7      	subs	r7, r0, r7
 8000f86:	42b8      	cmp	r0, r7
 8000f88:	4180      	sbcs	r0, r0
 8000f8a:	4240      	negs	r0, r0
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	e678      	b.n	8000c82 <__aeabi_dadd+0x62>
 8000f90:	000e      	movs	r6, r1
 8000f92:	003b      	movs	r3, r7
 8000f94:	4306      	orrs	r6, r0
 8000f96:	4313      	orrs	r3, r2
 8000f98:	2d00      	cmp	r5, #0
 8000f9a:	d161      	bne.n	8001060 <__aeabi_dadd+0x440>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_dadd+0x382>
 8000fa0:	e0f4      	b.n	800118c <__aeabi_dadd+0x56c>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_dadd+0x388>
 8000fa6:	e11b      	b.n	80011e0 <__aeabi_dadd+0x5c0>
 8000fa8:	4664      	mov	r4, ip
 8000faa:	0039      	movs	r1, r7
 8000fac:	0010      	movs	r0, r2
 8000fae:	e739      	b.n	8000e24 <__aeabi_dadd+0x204>
 8000fb0:	4f1a      	ldr	r7, [pc, #104]	; (800101c <__aeabi_dadd+0x3fc>)
 8000fb2:	42bb      	cmp	r3, r7
 8000fb4:	d07a      	beq.n	80010ac <__aeabi_dadd+0x48c>
 8000fb6:	0033      	movs	r3, r6
 8000fb8:	e6ff      	b.n	8000dba <__aeabi_dadd+0x19a>
 8000fba:	0030      	movs	r0, r6
 8000fbc:	3d1f      	subs	r5, #31
 8000fbe:	40e8      	lsrs	r0, r5
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	d003      	beq.n	8000fcc <__aeabi_dadd+0x3ac>
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	1acb      	subs	r3, r1, r3
 8000fc8:	409e      	lsls	r6, r3
 8000fca:	4337      	orrs	r7, r6
 8000fcc:	1e7b      	subs	r3, r7, #1
 8000fce:	419f      	sbcs	r7, r3
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	4307      	orrs	r7, r0
 8000fd4:	403a      	ands	r2, r7
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2500      	movs	r5, #0
 8000fda:	e789      	b.n	8000ef0 <__aeabi_dadd+0x2d0>
 8000fdc:	1a17      	subs	r7, r2, r0
 8000fde:	4643      	mov	r3, r8
 8000fe0:	42ba      	cmp	r2, r7
 8000fe2:	41b6      	sbcs	r6, r6
 8000fe4:	1a59      	subs	r1, r3, r1
 8000fe6:	4276      	negs	r6, r6
 8000fe8:	1b8e      	subs	r6, r1, r6
 8000fea:	4664      	mov	r4, ip
 8000fec:	e64e      	b.n	8000c8c <__aeabi_dadd+0x6c>
 8000fee:	2b1f      	cmp	r3, #31
 8000ff0:	dd00      	ble.n	8000ff4 <__aeabi_dadd+0x3d4>
 8000ff2:	e0ad      	b.n	8001150 <__aeabi_dadd+0x530>
 8000ff4:	2620      	movs	r6, #32
 8000ff6:	4647      	mov	r7, r8
 8000ff8:	1af6      	subs	r6, r6, r3
 8000ffa:	40b7      	lsls	r7, r6
 8000ffc:	46b9      	mov	r9, r7
 8000ffe:	0017      	movs	r7, r2
 8001000:	46b2      	mov	sl, r6
 8001002:	40df      	lsrs	r7, r3
 8001004:	464e      	mov	r6, r9
 8001006:	433e      	orrs	r6, r7
 8001008:	0037      	movs	r7, r6
 800100a:	4656      	mov	r6, sl
 800100c:	40b2      	lsls	r2, r6
 800100e:	1e56      	subs	r6, r2, #1
 8001010:	41b2      	sbcs	r2, r6
 8001012:	4317      	orrs	r7, r2
 8001014:	4642      	mov	r2, r8
 8001016:	40da      	lsrs	r2, r3
 8001018:	1889      	adds	r1, r1, r2
 800101a:	e6ae      	b.n	8000d7a <__aeabi_dadd+0x15a>
 800101c:	000007ff 	.word	0x000007ff
 8001020:	ff7fffff 	.word	0xff7fffff
 8001024:	800fffff 	.word	0x800fffff
 8001028:	2620      	movs	r6, #32
 800102a:	4647      	mov	r7, r8
 800102c:	1af6      	subs	r6, r6, r3
 800102e:	40b7      	lsls	r7, r6
 8001030:	46b9      	mov	r9, r7
 8001032:	0017      	movs	r7, r2
 8001034:	46b2      	mov	sl, r6
 8001036:	40df      	lsrs	r7, r3
 8001038:	464e      	mov	r6, r9
 800103a:	433e      	orrs	r6, r7
 800103c:	0037      	movs	r7, r6
 800103e:	4656      	mov	r6, sl
 8001040:	40b2      	lsls	r2, r6
 8001042:	1e56      	subs	r6, r2, #1
 8001044:	41b2      	sbcs	r2, r6
 8001046:	4317      	orrs	r7, r2
 8001048:	4642      	mov	r2, r8
 800104a:	40da      	lsrs	r2, r3
 800104c:	1a89      	subs	r1, r1, r2
 800104e:	e799      	b.n	8000f84 <__aeabi_dadd+0x364>
 8001050:	4c7f      	ldr	r4, [pc, #508]	; (8001250 <__aeabi_dadd+0x630>)
 8001052:	42a6      	cmp	r6, r4
 8001054:	d05b      	beq.n	800110e <__aeabi_dadd+0x4ee>
 8001056:	2480      	movs	r4, #128	; 0x80
 8001058:	0424      	lsls	r4, r4, #16
 800105a:	425b      	negs	r3, r3
 800105c:	4321      	orrs	r1, r4
 800105e:	e727      	b.n	8000eb0 <__aeabi_dadd+0x290>
 8001060:	2e00      	cmp	r6, #0
 8001062:	d10c      	bne.n	800107e <__aeabi_dadd+0x45e>
 8001064:	2b00      	cmp	r3, #0
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x44a>
 8001068:	e0cb      	b.n	8001202 <__aeabi_dadd+0x5e2>
 800106a:	4664      	mov	r4, ip
 800106c:	0039      	movs	r1, r7
 800106e:	0010      	movs	r0, r2
 8001070:	4d77      	ldr	r5, [pc, #476]	; (8001250 <__aeabi_dadd+0x630>)
 8001072:	e6d7      	b.n	8000e24 <__aeabi_dadd+0x204>
 8001074:	4f76      	ldr	r7, [pc, #472]	; (8001250 <__aeabi_dadd+0x630>)
 8001076:	42bb      	cmp	r3, r7
 8001078:	d018      	beq.n	80010ac <__aeabi_dadd+0x48c>
 800107a:	0033      	movs	r3, r6
 800107c:	e675      	b.n	8000d6a <__aeabi_dadd+0x14a>
 800107e:	2b00      	cmp	r3, #0
 8001080:	d014      	beq.n	80010ac <__aeabi_dadd+0x48c>
 8001082:	074b      	lsls	r3, r1, #29
 8001084:	08c0      	lsrs	r0, r0, #3
 8001086:	4318      	orrs	r0, r3
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	08c9      	lsrs	r1, r1, #3
 800108c:	031b      	lsls	r3, r3, #12
 800108e:	4219      	tst	r1, r3
 8001090:	d007      	beq.n	80010a2 <__aeabi_dadd+0x482>
 8001092:	08fc      	lsrs	r4, r7, #3
 8001094:	421c      	tst	r4, r3
 8001096:	d104      	bne.n	80010a2 <__aeabi_dadd+0x482>
 8001098:	0779      	lsls	r1, r7, #29
 800109a:	08d0      	lsrs	r0, r2, #3
 800109c:	4308      	orrs	r0, r1
 800109e:	46e1      	mov	r9, ip
 80010a0:	0021      	movs	r1, r4
 80010a2:	464c      	mov	r4, r9
 80010a4:	0f42      	lsrs	r2, r0, #29
 80010a6:	00c9      	lsls	r1, r1, #3
 80010a8:	4311      	orrs	r1, r2
 80010aa:	00c0      	lsls	r0, r0, #3
 80010ac:	4d68      	ldr	r5, [pc, #416]	; (8001250 <__aeabi_dadd+0x630>)
 80010ae:	e6b9      	b.n	8000e24 <__aeabi_dadd+0x204>
 80010b0:	001d      	movs	r5, r3
 80010b2:	2200      	movs	r2, #0
 80010b4:	2300      	movs	r3, #0
 80010b6:	e6c0      	b.n	8000e3a <__aeabi_dadd+0x21a>
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	d15b      	bne.n	8001174 <__aeabi_dadd+0x554>
 80010bc:	000d      	movs	r5, r1
 80010be:	4305      	orrs	r5, r0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0x4a4>
 80010c2:	e6e2      	b.n	8000e8a <__aeabi_dadd+0x26a>
 80010c4:	1c5d      	adds	r5, r3, #1
 80010c6:	d100      	bne.n	80010ca <__aeabi_dadd+0x4aa>
 80010c8:	e0b0      	b.n	800122c <__aeabi_dadd+0x60c>
 80010ca:	4d61      	ldr	r5, [pc, #388]	; (8001250 <__aeabi_dadd+0x630>)
 80010cc:	42ae      	cmp	r6, r5
 80010ce:	d01f      	beq.n	8001110 <__aeabi_dadd+0x4f0>
 80010d0:	43db      	mvns	r3, r3
 80010d2:	2b38      	cmp	r3, #56	; 0x38
 80010d4:	dc71      	bgt.n	80011ba <__aeabi_dadd+0x59a>
 80010d6:	2b1f      	cmp	r3, #31
 80010d8:	dd00      	ble.n	80010dc <__aeabi_dadd+0x4bc>
 80010da:	e096      	b.n	800120a <__aeabi_dadd+0x5ea>
 80010dc:	2520      	movs	r5, #32
 80010de:	000f      	movs	r7, r1
 80010e0:	1aed      	subs	r5, r5, r3
 80010e2:	40af      	lsls	r7, r5
 80010e4:	46b9      	mov	r9, r7
 80010e6:	0007      	movs	r7, r0
 80010e8:	46aa      	mov	sl, r5
 80010ea:	40df      	lsrs	r7, r3
 80010ec:	464d      	mov	r5, r9
 80010ee:	433d      	orrs	r5, r7
 80010f0:	002f      	movs	r7, r5
 80010f2:	4655      	mov	r5, sl
 80010f4:	40a8      	lsls	r0, r5
 80010f6:	40d9      	lsrs	r1, r3
 80010f8:	1e45      	subs	r5, r0, #1
 80010fa:	41a8      	sbcs	r0, r5
 80010fc:	4488      	add	r8, r1
 80010fe:	4307      	orrs	r7, r0
 8001100:	18bf      	adds	r7, r7, r2
 8001102:	4297      	cmp	r7, r2
 8001104:	4192      	sbcs	r2, r2
 8001106:	4251      	negs	r1, r2
 8001108:	4441      	add	r1, r8
 800110a:	0035      	movs	r5, r6
 800110c:	e63a      	b.n	8000d84 <__aeabi_dadd+0x164>
 800110e:	4664      	mov	r4, ip
 8001110:	0035      	movs	r5, r6
 8001112:	4641      	mov	r1, r8
 8001114:	0010      	movs	r0, r2
 8001116:	e685      	b.n	8000e24 <__aeabi_dadd+0x204>
 8001118:	000b      	movs	r3, r1
 800111a:	4303      	orrs	r3, r0
 800111c:	2d00      	cmp	r5, #0
 800111e:	d000      	beq.n	8001122 <__aeabi_dadd+0x502>
 8001120:	e663      	b.n	8000dea <__aeabi_dadd+0x1ca>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f5      	beq.n	8001112 <__aeabi_dadd+0x4f2>
 8001126:	4643      	mov	r3, r8
 8001128:	4313      	orrs	r3, r2
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x50e>
 800112c:	e67a      	b.n	8000e24 <__aeabi_dadd+0x204>
 800112e:	1887      	adds	r7, r0, r2
 8001130:	4287      	cmp	r7, r0
 8001132:	4180      	sbcs	r0, r0
 8001134:	2207      	movs	r2, #7
 8001136:	4441      	add	r1, r8
 8001138:	4240      	negs	r0, r0
 800113a:	1809      	adds	r1, r1, r0
 800113c:	403a      	ands	r2, r7
 800113e:	020b      	lsls	r3, r1, #8
 8001140:	d400      	bmi.n	8001144 <__aeabi_dadd+0x524>
 8001142:	e6d5      	b.n	8000ef0 <__aeabi_dadd+0x2d0>
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <__aeabi_dadd+0x634>)
 8001146:	3501      	adds	r5, #1
 8001148:	4019      	ands	r1, r3
 800114a:	e5c9      	b.n	8000ce0 <__aeabi_dadd+0xc0>
 800114c:	0038      	movs	r0, r7
 800114e:	e669      	b.n	8000e24 <__aeabi_dadd+0x204>
 8001150:	001e      	movs	r6, r3
 8001152:	4647      	mov	r7, r8
 8001154:	3e20      	subs	r6, #32
 8001156:	40f7      	lsrs	r7, r6
 8001158:	46bc      	mov	ip, r7
 800115a:	2b20      	cmp	r3, #32
 800115c:	d004      	beq.n	8001168 <__aeabi_dadd+0x548>
 800115e:	2640      	movs	r6, #64	; 0x40
 8001160:	1af3      	subs	r3, r6, r3
 8001162:	4646      	mov	r6, r8
 8001164:	409e      	lsls	r6, r3
 8001166:	4332      	orrs	r2, r6
 8001168:	0017      	movs	r7, r2
 800116a:	4663      	mov	r3, ip
 800116c:	1e7a      	subs	r2, r7, #1
 800116e:	4197      	sbcs	r7, r2
 8001170:	431f      	orrs	r7, r3
 8001172:	e602      	b.n	8000d7a <__aeabi_dadd+0x15a>
 8001174:	4d36      	ldr	r5, [pc, #216]	; (8001250 <__aeabi_dadd+0x630>)
 8001176:	42ae      	cmp	r6, r5
 8001178:	d0ca      	beq.n	8001110 <__aeabi_dadd+0x4f0>
 800117a:	2580      	movs	r5, #128	; 0x80
 800117c:	042d      	lsls	r5, r5, #16
 800117e:	425b      	negs	r3, r3
 8001180:	4329      	orrs	r1, r5
 8001182:	e7a6      	b.n	80010d2 <__aeabi_dadd+0x4b2>
 8001184:	4308      	orrs	r0, r1
 8001186:	1e41      	subs	r1, r0, #1
 8001188:	4188      	sbcs	r0, r1
 800118a:	e6a6      	b.n	8000eda <__aeabi_dadd+0x2ba>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x572>
 8001190:	e648      	b.n	8000e24 <__aeabi_dadd+0x204>
 8001192:	1a87      	subs	r7, r0, r2
 8001194:	4643      	mov	r3, r8
 8001196:	42b8      	cmp	r0, r7
 8001198:	41b6      	sbcs	r6, r6
 800119a:	1acb      	subs	r3, r1, r3
 800119c:	4276      	negs	r6, r6
 800119e:	1b9e      	subs	r6, r3, r6
 80011a0:	0233      	lsls	r3, r6, #8
 80011a2:	d54b      	bpl.n	800123c <__aeabi_dadd+0x61c>
 80011a4:	1a17      	subs	r7, r2, r0
 80011a6:	4643      	mov	r3, r8
 80011a8:	42ba      	cmp	r2, r7
 80011aa:	4192      	sbcs	r2, r2
 80011ac:	1a59      	subs	r1, r3, r1
 80011ae:	4252      	negs	r2, r2
 80011b0:	1a89      	subs	r1, r1, r2
 80011b2:	2207      	movs	r2, #7
 80011b4:	4664      	mov	r4, ip
 80011b6:	403a      	ands	r2, r7
 80011b8:	e592      	b.n	8000ce0 <__aeabi_dadd+0xc0>
 80011ba:	4301      	orrs	r1, r0
 80011bc:	000f      	movs	r7, r1
 80011be:	1e79      	subs	r1, r7, #1
 80011c0:	418f      	sbcs	r7, r1
 80011c2:	e79d      	b.n	8001100 <__aeabi_dadd+0x4e0>
 80011c4:	001c      	movs	r4, r3
 80011c6:	000f      	movs	r7, r1
 80011c8:	3c20      	subs	r4, #32
 80011ca:	40e7      	lsrs	r7, r4
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	d003      	beq.n	80011d8 <__aeabi_dadd+0x5b8>
 80011d0:	2440      	movs	r4, #64	; 0x40
 80011d2:	1ae3      	subs	r3, r4, r3
 80011d4:	4099      	lsls	r1, r3
 80011d6:	4308      	orrs	r0, r1
 80011d8:	1e41      	subs	r1, r0, #1
 80011da:	4188      	sbcs	r0, r1
 80011dc:	4338      	orrs	r0, r7
 80011de:	e67c      	b.n	8000eda <__aeabi_dadd+0x2ba>
 80011e0:	2200      	movs	r2, #0
 80011e2:	2400      	movs	r4, #0
 80011e4:	e625      	b.n	8000e32 <__aeabi_dadd+0x212>
 80011e6:	1a17      	subs	r7, r2, r0
 80011e8:	4643      	mov	r3, r8
 80011ea:	42ba      	cmp	r2, r7
 80011ec:	4192      	sbcs	r2, r2
 80011ee:	1a59      	subs	r1, r3, r1
 80011f0:	4252      	negs	r2, r2
 80011f2:	1a89      	subs	r1, r1, r2
 80011f4:	4664      	mov	r4, ip
 80011f6:	0035      	movs	r5, r6
 80011f8:	e543      	b.n	8000c82 <__aeabi_dadd+0x62>
 80011fa:	4641      	mov	r1, r8
 80011fc:	0010      	movs	r0, r2
 80011fe:	4d14      	ldr	r5, [pc, #80]	; (8001250 <__aeabi_dadd+0x630>)
 8001200:	e610      	b.n	8000e24 <__aeabi_dadd+0x204>
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	2400      	movs	r4, #0
 8001206:	0312      	lsls	r2, r2, #12
 8001208:	e680      	b.n	8000f0c <__aeabi_dadd+0x2ec>
 800120a:	001d      	movs	r5, r3
 800120c:	000f      	movs	r7, r1
 800120e:	3d20      	subs	r5, #32
 8001210:	40ef      	lsrs	r7, r5
 8001212:	46bc      	mov	ip, r7
 8001214:	2b20      	cmp	r3, #32
 8001216:	d003      	beq.n	8001220 <__aeabi_dadd+0x600>
 8001218:	2540      	movs	r5, #64	; 0x40
 800121a:	1aeb      	subs	r3, r5, r3
 800121c:	4099      	lsls	r1, r3
 800121e:	4308      	orrs	r0, r1
 8001220:	0007      	movs	r7, r0
 8001222:	4663      	mov	r3, ip
 8001224:	1e78      	subs	r0, r7, #1
 8001226:	4187      	sbcs	r7, r0
 8001228:	431f      	orrs	r7, r3
 800122a:	e769      	b.n	8001100 <__aeabi_dadd+0x4e0>
 800122c:	1887      	adds	r7, r0, r2
 800122e:	4297      	cmp	r7, r2
 8001230:	419b      	sbcs	r3, r3
 8001232:	4441      	add	r1, r8
 8001234:	425b      	negs	r3, r3
 8001236:	18c9      	adds	r1, r1, r3
 8001238:	0035      	movs	r5, r6
 800123a:	e5a3      	b.n	8000d84 <__aeabi_dadd+0x164>
 800123c:	003b      	movs	r3, r7
 800123e:	4333      	orrs	r3, r6
 8001240:	d0ce      	beq.n	80011e0 <__aeabi_dadd+0x5c0>
 8001242:	2207      	movs	r2, #7
 8001244:	0031      	movs	r1, r6
 8001246:	403a      	ands	r2, r7
 8001248:	e652      	b.n	8000ef0 <__aeabi_dadd+0x2d0>
 800124a:	2300      	movs	r3, #0
 800124c:	001a      	movs	r2, r3
 800124e:	e5f4      	b.n	8000e3a <__aeabi_dadd+0x21a>
 8001250:	000007ff 	.word	0x000007ff
 8001254:	ff7fffff 	.word	0xff7fffff

08001258 <__aeabi_ddiv>:
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	4657      	mov	r7, sl
 800125c:	46de      	mov	lr, fp
 800125e:	464e      	mov	r6, r9
 8001260:	4645      	mov	r5, r8
 8001262:	b5e0      	push	{r5, r6, r7, lr}
 8001264:	4683      	mov	fp, r0
 8001266:	0007      	movs	r7, r0
 8001268:	030e      	lsls	r6, r1, #12
 800126a:	0048      	lsls	r0, r1, #1
 800126c:	b085      	sub	sp, #20
 800126e:	4692      	mov	sl, r2
 8001270:	001c      	movs	r4, r3
 8001272:	0b36      	lsrs	r6, r6, #12
 8001274:	0d40      	lsrs	r0, r0, #21
 8001276:	0fcd      	lsrs	r5, r1, #31
 8001278:	2800      	cmp	r0, #0
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x26>
 800127c:	e09d      	b.n	80013ba <__aeabi_ddiv+0x162>
 800127e:	4b95      	ldr	r3, [pc, #596]	; (80014d4 <__aeabi_ddiv+0x27c>)
 8001280:	4298      	cmp	r0, r3
 8001282:	d039      	beq.n	80012f8 <__aeabi_ddiv+0xa0>
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	00f6      	lsls	r6, r6, #3
 8001288:	041b      	lsls	r3, r3, #16
 800128a:	431e      	orrs	r6, r3
 800128c:	4a92      	ldr	r2, [pc, #584]	; (80014d8 <__aeabi_ddiv+0x280>)
 800128e:	0f7b      	lsrs	r3, r7, #29
 8001290:	4333      	orrs	r3, r6
 8001292:	4699      	mov	r9, r3
 8001294:	4694      	mov	ip, r2
 8001296:	0003      	movs	r3, r0
 8001298:	4463      	add	r3, ip
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2600      	movs	r6, #0
 80012a0:	00ff      	lsls	r7, r7, #3
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	0323      	lsls	r3, r4, #12
 80012a6:	0b1b      	lsrs	r3, r3, #12
 80012a8:	4698      	mov	r8, r3
 80012aa:	0063      	lsls	r3, r4, #1
 80012ac:	0fe4      	lsrs	r4, r4, #31
 80012ae:	4652      	mov	r2, sl
 80012b0:	0d5b      	lsrs	r3, r3, #21
 80012b2:	9401      	str	r4, [sp, #4]
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0x60>
 80012b6:	e0b3      	b.n	8001420 <__aeabi_ddiv+0x1c8>
 80012b8:	4986      	ldr	r1, [pc, #536]	; (80014d4 <__aeabi_ddiv+0x27c>)
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d100      	bne.n	80012c0 <__aeabi_ddiv+0x68>
 80012be:	e09e      	b.n	80013fe <__aeabi_ddiv+0x1a6>
 80012c0:	4642      	mov	r2, r8
 80012c2:	00d1      	lsls	r1, r2, #3
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	0412      	lsls	r2, r2, #16
 80012c8:	430a      	orrs	r2, r1
 80012ca:	4651      	mov	r1, sl
 80012cc:	0f49      	lsrs	r1, r1, #29
 80012ce:	4311      	orrs	r1, r2
 80012d0:	468b      	mov	fp, r1
 80012d2:	4981      	ldr	r1, [pc, #516]	; (80014d8 <__aeabi_ddiv+0x280>)
 80012d4:	4652      	mov	r2, sl
 80012d6:	468c      	mov	ip, r1
 80012d8:	9900      	ldr	r1, [sp, #0]
 80012da:	4463      	add	r3, ip
 80012dc:	1acb      	subs	r3, r1, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	002b      	movs	r3, r5
 80012e6:	4063      	eors	r3, r4
 80012e8:	469a      	mov	sl, r3
 80012ea:	2e0f      	cmp	r6, #15
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x98>
 80012ee:	e105      	b.n	80014fc <__aeabi_ddiv+0x2a4>
 80012f0:	4b7a      	ldr	r3, [pc, #488]	; (80014dc <__aeabi_ddiv+0x284>)
 80012f2:	00b6      	lsls	r6, r6, #2
 80012f4:	599b      	ldr	r3, [r3, r6]
 80012f6:	469f      	mov	pc, r3
 80012f8:	465b      	mov	r3, fp
 80012fa:	4333      	orrs	r3, r6
 80012fc:	4699      	mov	r9, r3
 80012fe:	d000      	beq.n	8001302 <__aeabi_ddiv+0xaa>
 8001300:	e0b8      	b.n	8001474 <__aeabi_ddiv+0x21c>
 8001302:	2302      	movs	r3, #2
 8001304:	2608      	movs	r6, #8
 8001306:	2700      	movs	r7, #0
 8001308:	9000      	str	r0, [sp, #0]
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	e7ca      	b.n	80012a4 <__aeabi_ddiv+0x4c>
 800130e:	46cb      	mov	fp, r9
 8001310:	003a      	movs	r2, r7
 8001312:	9902      	ldr	r1, [sp, #8]
 8001314:	9501      	str	r5, [sp, #4]
 8001316:	9b01      	ldr	r3, [sp, #4]
 8001318:	469a      	mov	sl, r3
 800131a:	2902      	cmp	r1, #2
 800131c:	d027      	beq.n	800136e <__aeabi_ddiv+0x116>
 800131e:	2903      	cmp	r1, #3
 8001320:	d100      	bne.n	8001324 <__aeabi_ddiv+0xcc>
 8001322:	e280      	b.n	8001826 <__aeabi_ddiv+0x5ce>
 8001324:	2901      	cmp	r1, #1
 8001326:	d044      	beq.n	80013b2 <__aeabi_ddiv+0x15a>
 8001328:	496d      	ldr	r1, [pc, #436]	; (80014e0 <__aeabi_ddiv+0x288>)
 800132a:	9b00      	ldr	r3, [sp, #0]
 800132c:	468c      	mov	ip, r1
 800132e:	4463      	add	r3, ip
 8001330:	001c      	movs	r4, r3
 8001332:	2c00      	cmp	r4, #0
 8001334:	dd38      	ble.n	80013a8 <__aeabi_ddiv+0x150>
 8001336:	0753      	lsls	r3, r2, #29
 8001338:	d000      	beq.n	800133c <__aeabi_ddiv+0xe4>
 800133a:	e213      	b.n	8001764 <__aeabi_ddiv+0x50c>
 800133c:	08d2      	lsrs	r2, r2, #3
 800133e:	465b      	mov	r3, fp
 8001340:	01db      	lsls	r3, r3, #7
 8001342:	d509      	bpl.n	8001358 <__aeabi_ddiv+0x100>
 8001344:	4659      	mov	r1, fp
 8001346:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <__aeabi_ddiv+0x28c>)
 8001348:	4019      	ands	r1, r3
 800134a:	468b      	mov	fp, r1
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	00c9      	lsls	r1, r1, #3
 8001350:	468c      	mov	ip, r1
 8001352:	9b00      	ldr	r3, [sp, #0]
 8001354:	4463      	add	r3, ip
 8001356:	001c      	movs	r4, r3
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <__aeabi_ddiv+0x290>)
 800135a:	429c      	cmp	r4, r3
 800135c:	dc07      	bgt.n	800136e <__aeabi_ddiv+0x116>
 800135e:	465b      	mov	r3, fp
 8001360:	0564      	lsls	r4, r4, #21
 8001362:	075f      	lsls	r7, r3, #29
 8001364:	025b      	lsls	r3, r3, #9
 8001366:	4317      	orrs	r7, r2
 8001368:	0b1b      	lsrs	r3, r3, #12
 800136a:	0d62      	lsrs	r2, r4, #21
 800136c:	e002      	b.n	8001374 <__aeabi_ddiv+0x11c>
 800136e:	2300      	movs	r3, #0
 8001370:	2700      	movs	r7, #0
 8001372:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <__aeabi_ddiv+0x27c>)
 8001374:	2100      	movs	r1, #0
 8001376:	031b      	lsls	r3, r3, #12
 8001378:	0b1c      	lsrs	r4, r3, #12
 800137a:	0d0b      	lsrs	r3, r1, #20
 800137c:	051b      	lsls	r3, r3, #20
 800137e:	4323      	orrs	r3, r4
 8001380:	0514      	lsls	r4, r2, #20
 8001382:	4a5a      	ldr	r2, [pc, #360]	; (80014ec <__aeabi_ddiv+0x294>)
 8001384:	0038      	movs	r0, r7
 8001386:	4013      	ands	r3, r2
 8001388:	431c      	orrs	r4, r3
 800138a:	4653      	mov	r3, sl
 800138c:	0064      	lsls	r4, r4, #1
 800138e:	07db      	lsls	r3, r3, #31
 8001390:	0864      	lsrs	r4, r4, #1
 8001392:	431c      	orrs	r4, r3
 8001394:	0021      	movs	r1, r4
 8001396:	b005      	add	sp, #20
 8001398:	bc3c      	pop	{r2, r3, r4, r5}
 800139a:	4690      	mov	r8, r2
 800139c:	4699      	mov	r9, r3
 800139e:	46a2      	mov	sl, r4
 80013a0:	46ab      	mov	fp, r5
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	2201      	movs	r2, #1
 80013a6:	4252      	negs	r2, r2
 80013a8:	2301      	movs	r3, #1
 80013aa:	1b1b      	subs	r3, r3, r4
 80013ac:	2b38      	cmp	r3, #56	; 0x38
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_ddiv+0x15a>
 80013b0:	e1ad      	b.n	800170e <__aeabi_ddiv+0x4b6>
 80013b2:	2200      	movs	r2, #0
 80013b4:	2300      	movs	r3, #0
 80013b6:	2700      	movs	r7, #0
 80013b8:	e7dc      	b.n	8001374 <__aeabi_ddiv+0x11c>
 80013ba:	465b      	mov	r3, fp
 80013bc:	4333      	orrs	r3, r6
 80013be:	4699      	mov	r9, r3
 80013c0:	d05e      	beq.n	8001480 <__aeabi_ddiv+0x228>
 80013c2:	2e00      	cmp	r6, #0
 80013c4:	d100      	bne.n	80013c8 <__aeabi_ddiv+0x170>
 80013c6:	e18a      	b.n	80016de <__aeabi_ddiv+0x486>
 80013c8:	0030      	movs	r0, r6
 80013ca:	f001 fa9d 	bl	8002908 <__clzsi2>
 80013ce:	0003      	movs	r3, r0
 80013d0:	3b0b      	subs	r3, #11
 80013d2:	2b1c      	cmp	r3, #28
 80013d4:	dd00      	ble.n	80013d8 <__aeabi_ddiv+0x180>
 80013d6:	e17b      	b.n	80016d0 <__aeabi_ddiv+0x478>
 80013d8:	221d      	movs	r2, #29
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	465a      	mov	r2, fp
 80013de:	0001      	movs	r1, r0
 80013e0:	40da      	lsrs	r2, r3
 80013e2:	3908      	subs	r1, #8
 80013e4:	408e      	lsls	r6, r1
 80013e6:	0013      	movs	r3, r2
 80013e8:	465f      	mov	r7, fp
 80013ea:	4333      	orrs	r3, r6
 80013ec:	4699      	mov	r9, r3
 80013ee:	408f      	lsls	r7, r1
 80013f0:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <__aeabi_ddiv+0x298>)
 80013f2:	2600      	movs	r6, #0
 80013f4:	1a1b      	subs	r3, r3, r0
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	e752      	b.n	80012a4 <__aeabi_ddiv+0x4c>
 80013fe:	4641      	mov	r1, r8
 8001400:	4653      	mov	r3, sl
 8001402:	430b      	orrs	r3, r1
 8001404:	493b      	ldr	r1, [pc, #236]	; (80014f4 <__aeabi_ddiv+0x29c>)
 8001406:	469b      	mov	fp, r3
 8001408:	468c      	mov	ip, r1
 800140a:	9b00      	ldr	r3, [sp, #0]
 800140c:	4463      	add	r3, ip
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	465b      	mov	r3, fp
 8001412:	2b00      	cmp	r3, #0
 8001414:	d13b      	bne.n	800148e <__aeabi_ddiv+0x236>
 8001416:	2302      	movs	r3, #2
 8001418:	2200      	movs	r2, #0
 800141a:	431e      	orrs	r6, r3
 800141c:	2102      	movs	r1, #2
 800141e:	e761      	b.n	80012e4 <__aeabi_ddiv+0x8c>
 8001420:	4643      	mov	r3, r8
 8001422:	4313      	orrs	r3, r2
 8001424:	469b      	mov	fp, r3
 8001426:	d037      	beq.n	8001498 <__aeabi_ddiv+0x240>
 8001428:	4643      	mov	r3, r8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d100      	bne.n	8001430 <__aeabi_ddiv+0x1d8>
 800142e:	e162      	b.n	80016f6 <__aeabi_ddiv+0x49e>
 8001430:	4640      	mov	r0, r8
 8001432:	f001 fa69 	bl	8002908 <__clzsi2>
 8001436:	0003      	movs	r3, r0
 8001438:	3b0b      	subs	r3, #11
 800143a:	2b1c      	cmp	r3, #28
 800143c:	dd00      	ble.n	8001440 <__aeabi_ddiv+0x1e8>
 800143e:	e153      	b.n	80016e8 <__aeabi_ddiv+0x490>
 8001440:	0002      	movs	r2, r0
 8001442:	4641      	mov	r1, r8
 8001444:	3a08      	subs	r2, #8
 8001446:	4091      	lsls	r1, r2
 8001448:	4688      	mov	r8, r1
 800144a:	211d      	movs	r1, #29
 800144c:	1acb      	subs	r3, r1, r3
 800144e:	4651      	mov	r1, sl
 8001450:	40d9      	lsrs	r1, r3
 8001452:	000b      	movs	r3, r1
 8001454:	4641      	mov	r1, r8
 8001456:	430b      	orrs	r3, r1
 8001458:	469b      	mov	fp, r3
 800145a:	4653      	mov	r3, sl
 800145c:	4093      	lsls	r3, r2
 800145e:	001a      	movs	r2, r3
 8001460:	9b00      	ldr	r3, [sp, #0]
 8001462:	4925      	ldr	r1, [pc, #148]	; (80014f8 <__aeabi_ddiv+0x2a0>)
 8001464:	469c      	mov	ip, r3
 8001466:	4460      	add	r0, ip
 8001468:	0003      	movs	r3, r0
 800146a:	468c      	mov	ip, r1
 800146c:	4463      	add	r3, ip
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2100      	movs	r1, #0
 8001472:	e737      	b.n	80012e4 <__aeabi_ddiv+0x8c>
 8001474:	2303      	movs	r3, #3
 8001476:	46b1      	mov	r9, r6
 8001478:	9000      	str	r0, [sp, #0]
 800147a:	260c      	movs	r6, #12
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	e711      	b.n	80012a4 <__aeabi_ddiv+0x4c>
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	2604      	movs	r6, #4
 8001488:	2700      	movs	r7, #0
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	e70a      	b.n	80012a4 <__aeabi_ddiv+0x4c>
 800148e:	2303      	movs	r3, #3
 8001490:	46c3      	mov	fp, r8
 8001492:	431e      	orrs	r6, r3
 8001494:	2103      	movs	r1, #3
 8001496:	e725      	b.n	80012e4 <__aeabi_ddiv+0x8c>
 8001498:	3301      	adds	r3, #1
 800149a:	431e      	orrs	r6, r3
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	e720      	b.n	80012e4 <__aeabi_ddiv+0x8c>
 80014a2:	2300      	movs	r3, #0
 80014a4:	469a      	mov	sl, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	2700      	movs	r7, #0
 80014aa:	031b      	lsls	r3, r3, #12
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <__aeabi_ddiv+0x27c>)
 80014ae:	e761      	b.n	8001374 <__aeabi_ddiv+0x11c>
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	4649      	mov	r1, r9
 80014b4:	031b      	lsls	r3, r3, #12
 80014b6:	4219      	tst	r1, r3
 80014b8:	d100      	bne.n	80014bc <__aeabi_ddiv+0x264>
 80014ba:	e0e2      	b.n	8001682 <__aeabi_ddiv+0x42a>
 80014bc:	4659      	mov	r1, fp
 80014be:	4219      	tst	r1, r3
 80014c0:	d000      	beq.n	80014c4 <__aeabi_ddiv+0x26c>
 80014c2:	e0de      	b.n	8001682 <__aeabi_ddiv+0x42a>
 80014c4:	430b      	orrs	r3, r1
 80014c6:	031b      	lsls	r3, r3, #12
 80014c8:	0017      	movs	r7, r2
 80014ca:	0b1b      	lsrs	r3, r3, #12
 80014cc:	46a2      	mov	sl, r4
 80014ce:	4a01      	ldr	r2, [pc, #4]	; (80014d4 <__aeabi_ddiv+0x27c>)
 80014d0:	e750      	b.n	8001374 <__aeabi_ddiv+0x11c>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff
 80014d8:	fffffc01 	.word	0xfffffc01
 80014dc:	0800e8d8 	.word	0x0800e8d8
 80014e0:	000003ff 	.word	0x000003ff
 80014e4:	feffffff 	.word	0xfeffffff
 80014e8:	000007fe 	.word	0x000007fe
 80014ec:	800fffff 	.word	0x800fffff
 80014f0:	fffffc0d 	.word	0xfffffc0d
 80014f4:	fffff801 	.word	0xfffff801
 80014f8:	000003f3 	.word	0x000003f3
 80014fc:	45d9      	cmp	r9, fp
 80014fe:	d900      	bls.n	8001502 <__aeabi_ddiv+0x2aa>
 8001500:	e0cb      	b.n	800169a <__aeabi_ddiv+0x442>
 8001502:	d100      	bne.n	8001506 <__aeabi_ddiv+0x2ae>
 8001504:	e0c6      	b.n	8001694 <__aeabi_ddiv+0x43c>
 8001506:	003c      	movs	r4, r7
 8001508:	4648      	mov	r0, r9
 800150a:	2700      	movs	r7, #0
 800150c:	9b00      	ldr	r3, [sp, #0]
 800150e:	3b01      	subs	r3, #1
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	465b      	mov	r3, fp
 8001514:	0e16      	lsrs	r6, r2, #24
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	431e      	orrs	r6, r3
 800151a:	0213      	lsls	r3, r2, #8
 800151c:	4698      	mov	r8, r3
 800151e:	0433      	lsls	r3, r6, #16
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	4699      	mov	r9, r3
 8001524:	0c31      	lsrs	r1, r6, #16
 8001526:	9101      	str	r1, [sp, #4]
 8001528:	f7fe fe90 	bl	800024c <__aeabi_uidivmod>
 800152c:	464a      	mov	r2, r9
 800152e:	4342      	muls	r2, r0
 8001530:	040b      	lsls	r3, r1, #16
 8001532:	0c21      	lsrs	r1, r4, #16
 8001534:	0005      	movs	r5, r0
 8001536:	4319      	orrs	r1, r3
 8001538:	428a      	cmp	r2, r1
 800153a:	d907      	bls.n	800154c <__aeabi_ddiv+0x2f4>
 800153c:	1989      	adds	r1, r1, r6
 800153e:	3d01      	subs	r5, #1
 8001540:	428e      	cmp	r6, r1
 8001542:	d803      	bhi.n	800154c <__aeabi_ddiv+0x2f4>
 8001544:	428a      	cmp	r2, r1
 8001546:	d901      	bls.n	800154c <__aeabi_ddiv+0x2f4>
 8001548:	1e85      	subs	r5, r0, #2
 800154a:	1989      	adds	r1, r1, r6
 800154c:	1a88      	subs	r0, r1, r2
 800154e:	9901      	ldr	r1, [sp, #4]
 8001550:	f7fe fe7c 	bl	800024c <__aeabi_uidivmod>
 8001554:	0409      	lsls	r1, r1, #16
 8001556:	468c      	mov	ip, r1
 8001558:	464a      	mov	r2, r9
 800155a:	0421      	lsls	r1, r4, #16
 800155c:	4664      	mov	r4, ip
 800155e:	4342      	muls	r2, r0
 8001560:	0c09      	lsrs	r1, r1, #16
 8001562:	0003      	movs	r3, r0
 8001564:	4321      	orrs	r1, r4
 8001566:	428a      	cmp	r2, r1
 8001568:	d904      	bls.n	8001574 <__aeabi_ddiv+0x31c>
 800156a:	1989      	adds	r1, r1, r6
 800156c:	3b01      	subs	r3, #1
 800156e:	428e      	cmp	r6, r1
 8001570:	d800      	bhi.n	8001574 <__aeabi_ddiv+0x31c>
 8001572:	e0f1      	b.n	8001758 <__aeabi_ddiv+0x500>
 8001574:	042d      	lsls	r5, r5, #16
 8001576:	431d      	orrs	r5, r3
 8001578:	46ab      	mov	fp, r5
 800157a:	4643      	mov	r3, r8
 800157c:	1a89      	subs	r1, r1, r2
 800157e:	4642      	mov	r2, r8
 8001580:	0c28      	lsrs	r0, r5, #16
 8001582:	0412      	lsls	r2, r2, #16
 8001584:	0c1d      	lsrs	r5, r3, #16
 8001586:	465b      	mov	r3, fp
 8001588:	0c14      	lsrs	r4, r2, #16
 800158a:	0022      	movs	r2, r4
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	435a      	muls	r2, r3
 8001592:	9403      	str	r4, [sp, #12]
 8001594:	436b      	muls	r3, r5
 8001596:	4344      	muls	r4, r0
 8001598:	9502      	str	r5, [sp, #8]
 800159a:	4368      	muls	r0, r5
 800159c:	191b      	adds	r3, r3, r4
 800159e:	0c15      	lsrs	r5, r2, #16
 80015a0:	18eb      	adds	r3, r5, r3
 80015a2:	429c      	cmp	r4, r3
 80015a4:	d903      	bls.n	80015ae <__aeabi_ddiv+0x356>
 80015a6:	2480      	movs	r4, #128	; 0x80
 80015a8:	0264      	lsls	r4, r4, #9
 80015aa:	46a4      	mov	ip, r4
 80015ac:	4460      	add	r0, ip
 80015ae:	0c1c      	lsrs	r4, r3, #16
 80015b0:	0415      	lsls	r5, r2, #16
 80015b2:	041b      	lsls	r3, r3, #16
 80015b4:	0c2d      	lsrs	r5, r5, #16
 80015b6:	1820      	adds	r0, r4, r0
 80015b8:	195d      	adds	r5, r3, r5
 80015ba:	4281      	cmp	r1, r0
 80015bc:	d377      	bcc.n	80016ae <__aeabi_ddiv+0x456>
 80015be:	d073      	beq.n	80016a8 <__aeabi_ddiv+0x450>
 80015c0:	1a0c      	subs	r4, r1, r0
 80015c2:	4aa2      	ldr	r2, [pc, #648]	; (800184c <__aeabi_ddiv+0x5f4>)
 80015c4:	1b7d      	subs	r5, r7, r5
 80015c6:	42af      	cmp	r7, r5
 80015c8:	41bf      	sbcs	r7, r7
 80015ca:	4694      	mov	ip, r2
 80015cc:	9b00      	ldr	r3, [sp, #0]
 80015ce:	427f      	negs	r7, r7
 80015d0:	4463      	add	r3, ip
 80015d2:	1be0      	subs	r0, r4, r7
 80015d4:	001c      	movs	r4, r3
 80015d6:	4286      	cmp	r6, r0
 80015d8:	d100      	bne.n	80015dc <__aeabi_ddiv+0x384>
 80015da:	e0db      	b.n	8001794 <__aeabi_ddiv+0x53c>
 80015dc:	9901      	ldr	r1, [sp, #4]
 80015de:	f7fe fe35 	bl	800024c <__aeabi_uidivmod>
 80015e2:	464a      	mov	r2, r9
 80015e4:	4342      	muls	r2, r0
 80015e6:	040b      	lsls	r3, r1, #16
 80015e8:	0c29      	lsrs	r1, r5, #16
 80015ea:	0007      	movs	r7, r0
 80015ec:	4319      	orrs	r1, r3
 80015ee:	428a      	cmp	r2, r1
 80015f0:	d907      	bls.n	8001602 <__aeabi_ddiv+0x3aa>
 80015f2:	1989      	adds	r1, r1, r6
 80015f4:	3f01      	subs	r7, #1
 80015f6:	428e      	cmp	r6, r1
 80015f8:	d803      	bhi.n	8001602 <__aeabi_ddiv+0x3aa>
 80015fa:	428a      	cmp	r2, r1
 80015fc:	d901      	bls.n	8001602 <__aeabi_ddiv+0x3aa>
 80015fe:	1e87      	subs	r7, r0, #2
 8001600:	1989      	adds	r1, r1, r6
 8001602:	1a88      	subs	r0, r1, r2
 8001604:	9901      	ldr	r1, [sp, #4]
 8001606:	f7fe fe21 	bl	800024c <__aeabi_uidivmod>
 800160a:	0409      	lsls	r1, r1, #16
 800160c:	464a      	mov	r2, r9
 800160e:	4689      	mov	r9, r1
 8001610:	0429      	lsls	r1, r5, #16
 8001612:	464d      	mov	r5, r9
 8001614:	4342      	muls	r2, r0
 8001616:	0c09      	lsrs	r1, r1, #16
 8001618:	0003      	movs	r3, r0
 800161a:	4329      	orrs	r1, r5
 800161c:	428a      	cmp	r2, r1
 800161e:	d907      	bls.n	8001630 <__aeabi_ddiv+0x3d8>
 8001620:	1989      	adds	r1, r1, r6
 8001622:	3b01      	subs	r3, #1
 8001624:	428e      	cmp	r6, r1
 8001626:	d803      	bhi.n	8001630 <__aeabi_ddiv+0x3d8>
 8001628:	428a      	cmp	r2, r1
 800162a:	d901      	bls.n	8001630 <__aeabi_ddiv+0x3d8>
 800162c:	1e83      	subs	r3, r0, #2
 800162e:	1989      	adds	r1, r1, r6
 8001630:	043f      	lsls	r7, r7, #16
 8001632:	1a89      	subs	r1, r1, r2
 8001634:	003a      	movs	r2, r7
 8001636:	9f03      	ldr	r7, [sp, #12]
 8001638:	431a      	orrs	r2, r3
 800163a:	0038      	movs	r0, r7
 800163c:	0413      	lsls	r3, r2, #16
 800163e:	0c1b      	lsrs	r3, r3, #16
 8001640:	4358      	muls	r0, r3
 8001642:	4681      	mov	r9, r0
 8001644:	9802      	ldr	r0, [sp, #8]
 8001646:	0c15      	lsrs	r5, r2, #16
 8001648:	436f      	muls	r7, r5
 800164a:	4343      	muls	r3, r0
 800164c:	4345      	muls	r5, r0
 800164e:	4648      	mov	r0, r9
 8001650:	0c00      	lsrs	r0, r0, #16
 8001652:	4684      	mov	ip, r0
 8001654:	19db      	adds	r3, r3, r7
 8001656:	4463      	add	r3, ip
 8001658:	429f      	cmp	r7, r3
 800165a:	d903      	bls.n	8001664 <__aeabi_ddiv+0x40c>
 800165c:	2080      	movs	r0, #128	; 0x80
 800165e:	0240      	lsls	r0, r0, #9
 8001660:	4684      	mov	ip, r0
 8001662:	4465      	add	r5, ip
 8001664:	4648      	mov	r0, r9
 8001666:	0c1f      	lsrs	r7, r3, #16
 8001668:	0400      	lsls	r0, r0, #16
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	0c00      	lsrs	r0, r0, #16
 800166e:	197d      	adds	r5, r7, r5
 8001670:	1818      	adds	r0, r3, r0
 8001672:	42a9      	cmp	r1, r5
 8001674:	d200      	bcs.n	8001678 <__aeabi_ddiv+0x420>
 8001676:	e084      	b.n	8001782 <__aeabi_ddiv+0x52a>
 8001678:	d100      	bne.n	800167c <__aeabi_ddiv+0x424>
 800167a:	e07f      	b.n	800177c <__aeabi_ddiv+0x524>
 800167c:	2301      	movs	r3, #1
 800167e:	431a      	orrs	r2, r3
 8001680:	e657      	b.n	8001332 <__aeabi_ddiv+0xda>
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	464a      	mov	r2, r9
 8001686:	031b      	lsls	r3, r3, #12
 8001688:	4313      	orrs	r3, r2
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	0b1b      	lsrs	r3, r3, #12
 800168e:	46aa      	mov	sl, r5
 8001690:	4a6f      	ldr	r2, [pc, #444]	; (8001850 <__aeabi_ddiv+0x5f8>)
 8001692:	e66f      	b.n	8001374 <__aeabi_ddiv+0x11c>
 8001694:	42ba      	cmp	r2, r7
 8001696:	d900      	bls.n	800169a <__aeabi_ddiv+0x442>
 8001698:	e735      	b.n	8001506 <__aeabi_ddiv+0x2ae>
 800169a:	464b      	mov	r3, r9
 800169c:	07dc      	lsls	r4, r3, #31
 800169e:	0858      	lsrs	r0, r3, #1
 80016a0:	087b      	lsrs	r3, r7, #1
 80016a2:	431c      	orrs	r4, r3
 80016a4:	07ff      	lsls	r7, r7, #31
 80016a6:	e734      	b.n	8001512 <__aeabi_ddiv+0x2ba>
 80016a8:	2400      	movs	r4, #0
 80016aa:	42af      	cmp	r7, r5
 80016ac:	d289      	bcs.n	80015c2 <__aeabi_ddiv+0x36a>
 80016ae:	4447      	add	r7, r8
 80016b0:	4547      	cmp	r7, r8
 80016b2:	41a4      	sbcs	r4, r4
 80016b4:	465b      	mov	r3, fp
 80016b6:	4264      	negs	r4, r4
 80016b8:	19a4      	adds	r4, r4, r6
 80016ba:	1864      	adds	r4, r4, r1
 80016bc:	3b01      	subs	r3, #1
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d21e      	bcs.n	8001700 <__aeabi_ddiv+0x4a8>
 80016c2:	42a0      	cmp	r0, r4
 80016c4:	d86d      	bhi.n	80017a2 <__aeabi_ddiv+0x54a>
 80016c6:	d100      	bne.n	80016ca <__aeabi_ddiv+0x472>
 80016c8:	e0b6      	b.n	8001838 <__aeabi_ddiv+0x5e0>
 80016ca:	1a24      	subs	r4, r4, r0
 80016cc:	469b      	mov	fp, r3
 80016ce:	e778      	b.n	80015c2 <__aeabi_ddiv+0x36a>
 80016d0:	0003      	movs	r3, r0
 80016d2:	465a      	mov	r2, fp
 80016d4:	3b28      	subs	r3, #40	; 0x28
 80016d6:	409a      	lsls	r2, r3
 80016d8:	2700      	movs	r7, #0
 80016da:	4691      	mov	r9, r2
 80016dc:	e688      	b.n	80013f0 <__aeabi_ddiv+0x198>
 80016de:	4658      	mov	r0, fp
 80016e0:	f001 f912 	bl	8002908 <__clzsi2>
 80016e4:	3020      	adds	r0, #32
 80016e6:	e672      	b.n	80013ce <__aeabi_ddiv+0x176>
 80016e8:	0003      	movs	r3, r0
 80016ea:	4652      	mov	r2, sl
 80016ec:	3b28      	subs	r3, #40	; 0x28
 80016ee:	409a      	lsls	r2, r3
 80016f0:	4693      	mov	fp, r2
 80016f2:	2200      	movs	r2, #0
 80016f4:	e6b4      	b.n	8001460 <__aeabi_ddiv+0x208>
 80016f6:	4650      	mov	r0, sl
 80016f8:	f001 f906 	bl	8002908 <__clzsi2>
 80016fc:	3020      	adds	r0, #32
 80016fe:	e69a      	b.n	8001436 <__aeabi_ddiv+0x1de>
 8001700:	42a6      	cmp	r6, r4
 8001702:	d1e2      	bne.n	80016ca <__aeabi_ddiv+0x472>
 8001704:	45b8      	cmp	r8, r7
 8001706:	d9dc      	bls.n	80016c2 <__aeabi_ddiv+0x46a>
 8001708:	1a34      	subs	r4, r6, r0
 800170a:	469b      	mov	fp, r3
 800170c:	e759      	b.n	80015c2 <__aeabi_ddiv+0x36a>
 800170e:	2b1f      	cmp	r3, #31
 8001710:	dc65      	bgt.n	80017de <__aeabi_ddiv+0x586>
 8001712:	4c50      	ldr	r4, [pc, #320]	; (8001854 <__aeabi_ddiv+0x5fc>)
 8001714:	9900      	ldr	r1, [sp, #0]
 8001716:	46a4      	mov	ip, r4
 8001718:	465c      	mov	r4, fp
 800171a:	4461      	add	r1, ip
 800171c:	0008      	movs	r0, r1
 800171e:	408c      	lsls	r4, r1
 8001720:	0011      	movs	r1, r2
 8001722:	4082      	lsls	r2, r0
 8001724:	40d9      	lsrs	r1, r3
 8001726:	1e50      	subs	r0, r2, #1
 8001728:	4182      	sbcs	r2, r0
 800172a:	430c      	orrs	r4, r1
 800172c:	4314      	orrs	r4, r2
 800172e:	465a      	mov	r2, fp
 8001730:	40da      	lsrs	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	0762      	lsls	r2, r4, #29
 8001736:	d009      	beq.n	800174c <__aeabi_ddiv+0x4f4>
 8001738:	220f      	movs	r2, #15
 800173a:	4022      	ands	r2, r4
 800173c:	2a04      	cmp	r2, #4
 800173e:	d005      	beq.n	800174c <__aeabi_ddiv+0x4f4>
 8001740:	0022      	movs	r2, r4
 8001742:	1d14      	adds	r4, r2, #4
 8001744:	4294      	cmp	r4, r2
 8001746:	4189      	sbcs	r1, r1
 8001748:	4249      	negs	r1, r1
 800174a:	185b      	adds	r3, r3, r1
 800174c:	021a      	lsls	r2, r3, #8
 800174e:	d562      	bpl.n	8001816 <__aeabi_ddiv+0x5be>
 8001750:	2201      	movs	r2, #1
 8001752:	2300      	movs	r3, #0
 8001754:	2700      	movs	r7, #0
 8001756:	e60d      	b.n	8001374 <__aeabi_ddiv+0x11c>
 8001758:	428a      	cmp	r2, r1
 800175a:	d800      	bhi.n	800175e <__aeabi_ddiv+0x506>
 800175c:	e70a      	b.n	8001574 <__aeabi_ddiv+0x31c>
 800175e:	1e83      	subs	r3, r0, #2
 8001760:	1989      	adds	r1, r1, r6
 8001762:	e707      	b.n	8001574 <__aeabi_ddiv+0x31c>
 8001764:	230f      	movs	r3, #15
 8001766:	4013      	ands	r3, r2
 8001768:	2b04      	cmp	r3, #4
 800176a:	d100      	bne.n	800176e <__aeabi_ddiv+0x516>
 800176c:	e5e6      	b.n	800133c <__aeabi_ddiv+0xe4>
 800176e:	1d17      	adds	r7, r2, #4
 8001770:	4297      	cmp	r7, r2
 8001772:	4192      	sbcs	r2, r2
 8001774:	4253      	negs	r3, r2
 8001776:	449b      	add	fp, r3
 8001778:	08fa      	lsrs	r2, r7, #3
 800177a:	e5e0      	b.n	800133e <__aeabi_ddiv+0xe6>
 800177c:	2800      	cmp	r0, #0
 800177e:	d100      	bne.n	8001782 <__aeabi_ddiv+0x52a>
 8001780:	e5d7      	b.n	8001332 <__aeabi_ddiv+0xda>
 8001782:	1871      	adds	r1, r6, r1
 8001784:	1e53      	subs	r3, r2, #1
 8001786:	42b1      	cmp	r1, r6
 8001788:	d327      	bcc.n	80017da <__aeabi_ddiv+0x582>
 800178a:	42a9      	cmp	r1, r5
 800178c:	d315      	bcc.n	80017ba <__aeabi_ddiv+0x562>
 800178e:	d058      	beq.n	8001842 <__aeabi_ddiv+0x5ea>
 8001790:	001a      	movs	r2, r3
 8001792:	e773      	b.n	800167c <__aeabi_ddiv+0x424>
 8001794:	2b00      	cmp	r3, #0
 8001796:	dc00      	bgt.n	800179a <__aeabi_ddiv+0x542>
 8001798:	e604      	b.n	80013a4 <__aeabi_ddiv+0x14c>
 800179a:	2301      	movs	r3, #1
 800179c:	2200      	movs	r2, #0
 800179e:	449b      	add	fp, r3
 80017a0:	e5cd      	b.n	800133e <__aeabi_ddiv+0xe6>
 80017a2:	2302      	movs	r3, #2
 80017a4:	4447      	add	r7, r8
 80017a6:	4547      	cmp	r7, r8
 80017a8:	4189      	sbcs	r1, r1
 80017aa:	425b      	negs	r3, r3
 80017ac:	469c      	mov	ip, r3
 80017ae:	4249      	negs	r1, r1
 80017b0:	1989      	adds	r1, r1, r6
 80017b2:	190c      	adds	r4, r1, r4
 80017b4:	44e3      	add	fp, ip
 80017b6:	1a24      	subs	r4, r4, r0
 80017b8:	e703      	b.n	80015c2 <__aeabi_ddiv+0x36a>
 80017ba:	4643      	mov	r3, r8
 80017bc:	005f      	lsls	r7, r3, #1
 80017be:	4547      	cmp	r7, r8
 80017c0:	419b      	sbcs	r3, r3
 80017c2:	46b8      	mov	r8, r7
 80017c4:	425b      	negs	r3, r3
 80017c6:	199e      	adds	r6, r3, r6
 80017c8:	3a02      	subs	r2, #2
 80017ca:	1989      	adds	r1, r1, r6
 80017cc:	42a9      	cmp	r1, r5
 80017ce:	d000      	beq.n	80017d2 <__aeabi_ddiv+0x57a>
 80017d0:	e754      	b.n	800167c <__aeabi_ddiv+0x424>
 80017d2:	4540      	cmp	r0, r8
 80017d4:	d000      	beq.n	80017d8 <__aeabi_ddiv+0x580>
 80017d6:	e751      	b.n	800167c <__aeabi_ddiv+0x424>
 80017d8:	e5ab      	b.n	8001332 <__aeabi_ddiv+0xda>
 80017da:	001a      	movs	r2, r3
 80017dc:	e7f6      	b.n	80017cc <__aeabi_ddiv+0x574>
 80017de:	211f      	movs	r1, #31
 80017e0:	465f      	mov	r7, fp
 80017e2:	4249      	negs	r1, r1
 80017e4:	1b0c      	subs	r4, r1, r4
 80017e6:	40e7      	lsrs	r7, r4
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	d007      	beq.n	80017fc <__aeabi_ddiv+0x5a4>
 80017ec:	491a      	ldr	r1, [pc, #104]	; (8001858 <__aeabi_ddiv+0x600>)
 80017ee:	9b00      	ldr	r3, [sp, #0]
 80017f0:	468c      	mov	ip, r1
 80017f2:	4463      	add	r3, ip
 80017f4:	0018      	movs	r0, r3
 80017f6:	465b      	mov	r3, fp
 80017f8:	4083      	lsls	r3, r0
 80017fa:	431a      	orrs	r2, r3
 80017fc:	1e50      	subs	r0, r2, #1
 80017fe:	4182      	sbcs	r2, r0
 8001800:	433a      	orrs	r2, r7
 8001802:	2707      	movs	r7, #7
 8001804:	2300      	movs	r3, #0
 8001806:	4017      	ands	r7, r2
 8001808:	d009      	beq.n	800181e <__aeabi_ddiv+0x5c6>
 800180a:	210f      	movs	r1, #15
 800180c:	2300      	movs	r3, #0
 800180e:	4011      	ands	r1, r2
 8001810:	0014      	movs	r4, r2
 8001812:	2904      	cmp	r1, #4
 8001814:	d195      	bne.n	8001742 <__aeabi_ddiv+0x4ea>
 8001816:	0022      	movs	r2, r4
 8001818:	075f      	lsls	r7, r3, #29
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	0b1b      	lsrs	r3, r3, #12
 800181e:	08d2      	lsrs	r2, r2, #3
 8001820:	4317      	orrs	r7, r2
 8001822:	2200      	movs	r2, #0
 8001824:	e5a6      	b.n	8001374 <__aeabi_ddiv+0x11c>
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	4659      	mov	r1, fp
 800182a:	031b      	lsls	r3, r3, #12
 800182c:	430b      	orrs	r3, r1
 800182e:	031b      	lsls	r3, r3, #12
 8001830:	0017      	movs	r7, r2
 8001832:	0b1b      	lsrs	r3, r3, #12
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <__aeabi_ddiv+0x5f8>)
 8001836:	e59d      	b.n	8001374 <__aeabi_ddiv+0x11c>
 8001838:	42bd      	cmp	r5, r7
 800183a:	d8b2      	bhi.n	80017a2 <__aeabi_ddiv+0x54a>
 800183c:	469b      	mov	fp, r3
 800183e:	2400      	movs	r4, #0
 8001840:	e6bf      	b.n	80015c2 <__aeabi_ddiv+0x36a>
 8001842:	4580      	cmp	r8, r0
 8001844:	d3b9      	bcc.n	80017ba <__aeabi_ddiv+0x562>
 8001846:	001a      	movs	r2, r3
 8001848:	e7c3      	b.n	80017d2 <__aeabi_ddiv+0x57a>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	000003ff 	.word	0x000003ff
 8001850:	000007ff 	.word	0x000007ff
 8001854:	0000041e 	.word	0x0000041e
 8001858:	0000043e 	.word	0x0000043e

0800185c <__eqdf2>:
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	464f      	mov	r7, r9
 8001860:	4646      	mov	r6, r8
 8001862:	46d6      	mov	lr, sl
 8001864:	4684      	mov	ip, r0
 8001866:	b5c0      	push	{r6, r7, lr}
 8001868:	4680      	mov	r8, r0
 800186a:	4e19      	ldr	r6, [pc, #100]	; (80018d0 <__eqdf2+0x74>)
 800186c:	0318      	lsls	r0, r3, #12
 800186e:	030f      	lsls	r7, r1, #12
 8001870:	004d      	lsls	r5, r1, #1
 8001872:	0b00      	lsrs	r0, r0, #12
 8001874:	005c      	lsls	r4, r3, #1
 8001876:	4682      	mov	sl, r0
 8001878:	0b3f      	lsrs	r7, r7, #12
 800187a:	0d6d      	lsrs	r5, r5, #21
 800187c:	0fc9      	lsrs	r1, r1, #31
 800187e:	4691      	mov	r9, r2
 8001880:	0d64      	lsrs	r4, r4, #21
 8001882:	0fdb      	lsrs	r3, r3, #31
 8001884:	2001      	movs	r0, #1
 8001886:	42b5      	cmp	r5, r6
 8001888:	d00a      	beq.n	80018a0 <__eqdf2+0x44>
 800188a:	42b4      	cmp	r4, r6
 800188c:	d003      	beq.n	8001896 <__eqdf2+0x3a>
 800188e:	42a5      	cmp	r5, r4
 8001890:	d101      	bne.n	8001896 <__eqdf2+0x3a>
 8001892:	4557      	cmp	r7, sl
 8001894:	d00c      	beq.n	80018b0 <__eqdf2+0x54>
 8001896:	bc1c      	pop	{r2, r3, r4}
 8001898:	4690      	mov	r8, r2
 800189a:	4699      	mov	r9, r3
 800189c:	46a2      	mov	sl, r4
 800189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a0:	4666      	mov	r6, ip
 80018a2:	433e      	orrs	r6, r7
 80018a4:	d1f7      	bne.n	8001896 <__eqdf2+0x3a>
 80018a6:	42ac      	cmp	r4, r5
 80018a8:	d1f5      	bne.n	8001896 <__eqdf2+0x3a>
 80018aa:	4654      	mov	r4, sl
 80018ac:	4314      	orrs	r4, r2
 80018ae:	d1f2      	bne.n	8001896 <__eqdf2+0x3a>
 80018b0:	2001      	movs	r0, #1
 80018b2:	45c8      	cmp	r8, r9
 80018b4:	d1ef      	bne.n	8001896 <__eqdf2+0x3a>
 80018b6:	4299      	cmp	r1, r3
 80018b8:	d007      	beq.n	80018ca <__eqdf2+0x6e>
 80018ba:	2d00      	cmp	r5, #0
 80018bc:	d1eb      	bne.n	8001896 <__eqdf2+0x3a>
 80018be:	4663      	mov	r3, ip
 80018c0:	431f      	orrs	r7, r3
 80018c2:	0038      	movs	r0, r7
 80018c4:	1e47      	subs	r7, r0, #1
 80018c6:	41b8      	sbcs	r0, r7
 80018c8:	e7e5      	b.n	8001896 <__eqdf2+0x3a>
 80018ca:	2000      	movs	r0, #0
 80018cc:	e7e3      	b.n	8001896 <__eqdf2+0x3a>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	000007ff 	.word	0x000007ff

080018d4 <__gedf2>:
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	464f      	mov	r7, r9
 80018d8:	4646      	mov	r6, r8
 80018da:	46d6      	mov	lr, sl
 80018dc:	004d      	lsls	r5, r1, #1
 80018de:	b5c0      	push	{r6, r7, lr}
 80018e0:	030e      	lsls	r6, r1, #12
 80018e2:	0fc9      	lsrs	r1, r1, #31
 80018e4:	468a      	mov	sl, r1
 80018e6:	492c      	ldr	r1, [pc, #176]	; (8001998 <__gedf2+0xc4>)
 80018e8:	031f      	lsls	r7, r3, #12
 80018ea:	005c      	lsls	r4, r3, #1
 80018ec:	4680      	mov	r8, r0
 80018ee:	0b36      	lsrs	r6, r6, #12
 80018f0:	0d6d      	lsrs	r5, r5, #21
 80018f2:	4691      	mov	r9, r2
 80018f4:	0b3f      	lsrs	r7, r7, #12
 80018f6:	0d64      	lsrs	r4, r4, #21
 80018f8:	0fdb      	lsrs	r3, r3, #31
 80018fa:	428d      	cmp	r5, r1
 80018fc:	d01e      	beq.n	800193c <__gedf2+0x68>
 80018fe:	428c      	cmp	r4, r1
 8001900:	d016      	beq.n	8001930 <__gedf2+0x5c>
 8001902:	2d00      	cmp	r5, #0
 8001904:	d11e      	bne.n	8001944 <__gedf2+0x70>
 8001906:	4330      	orrs	r0, r6
 8001908:	4684      	mov	ip, r0
 800190a:	2c00      	cmp	r4, #0
 800190c:	d101      	bne.n	8001912 <__gedf2+0x3e>
 800190e:	433a      	orrs	r2, r7
 8001910:	d023      	beq.n	800195a <__gedf2+0x86>
 8001912:	4662      	mov	r2, ip
 8001914:	2a00      	cmp	r2, #0
 8001916:	d01a      	beq.n	800194e <__gedf2+0x7a>
 8001918:	459a      	cmp	sl, r3
 800191a:	d029      	beq.n	8001970 <__gedf2+0x9c>
 800191c:	4651      	mov	r1, sl
 800191e:	2002      	movs	r0, #2
 8001920:	3901      	subs	r1, #1
 8001922:	4008      	ands	r0, r1
 8001924:	3801      	subs	r0, #1
 8001926:	bc1c      	pop	{r2, r3, r4}
 8001928:	4690      	mov	r8, r2
 800192a:	4699      	mov	r9, r3
 800192c:	46a2      	mov	sl, r4
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001930:	0039      	movs	r1, r7
 8001932:	4311      	orrs	r1, r2
 8001934:	d0e5      	beq.n	8001902 <__gedf2+0x2e>
 8001936:	2002      	movs	r0, #2
 8001938:	4240      	negs	r0, r0
 800193a:	e7f4      	b.n	8001926 <__gedf2+0x52>
 800193c:	4330      	orrs	r0, r6
 800193e:	d1fa      	bne.n	8001936 <__gedf2+0x62>
 8001940:	42ac      	cmp	r4, r5
 8001942:	d00f      	beq.n	8001964 <__gedf2+0x90>
 8001944:	2c00      	cmp	r4, #0
 8001946:	d10f      	bne.n	8001968 <__gedf2+0x94>
 8001948:	433a      	orrs	r2, r7
 800194a:	d0e7      	beq.n	800191c <__gedf2+0x48>
 800194c:	e00c      	b.n	8001968 <__gedf2+0x94>
 800194e:	2201      	movs	r2, #1
 8001950:	3b01      	subs	r3, #1
 8001952:	4393      	bics	r3, r2
 8001954:	0018      	movs	r0, r3
 8001956:	3001      	adds	r0, #1
 8001958:	e7e5      	b.n	8001926 <__gedf2+0x52>
 800195a:	4663      	mov	r3, ip
 800195c:	2000      	movs	r0, #0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0e1      	beq.n	8001926 <__gedf2+0x52>
 8001962:	e7db      	b.n	800191c <__gedf2+0x48>
 8001964:	433a      	orrs	r2, r7
 8001966:	d1e6      	bne.n	8001936 <__gedf2+0x62>
 8001968:	459a      	cmp	sl, r3
 800196a:	d1d7      	bne.n	800191c <__gedf2+0x48>
 800196c:	42a5      	cmp	r5, r4
 800196e:	dcd5      	bgt.n	800191c <__gedf2+0x48>
 8001970:	42a5      	cmp	r5, r4
 8001972:	db05      	blt.n	8001980 <__gedf2+0xac>
 8001974:	42be      	cmp	r6, r7
 8001976:	d8d1      	bhi.n	800191c <__gedf2+0x48>
 8001978:	d008      	beq.n	800198c <__gedf2+0xb8>
 800197a:	2000      	movs	r0, #0
 800197c:	42be      	cmp	r6, r7
 800197e:	d2d2      	bcs.n	8001926 <__gedf2+0x52>
 8001980:	4650      	mov	r0, sl
 8001982:	2301      	movs	r3, #1
 8001984:	3801      	subs	r0, #1
 8001986:	4398      	bics	r0, r3
 8001988:	3001      	adds	r0, #1
 800198a:	e7cc      	b.n	8001926 <__gedf2+0x52>
 800198c:	45c8      	cmp	r8, r9
 800198e:	d8c5      	bhi.n	800191c <__gedf2+0x48>
 8001990:	2000      	movs	r0, #0
 8001992:	45c8      	cmp	r8, r9
 8001994:	d3f4      	bcc.n	8001980 <__gedf2+0xac>
 8001996:	e7c6      	b.n	8001926 <__gedf2+0x52>
 8001998:	000007ff 	.word	0x000007ff

0800199c <__ledf2>:
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	464f      	mov	r7, r9
 80019a0:	4646      	mov	r6, r8
 80019a2:	46d6      	mov	lr, sl
 80019a4:	004d      	lsls	r5, r1, #1
 80019a6:	b5c0      	push	{r6, r7, lr}
 80019a8:	030e      	lsls	r6, r1, #12
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	468a      	mov	sl, r1
 80019ae:	492e      	ldr	r1, [pc, #184]	; (8001a68 <__ledf2+0xcc>)
 80019b0:	031f      	lsls	r7, r3, #12
 80019b2:	005c      	lsls	r4, r3, #1
 80019b4:	4680      	mov	r8, r0
 80019b6:	0b36      	lsrs	r6, r6, #12
 80019b8:	0d6d      	lsrs	r5, r5, #21
 80019ba:	4691      	mov	r9, r2
 80019bc:	0b3f      	lsrs	r7, r7, #12
 80019be:	0d64      	lsrs	r4, r4, #21
 80019c0:	0fdb      	lsrs	r3, r3, #31
 80019c2:	428d      	cmp	r5, r1
 80019c4:	d018      	beq.n	80019f8 <__ledf2+0x5c>
 80019c6:	428c      	cmp	r4, r1
 80019c8:	d011      	beq.n	80019ee <__ledf2+0x52>
 80019ca:	2d00      	cmp	r5, #0
 80019cc:	d118      	bne.n	8001a00 <__ledf2+0x64>
 80019ce:	4330      	orrs	r0, r6
 80019d0:	4684      	mov	ip, r0
 80019d2:	2c00      	cmp	r4, #0
 80019d4:	d11e      	bne.n	8001a14 <__ledf2+0x78>
 80019d6:	433a      	orrs	r2, r7
 80019d8:	d11c      	bne.n	8001a14 <__ledf2+0x78>
 80019da:	4663      	mov	r3, ip
 80019dc:	2000      	movs	r0, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d030      	beq.n	8001a44 <__ledf2+0xa8>
 80019e2:	4651      	mov	r1, sl
 80019e4:	2002      	movs	r0, #2
 80019e6:	3901      	subs	r1, #1
 80019e8:	4008      	ands	r0, r1
 80019ea:	3801      	subs	r0, #1
 80019ec:	e02a      	b.n	8001a44 <__ledf2+0xa8>
 80019ee:	0039      	movs	r1, r7
 80019f0:	4311      	orrs	r1, r2
 80019f2:	d0ea      	beq.n	80019ca <__ledf2+0x2e>
 80019f4:	2002      	movs	r0, #2
 80019f6:	e025      	b.n	8001a44 <__ledf2+0xa8>
 80019f8:	4330      	orrs	r0, r6
 80019fa:	d1fb      	bne.n	80019f4 <__ledf2+0x58>
 80019fc:	42ac      	cmp	r4, r5
 80019fe:	d026      	beq.n	8001a4e <__ledf2+0xb2>
 8001a00:	2c00      	cmp	r4, #0
 8001a02:	d126      	bne.n	8001a52 <__ledf2+0xb6>
 8001a04:	433a      	orrs	r2, r7
 8001a06:	d124      	bne.n	8001a52 <__ledf2+0xb6>
 8001a08:	4651      	mov	r1, sl
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	3901      	subs	r1, #1
 8001a0e:	4008      	ands	r0, r1
 8001a10:	3801      	subs	r0, #1
 8001a12:	e017      	b.n	8001a44 <__ledf2+0xa8>
 8001a14:	4662      	mov	r2, ip
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d00f      	beq.n	8001a3a <__ledf2+0x9e>
 8001a1a:	459a      	cmp	sl, r3
 8001a1c:	d1e1      	bne.n	80019e2 <__ledf2+0x46>
 8001a1e:	42a5      	cmp	r5, r4
 8001a20:	db05      	blt.n	8001a2e <__ledf2+0x92>
 8001a22:	42be      	cmp	r6, r7
 8001a24:	d8dd      	bhi.n	80019e2 <__ledf2+0x46>
 8001a26:	d019      	beq.n	8001a5c <__ledf2+0xc0>
 8001a28:	2000      	movs	r0, #0
 8001a2a:	42be      	cmp	r6, r7
 8001a2c:	d20a      	bcs.n	8001a44 <__ledf2+0xa8>
 8001a2e:	4650      	mov	r0, sl
 8001a30:	2301      	movs	r3, #1
 8001a32:	3801      	subs	r0, #1
 8001a34:	4398      	bics	r0, r3
 8001a36:	3001      	adds	r0, #1
 8001a38:	e004      	b.n	8001a44 <__ledf2+0xa8>
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	4393      	bics	r3, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	3001      	adds	r0, #1
 8001a44:	bc1c      	pop	{r2, r3, r4}
 8001a46:	4690      	mov	r8, r2
 8001a48:	4699      	mov	r9, r3
 8001a4a:	46a2      	mov	sl, r4
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	433a      	orrs	r2, r7
 8001a50:	d1d0      	bne.n	80019f4 <__ledf2+0x58>
 8001a52:	459a      	cmp	sl, r3
 8001a54:	d1c5      	bne.n	80019e2 <__ledf2+0x46>
 8001a56:	42a5      	cmp	r5, r4
 8001a58:	dcc3      	bgt.n	80019e2 <__ledf2+0x46>
 8001a5a:	e7e0      	b.n	8001a1e <__ledf2+0x82>
 8001a5c:	45c8      	cmp	r8, r9
 8001a5e:	d8c0      	bhi.n	80019e2 <__ledf2+0x46>
 8001a60:	2000      	movs	r0, #0
 8001a62:	45c8      	cmp	r8, r9
 8001a64:	d3e3      	bcc.n	8001a2e <__ledf2+0x92>
 8001a66:	e7ed      	b.n	8001a44 <__ledf2+0xa8>
 8001a68:	000007ff 	.word	0x000007ff

08001a6c <__aeabi_dmul>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	4657      	mov	r7, sl
 8001a70:	46de      	mov	lr, fp
 8001a72:	464e      	mov	r6, r9
 8001a74:	4645      	mov	r5, r8
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	4683      	mov	fp, r0
 8001a7a:	0006      	movs	r6, r0
 8001a7c:	030f      	lsls	r7, r1, #12
 8001a7e:	0048      	lsls	r0, r1, #1
 8001a80:	b087      	sub	sp, #28
 8001a82:	4692      	mov	sl, r2
 8001a84:	001d      	movs	r5, r3
 8001a86:	0b3f      	lsrs	r7, r7, #12
 8001a88:	0d40      	lsrs	r0, r0, #21
 8001a8a:	0fcc      	lsrs	r4, r1, #31
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0x26>
 8001a90:	e06f      	b.n	8001b72 <__aeabi_dmul+0x106>
 8001a92:	4bde      	ldr	r3, [pc, #888]	; (8001e0c <__aeabi_dmul+0x3a0>)
 8001a94:	4298      	cmp	r0, r3
 8001a96:	d038      	beq.n	8001b0a <__aeabi_dmul+0x9e>
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	00ff      	lsls	r7, r7, #3
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	431f      	orrs	r7, r3
 8001aa0:	0f73      	lsrs	r3, r6, #29
 8001aa2:	433b      	orrs	r3, r7
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	4bda      	ldr	r3, [pc, #872]	; (8001e10 <__aeabi_dmul+0x3a4>)
 8001aa8:	2700      	movs	r7, #0
 8001aaa:	4699      	mov	r9, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	469b      	mov	fp, r3
 8001ab0:	00f6      	lsls	r6, r6, #3
 8001ab2:	4481      	add	r9, r0
 8001ab4:	032b      	lsls	r3, r5, #12
 8001ab6:	0069      	lsls	r1, r5, #1
 8001ab8:	0b1b      	lsrs	r3, r3, #12
 8001aba:	4652      	mov	r2, sl
 8001abc:	4698      	mov	r8, r3
 8001abe:	0d49      	lsrs	r1, r1, #21
 8001ac0:	0fed      	lsrs	r5, r5, #31
 8001ac2:	2900      	cmp	r1, #0
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dmul+0x5c>
 8001ac6:	e085      	b.n	8001bd4 <__aeabi_dmul+0x168>
 8001ac8:	4bd0      	ldr	r3, [pc, #832]	; (8001e0c <__aeabi_dmul+0x3a0>)
 8001aca:	4299      	cmp	r1, r3
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dmul+0x64>
 8001ace:	e073      	b.n	8001bb8 <__aeabi_dmul+0x14c>
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	00da      	lsls	r2, r3, #3
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	4652      	mov	r2, sl
 8001adc:	48cc      	ldr	r0, [pc, #816]	; (8001e10 <__aeabi_dmul+0x3a4>)
 8001ade:	0f52      	lsrs	r2, r2, #29
 8001ae0:	4684      	mov	ip, r0
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	4461      	add	r1, ip
 8001aea:	00d2      	lsls	r2, r2, #3
 8001aec:	4489      	add	r9, r1
 8001aee:	0021      	movs	r1, r4
 8001af0:	4069      	eors	r1, r5
 8001af2:	9100      	str	r1, [sp, #0]
 8001af4:	468c      	mov	ip, r1
 8001af6:	2101      	movs	r1, #1
 8001af8:	4449      	add	r1, r9
 8001afa:	468a      	mov	sl, r1
 8001afc:	2f0f      	cmp	r7, #15
 8001afe:	d900      	bls.n	8001b02 <__aeabi_dmul+0x96>
 8001b00:	e090      	b.n	8001c24 <__aeabi_dmul+0x1b8>
 8001b02:	49c4      	ldr	r1, [pc, #784]	; (8001e14 <__aeabi_dmul+0x3a8>)
 8001b04:	00bf      	lsls	r7, r7, #2
 8001b06:	59cf      	ldr	r7, [r1, r7]
 8001b08:	46bf      	mov	pc, r7
 8001b0a:	465b      	mov	r3, fp
 8001b0c:	433b      	orrs	r3, r7
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	d000      	beq.n	8001b14 <__aeabi_dmul+0xa8>
 8001b12:	e16a      	b.n	8001dea <__aeabi_dmul+0x37e>
 8001b14:	2302      	movs	r3, #2
 8001b16:	2708      	movs	r7, #8
 8001b18:	2600      	movs	r6, #0
 8001b1a:	4681      	mov	r9, r0
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	e7c9      	b.n	8001ab4 <__aeabi_dmul+0x48>
 8001b20:	0032      	movs	r2, r6
 8001b22:	4658      	mov	r0, fp
 8001b24:	9b01      	ldr	r3, [sp, #4]
 8001b26:	4661      	mov	r1, ip
 8001b28:	9100      	str	r1, [sp, #0]
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dmul+0xc4>
 8001b2e:	e075      	b.n	8001c1c <__aeabi_dmul+0x1b0>
 8001b30:	2803      	cmp	r0, #3
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dmul+0xca>
 8001b34:	e1fe      	b.n	8001f34 <__aeabi_dmul+0x4c8>
 8001b36:	2801      	cmp	r0, #1
 8001b38:	d000      	beq.n	8001b3c <__aeabi_dmul+0xd0>
 8001b3a:	e12c      	b.n	8001d96 <__aeabi_dmul+0x32a>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2700      	movs	r7, #0
 8001b40:	2600      	movs	r6, #0
 8001b42:	2500      	movs	r5, #0
 8001b44:	033f      	lsls	r7, r7, #12
 8001b46:	0d2a      	lsrs	r2, r5, #20
 8001b48:	0b3f      	lsrs	r7, r7, #12
 8001b4a:	48b3      	ldr	r0, [pc, #716]	; (8001e18 <__aeabi_dmul+0x3ac>)
 8001b4c:	0512      	lsls	r2, r2, #20
 8001b4e:	433a      	orrs	r2, r7
 8001b50:	4002      	ands	r2, r0
 8001b52:	051b      	lsls	r3, r3, #20
 8001b54:	4313      	orrs	r3, r2
 8001b56:	9a00      	ldr	r2, [sp, #0]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	07d1      	lsls	r1, r2, #31
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	0030      	movs	r0, r6
 8001b62:	0019      	movs	r1, r3
 8001b64:	b007      	add	sp, #28
 8001b66:	bc3c      	pop	{r2, r3, r4, r5}
 8001b68:	4690      	mov	r8, r2
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	46a2      	mov	sl, r4
 8001b6e:	46ab      	mov	fp, r5
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b72:	465b      	mov	r3, fp
 8001b74:	433b      	orrs	r3, r7
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dmul+0x110>
 8001b7a:	e12f      	b.n	8001ddc <__aeabi_dmul+0x370>
 8001b7c:	2f00      	cmp	r7, #0
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dmul+0x116>
 8001b80:	e1a5      	b.n	8001ece <__aeabi_dmul+0x462>
 8001b82:	0038      	movs	r0, r7
 8001b84:	f000 fec0 	bl	8002908 <__clzsi2>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	3b0b      	subs	r3, #11
 8001b8c:	2b1c      	cmp	r3, #28
 8001b8e:	dd00      	ble.n	8001b92 <__aeabi_dmul+0x126>
 8001b90:	e196      	b.n	8001ec0 <__aeabi_dmul+0x454>
 8001b92:	221d      	movs	r2, #29
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	465a      	mov	r2, fp
 8001b98:	0001      	movs	r1, r0
 8001b9a:	40da      	lsrs	r2, r3
 8001b9c:	465e      	mov	r6, fp
 8001b9e:	3908      	subs	r1, #8
 8001ba0:	408f      	lsls	r7, r1
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	408e      	lsls	r6, r1
 8001ba6:	433b      	orrs	r3, r7
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	4b9c      	ldr	r3, [pc, #624]	; (8001e1c <__aeabi_dmul+0x3b0>)
 8001bac:	2700      	movs	r7, #0
 8001bae:	1a1b      	subs	r3, r3, r0
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	469b      	mov	fp, r3
 8001bb6:	e77d      	b.n	8001ab4 <__aeabi_dmul+0x48>
 8001bb8:	4641      	mov	r1, r8
 8001bba:	4653      	mov	r3, sl
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	4993      	ldr	r1, [pc, #588]	; (8001e0c <__aeabi_dmul+0x3a0>)
 8001bc0:	468c      	mov	ip, r1
 8001bc2:	44e1      	add	r9, ip
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d000      	beq.n	8001bca <__aeabi_dmul+0x15e>
 8001bc8:	e11a      	b.n	8001e00 <__aeabi_dmul+0x394>
 8001bca:	2202      	movs	r2, #2
 8001bcc:	2002      	movs	r0, #2
 8001bce:	4317      	orrs	r7, r2
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	e78c      	b.n	8001aee <__aeabi_dmul+0x82>
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dmul+0x16e>
 8001bd8:	e10d      	b.n	8001df6 <__aeabi_dmul+0x38a>
 8001bda:	4643      	mov	r3, r8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dmul+0x176>
 8001be0:	e181      	b.n	8001ee6 <__aeabi_dmul+0x47a>
 8001be2:	4640      	mov	r0, r8
 8001be4:	f000 fe90 	bl	8002908 <__clzsi2>
 8001be8:	0002      	movs	r2, r0
 8001bea:	3a0b      	subs	r2, #11
 8001bec:	2a1c      	cmp	r2, #28
 8001bee:	dd00      	ble.n	8001bf2 <__aeabi_dmul+0x186>
 8001bf0:	e172      	b.n	8001ed8 <__aeabi_dmul+0x46c>
 8001bf2:	0001      	movs	r1, r0
 8001bf4:	4643      	mov	r3, r8
 8001bf6:	3908      	subs	r1, #8
 8001bf8:	408b      	lsls	r3, r1
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	231d      	movs	r3, #29
 8001bfe:	1a9a      	subs	r2, r3, r2
 8001c00:	4653      	mov	r3, sl
 8001c02:	40d3      	lsrs	r3, r2
 8001c04:	001a      	movs	r2, r3
 8001c06:	4643      	mov	r3, r8
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	4652      	mov	r2, sl
 8001c0c:	408a      	lsls	r2, r1
 8001c0e:	4649      	mov	r1, r9
 8001c10:	1a08      	subs	r0, r1, r0
 8001c12:	4982      	ldr	r1, [pc, #520]	; (8001e1c <__aeabi_dmul+0x3b0>)
 8001c14:	4689      	mov	r9, r1
 8001c16:	4481      	add	r9, r0
 8001c18:	2000      	movs	r0, #0
 8001c1a:	e768      	b.n	8001aee <__aeabi_dmul+0x82>
 8001c1c:	4b7b      	ldr	r3, [pc, #492]	; (8001e0c <__aeabi_dmul+0x3a0>)
 8001c1e:	2700      	movs	r7, #0
 8001c20:	2600      	movs	r6, #0
 8001c22:	e78e      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001c24:	0c14      	lsrs	r4, r2, #16
 8001c26:	0412      	lsls	r2, r2, #16
 8001c28:	0c12      	lsrs	r2, r2, #16
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	0c37      	lsrs	r7, r6, #16
 8001c2e:	0436      	lsls	r6, r6, #16
 8001c30:	0c35      	lsrs	r5, r6, #16
 8001c32:	4379      	muls	r1, r7
 8001c34:	0028      	movs	r0, r5
 8001c36:	468c      	mov	ip, r1
 8001c38:	002e      	movs	r6, r5
 8001c3a:	4360      	muls	r0, r4
 8001c3c:	4460      	add	r0, ip
 8001c3e:	4683      	mov	fp, r0
 8001c40:	4356      	muls	r6, r2
 8001c42:	0021      	movs	r1, r4
 8001c44:	0c30      	lsrs	r0, r6, #16
 8001c46:	4680      	mov	r8, r0
 8001c48:	4658      	mov	r0, fp
 8001c4a:	4379      	muls	r1, r7
 8001c4c:	4440      	add	r0, r8
 8001c4e:	9102      	str	r1, [sp, #8]
 8001c50:	4584      	cmp	ip, r0
 8001c52:	d906      	bls.n	8001c62 <__aeabi_dmul+0x1f6>
 8001c54:	4688      	mov	r8, r1
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	0249      	lsls	r1, r1, #9
 8001c5a:	468c      	mov	ip, r1
 8001c5c:	44e0      	add	r8, ip
 8001c5e:	4641      	mov	r1, r8
 8001c60:	9102      	str	r1, [sp, #8]
 8001c62:	0436      	lsls	r6, r6, #16
 8001c64:	0c01      	lsrs	r1, r0, #16
 8001c66:	0c36      	lsrs	r6, r6, #16
 8001c68:	0400      	lsls	r0, r0, #16
 8001c6a:	468b      	mov	fp, r1
 8001c6c:	1981      	adds	r1, r0, r6
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	9103      	str	r1, [sp, #12]
 8001c76:	0019      	movs	r1, r3
 8001c78:	4379      	muls	r1, r7
 8001c7a:	468c      	mov	ip, r1
 8001c7c:	0028      	movs	r0, r5
 8001c7e:	4375      	muls	r5, r6
 8001c80:	4465      	add	r5, ip
 8001c82:	46a8      	mov	r8, r5
 8001c84:	4358      	muls	r0, r3
 8001c86:	0c05      	lsrs	r5, r0, #16
 8001c88:	4445      	add	r5, r8
 8001c8a:	4377      	muls	r7, r6
 8001c8c:	42a9      	cmp	r1, r5
 8001c8e:	d903      	bls.n	8001c98 <__aeabi_dmul+0x22c>
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	0249      	lsls	r1, r1, #9
 8001c94:	468c      	mov	ip, r1
 8001c96:	4467      	add	r7, ip
 8001c98:	0c29      	lsrs	r1, r5, #16
 8001c9a:	468c      	mov	ip, r1
 8001c9c:	0039      	movs	r1, r7
 8001c9e:	0400      	lsls	r0, r0, #16
 8001ca0:	0c00      	lsrs	r0, r0, #16
 8001ca2:	042d      	lsls	r5, r5, #16
 8001ca4:	182d      	adds	r5, r5, r0
 8001ca6:	4461      	add	r1, ip
 8001ca8:	44ab      	add	fp, r5
 8001caa:	9105      	str	r1, [sp, #20]
 8001cac:	4659      	mov	r1, fp
 8001cae:	9104      	str	r1, [sp, #16]
 8001cb0:	9901      	ldr	r1, [sp, #4]
 8001cb2:	040f      	lsls	r7, r1, #16
 8001cb4:	0c3f      	lsrs	r7, r7, #16
 8001cb6:	0c08      	lsrs	r0, r1, #16
 8001cb8:	0039      	movs	r1, r7
 8001cba:	4351      	muls	r1, r2
 8001cbc:	4342      	muls	r2, r0
 8001cbe:	4690      	mov	r8, r2
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	468c      	mov	ip, r1
 8001cc4:	0c09      	lsrs	r1, r1, #16
 8001cc6:	468b      	mov	fp, r1
 8001cc8:	4362      	muls	r2, r4
 8001cca:	437c      	muls	r4, r7
 8001ccc:	4444      	add	r4, r8
 8001cce:	445c      	add	r4, fp
 8001cd0:	45a0      	cmp	r8, r4
 8001cd2:	d903      	bls.n	8001cdc <__aeabi_dmul+0x270>
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0249      	lsls	r1, r1, #9
 8001cd8:	4688      	mov	r8, r1
 8001cda:	4442      	add	r2, r8
 8001cdc:	0c21      	lsrs	r1, r4, #16
 8001cde:	4688      	mov	r8, r1
 8001ce0:	4661      	mov	r1, ip
 8001ce2:	0409      	lsls	r1, r1, #16
 8001ce4:	0c09      	lsrs	r1, r1, #16
 8001ce6:	468c      	mov	ip, r1
 8001ce8:	0039      	movs	r1, r7
 8001cea:	4359      	muls	r1, r3
 8001cec:	4343      	muls	r3, r0
 8001cee:	4370      	muls	r0, r6
 8001cf0:	437e      	muls	r6, r7
 8001cf2:	0c0f      	lsrs	r7, r1, #16
 8001cf4:	18f6      	adds	r6, r6, r3
 8001cf6:	0424      	lsls	r4, r4, #16
 8001cf8:	19be      	adds	r6, r7, r6
 8001cfa:	4464      	add	r4, ip
 8001cfc:	4442      	add	r2, r8
 8001cfe:	468c      	mov	ip, r1
 8001d00:	42b3      	cmp	r3, r6
 8001d02:	d903      	bls.n	8001d0c <__aeabi_dmul+0x2a0>
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	4698      	mov	r8, r3
 8001d0a:	4440      	add	r0, r8
 8001d0c:	9b02      	ldr	r3, [sp, #8]
 8001d0e:	4661      	mov	r1, ip
 8001d10:	4698      	mov	r8, r3
 8001d12:	9b04      	ldr	r3, [sp, #16]
 8001d14:	0437      	lsls	r7, r6, #16
 8001d16:	4443      	add	r3, r8
 8001d18:	469b      	mov	fp, r3
 8001d1a:	45ab      	cmp	fp, r5
 8001d1c:	41ad      	sbcs	r5, r5
 8001d1e:	426b      	negs	r3, r5
 8001d20:	040d      	lsls	r5, r1, #16
 8001d22:	9905      	ldr	r1, [sp, #20]
 8001d24:	0c2d      	lsrs	r5, r5, #16
 8001d26:	468c      	mov	ip, r1
 8001d28:	197f      	adds	r7, r7, r5
 8001d2a:	4467      	add	r7, ip
 8001d2c:	18fd      	adds	r5, r7, r3
 8001d2e:	46a8      	mov	r8, r5
 8001d30:	465d      	mov	r5, fp
 8001d32:	192d      	adds	r5, r5, r4
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	41a4      	sbcs	r4, r4
 8001d38:	4693      	mov	fp, r2
 8001d3a:	4264      	negs	r4, r4
 8001d3c:	46a4      	mov	ip, r4
 8001d3e:	44c3      	add	fp, r8
 8001d40:	44dc      	add	ip, fp
 8001d42:	428f      	cmp	r7, r1
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	4598      	cmp	r8, r3
 8001d48:	419b      	sbcs	r3, r3
 8001d4a:	4593      	cmp	fp, r2
 8001d4c:	4192      	sbcs	r2, r2
 8001d4e:	45a4      	cmp	ip, r4
 8001d50:	41a4      	sbcs	r4, r4
 8001d52:	425b      	negs	r3, r3
 8001d54:	427f      	negs	r7, r7
 8001d56:	431f      	orrs	r7, r3
 8001d58:	0c36      	lsrs	r6, r6, #16
 8001d5a:	4252      	negs	r2, r2
 8001d5c:	4264      	negs	r4, r4
 8001d5e:	19bf      	adds	r7, r7, r6
 8001d60:	4322      	orrs	r2, r4
 8001d62:	18bf      	adds	r7, r7, r2
 8001d64:	4662      	mov	r2, ip
 8001d66:	1838      	adds	r0, r7, r0
 8001d68:	0243      	lsls	r3, r0, #9
 8001d6a:	0dd2      	lsrs	r2, r2, #23
 8001d6c:	9903      	ldr	r1, [sp, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	026a      	lsls	r2, r5, #9
 8001d72:	430a      	orrs	r2, r1
 8001d74:	1e50      	subs	r0, r2, #1
 8001d76:	4182      	sbcs	r2, r0
 8001d78:	4661      	mov	r1, ip
 8001d7a:	0ded      	lsrs	r5, r5, #23
 8001d7c:	432a      	orrs	r2, r5
 8001d7e:	024e      	lsls	r6, r1, #9
 8001d80:	4332      	orrs	r2, r6
 8001d82:	01d9      	lsls	r1, r3, #7
 8001d84:	d400      	bmi.n	8001d88 <__aeabi_dmul+0x31c>
 8001d86:	e0b3      	b.n	8001ef0 <__aeabi_dmul+0x484>
 8001d88:	2601      	movs	r6, #1
 8001d8a:	0850      	lsrs	r0, r2, #1
 8001d8c:	4032      	ands	r2, r6
 8001d8e:	4302      	orrs	r2, r0
 8001d90:	07de      	lsls	r6, r3, #31
 8001d92:	4332      	orrs	r2, r6
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	4c22      	ldr	r4, [pc, #136]	; (8001e20 <__aeabi_dmul+0x3b4>)
 8001d98:	4454      	add	r4, sl
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	dd62      	ble.n	8001e64 <__aeabi_dmul+0x3f8>
 8001d9e:	0751      	lsls	r1, r2, #29
 8001da0:	d009      	beq.n	8001db6 <__aeabi_dmul+0x34a>
 8001da2:	200f      	movs	r0, #15
 8001da4:	4010      	ands	r0, r2
 8001da6:	2804      	cmp	r0, #4
 8001da8:	d005      	beq.n	8001db6 <__aeabi_dmul+0x34a>
 8001daa:	1d10      	adds	r0, r2, #4
 8001dac:	4290      	cmp	r0, r2
 8001dae:	4192      	sbcs	r2, r2
 8001db0:	4252      	negs	r2, r2
 8001db2:	189b      	adds	r3, r3, r2
 8001db4:	0002      	movs	r2, r0
 8001db6:	01d9      	lsls	r1, r3, #7
 8001db8:	d504      	bpl.n	8001dc4 <__aeabi_dmul+0x358>
 8001dba:	2480      	movs	r4, #128	; 0x80
 8001dbc:	4819      	ldr	r0, [pc, #100]	; (8001e24 <__aeabi_dmul+0x3b8>)
 8001dbe:	00e4      	lsls	r4, r4, #3
 8001dc0:	4003      	ands	r3, r0
 8001dc2:	4454      	add	r4, sl
 8001dc4:	4818      	ldr	r0, [pc, #96]	; (8001e28 <__aeabi_dmul+0x3bc>)
 8001dc6:	4284      	cmp	r4, r0
 8001dc8:	dd00      	ble.n	8001dcc <__aeabi_dmul+0x360>
 8001dca:	e727      	b.n	8001c1c <__aeabi_dmul+0x1b0>
 8001dcc:	075e      	lsls	r6, r3, #29
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	08d2      	lsrs	r2, r2, #3
 8001dd2:	0b1f      	lsrs	r7, r3, #12
 8001dd4:	0563      	lsls	r3, r4, #21
 8001dd6:	4316      	orrs	r6, r2
 8001dd8:	0d5b      	lsrs	r3, r3, #21
 8001dda:	e6b2      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	4699      	mov	r9, r3
 8001de0:	3301      	adds	r3, #1
 8001de2:	2704      	movs	r7, #4
 8001de4:	2600      	movs	r6, #0
 8001de6:	469b      	mov	fp, r3
 8001de8:	e664      	b.n	8001ab4 <__aeabi_dmul+0x48>
 8001dea:	2303      	movs	r3, #3
 8001dec:	9701      	str	r7, [sp, #4]
 8001dee:	4681      	mov	r9, r0
 8001df0:	270c      	movs	r7, #12
 8001df2:	469b      	mov	fp, r3
 8001df4:	e65e      	b.n	8001ab4 <__aeabi_dmul+0x48>
 8001df6:	2201      	movs	r2, #1
 8001df8:	2001      	movs	r0, #1
 8001dfa:	4317      	orrs	r7, r2
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	e676      	b.n	8001aee <__aeabi_dmul+0x82>
 8001e00:	2303      	movs	r3, #3
 8001e02:	2003      	movs	r0, #3
 8001e04:	431f      	orrs	r7, r3
 8001e06:	4643      	mov	r3, r8
 8001e08:	e671      	b.n	8001aee <__aeabi_dmul+0x82>
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	000007ff 	.word	0x000007ff
 8001e10:	fffffc01 	.word	0xfffffc01
 8001e14:	0800e918 	.word	0x0800e918
 8001e18:	800fffff 	.word	0x800fffff
 8001e1c:	fffffc0d 	.word	0xfffffc0d
 8001e20:	000003ff 	.word	0x000003ff
 8001e24:	feffffff 	.word	0xfeffffff
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2780      	movs	r7, #128	; 0x80
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	033f      	lsls	r7, r7, #12
 8001e34:	2600      	movs	r6, #0
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <__aeabi_dmul+0x4d8>)
 8001e38:	e683      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001e3a:	9b01      	ldr	r3, [sp, #4]
 8001e3c:	0032      	movs	r2, r6
 8001e3e:	46a4      	mov	ip, r4
 8001e40:	4658      	mov	r0, fp
 8001e42:	e670      	b.n	8001b26 <__aeabi_dmul+0xba>
 8001e44:	46ac      	mov	ip, r5
 8001e46:	e66e      	b.n	8001b26 <__aeabi_dmul+0xba>
 8001e48:	2780      	movs	r7, #128	; 0x80
 8001e4a:	9901      	ldr	r1, [sp, #4]
 8001e4c:	033f      	lsls	r7, r7, #12
 8001e4e:	4239      	tst	r1, r7
 8001e50:	d02d      	beq.n	8001eae <__aeabi_dmul+0x442>
 8001e52:	423b      	tst	r3, r7
 8001e54:	d12b      	bne.n	8001eae <__aeabi_dmul+0x442>
 8001e56:	431f      	orrs	r7, r3
 8001e58:	033f      	lsls	r7, r7, #12
 8001e5a:	0b3f      	lsrs	r7, r7, #12
 8001e5c:	9500      	str	r5, [sp, #0]
 8001e5e:	0016      	movs	r6, r2
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <__aeabi_dmul+0x4d8>)
 8001e62:	e66e      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001e64:	2501      	movs	r5, #1
 8001e66:	1b2d      	subs	r5, r5, r4
 8001e68:	2d38      	cmp	r5, #56	; 0x38
 8001e6a:	dd00      	ble.n	8001e6e <__aeabi_dmul+0x402>
 8001e6c:	e666      	b.n	8001b3c <__aeabi_dmul+0xd0>
 8001e6e:	2d1f      	cmp	r5, #31
 8001e70:	dc40      	bgt.n	8001ef4 <__aeabi_dmul+0x488>
 8001e72:	4835      	ldr	r0, [pc, #212]	; (8001f48 <__aeabi_dmul+0x4dc>)
 8001e74:	001c      	movs	r4, r3
 8001e76:	4450      	add	r0, sl
 8001e78:	0016      	movs	r6, r2
 8001e7a:	4082      	lsls	r2, r0
 8001e7c:	4084      	lsls	r4, r0
 8001e7e:	40ee      	lsrs	r6, r5
 8001e80:	1e50      	subs	r0, r2, #1
 8001e82:	4182      	sbcs	r2, r0
 8001e84:	4334      	orrs	r4, r6
 8001e86:	4314      	orrs	r4, r2
 8001e88:	40eb      	lsrs	r3, r5
 8001e8a:	0762      	lsls	r2, r4, #29
 8001e8c:	d009      	beq.n	8001ea2 <__aeabi_dmul+0x436>
 8001e8e:	220f      	movs	r2, #15
 8001e90:	4022      	ands	r2, r4
 8001e92:	2a04      	cmp	r2, #4
 8001e94:	d005      	beq.n	8001ea2 <__aeabi_dmul+0x436>
 8001e96:	0022      	movs	r2, r4
 8001e98:	1d14      	adds	r4, r2, #4
 8001e9a:	4294      	cmp	r4, r2
 8001e9c:	4180      	sbcs	r0, r0
 8001e9e:	4240      	negs	r0, r0
 8001ea0:	181b      	adds	r3, r3, r0
 8001ea2:	021a      	lsls	r2, r3, #8
 8001ea4:	d53e      	bpl.n	8001f24 <__aeabi_dmul+0x4b8>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	2700      	movs	r7, #0
 8001eaa:	2600      	movs	r6, #0
 8001eac:	e649      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001eae:	2780      	movs	r7, #128	; 0x80
 8001eb0:	9b01      	ldr	r3, [sp, #4]
 8001eb2:	033f      	lsls	r7, r7, #12
 8001eb4:	431f      	orrs	r7, r3
 8001eb6:	033f      	lsls	r7, r7, #12
 8001eb8:	0b3f      	lsrs	r7, r7, #12
 8001eba:	9400      	str	r4, [sp, #0]
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <__aeabi_dmul+0x4d8>)
 8001ebe:	e640      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	465a      	mov	r2, fp
 8001ec4:	3b28      	subs	r3, #40	; 0x28
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	2600      	movs	r6, #0
 8001eca:	9201      	str	r2, [sp, #4]
 8001ecc:	e66d      	b.n	8001baa <__aeabi_dmul+0x13e>
 8001ece:	4658      	mov	r0, fp
 8001ed0:	f000 fd1a 	bl	8002908 <__clzsi2>
 8001ed4:	3020      	adds	r0, #32
 8001ed6:	e657      	b.n	8001b88 <__aeabi_dmul+0x11c>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	4652      	mov	r2, sl
 8001edc:	3b28      	subs	r3, #40	; 0x28
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e693      	b.n	8001c0e <__aeabi_dmul+0x1a2>
 8001ee6:	4650      	mov	r0, sl
 8001ee8:	f000 fd0e 	bl	8002908 <__clzsi2>
 8001eec:	3020      	adds	r0, #32
 8001eee:	e67b      	b.n	8001be8 <__aeabi_dmul+0x17c>
 8001ef0:	46ca      	mov	sl, r9
 8001ef2:	e750      	b.n	8001d96 <__aeabi_dmul+0x32a>
 8001ef4:	201f      	movs	r0, #31
 8001ef6:	001e      	movs	r6, r3
 8001ef8:	4240      	negs	r0, r0
 8001efa:	1b04      	subs	r4, r0, r4
 8001efc:	40e6      	lsrs	r6, r4
 8001efe:	2d20      	cmp	r5, #32
 8001f00:	d003      	beq.n	8001f0a <__aeabi_dmul+0x49e>
 8001f02:	4c12      	ldr	r4, [pc, #72]	; (8001f4c <__aeabi_dmul+0x4e0>)
 8001f04:	4454      	add	r4, sl
 8001f06:	40a3      	lsls	r3, r4
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	1e50      	subs	r0, r2, #1
 8001f0c:	4182      	sbcs	r2, r0
 8001f0e:	4332      	orrs	r2, r6
 8001f10:	2607      	movs	r6, #7
 8001f12:	2700      	movs	r7, #0
 8001f14:	4016      	ands	r6, r2
 8001f16:	d009      	beq.n	8001f2c <__aeabi_dmul+0x4c0>
 8001f18:	200f      	movs	r0, #15
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	4010      	ands	r0, r2
 8001f1e:	0014      	movs	r4, r2
 8001f20:	2804      	cmp	r0, #4
 8001f22:	d1b9      	bne.n	8001e98 <__aeabi_dmul+0x42c>
 8001f24:	0022      	movs	r2, r4
 8001f26:	075e      	lsls	r6, r3, #29
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	0b1f      	lsrs	r7, r3, #12
 8001f2c:	08d2      	lsrs	r2, r2, #3
 8001f2e:	4316      	orrs	r6, r2
 8001f30:	2300      	movs	r3, #0
 8001f32:	e606      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001f34:	2780      	movs	r7, #128	; 0x80
 8001f36:	033f      	lsls	r7, r7, #12
 8001f38:	431f      	orrs	r7, r3
 8001f3a:	033f      	lsls	r7, r7, #12
 8001f3c:	0b3f      	lsrs	r7, r7, #12
 8001f3e:	0016      	movs	r6, r2
 8001f40:	4b00      	ldr	r3, [pc, #0]	; (8001f44 <__aeabi_dmul+0x4d8>)
 8001f42:	e5fe      	b.n	8001b42 <__aeabi_dmul+0xd6>
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	0000041e 	.word	0x0000041e
 8001f4c:	0000043e 	.word	0x0000043e

08001f50 <__aeabi_dsub>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	4657      	mov	r7, sl
 8001f54:	464e      	mov	r6, r9
 8001f56:	4645      	mov	r5, r8
 8001f58:	46de      	mov	lr, fp
 8001f5a:	000c      	movs	r4, r1
 8001f5c:	0309      	lsls	r1, r1, #12
 8001f5e:	b5e0      	push	{r5, r6, r7, lr}
 8001f60:	0a49      	lsrs	r1, r1, #9
 8001f62:	0f46      	lsrs	r6, r0, #29
 8001f64:	005f      	lsls	r7, r3, #1
 8001f66:	4331      	orrs	r1, r6
 8001f68:	031e      	lsls	r6, r3, #12
 8001f6a:	0fdb      	lsrs	r3, r3, #31
 8001f6c:	0a76      	lsrs	r6, r6, #9
 8001f6e:	469b      	mov	fp, r3
 8001f70:	0f53      	lsrs	r3, r2, #29
 8001f72:	4333      	orrs	r3, r6
 8001f74:	4ec8      	ldr	r6, [pc, #800]	; (8002298 <__aeabi_dsub+0x348>)
 8001f76:	0065      	lsls	r5, r4, #1
 8001f78:	00c0      	lsls	r0, r0, #3
 8001f7a:	0fe4      	lsrs	r4, r4, #31
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	0d6d      	lsrs	r5, r5, #21
 8001f80:	46a2      	mov	sl, r4
 8001f82:	4681      	mov	r9, r0
 8001f84:	0d7f      	lsrs	r7, r7, #21
 8001f86:	469c      	mov	ip, r3
 8001f88:	4690      	mov	r8, r2
 8001f8a:	42b7      	cmp	r7, r6
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x40>
 8001f8e:	e0b9      	b.n	8002104 <__aeabi_dsub+0x1b4>
 8001f90:	465b      	mov	r3, fp
 8001f92:	2601      	movs	r6, #1
 8001f94:	4073      	eors	r3, r6
 8001f96:	469b      	mov	fp, r3
 8001f98:	1bee      	subs	r6, r5, r7
 8001f9a:	45a3      	cmp	fp, r4
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x50>
 8001f9e:	e083      	b.n	80020a8 <__aeabi_dsub+0x158>
 8001fa0:	2e00      	cmp	r6, #0
 8001fa2:	dd63      	ble.n	800206c <__aeabi_dsub+0x11c>
 8001fa4:	2f00      	cmp	r7, #0
 8001fa6:	d000      	beq.n	8001faa <__aeabi_dsub+0x5a>
 8001fa8:	e0b1      	b.n	800210e <__aeabi_dsub+0x1be>
 8001faa:	4663      	mov	r3, ip
 8001fac:	4313      	orrs	r3, r2
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x62>
 8001fb0:	e123      	b.n	80021fa <__aeabi_dsub+0x2aa>
 8001fb2:	1e73      	subs	r3, r6, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d000      	beq.n	8001fba <__aeabi_dsub+0x6a>
 8001fb8:	e1ba      	b.n	8002330 <__aeabi_dsub+0x3e0>
 8001fba:	1a86      	subs	r6, r0, r2
 8001fbc:	4663      	mov	r3, ip
 8001fbe:	42b0      	cmp	r0, r6
 8001fc0:	4180      	sbcs	r0, r0
 8001fc2:	2501      	movs	r5, #1
 8001fc4:	1ac9      	subs	r1, r1, r3
 8001fc6:	4240      	negs	r0, r0
 8001fc8:	1a09      	subs	r1, r1, r0
 8001fca:	020b      	lsls	r3, r1, #8
 8001fcc:	d400      	bmi.n	8001fd0 <__aeabi_dsub+0x80>
 8001fce:	e147      	b.n	8002260 <__aeabi_dsub+0x310>
 8001fd0:	0249      	lsls	r1, r1, #9
 8001fd2:	0a4b      	lsrs	r3, r1, #9
 8001fd4:	4698      	mov	r8, r3
 8001fd6:	4643      	mov	r3, r8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x8e>
 8001fdc:	e189      	b.n	80022f2 <__aeabi_dsub+0x3a2>
 8001fde:	4640      	mov	r0, r8
 8001fe0:	f000 fc92 	bl	8002908 <__clzsi2>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	2b1f      	cmp	r3, #31
 8001fea:	dd00      	ble.n	8001fee <__aeabi_dsub+0x9e>
 8001fec:	e17c      	b.n	80022e8 <__aeabi_dsub+0x398>
 8001fee:	2220      	movs	r2, #32
 8001ff0:	0030      	movs	r0, r6
 8001ff2:	1ad2      	subs	r2, r2, r3
 8001ff4:	4641      	mov	r1, r8
 8001ff6:	40d0      	lsrs	r0, r2
 8001ff8:	4099      	lsls	r1, r3
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	409e      	lsls	r6, r3
 8001ffe:	430a      	orrs	r2, r1
 8002000:	429d      	cmp	r5, r3
 8002002:	dd00      	ble.n	8002006 <__aeabi_dsub+0xb6>
 8002004:	e16a      	b.n	80022dc <__aeabi_dsub+0x38c>
 8002006:	1b5d      	subs	r5, r3, r5
 8002008:	1c6b      	adds	r3, r5, #1
 800200a:	2b1f      	cmp	r3, #31
 800200c:	dd00      	ble.n	8002010 <__aeabi_dsub+0xc0>
 800200e:	e194      	b.n	800233a <__aeabi_dsub+0x3ea>
 8002010:	2120      	movs	r1, #32
 8002012:	0010      	movs	r0, r2
 8002014:	0035      	movs	r5, r6
 8002016:	1ac9      	subs	r1, r1, r3
 8002018:	408e      	lsls	r6, r1
 800201a:	40da      	lsrs	r2, r3
 800201c:	4088      	lsls	r0, r1
 800201e:	40dd      	lsrs	r5, r3
 8002020:	1e71      	subs	r1, r6, #1
 8002022:	418e      	sbcs	r6, r1
 8002024:	0011      	movs	r1, r2
 8002026:	2207      	movs	r2, #7
 8002028:	4328      	orrs	r0, r5
 800202a:	2500      	movs	r5, #0
 800202c:	4306      	orrs	r6, r0
 800202e:	4032      	ands	r2, r6
 8002030:	2a00      	cmp	r2, #0
 8002032:	d009      	beq.n	8002048 <__aeabi_dsub+0xf8>
 8002034:	230f      	movs	r3, #15
 8002036:	4033      	ands	r3, r6
 8002038:	2b04      	cmp	r3, #4
 800203a:	d005      	beq.n	8002048 <__aeabi_dsub+0xf8>
 800203c:	1d33      	adds	r3, r6, #4
 800203e:	42b3      	cmp	r3, r6
 8002040:	41b6      	sbcs	r6, r6
 8002042:	4276      	negs	r6, r6
 8002044:	1989      	adds	r1, r1, r6
 8002046:	001e      	movs	r6, r3
 8002048:	020b      	lsls	r3, r1, #8
 800204a:	d400      	bmi.n	800204e <__aeabi_dsub+0xfe>
 800204c:	e23d      	b.n	80024ca <__aeabi_dsub+0x57a>
 800204e:	1c6a      	adds	r2, r5, #1
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <__aeabi_dsub+0x348>)
 8002052:	0555      	lsls	r5, r2, #21
 8002054:	0d6d      	lsrs	r5, r5, #21
 8002056:	429a      	cmp	r2, r3
 8002058:	d100      	bne.n	800205c <__aeabi_dsub+0x10c>
 800205a:	e119      	b.n	8002290 <__aeabi_dsub+0x340>
 800205c:	4a8f      	ldr	r2, [pc, #572]	; (800229c <__aeabi_dsub+0x34c>)
 800205e:	08f6      	lsrs	r6, r6, #3
 8002060:	400a      	ands	r2, r1
 8002062:	0757      	lsls	r7, r2, #29
 8002064:	0252      	lsls	r2, r2, #9
 8002066:	4337      	orrs	r7, r6
 8002068:	0b12      	lsrs	r2, r2, #12
 800206a:	e09b      	b.n	80021a4 <__aeabi_dsub+0x254>
 800206c:	2e00      	cmp	r6, #0
 800206e:	d000      	beq.n	8002072 <__aeabi_dsub+0x122>
 8002070:	e0c5      	b.n	80021fe <__aeabi_dsub+0x2ae>
 8002072:	1c6e      	adds	r6, r5, #1
 8002074:	0576      	lsls	r6, r6, #21
 8002076:	0d76      	lsrs	r6, r6, #21
 8002078:	2e01      	cmp	r6, #1
 800207a:	dc00      	bgt.n	800207e <__aeabi_dsub+0x12e>
 800207c:	e148      	b.n	8002310 <__aeabi_dsub+0x3c0>
 800207e:	4667      	mov	r7, ip
 8002080:	1a86      	subs	r6, r0, r2
 8002082:	1bcb      	subs	r3, r1, r7
 8002084:	42b0      	cmp	r0, r6
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	46b8      	mov	r8, r7
 800208c:	001f      	movs	r7, r3
 800208e:	4643      	mov	r3, r8
 8002090:	1aff      	subs	r7, r7, r3
 8002092:	003b      	movs	r3, r7
 8002094:	46b8      	mov	r8, r7
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	d500      	bpl.n	800209c <__aeabi_dsub+0x14c>
 800209a:	e15f      	b.n	800235c <__aeabi_dsub+0x40c>
 800209c:	4337      	orrs	r7, r6
 800209e:	d19a      	bne.n	8001fd6 <__aeabi_dsub+0x86>
 80020a0:	2200      	movs	r2, #0
 80020a2:	2400      	movs	r4, #0
 80020a4:	2500      	movs	r5, #0
 80020a6:	e079      	b.n	800219c <__aeabi_dsub+0x24c>
 80020a8:	2e00      	cmp	r6, #0
 80020aa:	dc00      	bgt.n	80020ae <__aeabi_dsub+0x15e>
 80020ac:	e0fa      	b.n	80022a4 <__aeabi_dsub+0x354>
 80020ae:	2f00      	cmp	r7, #0
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dsub+0x164>
 80020b2:	e08d      	b.n	80021d0 <__aeabi_dsub+0x280>
 80020b4:	4b78      	ldr	r3, [pc, #480]	; (8002298 <__aeabi_dsub+0x348>)
 80020b6:	429d      	cmp	r5, r3
 80020b8:	d067      	beq.n	800218a <__aeabi_dsub+0x23a>
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	4667      	mov	r7, ip
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	431f      	orrs	r7, r3
 80020c2:	46bc      	mov	ip, r7
 80020c4:	2e38      	cmp	r6, #56	; 0x38
 80020c6:	dc00      	bgt.n	80020ca <__aeabi_dsub+0x17a>
 80020c8:	e152      	b.n	8002370 <__aeabi_dsub+0x420>
 80020ca:	4663      	mov	r3, ip
 80020cc:	4313      	orrs	r3, r2
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	4193      	sbcs	r3, r2
 80020d2:	181e      	adds	r6, r3, r0
 80020d4:	4286      	cmp	r6, r0
 80020d6:	4180      	sbcs	r0, r0
 80020d8:	4240      	negs	r0, r0
 80020da:	1809      	adds	r1, r1, r0
 80020dc:	020b      	lsls	r3, r1, #8
 80020de:	d400      	bmi.n	80020e2 <__aeabi_dsub+0x192>
 80020e0:	e0be      	b.n	8002260 <__aeabi_dsub+0x310>
 80020e2:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <__aeabi_dsub+0x348>)
 80020e4:	3501      	adds	r5, #1
 80020e6:	429d      	cmp	r5, r3
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x19c>
 80020ea:	e0d2      	b.n	8002292 <__aeabi_dsub+0x342>
 80020ec:	4a6b      	ldr	r2, [pc, #428]	; (800229c <__aeabi_dsub+0x34c>)
 80020ee:	0873      	lsrs	r3, r6, #1
 80020f0:	400a      	ands	r2, r1
 80020f2:	2101      	movs	r1, #1
 80020f4:	400e      	ands	r6, r1
 80020f6:	431e      	orrs	r6, r3
 80020f8:	0851      	lsrs	r1, r2, #1
 80020fa:	07d3      	lsls	r3, r2, #31
 80020fc:	2207      	movs	r2, #7
 80020fe:	431e      	orrs	r6, r3
 8002100:	4032      	ands	r2, r6
 8002102:	e795      	b.n	8002030 <__aeabi_dsub+0xe0>
 8002104:	001e      	movs	r6, r3
 8002106:	4316      	orrs	r6, r2
 8002108:	d000      	beq.n	800210c <__aeabi_dsub+0x1bc>
 800210a:	e745      	b.n	8001f98 <__aeabi_dsub+0x48>
 800210c:	e740      	b.n	8001f90 <__aeabi_dsub+0x40>
 800210e:	4b62      	ldr	r3, [pc, #392]	; (8002298 <__aeabi_dsub+0x348>)
 8002110:	429d      	cmp	r5, r3
 8002112:	d03a      	beq.n	800218a <__aeabi_dsub+0x23a>
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	4667      	mov	r7, ip
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431f      	orrs	r7, r3
 800211c:	46bc      	mov	ip, r7
 800211e:	2e38      	cmp	r6, #56	; 0x38
 8002120:	dd00      	ble.n	8002124 <__aeabi_dsub+0x1d4>
 8002122:	e0eb      	b.n	80022fc <__aeabi_dsub+0x3ac>
 8002124:	2e1f      	cmp	r6, #31
 8002126:	dc00      	bgt.n	800212a <__aeabi_dsub+0x1da>
 8002128:	e13a      	b.n	80023a0 <__aeabi_dsub+0x450>
 800212a:	0033      	movs	r3, r6
 800212c:	4667      	mov	r7, ip
 800212e:	3b20      	subs	r3, #32
 8002130:	40df      	lsrs	r7, r3
 8002132:	003b      	movs	r3, r7
 8002134:	2e20      	cmp	r6, #32
 8002136:	d005      	beq.n	8002144 <__aeabi_dsub+0x1f4>
 8002138:	2740      	movs	r7, #64	; 0x40
 800213a:	1bbf      	subs	r7, r7, r6
 800213c:	4666      	mov	r6, ip
 800213e:	40be      	lsls	r6, r7
 8002140:	4332      	orrs	r2, r6
 8002142:	4690      	mov	r8, r2
 8002144:	4646      	mov	r6, r8
 8002146:	1e72      	subs	r2, r6, #1
 8002148:	4196      	sbcs	r6, r2
 800214a:	4333      	orrs	r3, r6
 800214c:	e0da      	b.n	8002304 <__aeabi_dsub+0x3b4>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x204>
 8002152:	e214      	b.n	800257e <__aeabi_dsub+0x62e>
 8002154:	4663      	mov	r3, ip
 8002156:	4313      	orrs	r3, r2
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x20c>
 800215a:	e168      	b.n	800242e <__aeabi_dsub+0x4de>
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	074e      	lsls	r6, r1, #29
 8002160:	08c0      	lsrs	r0, r0, #3
 8002162:	08c9      	lsrs	r1, r1, #3
 8002164:	031b      	lsls	r3, r3, #12
 8002166:	4306      	orrs	r6, r0
 8002168:	4219      	tst	r1, r3
 800216a:	d008      	beq.n	800217e <__aeabi_dsub+0x22e>
 800216c:	4660      	mov	r0, ip
 800216e:	08c0      	lsrs	r0, r0, #3
 8002170:	4218      	tst	r0, r3
 8002172:	d104      	bne.n	800217e <__aeabi_dsub+0x22e>
 8002174:	4663      	mov	r3, ip
 8002176:	0001      	movs	r1, r0
 8002178:	08d2      	lsrs	r2, r2, #3
 800217a:	075e      	lsls	r6, r3, #29
 800217c:	4316      	orrs	r6, r2
 800217e:	00f3      	lsls	r3, r6, #3
 8002180:	4699      	mov	r9, r3
 8002182:	00c9      	lsls	r1, r1, #3
 8002184:	0f72      	lsrs	r2, r6, #29
 8002186:	4d44      	ldr	r5, [pc, #272]	; (8002298 <__aeabi_dsub+0x348>)
 8002188:	4311      	orrs	r1, r2
 800218a:	464b      	mov	r3, r9
 800218c:	08de      	lsrs	r6, r3, #3
 800218e:	4b42      	ldr	r3, [pc, #264]	; (8002298 <__aeabi_dsub+0x348>)
 8002190:	074f      	lsls	r7, r1, #29
 8002192:	4337      	orrs	r7, r6
 8002194:	08ca      	lsrs	r2, r1, #3
 8002196:	429d      	cmp	r5, r3
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x24c>
 800219a:	e06e      	b.n	800227a <__aeabi_dsub+0x32a>
 800219c:	0312      	lsls	r2, r2, #12
 800219e:	056d      	lsls	r5, r5, #21
 80021a0:	0b12      	lsrs	r2, r2, #12
 80021a2:	0d6d      	lsrs	r5, r5, #21
 80021a4:	2100      	movs	r1, #0
 80021a6:	0312      	lsls	r2, r2, #12
 80021a8:	0b13      	lsrs	r3, r2, #12
 80021aa:	0d0a      	lsrs	r2, r1, #20
 80021ac:	0512      	lsls	r2, r2, #20
 80021ae:	431a      	orrs	r2, r3
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <__aeabi_dsub+0x350>)
 80021b2:	052d      	lsls	r5, r5, #20
 80021b4:	4013      	ands	r3, r2
 80021b6:	432b      	orrs	r3, r5
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	07e4      	lsls	r4, r4, #31
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	4323      	orrs	r3, r4
 80021c0:	0038      	movs	r0, r7
 80021c2:	0019      	movs	r1, r3
 80021c4:	bc3c      	pop	{r2, r3, r4, r5}
 80021c6:	4690      	mov	r8, r2
 80021c8:	4699      	mov	r9, r3
 80021ca:	46a2      	mov	sl, r4
 80021cc:	46ab      	mov	fp, r5
 80021ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021d0:	4663      	mov	r3, ip
 80021d2:	4313      	orrs	r3, r2
 80021d4:	d011      	beq.n	80021fa <__aeabi_dsub+0x2aa>
 80021d6:	1e73      	subs	r3, r6, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d000      	beq.n	80021de <__aeabi_dsub+0x28e>
 80021dc:	e107      	b.n	80023ee <__aeabi_dsub+0x49e>
 80021de:	1886      	adds	r6, r0, r2
 80021e0:	4286      	cmp	r6, r0
 80021e2:	4180      	sbcs	r0, r0
 80021e4:	4461      	add	r1, ip
 80021e6:	4240      	negs	r0, r0
 80021e8:	1809      	adds	r1, r1, r0
 80021ea:	2501      	movs	r5, #1
 80021ec:	020b      	lsls	r3, r1, #8
 80021ee:	d537      	bpl.n	8002260 <__aeabi_dsub+0x310>
 80021f0:	2502      	movs	r5, #2
 80021f2:	e77b      	b.n	80020ec <__aeabi_dsub+0x19c>
 80021f4:	003e      	movs	r6, r7
 80021f6:	4661      	mov	r1, ip
 80021f8:	4691      	mov	r9, r2
 80021fa:	0035      	movs	r5, r6
 80021fc:	e7c5      	b.n	800218a <__aeabi_dsub+0x23a>
 80021fe:	465c      	mov	r4, fp
 8002200:	2d00      	cmp	r5, #0
 8002202:	d000      	beq.n	8002206 <__aeabi_dsub+0x2b6>
 8002204:	e0e1      	b.n	80023ca <__aeabi_dsub+0x47a>
 8002206:	000b      	movs	r3, r1
 8002208:	4303      	orrs	r3, r0
 800220a:	d0f3      	beq.n	80021f4 <__aeabi_dsub+0x2a4>
 800220c:	1c73      	adds	r3, r6, #1
 800220e:	d100      	bne.n	8002212 <__aeabi_dsub+0x2c2>
 8002210:	e1ac      	b.n	800256c <__aeabi_dsub+0x61c>
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <__aeabi_dsub+0x348>)
 8002214:	429f      	cmp	r7, r3
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x2ca>
 8002218:	e13a      	b.n	8002490 <__aeabi_dsub+0x540>
 800221a:	43f3      	mvns	r3, r6
 800221c:	2b38      	cmp	r3, #56	; 0x38
 800221e:	dd00      	ble.n	8002222 <__aeabi_dsub+0x2d2>
 8002220:	e16f      	b.n	8002502 <__aeabi_dsub+0x5b2>
 8002222:	2b1f      	cmp	r3, #31
 8002224:	dd00      	ble.n	8002228 <__aeabi_dsub+0x2d8>
 8002226:	e18c      	b.n	8002542 <__aeabi_dsub+0x5f2>
 8002228:	2520      	movs	r5, #32
 800222a:	000e      	movs	r6, r1
 800222c:	1aed      	subs	r5, r5, r3
 800222e:	40ae      	lsls	r6, r5
 8002230:	46b0      	mov	r8, r6
 8002232:	0006      	movs	r6, r0
 8002234:	46aa      	mov	sl, r5
 8002236:	40de      	lsrs	r6, r3
 8002238:	4645      	mov	r5, r8
 800223a:	4335      	orrs	r5, r6
 800223c:	002e      	movs	r6, r5
 800223e:	4655      	mov	r5, sl
 8002240:	40d9      	lsrs	r1, r3
 8002242:	40a8      	lsls	r0, r5
 8002244:	4663      	mov	r3, ip
 8002246:	1e45      	subs	r5, r0, #1
 8002248:	41a8      	sbcs	r0, r5
 800224a:	1a5b      	subs	r3, r3, r1
 800224c:	469c      	mov	ip, r3
 800224e:	4330      	orrs	r0, r6
 8002250:	1a16      	subs	r6, r2, r0
 8002252:	42b2      	cmp	r2, r6
 8002254:	4192      	sbcs	r2, r2
 8002256:	4663      	mov	r3, ip
 8002258:	4252      	negs	r2, r2
 800225a:	1a99      	subs	r1, r3, r2
 800225c:	003d      	movs	r5, r7
 800225e:	e6b4      	b.n	8001fca <__aeabi_dsub+0x7a>
 8002260:	2207      	movs	r2, #7
 8002262:	4032      	ands	r2, r6
 8002264:	2a00      	cmp	r2, #0
 8002266:	d000      	beq.n	800226a <__aeabi_dsub+0x31a>
 8002268:	e6e4      	b.n	8002034 <__aeabi_dsub+0xe4>
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <__aeabi_dsub+0x348>)
 800226c:	08f6      	lsrs	r6, r6, #3
 800226e:	074f      	lsls	r7, r1, #29
 8002270:	4337      	orrs	r7, r6
 8002272:	08ca      	lsrs	r2, r1, #3
 8002274:	429d      	cmp	r5, r3
 8002276:	d000      	beq.n	800227a <__aeabi_dsub+0x32a>
 8002278:	e790      	b.n	800219c <__aeabi_dsub+0x24c>
 800227a:	003b      	movs	r3, r7
 800227c:	4313      	orrs	r3, r2
 800227e:	d100      	bne.n	8002282 <__aeabi_dsub+0x332>
 8002280:	e1a6      	b.n	80025d0 <__aeabi_dsub+0x680>
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	031b      	lsls	r3, r3, #12
 8002286:	431a      	orrs	r2, r3
 8002288:	0312      	lsls	r2, r2, #12
 800228a:	0b12      	lsrs	r2, r2, #12
 800228c:	4d02      	ldr	r5, [pc, #8]	; (8002298 <__aeabi_dsub+0x348>)
 800228e:	e789      	b.n	80021a4 <__aeabi_dsub+0x254>
 8002290:	0015      	movs	r5, r2
 8002292:	2200      	movs	r2, #0
 8002294:	2700      	movs	r7, #0
 8002296:	e785      	b.n	80021a4 <__aeabi_dsub+0x254>
 8002298:	000007ff 	.word	0x000007ff
 800229c:	ff7fffff 	.word	0xff7fffff
 80022a0:	800fffff 	.word	0x800fffff
 80022a4:	2e00      	cmp	r6, #0
 80022a6:	d000      	beq.n	80022aa <__aeabi_dsub+0x35a>
 80022a8:	e0c7      	b.n	800243a <__aeabi_dsub+0x4ea>
 80022aa:	1c6b      	adds	r3, r5, #1
 80022ac:	055e      	lsls	r6, r3, #21
 80022ae:	0d76      	lsrs	r6, r6, #21
 80022b0:	2e01      	cmp	r6, #1
 80022b2:	dc00      	bgt.n	80022b6 <__aeabi_dsub+0x366>
 80022b4:	e0f0      	b.n	8002498 <__aeabi_dsub+0x548>
 80022b6:	4dc8      	ldr	r5, [pc, #800]	; (80025d8 <__aeabi_dsub+0x688>)
 80022b8:	42ab      	cmp	r3, r5
 80022ba:	d100      	bne.n	80022be <__aeabi_dsub+0x36e>
 80022bc:	e0b9      	b.n	8002432 <__aeabi_dsub+0x4e2>
 80022be:	1885      	adds	r5, r0, r2
 80022c0:	000a      	movs	r2, r1
 80022c2:	4285      	cmp	r5, r0
 80022c4:	4189      	sbcs	r1, r1
 80022c6:	4462      	add	r2, ip
 80022c8:	4249      	negs	r1, r1
 80022ca:	1851      	adds	r1, r2, r1
 80022cc:	2207      	movs	r2, #7
 80022ce:	07ce      	lsls	r6, r1, #31
 80022d0:	086d      	lsrs	r5, r5, #1
 80022d2:	432e      	orrs	r6, r5
 80022d4:	0849      	lsrs	r1, r1, #1
 80022d6:	4032      	ands	r2, r6
 80022d8:	001d      	movs	r5, r3
 80022da:	e6a9      	b.n	8002030 <__aeabi_dsub+0xe0>
 80022dc:	49bf      	ldr	r1, [pc, #764]	; (80025dc <__aeabi_dsub+0x68c>)
 80022de:	1aed      	subs	r5, r5, r3
 80022e0:	4011      	ands	r1, r2
 80022e2:	2207      	movs	r2, #7
 80022e4:	4032      	ands	r2, r6
 80022e6:	e6a3      	b.n	8002030 <__aeabi_dsub+0xe0>
 80022e8:	0032      	movs	r2, r6
 80022ea:	3828      	subs	r0, #40	; 0x28
 80022ec:	4082      	lsls	r2, r0
 80022ee:	2600      	movs	r6, #0
 80022f0:	e686      	b.n	8002000 <__aeabi_dsub+0xb0>
 80022f2:	0030      	movs	r0, r6
 80022f4:	f000 fb08 	bl	8002908 <__clzsi2>
 80022f8:	3020      	adds	r0, #32
 80022fa:	e673      	b.n	8001fe4 <__aeabi_dsub+0x94>
 80022fc:	4663      	mov	r3, ip
 80022fe:	4313      	orrs	r3, r2
 8002300:	1e5a      	subs	r2, r3, #1
 8002302:	4193      	sbcs	r3, r2
 8002304:	1ac6      	subs	r6, r0, r3
 8002306:	42b0      	cmp	r0, r6
 8002308:	4180      	sbcs	r0, r0
 800230a:	4240      	negs	r0, r0
 800230c:	1a09      	subs	r1, r1, r0
 800230e:	e65c      	b.n	8001fca <__aeabi_dsub+0x7a>
 8002310:	000e      	movs	r6, r1
 8002312:	4667      	mov	r7, ip
 8002314:	4306      	orrs	r6, r0
 8002316:	4317      	orrs	r7, r2
 8002318:	2d00      	cmp	r5, #0
 800231a:	d15e      	bne.n	80023da <__aeabi_dsub+0x48a>
 800231c:	2e00      	cmp	r6, #0
 800231e:	d000      	beq.n	8002322 <__aeabi_dsub+0x3d2>
 8002320:	e0f3      	b.n	800250a <__aeabi_dsub+0x5ba>
 8002322:	2f00      	cmp	r7, #0
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x3d8>
 8002326:	e11e      	b.n	8002566 <__aeabi_dsub+0x616>
 8002328:	465c      	mov	r4, fp
 800232a:	4661      	mov	r1, ip
 800232c:	4691      	mov	r9, r2
 800232e:	e72c      	b.n	800218a <__aeabi_dsub+0x23a>
 8002330:	4fa9      	ldr	r7, [pc, #676]	; (80025d8 <__aeabi_dsub+0x688>)
 8002332:	42be      	cmp	r6, r7
 8002334:	d07b      	beq.n	800242e <__aeabi_dsub+0x4de>
 8002336:	001e      	movs	r6, r3
 8002338:	e6f1      	b.n	800211e <__aeabi_dsub+0x1ce>
 800233a:	0010      	movs	r0, r2
 800233c:	3d1f      	subs	r5, #31
 800233e:	40e8      	lsrs	r0, r5
 8002340:	2b20      	cmp	r3, #32
 8002342:	d003      	beq.n	800234c <__aeabi_dsub+0x3fc>
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	1acb      	subs	r3, r1, r3
 8002348:	409a      	lsls	r2, r3
 800234a:	4316      	orrs	r6, r2
 800234c:	1e73      	subs	r3, r6, #1
 800234e:	419e      	sbcs	r6, r3
 8002350:	2207      	movs	r2, #7
 8002352:	4306      	orrs	r6, r0
 8002354:	4032      	ands	r2, r6
 8002356:	2100      	movs	r1, #0
 8002358:	2500      	movs	r5, #0
 800235a:	e783      	b.n	8002264 <__aeabi_dsub+0x314>
 800235c:	1a16      	subs	r6, r2, r0
 800235e:	4663      	mov	r3, ip
 8002360:	42b2      	cmp	r2, r6
 8002362:	4180      	sbcs	r0, r0
 8002364:	1a59      	subs	r1, r3, r1
 8002366:	4240      	negs	r0, r0
 8002368:	1a0b      	subs	r3, r1, r0
 800236a:	4698      	mov	r8, r3
 800236c:	465c      	mov	r4, fp
 800236e:	e632      	b.n	8001fd6 <__aeabi_dsub+0x86>
 8002370:	2e1f      	cmp	r6, #31
 8002372:	dd00      	ble.n	8002376 <__aeabi_dsub+0x426>
 8002374:	e0ab      	b.n	80024ce <__aeabi_dsub+0x57e>
 8002376:	2720      	movs	r7, #32
 8002378:	1bbb      	subs	r3, r7, r6
 800237a:	469a      	mov	sl, r3
 800237c:	4663      	mov	r3, ip
 800237e:	4657      	mov	r7, sl
 8002380:	40bb      	lsls	r3, r7
 8002382:	4699      	mov	r9, r3
 8002384:	0013      	movs	r3, r2
 8002386:	464f      	mov	r7, r9
 8002388:	40f3      	lsrs	r3, r6
 800238a:	431f      	orrs	r7, r3
 800238c:	003b      	movs	r3, r7
 800238e:	4657      	mov	r7, sl
 8002390:	40ba      	lsls	r2, r7
 8002392:	1e57      	subs	r7, r2, #1
 8002394:	41ba      	sbcs	r2, r7
 8002396:	4313      	orrs	r3, r2
 8002398:	4662      	mov	r2, ip
 800239a:	40f2      	lsrs	r2, r6
 800239c:	1889      	adds	r1, r1, r2
 800239e:	e698      	b.n	80020d2 <__aeabi_dsub+0x182>
 80023a0:	2720      	movs	r7, #32
 80023a2:	1bbb      	subs	r3, r7, r6
 80023a4:	469a      	mov	sl, r3
 80023a6:	4663      	mov	r3, ip
 80023a8:	4657      	mov	r7, sl
 80023aa:	40bb      	lsls	r3, r7
 80023ac:	4699      	mov	r9, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	464f      	mov	r7, r9
 80023b2:	40f3      	lsrs	r3, r6
 80023b4:	431f      	orrs	r7, r3
 80023b6:	003b      	movs	r3, r7
 80023b8:	4657      	mov	r7, sl
 80023ba:	40ba      	lsls	r2, r7
 80023bc:	1e57      	subs	r7, r2, #1
 80023be:	41ba      	sbcs	r2, r7
 80023c0:	4313      	orrs	r3, r2
 80023c2:	4662      	mov	r2, ip
 80023c4:	40f2      	lsrs	r2, r6
 80023c6:	1a89      	subs	r1, r1, r2
 80023c8:	e79c      	b.n	8002304 <__aeabi_dsub+0x3b4>
 80023ca:	4b83      	ldr	r3, [pc, #524]	; (80025d8 <__aeabi_dsub+0x688>)
 80023cc:	429f      	cmp	r7, r3
 80023ce:	d05f      	beq.n	8002490 <__aeabi_dsub+0x540>
 80023d0:	2580      	movs	r5, #128	; 0x80
 80023d2:	042d      	lsls	r5, r5, #16
 80023d4:	4273      	negs	r3, r6
 80023d6:	4329      	orrs	r1, r5
 80023d8:	e720      	b.n	800221c <__aeabi_dsub+0x2cc>
 80023da:	2e00      	cmp	r6, #0
 80023dc:	d10c      	bne.n	80023f8 <__aeabi_dsub+0x4a8>
 80023de:	2f00      	cmp	r7, #0
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x494>
 80023e2:	e0d0      	b.n	8002586 <__aeabi_dsub+0x636>
 80023e4:	465c      	mov	r4, fp
 80023e6:	4661      	mov	r1, ip
 80023e8:	4691      	mov	r9, r2
 80023ea:	4d7b      	ldr	r5, [pc, #492]	; (80025d8 <__aeabi_dsub+0x688>)
 80023ec:	e6cd      	b.n	800218a <__aeabi_dsub+0x23a>
 80023ee:	4f7a      	ldr	r7, [pc, #488]	; (80025d8 <__aeabi_dsub+0x688>)
 80023f0:	42be      	cmp	r6, r7
 80023f2:	d01c      	beq.n	800242e <__aeabi_dsub+0x4de>
 80023f4:	001e      	movs	r6, r3
 80023f6:	e665      	b.n	80020c4 <__aeabi_dsub+0x174>
 80023f8:	2f00      	cmp	r7, #0
 80023fa:	d018      	beq.n	800242e <__aeabi_dsub+0x4de>
 80023fc:	08c0      	lsrs	r0, r0, #3
 80023fe:	074e      	lsls	r6, r1, #29
 8002400:	4306      	orrs	r6, r0
 8002402:	2080      	movs	r0, #128	; 0x80
 8002404:	08c9      	lsrs	r1, r1, #3
 8002406:	0300      	lsls	r0, r0, #12
 8002408:	4201      	tst	r1, r0
 800240a:	d008      	beq.n	800241e <__aeabi_dsub+0x4ce>
 800240c:	4663      	mov	r3, ip
 800240e:	08dc      	lsrs	r4, r3, #3
 8002410:	4204      	tst	r4, r0
 8002412:	d104      	bne.n	800241e <__aeabi_dsub+0x4ce>
 8002414:	0021      	movs	r1, r4
 8002416:	46da      	mov	sl, fp
 8002418:	08d2      	lsrs	r2, r2, #3
 800241a:	075e      	lsls	r6, r3, #29
 800241c:	4316      	orrs	r6, r2
 800241e:	00f3      	lsls	r3, r6, #3
 8002420:	4699      	mov	r9, r3
 8002422:	2401      	movs	r4, #1
 8002424:	4653      	mov	r3, sl
 8002426:	00c9      	lsls	r1, r1, #3
 8002428:	0f72      	lsrs	r2, r6, #29
 800242a:	4311      	orrs	r1, r2
 800242c:	401c      	ands	r4, r3
 800242e:	4d6a      	ldr	r5, [pc, #424]	; (80025d8 <__aeabi_dsub+0x688>)
 8002430:	e6ab      	b.n	800218a <__aeabi_dsub+0x23a>
 8002432:	001d      	movs	r5, r3
 8002434:	2200      	movs	r2, #0
 8002436:	2700      	movs	r7, #0
 8002438:	e6b4      	b.n	80021a4 <__aeabi_dsub+0x254>
 800243a:	2d00      	cmp	r5, #0
 800243c:	d159      	bne.n	80024f2 <__aeabi_dsub+0x5a2>
 800243e:	000b      	movs	r3, r1
 8002440:	4303      	orrs	r3, r0
 8002442:	d100      	bne.n	8002446 <__aeabi_dsub+0x4f6>
 8002444:	e6d6      	b.n	80021f4 <__aeabi_dsub+0x2a4>
 8002446:	1c73      	adds	r3, r6, #1
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x4fc>
 800244a:	e0b2      	b.n	80025b2 <__aeabi_dsub+0x662>
 800244c:	4b62      	ldr	r3, [pc, #392]	; (80025d8 <__aeabi_dsub+0x688>)
 800244e:	429f      	cmp	r7, r3
 8002450:	d01e      	beq.n	8002490 <__aeabi_dsub+0x540>
 8002452:	43f3      	mvns	r3, r6
 8002454:	2b38      	cmp	r3, #56	; 0x38
 8002456:	dc6f      	bgt.n	8002538 <__aeabi_dsub+0x5e8>
 8002458:	2b1f      	cmp	r3, #31
 800245a:	dd00      	ble.n	800245e <__aeabi_dsub+0x50e>
 800245c:	e097      	b.n	800258e <__aeabi_dsub+0x63e>
 800245e:	2520      	movs	r5, #32
 8002460:	000e      	movs	r6, r1
 8002462:	1aed      	subs	r5, r5, r3
 8002464:	40ae      	lsls	r6, r5
 8002466:	46b0      	mov	r8, r6
 8002468:	0006      	movs	r6, r0
 800246a:	46aa      	mov	sl, r5
 800246c:	40de      	lsrs	r6, r3
 800246e:	4645      	mov	r5, r8
 8002470:	4335      	orrs	r5, r6
 8002472:	002e      	movs	r6, r5
 8002474:	4655      	mov	r5, sl
 8002476:	40a8      	lsls	r0, r5
 8002478:	40d9      	lsrs	r1, r3
 800247a:	1e45      	subs	r5, r0, #1
 800247c:	41a8      	sbcs	r0, r5
 800247e:	448c      	add	ip, r1
 8002480:	4306      	orrs	r6, r0
 8002482:	18b6      	adds	r6, r6, r2
 8002484:	4296      	cmp	r6, r2
 8002486:	4192      	sbcs	r2, r2
 8002488:	4251      	negs	r1, r2
 800248a:	4461      	add	r1, ip
 800248c:	003d      	movs	r5, r7
 800248e:	e625      	b.n	80020dc <__aeabi_dsub+0x18c>
 8002490:	003d      	movs	r5, r7
 8002492:	4661      	mov	r1, ip
 8002494:	4691      	mov	r9, r2
 8002496:	e678      	b.n	800218a <__aeabi_dsub+0x23a>
 8002498:	000b      	movs	r3, r1
 800249a:	4303      	orrs	r3, r0
 800249c:	2d00      	cmp	r5, #0
 800249e:	d000      	beq.n	80024a2 <__aeabi_dsub+0x552>
 80024a0:	e655      	b.n	800214e <__aeabi_dsub+0x1fe>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f5      	beq.n	8002492 <__aeabi_dsub+0x542>
 80024a6:	4663      	mov	r3, ip
 80024a8:	4313      	orrs	r3, r2
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x55e>
 80024ac:	e66d      	b.n	800218a <__aeabi_dsub+0x23a>
 80024ae:	1886      	adds	r6, r0, r2
 80024b0:	4286      	cmp	r6, r0
 80024b2:	4180      	sbcs	r0, r0
 80024b4:	4461      	add	r1, ip
 80024b6:	4240      	negs	r0, r0
 80024b8:	1809      	adds	r1, r1, r0
 80024ba:	2200      	movs	r2, #0
 80024bc:	020b      	lsls	r3, r1, #8
 80024be:	d400      	bmi.n	80024c2 <__aeabi_dsub+0x572>
 80024c0:	e6d0      	b.n	8002264 <__aeabi_dsub+0x314>
 80024c2:	4b46      	ldr	r3, [pc, #280]	; (80025dc <__aeabi_dsub+0x68c>)
 80024c4:	3501      	adds	r5, #1
 80024c6:	4019      	ands	r1, r3
 80024c8:	e5b2      	b.n	8002030 <__aeabi_dsub+0xe0>
 80024ca:	46b1      	mov	r9, r6
 80024cc:	e65d      	b.n	800218a <__aeabi_dsub+0x23a>
 80024ce:	0033      	movs	r3, r6
 80024d0:	4667      	mov	r7, ip
 80024d2:	3b20      	subs	r3, #32
 80024d4:	40df      	lsrs	r7, r3
 80024d6:	003b      	movs	r3, r7
 80024d8:	2e20      	cmp	r6, #32
 80024da:	d005      	beq.n	80024e8 <__aeabi_dsub+0x598>
 80024dc:	2740      	movs	r7, #64	; 0x40
 80024de:	1bbf      	subs	r7, r7, r6
 80024e0:	4666      	mov	r6, ip
 80024e2:	40be      	lsls	r6, r7
 80024e4:	4332      	orrs	r2, r6
 80024e6:	4690      	mov	r8, r2
 80024e8:	4646      	mov	r6, r8
 80024ea:	1e72      	subs	r2, r6, #1
 80024ec:	4196      	sbcs	r6, r2
 80024ee:	4333      	orrs	r3, r6
 80024f0:	e5ef      	b.n	80020d2 <__aeabi_dsub+0x182>
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <__aeabi_dsub+0x688>)
 80024f4:	429f      	cmp	r7, r3
 80024f6:	d0cb      	beq.n	8002490 <__aeabi_dsub+0x540>
 80024f8:	2580      	movs	r5, #128	; 0x80
 80024fa:	042d      	lsls	r5, r5, #16
 80024fc:	4273      	negs	r3, r6
 80024fe:	4329      	orrs	r1, r5
 8002500:	e7a8      	b.n	8002454 <__aeabi_dsub+0x504>
 8002502:	4308      	orrs	r0, r1
 8002504:	1e41      	subs	r1, r0, #1
 8002506:	4188      	sbcs	r0, r1
 8002508:	e6a2      	b.n	8002250 <__aeabi_dsub+0x300>
 800250a:	2f00      	cmp	r7, #0
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x5c0>
 800250e:	e63c      	b.n	800218a <__aeabi_dsub+0x23a>
 8002510:	4663      	mov	r3, ip
 8002512:	1a86      	subs	r6, r0, r2
 8002514:	1acf      	subs	r7, r1, r3
 8002516:	42b0      	cmp	r0, r6
 8002518:	419b      	sbcs	r3, r3
 800251a:	425b      	negs	r3, r3
 800251c:	1afb      	subs	r3, r7, r3
 800251e:	4698      	mov	r8, r3
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	d54e      	bpl.n	80025c2 <__aeabi_dsub+0x672>
 8002524:	1a16      	subs	r6, r2, r0
 8002526:	4663      	mov	r3, ip
 8002528:	42b2      	cmp	r2, r6
 800252a:	4192      	sbcs	r2, r2
 800252c:	1a59      	subs	r1, r3, r1
 800252e:	4252      	negs	r2, r2
 8002530:	1a89      	subs	r1, r1, r2
 8002532:	465c      	mov	r4, fp
 8002534:	2200      	movs	r2, #0
 8002536:	e57b      	b.n	8002030 <__aeabi_dsub+0xe0>
 8002538:	4301      	orrs	r1, r0
 800253a:	000e      	movs	r6, r1
 800253c:	1e71      	subs	r1, r6, #1
 800253e:	418e      	sbcs	r6, r1
 8002540:	e79f      	b.n	8002482 <__aeabi_dsub+0x532>
 8002542:	001d      	movs	r5, r3
 8002544:	000e      	movs	r6, r1
 8002546:	3d20      	subs	r5, #32
 8002548:	40ee      	lsrs	r6, r5
 800254a:	46b0      	mov	r8, r6
 800254c:	2b20      	cmp	r3, #32
 800254e:	d004      	beq.n	800255a <__aeabi_dsub+0x60a>
 8002550:	2540      	movs	r5, #64	; 0x40
 8002552:	1aeb      	subs	r3, r5, r3
 8002554:	4099      	lsls	r1, r3
 8002556:	4308      	orrs	r0, r1
 8002558:	4681      	mov	r9, r0
 800255a:	4648      	mov	r0, r9
 800255c:	4643      	mov	r3, r8
 800255e:	1e41      	subs	r1, r0, #1
 8002560:	4188      	sbcs	r0, r1
 8002562:	4318      	orrs	r0, r3
 8002564:	e674      	b.n	8002250 <__aeabi_dsub+0x300>
 8002566:	2200      	movs	r2, #0
 8002568:	2400      	movs	r4, #0
 800256a:	e617      	b.n	800219c <__aeabi_dsub+0x24c>
 800256c:	1a16      	subs	r6, r2, r0
 800256e:	4663      	mov	r3, ip
 8002570:	42b2      	cmp	r2, r6
 8002572:	4192      	sbcs	r2, r2
 8002574:	1a59      	subs	r1, r3, r1
 8002576:	4252      	negs	r2, r2
 8002578:	1a89      	subs	r1, r1, r2
 800257a:	003d      	movs	r5, r7
 800257c:	e525      	b.n	8001fca <__aeabi_dsub+0x7a>
 800257e:	4661      	mov	r1, ip
 8002580:	4691      	mov	r9, r2
 8002582:	4d15      	ldr	r5, [pc, #84]	; (80025d8 <__aeabi_dsub+0x688>)
 8002584:	e601      	b.n	800218a <__aeabi_dsub+0x23a>
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	2400      	movs	r4, #0
 800258a:	0312      	lsls	r2, r2, #12
 800258c:	e679      	b.n	8002282 <__aeabi_dsub+0x332>
 800258e:	001d      	movs	r5, r3
 8002590:	000e      	movs	r6, r1
 8002592:	3d20      	subs	r5, #32
 8002594:	40ee      	lsrs	r6, r5
 8002596:	46b0      	mov	r8, r6
 8002598:	2b20      	cmp	r3, #32
 800259a:	d004      	beq.n	80025a6 <__aeabi_dsub+0x656>
 800259c:	2540      	movs	r5, #64	; 0x40
 800259e:	1aeb      	subs	r3, r5, r3
 80025a0:	4099      	lsls	r1, r3
 80025a2:	4308      	orrs	r0, r1
 80025a4:	4681      	mov	r9, r0
 80025a6:	464e      	mov	r6, r9
 80025a8:	4643      	mov	r3, r8
 80025aa:	1e71      	subs	r1, r6, #1
 80025ac:	418e      	sbcs	r6, r1
 80025ae:	431e      	orrs	r6, r3
 80025b0:	e767      	b.n	8002482 <__aeabi_dsub+0x532>
 80025b2:	1886      	adds	r6, r0, r2
 80025b4:	4296      	cmp	r6, r2
 80025b6:	419b      	sbcs	r3, r3
 80025b8:	4461      	add	r1, ip
 80025ba:	425b      	negs	r3, r3
 80025bc:	18c9      	adds	r1, r1, r3
 80025be:	003d      	movs	r5, r7
 80025c0:	e58c      	b.n	80020dc <__aeabi_dsub+0x18c>
 80025c2:	4647      	mov	r7, r8
 80025c4:	4337      	orrs	r7, r6
 80025c6:	d0ce      	beq.n	8002566 <__aeabi_dsub+0x616>
 80025c8:	2207      	movs	r2, #7
 80025ca:	4641      	mov	r1, r8
 80025cc:	4032      	ands	r2, r6
 80025ce:	e649      	b.n	8002264 <__aeabi_dsub+0x314>
 80025d0:	2700      	movs	r7, #0
 80025d2:	003a      	movs	r2, r7
 80025d4:	e5e6      	b.n	80021a4 <__aeabi_dsub+0x254>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	000007ff 	.word	0x000007ff
 80025dc:	ff7fffff 	.word	0xff7fffff

080025e0 <__aeabi_dcmpun>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	4e0c      	ldr	r6, [pc, #48]	; (8002614 <__aeabi_dcmpun+0x34>)
 80025e4:	030d      	lsls	r5, r1, #12
 80025e6:	031c      	lsls	r4, r3, #12
 80025e8:	0049      	lsls	r1, r1, #1
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	0b2d      	lsrs	r5, r5, #12
 80025ee:	0d49      	lsrs	r1, r1, #21
 80025f0:	0b24      	lsrs	r4, r4, #12
 80025f2:	0d5b      	lsrs	r3, r3, #21
 80025f4:	42b1      	cmp	r1, r6
 80025f6:	d008      	beq.n	800260a <__aeabi_dcmpun+0x2a>
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <__aeabi_dcmpun+0x34>)
 80025fa:	2000      	movs	r0, #0
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d103      	bne.n	8002608 <__aeabi_dcmpun+0x28>
 8002600:	4314      	orrs	r4, r2
 8002602:	0020      	movs	r0, r4
 8002604:	1e44      	subs	r4, r0, #1
 8002606:	41a0      	sbcs	r0, r4
 8002608:	bd70      	pop	{r4, r5, r6, pc}
 800260a:	4305      	orrs	r5, r0
 800260c:	2001      	movs	r0, #1
 800260e:	2d00      	cmp	r5, #0
 8002610:	d1fa      	bne.n	8002608 <__aeabi_dcmpun+0x28>
 8002612:	e7f1      	b.n	80025f8 <__aeabi_dcmpun+0x18>
 8002614:	000007ff 	.word	0x000007ff

08002618 <__aeabi_d2iz>:
 8002618:	b530      	push	{r4, r5, lr}
 800261a:	4d14      	ldr	r5, [pc, #80]	; (800266c <__aeabi_d2iz+0x54>)
 800261c:	030a      	lsls	r2, r1, #12
 800261e:	004b      	lsls	r3, r1, #1
 8002620:	0b12      	lsrs	r2, r2, #12
 8002622:	0d5b      	lsrs	r3, r3, #21
 8002624:	0fc9      	lsrs	r1, r1, #31
 8002626:	2400      	movs	r4, #0
 8002628:	42ab      	cmp	r3, r5
 800262a:	dd11      	ble.n	8002650 <__aeabi_d2iz+0x38>
 800262c:	4c10      	ldr	r4, [pc, #64]	; (8002670 <__aeabi_d2iz+0x58>)
 800262e:	42a3      	cmp	r3, r4
 8002630:	dc10      	bgt.n	8002654 <__aeabi_d2iz+0x3c>
 8002632:	2480      	movs	r4, #128	; 0x80
 8002634:	0364      	lsls	r4, r4, #13
 8002636:	4322      	orrs	r2, r4
 8002638:	4c0e      	ldr	r4, [pc, #56]	; (8002674 <__aeabi_d2iz+0x5c>)
 800263a:	1ae4      	subs	r4, r4, r3
 800263c:	2c1f      	cmp	r4, #31
 800263e:	dd0c      	ble.n	800265a <__aeabi_d2iz+0x42>
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <__aeabi_d2iz+0x60>)
 8002642:	1ac3      	subs	r3, r0, r3
 8002644:	40da      	lsrs	r2, r3
 8002646:	0013      	movs	r3, r2
 8002648:	425c      	negs	r4, r3
 800264a:	2900      	cmp	r1, #0
 800264c:	d100      	bne.n	8002650 <__aeabi_d2iz+0x38>
 800264e:	001c      	movs	r4, r3
 8002650:	0020      	movs	r0, r4
 8002652:	bd30      	pop	{r4, r5, pc}
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <__aeabi_d2iz+0x64>)
 8002656:	18cc      	adds	r4, r1, r3
 8002658:	e7fa      	b.n	8002650 <__aeabi_d2iz+0x38>
 800265a:	4d09      	ldr	r5, [pc, #36]	; (8002680 <__aeabi_d2iz+0x68>)
 800265c:	40e0      	lsrs	r0, r4
 800265e:	46ac      	mov	ip, r5
 8002660:	4463      	add	r3, ip
 8002662:	409a      	lsls	r2, r3
 8002664:	0013      	movs	r3, r2
 8002666:	4303      	orrs	r3, r0
 8002668:	e7ee      	b.n	8002648 <__aeabi_d2iz+0x30>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	000003fe 	.word	0x000003fe
 8002670:	0000041d 	.word	0x0000041d
 8002674:	00000433 	.word	0x00000433
 8002678:	00000413 	.word	0x00000413
 800267c:	7fffffff 	.word	0x7fffffff
 8002680:	fffffbed 	.word	0xfffffbed

08002684 <__aeabi_i2d>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	2800      	cmp	r0, #0
 8002688:	d02d      	beq.n	80026e6 <__aeabi_i2d+0x62>
 800268a:	17c3      	asrs	r3, r0, #31
 800268c:	18c5      	adds	r5, r0, r3
 800268e:	405d      	eors	r5, r3
 8002690:	0fc4      	lsrs	r4, r0, #31
 8002692:	0028      	movs	r0, r5
 8002694:	f000 f938 	bl	8002908 <__clzsi2>
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <__aeabi_i2d+0x6c>)
 800269a:	1a1b      	subs	r3, r3, r0
 800269c:	055b      	lsls	r3, r3, #21
 800269e:	0d5b      	lsrs	r3, r3, #21
 80026a0:	280a      	cmp	r0, #10
 80026a2:	dd15      	ble.n	80026d0 <__aeabi_i2d+0x4c>
 80026a4:	380b      	subs	r0, #11
 80026a6:	4085      	lsls	r5, r0
 80026a8:	2200      	movs	r2, #0
 80026aa:	032d      	lsls	r5, r5, #12
 80026ac:	0b2d      	lsrs	r5, r5, #12
 80026ae:	2100      	movs	r1, #0
 80026b0:	0010      	movs	r0, r2
 80026b2:	032d      	lsls	r5, r5, #12
 80026b4:	0d0a      	lsrs	r2, r1, #20
 80026b6:	0b2d      	lsrs	r5, r5, #12
 80026b8:	0512      	lsls	r2, r2, #20
 80026ba:	432a      	orrs	r2, r5
 80026bc:	4d0d      	ldr	r5, [pc, #52]	; (80026f4 <__aeabi_i2d+0x70>)
 80026be:	051b      	lsls	r3, r3, #20
 80026c0:	402a      	ands	r2, r5
 80026c2:	4313      	orrs	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	07e4      	lsls	r4, r4, #31
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	4323      	orrs	r3, r4
 80026cc:	0019      	movs	r1, r3
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	0002      	movs	r2, r0
 80026d2:	0029      	movs	r1, r5
 80026d4:	3215      	adds	r2, #21
 80026d6:	4091      	lsls	r1, r2
 80026d8:	000a      	movs	r2, r1
 80026da:	210b      	movs	r1, #11
 80026dc:	1a08      	subs	r0, r1, r0
 80026de:	40c5      	lsrs	r5, r0
 80026e0:	032d      	lsls	r5, r5, #12
 80026e2:	0b2d      	lsrs	r5, r5, #12
 80026e4:	e7e3      	b.n	80026ae <__aeabi_i2d+0x2a>
 80026e6:	2400      	movs	r4, #0
 80026e8:	2300      	movs	r3, #0
 80026ea:	2500      	movs	r5, #0
 80026ec:	2200      	movs	r2, #0
 80026ee:	e7de      	b.n	80026ae <__aeabi_i2d+0x2a>
 80026f0:	0000041e 	.word	0x0000041e
 80026f4:	800fffff 	.word	0x800fffff

080026f8 <__aeabi_ui2d>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	1e04      	subs	r4, r0, #0
 80026fc:	d025      	beq.n	800274a <__aeabi_ui2d+0x52>
 80026fe:	f000 f903 	bl	8002908 <__clzsi2>
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <__aeabi_ui2d+0x5c>)
 8002704:	1a1b      	subs	r3, r3, r0
 8002706:	055b      	lsls	r3, r3, #21
 8002708:	0d5b      	lsrs	r3, r3, #21
 800270a:	280a      	cmp	r0, #10
 800270c:	dd12      	ble.n	8002734 <__aeabi_ui2d+0x3c>
 800270e:	380b      	subs	r0, #11
 8002710:	4084      	lsls	r4, r0
 8002712:	2200      	movs	r2, #0
 8002714:	0324      	lsls	r4, r4, #12
 8002716:	0b24      	lsrs	r4, r4, #12
 8002718:	2100      	movs	r1, #0
 800271a:	0010      	movs	r0, r2
 800271c:	0324      	lsls	r4, r4, #12
 800271e:	0d0a      	lsrs	r2, r1, #20
 8002720:	0b24      	lsrs	r4, r4, #12
 8002722:	0512      	lsls	r2, r2, #20
 8002724:	4322      	orrs	r2, r4
 8002726:	4c0c      	ldr	r4, [pc, #48]	; (8002758 <__aeabi_ui2d+0x60>)
 8002728:	051b      	lsls	r3, r3, #20
 800272a:	4022      	ands	r2, r4
 800272c:	4313      	orrs	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	0859      	lsrs	r1, r3, #1
 8002732:	bd10      	pop	{r4, pc}
 8002734:	0002      	movs	r2, r0
 8002736:	0021      	movs	r1, r4
 8002738:	3215      	adds	r2, #21
 800273a:	4091      	lsls	r1, r2
 800273c:	000a      	movs	r2, r1
 800273e:	210b      	movs	r1, #11
 8002740:	1a08      	subs	r0, r1, r0
 8002742:	40c4      	lsrs	r4, r0
 8002744:	0324      	lsls	r4, r4, #12
 8002746:	0b24      	lsrs	r4, r4, #12
 8002748:	e7e6      	b.n	8002718 <__aeabi_ui2d+0x20>
 800274a:	2300      	movs	r3, #0
 800274c:	2400      	movs	r4, #0
 800274e:	2200      	movs	r2, #0
 8002750:	e7e2      	b.n	8002718 <__aeabi_ui2d+0x20>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	0000041e 	.word	0x0000041e
 8002758:	800fffff 	.word	0x800fffff

0800275c <__aeabi_f2d>:
 800275c:	0041      	lsls	r1, r0, #1
 800275e:	0e09      	lsrs	r1, r1, #24
 8002760:	1c4b      	adds	r3, r1, #1
 8002762:	b570      	push	{r4, r5, r6, lr}
 8002764:	b2db      	uxtb	r3, r3
 8002766:	0246      	lsls	r6, r0, #9
 8002768:	0a75      	lsrs	r5, r6, #9
 800276a:	0fc4      	lsrs	r4, r0, #31
 800276c:	2b01      	cmp	r3, #1
 800276e:	dd14      	ble.n	800279a <__aeabi_f2d+0x3e>
 8002770:	23e0      	movs	r3, #224	; 0xe0
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	076d      	lsls	r5, r5, #29
 8002776:	0b36      	lsrs	r6, r6, #12
 8002778:	18cb      	adds	r3, r1, r3
 800277a:	2100      	movs	r1, #0
 800277c:	0d0a      	lsrs	r2, r1, #20
 800277e:	0028      	movs	r0, r5
 8002780:	0512      	lsls	r2, r2, #20
 8002782:	4d1c      	ldr	r5, [pc, #112]	; (80027f4 <__aeabi_f2d+0x98>)
 8002784:	4332      	orrs	r2, r6
 8002786:	055b      	lsls	r3, r3, #21
 8002788:	402a      	ands	r2, r5
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	4313      	orrs	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	07e4      	lsls	r4, r4, #31
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	4323      	orrs	r3, r4
 8002796:	0019      	movs	r1, r3
 8002798:	bd70      	pop	{r4, r5, r6, pc}
 800279a:	2900      	cmp	r1, #0
 800279c:	d114      	bne.n	80027c8 <__aeabi_f2d+0x6c>
 800279e:	2d00      	cmp	r5, #0
 80027a0:	d01e      	beq.n	80027e0 <__aeabi_f2d+0x84>
 80027a2:	0028      	movs	r0, r5
 80027a4:	f000 f8b0 	bl	8002908 <__clzsi2>
 80027a8:	280a      	cmp	r0, #10
 80027aa:	dc1c      	bgt.n	80027e6 <__aeabi_f2d+0x8a>
 80027ac:	230b      	movs	r3, #11
 80027ae:	002a      	movs	r2, r5
 80027b0:	1a1b      	subs	r3, r3, r0
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	0003      	movs	r3, r0
 80027b6:	3315      	adds	r3, #21
 80027b8:	409d      	lsls	r5, r3
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <__aeabi_f2d+0x9c>)
 80027bc:	0312      	lsls	r2, r2, #12
 80027be:	1a1b      	subs	r3, r3, r0
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	0b16      	lsrs	r6, r2, #12
 80027c4:	0d5b      	lsrs	r3, r3, #21
 80027c6:	e7d8      	b.n	800277a <__aeabi_f2d+0x1e>
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	d006      	beq.n	80027da <__aeabi_f2d+0x7e>
 80027cc:	0b32      	lsrs	r2, r6, #12
 80027ce:	2680      	movs	r6, #128	; 0x80
 80027d0:	0336      	lsls	r6, r6, #12
 80027d2:	076d      	lsls	r5, r5, #29
 80027d4:	4316      	orrs	r6, r2
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <__aeabi_f2d+0xa0>)
 80027d8:	e7cf      	b.n	800277a <__aeabi_f2d+0x1e>
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <__aeabi_f2d+0xa0>)
 80027dc:	2600      	movs	r6, #0
 80027de:	e7cc      	b.n	800277a <__aeabi_f2d+0x1e>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2600      	movs	r6, #0
 80027e4:	e7c9      	b.n	800277a <__aeabi_f2d+0x1e>
 80027e6:	0003      	movs	r3, r0
 80027e8:	002a      	movs	r2, r5
 80027ea:	3b0b      	subs	r3, #11
 80027ec:	409a      	lsls	r2, r3
 80027ee:	2500      	movs	r5, #0
 80027f0:	e7e3      	b.n	80027ba <__aeabi_f2d+0x5e>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	800fffff 	.word	0x800fffff
 80027f8:	00000389 	.word	0x00000389
 80027fc:	000007ff 	.word	0x000007ff

08002800 <__aeabi_d2f>:
 8002800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002802:	004c      	lsls	r4, r1, #1
 8002804:	0d64      	lsrs	r4, r4, #21
 8002806:	030b      	lsls	r3, r1, #12
 8002808:	1c62      	adds	r2, r4, #1
 800280a:	0a5b      	lsrs	r3, r3, #9
 800280c:	0f46      	lsrs	r6, r0, #29
 800280e:	0552      	lsls	r2, r2, #21
 8002810:	0fc9      	lsrs	r1, r1, #31
 8002812:	431e      	orrs	r6, r3
 8002814:	00c5      	lsls	r5, r0, #3
 8002816:	0d52      	lsrs	r2, r2, #21
 8002818:	2a01      	cmp	r2, #1
 800281a:	dd29      	ble.n	8002870 <__aeabi_d2f+0x70>
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <__aeabi_d2f+0xfc>)
 800281e:	18e7      	adds	r7, r4, r3
 8002820:	2ffe      	cmp	r7, #254	; 0xfe
 8002822:	dc1c      	bgt.n	800285e <__aeabi_d2f+0x5e>
 8002824:	2f00      	cmp	r7, #0
 8002826:	dd3b      	ble.n	80028a0 <__aeabi_d2f+0xa0>
 8002828:	0180      	lsls	r0, r0, #6
 800282a:	1e43      	subs	r3, r0, #1
 800282c:	4198      	sbcs	r0, r3
 800282e:	2207      	movs	r2, #7
 8002830:	00f3      	lsls	r3, r6, #3
 8002832:	0f6d      	lsrs	r5, r5, #29
 8002834:	4303      	orrs	r3, r0
 8002836:	432b      	orrs	r3, r5
 8002838:	401a      	ands	r2, r3
 800283a:	2a00      	cmp	r2, #0
 800283c:	d004      	beq.n	8002848 <__aeabi_d2f+0x48>
 800283e:	220f      	movs	r2, #15
 8002840:	401a      	ands	r2, r3
 8002842:	2a04      	cmp	r2, #4
 8002844:	d000      	beq.n	8002848 <__aeabi_d2f+0x48>
 8002846:	3304      	adds	r3, #4
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	04d2      	lsls	r2, r2, #19
 800284c:	401a      	ands	r2, r3
 800284e:	d024      	beq.n	800289a <__aeabi_d2f+0x9a>
 8002850:	3701      	adds	r7, #1
 8002852:	b2fa      	uxtb	r2, r7
 8002854:	2fff      	cmp	r7, #255	; 0xff
 8002856:	d002      	beq.n	800285e <__aeabi_d2f+0x5e>
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	0a58      	lsrs	r0, r3, #9
 800285c:	e001      	b.n	8002862 <__aeabi_d2f+0x62>
 800285e:	22ff      	movs	r2, #255	; 0xff
 8002860:	2000      	movs	r0, #0
 8002862:	0240      	lsls	r0, r0, #9
 8002864:	05d2      	lsls	r2, r2, #23
 8002866:	0a40      	lsrs	r0, r0, #9
 8002868:	07c9      	lsls	r1, r1, #31
 800286a:	4310      	orrs	r0, r2
 800286c:	4308      	orrs	r0, r1
 800286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002870:	4335      	orrs	r5, r6
 8002872:	2c00      	cmp	r4, #0
 8002874:	d104      	bne.n	8002880 <__aeabi_d2f+0x80>
 8002876:	2d00      	cmp	r5, #0
 8002878:	d10a      	bne.n	8002890 <__aeabi_d2f+0x90>
 800287a:	2200      	movs	r2, #0
 800287c:	2000      	movs	r0, #0
 800287e:	e7f0      	b.n	8002862 <__aeabi_d2f+0x62>
 8002880:	2d00      	cmp	r5, #0
 8002882:	d0ec      	beq.n	800285e <__aeabi_d2f+0x5e>
 8002884:	2080      	movs	r0, #128	; 0x80
 8002886:	03c0      	lsls	r0, r0, #15
 8002888:	4330      	orrs	r0, r6
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	e7e9      	b.n	8002862 <__aeabi_d2f+0x62>
 800288e:	2400      	movs	r4, #0
 8002890:	2300      	movs	r3, #0
 8002892:	025b      	lsls	r3, r3, #9
 8002894:	0a58      	lsrs	r0, r3, #9
 8002896:	b2e2      	uxtb	r2, r4
 8002898:	e7e3      	b.n	8002862 <__aeabi_d2f+0x62>
 800289a:	08db      	lsrs	r3, r3, #3
 800289c:	003c      	movs	r4, r7
 800289e:	e7f8      	b.n	8002892 <__aeabi_d2f+0x92>
 80028a0:	003b      	movs	r3, r7
 80028a2:	3317      	adds	r3, #23
 80028a4:	dbf3      	blt.n	800288e <__aeabi_d2f+0x8e>
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4333      	orrs	r3, r6
 80028ac:	261e      	movs	r6, #30
 80028ae:	1bf6      	subs	r6, r6, r7
 80028b0:	2e1f      	cmp	r6, #31
 80028b2:	dd14      	ble.n	80028de <__aeabi_d2f+0xde>
 80028b4:	2202      	movs	r2, #2
 80028b6:	4252      	negs	r2, r2
 80028b8:	1bd7      	subs	r7, r2, r7
 80028ba:	001a      	movs	r2, r3
 80028bc:	40fa      	lsrs	r2, r7
 80028be:	0017      	movs	r7, r2
 80028c0:	2e20      	cmp	r6, #32
 80028c2:	d004      	beq.n	80028ce <__aeabi_d2f+0xce>
 80028c4:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <__aeabi_d2f+0x100>)
 80028c6:	4694      	mov	ip, r2
 80028c8:	4464      	add	r4, ip
 80028ca:	40a3      	lsls	r3, r4
 80028cc:	431d      	orrs	r5, r3
 80028ce:	002b      	movs	r3, r5
 80028d0:	1e5d      	subs	r5, r3, #1
 80028d2:	41ab      	sbcs	r3, r5
 80028d4:	2207      	movs	r2, #7
 80028d6:	433b      	orrs	r3, r7
 80028d8:	401a      	ands	r2, r3
 80028da:	2700      	movs	r7, #0
 80028dc:	e7ad      	b.n	800283a <__aeabi_d2f+0x3a>
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <__aeabi_d2f+0x104>)
 80028e0:	0028      	movs	r0, r5
 80028e2:	18a2      	adds	r2, r4, r2
 80028e4:	4095      	lsls	r5, r2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	1e6c      	subs	r4, r5, #1
 80028ea:	41a5      	sbcs	r5, r4
 80028ec:	40f0      	lsrs	r0, r6
 80028ee:	2207      	movs	r2, #7
 80028f0:	432b      	orrs	r3, r5
 80028f2:	4303      	orrs	r3, r0
 80028f4:	401a      	ands	r2, r3
 80028f6:	2700      	movs	r7, #0
 80028f8:	e79f      	b.n	800283a <__aeabi_d2f+0x3a>
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	fffffc80 	.word	0xfffffc80
 8002900:	fffffca2 	.word	0xfffffca2
 8002904:	fffffc82 	.word	0xfffffc82

08002908 <__clzsi2>:
 8002908:	211c      	movs	r1, #28
 800290a:	2301      	movs	r3, #1
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	4298      	cmp	r0, r3
 8002910:	d301      	bcc.n	8002916 <__clzsi2+0xe>
 8002912:	0c00      	lsrs	r0, r0, #16
 8002914:	3910      	subs	r1, #16
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	4298      	cmp	r0, r3
 800291a:	d301      	bcc.n	8002920 <__clzsi2+0x18>
 800291c:	0a00      	lsrs	r0, r0, #8
 800291e:	3908      	subs	r1, #8
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	4298      	cmp	r0, r3
 8002924:	d301      	bcc.n	800292a <__clzsi2+0x22>
 8002926:	0900      	lsrs	r0, r0, #4
 8002928:	3904      	subs	r1, #4
 800292a:	a202      	add	r2, pc, #8	; (adr r2, 8002934 <__clzsi2+0x2c>)
 800292c:	5c10      	ldrb	r0, [r2, r0]
 800292e:	1840      	adds	r0, r0, r1
 8002930:	4770      	bx	lr
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	02020304 	.word	0x02020304
 8002938:	01010101 	.word	0x01010101
	...

08002944 <__clzdi2>:
 8002944:	b510      	push	{r4, lr}
 8002946:	2900      	cmp	r1, #0
 8002948:	d103      	bne.n	8002952 <__clzdi2+0xe>
 800294a:	f7ff ffdd 	bl	8002908 <__clzsi2>
 800294e:	3020      	adds	r0, #32
 8002950:	e002      	b.n	8002958 <__clzdi2+0x14>
 8002952:	1c08      	adds	r0, r1, #0
 8002954:	f7ff ffd8 	bl	8002908 <__clzsi2>
 8002958:	bd10      	pop	{r4, pc}
 800295a:	46c0      	nop			; (mov r8, r8)

0800295c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b09f      	sub	sp, #124	; 0x7c
 8002960:	af1e      	add	r7, sp, #120	; 0x78
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002962:	f002 fe25 	bl	80055b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Get Unique Device ID */
  stm32_dev_id_word0 = HAL_GetUIDw0();
 8002966:	f002 fea1 	bl	80056ac <HAL_GetUIDw0>
 800296a:	0002      	movs	r2, r0
 800296c:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <main+0x114>)
 800296e:	601a      	str	r2, [r3, #0]
  stm32_dev_id_word1 = HAL_GetUIDw1();
 8002970:	f002 fea6 	bl	80056c0 <HAL_GetUIDw1>
 8002974:	0002      	movs	r2, r0
 8002976:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <main+0x118>)
 8002978:	601a      	str	r2, [r3, #0]
  stm32_dev_id_word2 = HAL_GetUIDw2();
 800297a:	f002 feab 	bl	80056d4 <HAL_GetUIDw2>
 800297e:	0002      	movs	r2, r0
 8002980:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <main+0x11c>)
 8002982:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002984:	f000 f890 	bl	8002aa8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002988:	f000 fa90 	bl	8002eac <MX_GPIO_Init>
  MX_SPI1_Init();
 800298c:	f000 f9b6 	bl	8002cfc <MX_SPI1_Init>
  MX_TIM2_Init();
 8002990:	f000 f9ec 	bl	8002d6c <MX_TIM2_Init>
  MX_I2C1_Init();
 8002994:	f000 f90c 	bl	8002bb0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002998:	f000 fa58 	bl	8002e4c <MX_USART1_UART_Init>
  MX_RTC_Init();
 800299c:	f000 f94a 	bl	8002c34 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80029a0:	f000 f8f8 	bl	8002b94 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <main+0x120>)
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <main+0x124>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	0018      	movs	r0, r3
 80029ac:	f005 f88e 	bl	8007acc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80029b0:	4934      	ldr	r1, [pc, #208]	; (8002a84 <main+0x128>)
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <main+0x124>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	0018      	movs	r0, r3
 80029b8:	f005 f992 	bl	8007ce0 <HAL_RTC_GetDate>

  currTime.tm_year = currentDate.Year + 2019;  // In fact: 2000 + 18 - 1900
 80029bc:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <main+0x128>)
 80029be:	78db      	ldrb	r3, [r3, #3]
 80029c0:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <main+0x12c>)
 80029c2:	189a      	adds	r2, r3, r2
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <main+0x130>)
 80029c6:	615a      	str	r2, [r3, #20]
  currTime.tm_mday = currentDate.Date;
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <main+0x128>)
 80029ca:	789b      	ldrb	r3, [r3, #2]
 80029cc:	001a      	movs	r2, r3
 80029ce:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <main+0x130>)
 80029d0:	60da      	str	r2, [r3, #12]
  currTime.tm_mon  = currentDate.Month;
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <main+0x128>)
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	001a      	movs	r2, r3
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <main+0x130>)
 80029da:	611a      	str	r2, [r3, #16]

  currTime.tm_hour = currentTime.Hours;
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <main+0x120>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	001a      	movs	r2, r3
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <main+0x130>)
 80029e4:	609a      	str	r2, [r3, #8]
  currTime.tm_min  = currentTime.Minutes;
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <main+0x120>)
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	001a      	movs	r2, r3
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <main+0x130>)
 80029ee:	605a      	str	r2, [r3, #4]
  currTime.tm_sec  = currentTime.Seconds;
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <main+0x120>)
 80029f2:	789b      	ldrb	r3, [r3, #2]
 80029f4:	001a      	movs	r2, r3
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <main+0x130>)
 80029f8:	601a      	str	r2, [r3, #0]

  timestamp = mktime(&currTime);
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <main+0x130>)
 80029fc:	0018      	movs	r0, r3
 80029fe:	f007 fb8f 	bl	800a120 <mktime>
 8002a02:	0003      	movs	r3, r0
 8002a04:	000c      	movs	r4, r1
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <main+0x134>)
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	6054      	str	r4, [r2, #4]
//  wifiRST();
  //HAL_Delay(1000);
  wifiInit(huart1);
 8002a0c:	4c21      	ldr	r4, [pc, #132]	; (8002a94 <main+0x138>)
 8002a0e:	466b      	mov	r3, sp
 8002a10:	0018      	movs	r0, r3
 8002a12:	0023      	movs	r3, r4
 8002a14:	3310      	adds	r3, #16
 8002a16:	2270      	movs	r2, #112	; 0x70
 8002a18:	0019      	movs	r1, r3
 8002a1a:	f007 faa5 	bl	8009f68 <memcpy>
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	6861      	ldr	r1, [r4, #4]
 8002a22:	68a2      	ldr	r2, [r4, #8]
 8002a24:	68e3      	ldr	r3, [r4, #12]
 8002a26:	f002 fbe3 	bl	80051f0 <wifiInit>
  wifi_get_timestamp();
 8002a2a:	f000 fc1b 	bl	8003264 <wifi_get_timestamp>
  HAL_Delay(1000);
 8002a2e:	23fa      	movs	r3, #250	; 0xfa
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f002 fe1c 	bl	8005670 <HAL_Delay>
  BME280_INIT();
 8002a38:	f000 fafa 	bl	8003030 <BME280_INIT>
  bme280_init_complete = 1;
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <main+0x13c>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
  connectWifi("WeatherBox", "WinDrone807", huart1);
 8002a42:	4c14      	ldr	r4, [pc, #80]	; (8002a94 <main+0x138>)
 8002a44:	4e15      	ldr	r6, [pc, #84]	; (8002a9c <main+0x140>)
 8002a46:	4d16      	ldr	r5, [pc, #88]	; (8002aa0 <main+0x144>)
 8002a48:	466b      	mov	r3, sp
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	0023      	movs	r3, r4
 8002a4e:	3308      	adds	r3, #8
 8002a50:	2278      	movs	r2, #120	; 0x78
 8002a52:	0019      	movs	r1, r3
 8002a54:	f007 fa88 	bl	8009f68 <memcpy>
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	6863      	ldr	r3, [r4, #4]
 8002a5c:	0031      	movs	r1, r6
 8002a5e:	0028      	movs	r0, r5
 8002a60:	f002 fc52 	bl	8005308 <connectWifi>
  //HAL_Delay(5000);
  HAL_TIM_Base_Start_IT(&htim2);
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <main+0x148>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f005 fff5 	bl	8008a56 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <main+0x110>
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	200004c4 	.word	0x200004c4
 8002a74:	200003e4 	.word	0x200003e4
 8002a78:	2000049c 	.word	0x2000049c
 8002a7c:	20000488 	.word	0x20000488
 8002a80:	200003c0 	.word	0x200003c0
 8002a84:	20000484 	.word	0x20000484
 8002a88:	000007e3 	.word	0x000007e3
 8002a8c:	200004a0 	.word	0x200004a0
 8002a90:	200002a0 	.word	0x200002a0
 8002a94:	20000340 	.word	0x20000340
 8002a98:	20000264 	.word	0x20000264
 8002a9c:	0800e630 	.word	0x0800e630
 8002aa0:	0800e63c 	.word	0x0800e63c
 8002aa4:	20000440 	.word	0x20000440

08002aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b09f      	sub	sp, #124	; 0x7c
 8002aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aae:	2440      	movs	r4, #64	; 0x40
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	2338      	movs	r3, #56	; 0x38
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f007 fa5e 	bl	8009f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002abe:	232c      	movs	r3, #44	; 0x2c
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	2314      	movs	r3, #20
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f007 fa56 	bl	8009f7a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	2328      	movs	r3, #40	; 0x28
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f007 fa4f 	bl	8009f7a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <SystemClock_Config+0xe4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <SystemClock_Config+0xe8>)
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <SystemClock_Config+0xe4>)
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	0109      	lsls	r1, r1, #4
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002aee:	0021      	movs	r1, r4
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2218      	movs	r2, #24
 8002af4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2201      	movs	r2, #1
 8002afa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2201      	movs	r2, #1
 8002b00:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	22a0      	movs	r2, #160	; 0xa0
 8002b0c:	0212      	lsls	r2, r2, #8
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2200      	movs	r2, #0
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f003 ff4d 	bl	80069b8 <HAL_RCC_OscConfig>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002b22:	f000 fc49 	bl	80033b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2100      	movs	r1, #0
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f004 fb04 	bl	8007158 <HAL_RCC_ClockConfig>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d001      	beq.n	8002b58 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002b54:	f000 fc30 	bl	80033b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2229      	movs	r2, #41	; 0x29
 8002b5c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	0292      	lsls	r2, r2, #10
 8002b70:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	0018      	movs	r0, r3
 8002b76:	f004 fcd3 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d001      	beq.n	8002b82 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002b7e:	f000 fc1b 	bl	80033b8 <Error_Handler>
  }
}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b01f      	add	sp, #124	; 0x7c
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	ffffe7ff 	.word	0xffffe7ff

08002b94 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	200f      	movs	r0, #15
 8002b9e:	f002 fe4b 	bl	8005838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ba2:	200f      	movs	r0, #15
 8002ba4:	f002 fe5d 	bl	8005862 <HAL_NVIC_EnableIRQ>
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bb6:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <MX_I2C1_Init+0x7c>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000609;
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <MX_I2C1_Init+0x80>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002bec:	0018      	movs	r0, r3
 8002bee:	f003 f8e5 	bl	8005dbc <HAL_I2C_Init>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bf6:	f000 fbdf 	bl	80033b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002c00:	0011      	movs	r1, r2
 8002c02:	0018      	movs	r0, r3
 8002c04:	f003 fe40 	bl	8006888 <HAL_I2CEx_ConfigAnalogFilter>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8002c0c:	f000 fbd4 	bl	80033b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <MX_I2C1_Init+0x78>)
 8002c12:	2100      	movs	r1, #0
 8002c14:	0018      	movs	r0, r3
 8002c16:	f003 fe83 	bl	8006920 <HAL_I2CEx_ConfigDigitalFilter>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8002c1e:	f000 fbcb 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200002a8 	.word	0x200002a8
 8002c2c:	40005400 	.word	0x40005400
 8002c30:	00000609 	.word	0x00000609

08002c34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	2314      	movs	r3, #20
 8002c40:	001a      	movs	r2, r3
 8002c42:	2100      	movs	r1, #0
 8002c44:	f007 f999 	bl	8009f7a <memset>
  RTC_DateTypeDef sDate = {0};
 8002c48:	003b      	movs	r3, r7
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002c4e:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c50:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <MX_RTC_Init+0xc4>)
 8002c52:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c54:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c5c:	227f      	movs	r2, #127	; 0x7f
 8002c5e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c60:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c78:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002c80:	0018      	movs	r0, r3
 8002c82:	f004 fdc1 	bl	8007808 <HAL_RTC_Init>
 8002c86:	1e03      	subs	r3, r0, #0
 8002c88:	d001      	beq.n	8002c8e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002c8a:	f000 fb95 	bl	80033b8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	2200      	movs	r2, #0
 8002c98:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002cac:	1d39      	adds	r1, r7, #4
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f004 fe46 	bl	8007944 <HAL_RTC_SetTime>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8002cbc:	f000 fb7c 	bl	80033b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8002cc0:	003b      	movs	r3, r7
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8002cc6:	003b      	movs	r3, r7
 8002cc8:	2212      	movs	r2, #18
 8002cca:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002ccc:	003b      	movs	r3, r7
 8002cce:	2201      	movs	r2, #1
 8002cd0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002cd2:	003b      	movs	r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002cd8:	0039      	movs	r1, r7
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_RTC_Init+0xc0>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f004 ff50 	bl	8007b84 <HAL_RTC_SetDate>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8002ce8:	f000 fb66 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b006      	add	sp, #24
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200003c0 	.word	0x200003c0
 8002cf8:	40002800 	.word	0x40002800

08002cfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <MX_SPI1_Init+0x6c>)
 8002d04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d08:	2282      	movs	r2, #130	; 0x82
 8002d0a:	0052      	lsls	r2, r2, #1
 8002d0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d20:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	02d2      	lsls	r2, r2, #11
 8002d2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d30:	2238      	movs	r2, #56	; 0x38
 8002d32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <MX_SPI1_Init+0x68>)
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f005 f8ac 	bl	8007eac <HAL_SPI_Init>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d001      	beq.n	8002d5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d58:	f000 fb2e 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	200003e8 	.word	0x200003e8
 8002d68:	40013000 	.word	0x40013000

08002d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	; 0x30
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d72:	2320      	movs	r3, #32
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	0018      	movs	r0, r3
 8002d78:	2310      	movs	r3, #16
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f007 f8fc 	bl	8009f7a <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002d82:	230c      	movs	r3, #12
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	0018      	movs	r0, r3
 8002d88:	2314      	movs	r3, #20
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f007 f8f4 	bl	8009f7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	0018      	movs	r0, r3
 8002d96:	2308      	movs	r3, #8
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f007 f8ed 	bl	8009f7a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	05d2      	lsls	r2, r2, #23
 8002da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002daa:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <MX_TIM2_Init+0xd8>)
 8002dac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <MX_TIM2_Init+0xdc>)
 8002db8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f005 fe18 	bl	80089fe <HAL_TIM_Base_Init>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002dd2:	f000 faf1 	bl	80033b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	0152      	lsls	r2, r2, #5
 8002dde:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002de0:	187a      	adds	r2, r7, r1
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f005 ff40 	bl	8008c6c <HAL_TIM_ConfigClockSource>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002df0:	f000 fae2 	bl	80033b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002df4:	210c      	movs	r1, #12
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002e02:	187a      	adds	r2, r7, r1
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f005 ffed 	bl	8008de8 <HAL_TIM_SlaveConfigSynchro>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002e12:	f000 fad1 	bl	80033b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e22:	1d3a      	adds	r2, r7, #4
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_TIM2_Init+0xd4>)
 8002e26:	0011      	movs	r1, r2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f006 f9c7 	bl	80091bc <HAL_TIMEx_MasterConfigSynchronization>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002e32:	f000 fac1 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b00c      	add	sp, #48	; 0x30
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	20000440 	.word	0x20000440
 8002e44:	00001b58 	.word	0x00001b58
 8002e48:	00000bb8 	.word	0x00000bb8

08002e4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <MX_USART1_UART_Init+0x5c>)
 8002e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e58:	22e1      	movs	r2, #225	; 0xe1
 8002e5a:	0252      	lsls	r2, r2, #9
 8002e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <MX_USART1_UART_Init+0x58>)
 8002e90:	0018      	movs	r0, r3
 8002e92:	f006 f9d7 	bl	8009244 <HAL_UART_Init>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d001      	beq.n	8002e9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e9a:	f000 fa8d 	bl	80033b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000340 	.word	0x20000340
 8002ea8:	40013800 	.word	0x40013800

08002eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b08b      	sub	sp, #44	; 0x2c
 8002eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb2:	2414      	movs	r4, #20
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	2314      	movs	r3, #20
 8002eba:	001a      	movs	r2, r3
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	f007 f85c 	bl	8009f7a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	4b56      	ldr	r3, [pc, #344]	; (800301c <MX_GPIO_Init+0x170>)
 8002ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec6:	4b55      	ldr	r3, [pc, #340]	; (800301c <MX_GPIO_Init+0x170>)
 8002ec8:	2104      	movs	r1, #4
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ece:	4b53      	ldr	r3, [pc, #332]	; (800301c <MX_GPIO_Init+0x170>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eda:	4b50      	ldr	r3, [pc, #320]	; (800301c <MX_GPIO_Init+0x170>)
 8002edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ede:	4b4f      	ldr	r3, [pc, #316]	; (800301c <MX_GPIO_Init+0x170>)
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee6:	4b4d      	ldr	r3, [pc, #308]	; (800301c <MX_GPIO_Init+0x170>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	4b4a      	ldr	r3, [pc, #296]	; (800301c <MX_GPIO_Init+0x170>)
 8002ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef6:	4b49      	ldr	r3, [pc, #292]	; (800301c <MX_GPIO_Init+0x170>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <MX_GPIO_Init+0x170>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	4b44      	ldr	r3, [pc, #272]	; (800301c <MX_GPIO_Init+0x170>)
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	4b43      	ldr	r3, [pc, #268]	; (800301c <MX_GPIO_Init+0x170>)
 8002f10:	2102      	movs	r1, #2
 8002f12:	430a      	orrs	r2, r1
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <MX_GPIO_Init+0x170>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 8002f22:	23a0      	movs	r3, #160	; 0xa0
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	2200      	movs	r2, #0
 8002f28:	2120      	movs	r1, #32
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f002 ff16 	bl	8005d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 8002f30:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <MX_GPIO_Init+0x174>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	2110      	movs	r1, #16
 8002f36:	0018      	movs	r0, r3
 8002f38:	f002 ff10 	bl	8005d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 8002f3c:	4b38      	ldr	r3, [pc, #224]	; (8003020 <MX_GPIO_Init+0x174>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2120      	movs	r1, #32
 8002f42:	0018      	movs	r0, r3
 8002f44:	f002 ff0a 	bl	8005d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8002f48:	4936      	ldr	r1, [pc, #216]	; (8003024 <MX_GPIO_Init+0x178>)
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <MX_GPIO_Init+0x17c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f002 ff04 	bl	8005d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	0192      	lsls	r2, r2, #6
 8002f5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <MX_GPIO_Init+0x180>)
 8002f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <MX_GPIO_Init+0x174>)
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	0010      	movs	r0, r2
 8002f70:	f002 fc94 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	220c      	movs	r2, #12
 8002f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	2203      	movs	r2, #3
 8002f8a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	2204      	movs	r2, #4
 8002f90:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	193a      	adds	r2, r7, r4
 8002f94:	23a0      	movs	r3, #160	; 0xa0
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f002 fc7e 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	2201      	movs	r2, #1
 8002faa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	193b      	adds	r3, r7, r4
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8002fb8:	193a      	adds	r2, r7, r4
 8002fba:	23a0      	movs	r3, #160	; 0xa0
 8002fbc:	05db      	lsls	r3, r3, #23
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f002 fc6b 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8002fc6:	0021      	movs	r1, r4
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2230      	movs	r2, #48	; 0x30
 8002fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe0:	000c      	movs	r4, r1
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <MX_GPIO_Init+0x174>)
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f002 fc57 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 8002fee:	0021      	movs	r1, r4
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <MX_GPIO_Init+0x178>)
 8002ff4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	187b      	adds	r3, r7, r1
 8003004:	2200      	movs	r2, #0
 8003006:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	187b      	adds	r3, r7, r1
 800300a:	4a07      	ldr	r2, [pc, #28]	; (8003028 <MX_GPIO_Init+0x17c>)
 800300c:	0019      	movs	r1, r3
 800300e:	0010      	movs	r0, r2
 8003010:	f002 fc44 	bl	800589c <HAL_GPIO_Init>

}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b00b      	add	sp, #44	; 0x2c
 800301a:	bd90      	pop	{r4, r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	50000800 	.word	0x50000800
 8003024:	00002001 	.word	0x00002001
 8003028:	50000400 	.word	0x50000400
 800302c:	10210000 	.word	0x10210000

08003030 <BME280_INIT>:
/* USER CODE BEGIN 4 */
/**
 * Initializes Bosch BME280 Temperature, Pressure, and Humidity Sensor
 */
static void BME280_INIT(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	/* Device Sampling, Filter, and Standby Time Settings */
	/* Recommended mode of operation: Indoor navigation */
	bme280_device_settings.osr_p = BME280_OVERSAMPLING_16X;		// Pressure
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <BME280_INIT+0xac>)
 8003036:	2205      	movs	r2, #5
 8003038:	701a      	strb	r2, [r3, #0]
	bme280_device_settings.osr_t = BME280_OVERSAMPLING_2X;		// Temperature
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <BME280_INIT+0xac>)
 800303c:	2202      	movs	r2, #2
 800303e:	705a      	strb	r2, [r3, #1]
	bme280_device_settings.osr_h = BME280_OVERSAMPLING_1X;		// Humidity
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <BME280_INIT+0xac>)
 8003042:	2201      	movs	r2, #1
 8003044:	709a      	strb	r2, [r3, #2]
	bme280_device_settings.filter = BME280_FILTER_COEFF_16;		// Filter
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <BME280_INIT+0xac>)
 8003048:	2204      	movs	r2, #4
 800304a:	70da      	strb	r2, [r3, #3]
	bme280_device_settings.standby_time = 0;					// Standby Time
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <BME280_INIT+0xac>)
 800304e:	2200      	movs	r2, #0
 8003050:	711a      	strb	r2, [r3, #4]
	bme280_device.dev_id = BME280_I2C_ADDR_SEC;					// I2C Address
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <BME280_INIT+0xb0>)
 8003054:	2277      	movs	r2, #119	; 0x77
 8003056:	705a      	strb	r2, [r3, #1]
	bme280_device.intf = BME280_I2C_INTF;						// I2C Mode
 8003058:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <BME280_INIT+0xb0>)
 800305a:	2201      	movs	r2, #1
 800305c:	709a      	strb	r2, [r3, #2]
	bme280_device.read = user_i2c_read;							// Read Function Ptr
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <BME280_INIT+0xb0>)
 8003060:	4a20      	ldr	r2, [pc, #128]	; (80030e4 <BME280_INIT+0xb4>)
 8003062:	605a      	str	r2, [r3, #4]
	bme280_device.write = user_i2c_write;						// Write Function Ptr
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <BME280_INIT+0xb0>)
 8003066:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <BME280_INIT+0xb8>)
 8003068:	609a      	str	r2, [r3, #8]
	bme280_device.delay_ms = user_delay_ms;						// Delay Function Ptr
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <BME280_INIT+0xb0>)
 800306c:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <BME280_INIT+0xbc>)
 800306e:	60da      	str	r2, [r3, #12]
	bme280_device.settings = bme280_device_settings;			// Device Settings set above
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <BME280_INIT+0xb0>)
 8003072:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <BME280_INIT+0xac>)
 8003074:	3338      	adds	r3, #56	; 0x38
 8003076:	0011      	movs	r1, r2
 8003078:	2205      	movs	r2, #5
 800307a:	0018      	movs	r0, r3
 800307c:	f006 ff74 	bl	8009f68 <memcpy>
	bme280_init_rslt |= bme280_init(&bme280_device);					// Initizialize Device
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <BME280_INIT+0xb0>)
 8003082:	0018      	movs	r0, r3
 8003084:	f000 fed7 	bl	8003e36 <bme280_init>
 8003088:	0003      	movs	r3, r0
 800308a:	001a      	movs	r2, r3
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <BME280_INIT+0xc0>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b25b      	sxtb	r3, r3
 8003092:	4313      	orrs	r3, r2
 8003094:	b25a      	sxtb	r2, r3
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <BME280_INIT+0xc0>)
 8003098:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_settings(bme280_settings_sel, &bme280_device); // Apply Settings
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <BME280_INIT+0xc4>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4a10      	ldr	r2, [pc, #64]	; (80030e0 <BME280_INIT+0xb0>)
 80030a0:	0011      	movs	r1, r2
 80030a2:	0018      	movs	r0, r3
 80030a4:	f001 f813 	bl	80040ce <bme280_set_sensor_settings>
 80030a8:	0003      	movs	r3, r0
 80030aa:	001a      	movs	r2, r3
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <BME280_INIT+0xc0>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b25a      	sxtb	r2, r3
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <BME280_INIT+0xc0>)
 80030b8:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, &bme280_device); // Set to sleep mode
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <BME280_INIT+0xb0>)
 80030bc:	0019      	movs	r1, r3
 80030be:	2000      	movs	r0, #0
 80030c0:	f001 f874 	bl	80041ac <bme280_set_sensor_mode>
 80030c4:	0003      	movs	r3, r0
 80030c6:	001a      	movs	r2, r3
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <BME280_INIT+0xc0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <BME280_INIT+0xc0>)
 80030d4:	701a      	strb	r2, [r3, #0]
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	2000047c 	.word	0x2000047c
 80030e0:	20000300 	.word	0x20000300
 80030e4:	08003111 	.word	0x08003111
 80030e8:	080031c1 	.word	0x080031c1
 80030ec:	080030f9 	.word	0x080030f9
 80030f0:	20000268 	.word	0x20000268
 80030f4:	20000000 	.word	0x20000000

080030f8 <user_delay_ms>:
 *	After a number of milliseconds have passed, we
 *	return control.
 * 	@param[in] milliseconds : How much to delay by in milliseconds.
 */
void user_delay_ms(uint32_t milliseconds)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0018      	movs	r0, r3
 8003104:	f002 fab4 	bl	8005670 <HAL_Delay>
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <user_i2c_read>:
 *	0xFD - Humidity_MSB - 8 bits - Bits[15:8]
 *	0xFE - Humidity_LSB - 8 bits - Bits[7:0]
 *	See BME280 Datasheet Page 27 for more info
 */
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af04      	add	r7, sp, #16
 8003116:	0004      	movs	r4, r0
 8003118:	0008      	movs	r0, r1
 800311a:	603a      	str	r2, [r7, #0]
 800311c:	0019      	movs	r1, r3
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	1c22      	adds	r2, r4, #0
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	1dbb      	adds	r3, r7, #6
 8003126:	1c02      	adds	r2, r0, #0
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	1c0a      	adds	r2, r1, #0
 800312e:	801a      	strh	r2, [r3, #0]
	 * | Read       | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003130:	230d      	movs	r3, #13
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
	uint16_t read_mode = dev_id;
 8003138:	230e      	movs	r3, #14
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	1dfa      	adds	r2, r7, #7
 800313e:	7812      	ldrb	r2, [r2, #0]
 8003140:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a read bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b76      	cmp	r3, #118	; 0x76
 8003148:	d003      	beq.n	8003152 <user_i2c_read+0x42>
 800314a:	1dfb      	adds	r3, r7, #7
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b77      	cmp	r3, #119	; 0x77
 8003150:	d109      	bne.n	8003166 <user_i2c_read+0x56>
	{
		read_mode = (dev_id << 1) | 1;
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	b21b      	sxth	r3, r3
 800315a:	2201      	movs	r2, #1
 800315c:	4313      	orrs	r3, r2
 800315e:	b21a      	sxth	r2, r3
 8003160:	230e      	movs	r3, #14
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	801a      	strh	r2, [r3, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <user_i2c_read+0xac>)
 8003168:	0018      	movs	r0, r3
 800316a:	f002 fe27 	bl	8005dbc <HAL_I2C_Init>
	rslt |= HAL_I2C_Mem_Read(&hi2c1, read_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 800316e:	1dbb      	adds	r3, r7, #6
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b29a      	uxth	r2, r3
 8003174:	23fa      	movs	r3, #250	; 0xfa
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	001c      	movs	r4, r3
 800317a:	230e      	movs	r3, #14
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	8819      	ldrh	r1, [r3, #0]
 8003180:	480e      	ldr	r0, [pc, #56]	; (80031bc <user_i2c_read+0xac>)
 8003182:	9402      	str	r4, [sp, #8]
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2301      	movs	r3, #1
 8003190:	f003 f808 	bl	80061a4 <HAL_I2C_Mem_Read>
 8003194:	0003      	movs	r3, r0
 8003196:	b259      	sxtb	r1, r3
 8003198:	240d      	movs	r4, #13
 800319a:	193b      	adds	r3, r7, r4
 800319c:	193a      	adds	r2, r7, r4
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <user_i2c_read+0xac>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	f002 fe9e 	bl	8005ee8 <HAL_I2C_DeInit>
	return rslt;
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b25b      	sxtb	r3, r3
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b005      	add	sp, #20
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	200002a8 	.word	0x200002a8

080031c0 <user_i2c_write>:
 * 	@param[in] reg_addr : Register address of what we want to read in from the BME280.
 * 	@param[in] reg_data : Data we're writing to the register
 * 	@param[in] len : Amount of registers to write to
 */
int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af04      	add	r7, sp, #16
 80031c6:	0004      	movs	r4, r0
 80031c8:	0008      	movs	r0, r1
 80031ca:	603a      	str	r2, [r7, #0]
 80031cc:	0019      	movs	r1, r3
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	1c22      	adds	r2, r4, #0
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	1dbb      	adds	r3, r7, #6
 80031d6:	1c02      	adds	r2, r0, #0
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	1c0a      	adds	r2, r1, #0
 80031de:	801a      	strh	r2, [r3, #0]
	 * | Write      | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80031e0:	230d      	movs	r3, #13
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
	uint16_t write_mode = dev_id;
 80031e8:	230e      	movs	r3, #14
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	1dfa      	adds	r2, r7, #7
 80031ee:	7812      	ldrb	r2, [r2, #0]
 80031f0:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a write bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b76      	cmp	r3, #118	; 0x76
 80031f8:	d003      	beq.n	8003202 <user_i2c_write+0x42>
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b77      	cmp	r3, #119	; 0x77
 8003200:	d106      	bne.n	8003210 <user_i2c_write+0x50>
	{
		write_mode = (dev_id << 1) | 0;
 8003202:	1dfb      	adds	r3, r7, #7
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	220e      	movs	r2, #14
 800320a:	18ba      	adds	r2, r7, r2
 800320c:	18db      	adds	r3, r3, r3
 800320e:	8013      	strh	r3, [r2, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <user_i2c_write+0xa0>)
 8003212:	0018      	movs	r0, r3
 8003214:	f002 fdd2 	bl	8005dbc <HAL_I2C_Init>
	rslt = HAL_I2C_Mem_Write(&hi2c1, write_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 8003218:	1dbb      	adds	r3, r7, #6
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b29a      	uxth	r2, r3
 800321e:	23fa      	movs	r3, #250	; 0xfa
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	001c      	movs	r4, r3
 8003224:	230e      	movs	r3, #14
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	8819      	ldrh	r1, [r3, #0]
 800322a:	480d      	ldr	r0, [pc, #52]	; (8003260 <user_i2c_write+0xa0>)
 800322c:	9402      	str	r4, [sp, #8]
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2301      	movs	r3, #1
 800323a:	f002 fe85 	bl	8005f48 <HAL_I2C_Mem_Write>
 800323e:	0003      	movs	r3, r0
 8003240:	001a      	movs	r2, r3
 8003242:	240d      	movs	r4, #13
 8003244:	193b      	adds	r3, r7, r4
 8003246:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <user_i2c_write+0xa0>)
 800324a:	0018      	movs	r0, r3
 800324c:	f002 fe4c 	bl	8005ee8 <HAL_I2C_DeInit>
	return rslt;
 8003250:	193b      	adds	r3, r7, r4
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b25b      	sxtb	r3, r3
}
 8003256:	0018      	movs	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	b005      	add	sp, #20
 800325c:	bd90      	pop	{r4, r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	200002a8 	.word	0x200002a8

08003264 <wifi_get_timestamp>:


void wifi_get_timestamp()
{
 8003264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003266:	b0b1      	sub	sp, #196	; 0xc4
 8003268:	af00      	add	r7, sp, #0
	char start[] = "AT+CIPSTART=\"TCP\",\"weatherbox.azurewebsites.net\",80\r\n";
 800326a:	2484      	movs	r4, #132	; 0x84
 800326c:	193a      	adds	r2, r7, r4
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <wifi_get_timestamp+0x134>)
 8003270:	0010      	movs	r0, r2
 8003272:	0019      	movs	r1, r3
 8003274:	2336      	movs	r3, #54	; 0x36
 8003276:	001a      	movs	r2, r3
 8003278:	f006 fe76 	bl	8009f68 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t *) start, strlen(start), 500);
 800327c:	193b      	adds	r3, r7, r4
 800327e:	0018      	movs	r0, r3
 8003280:	f7fc ff42 	bl	8000108 <strlen>
 8003284:	0003      	movs	r3, r0
 8003286:	b29a      	uxth	r2, r3
 8003288:	23fa      	movs	r3, #250	; 0xfa
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	1939      	adds	r1, r7, r4
 800328e:	4843      	ldr	r0, [pc, #268]	; (800339c <wifi_get_timestamp+0x138>)
 8003290:	f006 f82c 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(2000);
 8003294:	23fa      	movs	r3, #250	; 0xfa
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	0018      	movs	r0, r3
 800329a:	f002 f9e9 	bl	8005670 <HAL_Delay>
	char send[] = "AT+CIPSEND=";
 800329e:	2578      	movs	r5, #120	; 0x78
 80032a0:	197b      	adds	r3, r7, r5
 80032a2:	4a3f      	ldr	r2, [pc, #252]	; (80033a0 <wifi_get_timestamp+0x13c>)
 80032a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032a6:	c313      	stmia	r3!, {r0, r1, r4}
	char recv[] = "AT+CIPRECVDATA=1000\r\n";
 80032a8:	2360      	movs	r3, #96	; 0x60
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <wifi_get_timestamp+0x140>)
 80032ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032b0:	c313      	stmia	r3!, {r0, r1, r4}
 80032b2:	ca03      	ldmia	r2!, {r0, r1}
 80032b4:	c303      	stmia	r3!, {r0, r1}
 80032b6:	8812      	ldrh	r2, [r2, #0]
 80032b8:	801a      	strh	r2, [r3, #0]
	char ret[] = "\r\n";
 80032ba:	265c      	movs	r6, #92	; 0x5c
 80032bc:	19bb      	adds	r3, r7, r6
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <wifi_get_timestamp+0x144>)
 80032c0:	8811      	ldrh	r1, [r2, #0]
 80032c2:	8019      	strh	r1, [r3, #0]
 80032c4:	7892      	ldrb	r2, [r2, #2]
 80032c6:	709a      	strb	r2, [r3, #2]
	char get[] = "GET /timestamp HTTP/1.1\r\nAccept: \"*/*\"\r\nHost: weatherbox.azurewebsites.net\r\n\r\n";
 80032c8:	240c      	movs	r4, #12
 80032ca:	193a      	adds	r2, r7, r4
 80032cc:	4b37      	ldr	r3, [pc, #220]	; (80033ac <wifi_get_timestamp+0x148>)
 80032ce:	0010      	movs	r0, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	234f      	movs	r3, #79	; 0x4f
 80032d4:	001a      	movs	r2, r3
 80032d6:	f006 fe47 	bl	8009f68 <memcpy>
	int get_size = (int)(strlen(get));
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fc ff13 	bl	8000108 <strlen>
 80032e2:	0003      	movs	r3, r0
 80032e4:	22bc      	movs	r2, #188	; 0xbc
 80032e6:	18b9      	adds	r1, r7, r2
 80032e8:	600b      	str	r3, [r1, #0]
	char get_str[sizeof(get_size)];
	sprintf(get_str, "%u", get_size);
 80032ea:	18bb      	adds	r3, r7, r2
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4930      	ldr	r1, [pc, #192]	; (80033b0 <wifi_get_timestamp+0x14c>)
 80032f0:	2308      	movs	r3, #8
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	0018      	movs	r0, r3
 80032f6:	f007 fdab 	bl	800ae50 <siprintf>
	char *receiveBuffer0 = calloc(1000, sizeof(char));
 80032fa:	23fa      	movs	r3, #250	; 0xfa
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	2101      	movs	r1, #1
 8003300:	0018      	movs	r0, r3
 8003302:	f006 fdfd 	bl	8009f00 <calloc>
 8003306:	0003      	movs	r3, r0
 8003308:	607b      	str	r3, [r7, #4]


	// Send Command with size of message
	HAL_UART_Transmit(&huart1, (uint8_t *) send, strlen(send), 500);
 800330a:	197b      	adds	r3, r7, r5
 800330c:	0018      	movs	r0, r3
 800330e:	f7fc fefb 	bl	8000108 <strlen>
 8003312:	0003      	movs	r3, r0
 8003314:	b29a      	uxth	r2, r3
 8003316:	23fa      	movs	r3, #250	; 0xfa
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	1979      	adds	r1, r7, r5
 800331c:	481f      	ldr	r0, [pc, #124]	; (800339c <wifi_get_timestamp+0x138>)
 800331e:	f005 ffe5 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) get_str, strlen(get_str), 500);
 8003322:	2308      	movs	r3, #8
 8003324:	001d      	movs	r5, r3
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	0018      	movs	r0, r3
 800332a:	f7fc feed 	bl	8000108 <strlen>
 800332e:	0003      	movs	r3, r0
 8003330:	b29a      	uxth	r2, r3
 8003332:	23fa      	movs	r3, #250	; 0xfa
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	1979      	adds	r1, r7, r5
 8003338:	4818      	ldr	r0, [pc, #96]	; (800339c <wifi_get_timestamp+0x138>)
 800333a:	f005 ffd7 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 800333e:	19bb      	adds	r3, r7, r6
 8003340:	0018      	movs	r0, r3
 8003342:	f7fc fee1 	bl	8000108 <strlen>
 8003346:	0003      	movs	r3, r0
 8003348:	b29a      	uxth	r2, r3
 800334a:	23fa      	movs	r3, #250	; 0xfa
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	19b9      	adds	r1, r7, r6
 8003350:	4812      	ldr	r0, [pc, #72]	; (800339c <wifi_get_timestamp+0x138>)
 8003352:	f005 ffcb 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003356:	23fa      	movs	r3, #250	; 0xfa
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	0018      	movs	r0, r3
 800335c:	f002 f988 	bl	8005670 <HAL_Delay>

	//Sending GET message
	HAL_UART_Transmit(&huart1, (uint8_t *) get, strlen(get), 500);
 8003360:	193b      	adds	r3, r7, r4
 8003362:	0018      	movs	r0, r3
 8003364:	f7fc fed0 	bl	8000108 <strlen>
 8003368:	0003      	movs	r3, r0
 800336a:	b29a      	uxth	r2, r3
 800336c:	23fa      	movs	r3, #250	; 0xfa
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	1939      	adds	r1, r7, r4
 8003372:	480a      	ldr	r0, [pc, #40]	; (800339c <wifi_get_timestamp+0x138>)
 8003374:	f005 ffba 	bl	80092ec <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
//	HAL_UART_Transmit(&huart1, (uint8_t *) recv, strlen(recv), 500);
	HAL_UART_Receive(&huart1, &receiveBuffer0, strlen(receiveBuffer0), 5000);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	0018      	movs	r0, r3
 800337c:	f7fc fec4 	bl	8000108 <strlen>
 8003380:	0003      	movs	r3, r0
 8003382:	b29a      	uxth	r2, r3
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <wifi_get_timestamp+0x150>)
 8003386:	1d39      	adds	r1, r7, #4
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <wifi_get_timestamp+0x138>)
 800338a:	f006 f857 	bl	800943c <HAL_UART_Receive>
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b031      	add	sp, #196	; 0xc4
 8003394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	0800e64c 	.word	0x0800e64c
 800339c:	20000340 	.word	0x20000340
 80033a0:	0800e684 	.word	0x0800e684
 80033a4:	0800e690 	.word	0x0800e690
 80033a8:	0800e6a8 	.word	0x0800e6a8
 80033ac:	0800e6ac 	.word	0x0800e6ac
 80033b0:	0800e648 	.word	0x0800e648
 80033b4:	00001388 	.word	0x00001388

080033b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_MspInit+0x40>)
 80033ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_MspInit+0x40>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_MspInit+0x40>)
 80033d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_MspInit+0x40>)
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	0549      	lsls	r1, r1, #21
 80033de:	430a      	orrs	r2, r1
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 80033e2:	2305      	movs	r3, #5
 80033e4:	425b      	negs	r3, r3
 80033e6:	2200      	movs	r2, #0
 80033e8:	2101      	movs	r1, #1
 80033ea:	0018      	movs	r0, r3
 80033ec:	f002 fa24 	bl	8005838 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80033f0:	2302      	movs	r3, #2
 80033f2:	425b      	negs	r3, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	2101      	movs	r1, #1
 80033f8:	0018      	movs	r0, r3
 80033fa:	f002 fa1d 	bl	8005838 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	230c      	movs	r3, #12
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	0018      	movs	r0, r3
 8003416:	2314      	movs	r3, #20
 8003418:	001a      	movs	r2, r3
 800341a:	2100      	movs	r1, #0
 800341c:	f006 fdad 	bl	8009f7a <memset>
  if(hi2c->Instance==I2C1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_I2C_MspInit+0x80>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12a      	bne.n	8003480 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_I2C_MspInit+0x84>)
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <HAL_I2C_MspInit+0x84>)
 8003430:	2101      	movs	r1, #1
 8003432:	430a      	orrs	r2, r1
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_I2C_MspInit+0x84>)
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003442:	210c      	movs	r1, #12
 8003444:	187b      	adds	r3, r7, r1
 8003446:	22c0      	movs	r2, #192	; 0xc0
 8003448:	00d2      	lsls	r2, r2, #3
 800344a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800344c:	187b      	adds	r3, r7, r1
 800344e:	2212      	movs	r2, #18
 8003450:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003452:	187b      	adds	r3, r7, r1
 8003454:	2201      	movs	r2, #1
 8003456:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	187b      	adds	r3, r7, r1
 800345a:	2203      	movs	r2, #3
 800345c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2206      	movs	r2, #6
 8003462:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	187a      	adds	r2, r7, r1
 8003466:	23a0      	movs	r3, #160	; 0xa0
 8003468:	05db      	lsls	r3, r3, #23
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f002 fa15 	bl	800589c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_I2C_MspInit+0x84>)
 8003474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_I2C_MspInit+0x84>)
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	0389      	lsls	r1, r1, #14
 800347c:	430a      	orrs	r2, r1
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b008      	add	sp, #32
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40005400 	.word	0x40005400
 800348c:	40021000 	.word	0x40021000

08003490 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <HAL_I2C_MspDeInit+0x38>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10d      	bne.n	80034be <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_I2C_MspDeInit+0x3c>)
 80034a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_I2C_MspDeInit+0x3c>)
 80034a8:	4909      	ldr	r1, [pc, #36]	; (80034d0 <HAL_I2C_MspDeInit+0x40>)
 80034aa:	400a      	ands	r2, r1
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80034ae:	23c0      	movs	r3, #192	; 0xc0
 80034b0:	00da      	lsls	r2, r3, #3
 80034b2:	23a0      	movs	r3, #160	; 0xa0
 80034b4:	05db      	lsls	r3, r3, #23
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f002 fb6d 	bl	8005b98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b002      	add	sp, #8
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	40005400 	.word	0x40005400
 80034cc:	40021000 	.word	0x40021000
 80034d0:	ffdfffff 	.word	0xffdfffff

080034d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a06      	ldr	r2, [pc, #24]	; (80034fc <HAL_RTC_MspInit+0x28>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d106      	bne.n	80034f4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RTC_MspInit+0x2c>)
 80034e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RTC_MspInit+0x2c>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	02c9      	lsls	r1, r1, #11
 80034f0:	430a      	orrs	r2, r1
 80034f2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40002800 	.word	0x40002800
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b08b      	sub	sp, #44	; 0x2c
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	2314      	movs	r3, #20
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	0018      	movs	r0, r3
 8003512:	2314      	movs	r3, #20
 8003514:	001a      	movs	r2, r3
 8003516:	2100      	movs	r1, #0
 8003518:	f006 fd2f 	bl	8009f7a <memset>
  if(hspi->Instance==SPI1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <HAL_SPI_MspInit+0xc4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d14b      	bne.n	80035be <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 8003528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0149      	lsls	r1, r1, #5
 8003530:	430a      	orrs	r2, r1
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354c:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 8003552:	2102      	movs	r1, #2
 8003554:	430a      	orrs	r2, r1
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
 8003558:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_SPI_MspInit+0xc8>)
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	2202      	movs	r2, #2
 800355e:	4013      	ands	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003564:	2414      	movs	r4, #20
 8003566:	193b      	adds	r3, r7, r4
 8003568:	22d0      	movs	r2, #208	; 0xd0
 800356a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	193b      	adds	r3, r7, r4
 800356e:	2202      	movs	r2, #2
 8003570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	193b      	adds	r3, r7, r4
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	193b      	adds	r3, r7, r4
 800357a:	2203      	movs	r2, #3
 800357c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800357e:	193b      	adds	r3, r7, r4
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003584:	193a      	adds	r2, r7, r4
 8003586:	23a0      	movs	r3, #160	; 0xa0
 8003588:	05db      	lsls	r3, r3, #23
 800358a:	0011      	movs	r1, r2
 800358c:	0018      	movs	r0, r3
 800358e:	f002 f985 	bl	800589c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8003592:	0021      	movs	r1, r4
 8003594:	187b      	adds	r3, r7, r1
 8003596:	2208      	movs	r2, #8
 8003598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	187b      	adds	r3, r7, r1
 800359c:	2202      	movs	r2, #2
 800359e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	2203      	movs	r2, #3
 80035aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <HAL_SPI_MspInit+0xcc>)
 80035b6:	0019      	movs	r1, r3
 80035b8:	0010      	movs	r0, r2
 80035ba:	f002 f96f 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b00b      	add	sp, #44	; 0x2c
 80035c4:	bd90      	pop	{r4, r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	40013000 	.word	0x40013000
 80035cc:	40021000 	.word	0x40021000
 80035d0:	50000400 	.word	0x50000400

080035d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	05db      	lsls	r3, r3, #23
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d105      	bne.n	80035f4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <HAL_TIM_Base_MspInit+0x28>)
 80035ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_TIM_Base_MspInit+0x28>)
 80035ee:	2101      	movs	r1, #1
 80035f0:	430a      	orrs	r2, r1
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	230c      	movs	r3, #12
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	0018      	movs	r0, r3
 800360e:	2314      	movs	r3, #20
 8003610:	001a      	movs	r2, r3
 8003612:	2100      	movs	r1, #0
 8003614:	f006 fcb1 	bl	8009f7a <memset>
  if(huart->Instance==USART1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_UART_MspInit+0x7c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d128      	bne.n	8003674 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_UART_MspInit+0x80>)
 8003624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_UART_MspInit+0x80>)
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	01c9      	lsls	r1, r1, #7
 800362c:	430a      	orrs	r2, r1
 800362e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <HAL_UART_MspInit+0x80>)
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_UART_MspInit+0x80>)
 8003636:	2102      	movs	r1, #2
 8003638:	430a      	orrs	r2, r1
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_UART_MspInit+0x80>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	2202      	movs	r2, #2
 8003642:	4013      	ands	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003648:	210c      	movs	r1, #12
 800364a:	187b      	adds	r3, r7, r1
 800364c:	22c0      	movs	r2, #192	; 0xc0
 800364e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2202      	movs	r2, #2
 8003654:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365c:	187b      	adds	r3, r7, r1
 800365e:	2203      	movs	r2, #3
 8003660:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003662:	187b      	adds	r3, r7, r1
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003668:	187b      	adds	r3, r7, r1
 800366a:	4a06      	ldr	r2, [pc, #24]	; (8003684 <HAL_UART_MspInit+0x84>)
 800366c:	0019      	movs	r1, r3
 800366e:	0010      	movs	r0, r2
 8003670:	f002 f914 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b008      	add	sp, #32
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40013800 	.word	0x40013800
 8003680:	40021000 	.word	0x40021000
 8003684:	50000400 	.word	0x50000400

08003688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003696:	e7fe      	b.n	8003696 <HardFault_Handler+0x4>

08003698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 80036b0:	f001 ffc8 	bl	8005644 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036be:	46ce      	mov	lr, r9
 80036c0:	4647      	mov	r7, r8
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b0ef      	sub	sp, #444	; 0x1bc
 80036c6:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed_digital = 0;
 80036c8:	238b      	movs	r3, #139	; 0x8b
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	2210      	movs	r2, #16
 80036ce:	4694      	mov	ip, r2
 80036d0:	44bc      	add	ip, r7
 80036d2:	4463      	add	r3, ip
 80036d4:	2200      	movs	r2, #0
 80036d6:	801a      	strh	r2, [r3, #0]
  uint16_t wind_temp_digital = 0;
 80036d8:	238a      	movs	r3, #138	; 0x8a
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2210      	movs	r2, #16
 80036de:	4694      	mov	ip, r2
 80036e0:	44bc      	add	ip, r7
 80036e2:	4463      	add	r3, ip
 80036e4:	2200      	movs	r2, #0
 80036e6:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch2 = 0;
 80036e8:	2389      	movs	r3, #137	; 0x89
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2210      	movs	r2, #16
 80036ee:	4694      	mov	ip, r2
 80036f0:	44bc      	add	ip, r7
 80036f2:	4463      	add	r3, ip
 80036f4:	2200      	movs	r2, #0
 80036f6:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch3 = 0;
 80036f8:	2388      	movs	r3, #136	; 0x88
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2210      	movs	r2, #16
 80036fe:	4694      	mov	ip, r2
 8003700:	44bc      	add	ip, r7
 8003702:	4463      	add	r3, ip
 8003704:	2200      	movs	r2, #0
 8003706:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch4 = 0;
 8003708:	2387      	movs	r3, #135	; 0x87
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2210      	movs	r2, #16
 800370e:	4694      	mov	ip, r2
 8003710:	44bc      	add	ip, r7
 8003712:	4463      	add	r3, ip
 8003714:	2200      	movs	r2, #0
 8003716:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch5 = 0;
 8003718:	2386      	movs	r3, #134	; 0x86
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2210      	movs	r2, #16
 800371e:	4694      	mov	ip, r2
 8003720:	44bc      	add	ip, r7
 8003722:	4463      	add	r3, ip
 8003724:	2200      	movs	r2, #0
 8003726:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch6 = 0;
 8003728:	2385      	movs	r3, #133	; 0x85
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2210      	movs	r2, #16
 800372e:	4694      	mov	ip, r2
 8003730:	44bc      	add	ip, r7
 8003732:	4463      	add	r3, ip
 8003734:	2200      	movs	r2, #0
 8003736:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch7 = 0;
 8003738:	2384      	movs	r3, #132	; 0x84
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2210      	movs	r2, #16
 800373e:	4694      	mov	ip, r2
 8003740:	44bc      	add	ip, r7
 8003742:	4463      	add	r3, ip
 8003744:	2200      	movs	r2, #0
 8003746:	801a      	strh	r2, [r3, #0]
  float bme280_pressure = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	2296      	movs	r2, #150	; 0x96
 800374c:	0052      	lsls	r2, r2, #1
 800374e:	2110      	movs	r1, #16
 8003750:	468c      	mov	ip, r1
 8003752:	44bc      	add	ip, r7
 8003754:	4462      	add	r2, ip
 8003756:	6013      	str	r3, [r2, #0]
  float bme280_temperature = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	2294      	movs	r2, #148	; 0x94
 800375c:	0052      	lsls	r2, r2, #1
 800375e:	2110      	movs	r1, #16
 8003760:	468c      	mov	ip, r1
 8003762:	44bc      	add	ip, r7
 8003764:	4462      	add	r2, ip
 8003766:	6013      	str	r3, [r2, #0]
  float bme280_humidity = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	2292      	movs	r2, #146	; 0x92
 800376c:	0052      	lsls	r2, r2, #1
 800376e:	2110      	movs	r1, #16
 8003770:	468c      	mov	ip, r1
 8003772:	44bc      	add	ip, r7
 8003774:	4462      	add	r2, ip
 8003776:	6013      	str	r3, [r2, #0]
  float md_wind_speed = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	228a      	movs	r2, #138	; 0x8a
 800377c:	0052      	lsls	r2, r2, #1
 800377e:	18ba      	adds	r2, r7, r2
 8003780:	6013      	str	r3, [r2, #0]
  float md_temp = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	2288      	movs	r2, #136	; 0x88
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	18ba      	adds	r2, r7, r2
 800378a:	6013      	str	r3, [r2, #0]
  uint64_t timestamp = time(NULL);
 800378c:	2000      	movs	r0, #0
 800378e:	f007 fb7f 	bl	800ae90 <time>
 8003792:	0003      	movs	r3, r0
 8003794:	000c      	movs	r4, r1
 8003796:	228c      	movs	r2, #140	; 0x8c
 8003798:	0052      	lsls	r2, r2, #1
 800379a:	2110      	movs	r1, #16
 800379c:	468c      	mov	ip, r1
 800379e:	44bc      	add	ip, r7
 80037a0:	4462      	add	r2, ip
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	6054      	str	r4, [r2, #4]
  char data[250];

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037a6:	4b85      	ldr	r3, [pc, #532]	; (80039bc <TIM2_IRQHandler+0x300>)
 80037a8:	0018      	movs	r0, r3
 80037aa:	f005 f976 	bl	8008a9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Toggle_User_LED();
 80037ae:	f000 f91f 	bl	80039f0 <Toggle_User_LED>
  if (bme280_init_complete == 0)
 80037b2:	4b83      	ldr	r3, [pc, #524]	; (80039c0 <TIM2_IRQHandler+0x304>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d100      	bne.n	80037bc <TIM2_IRQHandler+0x100>
 80037ba:	e0f7      	b.n	80039ac <TIM2_IRQHandler+0x2f0>
  {
	  return;
  }

  /* Read ADC Wind Speed Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_SPEED_CH, &wind_speed_digital);
 80037bc:	248b      	movs	r4, #139	; 0x8b
 80037be:	0064      	lsls	r4, r4, #1
 80037c0:	2610      	movs	r6, #16
 80037c2:	19bb      	adds	r3, r7, r6
 80037c4:	191b      	adds	r3, r3, r4
 80037c6:	0019      	movs	r1, r3
 80037c8:	2080      	movs	r0, #128	; 0x80
 80037ca:	f000 f93f 	bl	8003a4c <Read_ADC>

  /* Read ADC Wind Temp Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_TEMP_CH, &wind_temp_digital);
 80037ce:	258a      	movs	r5, #138	; 0x8a
 80037d0:	006d      	lsls	r5, r5, #1
 80037d2:	19bb      	adds	r3, r7, r6
 80037d4:	195b      	adds	r3, r3, r5
 80037d6:	0019      	movs	r1, r3
 80037d8:	2090      	movs	r0, #144	; 0x90
 80037da:	f000 f937 	bl	8003a4c <Read_ADC>

  Read_ADC((uint8_t) ADC_DIN_CH2, &din_ch2);
 80037de:	2389      	movs	r3, #137	; 0x89
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2210      	movs	r2, #16
 80037e4:	4694      	mov	ip, r2
 80037e6:	44bc      	add	ip, r7
 80037e8:	4463      	add	r3, ip
 80037ea:	0019      	movs	r1, r3
 80037ec:	20a0      	movs	r0, #160	; 0xa0
 80037ee:	f000 f92d 	bl	8003a4c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH3, &din_ch3);
 80037f2:	2388      	movs	r3, #136	; 0x88
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2210      	movs	r2, #16
 80037f8:	4694      	mov	ip, r2
 80037fa:	44bc      	add	ip, r7
 80037fc:	4463      	add	r3, ip
 80037fe:	0019      	movs	r1, r3
 8003800:	20b0      	movs	r0, #176	; 0xb0
 8003802:	f000 f923 	bl	8003a4c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH4, &din_ch4);
 8003806:	2387      	movs	r3, #135	; 0x87
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2210      	movs	r2, #16
 800380c:	4694      	mov	ip, r2
 800380e:	44bc      	add	ip, r7
 8003810:	4463      	add	r3, ip
 8003812:	0019      	movs	r1, r3
 8003814:	20c0      	movs	r0, #192	; 0xc0
 8003816:	f000 f919 	bl	8003a4c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH5, &din_ch5);
 800381a:	2386      	movs	r3, #134	; 0x86
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2210      	movs	r2, #16
 8003820:	4694      	mov	ip, r2
 8003822:	44bc      	add	ip, r7
 8003824:	4463      	add	r3, ip
 8003826:	0019      	movs	r1, r3
 8003828:	20d0      	movs	r0, #208	; 0xd0
 800382a:	f000 f90f 	bl	8003a4c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH6, &din_ch6);
 800382e:	2385      	movs	r3, #133	; 0x85
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2210      	movs	r2, #16
 8003834:	4694      	mov	ip, r2
 8003836:	44bc      	add	ip, r7
 8003838:	4463      	add	r3, ip
 800383a:	0019      	movs	r1, r3
 800383c:	20e0      	movs	r0, #224	; 0xe0
 800383e:	f000 f905 	bl	8003a4c <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH7, &din_ch7);
 8003842:	2384      	movs	r3, #132	; 0x84
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2210      	movs	r2, #16
 8003848:	4694      	mov	ip, r2
 800384a:	44bc      	add	ip, r7
 800384c:	4463      	add	r3, ip
 800384e:	0019      	movs	r1, r3
 8003850:	20f0      	movs	r0, #240	; 0xf0
 8003852:	f000 f8fb 	bl	8003a4c <Read_ADC>

  /* Data is output to comp_data */
  bme280_read_data_forced_mode(&bme280_device);
 8003856:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <TIM2_IRQHandler+0x308>)
 8003858:	0018      	movs	r0, r3
 800385a:	f000 fa19 	bl	8003c90 <bme280_read_data_forced_mode>

  /* Calculations Done Here */
  // TODO: Double check later if this is properly compensated
  calculate_wind_speed(wind_speed_digital, wind_temp_digital, &md_wind_speed, &md_temp);
 800385e:	19bb      	adds	r3, r7, r6
 8003860:	191b      	adds	r3, r3, r4
 8003862:	8818      	ldrh	r0, [r3, #0]
 8003864:	19bb      	adds	r3, r7, r6
 8003866:	195b      	adds	r3, r3, r5
 8003868:	8819      	ldrh	r1, [r3, #0]
 800386a:	2388      	movs	r3, #136	; 0x88
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	228a      	movs	r2, #138	; 0x8a
 8003872:	0052      	lsls	r2, r2, #1
 8003874:	18ba      	adds	r2, r7, r2
 8003876:	f000 f94f 	bl	8003b18 <calculate_wind_speed>
  bme280_temperature = comp_data.temperature * 0.01; // Celsius
 800387a:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <TIM2_IRQHandler+0x30c>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f7fe ff00 	bl	8002684 <__aeabi_i2d>
 8003884:	4a51      	ldr	r2, [pc, #324]	; (80039cc <TIM2_IRQHandler+0x310>)
 8003886:	4b52      	ldr	r3, [pc, #328]	; (80039d0 <TIM2_IRQHandler+0x314>)
 8003888:	f7fe f8f0 	bl	8001a6c <__aeabi_dmul>
 800388c:	0003      	movs	r3, r0
 800388e:	000c      	movs	r4, r1
 8003890:	0018      	movs	r0, r3
 8003892:	0021      	movs	r1, r4
 8003894:	f7fe ffb4 	bl	8002800 <__aeabi_d2f>
 8003898:	1c03      	adds	r3, r0, #0
 800389a:	2594      	movs	r5, #148	; 0x94
 800389c:	006d      	lsls	r5, r5, #1
 800389e:	19b9      	adds	r1, r7, r6
 80038a0:	194a      	adds	r2, r1, r5
 80038a2:	6013      	str	r3, [r2, #0]
  bme280_humidity = comp_data.humidity / 1024.0; // Output is in percentage... so 43.33 is 43.33 %rH
 80038a4:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <TIM2_IRQHandler+0x30c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fe ff25 	bl	80026f8 <__aeabi_ui2d>
 80038ae:	2200      	movs	r2, #0
 80038b0:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <TIM2_IRQHandler+0x318>)
 80038b2:	f7fd fcd1 	bl	8001258 <__aeabi_ddiv>
 80038b6:	0003      	movs	r3, r0
 80038b8:	000c      	movs	r4, r1
 80038ba:	0018      	movs	r0, r3
 80038bc:	0021      	movs	r1, r4
 80038be:	f7fe ff9f 	bl	8002800 <__aeabi_d2f>
 80038c2:	1c03      	adds	r3, r0, #0
 80038c4:	2292      	movs	r2, #146	; 0x92
 80038c6:	0052      	lsls	r2, r2, #1
 80038c8:	19b9      	adds	r1, r7, r6
 80038ca:	1889      	adds	r1, r1, r2
 80038cc:	600b      	str	r3, [r1, #0]
  bme280_pressure = comp_data.pressure * 0.01; // hPa Pressure Units... for Debug Purposes
 80038ce:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <TIM2_IRQHandler+0x30c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fe ff10 	bl	80026f8 <__aeabi_ui2d>
 80038d8:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <TIM2_IRQHandler+0x310>)
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <TIM2_IRQHandler+0x314>)
 80038dc:	f7fe f8c6 	bl	8001a6c <__aeabi_dmul>
 80038e0:	0003      	movs	r3, r0
 80038e2:	000c      	movs	r4, r1
 80038e4:	0018      	movs	r0, r3
 80038e6:	0021      	movs	r1, r4
 80038e8:	f7fe ff8a 	bl	8002800 <__aeabi_d2f>
 80038ec:	1c03      	adds	r3, r0, #0
 80038ee:	2196      	movs	r1, #150	; 0x96
 80038f0:	0049      	lsls	r1, r1, #1
 80038f2:	0032      	movs	r2, r6
 80038f4:	19b8      	adds	r0, r7, r6
 80038f6:	1840      	adds	r0, r0, r1
 80038f8:	6003      	str	r3, [r0, #0]

  /* Transmit over WiFi */

  sprintf(data, "{ \"system_id\":\"%lu%lu%lu\", "
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <TIM2_IRQHandler+0x31c>)
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	4680      	mov	r8, r0
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <TIM2_IRQHandler+0x320>)
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	4681      	mov	r9, r0
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <TIM2_IRQHandler+0x324>)
 8003908:	681e      	ldr	r6, [r3, #0]
 800390a:	18b9      	adds	r1, r7, r2
 800390c:	1948      	adds	r0, r1, r5
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	f7fe ff24 	bl	800275c <__aeabi_f2d>
 8003914:	0004      	movs	r4, r0
 8003916:	000d      	movs	r5, r1
 8003918:	238a      	movs	r3, #138	; 0x8a
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	18f8      	adds	r0, r7, r3
 800391e:	6803      	ldr	r3, [r0, #0]
 8003920:	1c18      	adds	r0, r3, #0
 8003922:	f7fe ff1b 	bl	800275c <__aeabi_f2d>
 8003926:	60b8      	str	r0, [r7, #8]
 8003928:	60f9      	str	r1, [r7, #12]
 800392a:	2196      	movs	r1, #150	; 0x96
 800392c:	0049      	lsls	r1, r1, #1
 800392e:	2310      	movs	r3, #16
 8003930:	469c      	mov	ip, r3
 8003932:	44bc      	add	ip, r7
 8003934:	4461      	add	r1, ip
 8003936:	6808      	ldr	r0, [r1, #0]
 8003938:	f7fe ff10 	bl	800275c <__aeabi_f2d>
 800393c:	6038      	str	r0, [r7, #0]
 800393e:	6079      	str	r1, [r7, #4]
 8003940:	2392      	movs	r3, #146	; 0x92
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2210      	movs	r2, #16
 8003946:	4694      	mov	ip, r2
 8003948:	44bc      	add	ip, r7
 800394a:	4463      	add	r3, ip
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	f7fe ff05 	bl	800275c <__aeabi_f2d>
 8003952:	0002      	movs	r2, r0
 8003954:	000b      	movs	r3, r1
 8003956:	4923      	ldr	r1, [pc, #140]	; (80039e4 <TIM2_IRQHandler+0x328>)
 8003958:	2014      	movs	r0, #20
 800395a:	1838      	adds	r0, r7, r0
 800395c:	9208      	str	r2, [sp, #32]
 800395e:	9309      	str	r3, [sp, #36]	; 0x24
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	9206      	str	r2, [sp, #24]
 8003966:	9307      	str	r3, [sp, #28]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	9204      	str	r2, [sp, #16]
 800396e:	9305      	str	r3, [sp, #20]
 8003970:	9402      	str	r4, [sp, #8]
 8003972:	9503      	str	r5, [sp, #12]
 8003974:	9600      	str	r6, [sp, #0]
 8003976:	464b      	mov	r3, r9
 8003978:	4642      	mov	r2, r8
 800397a:	f007 fa69 	bl	800ae50 <siprintf>
				  bme280_temperature,
				  md_wind_speed,
				  bme280_pressure,
				  bme280_humidity);

  transmitWifi(data, huart1);
 800397e:	4c1a      	ldr	r4, [pc, #104]	; (80039e8 <TIM2_IRQHandler+0x32c>)
 8003980:	2314      	movs	r3, #20
 8003982:	18fd      	adds	r5, r7, r3
 8003984:	466b      	mov	r3, sp
 8003986:	0018      	movs	r0, r3
 8003988:	0023      	movs	r3, r4
 800398a:	330c      	adds	r3, #12
 800398c:	2274      	movs	r2, #116	; 0x74
 800398e:	0019      	movs	r1, r3
 8003990:	f006 faea 	bl	8009f68 <memcpy>
 8003994:	6821      	ldr	r1, [r4, #0]
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	68a3      	ldr	r3, [r4, #8]
 800399a:	0028      	movs	r0, r5
 800399c:	f001 fce4 	bl	8005368 <transmitWifi>

//  /* Toggle SS1 Pin Low to select sensor */
    HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <TIM2_IRQHandler+0x330>)
 80039a2:	2120      	movs	r1, #32
 80039a4:	0018      	movs	r0, r3
 80039a6:	f002 f9f6 	bl	8005d96 <HAL_GPIO_TogglePin>
 80039aa:	e000      	b.n	80039ae <TIM2_IRQHandler+0x2f2>
	  return;
 80039ac:	46c0      	nop			; (mov r8, r8)
//  // TODO: Read from Sensor
//  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
//  /* Toggle SS2 High to un-select sensor */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b051      	add	sp, #324	; 0x144
 80039b2:	bc0c      	pop	{r2, r3}
 80039b4:	4690      	mov	r8, r2
 80039b6:	4699      	mov	r9, r3
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000440 	.word	0x20000440
 80039c0:	20000264 	.word	0x20000264
 80039c4:	20000300 	.word	0x20000300
 80039c8:	200002f4 	.word	0x200002f4
 80039cc:	47ae147b 	.word	0x47ae147b
 80039d0:	3f847ae1 	.word	0x3f847ae1
 80039d4:	40900000 	.word	0x40900000
 80039d8:	200004c4 	.word	0x200004c4
 80039dc:	200003e4 	.word	0x200003e4
 80039e0:	2000049c 	.word	0x2000049c
 80039e4:	0800e6fc 	.word	0x0800e6fc
 80039e8:	20000340 	.word	0x20000340
 80039ec:	50000800 	.word	0x50000800

080039f0 <Toggle_User_LED>:
/* USER CODE BEGIN 1 */
/**
 * 	@brief Toggle LED
 */
void Toggle_User_LED()
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 80039f4:	23a0      	movs	r3, #160	; 0xa0
 80039f6:	05db      	lsls	r3, r3, #23
 80039f8:	2120      	movs	r1, #32
 80039fa:	0018      	movs	r0, r3
 80039fc:	f002 f9cb 	bl	8005d96 <HAL_GPIO_TogglePin>
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <Toggle_ADC_Chip_Select>:

/**
 * 	@brief Toggle ADC Chip Select Pin
 */
void Toggle_ADC_Chip_Select()
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ADC_CS_GPIO_Port, ADC_CS_PIN);
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <Toggle_ADC_Chip_Select+0x14>)
 8003a0e:	2110      	movs	r1, #16
 8003a10:	0018      	movs	r0, r3
 8003a12:	f002 f9c0 	bl	8005d96 <HAL_GPIO_TogglePin>
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	50000800 	.word	0x50000800

08003a20 <HAL_SPI_Transmit_Start>:

/**
 * 	@brief Transmit Start Bit in HAL SPI
 */
void HAL_SPI_Transmit_Start()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
	uint8_t adc_start = (uint8_t) ADC_START_BIT;
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &adc_start, sizeof(adc_start), SPI_TIMEOUT);
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_SPI_Transmit_Start+0x24>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	1df9      	adds	r1, r7, #7
 8003a32:	4805      	ldr	r0, [pc, #20]	; (8003a48 <HAL_SPI_Transmit_Start+0x28>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	f004 faa3 	bl	8007f80 <HAL_SPI_Transmit>
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	0800e958 	.word	0x0800e958
 8003a48:	200003e8 	.word	0x200003e8

08003a4c <Read_ADC>:
 * 	@brief Read MCP3008 ADC based on given channel enum.
 *	Output is set to the pointer of a uint16_t set in the parameters.
 *	Output will be set to 0 before setting the ADC Value to it.
 */
void Read_ADC(uint8_t adc_ch_select, uint16_t *output)
{
 8003a4c:	b5b0      	push	{r4, r5, r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	0002      	movs	r2, r0
 8003a54:	6039      	str	r1, [r7, #0]
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_1 = 0;
 8003a5a:	240f      	movs	r4, #15
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_2 = 0;
 8003a62:	250e      	movs	r5, #14
 8003a64:	197b      	adds	r3, r7, r5
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
	/* Set output to 0 */
	*output = 0;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	801a      	strh	r2, [r3, #0]

	/* Toggle SS0 Pin (CS) Low to use ADC */
	Toggle_ADC_Chip_Select();
 8003a70:	f7ff ffca 	bl	8003a08 <Toggle_ADC_Chip_Select>
	/* Send to DIN CH0 Select */
	HAL_SPI_Transmit_Start();
 8003a74:	f7ff ffd4 	bl	8003a20 <HAL_SPI_Transmit_Start>
	HAL_SPI_TransmitReceive(&hspi1, &adc_ch_select, &adc_byte_1, sizeof(adc_ch_select), SPI_TIMEOUT);
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <Read_ADC+0x78>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	193a      	adds	r2, r7, r4
 8003a7e:	1df9      	adds	r1, r7, #7
 8003a80:	4811      	ldr	r0, [pc, #68]	; (8003ac8 <Read_ADC+0x7c>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2301      	movs	r3, #1
 8003a86:	f004 fce7 	bl	8008458 <HAL_SPI_TransmitReceive>
	/* Read from Dout of ADC */
	HAL_SPI_Receive(&hspi1, &adc_byte_2, sizeof(adc_byte_2), SPI_TIMEOUT);
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <Read_ADC+0x78>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	1979      	adds	r1, r7, r5
 8003a90:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <Read_ADC+0x7c>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	f004 fbc2 	bl	800821c <HAL_SPI_Receive>
	/* Toggle SS0 High (CS) to signify we're done with a round of the ADC */
	Toggle_ADC_Chip_Select();
 8003a98:	f7ff ffb6 	bl	8003a08 <Toggle_ADC_Chip_Select>
	/* Set Output to adc_value */
	*output = ADC_16_TO_10_BIT(adc_byte_1, adc_byte_2);
 8003a9c:	193b      	adds	r3, r7, r4
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	b21a      	sxth	r2, r3
 8003aa4:	197b      	adds	r3, r7, r5
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b21b      	sxth	r3, r3
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	b21b      	sxth	r3, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	059b      	lsls	r3, r3, #22
 8003ab2:	0d9b      	lsrs	r3, r3, #22
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	801a      	strh	r2, [r3, #0]
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	0800e958 	.word	0x0800e958
 8003ac8:	200003e8 	.word	0x200003e8

08003acc <adc_to_voltage>:
/**
 * 	@brief Function handles converting adc value to a voltage.
 * 	Call reverse_and_shift_adc_value before hand.
 */
static float adc_to_voltage(uint16_t adc_value)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	1dbb      	adds	r3, r7, #6
 8003ad6:	801a      	strh	r2, [r3, #0]
	return 5.0 * adc_value / 1024;;
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7fe fdd1 	bl	8002684 <__aeabi_i2d>
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <adc_to_voltage+0x44>)
 8003ae6:	f7fd ffc1 	bl	8001a6c <__aeabi_dmul>
 8003aea:	0003      	movs	r3, r0
 8003aec:	000c      	movs	r4, r1
 8003aee:	0018      	movs	r0, r3
 8003af0:	0021      	movs	r1, r4
 8003af2:	2200      	movs	r2, #0
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <adc_to_voltage+0x48>)
 8003af6:	f7fd fbaf 	bl	8001258 <__aeabi_ddiv>
 8003afa:	0003      	movs	r3, r0
 8003afc:	000c      	movs	r4, r1
 8003afe:	0018      	movs	r0, r3
 8003b00:	0021      	movs	r1, r4
 8003b02:	f7fe fe7d 	bl	8002800 <__aeabi_d2f>
 8003b06:	1c03      	adds	r3, r0, #0
}
 8003b08:	1c18      	adds	r0, r3, #0
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b003      	add	sp, #12
 8003b0e:	bd90      	pop	{r4, r7, pc}
 8003b10:	40140000 	.word	0x40140000
 8003b14:	40900000 	.word	0x40900000

08003b18 <calculate_wind_speed>:
 *	TODO: Wait 40 seconds until we do the first measurement to let the wind sensor stabilize
 *	TODO: Use the Bosch sensor for ambiant temperature instead of the onboard Modern Device Sensor
 * 	https://moderndevice.com/uncategorized/calibrating-rev-p-wind-sensor-new-regression/?preview=true
 */
static void calculate_wind_speed(uint16_t wind_speed_adc, uint16_t wind_temp_adc, float *wind_speed, float *temp_amb)
{
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60ba      	str	r2, [r7, #8]
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	240e      	movs	r4, #14
 8003b24:	193b      	adds	r3, r7, r4
 8003b26:	1c02      	adds	r2, r0, #0
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	250c      	movs	r5, #12
 8003b2c:	197b      	adds	r3, r7, r5
 8003b2e:	1c0a      	adds	r2, r1, #0
 8003b30:	801a      	strh	r2, [r3, #0]
	// Calculate Vin from ADC
	float wind_speed_vout = adc_to_voltage(wind_speed_adc);
 8003b32:	193b      	adds	r3, r7, r4
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7ff ffc8 	bl	8003acc <adc_to_voltage>
 8003b3c:	1c03      	adds	r3, r0, #0
 8003b3e:	617b      	str	r3, [r7, #20]
	float wind_temp_vout = adc_to_voltage(wind_temp_adc);
 8003b40:	197b      	adds	r3, r7, r5
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff ffc1 	bl	8003acc <adc_to_voltage>
 8003b4a:	1c03      	adds	r3, r0, #0
 8003b4c:	613b      	str	r3, [r7, #16]

	// Zero Voltage not set, set here
	// TODO: Check if 40 seconds of operation have passed before we decided to set the zero voltage.
	if (zero_voltage == -1) {
 8003b4e:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <calculate_wind_speed+0x140>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4942      	ldr	r1, [pc, #264]	; (8003c5c <calculate_wind_speed+0x144>)
 8003b54:	1c18      	adds	r0, r3, #0
 8003b56:	f7fc fcb3 	bl	80004c0 <__aeabi_fcmpeq>
 8003b5a:	1e03      	subs	r3, r0, #0
 8003b5c:	d002      	beq.n	8003b64 <calculate_wind_speed+0x4c>
		zero_voltage = wind_speed_vout;
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <calculate_wind_speed+0x140>)
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	601a      	str	r2, [r3, #0]
	}

	// Calculate Ambient Temperature in Celsius
	*temp_amb = (wind_temp_vout - 0.400) / 0.0195;
 8003b64:	6938      	ldr	r0, [r7, #16]
 8003b66:	f7fe fdf9 	bl	800275c <__aeabi_f2d>
 8003b6a:	4a3d      	ldr	r2, [pc, #244]	; (8003c60 <calculate_wind_speed+0x148>)
 8003b6c:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <calculate_wind_speed+0x14c>)
 8003b6e:	f7fe f9ef 	bl	8001f50 <__aeabi_dsub>
 8003b72:	0003      	movs	r3, r0
 8003b74:	000c      	movs	r4, r1
 8003b76:	0018      	movs	r0, r3
 8003b78:	0021      	movs	r1, r4
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <calculate_wind_speed+0x150>)
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <calculate_wind_speed+0x154>)
 8003b7e:	f7fd fb6b 	bl	8001258 <__aeabi_ddiv>
 8003b82:	0003      	movs	r3, r0
 8003b84:	000c      	movs	r4, r1
 8003b86:	0018      	movs	r0, r3
 8003b88:	0021      	movs	r1, r4
 8003b8a:	f7fe fe39 	bl	8002800 <__aeabi_d2f>
 8003b8e:	1c02      	adds	r2, r0, #0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]

	// Calculate the Wind Speed in MPH
	*wind_speed = (wind_speed_vout - zero_voltage) / (3.038517 * pow(*temp_amb, 0.115157));
 8003b94:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <calculate_wind_speed+0x140>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1c19      	adds	r1, r3, #0
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7fc fe66 	bl	800086c <__aeabi_fsub>
 8003ba0:	1c03      	adds	r3, r0, #0
 8003ba2:	1c18      	adds	r0, r3, #0
 8003ba4:	f7fe fdda 	bl	800275c <__aeabi_f2d>
 8003ba8:	0005      	movs	r5, r0
 8003baa:	000e      	movs	r6, r1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	1c18      	adds	r0, r3, #0
 8003bb2:	f7fe fdd3 	bl	800275c <__aeabi_f2d>
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <calculate_wind_speed+0x158>)
 8003bb8:	4c2e      	ldr	r4, [pc, #184]	; (8003c74 <calculate_wind_speed+0x15c>)
 8003bba:	001a      	movs	r2, r3
 8003bbc:	0023      	movs	r3, r4
 8003bbe:	f009 fcdb 	bl	800d578 <pow>
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <calculate_wind_speed+0x160>)
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <calculate_wind_speed+0x164>)
 8003bc6:	f7fd ff51 	bl	8001a6c <__aeabi_dmul>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	000c      	movs	r4, r1
 8003bce:	001a      	movs	r2, r3
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	0028      	movs	r0, r5
 8003bd4:	0031      	movs	r1, r6
 8003bd6:	f7fd fb3f 	bl	8001258 <__aeabi_ddiv>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	000c      	movs	r4, r1
 8003bde:	0018      	movs	r0, r3
 8003be0:	0021      	movs	r1, r4
 8003be2:	f7fe fe0d 	bl	8002800 <__aeabi_d2f>
 8003be6:	1c02      	adds	r2, r0, #0
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	601a      	str	r2, [r3, #0]
	*wind_speed /= 0.087288;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1c18      	adds	r0, r3, #0
 8003bf2:	f7fe fdb3 	bl	800275c <__aeabi_f2d>
 8003bf6:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <calculate_wind_speed+0x168>)
 8003bf8:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <calculate_wind_speed+0x16c>)
 8003bfa:	f7fd fb2d 	bl	8001258 <__aeabi_ddiv>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	000c      	movs	r4, r1
 8003c02:	0018      	movs	r0, r3
 8003c04:	0021      	movs	r1, r4
 8003c06:	f7fe fdfb 	bl	8002800 <__aeabi_d2f>
 8003c0a:	1c02      	adds	r2, r0, #0
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	601a      	str	r2, [r3, #0]
	*wind_speed = pow(*wind_speed, 3.009364);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1c18      	adds	r0, r3, #0
 8003c16:	f7fe fda1 	bl	800275c <__aeabi_f2d>
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <calculate_wind_speed+0x170>)
 8003c1c:	4c1b      	ldr	r4, [pc, #108]	; (8003c8c <calculate_wind_speed+0x174>)
 8003c1e:	001a      	movs	r2, r3
 8003c20:	0023      	movs	r3, r4
 8003c22:	f009 fca9 	bl	800d578 <pow>
 8003c26:	0003      	movs	r3, r0
 8003c28:	000c      	movs	r4, r1
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	0021      	movs	r1, r4
 8003c2e:	f7fe fde7 	bl	8002800 <__aeabi_d2f>
 8003c32:	1c02      	adds	r2, r0, #0
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	601a      	str	r2, [r3, #0]

	if (isnanf(*wind_speed))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c19      	adds	r1, r3, #0
 8003c3e:	1c18      	adds	r0, r3, #0
 8003c40:	f7fc ffd8 	bl	8000bf4 <__aeabi_fcmpun>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d100      	bne.n	8003c4a <calculate_wind_speed+0x132>
	{
		*wind_speed = 0;
	}
}
 8003c48:	e002      	b.n	8003c50 <calculate_wind_speed+0x138>
		*wind_speed = 0;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b007      	add	sp, #28
 8003c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c58:	20000004 	.word	0x20000004
 8003c5c:	bf800000 	.word	0xbf800000
 8003c60:	9999999a 	.word	0x9999999a
 8003c64:	3fd99999 	.word	0x3fd99999
 8003c68:	d916872b 	.word	0xd916872b
 8003c6c:	3f93f7ce 	.word	0x3f93f7ce
 8003c70:	dce7cd03 	.word	0xdce7cd03
 8003c74:	3fbd7aed 	.word	0x3fbd7aed
 8003c78:	003ab863 	.word	0x003ab863
 8003c7c:	40084ee2 	.word	0x40084ee2
 8003c80:	a1554fbe 	.word	0xa1554fbe
 8003c84:	3fb65881 	.word	0x3fb65881
 8003c88:	6ece13f5 	.word	0x6ece13f5
 8003c8c:	4008132d 	.word	0x4008132d

08003c90 <bme280_read_data_forced_mode>:

void bme280_read_data_forced_mode(struct bme280_dev *dev)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	bme280_rslt = 0;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <bme280_read_data_forced_mode+0x78>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
	/* Set measurement mode to Forced */
	bme280_rslt |= bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f000 fa82 	bl	80041ac <bme280_set_sensor_mode>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	001a      	movs	r2, r3
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <bme280_read_data_forced_mode+0x78>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b25a      	sxtb	r2, r3
 8003cb6:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <bme280_read_data_forced_mode+0x78>)
 8003cb8:	701a      	strb	r2, [r3, #0]
	/* Wait for the measurement to complete */
	dev->delay_ms(500);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	22fa      	movs	r2, #250	; 0xfa
 8003cc0:	0052      	lsls	r2, r2, #1
 8003cc2:	0010      	movs	r0, r2
 8003cc4:	4798      	blx	r3
	/* Output data to comp_data */
	bme280_rslt |= bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <bme280_read_data_forced_mode+0x7c>)
 8003cca:	0019      	movs	r1, r3
 8003ccc:	2007      	movs	r0, #7
 8003cce:	f000 fb4a 	bl	8004366 <bme280_get_sensor_data>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <bme280_read_data_forced_mode+0x78>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b25b      	sxtb	r3, r3
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b25a      	sxtb	r2, r3
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <bme280_read_data_forced_mode+0x78>)
 8003ce2:	701a      	strb	r2, [r3, #0]
	/* Set sensor to Sleep */
	bme280_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, dev);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f000 fa5f 	bl	80041ac <bme280_set_sensor_mode>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <bme280_read_data_forced_mode+0x78>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	b25a      	sxtb	r2, r3
 8003cfc:	4b02      	ldr	r3, [pc, #8]	; (8003d08 <bme280_read_data_forced_mode+0x78>)
 8003cfe:	701a      	strb	r2, [r3, #0]
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000269 	.word	0x20000269
 8003d0c:	200002f4 	.word	0x200002f4

08003d10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <_sbrk+0x50>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <_sbrk+0x16>
		heap_end = &end;
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <_sbrk+0x50>)
 8003d22:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <_sbrk+0x54>)
 8003d24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <_sbrk+0x50>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <_sbrk+0x50>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	18d3      	adds	r3, r2, r3
 8003d34:	466a      	mov	r2, sp
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d907      	bls.n	8003d4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d3a:	f006 f8eb 	bl	8009f14 <__errno>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	220c      	movs	r2, #12
 8003d42:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d44:	2301      	movs	r3, #1
 8003d46:	425b      	negs	r3, r3
 8003d48:	e006      	b.n	8003d58 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <_sbrk+0x50>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	18d2      	adds	r2, r2, r3
 8003d52:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <_sbrk+0x50>)
 8003d54:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000270 	.word	0x20000270
 8003d64:	200004d0 	.word	0x200004d0

08003d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003d6c:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <SystemInit+0x64>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <SystemInit+0x64>)
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	0049      	lsls	r1, r1, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <SystemInit+0x64>)
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <SystemInit+0x64>)
 8003d80:	4913      	ldr	r1, [pc, #76]	; (8003dd0 <SystemInit+0x68>)
 8003d82:	400a      	ands	r2, r1
 8003d84:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <SystemInit+0x64>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <SystemInit+0x64>)
 8003d8c:	4911      	ldr	r1, [pc, #68]	; (8003dd4 <SystemInit+0x6c>)
 8003d8e:	400a      	ands	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <SystemInit+0x64>)
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <SystemInit+0x64>)
 8003d98:	2101      	movs	r1, #1
 8003d9a:	438a      	bics	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <SystemInit+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <SystemInit+0x64>)
 8003da4:	490c      	ldr	r1, [pc, #48]	; (8003dd8 <SystemInit+0x70>)
 8003da6:	400a      	ands	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
 RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <SystemInit+0x64>)
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <SystemInit+0x64>)
 8003db0:	490a      	ldr	r1, [pc, #40]	; (8003ddc <SystemInit+0x74>)
 8003db2:	400a      	ands	r2, r1
 8003db4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <SystemInit+0x64>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <SystemInit+0x78>)
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	0512      	lsls	r2, r2, #20
 8003dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	88ff400c 	.word	0x88ff400c
 8003dd4:	fef6fff6 	.word	0xfef6fff6
 8003dd8:	fffbffff 	.word	0xfffbffff
 8003ddc:	ff02ffff 	.word	0xff02ffff
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003de4:	480d      	ldr	r0, [pc, #52]	; (8003e1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003de6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003de8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dea:	e003      	b.n	8003df4 <LoopCopyDataInit>

08003dec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003dee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003df0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003df2:	3104      	adds	r1, #4

08003df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003df4:	480b      	ldr	r0, [pc, #44]	; (8003e24 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003df8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dfc:	d3f6      	bcc.n	8003dec <CopyDataInit>
  ldr  r2, =_sbss
 8003dfe:	4a0b      	ldr	r2, [pc, #44]	; (8003e2c <LoopForever+0x12>)
  b  LoopFillZerobss
 8003e00:	e002      	b.n	8003e08 <LoopFillZerobss>

08003e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003e02:	2300      	movs	r3, #0
  str  r3, [r2]
 8003e04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e06:	3204      	adds	r2, #4

08003e08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <LoopForever+0x16>)
  cmp  r2, r3
 8003e0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e0c:	d3f9      	bcc.n	8003e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e0e:	f7ff ffab 	bl	8003d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e12:	f006 f885 	bl	8009f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e16:	f7fe fda1 	bl	800295c <main>

08003e1a <LoopForever>:

LoopForever:
    b LoopForever
 8003e1a:	e7fe      	b.n	8003e1a <LoopForever>
   ldr   r0, =_estack
 8003e1c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003e20:	0800edf0 	.word	0x0800edf0
  ldr  r0, =_sdata
 8003e24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e28:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8003e2c:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8003e30:	200004d0 	.word	0x200004d0

08003e34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e34:	e7fe      	b.n	8003e34 <ADC1_COMP_IRQHandler>

08003e36 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003e36:	b5b0      	push	{r4, r5, r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8003e3e:	230e      	movs	r3, #14
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	2205      	movs	r2, #5
 8003e44:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8003e46:	230d      	movs	r3, #13
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003e4e:	250f      	movs	r5, #15
 8003e50:	197c      	adds	r4, r7, r5
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f001 f9a7 	bl	80051a8 <null_ptr_check>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003e5e:	197b      	adds	r3, r7, r5
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d14a      	bne.n	8003efe <bme280_init+0xc8>
    {
        while (try_count)
 8003e68:	e039      	b.n	8003ede <bme280_init+0xa8>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003e6a:	250f      	movs	r5, #15
 8003e6c:	197c      	adds	r4, r7, r5
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	220d      	movs	r2, #13
 8003e72:	18b9      	adds	r1, r7, r2
 8003e74:	2201      	movs	r2, #1
 8003e76:	20d0      	movs	r0, #208	; 0xd0
 8003e78:	f000 f849 	bl	8003f0e <bme280_get_regs>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8003e80:	197b      	adds	r3, r7, r5
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11f      	bne.n	8003eca <bme280_init+0x94>
 8003e8a:	230d      	movs	r3, #13
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b60      	cmp	r3, #96	; 0x60
 8003e92:	d11a      	bne.n	8003eca <bme280_init+0x94>
            {
                dev->chip_id = chip_id;
 8003e94:	230d      	movs	r3, #13
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8003e9e:	250f      	movs	r5, #15
 8003ea0:	197c      	adds	r4, r7, r5
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 f9f6 	bl	8004296 <bme280_soft_reset>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	7023      	strb	r3, [r4, #0]
                if (rslt == BME280_OK)
 8003eae:	197b      	adds	r3, r7, r5
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d118      	bne.n	8003eea <bme280_init+0xb4>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8003eb8:	230f      	movs	r3, #15
 8003eba:	18fc      	adds	r4, r7, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 ffc4 	bl	8004e4c <get_calib_data>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	7023      	strb	r3, [r4, #0]
                }
                break;
 8003ec8:	e00f      	b.n	8003eea <bme280_init+0xb4>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2001      	movs	r0, #1
 8003ed0:	4798      	blx	r3
            --try_count;
 8003ed2:	220e      	movs	r2, #14
 8003ed4:	18bb      	adds	r3, r7, r2
 8003ed6:	18ba      	adds	r2, r7, r2
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	3a01      	subs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8003ede:	230e      	movs	r3, #14
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1c0      	bne.n	8003e6a <bme280_init+0x34>
 8003ee8:	e000      	b.n	8003eec <bme280_init+0xb6>
                break;
 8003eea:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8003eec:	230e      	movs	r3, #14
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <bme280_init+0xc8>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8003ef6:	230f      	movs	r3, #15
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	22fe      	movs	r2, #254	; 0xfe
 8003efc:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003efe:	230f      	movs	r3, #15
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b25b      	sxtb	r3, r3
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bdb0      	pop	{r4, r5, r7, pc}

08003f0e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8003f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f10:	b087      	sub	sp, #28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	0011      	movs	r1, r2
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	230f      	movs	r3, #15
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	1c02      	adds	r2, r0, #0
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	230c      	movs	r3, #12
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	1c0a      	adds	r2, r1, #0
 8003f28:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003f2a:	2517      	movs	r5, #23
 8003f2c:	197c      	adds	r4, r7, r5
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f001 f939 	bl	80051a8 <null_ptr_check>
 8003f36:	0003      	movs	r3, r0
 8003f38:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003f3a:	197b      	adds	r3, r7, r5
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b25b      	sxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d126      	bne.n	8003f92 <bme280_get_regs+0x84>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	789b      	ldrb	r3, [r3, #2]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d007      	beq.n	8003f5c <bme280_get_regs+0x4e>
        {
            reg_addr = reg_addr | 0x80;
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	18bb      	adds	r3, r7, r2
 8003f50:	18ba      	adds	r2, r7, r2
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	4249      	negs	r1, r1
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685d      	ldr	r5, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7858      	ldrb	r0, [r3, #1]
 8003f64:	2317      	movs	r3, #23
 8003f66:	18fc      	adds	r4, r7, r3
 8003f68:	220c      	movs	r2, #12
 8003f6a:	18bb      	adds	r3, r7, r2
 8003f6c:	881e      	ldrh	r6, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	210f      	movs	r1, #15
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	7819      	ldrb	r1, [r3, #0]
 8003f76:	0033      	movs	r3, r6
 8003f78:	47a8      	blx	r5
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	7023      	strb	r3, [r4, #0]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8003f7e:	2317      	movs	r3, #23
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <bme280_get_regs+0x84>
        {
            rslt = BME280_E_COMM_FAIL;
 8003f8a:	2317      	movs	r3, #23
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	22fc      	movs	r2, #252	; 0xfc
 8003f90:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003f92:	2317      	movs	r3, #23
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b25b      	sxtb	r3, r3
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b007      	add	sp, #28
 8003fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fa2 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa4:	b08d      	sub	sp, #52	; 0x34
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	1dfb      	adds	r3, r7, #7
 8003fb0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b0a      	cmp	r3, #10
 8003fb8:	d902      	bls.n	8003fc0 <bme280_set_regs+0x1e>
    {
        len = 10;
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	220a      	movs	r2, #10
 8003fbe:	701a      	strb	r2, [r3, #0]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003fc0:	252f      	movs	r5, #47	; 0x2f
 8003fc2:	197c      	adds	r4, r7, r5
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f001 f8ee 	bl	80051a8 <null_ptr_check>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003fd0:	197b      	adds	r3, r7, r5
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d16b      	bne.n	80040b2 <bme280_set_regs+0x110>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d068      	beq.n	80040b2 <bme280_set_regs+0x110>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d065      	beq.n	80040b2 <bme280_set_regs+0x110>
    {
        if (len != 0)
 8003fe6:	1dfb      	adds	r3, r7, #7
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d05c      	beq.n	80040a8 <bme280_set_regs+0x106>
        {
            temp_buff[0] = reg_data[0];
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	2314      	movs	r3, #20
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	789b      	ldrb	r3, [r3, #2]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d01e      	beq.n	800403e <bme280_set_regs+0x9c>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004000:	232b      	movs	r3, #43	; 0x2b
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e012      	b.n	8004030 <bme280_set_regs+0x8e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800400a:	202b      	movs	r0, #43	; 0x2b
 800400c:	183b      	adds	r3, r7, r0
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	183b      	adds	r3, r7, r0
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	18cb      	adds	r3, r1, r3
 800401e:	217f      	movs	r1, #127	; 0x7f
 8004020:	400a      	ands	r2, r1
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004026:	183b      	adds	r3, r7, r0
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	183b      	adds	r3, r7, r0
 800402c:	3201      	adds	r2, #1
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	232b      	movs	r3, #43	; 0x2b
 8004032:	18fa      	adds	r2, r7, r3
 8004034:	1dfb      	adds	r3, r7, #7
 8004036:	7812      	ldrb	r2, [r2, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d3e5      	bcc.n	800400a <bme280_set_regs+0x68>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d911      	bls.n	800406a <bme280_set_regs+0xc8>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8004046:	1dfb      	adds	r3, r7, #7
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	2114      	movs	r1, #20
 800404e:	1879      	adds	r1, r7, r1
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 ff48 	bl	8004ee6 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8004056:	1dfb      	adds	r3, r7, #7
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	18db      	adds	r3, r3, r3
 800405e:	b29a      	uxth	r2, r3
 8004060:	232c      	movs	r3, #44	; 0x2c
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	3a01      	subs	r2, #1
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e004      	b.n	8004074 <bme280_set_regs+0xd2>
            }
            else
            {
                temp_len = len;
 800406a:	232c      	movs	r3, #44	; 0x2c
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	1dfa      	adds	r2, r7, #7
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	801a      	strh	r2, [r3, #0]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689d      	ldr	r5, [r3, #8]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	7858      	ldrb	r0, [r3, #1]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	7819      	ldrb	r1, [r3, #0]
 8004080:	262f      	movs	r6, #47	; 0x2f
 8004082:	19bc      	adds	r4, r7, r6
 8004084:	232c      	movs	r3, #44	; 0x2c
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	2214      	movs	r2, #20
 800408c:	18ba      	adds	r2, r7, r2
 800408e:	47a8      	blx	r5
 8004090:	0003      	movs	r3, r0
 8004092:	7023      	strb	r3, [r4, #0]

            /* Check for communication error */
            if (rslt != BME280_OK)
 8004094:	19bb      	adds	r3, r7, r6
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	b25b      	sxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <bme280_set_regs+0x11a>
            {
                rslt = BME280_E_COMM_FAIL;
 800409e:	232f      	movs	r3, #47	; 0x2f
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	22fc      	movs	r2, #252	; 0xfc
 80040a4:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 80040a6:	e009      	b.n	80040bc <bme280_set_regs+0x11a>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80040a8:	232f      	movs	r3, #47	; 0x2f
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	22fd      	movs	r2, #253	; 0xfd
 80040ae:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 80040b0:	e004      	b.n	80040bc <bme280_set_regs+0x11a>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80040b2:	232f      	movs	r3, #47	; 0x2f
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	22ff      	movs	r2, #255	; 0xff
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e000      	b.n	80040be <bme280_set_regs+0x11c>
        if (len != 0)
 80040bc:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 80040be:	232f      	movs	r3, #47	; 0x2f
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b25b      	sxtb	r3, r3
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b00d      	add	sp, #52	; 0x34
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040ce <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80040ce:	b5b0      	push	{r4, r5, r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	0002      	movs	r2, r0
 80040d6:	6039      	str	r1, [r7, #0]
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80040dc:	250f      	movs	r5, #15
 80040de:	197c      	adds	r4, r7, r5
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f001 f860 	bl	80051a8 <null_ptr_check>
 80040e8:	0003      	movs	r3, r0
 80040ea:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80040ec:	197b      	adds	r3, r7, r5
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d152      	bne.n	800419c <bme280_set_sensor_settings+0xce>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80040f6:	250f      	movs	r5, #15
 80040f8:	197c      	adds	r4, r7, r5
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	230e      	movs	r3, #14
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	0011      	movs	r1, r2
 8004102:	0018      	movs	r0, r3
 8004104:	f000 f89c 	bl	8004240 <bme280_get_sensor_mode>
 8004108:	0003      	movs	r3, r0
 800410a:	7023      	strb	r3, [r4, #0]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800410c:	197b      	adds	r3, r7, r5
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	b25b      	sxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10c      	bne.n	8004130 <bme280_set_sensor_settings+0x62>
 8004116:	230e      	movs	r3, #14
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <bme280_set_sensor_settings+0x62>
        {
            rslt = put_device_to_sleep(dev);
 8004120:	230f      	movs	r3, #15
 8004122:	18fc      	adds	r4, r7, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fc08 	bl	800493c <put_device_to_sleep>
 800412c:	0003      	movs	r3, r0
 800412e:	7023      	strb	r3, [r4, #0]
        }
        if (rslt == BME280_OK)
 8004130:	230f      	movs	r3, #15
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b25b      	sxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d12f      	bne.n	800419c <bme280_set_sensor_settings+0xce>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800413c:	1dfb      	adds	r3, r7, #7
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	0019      	movs	r1, r3
 8004142:	2007      	movs	r0, #7
 8004144:	f001 f80b 	bl	800515e <are_settings_changed>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d00c      	beq.n	8004166 <bme280_set_sensor_settings+0x98>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	3338      	adds	r3, #56	; 0x38
 8004150:	0019      	movs	r1, r3
 8004152:	230f      	movs	r3, #15
 8004154:	18fc      	adds	r4, r7, r3
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	1dfb      	adds	r3, r7, #7
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 f9fd 	bl	800455c <set_osr_settings>
 8004162:	0003      	movs	r3, r0
 8004164:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8004166:	230f      	movs	r3, #15
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b25b      	sxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d114      	bne.n	800419c <bme280_set_sensor_settings+0xce>
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	0019      	movs	r1, r3
 8004178:	2018      	movs	r0, #24
 800417a:	f000 fff0 	bl	800515e <are_settings_changed>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d00c      	beq.n	800419c <bme280_set_sensor_settings+0xce>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	3338      	adds	r3, #56	; 0x38
 8004186:	0019      	movs	r1, r3
 8004188:	230f      	movs	r3, #15
 800418a:	18fc      	adds	r4, r7, r3
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	1dfb      	adds	r3, r7, #7
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 faad 	bl	80046f2 <set_filter_standby_settings>
 8004198:	0003      	movs	r3, r0
 800419a:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 800419c:	230f      	movs	r3, #15
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b25b      	sxtb	r3, r3
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b004      	add	sp, #16
 80041aa:	bdb0      	pop	{r4, r5, r7, pc}

080041ac <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80041ac:	b5b0      	push	{r4, r5, r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	0002      	movs	r2, r0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80041ba:	250f      	movs	r5, #15
 80041bc:	197c      	adds	r4, r7, r5
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fff1 	bl	80051a8 <null_ptr_check>
 80041c6:	0003      	movs	r3, r0
 80041c8:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 80041ca:	197b      	adds	r3, r7, r5
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b25b      	sxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d12d      	bne.n	8004230 <bme280_set_sensor_mode+0x84>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80041d4:	250f      	movs	r5, #15
 80041d6:	197c      	adds	r4, r7, r5
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	230e      	movs	r3, #14
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	0011      	movs	r1, r2
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 f82d 	bl	8004240 <bme280_get_sensor_mode>
 80041e6:	0003      	movs	r3, r0
 80041e8:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80041ea:	197b      	adds	r3, r7, r5
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10c      	bne.n	800420e <bme280_set_sensor_mode+0x62>
 80041f4:	230e      	movs	r3, #14
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <bme280_set_sensor_mode+0x62>
        {
            rslt = put_device_to_sleep(dev);
 80041fe:	230f      	movs	r3, #15
 8004200:	18fc      	adds	r4, r7, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 fb99 	bl	800493c <put_device_to_sleep>
 800420a:	0003      	movs	r3, r0
 800420c:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 800420e:	230f      	movs	r3, #15
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b25b      	sxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <bme280_set_sensor_mode+0x84>
        {
            rslt = write_power_mode(sensor_mode, dev);
 800421a:	230f      	movs	r3, #15
 800421c:	18fc      	adds	r4, r7, r3
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	1dfb      	adds	r3, r7, #7
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	0011      	movs	r1, r2
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fb47 	bl	80048ba <write_power_mode>
 800422c:	0003      	movs	r3, r0
 800422e:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8004230:	230f      	movs	r3, #15
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b25b      	sxtb	r3, r3
}
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	b004      	add	sp, #16
 800423e:	bdb0      	pop	{r4, r5, r7, pc}

08004240 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800424a:	250f      	movs	r5, #15
 800424c:	197c      	adds	r4, r7, r5
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	0018      	movs	r0, r3
 8004252:	f000 ffa9 	bl	80051a8 <null_ptr_check>
 8004256:	0003      	movs	r3, r0
 8004258:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800425a:	197b      	adds	r3, r7, r5
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	b25b      	sxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d110      	bne.n	8004286 <bme280_get_sensor_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004264:	230f      	movs	r3, #15
 8004266:	18fc      	adds	r4, r7, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	20f4      	movs	r0, #244	; 0xf4
 8004270:	f7ff fe4d 	bl	8003f0e <bme280_get_regs>
 8004274:	0003      	movs	r3, r0
 8004276:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2203      	movs	r2, #3
 800427e:	4013      	ands	r3, r2
 8004280:	b2da      	uxtb	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004286:	230f      	movs	r3, #15
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b25b      	sxtb	r3, r3
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b004      	add	sp, #16
 8004294:	bdb0      	pop	{r4, r5, r7, pc}

08004296 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004296:	b5b0      	push	{r4, r5, r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 800429e:	230d      	movs	r3, #13
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	22e0      	movs	r2, #224	; 0xe0
 80042a4:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 80042a6:	230c      	movs	r3, #12
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 80042ae:	230e      	movs	r3, #14
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	2205      	movs	r2, #5
 80042b4:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80042b6:	230b      	movs	r3, #11
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	22b6      	movs	r2, #182	; 0xb6
 80042bc:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80042be:	250f      	movs	r5, #15
 80042c0:	197c      	adds	r4, r7, r5
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 ff6f 	bl	80051a8 <null_ptr_check>
 80042ca:	0003      	movs	r3, r0
 80042cc:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80042ce:	197b      	adds	r3, r7, r5
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d13e      	bne.n	8004356 <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80042d8:	250f      	movs	r5, #15
 80042da:	197c      	adds	r4, r7, r5
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	220b      	movs	r2, #11
 80042e0:	18b9      	adds	r1, r7, r2
 80042e2:	220d      	movs	r2, #13
 80042e4:	18b8      	adds	r0, r7, r2
 80042e6:	2201      	movs	r2, #1
 80042e8:	f7ff fe5b 	bl	8003fa2 <bme280_set_regs>
 80042ec:	0003      	movs	r3, r0
 80042ee:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 80042f0:	197b      	adds	r3, r7, r5
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d12d      	bne.n	8004356 <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2002      	movs	r0, #2
 8004300:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8004302:	250f      	movs	r5, #15
 8004304:	197c      	adds	r4, r7, r5
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	220c      	movs	r2, #12
 800430a:	18b9      	adds	r1, r7, r2
 800430c:	2201      	movs	r2, #1
 800430e:	20f3      	movs	r0, #243	; 0xf3
 8004310:	f7ff fdfd 	bl	8003f0e <bme280_get_regs>
 8004314:	0003      	movs	r3, r0
 8004316:	7023      	strb	r3, [r4, #0]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8004318:	197b      	adds	r3, r7, r5
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b25b      	sxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10e      	bne.n	8004340 <bme280_soft_reset+0xaa>
 8004322:	220e      	movs	r2, #14
 8004324:	18bb      	adds	r3, r7, r2
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	18ba      	adds	r2, r7, r2
 800432a:	1e59      	subs	r1, r3, #1
 800432c:	7011      	strb	r1, [r2, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d006      	beq.n	8004340 <bme280_soft_reset+0xaa>
 8004332:	230c      	movs	r3, #12
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	001a      	movs	r2, r3
 800433a:	2301      	movs	r3, #1
 800433c:	4013      	ands	r3, r2
 800433e:	d1dc      	bne.n	80042fa <bme280_soft_reset+0x64>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8004340:	230c      	movs	r3, #12
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	001a      	movs	r2, r3
 8004348:	2301      	movs	r3, #1
 800434a:	4013      	ands	r3, r2
 800434c:	d003      	beq.n	8004356 <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800434e:	230f      	movs	r3, #15
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	22fa      	movs	r2, #250	; 0xfa
 8004354:	701a      	strb	r2, [r3, #0]
            }

        }
    }

    return rslt;
 8004356:	230f      	movs	r3, #15
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	b25b      	sxtb	r3, r3
}
 800435e:	0018      	movs	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	b004      	add	sp, #16
 8004364:	bdb0      	pop	{r4, r5, r7, pc}

08004366 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8004366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004368:	b08b      	sub	sp, #44	; 0x2c
 800436a:	af00      	add	r7, sp, #0
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	230f      	movs	r3, #15
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	1c02      	adds	r2, r0, #0
 8004376:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8004378:	231c      	movs	r3, #28
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	0018      	movs	r0, r3
 800437e:	2308      	movs	r3, #8
 8004380:	001a      	movs	r2, r3
 8004382:	2100      	movs	r1, #0
 8004384:	f005 fdf9 	bl	8009f7a <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004388:	2310      	movs	r3, #16
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	0018      	movs	r0, r3
 800438e:	230c      	movs	r3, #12
 8004390:	001a      	movs	r2, r3
 8004392:	2100      	movs	r1, #0
 8004394:	f005 fdf1 	bl	8009f7a <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004398:	2527      	movs	r5, #39	; 0x27
 800439a:	197c      	adds	r4, r7, r5
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 ff02 	bl	80051a8 <null_ptr_check>
 80043a4:	0003      	movs	r3, r0
 80043a6:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME280_OK) && (comp_data != NULL))
 80043a8:	197b      	adds	r3, r7, r5
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d12a      	bne.n	8004408 <bme280_get_sensor_data+0xa2>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d027      	beq.n	8004408 <bme280_get_sensor_data+0xa2>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80043b8:	2527      	movs	r5, #39	; 0x27
 80043ba:	197c      	adds	r4, r7, r5
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	221c      	movs	r2, #28
 80043c0:	18b9      	adds	r1, r7, r2
 80043c2:	2208      	movs	r2, #8
 80043c4:	20f7      	movs	r0, #247	; 0xf7
 80043c6:	f7ff fda2 	bl	8003f0e <bme280_get_regs>
 80043ca:	0003      	movs	r3, r0
 80043cc:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80043ce:	197b      	adds	r3, r7, r5
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11b      	bne.n	8004410 <bme280_get_sensor_data+0xaa>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80043d8:	2610      	movs	r6, #16
 80043da:	19ba      	adds	r2, r7, r6
 80043dc:	231c      	movs	r3, #28
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	0011      	movs	r1, r2
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 f81c 	bl	8004420 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3310      	adds	r3, #16
 80043ec:	001d      	movs	r5, r3
 80043ee:	2327      	movs	r3, #39	; 0x27
 80043f0:	18fc      	adds	r4, r7, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	19b9      	adds	r1, r7, r6
 80043f6:	230f      	movs	r3, #15
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	7818      	ldrb	r0, [r3, #0]
 80043fc:	002b      	movs	r3, r5
 80043fe:	f000 f853 	bl	80044a8 <bme280_compensate_data>
 8004402:	0003      	movs	r3, r0
 8004404:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004406:	e003      	b.n	8004410 <bme280_get_sensor_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004408:	2327      	movs	r3, #39	; 0x27
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004410:	2327      	movs	r3, #39	; 0x27
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b25b      	sxtb	r3, r3
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b00b      	add	sp, #44	; 0x2c
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004420 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	031b      	lsls	r3, r3, #12
 8004430:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3301      	adds	r3, #1
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3302      	adds	r3, #2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	b2db      	uxtb	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	431a      	orrs	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3303      	adds	r3, #3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3305      	adds	r3, #5
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	b2db      	uxtb	r3, r3
 8004474:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	431a      	orrs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	431a      	orrs	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3306      	adds	r3, #6
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3307      	adds	r3, #7
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	431a      	orrs	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b006      	add	sp, #24
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	230f      	movs	r3, #15
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	1c02      	adds	r2, r0, #0
 80044ba:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 80044bc:	2317      	movs	r3, #23
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03c      	beq.n	8004544 <bme280_compensate_data+0x9c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d039      	beq.n	8004544 <bme280_compensate_data+0x9c>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d036      	beq.n	8004544 <bme280_compensate_data+0x9c>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80044e8:	230f      	movs	r3, #15
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2207      	movs	r2, #7
 80044f0:	4013      	ands	r3, r2
 80044f2:	d008      	beq.n	8004506 <bme280_compensate_data+0x5e>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	0011      	movs	r1, r2
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 fa80 	bl	8004a00 <compensate_temperature>
 8004500:	0002      	movs	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]
        }
        if (sensor_comp & BME280_PRESS)
 8004506:	230f      	movs	r3, #15
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d008      	beq.n	8004524 <bme280_compensate_data+0x7c>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	0011      	movs	r1, r2
 8004518:	0018      	movs	r0, r3
 800451a:	f000 fad7 	bl	8004acc <compensate_pressure>
 800451e:	0002      	movs	r2, r0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]
        }
        if (sensor_comp & BME280_HUM)
 8004524:	230f      	movs	r3, #15
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2204      	movs	r2, #4
 800452c:	4013      	ands	r3, r2
 800452e:	d00d      	beq.n	800454c <bme280_compensate_data+0xa4>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	0011      	movs	r1, r2
 8004536:	0018      	movs	r0, r3
 8004538:	f000 fbca 	bl	8004cd0 <compensate_humidity>
 800453c:	0002      	movs	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 8004542:	e003      	b.n	800454c <bme280_compensate_data+0xa4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004544:	2317      	movs	r3, #23
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	22ff      	movs	r2, #255	; 0xff
 800454a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800454c:	2317      	movs	r3, #23
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b25b      	sxtb	r3, r3
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b006      	add	sp, #24
 800455a:	bd80      	pop	{r7, pc}

0800455c <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	210f      	movs	r1, #15
 8004568:	187b      	adds	r3, r7, r1
 800456a:	1c02      	adds	r2, r0, #0
 800456c:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800456e:	2317      	movs	r3, #23
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8004576:	187b      	adds	r3, r7, r1
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2204      	movs	r2, #4
 800457c:	4013      	ands	r3, r2
 800457e:	d009      	beq.n	8004594 <set_osr_settings+0x38>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8004580:	2317      	movs	r3, #23
 8004582:	18fc      	adds	r4, r7, r3
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	0011      	movs	r1, r2
 800458a:	0018      	movs	r0, r3
 800458c:	f000 f81c 	bl	80045c8 <set_osr_humidity_settings>
 8004590:	0003      	movs	r3, r0
 8004592:	7023      	strb	r3, [r4, #0]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004594:	230f      	movs	r3, #15
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2203      	movs	r2, #3
 800459c:	4013      	ands	r3, r2
 800459e:	d00b      	beq.n	80045b8 <set_osr_settings+0x5c>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80045a0:	2317      	movs	r3, #23
 80045a2:	18fc      	adds	r4, r7, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	230f      	movs	r3, #15
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 f853 	bl	800465a <set_osr_press_temp_settings>
 80045b4:	0003      	movs	r3, r0
 80045b6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80045b8:	2317      	movs	r3, #23
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b25b      	sxtb	r3, r3
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b007      	add	sp, #28
 80045c6:	bd90      	pop	{r4, r7, pc}

080045c8 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80045c8:	b5b0      	push	{r4, r5, r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80045d2:	200c      	movs	r0, #12
 80045d4:	183b      	adds	r3, r7, r0
 80045d6:	22f2      	movs	r2, #242	; 0xf2
 80045d8:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	789b      	ldrb	r3, [r3, #2]
 80045de:	2207      	movs	r2, #7
 80045e0:	4013      	ands	r3, r2
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	210e      	movs	r1, #14
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80045ea:	250f      	movs	r5, #15
 80045ec:	197c      	adds	r4, r7, r5
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	1879      	adds	r1, r7, r1
 80045f2:	1838      	adds	r0, r7, r0
 80045f4:	2201      	movs	r2, #1
 80045f6:	f7ff fcd4 	bl	8003fa2 <bme280_set_regs>
 80045fa:	0003      	movs	r3, r0
 80045fc:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80045fe:	197b      	adds	r3, r7, r5
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b25b      	sxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d120      	bne.n	800464a <set_osr_humidity_settings+0x82>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8004608:	210c      	movs	r1, #12
 800460a:	187b      	adds	r3, r7, r1
 800460c:	22f4      	movs	r2, #244	; 0xf4
 800460e:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004610:	187b      	adds	r3, r7, r1
 8004612:	7818      	ldrb	r0, [r3, #0]
 8004614:	250f      	movs	r5, #15
 8004616:	197c      	adds	r4, r7, r5
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	220d      	movs	r2, #13
 800461c:	18b9      	adds	r1, r7, r2
 800461e:	2201      	movs	r2, #1
 8004620:	f7ff fc75 	bl	8003f0e <bme280_get_regs>
 8004624:	0003      	movs	r3, r0
 8004626:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004628:	197b      	adds	r3, r7, r5
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b25b      	sxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <set_osr_humidity_settings+0x82>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004632:	230f      	movs	r3, #15
 8004634:	18fc      	adds	r4, r7, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	220d      	movs	r2, #13
 800463a:	18b9      	adds	r1, r7, r2
 800463c:	220c      	movs	r2, #12
 800463e:	18b8      	adds	r0, r7, r2
 8004640:	2201      	movs	r2, #1
 8004642:	f7ff fcae 	bl	8003fa2 <bme280_set_regs>
 8004646:	0003      	movs	r3, r0
 8004648:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800464a:	230f      	movs	r3, #15
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b25b      	sxtb	r3, r3
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b004      	add	sp, #16
 8004658:	bdb0      	pop	{r4, r5, r7, pc}

0800465a <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 800465a:	b5b0      	push	{r4, r5, r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	230f      	movs	r3, #15
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	1c02      	adds	r2, r0, #0
 800466a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800466c:	2116      	movs	r1, #22
 800466e:	187b      	adds	r3, r7, r1
 8004670:	22f4      	movs	r2, #244	; 0xf4
 8004672:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004674:	187b      	adds	r3, r7, r1
 8004676:	7818      	ldrb	r0, [r3, #0]
 8004678:	2517      	movs	r5, #23
 800467a:	197c      	adds	r4, r7, r5
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2215      	movs	r2, #21
 8004680:	18b9      	adds	r1, r7, r2
 8004682:	2201      	movs	r2, #1
 8004684:	f7ff fc43 	bl	8003f0e <bme280_get_regs>
 8004688:	0003      	movs	r3, r0
 800468a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800468c:	197b      	adds	r3, r7, r5
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b25b      	sxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d125      	bne.n	80046e2 <set_osr_press_temp_settings+0x88>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8004696:	230f      	movs	r3, #15
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2201      	movs	r2, #1
 800469e:	4013      	ands	r3, r2
 80046a0:	d006      	beq.n	80046b0 <set_osr_press_temp_settings+0x56>
        {
            fill_osr_press_settings(&reg_data, settings);
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	2315      	movs	r3, #21
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	0011      	movs	r1, r2
 80046aa:	0018      	movs	r0, r3
 80046ac:	f000 f8a0 	bl	80047f0 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 80046b0:	230f      	movs	r3, #15
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2202      	movs	r2, #2
 80046b8:	4013      	ands	r3, r2
 80046ba:	d006      	beq.n	80046ca <set_osr_press_temp_settings+0x70>
        {
            fill_osr_temp_settings(&reg_data, settings);
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	2315      	movs	r3, #21
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 f8ae 	bl	8004826 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80046ca:	2317      	movs	r3, #23
 80046cc:	18fc      	adds	r4, r7, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2215      	movs	r2, #21
 80046d2:	18b9      	adds	r1, r7, r2
 80046d4:	2216      	movs	r2, #22
 80046d6:	18b8      	adds	r0, r7, r2
 80046d8:	2201      	movs	r2, #1
 80046da:	f7ff fc62 	bl	8003fa2 <bme280_set_regs>
 80046de:	0003      	movs	r3, r0
 80046e0:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80046e2:	2317      	movs	r3, #23
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b25b      	sxtb	r3, r3
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b006      	add	sp, #24
 80046f0:	bdb0      	pop	{r4, r5, r7, pc}

080046f2 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80046f2:	b5b0      	push	{r4, r5, r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	230f      	movs	r3, #15
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	1c02      	adds	r2, r0, #0
 8004702:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004704:	2116      	movs	r1, #22
 8004706:	187b      	adds	r3, r7, r1
 8004708:	22f5      	movs	r2, #245	; 0xf5
 800470a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800470c:	187b      	adds	r3, r7, r1
 800470e:	7818      	ldrb	r0, [r3, #0]
 8004710:	2517      	movs	r5, #23
 8004712:	197c      	adds	r4, r7, r5
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2215      	movs	r2, #21
 8004718:	18b9      	adds	r1, r7, r2
 800471a:	2201      	movs	r2, #1
 800471c:	f7ff fbf7 	bl	8003f0e <bme280_get_regs>
 8004720:	0003      	movs	r3, r0
 8004722:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004724:	197b      	adds	r3, r7, r5
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b25b      	sxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d125      	bne.n	800477a <set_filter_standby_settings+0x88>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800472e:	230f      	movs	r3, #15
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2208      	movs	r2, #8
 8004736:	4013      	ands	r3, r2
 8004738:	d006      	beq.n	8004748 <set_filter_standby_settings+0x56>
        {
            fill_filter_settings(&reg_data, settings);
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	2315      	movs	r3, #21
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	0011      	movs	r1, r2
 8004742:	0018      	movs	r0, r3
 8004744:	f000 f821 	bl	800478a <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8004748:	230f      	movs	r3, #15
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2210      	movs	r2, #16
 8004750:	4013      	ands	r3, r2
 8004752:	d006      	beq.n	8004762 <set_filter_standby_settings+0x70>
        {
            fill_standby_settings(&reg_data, settings);
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	2315      	movs	r3, #21
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	0011      	movs	r1, r2
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f82f 	bl	80047c0 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004762:	2317      	movs	r3, #23
 8004764:	18fc      	adds	r4, r7, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2215      	movs	r2, #21
 800476a:	18b9      	adds	r1, r7, r2
 800476c:	2216      	movs	r2, #22
 800476e:	18b8      	adds	r0, r7, r2
 8004770:	2201      	movs	r2, #1
 8004772:	f7ff fc16 	bl	8003fa2 <bme280_set_regs>
 8004776:	0003      	movs	r3, r0
 8004778:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800477a:	2317      	movs	r3, #23
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b25b      	sxtb	r3, r3
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b006      	add	sp, #24
 8004788:	bdb0      	pop	{r4, r5, r7, pc}

0800478a <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b25b      	sxtb	r3, r3
 800479a:	221c      	movs	r2, #28
 800479c:	4393      	bics	r3, r2
 800479e:	b25a      	sxtb	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	78db      	ldrb	r3, [r3, #3]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	211c      	movs	r1, #28
 80047aa:	400b      	ands	r3, r1
 80047ac:	b25b      	sxtb	r3, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	701a      	strb	r2, [r3, #0]
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b002      	add	sp, #8
 80047be:	bd80      	pop	{r7, pc}

080047c0 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b25b      	sxtb	r3, r3
 80047d0:	221f      	movs	r2, #31
 80047d2:	4013      	ands	r3, r2
 80047d4:	b25a      	sxtb	r2, r3
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	015b      	lsls	r3, r3, #5
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	b25b      	sxtb	r3, r3
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	701a      	strb	r2, [r3, #0]
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b25b      	sxtb	r3, r3
 8004800:	221c      	movs	r2, #28
 8004802:	4393      	bics	r3, r2
 8004804:	b25a      	sxtb	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	b25b      	sxtb	r3, r3
 800480e:	211c      	movs	r1, #28
 8004810:	400b      	ands	r3, r1
 8004812:	b25b      	sxtb	r3, r3
 8004814:	4313      	orrs	r3, r2
 8004816:	b25b      	sxtb	r3, r3
 8004818:	b2da      	uxtb	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	701a      	strb	r2, [r3, #0]
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}

08004826 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b25b      	sxtb	r3, r3
 8004836:	221f      	movs	r2, #31
 8004838:	4013      	ands	r3, r2
 800483a:	b25a      	sxtb	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	015b      	lsls	r3, r3, #5
 8004842:	b25b      	sxtb	r3, r3
 8004844:	4313      	orrs	r3, r2
 8004846:	b25b      	sxtb	r3, r3
 8004848:	b2da      	uxtb	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	701a      	strb	r2, [r3, #0]
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}

08004856 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2207      	movs	r2, #7
 8004866:	4013      	ands	r3, r2
 8004868:	b2da      	uxtb	r2, r3
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3302      	adds	r3, #2
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	109b      	asrs	r3, r3, #2
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2207      	movs	r2, #7
 800487a:	4013      	ands	r3, r2
 800487c:	b2da      	uxtb	r2, r3
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3302      	adds	r3, #2
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	b2da      	uxtb	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3303      	adds	r3, #3
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	109b      	asrs	r3, r3, #2
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2207      	movs	r2, #7
 800489c:	4013      	ands	r3, r2
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3303      	adds	r3, #3
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	711a      	strb	r2, [r3, #4]
}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}

080048ba <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80048ba:	b5b0      	push	{r4, r5, r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	0002      	movs	r2, r0
 80048c2:	6039      	str	r1, [r7, #0]
 80048c4:	1dfb      	adds	r3, r7, #7
 80048c6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80048c8:	210e      	movs	r1, #14
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	22f4      	movs	r2, #244	; 0xf4
 80048ce:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	7818      	ldrb	r0, [r3, #0]
 80048d4:	250f      	movs	r5, #15
 80048d6:	197c      	adds	r4, r7, r5
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	220d      	movs	r2, #13
 80048dc:	18b9      	adds	r1, r7, r2
 80048de:	2201      	movs	r2, #1
 80048e0:	f7ff fb15 	bl	8003f0e <bme280_get_regs>
 80048e4:	0003      	movs	r3, r0
 80048e6:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 80048e8:	197b      	adds	r3, r7, r5
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d11c      	bne.n	800492c <write_power_mode+0x72>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80048f2:	200d      	movs	r0, #13
 80048f4:	183b      	adds	r3, r7, r0
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	2203      	movs	r2, #3
 80048fc:	4393      	bics	r3, r2
 80048fe:	b25a      	sxtb	r2, r3
 8004900:	1dfb      	adds	r3, r7, #7
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b25b      	sxtb	r3, r3
 8004906:	2103      	movs	r1, #3
 8004908:	400b      	ands	r3, r1
 800490a:	b25b      	sxtb	r3, r3
 800490c:	4313      	orrs	r3, r2
 800490e:	b25b      	sxtb	r3, r3
 8004910:	b2da      	uxtb	r2, r3
 8004912:	183b      	adds	r3, r7, r0
 8004914:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004916:	230f      	movs	r3, #15
 8004918:	18fc      	adds	r4, r7, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	1839      	adds	r1, r7, r0
 800491e:	220e      	movs	r2, #14
 8004920:	18b8      	adds	r0, r7, r2
 8004922:	2201      	movs	r2, #1
 8004924:	f7ff fb3d 	bl	8003fa2 <bme280_set_regs>
 8004928:	0003      	movs	r3, r0
 800492a:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800492c:	230f      	movs	r3, #15
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b25b      	sxtb	r3, r3
}
 8004934:	0018      	movs	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	b004      	add	sp, #16
 800493a:	bdb0      	pop	{r4, r5, r7, pc}

0800493c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800493c:	b5b0      	push	{r4, r5, r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004944:	2517      	movs	r5, #23
 8004946:	197c      	adds	r4, r7, r5
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2210      	movs	r2, #16
 800494c:	18b9      	adds	r1, r7, r2
 800494e:	2204      	movs	r2, #4
 8004950:	20f2      	movs	r0, #242	; 0xf2
 8004952:	f7ff fadc 	bl	8003f0e <bme280_get_regs>
 8004956:	0003      	movs	r3, r0
 8004958:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800495a:	197b      	adds	r3, r7, r5
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b25b      	sxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11f      	bne.n	80049a4 <put_device_to_sleep+0x68>
    {
        parse_device_settings(reg_data, &settings);
 8004964:	2308      	movs	r3, #8
 8004966:	18fa      	adds	r2, r7, r3
 8004968:	2310      	movs	r3, #16
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	0011      	movs	r1, r2
 800496e:	0018      	movs	r0, r3
 8004970:	f7ff ff71 	bl	8004856 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8004974:	2517      	movs	r5, #23
 8004976:	197c      	adds	r4, r7, r5
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	0018      	movs	r0, r3
 800497c:	f7ff fc8b 	bl	8004296 <bme280_soft_reset>
 8004980:	0003      	movs	r3, r0
 8004982:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004984:	197b      	adds	r3, r7, r5
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b25b      	sxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <put_device_to_sleep+0x68>
        {
            rslt = reload_device_settings(&settings, dev);
 800498e:	2317      	movs	r3, #23
 8004990:	18fc      	adds	r4, r7, r3
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	2308      	movs	r3, #8
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	0011      	movs	r1, r2
 800499a:	0018      	movs	r0, r3
 800499c:	f000 f80a 	bl	80049b4 <reload_device_settings>
 80049a0:	0003      	movs	r3, r0
 80049a2:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 80049a4:	2317      	movs	r3, #23
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b25b      	sxtb	r3, r3
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b006      	add	sp, #24
 80049b2:	bdb0      	pop	{r4, r5, r7, pc}

080049b4 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80049b4:	b5b0      	push	{r4, r5, r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80049be:	250f      	movs	r5, #15
 80049c0:	197c      	adds	r4, r7, r5
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0019      	movs	r1, r3
 80049c8:	201f      	movs	r0, #31
 80049ca:	f7ff fdc7 	bl	800455c <set_osr_settings>
 80049ce:	0003      	movs	r3, r0
 80049d0:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 80049d2:	197b      	adds	r3, r7, r5
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <reload_device_settings+0x3c>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80049dc:	230f      	movs	r3, #15
 80049de:	18fc      	adds	r4, r7, r3
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0019      	movs	r1, r3
 80049e6:	201f      	movs	r0, #31
 80049e8:	f7ff fe83 	bl	80046f2 <set_filter_standby_settings>
 80049ec:	0003      	movs	r3, r0
 80049ee:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80049f0:	230f      	movs	r3, #15
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b25b      	sxtb	r3, r3
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bdb0      	pop	{r4, r5, r7, pc}

08004a00 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <compensate_temperature+0xb8>)
 8004a0c:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <compensate_temperature+0xbc>)
 8004a10:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	08db      	lsrs	r3, r3, #3
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	8812      	ldrh	r2, [r2, #0]
 8004a1c:	0052      	lsls	r2, r2, #1
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2202      	movs	r2, #2
 8004a26:	5e9b      	ldrsh	r3, [r3, r2]
 8004a28:	001a      	movs	r2, r3
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4353      	muls	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da02      	bge.n	8004a38 <compensate_temperature+0x38>
 8004a32:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <compensate_temperature+0xc0>)
 8004a34:	4694      	mov	ip, r2
 8004a36:	4463      	add	r3, ip
 8004a38:	12db      	asrs	r3, r3, #11
 8004a3a:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	8812      	ldrh	r2, [r2, #0]
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4353      	muls	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	da02      	bge.n	8004a5a <compensate_temperature+0x5a>
 8004a54:	4a1b      	ldr	r2, [pc, #108]	; (8004ac4 <compensate_temperature+0xc4>)
 8004a56:	4694      	mov	ip, r2
 8004a58:	4463      	add	r3, ip
 8004a5a:	131b      	asrs	r3, r3, #12
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2104      	movs	r1, #4
 8004a62:	5e5b      	ldrsh	r3, [r3, r1]
 8004a64:	4353      	muls	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da02      	bge.n	8004a70 <compensate_temperature+0x70>
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <compensate_temperature+0xc8>)
 8004a6c:	4694      	mov	ip, r2
 8004a6e:	4463      	add	r3, ip
 8004a70:	139b      	asrs	r3, r3, #14
 8004a72:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	18d2      	adds	r2, r2, r3
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a82:	0013      	movs	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	3380      	adds	r3, #128	; 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da00      	bge.n	8004a90 <compensate_temperature+0x90>
 8004a8e:	33ff      	adds	r3, #255	; 0xff
 8004a90:	121b      	asrs	r3, r3, #8
 8004a92:	61fb      	str	r3, [r7, #28]
    if (temperature < temperature_min)
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	da02      	bge.n	8004aa2 <compensate_temperature+0xa2>
    {
        temperature = temperature_min;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e005      	b.n	8004aae <compensate_temperature+0xae>
    }
    else if (temperature > temperature_max)
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	dd01      	ble.n	8004aae <compensate_temperature+0xae>
    {
        temperature = temperature_max;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	61fb      	str	r3, [r7, #28]
    }

    return temperature;
 8004aae:	69fb      	ldr	r3, [r7, #28]
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b008      	add	sp, #32
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	fffff060 	.word	0xfffff060
 8004abc:	00002134 	.word	0x00002134
 8004ac0:	000007ff 	.word	0x000007ff
 8004ac4:	00000fff 	.word	0x00000fff
 8004ac8:	00003fff 	.word	0x00003fff

08004acc <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 8004ad6:	4b75      	ldr	r3, [pc, #468]	; (8004cac <compensate_pressure+0x1e0>)
 8004ad8:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 8004ada:	4b75      	ldr	r3, [pc, #468]	; (8004cb0 <compensate_pressure+0x1e4>)
 8004adc:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da00      	bge.n	8004ae8 <compensate_pressure+0x1c>
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	105b      	asrs	r3, r3, #1
 8004aea:	4a72      	ldr	r2, [pc, #456]	; (8004cb4 <compensate_pressure+0x1e8>)
 8004aec:	4694      	mov	ip, r2
 8004aee:	4463      	add	r3, ip
 8004af0:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da00      	bge.n	8004afa <compensate_pressure+0x2e>
 8004af8:	3303      	adds	r3, #3
 8004afa:	109b      	asrs	r3, r3, #2
 8004afc:	001a      	movs	r2, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da00      	bge.n	8004b06 <compensate_pressure+0x3a>
 8004b04:	3303      	adds	r3, #3
 8004b06:	109b      	asrs	r3, r3, #2
 8004b08:	4353      	muls	r3, r2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da02      	bge.n	8004b14 <compensate_pressure+0x48>
 8004b0e:	4a6a      	ldr	r2, [pc, #424]	; (8004cb8 <compensate_pressure+0x1ec>)
 8004b10:	4694      	mov	ip, r2
 8004b12:	4463      	add	r3, ip
 8004b14:	12db      	asrs	r3, r3, #11
 8004b16:	001a      	movs	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	5e5b      	ldrsh	r3, [r3, r1]
 8004b1e:	4353      	muls	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	220e      	movs	r2, #14
 8004b26:	5e9b      	ldrsh	r3, [r3, r2]
 8004b28:	001a      	movs	r2, r3
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4353      	muls	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	18d3      	adds	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da00      	bge.n	8004b3e <compensate_pressure+0x72>
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	109b      	asrs	r3, r3, #2
 8004b40:	001a      	movs	r2, r3
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	210c      	movs	r1, #12
 8004b46:	5e5b      	ldrsh	r3, [r3, r1]
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	220a      	movs	r2, #10
 8004b52:	5e9b      	ldrsh	r3, [r3, r2]
 8004b54:	001a      	movs	r2, r3
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da00      	bge.n	8004b5e <compensate_pressure+0x92>
 8004b5c:	3303      	adds	r3, #3
 8004b5e:	109b      	asrs	r3, r3, #2
 8004b60:	0019      	movs	r1, r3
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	da00      	bge.n	8004b6a <compensate_pressure+0x9e>
 8004b68:	3303      	adds	r3, #3
 8004b6a:	109b      	asrs	r3, r3, #2
 8004b6c:	434b      	muls	r3, r1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da02      	bge.n	8004b78 <compensate_pressure+0xac>
 8004b72:	4952      	ldr	r1, [pc, #328]	; (8004cbc <compensate_pressure+0x1f0>)
 8004b74:	468c      	mov	ip, r1
 8004b76:	4463      	add	r3, ip
 8004b78:	135b      	asrs	r3, r3, #13
 8004b7a:	4353      	muls	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da00      	bge.n	8004b82 <compensate_pressure+0xb6>
 8004b80:	3307      	adds	r3, #7
 8004b82:	10db      	asrs	r3, r3, #3
 8004b84:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	5e9b      	ldrsh	r3, [r3, r2]
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4353      	muls	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da00      	bge.n	8004b98 <compensate_pressure+0xcc>
 8004b96:	3301      	adds	r3, #1
 8004b98:	105b      	asrs	r3, r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da02      	bge.n	8004bac <compensate_pressure+0xe0>
 8004ba6:	4a46      	ldr	r2, [pc, #280]	; (8004cc0 <compensate_pressure+0x1f4>)
 8004ba8:	4694      	mov	ip, r2
 8004baa:	4463      	add	r3, ip
 8004bac:	149b      	asrs	r3, r3, #18
 8004bae:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	0212      	lsls	r2, r2, #8
 8004bb6:	4694      	mov	ip, r2
 8004bb8:	4463      	add	r3, ip
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	88d2      	ldrh	r2, [r2, #6]
 8004bbe:	4353      	muls	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	da02      	bge.n	8004bca <compensate_pressure+0xfe>
 8004bc4:	4a3f      	ldr	r2, [pc, #252]	; (8004cc4 <compensate_pressure+0x1f8>)
 8004bc6:	4694      	mov	ip, r2
 8004bc8:	4463      	add	r3, ip
 8004bca:	13db      	asrs	r3, r3, #15
 8004bcc:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d064      	beq.n	8004c9e <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2280      	movs	r2, #128	; 0x80
 8004bda:	0352      	lsls	r2, r2, #13
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da02      	bge.n	8004bec <compensate_pressure+0x120>
 8004be6:	4a38      	ldr	r2, [pc, #224]	; (8004cc8 <compensate_pressure+0x1fc>)
 8004be8:	4694      	mov	ip, r2
 8004bea:	4463      	add	r3, ip
 8004bec:	131b      	asrs	r3, r3, #12
 8004bee:	001a      	movs	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	4a35      	ldr	r2, [pc, #212]	; (8004ccc <compensate_pressure+0x200>)
 8004bf6:	4353      	muls	r3, r2
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < 0x80000000)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	db09      	blt.n	8004c14 <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	0011      	movs	r1, r2
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fb fa99 	bl	8000140 <__udivsi3>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
 8004c12:	e007      	b.n	8004c24 <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	0019      	movs	r1, r3
 8004c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1a:	f7fb fa91 	bl	8000140 <__udivsi3>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
        }
        var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2216      	movs	r2, #22
 8004c28:	5e9b      	ldrsh	r3, [r3, r2]
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c32:	08d2      	lsrs	r2, r2, #3
 8004c34:	4353      	muls	r3, r2
 8004c36:	0b5b      	lsrs	r3, r3, #13
 8004c38:	434b      	muls	r3, r1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	da02      	bge.n	8004c44 <compensate_pressure+0x178>
 8004c3e:	4a22      	ldr	r2, [pc, #136]	; (8004cc8 <compensate_pressure+0x1fc>)
 8004c40:	4694      	mov	ip, r2
 8004c42:	4463      	add	r3, ip
 8004c44:	131b      	asrs	r3, r3, #12
 8004c46:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	001a      	movs	r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2114      	movs	r1, #20
 8004c52:	5e5b      	ldrsh	r3, [r3, r1]
 8004c54:	4353      	muls	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da02      	bge.n	8004c60 <compensate_pressure+0x194>
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <compensate_pressure+0x1f0>)
 8004c5c:	4694      	mov	ip, r2
 8004c5e:	4463      	add	r3, ip
 8004c60:	135b      	asrs	r3, r3, #13
 8004c62:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	18d3      	adds	r3, r2, r3
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	2112      	movs	r1, #18
 8004c6e:	5e52      	ldrsh	r2, [r2, r1]
 8004c70:	189b      	adds	r3, r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da00      	bge.n	8004c78 <compensate_pressure+0x1ac>
 8004c76:	330f      	adds	r3, #15
 8004c78:	111b      	asrs	r3, r3, #4
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	18d3      	adds	r3, r2, r3
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < pressure_min)
 8004c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d202      	bcs.n	8004c90 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	e008      	b.n	8004ca2 <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d904      	bls.n	8004ca2 <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9c:	e001      	b.n	8004ca2 <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return pressure;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b00a      	add	sp, #40	; 0x28
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	00007530 	.word	0x00007530
 8004cb0:	0001adb0 	.word	0x0001adb0
 8004cb4:	ffff0600 	.word	0xffff0600
 8004cb8:	000007ff 	.word	0x000007ff
 8004cbc:	00001fff 	.word	0x00001fff
 8004cc0:	0003ffff 	.word	0x0003ffff
 8004cc4:	00007fff 	.word	0x00007fff
 8004cc8:	00000fff 	.word	0x00000fff
 8004ccc:	00000c35 	.word	0x00000c35

08004cd0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 8004cda:	23c8      	movs	r3, #200	; 0xc8
 8004cdc:	025b      	lsls	r3, r3, #9
 8004cde:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	4a53      	ldr	r2, [pc, #332]	; (8004e34 <compensate_humidity+0x164>)
 8004ce6:	4694      	mov	ip, r2
 8004ce8:	4463      	add	r3, ip
 8004cea:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	039b      	lsls	r3, r3, #14
 8004cf2:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	221e      	movs	r2, #30
 8004cf8:	5e9b      	ldrsh	r3, [r3, r2]
 8004cfa:	051b      	lsls	r3, r3, #20
 8004cfc:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_H5) * var1;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2220      	movs	r2, #32
 8004d02:	5e9b      	ldrsh	r3, [r3, r2]
 8004d04:	001a      	movs	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4353      	muls	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	1ad2      	subs	r2, r2, r3
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2280      	movs	r2, #128	; 0x80
 8004d18:	01d2      	lsls	r2, r2, #7
 8004d1a:	4694      	mov	ip, r2
 8004d1c:	4463      	add	r3, ip
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da02      	bge.n	8004d28 <compensate_humidity+0x58>
 8004d22:	4a45      	ldr	r2, [pc, #276]	; (8004e38 <compensate_humidity+0x168>)
 8004d24:	4694      	mov	ip, r2
 8004d26:	4463      	add	r3, ip
 8004d28:	13db      	asrs	r3, r3, #15
 8004d2a:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2222      	movs	r2, #34	; 0x22
 8004d30:	569b      	ldrsb	r3, [r3, r2]
 8004d32:	001a      	movs	r2, r3
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4353      	muls	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da02      	bge.n	8004d42 <compensate_humidity+0x72>
 8004d3c:	4a3f      	ldr	r2, [pc, #252]	; (8004e3c <compensate_humidity+0x16c>)
 8004d3e:	4694      	mov	ip, r2
 8004d40:	4463      	add	r3, ip
 8004d42:	129b      	asrs	r3, r3, #10
 8004d44:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	7f1b      	ldrb	r3, [r3, #28]
 8004d4a:	001a      	movs	r2, r3
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4353      	muls	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da02      	bge.n	8004d5a <compensate_humidity+0x8a>
 8004d54:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <compensate_humidity+0x170>)
 8004d56:	4694      	mov	ip, r2
 8004d58:	4463      	add	r3, ip
 8004d5a:	12db      	asrs	r3, r3, #11
 8004d5c:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	0212      	lsls	r2, r2, #8
 8004d64:	4694      	mov	ip, r2
 8004d66:	4463      	add	r3, ip
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4353      	muls	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	da02      	bge.n	8004d76 <compensate_humidity+0xa6>
 8004d70:	4a32      	ldr	r2, [pc, #200]	; (8004e3c <compensate_humidity+0x16c>)
 8004d72:	4694      	mov	ip, r2
 8004d74:	4463      	add	r3, ip
 8004d76:	129b      	asrs	r3, r3, #10
 8004d78:	2280      	movs	r2, #128	; 0x80
 8004d7a:	0392      	lsls	r2, r2, #14
 8004d7c:	4694      	mov	ip, r2
 8004d7e:	4463      	add	r3, ip
 8004d80:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	221a      	movs	r2, #26
 8004d86:	5e9b      	ldrsh	r3, [r3, r2]
 8004d88:	001a      	movs	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4353      	muls	r3, r2
 8004d8e:	2280      	movs	r2, #128	; 0x80
 8004d90:	0192      	lsls	r2, r2, #6
 8004d92:	4694      	mov	ip, r2
 8004d94:	4463      	add	r3, ip
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da02      	bge.n	8004da0 <compensate_humidity+0xd0>
 8004d9a:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <compensate_humidity+0x174>)
 8004d9c:	4694      	mov	ip, r2
 8004d9e:	4463      	add	r3, ip
 8004da0:	139b      	asrs	r3, r3, #14
 8004da2:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4353      	muls	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da02      	bge.n	8004db8 <compensate_humidity+0xe8>
 8004db2:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <compensate_humidity+0x168>)
 8004db4:	4694      	mov	ip, r2
 8004db6:	4463      	add	r3, ip
 8004db8:	13db      	asrs	r3, r3, #15
 8004dba:	001a      	movs	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	da02      	bge.n	8004dc8 <compensate_humidity+0xf8>
 8004dc2:	491d      	ldr	r1, [pc, #116]	; (8004e38 <compensate_humidity+0x168>)
 8004dc4:	468c      	mov	ip, r1
 8004dc6:	4463      	add	r3, ip
 8004dc8:	13db      	asrs	r3, r3, #15
 8004dca:	4353      	muls	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da00      	bge.n	8004dd2 <compensate_humidity+0x102>
 8004dd0:	337f      	adds	r3, #127	; 0x7f
 8004dd2:	11db      	asrs	r3, r3, #7
 8004dd4:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	7e1b      	ldrb	r3, [r3, #24]
 8004dda:	001a      	movs	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4353      	muls	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da00      	bge.n	8004de6 <compensate_humidity+0x116>
 8004de4:	330f      	adds	r3, #15
 8004de6:	111b      	asrs	r3, r3, #4
 8004de8:	425b      	negs	r3, r3
 8004dea:	001a      	movs	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da00      	bge.n	8004dfa <compensate_humidity+0x12a>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	22c8      	movs	r2, #200	; 0xc8
 8004e00:	0552      	lsls	r2, r2, #21
 8004e02:	4293      	cmp	r3, r2
 8004e04:	dd01      	ble.n	8004e0a <compensate_humidity+0x13a>
 8004e06:	23c8      	movs	r3, #200	; 0xc8
 8004e08:	055b      	lsls	r3, r3, #21
 8004e0a:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da02      	bge.n	8004e18 <compensate_humidity+0x148>
 8004e12:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <compensate_humidity+0x178>)
 8004e14:	4694      	mov	ip, r2
 8004e16:	4463      	add	r3, ip
 8004e18:	131b      	asrs	r3, r3, #12
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
    if (humidity > humidity_max)
 8004e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d901      	bls.n	8004e28 <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return humidity;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b00a      	add	sp, #40	; 0x28
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	fffed400 	.word	0xfffed400
 8004e38:	00007fff 	.word	0x00007fff
 8004e3c:	000003ff 	.word	0x000003ff
 8004e40:	000007ff 	.word	0x000007ff
 8004e44:	00003fff 	.word	0x00003fff
 8004e48:	00000fff 	.word	0x00000fff

08004e4c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e4e:	b08b      	sub	sp, #44	; 0x2c
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004e54:	2526      	movs	r5, #38	; 0x26
 8004e56:	197b      	adds	r3, r7, r5
 8004e58:	2288      	movs	r2, #136	; 0x88
 8004e5a:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8004e5c:	260c      	movs	r6, #12
 8004e5e:	19bb      	adds	r3, r7, r6
 8004e60:	0018      	movs	r0, r3
 8004e62:	231a      	movs	r3, #26
 8004e64:	001a      	movs	r2, r3
 8004e66:	2100      	movs	r1, #0
 8004e68:	f005 f887 	bl	8009f7a <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004e6c:	2327      	movs	r3, #39	; 0x27
 8004e6e:	18fc      	adds	r4, r7, r3
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	19b9      	adds	r1, r7, r6
 8004e74:	197b      	adds	r3, r7, r5
 8004e76:	7818      	ldrb	r0, [r3, #0]
 8004e78:	0013      	movs	r3, r2
 8004e7a:	221a      	movs	r2, #26
 8004e7c:	f7ff f847 	bl	8003f0e <bme280_get_regs>
 8004e80:	0003      	movs	r3, r0
 8004e82:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004e84:	2327      	movs	r3, #39	; 0x27
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	b25b      	sxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d122      	bne.n	8004ed6 <get_calib_data+0x8a>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	250c      	movs	r5, #12
 8004e94:	197b      	adds	r3, r7, r5
 8004e96:	0011      	movs	r1, r2
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 f85b 	bl	8004f54 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8004e9e:	2026      	movs	r0, #38	; 0x26
 8004ea0:	183b      	adds	r3, r7, r0
 8004ea2:	22e1      	movs	r2, #225	; 0xe1
 8004ea4:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004ea6:	2627      	movs	r6, #39	; 0x27
 8004ea8:	19bc      	adds	r4, r7, r6
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	1979      	adds	r1, r7, r5
 8004eae:	183b      	adds	r3, r7, r0
 8004eb0:	7818      	ldrb	r0, [r3, #0]
 8004eb2:	0013      	movs	r3, r2
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	f7ff f82a 	bl	8003f0e <bme280_get_regs>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004ebe:	19bb      	adds	r3, r7, r6
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <get_calib_data+0x8a>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	230c      	movs	r3, #12
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	0011      	movs	r1, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 f8ec 	bl	80050ae <parse_humidity_calib_data>
        }
    }

    return rslt;
 8004ed6:	2327      	movs	r3, #39	; 0x27
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b25b      	sxtb	r3, r3
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b00b      	add	sp, #44	; 0x2c
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	1cfb      	adds	r3, r7, #3
 8004ef6:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8004ef8:	2317      	movs	r3, #23
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	2201      	movs	r2, #1
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e01d      	b.n	8004f3e <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8004f02:	2017      	movs	r0, #23
 8004f04:	183b      	adds	r3, r7, r0
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	18d2      	adds	r2, r2, r3
 8004f0c:	183b      	adds	r3, r7, r0
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	3b01      	subs	r3, #1
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	18cb      	adds	r3, r1, r3
 8004f18:	7812      	ldrb	r2, [r2, #0]
 8004f1a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8004f1c:	183b      	adds	r3, r7, r0
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	18d2      	adds	r2, r2, r3
 8004f24:	183b      	adds	r3, r7, r0
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	185b      	adds	r3, r3, r1
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8004f34:	183b      	adds	r3, r7, r0
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	183b      	adds	r3, r7, r0
 8004f3a:	3201      	adds	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	2317      	movs	r3, #23
 8004f40:	18fa      	adds	r2, r7, r3
 8004f42:	1cfb      	adds	r3, r7, #3
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3da      	bcc.n	8004f02 <interleave_reg_addr+0x1c>
    }
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b006      	add	sp, #24
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	3310      	adds	r3, #16
 8004f62:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3301      	adds	r3, #1
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	b21a      	sxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	b21b      	sxth	r3, r3
 8004f74:	4313      	orrs	r3, r2
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3303      	adds	r3, #3
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	b21a      	sxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	b21b      	sxth	r3, r3
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b21a      	sxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3305      	adds	r3, #5
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	b21a      	sxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b21a      	sxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3307      	adds	r3, #7
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3306      	adds	r3, #6
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b21b      	sxth	r3, r3
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3309      	adds	r3, #9
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	b21a      	sxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b21b      	sxth	r3, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b21a      	sxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	330b      	adds	r3, #11
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	b21a      	sxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	330a      	adds	r3, #10
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b21b      	sxth	r3, r3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b21a      	sxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	330d      	adds	r3, #13
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	b21a      	sxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	330c      	adds	r3, #12
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b21b      	sxth	r3, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	b21a      	sxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	330f      	adds	r3, #15
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	b21a      	sxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	330e      	adds	r3, #14
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b21b      	sxth	r3, r3
 800502e:	4313      	orrs	r3, r2
 8005030:	b21a      	sxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3311      	adds	r3, #17
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	b21a      	sxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3310      	adds	r3, #16
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b21b      	sxth	r3, r3
 8005048:	4313      	orrs	r3, r2
 800504a:	b21a      	sxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3313      	adds	r3, #19
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	b21a      	sxth	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3312      	adds	r3, #18
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b21b      	sxth	r3, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	b21a      	sxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3315      	adds	r3, #21
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	b21a      	sxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3314      	adds	r3, #20
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b21b      	sxth	r3, r3
 800507c:	4313      	orrs	r3, r2
 800507e:	b21a      	sxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3317      	adds	r3, #23
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	b21a      	sxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3316      	adds	r3, #22
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b21b      	sxth	r3, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	b21a      	sxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	7e5a      	ldrb	r2, [r3, #25]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	761a      	strb	r2, [r3, #24]
}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b004      	add	sp, #16
 80050ac:	bd80      	pop	{r7, pc}

080050ae <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80050ae:	b590      	push	{r4, r7, lr}
 80050b0:	b087      	sub	sp, #28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	3310      	adds	r3, #16
 80050bc:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3301      	adds	r3, #1
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	b21a      	sxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b21b      	sxth	r3, r3
 80050ce:	4313      	orrs	r3, r2
 80050d0:	b21a      	sxth	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	789a      	ldrb	r2, [r3, #2]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3303      	adds	r3, #3
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	b25b      	sxtb	r3, r3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	2012      	movs	r0, #18
 80050ee:	183b      	adds	r3, r7, r0
 80050f0:	801a      	strh	r2, [r3, #0]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	b21a      	sxth	r2, r3
 80050fa:	2410      	movs	r4, #16
 80050fc:	193b      	adds	r3, r7, r4
 80050fe:	210f      	movs	r1, #15
 8005100:	400a      	ands	r2, r1
 8005102:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8005104:	183a      	adds	r2, r7, r0
 8005106:	193b      	adds	r3, r7, r4
 8005108:	8812      	ldrh	r2, [r2, #0]
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	b21a      	sxth	r2, r3
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3305      	adds	r3, #5
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	b25b      	sxtb	r3, r3
 800511c:	b29b      	uxth	r3, r3
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	b29a      	uxth	r2, r3
 8005122:	210e      	movs	r1, #14
 8005124:	187b      	adds	r3, r7, r1
 8005126:	801a      	strh	r2, [r3, #0]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	b2da      	uxtb	r2, r3
 8005132:	200c      	movs	r0, #12
 8005134:	183b      	adds	r3, r7, r0
 8005136:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8005138:	187a      	adds	r2, r7, r1
 800513a:	183b      	adds	r3, r7, r0
 800513c:	8812      	ldrh	r2, [r2, #0]
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	4313      	orrs	r3, r2
 8005142:	b21a      	sxth	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3306      	adds	r3, #6
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b259      	sxtb	r1, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2222      	movs	r2, #34	; 0x22
 8005154:	5499      	strb	r1, [r3, r2]
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b007      	add	sp, #28
 800515c:	bd90      	pop	{r4, r7, pc}

0800515e <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	0002      	movs	r2, r0
 8005166:	1dfb      	adds	r3, r7, #7
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	1dbb      	adds	r3, r7, #6
 800516c:	1c0a      	adds	r2, r1, #0
 800516e:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 8005170:	230f      	movs	r3, #15
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8005178:	1dfb      	adds	r3, r7, #7
 800517a:	1dba      	adds	r2, r7, #6
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	7812      	ldrb	r2, [r2, #0]
 8005180:	4013      	ands	r3, r2
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <are_settings_changed+0x34>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8005188:	230f      	movs	r3, #15
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	2201      	movs	r2, #1
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e003      	b.n	800519a <are_settings_changed+0x3c>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8005192:	230f      	movs	r3, #15
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 800519a:	230f      	movs	r3, #15
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	781b      	ldrb	r3, [r3, #0]
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b004      	add	sp, #16
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <null_ptr_check+0x26>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <null_ptr_check+0x26>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <null_ptr_check+0x26>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80051ce:	230f      	movs	r3, #15
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	22ff      	movs	r2, #255	; 0xff
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e003      	b.n	80051e0 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80051d8:	230f      	movs	r3, #15
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80051e0:	230f      	movs	r3, #15
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	b25b      	sxtb	r3, r3
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b004      	add	sp, #16
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <wifiInit>:

/**
 * @brief initializes the module by setting mode as client, sets baud rate and UART format
 */
void wifiInit(UART_HandleTypeDef huart1)
{
 80051f0:	b084      	sub	sp, #16
 80051f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f4:	b09b      	sub	sp, #108	; 0x6c
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	2478      	movs	r4, #120	; 0x78
 80051fa:	0025      	movs	r5, r4
 80051fc:	2608      	movs	r6, #8
 80051fe:	46b4      	mov	ip, r6
 8005200:	44bc      	add	ip, r7
 8005202:	4464      	add	r4, ip
 8005204:	6020      	str	r0, [r4, #0]
 8005206:	6061      	str	r1, [r4, #4]
 8005208:	60a2      	str	r2, [r4, #8]
 800520a:	60e3      	str	r3, [r4, #12]
	char set[] = "AT+CWMODE=1\r\n";
 800520c:	2458      	movs	r4, #88	; 0x58
 800520e:	193b      	adds	r3, r7, r4
 8005210:	4a39      	ldr	r2, [pc, #228]	; (80052f8 <wifiInit+0x108>)
 8005212:	ca43      	ldmia	r2!, {r0, r1, r6}
 8005214:	c343      	stmia	r3!, {r0, r1, r6}
 8005216:	8812      	ldrh	r2, [r2, #0]
 8005218:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) set, strlen(set), 500);
 800521a:	193b      	adds	r3, r7, r4
 800521c:	0018      	movs	r0, r3
 800521e:	f7fa ff73 	bl	8000108 <strlen>
 8005222:	0003      	movs	r3, r0
 8005224:	b29a      	uxth	r2, r3
 8005226:	23fa      	movs	r3, #250	; 0xfa
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	1939      	adds	r1, r7, r4
 800522c:	002c      	movs	r4, r5
 800522e:	2608      	movs	r6, #8
 8005230:	19b8      	adds	r0, r7, r6
 8005232:	1900      	adds	r0, r0, r4
 8005234:	f004 f85a 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(5);
 8005238:	2005      	movs	r0, #5
 800523a:	f000 fa19 	bl	8005670 <HAL_Delay>

	char uart_set[] = "AT+UART_CUR=115200,8,1,0,0\r\n";
 800523e:	2038      	movs	r0, #56	; 0x38
 8005240:	183b      	adds	r3, r7, r0
 8005242:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <wifiInit+0x10c>)
 8005244:	ca62      	ldmia	r2!, {r1, r5, r6}
 8005246:	c362      	stmia	r3!, {r1, r5, r6}
 8005248:	ca62      	ldmia	r2!, {r1, r5, r6}
 800524a:	c362      	stmia	r3!, {r1, r5, r6}
 800524c:	6811      	ldr	r1, [r2, #0]
 800524e:	6019      	str	r1, [r3, #0]
 8005250:	7912      	ldrb	r2, [r2, #4]
 8005252:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) uart_set, strlen(uart_set), 500);
 8005254:	0005      	movs	r5, r0
 8005256:	183b      	adds	r3, r7, r0
 8005258:	0018      	movs	r0, r3
 800525a:	f7fa ff55 	bl	8000108 <strlen>
 800525e:	0003      	movs	r3, r0
 8005260:	b29a      	uxth	r2, r3
 8005262:	23fa      	movs	r3, #250	; 0xfa
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	0028      	movs	r0, r5
 8005268:	1839      	adds	r1, r7, r0
 800526a:	2608      	movs	r6, #8
 800526c:	19b8      	adds	r0, r7, r6
 800526e:	1900      	adds	r0, r0, r4
 8005270:	f004 f83c 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(5);
 8005274:	2005      	movs	r0, #5
 8005276:	f000 f9fb 	bl	8005670 <HAL_Delay>

	char uart_set_def[] = "AT+UART_DEF=115200,8,1,0,0\r\n";
 800527a:	2018      	movs	r0, #24
 800527c:	183b      	adds	r3, r7, r0
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <wifiInit+0x110>)
 8005280:	ca62      	ldmia	r2!, {r1, r5, r6}
 8005282:	c362      	stmia	r3!, {r1, r5, r6}
 8005284:	ca62      	ldmia	r2!, {r1, r5, r6}
 8005286:	c362      	stmia	r3!, {r1, r5, r6}
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	6019      	str	r1, [r3, #0]
 800528c:	7912      	ldrb	r2, [r2, #4]
 800528e:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) uart_set_def, strlen(uart_set_def), 500);
 8005290:	0005      	movs	r5, r0
 8005292:	183b      	adds	r3, r7, r0
 8005294:	0018      	movs	r0, r3
 8005296:	f7fa ff37 	bl	8000108 <strlen>
 800529a:	0003      	movs	r3, r0
 800529c:	b29a      	uxth	r2, r3
 800529e:	23fa      	movs	r3, #250	; 0xfa
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	0028      	movs	r0, r5
 80052a4:	1839      	adds	r1, r7, r0
 80052a6:	2608      	movs	r6, #8
 80052a8:	19b8      	adds	r0, r7, r6
 80052aa:	1900      	adds	r0, r0, r4
 80052ac:	f004 f81e 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(5);
 80052b0:	2005      	movs	r0, #5
 80052b2:	f000 f9dd 	bl	8005670 <HAL_Delay>

	char recv_mode[] = "AT+CIPRECVMODE=1\r\n";
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	4a12      	ldr	r2, [pc, #72]	; (8005304 <wifiInit+0x114>)
 80052ba:	ca23      	ldmia	r2!, {r0, r1, r5}
 80052bc:	c323      	stmia	r3!, {r0, r1, r5}
 80052be:	6811      	ldr	r1, [r2, #0]
 80052c0:	6019      	str	r1, [r3, #0]
 80052c2:	8891      	ldrh	r1, [r2, #4]
 80052c4:	8099      	strh	r1, [r3, #4]
 80052c6:	7992      	ldrb	r2, [r2, #6]
 80052c8:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart1, (uint8_t *) recv_mode, strlen(recv_mode), 500);
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fa ff1b 	bl	8000108 <strlen>
 80052d2:	0003      	movs	r3, r0
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	23fa      	movs	r3, #250	; 0xfa
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	1d39      	adds	r1, r7, #4
 80052dc:	19b8      	adds	r0, r7, r6
 80052de:	1900      	adds	r0, r0, r4
 80052e0:	f004 f804 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(5);
 80052e4:	2005      	movs	r0, #5
 80052e6:	f000 f9c3 	bl	8005670 <HAL_Delay>
}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b01b      	add	sp, #108	; 0x6c
 80052f0:	bcf0      	pop	{r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	b004      	add	sp, #16
 80052f6:	4718      	bx	r3
 80052f8:	0800e780 	.word	0x0800e780
 80052fc:	0800e790 	.word	0x0800e790
 8005300:	0800e7b0 	.word	0x0800e7b0
 8005304:	0800e7d0 	.word	0x0800e7d0

08005308 <connectWifi>:

/**
 * @brief connects to a password protected wifi access point
 */
void connectWifi(char* ssid, char* pass, UART_HandleTypeDef huart1)
{
 8005308:	b082      	sub	sp, #8
 800530a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530c:	b091      	sub	sp, #68	; 0x44
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
 8005314:	2548      	movs	r5, #72	; 0x48
 8005316:	2608      	movs	r6, #8
 8005318:	2108      	movs	r1, #8
 800531a:	1879      	adds	r1, r7, r1
 800531c:	1989      	adds	r1, r1, r6
 800531e:	1949      	adds	r1, r1, r5
 8005320:	600a      	str	r2, [r1, #0]
 8005322:	604b      	str	r3, [r1, #4]
	char connect[50];
	sprintf(connect, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pass);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	490e      	ldr	r1, [pc, #56]	; (8005364 <connectWifi+0x5c>)
 800532a:	240c      	movs	r4, #12
 800532c:	1938      	adds	r0, r7, r4
 800532e:	f005 fd8f 	bl	800ae50 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) connect, strlen(connect), 500);
 8005332:	193b      	adds	r3, r7, r4
 8005334:	0018      	movs	r0, r3
 8005336:	f7fa fee7 	bl	8000108 <strlen>
 800533a:	0003      	movs	r3, r0
 800533c:	b29a      	uxth	r2, r3
 800533e:	23fa      	movs	r3, #250	; 0xfa
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	1939      	adds	r1, r7, r4
 8005344:	2008      	movs	r0, #8
 8005346:	1838      	adds	r0, r7, r0
 8005348:	1980      	adds	r0, r0, r6
 800534a:	1940      	adds	r0, r0, r5
 800534c:	f003 ffce 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(5);
 8005350:	2005      	movs	r0, #5
 8005352:	f000 f98d 	bl	8005670 <HAL_Delay>
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b011      	add	sp, #68	; 0x44
 800535c:	bcf0      	pop	{r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	b002      	add	sp, #8
 8005362:	4718      	bx	r3
 8005364:	0800e7e4 	.word	0x0800e7e4

08005368 <transmitWifi>:

/**
 * @brief transmits data to our website, will fix to make more dynamic
 */
void transmitWifi(char* info, UART_HandleTypeDef huart1 )
{
 8005368:	b084      	sub	sp, #16
 800536a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536c:	46c6      	mov	lr, r8
 800536e:	b500      	push	{lr}
 8005370:	b0da      	sub	sp, #360	; 0x168
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	2004      	movs	r0, #4
 8005378:	24b8      	movs	r4, #184	; 0xb8
 800537a:	0064      	lsls	r4, r4, #1
 800537c:	46a4      	mov	ip, r4
 800537e:	2410      	movs	r4, #16
 8005380:	46a0      	mov	r8, r4
 8005382:	44b8      	add	r8, r7
 8005384:	44c4      	add	ip, r8
 8005386:	4460      	add	r0, ip
 8005388:	6001      	str	r1, [r0, #0]
 800538a:	6042      	str	r2, [r0, #4]
 800538c:	6083      	str	r3, [r0, #8]

	char start[] = "AT+CIPSTART=\"TCP\",\"weatherbox.azurewebsites.net\",80\r\n";
 800538e:	2494      	movs	r4, #148	; 0x94
 8005390:	0064      	lsls	r4, r4, #1
 8005392:	193a      	adds	r2, r7, r4
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <transmitWifi+0x234>)
 8005396:	0010      	movs	r0, r2
 8005398:	0019      	movs	r1, r3
 800539a:	2336      	movs	r3, #54	; 0x36
 800539c:	001a      	movs	r2, r3
 800539e:	f004 fde3 	bl	8009f68 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t *) start, strlen(start), 500);
 80053a2:	193b      	adds	r3, r7, r4
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7fa feaf 	bl	8000108 <strlen>
 80053aa:	0003      	movs	r3, r0
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	23fa      	movs	r3, #250	; 0xfa
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	1939      	adds	r1, r7, r4
 80053b4:	24ba      	movs	r4, #186	; 0xba
 80053b6:	0064      	lsls	r4, r4, #1
 80053b8:	2010      	movs	r0, #16
 80053ba:	183d      	adds	r5, r7, r0
 80053bc:	1928      	adds	r0, r5, r4
 80053be:	f003 ff95 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(2000);
 80053c2:	23fa      	movs	r3, #250	; 0xfa
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 f952 	bl	8005670 <HAL_Delay>
	char send[] = "AT+CIPSEND=";
 80053cc:	268e      	movs	r6, #142	; 0x8e
 80053ce:	0076      	lsls	r6, r6, #1
 80053d0:	19bb      	adds	r3, r7, r6
 80053d2:	4a73      	ldr	r2, [pc, #460]	; (80055a0 <transmitWifi+0x238>)
 80053d4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80053d6:	c323      	stmia	r3!, {r0, r1, r5}
	char ret[] = "\r\n";
 80053d8:	258c      	movs	r5, #140	; 0x8c
 80053da:	006d      	lsls	r5, r5, #1
 80053dc:	197b      	adds	r3, r7, r5
 80053de:	4a71      	ldr	r2, [pc, #452]	; (80055a4 <transmitWifi+0x23c>)
 80053e0:	8811      	ldrh	r1, [r2, #0]
 80053e2:	8019      	strh	r1, [r3, #0]
 80053e4:	7892      	ldrb	r2, [r2, #2]
 80053e6:	709a      	strb	r2, [r3, #2]
	char postFormat[] = "POST /map/data HTTP/1.1\r\nAccept: \"*/*\"\r\nHost: weatherbox.azurewebsites.net\r\nContent-Type: application/json\r\nContent-Length: %i\r\n\r\n";
 80053e8:	2394      	movs	r3, #148	; 0x94
 80053ea:	18fa      	adds	r2, r7, r3
 80053ec:	4b6e      	ldr	r3, [pc, #440]	; (80055a8 <transmitWifi+0x240>)
 80053ee:	0010      	movs	r0, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	2383      	movs	r3, #131	; 0x83
 80053f4:	001a      	movs	r2, r3
 80053f6:	f004 fdb7 	bl	8009f68 <memcpy>
	char post[sizeof(postFormat)];
	int jsonsize = (int)(strlen(info));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fa fe83 	bl	8000108 <strlen>
 8005402:	0003      	movs	r3, r0
 8005404:	22b2      	movs	r2, #178	; 0xb2
 8005406:	0052      	lsls	r2, r2, #1
 8005408:	18b8      	adds	r0, r7, r2
 800540a:	6003      	str	r3, [r0, #0]
	char jsonStr[sizeof(jsonsize)];
	sprintf(jsonStr, "%u", jsonsize);
 800540c:	18b8      	adds	r0, r7, r2
 800540e:	6802      	ldr	r2, [r0, #0]
 8005410:	4966      	ldr	r1, [pc, #408]	; (80055ac <transmitWifi+0x244>)
 8005412:	230c      	movs	r3, #12
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	0018      	movs	r0, r3
 8005418:	f005 fd1a 	bl	800ae50 <siprintf>
	sprintf(post, postFormat, jsonsize);
 800541c:	22b2      	movs	r2, #178	; 0xb2
 800541e:	0052      	lsls	r2, r2, #1
 8005420:	18ba      	adds	r2, r7, r2
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	2194      	movs	r1, #148	; 0x94
 8005426:	1879      	adds	r1, r7, r1
 8005428:	2310      	movs	r3, #16
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	0018      	movs	r0, r3
 800542e:	f005 fd0f 	bl	800ae50 <siprintf>
	int postsize = (int)(strlen(post));
 8005432:	2310      	movs	r3, #16
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	0018      	movs	r0, r3
 8005438:	f7fa fe66 	bl	8000108 <strlen>
 800543c:	0003      	movs	r3, r0
 800543e:	22b0      	movs	r2, #176	; 0xb0
 8005440:	0052      	lsls	r2, r2, #1
 8005442:	18b9      	adds	r1, r7, r2
 8005444:	600b      	str	r3, [r1, #0]
	char postStr[sizeof(postsize)];
	sprintf(postStr, "%u", postsize);
 8005446:	18ba      	adds	r2, r7, r2
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	4958      	ldr	r1, [pc, #352]	; (80055ac <transmitWifi+0x244>)
 800544c:	2008      	movs	r0, #8
 800544e:	183b      	adds	r3, r7, r0
 8005450:	0018      	movs	r0, r3
 8005452:	f005 fcfd 	bl	800ae50 <siprintf>


	// Send Command with size of message
	HAL_UART_Transmit(&huart1, (uint8_t *) send, strlen(send), 500);
 8005456:	19bb      	adds	r3, r7, r6
 8005458:	0018      	movs	r0, r3
 800545a:	f7fa fe55 	bl	8000108 <strlen>
 800545e:	0003      	movs	r3, r0
 8005460:	b29a      	uxth	r2, r3
 8005462:	23fa      	movs	r3, #250	; 0xfa
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	19b9      	adds	r1, r7, r6
 8005468:	2010      	movs	r0, #16
 800546a:	1838      	adds	r0, r7, r0
 800546c:	1900      	adds	r0, r0, r4
 800546e:	f003 ff3d 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) postStr, strlen(postStr), 500);
 8005472:	2008      	movs	r0, #8
 8005474:	183b      	adds	r3, r7, r0
 8005476:	0018      	movs	r0, r3
 8005478:	f7fa fe46 	bl	8000108 <strlen>
 800547c:	0003      	movs	r3, r0
 800547e:	b29a      	uxth	r2, r3
 8005480:	23fa      	movs	r3, #250	; 0xfa
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	2008      	movs	r0, #8
 8005486:	1839      	adds	r1, r7, r0
 8005488:	2010      	movs	r0, #16
 800548a:	1838      	adds	r0, r7, r0
 800548c:	1900      	adds	r0, r0, r4
 800548e:	f003 ff2d 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 8005492:	197b      	adds	r3, r7, r5
 8005494:	0018      	movs	r0, r3
 8005496:	f7fa fe37 	bl	8000108 <strlen>
 800549a:	0003      	movs	r3, r0
 800549c:	b29a      	uxth	r2, r3
 800549e:	23fa      	movs	r3, #250	; 0xfa
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	1979      	adds	r1, r7, r5
 80054a4:	2010      	movs	r0, #16
 80054a6:	1838      	adds	r0, r7, r0
 80054a8:	1900      	adds	r0, r0, r4
 80054aa:	f003 ff1f 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(1000);
 80054ae:	23fa      	movs	r3, #250	; 0xfa
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 f8dc 	bl	8005670 <HAL_Delay>

	//Sending POST message
	HAL_UART_Transmit(&huart1, (uint8_t *) post, strlen(post), 500);
 80054b8:	2310      	movs	r3, #16
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	0018      	movs	r0, r3
 80054be:	f7fa fe23 	bl	8000108 <strlen>
 80054c2:	0003      	movs	r3, r0
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	23fa      	movs	r3, #250	; 0xfa
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	2110      	movs	r1, #16
 80054cc:	0008      	movs	r0, r1
 80054ce:	1879      	adds	r1, r7, r1
 80054d0:	1838      	adds	r0, r7, r0
 80054d2:	1900      	adds	r0, r0, r4
 80054d4:	f003 ff0a 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 80054d8:	197b      	adds	r3, r7, r5
 80054da:	0018      	movs	r0, r3
 80054dc:	f7fa fe14 	bl	8000108 <strlen>
 80054e0:	0003      	movs	r3, r0
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	23fa      	movs	r3, #250	; 0xfa
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	1979      	adds	r1, r7, r5
 80054ea:	2010      	movs	r0, #16
 80054ec:	1838      	adds	r0, r7, r0
 80054ee:	1900      	adds	r0, r0, r4
 80054f0:	f003 fefc 	bl	80092ec <HAL_UART_Transmit>
	HAL_Delay(2000);
 80054f4:	23fa      	movs	r3, #250	; 0xfa
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	0018      	movs	r0, r3
 80054fa:	f000 f8b9 	bl	8005670 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) send, strlen(send), 500);
 80054fe:	19bb      	adds	r3, r7, r6
 8005500:	0018      	movs	r0, r3
 8005502:	f7fa fe01 	bl	8000108 <strlen>
 8005506:	0003      	movs	r3, r0
 8005508:	b29a      	uxth	r2, r3
 800550a:	23fa      	movs	r3, #250	; 0xfa
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	19b9      	adds	r1, r7, r6
 8005510:	2610      	movs	r6, #16
 8005512:	19b8      	adds	r0, r7, r6
 8005514:	1900      	adds	r0, r0, r4
 8005516:	f003 fee9 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) jsonStr, strlen(jsonStr), 500);
 800551a:	230c      	movs	r3, #12
 800551c:	001e      	movs	r6, r3
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	0018      	movs	r0, r3
 8005522:	f7fa fdf1 	bl	8000108 <strlen>
 8005526:	0003      	movs	r3, r0
 8005528:	b29a      	uxth	r2, r3
 800552a:	23fa      	movs	r3, #250	; 0xfa
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	19b9      	adds	r1, r7, r6
 8005530:	2610      	movs	r6, #16
 8005532:	19b8      	adds	r0, r7, r6
 8005534:	1900      	adds	r0, r0, r4
 8005536:	f003 fed9 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 800553a:	197b      	adds	r3, r7, r5
 800553c:	0018      	movs	r0, r3
 800553e:	f7fa fde3 	bl	8000108 <strlen>
 8005542:	0003      	movs	r3, r0
 8005544:	b29a      	uxth	r2, r3
 8005546:	23fa      	movs	r3, #250	; 0xfa
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	1979      	adds	r1, r7, r5
 800554c:	19b8      	adds	r0, r7, r6
 800554e:	1900      	adds	r0, r0, r4
 8005550:	f003 fecc 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) info, strlen(info), 500);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f7fa fdd6 	bl	8000108 <strlen>
 800555c:	0003      	movs	r3, r0
 800555e:	b29a      	uxth	r2, r3
 8005560:	23fa      	movs	r3, #250	; 0xfa
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	19b8      	adds	r0, r7, r6
 8005568:	1900      	adds	r0, r0, r4
 800556a:	f003 febf 	bl	80092ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 800556e:	197b      	adds	r3, r7, r5
 8005570:	0018      	movs	r0, r3
 8005572:	f7fa fdc9 	bl	8000108 <strlen>
 8005576:	0003      	movs	r3, r0
 8005578:	b29a      	uxth	r2, r3
 800557a:	23fa      	movs	r3, #250	; 0xfa
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	1979      	adds	r1, r7, r5
 8005580:	19b8      	adds	r0, r7, r6
 8005582:	1900      	adds	r0, r0, r4
 8005584:	f003 feb2 	bl	80092ec <HAL_UART_Transmit>
}
 8005588:	46c0      	nop			; (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	b05a      	add	sp, #360	; 0x168
 800558e:	bc04      	pop	{r2}
 8005590:	4690      	mov	r8, r2
 8005592:	bcf0      	pop	{r4, r5, r6, r7}
 8005594:	bc08      	pop	{r3}
 8005596:	b004      	add	sp, #16
 8005598:	4718      	bx	r3
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	0800e800 	.word	0x0800e800
 80055a0:	0800e838 	.word	0x0800e838
 80055a4:	0800e844 	.word	0x0800e844
 80055a8:	0800e848 	.word	0x0800e848
 80055ac:	0800e7fc 	.word	0x0800e7fc

080055b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055b6:	1dfb      	adds	r3, r7, #7
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_Init+0x3c>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <HAL_Init+0x3c>)
 80055c2:	2140      	movs	r1, #64	; 0x40
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055c8:	2000      	movs	r0, #0
 80055ca:	f000 f811 	bl	80055f0 <HAL_InitTick>
 80055ce:	1e03      	subs	r3, r0, #0
 80055d0:	d003      	beq.n	80055da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80055d2:	1dfb      	adds	r3, r7, #7
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e001      	b.n	80055de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80055da:	f7fd fef3 	bl	80033c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80055de:	1dfb      	adds	r3, r7, #7
 80055e0:	781b      	ldrb	r3, [r3, #0]
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	40022000 	.word	0x40022000

080055f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80055f8:	230f      	movs	r3, #15
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <HAL_InitTick+0x50>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	23fa      	movs	r3, #250	; 0xfa
 8005606:	0099      	lsls	r1, r3, #2
 8005608:	0010      	movs	r0, r2
 800560a:	f7fa fd99 	bl	8000140 <__udivsi3>
 800560e:	0003      	movs	r3, r0
 8005610:	0018      	movs	r0, r3
 8005612:	f000 f936 	bl	8005882 <HAL_SYSTICK_Config>
 8005616:	1e03      	subs	r3, r0, #0
 8005618:	d004      	beq.n	8005624 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800561a:	230f      	movs	r3, #15
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	e006      	b.n	8005632 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	2301      	movs	r3, #1
 8005628:	425b      	negs	r3, r3
 800562a:	2200      	movs	r2, #0
 800562c:	0018      	movs	r0, r3
 800562e:	f000 f903 	bl	8005838 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8005632:	230f      	movs	r3, #15
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	781b      	ldrb	r3, [r3, #0]
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	b004      	add	sp, #16
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2000000c 	.word	0x2000000c

08005644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  uwTick++;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <HAL_IncTick+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	4b02      	ldr	r3, [pc, #8]	; (8005658 <HAL_IncTick+0x14>)
 8005650:	601a      	str	r2, [r3, #0]
}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	200004c8 	.word	0x200004c8

0800565c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  return uwTick;
 8005660:	4b02      	ldr	r3, [pc, #8]	; (800566c <HAL_GetTick+0x10>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	200004c8 	.word	0x200004c8

08005670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005678:	f7ff fff0 	bl	800565c <HAL_GetTick>
 800567c:	0003      	movs	r3, r0
 800567e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	d002      	beq.n	8005690 <HAL_Delay+0x20>
  {
    wait++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005690:	46c0      	nop			; (mov r8, r8)
 8005692:	f7ff ffe3 	bl	800565c <HAL_GetTick>
 8005696:	0002      	movs	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d8f7      	bhi.n	8005692 <HAL_Delay+0x22>
  {
  }
}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b004      	add	sp, #16
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80056b0:	4b02      	ldr	r3, [pc, #8]	; (80056bc <HAL_GetUIDw0+0x10>)
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	1ff80050 	.word	0x1ff80050

080056c0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <HAL_GetUIDw1+0x10>)
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	1ff80054 	.word	0x1ff80054

080056d4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80056d8:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <HAL_GetUIDw2+0x10>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	0018      	movs	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	1ff80064 	.word	0x1ff80064

080056e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	0002      	movs	r2, r0
 80056f0:	1dfb      	adds	r3, r7, #7
 80056f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80056f4:	1dfb      	adds	r3, r7, #7
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	001a      	movs	r2, r3
 80056fa:	231f      	movs	r3, #31
 80056fc:	401a      	ands	r2, r3
 80056fe:	4b04      	ldr	r3, [pc, #16]	; (8005710 <NVIC_EnableIRQ+0x28>)
 8005700:	2101      	movs	r1, #1
 8005702:	4091      	lsls	r1, r2
 8005704:	000a      	movs	r2, r1
 8005706:	601a      	str	r2, [r3, #0]
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}
 8005710:	e000e100 	.word	0xe000e100

08005714 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	0002      	movs	r2, r0
 800571c:	6039      	str	r1, [r7, #0]
 800571e:	1dfb      	adds	r3, r7, #7
 8005720:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8005722:	1dfb      	adds	r3, r7, #7
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b7f      	cmp	r3, #127	; 0x7f
 8005728:	d932      	bls.n	8005790 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800572a:	4a2f      	ldr	r2, [pc, #188]	; (80057e8 <NVIC_SetPriority+0xd4>)
 800572c:	1dfb      	adds	r3, r7, #7
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	0019      	movs	r1, r3
 8005732:	230f      	movs	r3, #15
 8005734:	400b      	ands	r3, r1
 8005736:	3b08      	subs	r3, #8
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	3306      	adds	r3, #6
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	3304      	adds	r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	1dfa      	adds	r2, r7, #7
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	0011      	movs	r1, r2
 800574a:	2203      	movs	r2, #3
 800574c:	400a      	ands	r2, r1
 800574e:	00d2      	lsls	r2, r2, #3
 8005750:	21ff      	movs	r1, #255	; 0xff
 8005752:	4091      	lsls	r1, r2
 8005754:	000a      	movs	r2, r1
 8005756:	43d2      	mvns	r2, r2
 8005758:	401a      	ands	r2, r3
 800575a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	019b      	lsls	r3, r3, #6
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	401a      	ands	r2, r3
 8005764:	1dfb      	adds	r3, r7, #7
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	0018      	movs	r0, r3
 800576a:	2303      	movs	r3, #3
 800576c:	4003      	ands	r3, r0
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005772:	481d      	ldr	r0, [pc, #116]	; (80057e8 <NVIC_SetPriority+0xd4>)
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	001c      	movs	r4, r3
 800577a:	230f      	movs	r3, #15
 800577c:	4023      	ands	r3, r4
 800577e:	3b08      	subs	r3, #8
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	430a      	orrs	r2, r1
 8005784:	3306      	adds	r3, #6
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	18c3      	adds	r3, r0, r3
 800578a:	3304      	adds	r3, #4
 800578c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800578e:	e027      	b.n	80057e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005790:	4a16      	ldr	r2, [pc, #88]	; (80057ec <NVIC_SetPriority+0xd8>)
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b25b      	sxtb	r3, r3
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	33c0      	adds	r3, #192	; 0xc0
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	589b      	ldr	r3, [r3, r2]
 80057a0:	1dfa      	adds	r2, r7, #7
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	0011      	movs	r1, r2
 80057a6:	2203      	movs	r2, #3
 80057a8:	400a      	ands	r2, r1
 80057aa:	00d2      	lsls	r2, r2, #3
 80057ac:	21ff      	movs	r1, #255	; 0xff
 80057ae:	4091      	lsls	r1, r2
 80057b0:	000a      	movs	r2, r1
 80057b2:	43d2      	mvns	r2, r2
 80057b4:	401a      	ands	r2, r3
 80057b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	019b      	lsls	r3, r3, #6
 80057bc:	22ff      	movs	r2, #255	; 0xff
 80057be:	401a      	ands	r2, r3
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	0018      	movs	r0, r3
 80057c6:	2303      	movs	r3, #3
 80057c8:	4003      	ands	r3, r0
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057ce:	4807      	ldr	r0, [pc, #28]	; (80057ec <NVIC_SetPriority+0xd8>)
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	430a      	orrs	r2, r1
 80057da:	33c0      	adds	r3, #192	; 0xc0
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	501a      	str	r2, [r3, r0]
}
 80057e0:	46c0      	nop			; (mov r8, r8)
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b003      	add	sp, #12
 80057e6:	bd90      	pop	{r4, r7, pc}
 80057e8:	e000ed00 	.word	0xe000ed00
 80057ec:	e000e100 	.word	0xe000e100

080057f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <SysTick_Config+0x40>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005802:	2301      	movs	r3, #1
 8005804:	e010      	b.n	8005828 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <SysTick_Config+0x44>)
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	3a01      	subs	r2, #1
 800580c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800580e:	2301      	movs	r3, #1
 8005810:	425b      	negs	r3, r3
 8005812:	2103      	movs	r1, #3
 8005814:	0018      	movs	r0, r3
 8005816:	f7ff ff7d 	bl	8005714 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <SysTick_Config+0x44>)
 800581c:	2200      	movs	r2, #0
 800581e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <SysTick_Config+0x44>)
 8005822:	2207      	movs	r2, #7
 8005824:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005826:	2300      	movs	r3, #0
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b002      	add	sp, #8
 800582e:	bd80      	pop	{r7, pc}
 8005830:	00ffffff 	.word	0x00ffffff
 8005834:	e000e010 	.word	0xe000e010

08005838 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	210f      	movs	r1, #15
 8005844:	187b      	adds	r3, r7, r1
 8005846:	1c02      	adds	r2, r0, #0
 8005848:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	187b      	adds	r3, r7, r1
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b25b      	sxtb	r3, r3
 8005852:	0011      	movs	r1, r2
 8005854:	0018      	movs	r0, r3
 8005856:	f7ff ff5d 	bl	8005714 <NVIC_SetPriority>
}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	b004      	add	sp, #16
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	0002      	movs	r2, r0
 800586a:	1dfb      	adds	r3, r7, #7
 800586c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800586e:	1dfb      	adds	r3, r7, #7
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b25b      	sxtb	r3, r3
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff ff37 	bl	80056e8 <NVIC_EnableIRQ>
}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	46bd      	mov	sp, r7
 800587e:	b002      	add	sp, #8
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f7ff ffaf 	bl	80057f0 <SysTick_Config>
 8005892:	0003      	movs	r3, r0
}
 8005894:	0018      	movs	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80058b2:	e155      	b.n	8005b60 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2101      	movs	r1, #1
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4091      	lsls	r1, r2
 80058be:	000a      	movs	r2, r1
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d100      	bne.n	80058cc <HAL_GPIO_Init+0x30>
 80058ca:	e146      	b.n	8005b5a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d003      	beq.n	80058dc <HAL_GPIO_Init+0x40>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b12      	cmp	r3, #18
 80058da:	d123      	bne.n	8005924 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	08da      	lsrs	r2, r3, #3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3208      	adds	r2, #8
 80058e4:	0092      	lsls	r2, r2, #2
 80058e6:	58d3      	ldr	r3, [r2, r3]
 80058e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2207      	movs	r2, #7
 80058ee:	4013      	ands	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	220f      	movs	r2, #15
 80058f4:	409a      	lsls	r2, r3
 80058f6:	0013      	movs	r3, r2
 80058f8:	43da      	mvns	r2, r3
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4013      	ands	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2107      	movs	r1, #7
 8005908:	400b      	ands	r3, r1
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	409a      	lsls	r2, r3
 800590e:	0013      	movs	r3, r2
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	08da      	lsrs	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3208      	adds	r2, #8
 800591e:	0092      	lsls	r2, r2, #2
 8005920:	6939      	ldr	r1, [r7, #16]
 8005922:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d00b      	beq.n	8005944 <HAL_GPIO_Init+0xa8>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d007      	beq.n	8005944 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005938:	2b11      	cmp	r3, #17
 800593a:	d003      	beq.n	8005944 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b12      	cmp	r3, #18
 8005942:	d130      	bne.n	80059a6 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	2203      	movs	r2, #3
 8005950:	409a      	lsls	r2, r3
 8005952:	0013      	movs	r3, r2
 8005954:	43da      	mvns	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4013      	ands	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	409a      	lsls	r2, r3
 8005966:	0013      	movs	r3, r2
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800597a:	2201      	movs	r2, #1
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	409a      	lsls	r2, r3
 8005980:	0013      	movs	r3, r2
 8005982:	43da      	mvns	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	2201      	movs	r2, #1
 8005992:	401a      	ands	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	409a      	lsls	r2, r3
 8005998:	0013      	movs	r3, r2
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	2203      	movs	r2, #3
 80059b2:	409a      	lsls	r2, r3
 80059b4:	0013      	movs	r3, r2
 80059b6:	43da      	mvns	r2, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4013      	ands	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2203      	movs	r2, #3
 80059c4:	401a      	ands	r2, r3
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	409a      	lsls	r2, r3
 80059cc:	0013      	movs	r3, r2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	2203      	movs	r2, #3
 80059e6:	409a      	lsls	r2, r3
 80059e8:	0013      	movs	r3, r2
 80059ea:	43da      	mvns	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	409a      	lsls	r2, r3
 80059fc:	0013      	movs	r3, r2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	055b      	lsls	r3, r3, #21
 8005a12:	4013      	ands	r3, r2
 8005a14:	d100      	bne.n	8005a18 <HAL_GPIO_Init+0x17c>
 8005a16:	e0a0      	b.n	8005b5a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a18:	4b57      	ldr	r3, [pc, #348]	; (8005b78 <HAL_GPIO_Init+0x2dc>)
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	4b56      	ldr	r3, [pc, #344]	; (8005b78 <HAL_GPIO_Init+0x2dc>)
 8005a1e:	2101      	movs	r1, #1
 8005a20:	430a      	orrs	r2, r1
 8005a22:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8005a24:	4a55      	ldr	r2, [pc, #340]	; (8005b7c <HAL_GPIO_Init+0x2e0>)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	589b      	ldr	r3, [r3, r2]
 8005a30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2203      	movs	r2, #3
 8005a36:	4013      	ands	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	220f      	movs	r2, #15
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	0013      	movs	r3, r2
 8005a40:	43da      	mvns	r2, r3
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4013      	ands	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	23a0      	movs	r3, #160	; 0xa0
 8005a4c:	05db      	lsls	r3, r3, #23
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d01f      	beq.n	8005a92 <HAL_GPIO_Init+0x1f6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a4a      	ldr	r2, [pc, #296]	; (8005b80 <HAL_GPIO_Init+0x2e4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d019      	beq.n	8005a8e <HAL_GPIO_Init+0x1f2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a49      	ldr	r2, [pc, #292]	; (8005b84 <HAL_GPIO_Init+0x2e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_GPIO_Init+0x1ee>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a48      	ldr	r2, [pc, #288]	; (8005b88 <HAL_GPIO_Init+0x2ec>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00d      	beq.n	8005a86 <HAL_GPIO_Init+0x1ea>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a47      	ldr	r2, [pc, #284]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <HAL_GPIO_Init+0x1e6>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a46      	ldr	r2, [pc, #280]	; (8005b90 <HAL_GPIO_Init+0x2f4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d101      	bne.n	8005a7e <HAL_GPIO_Init+0x1e2>
 8005a7a:	2305      	movs	r3, #5
 8005a7c:	e00a      	b.n	8005a94 <HAL_GPIO_Init+0x1f8>
 8005a7e:	2306      	movs	r3, #6
 8005a80:	e008      	b.n	8005a94 <HAL_GPIO_Init+0x1f8>
 8005a82:	2304      	movs	r3, #4
 8005a84:	e006      	b.n	8005a94 <HAL_GPIO_Init+0x1f8>
 8005a86:	2303      	movs	r3, #3
 8005a88:	e004      	b.n	8005a94 <HAL_GPIO_Init+0x1f8>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e002      	b.n	8005a94 <HAL_GPIO_Init+0x1f8>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_GPIO_Init+0x1f8>
 8005a92:	2300      	movs	r3, #0
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	2103      	movs	r1, #3
 8005a98:	400a      	ands	r2, r1
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	4093      	lsls	r3, r2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aa4:	4935      	ldr	r1, [pc, #212]	; (8005b7c <HAL_GPIO_Init+0x2e0>)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	089b      	lsrs	r3, r3, #2
 8005aaa:	3302      	adds	r3, #2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ab2:	4b38      	ldr	r3, [pc, #224]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	43da      	mvns	r2, r3
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	2380      	movs	r3, #128	; 0x80
 8005ac8:	025b      	lsls	r3, r3, #9
 8005aca:	4013      	ands	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ad6:	4b2f      	ldr	r3, [pc, #188]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	43da      	mvns	r2, r3
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	4013      	ands	r3, r2
 8005af6:	d003      	beq.n	8005b00 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b06:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	43da      	mvns	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	035b      	lsls	r3, r3, #13
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b2a:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005b30:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	43da      	mvns	r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	039b      	lsls	r3, r3, #14
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	40da      	lsrs	r2, r3
 8005b68:	1e13      	subs	r3, r2, #0
 8005b6a:	d000      	beq.n	8005b6e <HAL_GPIO_Init+0x2d2>
 8005b6c:	e6a2      	b.n	80058b4 <HAL_GPIO_Init+0x18>
  }
}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b006      	add	sp, #24
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	50000400 	.word	0x50000400
 8005b84:	50000800 	.word	0x50000800
 8005b88:	50000c00 	.word	0x50000c00
 8005b8c:	50001000 	.word	0x50001000
 8005b90:	50001c00 	.word	0x50001c00
 8005b94:	40010400 	.word	0x40010400

08005b98 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8005bae:	e0bc      	b.n	8005d2a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d100      	bne.n	8005bc4 <HAL_GPIO_DeInit+0x2c>
 8005bc2:	e0af      	b.n	8005d24 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	2103      	movs	r1, #3
 8005bce:	4099      	lsls	r1, r3
 8005bd0:	000b      	movs	r3, r1
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	08da      	lsrs	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3208      	adds	r2, #8
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	58d3      	ldr	r3, [r2, r3]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	2107      	movs	r1, #7
 8005be8:	400a      	ands	r2, r1
 8005bea:	0092      	lsls	r2, r2, #2
 8005bec:	210f      	movs	r1, #15
 8005bee:	4091      	lsls	r1, r2
 8005bf0:	000a      	movs	r2, r1
 8005bf2:	43d1      	mvns	r1, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	08d2      	lsrs	r2, r2, #3
 8005bf8:	4019      	ands	r1, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3208      	adds	r2, #8
 8005bfe:	0092      	lsls	r2, r2, #2
 8005c00:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	0052      	lsls	r2, r2, #1
 8005c0a:	2103      	movs	r1, #3
 8005c0c:	4091      	lsls	r1, r2
 8005c0e:	000a      	movs	r2, r1
 8005c10:	43d2      	mvns	r2, r2
 8005c12:	401a      	ands	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4091      	lsls	r1, r2
 8005c22:	000a      	movs	r2, r1
 8005c24:	43d2      	mvns	r2, r2
 8005c26:	401a      	ands	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	0052      	lsls	r2, r2, #1
 8005c34:	2103      	movs	r1, #3
 8005c36:	4091      	lsls	r1, r2
 8005c38:	000a      	movs	r2, r1
 8005c3a:	43d2      	mvns	r2, r2
 8005c3c:	401a      	ands	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005c42:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <HAL_GPIO_DeInit+0x1a8>)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	089b      	lsrs	r3, r3, #2
 8005c48:	3302      	adds	r3, #2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	589b      	ldr	r3, [r3, r2]
 8005c4e:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2203      	movs	r2, #3
 8005c54:	4013      	ands	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	220f      	movs	r2, #15
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	23a0      	movs	r3, #160	; 0xa0
 8005c66:	05db      	lsls	r3, r3, #23
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d01f      	beq.n	8005cac <HAL_GPIO_DeInit+0x114>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a35      	ldr	r2, [pc, #212]	; (8005d44 <HAL_GPIO_DeInit+0x1ac>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d019      	beq.n	8005ca8 <HAL_GPIO_DeInit+0x110>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a34      	ldr	r2, [pc, #208]	; (8005d48 <HAL_GPIO_DeInit+0x1b0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_GPIO_DeInit+0x10c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a33      	ldr	r2, [pc, #204]	; (8005d4c <HAL_GPIO_DeInit+0x1b4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00d      	beq.n	8005ca0 <HAL_GPIO_DeInit+0x108>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a32      	ldr	r2, [pc, #200]	; (8005d50 <HAL_GPIO_DeInit+0x1b8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <HAL_GPIO_DeInit+0x104>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a31      	ldr	r2, [pc, #196]	; (8005d54 <HAL_GPIO_DeInit+0x1bc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d101      	bne.n	8005c98 <HAL_GPIO_DeInit+0x100>
 8005c94:	2305      	movs	r3, #5
 8005c96:	e00a      	b.n	8005cae <HAL_GPIO_DeInit+0x116>
 8005c98:	2306      	movs	r3, #6
 8005c9a:	e008      	b.n	8005cae <HAL_GPIO_DeInit+0x116>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	e006      	b.n	8005cae <HAL_GPIO_DeInit+0x116>
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e004      	b.n	8005cae <HAL_GPIO_DeInit+0x116>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e002      	b.n	8005cae <HAL_GPIO_DeInit+0x116>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_GPIO_DeInit+0x116>
 8005cac:	2300      	movs	r3, #0
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	2103      	movs	r1, #3
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	0092      	lsls	r2, r2, #2
 8005cb6:	4093      	lsls	r3, r2
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d132      	bne.n	8005d24 <HAL_GPIO_DeInit+0x18c>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	220f      	movs	r2, #15
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	0013      	movs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_GPIO_DeInit+0x1a8>)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	089b      	lsrs	r3, r3, #2
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	589a      	ldr	r2, [r3, r2]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	43d9      	mvns	r1, r3
 8005cde:	4818      	ldr	r0, [pc, #96]	; (8005d40 <HAL_GPIO_DeInit+0x1a8>)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	400a      	ands	r2, r1
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43d9      	mvns	r1, r3
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005cf6:	400a      	ands	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	43d9      	mvns	r1, r3
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005d04:	400a      	ands	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	43d9      	mvns	r1, r3
 8005d10:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005d12:	400a      	ands	r2, r1
 8005d14:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43d9      	mvns	r1, r3
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_GPIO_DeInit+0x1c0>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3301      	adds	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	40da      	lsrs	r2, r3
 8005d30:	1e13      	subs	r3, r2, #0
 8005d32:	d000      	beq.n	8005d36 <HAL_GPIO_DeInit+0x19e>
 8005d34:	e73c      	b.n	8005bb0 <HAL_GPIO_DeInit+0x18>
  }
}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b006      	add	sp, #24
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	40010000 	.word	0x40010000
 8005d44:	50000400 	.word	0x50000400
 8005d48:	50000800 	.word	0x50000800
 8005d4c:	50000c00 	.word	0x50000c00
 8005d50:	50001000 	.word	0x50001000
 8005d54:	50001c00 	.word	0x50001c00
 8005d58:	40010400 	.word	0x40010400

08005d5c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	0008      	movs	r0, r1
 8005d66:	0011      	movs	r1, r2
 8005d68:	1cbb      	adds	r3, r7, #2
 8005d6a:	1c02      	adds	r2, r0, #0
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	1c7b      	adds	r3, r7, #1
 8005d70:	1c0a      	adds	r2, r1, #0
 8005d72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005d74:	1c7b      	adds	r3, r7, #1
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d7c:	1cbb      	adds	r3, r7, #2
 8005d7e:	881a      	ldrh	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005d84:	e003      	b.n	8005d8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005d86:	1cbb      	adds	r3, r7, #2
 8005d88:	881a      	ldrh	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b002      	add	sp, #8
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	000a      	movs	r2, r1
 8005da0:	1cbb      	adds	r3, r7, #2
 8005da2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	1cbb      	adds	r3, r7, #2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	405a      	eors	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	615a      	str	r2, [r3, #20]
}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b002      	add	sp, #8
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e082      	b.n	8005ed4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2241      	movs	r2, #65	; 0x41
 8005dd2:	5c9b      	ldrb	r3, [r3, r2]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d107      	bne.n	8005dea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2240      	movs	r2, #64	; 0x40
 8005dde:	2100      	movs	r1, #0
 8005de0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fd fb0f 	bl	8003408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2241      	movs	r2, #65	; 0x41
 8005dee:	2124      	movs	r1, #36	; 0x24
 8005df0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	438a      	bics	r2, r1
 8005e00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4934      	ldr	r1, [pc, #208]	; (8005edc <HAL_I2C_Init+0x120>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4931      	ldr	r1, [pc, #196]	; (8005ee0 <HAL_I2C_Init+0x124>)
 8005e1c:	400a      	ands	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d108      	bne.n	8005e3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	0209      	lsls	r1, r1, #8
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	e007      	b.n	8005e4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2184      	movs	r1, #132	; 0x84
 8005e44:	0209      	lsls	r1, r1, #8
 8005e46:	430a      	orrs	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d104      	bne.n	8005e5c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	0112      	lsls	r2, r2, #4
 8005e5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	491f      	ldr	r1, [pc, #124]	; (8005ee4 <HAL_I2C_Init+0x128>)
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	491a      	ldr	r1, [pc, #104]	; (8005ee0 <HAL_I2C_Init+0x124>)
 8005e78:	400a      	ands	r2, r1
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	0011      	movs	r1, r2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	021a      	lsls	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69d9      	ldr	r1, [r3, #28]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2241      	movs	r2, #65	; 0x41
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2242      	movs	r2, #66	; 0x42
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b002      	add	sp, #8
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	f0ffffff 	.word	0xf0ffffff
 8005ee0:	ffff7fff 	.word	0xffff7fff
 8005ee4:	02008000 	.word	0x02008000

08005ee8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e022      	b.n	8005f40 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2241      	movs	r2, #65	; 0x41
 8005efe:	2124      	movs	r1, #36	; 0x24
 8005f00:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	438a      	bics	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7fd fabb 	bl	8003490 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2241      	movs	r2, #65	; 0x41
 8005f24:	2100      	movs	r1, #0
 8005f26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2242      	movs	r2, #66	; 0x42
 8005f32:	2100      	movs	r1, #0
 8005f34:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2240      	movs	r2, #64	; 0x40
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b002      	add	sp, #8
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	000c      	movs	r4, r1
 8005f52:	0010      	movs	r0, r2
 8005f54:	0019      	movs	r1, r3
 8005f56:	230a      	movs	r3, #10
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	1c22      	adds	r2, r4, #0
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	2308      	movs	r3, #8
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	1c02      	adds	r2, r0, #0
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	1dbb      	adds	r3, r7, #6
 8005f68:	1c0a      	adds	r2, r1, #0
 8005f6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2241      	movs	r2, #65	; 0x41
 8005f70:	5c9b      	ldrb	r3, [r3, r2]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d000      	beq.n	8005f7a <HAL_I2C_Mem_Write+0x32>
 8005f78:	e10c      	b.n	8006194 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <HAL_I2C_Mem_Write+0x42>
 8005f80:	232c      	movs	r3, #44	; 0x2c
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2280      	movs	r2, #128	; 0x80
 8005f8e:	0092      	lsls	r2, r2, #2
 8005f90:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e0ff      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2240      	movs	r2, #64	; 0x40
 8005f9a:	5c9b      	ldrb	r3, [r3, r2]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_I2C_Mem_Write+0x5c>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e0f8      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	2101      	movs	r1, #1
 8005faa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fac:	f7ff fb56 	bl	800565c <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	0219      	lsls	r1, r3, #8
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2319      	movs	r3, #25
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f000 fb0b 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 8005fc6:	1e03      	subs	r3, r0, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e0e3      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2241      	movs	r2, #65	; 0x41
 8005fd2:	2121      	movs	r1, #33	; 0x21
 8005fd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2242      	movs	r2, #66	; 0x42
 8005fda:	2140      	movs	r1, #64	; 0x40
 8005fdc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	222c      	movs	r2, #44	; 0x2c
 8005fee:	18ba      	adds	r2, r7, r2
 8005ff0:	8812      	ldrh	r2, [r2, #0]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ffa:	1dbb      	adds	r3, r7, #6
 8005ffc:	881c      	ldrh	r4, [r3, #0]
 8005ffe:	2308      	movs	r3, #8
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	881a      	ldrh	r2, [r3, #0]
 8006004:	230a      	movs	r3, #10
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	8819      	ldrh	r1, [r3, #0]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	0023      	movs	r3, r4
 8006016:	f000 f9f9 	bl	800640c <I2C_RequestMemoryWrite>
 800601a:	1e03      	subs	r3, r0, #0
 800601c:	d005      	beq.n	800602a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2240      	movs	r2, #64	; 0x40
 8006022:	2100      	movs	r1, #0
 8006024:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e0b5      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	2bff      	cmp	r3, #255	; 0xff
 8006032:	d911      	bls.n	8006058 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	22ff      	movs	r2, #255	; 0xff
 8006038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603e:	b2da      	uxtb	r2, r3
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	045c      	lsls	r4, r3, #17
 8006044:	230a      	movs	r3, #10
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	8819      	ldrh	r1, [r3, #0]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	2300      	movs	r3, #0
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	0023      	movs	r3, r4
 8006052:	f000 fbe3 	bl	800681c <I2C_TransferConfig>
 8006056:	e012      	b.n	800607e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006066:	b2da      	uxtb	r2, r3
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	049c      	lsls	r4, r3, #18
 800606c:	230a      	movs	r3, #10
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	8819      	ldrh	r1, [r3, #0]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	2300      	movs	r3, #0
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	0023      	movs	r3, r4
 800607a:	f000 fbcf 	bl	800681c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	0018      	movs	r0, r3
 8006086:	f000 fae8 	bl	800665a <I2C_WaitOnTXISFlagUntilTimeout>
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e081      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d03a      	beq.n	8006142 <HAL_I2C_Mem_Write+0x1fa>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d136      	bne.n	8006142 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	0013      	movs	r3, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	2180      	movs	r1, #128	; 0x80
 80060e2:	f000 fa7b 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 80060e6:	1e03      	subs	r3, r0, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e053      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2bff      	cmp	r3, #255	; 0xff
 80060f6:	d911      	bls.n	800611c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	22ff      	movs	r2, #255	; 0xff
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006102:	b2da      	uxtb	r2, r3
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	045c      	lsls	r4, r3, #17
 8006108:	230a      	movs	r3, #10
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	8819      	ldrh	r1, [r3, #0]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	0023      	movs	r3, r4
 8006116:	f000 fb81 	bl	800681c <I2C_TransferConfig>
 800611a:	e012      	b.n	8006142 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612a:	b2da      	uxtb	r2, r3
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	049c      	lsls	r4, r3, #18
 8006130:	230a      	movs	r3, #10
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	8819      	ldrh	r1, [r3, #0]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	2300      	movs	r3, #0
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	0023      	movs	r3, r4
 800613e:	f000 fb6d 	bl	800681c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d198      	bne.n	800607e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	0018      	movs	r0, r3
 8006154:	f000 fac0 	bl	80066d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006158:	1e03      	subs	r3, r0, #0
 800615a:	d001      	beq.n	8006160 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e01a      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2220      	movs	r2, #32
 8006166:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	490b      	ldr	r1, [pc, #44]	; (80061a0 <HAL_I2C_Mem_Write+0x258>)
 8006174:	400a      	ands	r2, r1
 8006176:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2241      	movs	r2, #65	; 0x41
 800617c:	2120      	movs	r1, #32
 800617e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2242      	movs	r2, #66	; 0x42
 8006184:	2100      	movs	r1, #0
 8006186:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	2100      	movs	r1, #0
 800618e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b007      	add	sp, #28
 800619c:	bd90      	pop	{r4, r7, pc}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	fe00e800 	.word	0xfe00e800

080061a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b089      	sub	sp, #36	; 0x24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	000c      	movs	r4, r1
 80061ae:	0010      	movs	r0, r2
 80061b0:	0019      	movs	r1, r3
 80061b2:	230a      	movs	r3, #10
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	1c22      	adds	r2, r4, #0
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	2308      	movs	r3, #8
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	1c02      	adds	r2, r0, #0
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	1dbb      	adds	r3, r7, #6
 80061c4:	1c0a      	adds	r2, r1, #0
 80061c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2241      	movs	r2, #65	; 0x41
 80061cc:	5c9b      	ldrb	r3, [r3, r2]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d000      	beq.n	80061d6 <HAL_I2C_Mem_Read+0x32>
 80061d4:	e110      	b.n	80063f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <HAL_I2C_Mem_Read+0x42>
 80061dc:	232c      	movs	r3, #44	; 0x2c
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2280      	movs	r2, #128	; 0x80
 80061ea:	0092      	lsls	r2, r2, #2
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e103      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2240      	movs	r2, #64	; 0x40
 80061f6:	5c9b      	ldrb	r3, [r3, r2]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_I2C_Mem_Read+0x5c>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e0fc      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2240      	movs	r2, #64	; 0x40
 8006204:	2101      	movs	r1, #1
 8006206:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006208:	f7ff fa28 	bl	800565c <HAL_GetTick>
 800620c:	0003      	movs	r3, r0
 800620e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	0219      	lsls	r1, r3, #8
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	2319      	movs	r3, #25
 800621c:	2201      	movs	r2, #1
 800621e:	f000 f9dd 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 8006222:	1e03      	subs	r3, r0, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e0e7      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2241      	movs	r2, #65	; 0x41
 800622e:	2122      	movs	r1, #34	; 0x22
 8006230:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2242      	movs	r2, #66	; 0x42
 8006236:	2140      	movs	r1, #64	; 0x40
 8006238:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	222c      	movs	r2, #44	; 0x2c
 800624a:	18ba      	adds	r2, r7, r2
 800624c:	8812      	ldrh	r2, [r2, #0]
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006256:	1dbb      	adds	r3, r7, #6
 8006258:	881c      	ldrh	r4, [r3, #0]
 800625a:	2308      	movs	r3, #8
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	230a      	movs	r3, #10
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	8819      	ldrh	r1, [r3, #0]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	0023      	movs	r3, r4
 8006272:	f000 f92f 	bl	80064d4 <I2C_RequestMemoryRead>
 8006276:	1e03      	subs	r3, r0, #0
 8006278:	d005      	beq.n	8006286 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2240      	movs	r2, #64	; 0x40
 800627e:	2100      	movs	r1, #0
 8006280:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e0b9      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628a:	b29b      	uxth	r3, r3
 800628c:	2bff      	cmp	r3, #255	; 0xff
 800628e:	d911      	bls.n	80062b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	22ff      	movs	r2, #255	; 0xff
 8006294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629a:	b2da      	uxtb	r2, r3
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	045c      	lsls	r4, r3, #17
 80062a0:	230a      	movs	r3, #10
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	8819      	ldrh	r1, [r3, #0]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	4b56      	ldr	r3, [pc, #344]	; (8006404 <HAL_I2C_Mem_Read+0x260>)
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	0023      	movs	r3, r4
 80062ae:	f000 fab5 	bl	800681c <I2C_TransferConfig>
 80062b2:	e012      	b.n	80062da <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	049c      	lsls	r4, r3, #18
 80062c8:	230a      	movs	r3, #10
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	8819      	ldrh	r1, [r3, #0]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	4b4c      	ldr	r3, [pc, #304]	; (8006404 <HAL_I2C_Mem_Read+0x260>)
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	0023      	movs	r3, r4
 80062d6:	f000 faa1 	bl	800681c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	0013      	movs	r3, r2
 80062e4:	2200      	movs	r2, #0
 80062e6:	2104      	movs	r1, #4
 80062e8:	f000 f978 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 80062ec:	1e03      	subs	r3, r0, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e082      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d03a      	beq.n	80063a6 <HAL_I2C_Mem_Read+0x202>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	2b00      	cmp	r3, #0
 8006336:	d136      	bne.n	80063a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	0013      	movs	r3, r2
 8006342:	2200      	movs	r2, #0
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	f000 f949 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 800634a:	1e03      	subs	r3, r0, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e053      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	2bff      	cmp	r3, #255	; 0xff
 800635a:	d911      	bls.n	8006380 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	b2da      	uxtb	r2, r3
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	045c      	lsls	r4, r3, #17
 800636c:	230a      	movs	r3, #10
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	8819      	ldrh	r1, [r3, #0]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	2300      	movs	r3, #0
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	0023      	movs	r3, r4
 800637a:	f000 fa4f 	bl	800681c <I2C_TransferConfig>
 800637e:	e012      	b.n	80063a6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	b2da      	uxtb	r2, r3
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	049c      	lsls	r4, r3, #18
 8006394:	230a      	movs	r3, #10
 8006396:	18fb      	adds	r3, r7, r3
 8006398:	8819      	ldrh	r1, [r3, #0]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	2300      	movs	r3, #0
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	0023      	movs	r3, r4
 80063a2:	f000 fa3b 	bl	800681c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d194      	bne.n	80062da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 f98e 	bl	80066d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063bc:	1e03      	subs	r3, r0, #0
 80063be:	d001      	beq.n	80063c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e01a      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2220      	movs	r2, #32
 80063ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	490c      	ldr	r1, [pc, #48]	; (8006408 <HAL_I2C_Mem_Read+0x264>)
 80063d8:	400a      	ands	r2, r1
 80063da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2241      	movs	r2, #65	; 0x41
 80063e0:	2120      	movs	r1, #32
 80063e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2242      	movs	r2, #66	; 0x42
 80063e8:	2100      	movs	r1, #0
 80063ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2240      	movs	r2, #64	; 0x40
 80063f0:	2100      	movs	r1, #0
 80063f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	0018      	movs	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b007      	add	sp, #28
 8006400:	bd90      	pop	{r4, r7, pc}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	80002400 	.word	0x80002400
 8006408:	fe00e800 	.word	0xfe00e800

0800640c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b5b0      	push	{r4, r5, r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	000c      	movs	r4, r1
 8006416:	0010      	movs	r0, r2
 8006418:	0019      	movs	r1, r3
 800641a:	250a      	movs	r5, #10
 800641c:	197b      	adds	r3, r7, r5
 800641e:	1c22      	adds	r2, r4, #0
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	2308      	movs	r3, #8
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	1c02      	adds	r2, r0, #0
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	1dbb      	adds	r3, r7, #6
 800642c:	1c0a      	adds	r2, r1, #0
 800642e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006430:	1dbb      	adds	r3, r7, #6
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	045c      	lsls	r4, r3, #17
 800643a:	197b      	adds	r3, r7, r5
 800643c:	8819      	ldrh	r1, [r3, #0]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <I2C_RequestMemoryWrite+0xc4>)
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	0023      	movs	r3, r4
 8006446:	f000 f9e9 	bl	800681c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644c:	6a39      	ldr	r1, [r7, #32]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	0018      	movs	r0, r3
 8006452:	f000 f902 	bl	800665a <I2C_WaitOnTXISFlagUntilTimeout>
 8006456:	1e03      	subs	r3, r0, #0
 8006458:	d001      	beq.n	800645e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e033      	b.n	80064c6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800645e:	1dbb      	adds	r3, r7, #6
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d107      	bne.n	8006476 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006466:	2308      	movs	r3, #8
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
 8006474:	e019      	b.n	80064aa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006476:	2308      	movs	r3, #8
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	b29b      	uxth	r3, r3
 8006480:	b2da      	uxtb	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	6a39      	ldr	r1, [r7, #32]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	0018      	movs	r0, r3
 8006490:	f000 f8e3 	bl	800665a <I2C_WaitOnTXISFlagUntilTimeout>
 8006494:	1e03      	subs	r3, r0, #0
 8006496:	d001      	beq.n	800649c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e014      	b.n	80064c6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800649c:	2308      	movs	r3, #8
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064aa:	6a3a      	ldr	r2, [r7, #32]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	0013      	movs	r3, r2
 80064b4:	2200      	movs	r2, #0
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	f000 f890 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 80064bc:	1e03      	subs	r3, r0, #0
 80064be:	d001      	beq.n	80064c4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b004      	add	sp, #16
 80064cc:	bdb0      	pop	{r4, r5, r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	80002000 	.word	0x80002000

080064d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064d4:	b5b0      	push	{r4, r5, r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	000c      	movs	r4, r1
 80064de:	0010      	movs	r0, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	250a      	movs	r5, #10
 80064e4:	197b      	adds	r3, r7, r5
 80064e6:	1c22      	adds	r2, r4, #0
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	2308      	movs	r3, #8
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	1c02      	adds	r2, r0, #0
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	1dbb      	adds	r3, r7, #6
 80064f4:	1c0a      	adds	r2, r1, #0
 80064f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80064f8:	1dbb      	adds	r3, r7, #6
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	197b      	adds	r3, r7, r5
 8006500:	8819      	ldrh	r1, [r3, #0]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	4b23      	ldr	r3, [pc, #140]	; (8006594 <I2C_RequestMemoryRead+0xc0>)
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	f000 f987 	bl	800681c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	6a39      	ldr	r1, [r7, #32]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	0018      	movs	r0, r3
 8006516:	f000 f8a0 	bl	800665a <I2C_WaitOnTXISFlagUntilTimeout>
 800651a:	1e03      	subs	r3, r0, #0
 800651c:	d001      	beq.n	8006522 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e033      	b.n	800658a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006522:	1dbb      	adds	r3, r7, #6
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d107      	bne.n	800653a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800652a:	2308      	movs	r3, #8
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b2da      	uxtb	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	629a      	str	r2, [r3, #40]	; 0x28
 8006538:	e019      	b.n	800656e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800653a:	2308      	movs	r3, #8
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	b29b      	uxth	r3, r3
 8006544:	b2da      	uxtb	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	6a39      	ldr	r1, [r7, #32]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	0018      	movs	r0, r3
 8006554:	f000 f881 	bl	800665a <I2C_WaitOnTXISFlagUntilTimeout>
 8006558:	1e03      	subs	r3, r0, #0
 800655a:	d001      	beq.n	8006560 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e014      	b.n	800658a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006560:	2308      	movs	r3, #8
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	0013      	movs	r3, r2
 8006578:	2200      	movs	r2, #0
 800657a:	2140      	movs	r1, #64	; 0x40
 800657c:	f000 f82e 	bl	80065dc <I2C_WaitOnFlagUntilTimeout>
 8006580:	1e03      	subs	r3, r0, #0
 8006582:	d001      	beq.n	8006588 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b004      	add	sp, #16
 8006590:	bdb0      	pop	{r4, r5, r7, pc}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	80002000 	.word	0x80002000

08006598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2202      	movs	r2, #2
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d103      	bne.n	80065b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2200      	movs	r2, #0
 80065b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2201      	movs	r2, #1
 80065be:	4013      	ands	r3, r2
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d007      	beq.n	80065d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2101      	movs	r1, #1
 80065d0:	430a      	orrs	r2, r1
 80065d2:	619a      	str	r2, [r3, #24]
  }
}
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	46bd      	mov	sp, r7
 80065d8:	b002      	add	sp, #8
 80065da:	bd80      	pop	{r7, pc}

080065dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	1dfb      	adds	r3, r7, #7
 80065ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ec:	e021      	b.n	8006632 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	d01e      	beq.n	8006632 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f4:	f7ff f832 	bl	800565c <HAL_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d113      	bne.n	8006632 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	2220      	movs	r2, #32
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2241      	movs	r2, #65	; 0x41
 800661a:	2120      	movs	r1, #32
 800661c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2242      	movs	r2, #66	; 0x42
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2240      	movs	r2, #64	; 0x40
 800662a:	2100      	movs	r1, #0
 800662c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e00f      	b.n	8006652 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	425a      	negs	r2, r3
 8006642:	4153      	adcs	r3, r2
 8006644:	b2db      	uxtb	r3, r3
 8006646:	001a      	movs	r2, r3
 8006648:	1dfb      	adds	r3, r7, #7
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d0ce      	beq.n	80065ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b004      	add	sp, #16
 8006658:	bd80      	pop	{r7, pc}

0800665a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006666:	e02b      	b.n	80066c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	0018      	movs	r0, r3
 8006670:	f000 f86e 	bl	8006750 <I2C_IsAcknowledgeFailed>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d001      	beq.n	800667c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e029      	b.n	80066d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	3301      	adds	r3, #1
 8006680:	d01e      	beq.n	80066c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7fe ffeb 	bl	800565c <HAL_GetTick>
 8006686:	0002      	movs	r2, r0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d302      	bcc.n	8006698 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d113      	bne.n	80066c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	2220      	movs	r2, #32
 800669e:	431a      	orrs	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2241      	movs	r2, #65	; 0x41
 80066a8:	2120      	movs	r1, #32
 80066aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2242      	movs	r2, #66	; 0x42
 80066b0:	2100      	movs	r1, #0
 80066b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2240      	movs	r2, #64	; 0x40
 80066b8:	2100      	movs	r1, #0
 80066ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e007      	b.n	80066d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2202      	movs	r2, #2
 80066c8:	4013      	ands	r3, r2
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d1cc      	bne.n	8006668 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b004      	add	sp, #16
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e4:	e028      	b.n	8006738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	0018      	movs	r0, r3
 80066ee:	f000 f82f 	bl	8006750 <I2C_IsAcknowledgeFailed>
 80066f2:	1e03      	subs	r3, r0, #0
 80066f4:	d001      	beq.n	80066fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e026      	b.n	8006748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7fe ffaf 	bl	800565c <HAL_GetTick>
 80066fe:	0002      	movs	r2, r0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d113      	bne.n	8006738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006714:	2220      	movs	r2, #32
 8006716:	431a      	orrs	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2241      	movs	r2, #65	; 0x41
 8006720:	2120      	movs	r1, #32
 8006722:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2242      	movs	r2, #66	; 0x42
 8006728:	2100      	movs	r1, #0
 800672a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2240      	movs	r2, #64	; 0x40
 8006730:	2100      	movs	r1, #0
 8006732:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e007      	b.n	8006748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2220      	movs	r2, #32
 8006740:	4013      	ands	r3, r2
 8006742:	2b20      	cmp	r3, #32
 8006744:	d1cf      	bne.n	80066e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	0018      	movs	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	b004      	add	sp, #16
 800674e:	bd80      	pop	{r7, pc}

08006750 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2210      	movs	r2, #16
 8006764:	4013      	ands	r3, r2
 8006766:	2b10      	cmp	r3, #16
 8006768:	d151      	bne.n	800680e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800676a:	e021      	b.n	80067b0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	3301      	adds	r3, #1
 8006770:	d01e      	beq.n	80067b0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fe ff73 	bl	800565c <HAL_GetTick>
 8006776:	0002      	movs	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <I2C_IsAcknowledgeFailed+0x38>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d113      	bne.n	80067b0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	2220      	movs	r2, #32
 800678e:	431a      	orrs	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2241      	movs	r2, #65	; 0x41
 8006798:	2120      	movs	r1, #32
 800679a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2242      	movs	r2, #66	; 0x42
 80067a0:	2100      	movs	r1, #0
 80067a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2240      	movs	r2, #64	; 0x40
 80067a8:	2100      	movs	r1, #0
 80067aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e02f      	b.n	8006810 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2220      	movs	r2, #32
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d1d6      	bne.n	800676c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2210      	movs	r2, #16
 80067c4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2220      	movs	r2, #32
 80067cc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7ff fee1 	bl	8006598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	490d      	ldr	r1, [pc, #52]	; (8006818 <I2C_IsAcknowledgeFailed+0xc8>)
 80067e2:	400a      	ands	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	2204      	movs	r2, #4
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2241      	movs	r2, #65	; 0x41
 80067f6:	2120      	movs	r1, #32
 80067f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2242      	movs	r2, #66	; 0x42
 80067fe:	2100      	movs	r1, #0
 8006800:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2240      	movs	r2, #64	; 0x40
 8006806:	2100      	movs	r1, #0
 8006808:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e000      	b.n	8006810 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	0018      	movs	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	b004      	add	sp, #16
 8006816:	bd80      	pop	{r7, pc}
 8006818:	fe00e800 	.word	0xfe00e800

0800681c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	0008      	movs	r0, r1
 8006826:	0011      	movs	r1, r2
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	240a      	movs	r4, #10
 800682c:	193b      	adds	r3, r7, r4
 800682e:	1c02      	adds	r2, r0, #0
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	2009      	movs	r0, #9
 8006834:	183b      	adds	r3, r7, r0
 8006836:	1c0a      	adds	r2, r1, #0
 8006838:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	6a3a      	ldr	r2, [r7, #32]
 8006842:	0d51      	lsrs	r1, r2, #21
 8006844:	2280      	movs	r2, #128	; 0x80
 8006846:	00d2      	lsls	r2, r2, #3
 8006848:	400a      	ands	r2, r1
 800684a:	490e      	ldr	r1, [pc, #56]	; (8006884 <I2C_TransferConfig+0x68>)
 800684c:	430a      	orrs	r2, r1
 800684e:	43d2      	mvns	r2, r2
 8006850:	401a      	ands	r2, r3
 8006852:	0011      	movs	r1, r2
 8006854:	193b      	adds	r3, r7, r4
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	059b      	lsls	r3, r3, #22
 800685a:	0d9a      	lsrs	r2, r3, #22
 800685c:	183b      	adds	r3, r7, r0
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	0418      	lsls	r0, r3, #16
 8006862:	23ff      	movs	r3, #255	; 0xff
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	4003      	ands	r3, r0
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	431a      	orrs	r2, r3
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	46bd      	mov	sp, r7
 800687e:	b005      	add	sp, #20
 8006880:	bd90      	pop	{r4, r7, pc}
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	03ff63ff 	.word	0x03ff63ff

08006888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2241      	movs	r2, #65	; 0x41
 8006896:	5c9b      	ldrb	r3, [r3, r2]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b20      	cmp	r3, #32
 800689c:	d138      	bne.n	8006910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2240      	movs	r2, #64	; 0x40
 80068a2:	5c9b      	ldrb	r3, [r3, r2]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e032      	b.n	8006912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2240      	movs	r2, #64	; 0x40
 80068b0:	2101      	movs	r1, #1
 80068b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2241      	movs	r2, #65	; 0x41
 80068b8:	2124      	movs	r1, #36	; 0x24
 80068ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2101      	movs	r1, #1
 80068c8:	438a      	bics	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4911      	ldr	r1, [pc, #68]	; (800691c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80068d8:	400a      	ands	r2, r1
 80068da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6819      	ldr	r1, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2101      	movs	r1, #1
 80068f8:	430a      	orrs	r2, r1
 80068fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2241      	movs	r2, #65	; 0x41
 8006900:	2120      	movs	r1, #32
 8006902:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2240      	movs	r2, #64	; 0x40
 8006908:	2100      	movs	r1, #0
 800690a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	e000      	b.n	8006912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006910:	2302      	movs	r3, #2
  }
}
 8006912:	0018      	movs	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	ffffefff 	.word	0xffffefff

08006920 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2241      	movs	r2, #65	; 0x41
 800692e:	5c9b      	ldrb	r3, [r3, r2]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b20      	cmp	r3, #32
 8006934:	d139      	bne.n	80069aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2240      	movs	r2, #64	; 0x40
 800693a:	5c9b      	ldrb	r3, [r3, r2]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006940:	2302      	movs	r3, #2
 8006942:	e033      	b.n	80069ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2240      	movs	r2, #64	; 0x40
 8006948:	2101      	movs	r1, #1
 800694a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2241      	movs	r2, #65	; 0x41
 8006950:	2124      	movs	r1, #36	; 0x24
 8006952:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2101      	movs	r1, #1
 8006960:	438a      	bics	r2, r1
 8006962:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a11      	ldr	r2, [pc, #68]	; (80069b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006970:	4013      	ands	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2101      	movs	r1, #1
 8006992:	430a      	orrs	r2, r1
 8006994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2241      	movs	r2, #65	; 0x41
 800699a:	2120      	movs	r1, #32
 800699c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2240      	movs	r2, #64	; 0x40
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e000      	b.n	80069ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069aa:	2302      	movs	r3, #2
  }
}
 80069ac:	0018      	movs	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b004      	add	sp, #16
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	fffff0ff 	.word	0xfffff0ff

080069b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b8:	b5b0      	push	{r4, r5, r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f000 fbbc 	bl	8007144 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069cc:	4bc8      	ldr	r3, [pc, #800]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	220c      	movs	r2, #12
 80069d2:	4013      	ands	r3, r2
 80069d4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069d6:	4bc6      	ldr	r3, [pc, #792]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	025b      	lsls	r3, r3, #9
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	4013      	ands	r3, r2
 80069ea:	d100      	bne.n	80069ee <HAL_RCC_OscConfig+0x36>
 80069ec:	e07e      	b.n	8006aec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d007      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2b0c      	cmp	r3, #12
 80069f8:	d112      	bne.n	8006a20 <HAL_RCC_OscConfig+0x68>
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	025b      	lsls	r3, r3, #9
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d10d      	bne.n	8006a20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a04:	4bba      	ldr	r3, [pc, #744]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	2380      	movs	r3, #128	; 0x80
 8006a0a:	029b      	lsls	r3, r3, #10
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d100      	bne.n	8006a12 <HAL_RCC_OscConfig+0x5a>
 8006a10:	e06b      	b.n	8006aea <HAL_RCC_OscConfig+0x132>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d167      	bne.n	8006aea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f000 fb92 	bl	8007144 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	025b      	lsls	r3, r3, #9
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d107      	bne.n	8006a3c <HAL_RCC_OscConfig+0x84>
 8006a2c:	4bb0      	ldr	r3, [pc, #704]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4baf      	ldr	r3, [pc, #700]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a32:	2180      	movs	r1, #128	; 0x80
 8006a34:	0249      	lsls	r1, r1, #9
 8006a36:	430a      	orrs	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e027      	b.n	8006a8c <HAL_RCC_OscConfig+0xd4>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	23a0      	movs	r3, #160	; 0xa0
 8006a42:	02db      	lsls	r3, r3, #11
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d10e      	bne.n	8006a66 <HAL_RCC_OscConfig+0xae>
 8006a48:	4ba9      	ldr	r3, [pc, #676]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	4ba8      	ldr	r3, [pc, #672]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	02c9      	lsls	r1, r1, #11
 8006a52:	430a      	orrs	r2, r1
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	4ba6      	ldr	r3, [pc, #664]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4ba5      	ldr	r3, [pc, #660]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a5c:	2180      	movs	r1, #128	; 0x80
 8006a5e:	0249      	lsls	r1, r1, #9
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e012      	b.n	8006a8c <HAL_RCC_OscConfig+0xd4>
 8006a66:	4ba2      	ldr	r3, [pc, #648]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4ba1      	ldr	r3, [pc, #644]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a6c:	49a1      	ldr	r1, [pc, #644]	; (8006cf4 <HAL_RCC_OscConfig+0x33c>)
 8006a6e:	400a      	ands	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	4b9f      	ldr	r3, [pc, #636]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	2380      	movs	r3, #128	; 0x80
 8006a78:	025b      	lsls	r3, r3, #9
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4b9b      	ldr	r3, [pc, #620]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b9a      	ldr	r3, [pc, #616]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006a86:	499c      	ldr	r1, [pc, #624]	; (8006cf8 <HAL_RCC_OscConfig+0x340>)
 8006a88:	400a      	ands	r2, r1
 8006a8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fe fde2 	bl	800565c <HAL_GetTick>
 8006a98:	0003      	movs	r3, r0
 8006a9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a9c:	e009      	b.n	8006ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a9e:	f7fe fddd 	bl	800565c <HAL_GetTick>
 8006aa2:	0002      	movs	r2, r0
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b64      	cmp	r3, #100	; 0x64
 8006aaa:	d902      	bls.n	8006ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	f000 fb49 	bl	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ab2:	4b8f      	ldr	r3, [pc, #572]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	2380      	movs	r3, #128	; 0x80
 8006ab8:	029b      	lsls	r3, r3, #10
 8006aba:	4013      	ands	r3, r2
 8006abc:	d0ef      	beq.n	8006a9e <HAL_RCC_OscConfig+0xe6>
 8006abe:	e015      	b.n	8006aec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac0:	f7fe fdcc 	bl	800565c <HAL_GetTick>
 8006ac4:	0003      	movs	r3, r0
 8006ac6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aca:	f7fe fdc7 	bl	800565c <HAL_GetTick>
 8006ace:	0002      	movs	r2, r0
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b64      	cmp	r3, #100	; 0x64
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e333      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006adc:	4b84      	ldr	r3, [pc, #528]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	2380      	movs	r3, #128	; 0x80
 8006ae2:	029b      	lsls	r3, r3, #10
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	d1f0      	bne.n	8006aca <HAL_RCC_OscConfig+0x112>
 8006ae8:	e000      	b.n	8006aec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2202      	movs	r2, #2
 8006af2:	4013      	ands	r3, r2
 8006af4:	d100      	bne.n	8006af8 <HAL_RCC_OscConfig+0x140>
 8006af6:	e098      	b.n	8006c2a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2220      	movs	r2, #32
 8006b02:	4013      	ands	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006b06:	4b7a      	ldr	r3, [pc, #488]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b79      	ldr	r3, [pc, #484]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b0c:	2120      	movs	r1, #32
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	2220      	movs	r2, #32
 8006b16:	4393      	bics	r3, r2
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d005      	beq.n	8006b2c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d13d      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x1ea>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d13a      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006b2c:	4b70      	ldr	r3, [pc, #448]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2204      	movs	r2, #4
 8006b32:	4013      	ands	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_RCC_OscConfig+0x188>
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e301      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b40:	4b6b      	ldr	r3, [pc, #428]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4a6d      	ldr	r2, [pc, #436]	; (8006cfc <HAL_RCC_OscConfig+0x344>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	0019      	movs	r1, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	021a      	lsls	r2, r3, #8
 8006b50:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006b56:	4b66      	ldr	r3, [pc, #408]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2209      	movs	r2, #9
 8006b5c:	4393      	bics	r3, r2
 8006b5e:	0019      	movs	r1, r3
 8006b60:	4b63      	ldr	r3, [pc, #396]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	430a      	orrs	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b68:	f000 fc20 	bl	80073ac <HAL_RCC_GetSysClockFreq>
 8006b6c:	0001      	movs	r1, r0
 8006b6e:	4b60      	ldr	r3, [pc, #384]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	220f      	movs	r2, #15
 8006b76:	4013      	ands	r3, r2
 8006b78:	4a61      	ldr	r2, [pc, #388]	; (8006d00 <HAL_RCC_OscConfig+0x348>)
 8006b7a:	5cd3      	ldrb	r3, [r2, r3]
 8006b7c:	000a      	movs	r2, r1
 8006b7e:	40da      	lsrs	r2, r3
 8006b80:	4b60      	ldr	r3, [pc, #384]	; (8006d04 <HAL_RCC_OscConfig+0x34c>)
 8006b82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8006b84:	2513      	movs	r5, #19
 8006b86:	197c      	adds	r4, r7, r5
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f7fe fd31 	bl	80055f0 <HAL_InitTick>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006b92:	197b      	adds	r3, r7, r5
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d047      	beq.n	8006c2a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006b9a:	2313      	movs	r3, #19
 8006b9c:	18fb      	adds	r3, r7, r3
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	e2d0      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d027      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006ba8:	4b51      	ldr	r3, [pc, #324]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2209      	movs	r2, #9
 8006bae:	4393      	bics	r3, r2
 8006bb0:	0019      	movs	r1, r3
 8006bb2:	4b4f      	ldr	r3, [pc, #316]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bba:	f7fe fd4f 	bl	800565c <HAL_GetTick>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc4:	f7fe fd4a 	bl	800565c <HAL_GetTick>
 8006bc8:	0002      	movs	r2, r0
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e2b6      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bd6:	4b46      	ldr	r3, [pc, #280]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d0f1      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be0:	4b43      	ldr	r3, [pc, #268]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4a45      	ldr	r2, [pc, #276]	; (8006cfc <HAL_RCC_OscConfig+0x344>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	0019      	movs	r1, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	e018      	b.n	8006c2a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf8:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	4b3c      	ldr	r3, [pc, #240]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006bfe:	2101      	movs	r1, #1
 8006c00:	438a      	bics	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c04:	f7fe fd2a 	bl	800565c <HAL_GetTick>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c0e:	f7fe fd25 	bl	800565c <HAL_GetTick>
 8006c12:	0002      	movs	r2, r0
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e291      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c20:	4b33      	ldr	r3, [pc, #204]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2204      	movs	r2, #4
 8006c26:	4013      	ands	r3, r2
 8006c28:	d1f1      	bne.n	8006c0e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2210      	movs	r2, #16
 8006c30:	4013      	ands	r3, r2
 8006c32:	d100      	bne.n	8006c36 <HAL_RCC_OscConfig+0x27e>
 8006c34:	e09f      	b.n	8006d76 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d13f      	bne.n	8006cbc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c3c:	4b2c      	ldr	r3, [pc, #176]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4013      	ands	r3, r2
 8006c46:	d005      	beq.n	8006c54 <HAL_RCC_OscConfig+0x29c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e277      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c54:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	4a2b      	ldr	r2, [pc, #172]	; (8006d08 <HAL_RCC_OscConfig+0x350>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	0019      	movs	r1, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c62:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c68:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	0a19      	lsrs	r1, r3, #8
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	061a      	lsls	r2, r3, #24
 8006c76:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	0b5b      	lsrs	r3, r3, #13
 8006c82:	3301      	adds	r3, #1
 8006c84:	2280      	movs	r2, #128	; 0x80
 8006c86:	0212      	lsls	r2, r2, #8
 8006c88:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006c8a:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	091b      	lsrs	r3, r3, #4
 8006c90:	210f      	movs	r1, #15
 8006c92:	400b      	ands	r3, r1
 8006c94:	491a      	ldr	r1, [pc, #104]	; (8006d00 <HAL_RCC_OscConfig+0x348>)
 8006c96:	5ccb      	ldrb	r3, [r1, r3]
 8006c98:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c9a:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <HAL_RCC_OscConfig+0x34c>)
 8006c9c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8006c9e:	2513      	movs	r5, #19
 8006ca0:	197c      	adds	r4, r7, r5
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	f7fe fca4 	bl	80055f0 <HAL_InitTick>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006cac:	197b      	adds	r3, r7, r5
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d060      	beq.n	8006d76 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8006cb4:	2313      	movs	r3, #19
 8006cb6:	18fb      	adds	r3, r7, r3
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	e243      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d03e      	beq.n	8006d42 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <HAL_RCC_OscConfig+0x338>)
 8006cca:	2180      	movs	r1, #128	; 0x80
 8006ccc:	0049      	lsls	r1, r1, #1
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd2:	f7fe fcc3 	bl	800565c <HAL_GetTick>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006cda:	e017      	b.n	8006d0c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cdc:	f7fe fcbe 	bl	800565c <HAL_GetTick>
 8006ce0:	0002      	movs	r2, r0
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d910      	bls.n	8006d0c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e22a      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	fffeffff 	.word	0xfffeffff
 8006cf8:	fffbffff 	.word	0xfffbffff
 8006cfc:	ffffe0ff 	.word	0xffffe0ff
 8006d00:	0800e95c 	.word	0x0800e95c
 8006d04:	2000000c 	.word	0x2000000c
 8006d08:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006d0c:	4bc6      	ldr	r3, [pc, #792]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4013      	ands	r3, r2
 8006d16:	d0e1      	beq.n	8006cdc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d18:	4bc3      	ldr	r3, [pc, #780]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4ac3      	ldr	r2, [pc, #780]	; (800702c <HAL_RCC_OscConfig+0x674>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	0019      	movs	r1, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d26:	4bc0      	ldr	r3, [pc, #768]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d2c:	4bbe      	ldr	r3, [pc, #760]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	0a19      	lsrs	r1, r3, #8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	061a      	lsls	r2, r3, #24
 8006d3a:	4bbb      	ldr	r3, [pc, #748]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	e019      	b.n	8006d76 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d42:	4bb9      	ldr	r3, [pc, #740]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4bb8      	ldr	r3, [pc, #736]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d48:	49b9      	ldr	r1, [pc, #740]	; (8007030 <HAL_RCC_OscConfig+0x678>)
 8006d4a:	400a      	ands	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4e:	f7fe fc85 	bl	800565c <HAL_GetTick>
 8006d52:	0003      	movs	r3, r0
 8006d54:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d58:	f7fe fc80 	bl	800565c <HAL_GetTick>
 8006d5c:	0002      	movs	r2, r0
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e1ec      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d6a:	4baf      	ldr	r3, [pc, #700]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4013      	ands	r3, r2
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d036      	beq.n	8006dee <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d019      	beq.n	8006dbc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d88:	4ba7      	ldr	r3, [pc, #668]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d8c:	4ba6      	ldr	r3, [pc, #664]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006d8e:	2101      	movs	r1, #1
 8006d90:	430a      	orrs	r2, r1
 8006d92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d94:	f7fe fc62 	bl	800565c <HAL_GetTick>
 8006d98:	0003      	movs	r3, r0
 8006d9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d9e:	f7fe fc5d 	bl	800565c <HAL_GetTick>
 8006da2:	0002      	movs	r2, r0
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e1c9      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006db0:	4b9d      	ldr	r3, [pc, #628]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	2202      	movs	r2, #2
 8006db6:	4013      	ands	r3, r2
 8006db8:	d0f1      	beq.n	8006d9e <HAL_RCC_OscConfig+0x3e6>
 8006dba:	e018      	b.n	8006dee <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dbc:	4b9a      	ldr	r3, [pc, #616]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc0:	4b99      	ldr	r3, [pc, #612]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc8:	f7fe fc48 	bl	800565c <HAL_GetTick>
 8006dcc:	0003      	movs	r3, r0
 8006dce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd2:	f7fe fc43 	bl	800565c <HAL_GetTick>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e1af      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006de4:	4b90      	ldr	r3, [pc, #576]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de8:	2202      	movs	r2, #2
 8006dea:	4013      	ands	r3, r2
 8006dec:	d1f1      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2204      	movs	r2, #4
 8006df4:	4013      	ands	r3, r2
 8006df6:	d100      	bne.n	8006dfa <HAL_RCC_OscConfig+0x442>
 8006df8:	e0af      	b.n	8006f5a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dfa:	2323      	movs	r3, #35	; 0x23
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e02:	4b89      	ldr	r3, [pc, #548]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	055b      	lsls	r3, r3, #21
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d10a      	bne.n	8006e24 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e0e:	4b86      	ldr	r3, [pc, #536]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e12:	4b85      	ldr	r3, [pc, #532]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e14:	2180      	movs	r1, #128	; 0x80
 8006e16:	0549      	lsls	r1, r1, #21
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006e1c:	2323      	movs	r3, #35	; 0x23
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e24:	4b83      	ldr	r3, [pc, #524]	; (8007034 <HAL_RCC_OscConfig+0x67c>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d11a      	bne.n	8006e66 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e30:	4b80      	ldr	r3, [pc, #512]	; (8007034 <HAL_RCC_OscConfig+0x67c>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b7f      	ldr	r3, [pc, #508]	; (8007034 <HAL_RCC_OscConfig+0x67c>)
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	0049      	lsls	r1, r1, #1
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e3e:	f7fe fc0d 	bl	800565c <HAL_GetTick>
 8006e42:	0003      	movs	r3, r0
 8006e44:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e48:	f7fe fc08 	bl	800565c <HAL_GetTick>
 8006e4c:	0002      	movs	r2, r0
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b64      	cmp	r3, #100	; 0x64
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e174      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5a:	4b76      	ldr	r3, [pc, #472]	; (8007034 <HAL_RCC_OscConfig+0x67c>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	4013      	ands	r3, r2
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	2380      	movs	r3, #128	; 0x80
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d107      	bne.n	8006e82 <HAL_RCC_OscConfig+0x4ca>
 8006e72:	4b6d      	ldr	r3, [pc, #436]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e76:	4b6c      	ldr	r3, [pc, #432]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	0049      	lsls	r1, r1, #1
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006e80:	e031      	b.n	8006ee6 <HAL_RCC_OscConfig+0x52e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10c      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
 8006e8a:	4b67      	ldr	r3, [pc, #412]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e8e:	4b66      	ldr	r3, [pc, #408]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e90:	4967      	ldr	r1, [pc, #412]	; (8007030 <HAL_RCC_OscConfig+0x678>)
 8006e92:	400a      	ands	r2, r1
 8006e94:	651a      	str	r2, [r3, #80]	; 0x50
 8006e96:	4b64      	ldr	r3, [pc, #400]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e9a:	4b63      	ldr	r3, [pc, #396]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006e9c:	4966      	ldr	r1, [pc, #408]	; (8007038 <HAL_RCC_OscConfig+0x680>)
 8006e9e:	400a      	ands	r2, r1
 8006ea0:	651a      	str	r2, [r3, #80]	; 0x50
 8006ea2:	e020      	b.n	8006ee6 <HAL_RCC_OscConfig+0x52e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	23a0      	movs	r3, #160	; 0xa0
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d10e      	bne.n	8006ece <HAL_RCC_OscConfig+0x516>
 8006eb0:	4b5d      	ldr	r3, [pc, #372]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eb4:	4b5c      	ldr	r3, [pc, #368]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006eb6:	2180      	movs	r1, #128	; 0x80
 8006eb8:	00c9      	lsls	r1, r1, #3
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	651a      	str	r2, [r3, #80]	; 0x50
 8006ebe:	4b5a      	ldr	r3, [pc, #360]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec2:	4b59      	ldr	r3, [pc, #356]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006ec4:	2180      	movs	r1, #128	; 0x80
 8006ec6:	0049      	lsls	r1, r1, #1
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	651a      	str	r2, [r3, #80]	; 0x50
 8006ecc:	e00b      	b.n	8006ee6 <HAL_RCC_OscConfig+0x52e>
 8006ece:	4b56      	ldr	r3, [pc, #344]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ed2:	4b55      	ldr	r3, [pc, #340]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006ed4:	4956      	ldr	r1, [pc, #344]	; (8007030 <HAL_RCC_OscConfig+0x678>)
 8006ed6:	400a      	ands	r2, r1
 8006ed8:	651a      	str	r2, [r3, #80]	; 0x50
 8006eda:	4b53      	ldr	r3, [pc, #332]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ede:	4b52      	ldr	r3, [pc, #328]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006ee0:	4955      	ldr	r1, [pc, #340]	; (8007038 <HAL_RCC_OscConfig+0x680>)
 8006ee2:	400a      	ands	r2, r1
 8006ee4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d015      	beq.n	8006f1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eee:	f7fe fbb5 	bl	800565c <HAL_GetTick>
 8006ef2:	0003      	movs	r3, r0
 8006ef4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ef6:	e009      	b.n	8006f0c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef8:	f7fe fbb0 	bl	800565c <HAL_GetTick>
 8006efc:	0002      	movs	r2, r0
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	4a4e      	ldr	r2, [pc, #312]	; (800703c <HAL_RCC_OscConfig+0x684>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e11b      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f0c:	4b46      	ldr	r3, [pc, #280]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f10:	2380      	movs	r3, #128	; 0x80
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4013      	ands	r3, r2
 8006f16:	d0ef      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x540>
 8006f18:	e014      	b.n	8006f44 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f1a:	f7fe fb9f 	bl	800565c <HAL_GetTick>
 8006f1e:	0003      	movs	r3, r0
 8006f20:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f22:	e009      	b.n	8006f38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f24:	f7fe fb9a 	bl	800565c <HAL_GetTick>
 8006f28:	0002      	movs	r2, r0
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	4a43      	ldr	r2, [pc, #268]	; (800703c <HAL_RCC_OscConfig+0x684>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e105      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f38:	4b3b      	ldr	r3, [pc, #236]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4013      	ands	r3, r2
 8006f42:	d1ef      	bne.n	8006f24 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f44:	2323      	movs	r3, #35	; 0x23
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d105      	bne.n	8006f5a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f4e:	4b36      	ldr	r3, [pc, #216]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f52:	4b35      	ldr	r3, [pc, #212]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f54:	493a      	ldr	r1, [pc, #232]	; (8007040 <HAL_RCC_OscConfig+0x688>)
 8006f56:	400a      	ands	r2, r1
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	4013      	ands	r3, r2
 8006f62:	d049      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d026      	beq.n	8006fba <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006f6c:	4b2e      	ldr	r3, [pc, #184]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	4b2d      	ldr	r3, [pc, #180]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f72:	2101      	movs	r1, #1
 8006f74:	430a      	orrs	r2, r1
 8006f76:	609a      	str	r2, [r3, #8]
 8006f78:	4b2b      	ldr	r3, [pc, #172]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006f7e:	2101      	movs	r1, #1
 8006f80:	430a      	orrs	r2, r1
 8006f82:	635a      	str	r2, [r3, #52]	; 0x34
 8006f84:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <HAL_RCC_OscConfig+0x68c>)
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	4b2e      	ldr	r3, [pc, #184]	; (8007044 <HAL_RCC_OscConfig+0x68c>)
 8006f8a:	2180      	movs	r1, #128	; 0x80
 8006f8c:	0189      	lsls	r1, r1, #6
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f92:	f7fe fb63 	bl	800565c <HAL_GetTick>
 8006f96:	0003      	movs	r3, r0
 8006f98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9c:	f7fe fb5e 	bl	800565c <HAL_GetTick>
 8006fa0:	0002      	movs	r2, r0
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0ca      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fae:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	d0f1      	beq.n	8006f9c <HAL_RCC_OscConfig+0x5e4>
 8006fb8:	e01e      	b.n	8006ff8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006fba:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	438a      	bics	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]
 8006fc6:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <HAL_RCC_OscConfig+0x68c>)
 8006fc8:	6a1a      	ldr	r2, [r3, #32]
 8006fca:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <HAL_RCC_OscConfig+0x68c>)
 8006fcc:	491e      	ldr	r1, [pc, #120]	; (8007048 <HAL_RCC_OscConfig+0x690>)
 8006fce:	400a      	ands	r2, r1
 8006fd0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd2:	f7fe fb43 	bl	800565c <HAL_GetTick>
 8006fd6:	0003      	movs	r3, r0
 8006fd8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fdc:	f7fe fb3e 	bl	800565c <HAL_GetTick>
 8006fe0:	0002      	movs	r2, r0
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e0aa      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d1f1      	bne.n	8006fdc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d100      	bne.n	8007002 <HAL_RCC_OscConfig+0x64a>
 8007000:	e09f      	b.n	8007142 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2b0c      	cmp	r3, #12
 8007006:	d100      	bne.n	800700a <HAL_RCC_OscConfig+0x652>
 8007008:	e078      	b.n	80070fc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	2b02      	cmp	r3, #2
 8007010:	d159      	bne.n	80070c6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b04      	ldr	r3, [pc, #16]	; (8007028 <HAL_RCC_OscConfig+0x670>)
 8007018:	490c      	ldr	r1, [pc, #48]	; (800704c <HAL_RCC_OscConfig+0x694>)
 800701a:	400a      	ands	r2, r1
 800701c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701e:	f7fe fb1d 	bl	800565c <HAL_GetTick>
 8007022:	0003      	movs	r3, r0
 8007024:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007026:	e01c      	b.n	8007062 <HAL_RCC_OscConfig+0x6aa>
 8007028:	40021000 	.word	0x40021000
 800702c:	ffff1fff 	.word	0xffff1fff
 8007030:	fffffeff 	.word	0xfffffeff
 8007034:	40007000 	.word	0x40007000
 8007038:	fffffbff 	.word	0xfffffbff
 800703c:	00001388 	.word	0x00001388
 8007040:	efffffff 	.word	0xefffffff
 8007044:	40010000 	.word	0x40010000
 8007048:	ffffdfff 	.word	0xffffdfff
 800704c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007050:	f7fe fb04 	bl	800565c <HAL_GetTick>
 8007054:	0002      	movs	r2, r0
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e070      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007062:	4b3a      	ldr	r3, [pc, #232]	; (800714c <HAL_RCC_OscConfig+0x794>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	049b      	lsls	r3, r3, #18
 800706a:	4013      	ands	r3, r2
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800706e:	4b37      	ldr	r3, [pc, #220]	; (800714c <HAL_RCC_OscConfig+0x794>)
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	4a37      	ldr	r2, [pc, #220]	; (8007150 <HAL_RCC_OscConfig+0x798>)
 8007074:	4013      	ands	r3, r2
 8007076:	0019      	movs	r1, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	431a      	orrs	r2, r3
 8007088:	4b30      	ldr	r3, [pc, #192]	; (800714c <HAL_RCC_OscConfig+0x794>)
 800708a:	430a      	orrs	r2, r1
 800708c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800708e:	4b2f      	ldr	r3, [pc, #188]	; (800714c <HAL_RCC_OscConfig+0x794>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <HAL_RCC_OscConfig+0x794>)
 8007094:	2180      	movs	r1, #128	; 0x80
 8007096:	0449      	lsls	r1, r1, #17
 8007098:	430a      	orrs	r2, r1
 800709a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709c:	f7fe fade 	bl	800565c <HAL_GetTick>
 80070a0:	0003      	movs	r3, r0
 80070a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80070a4:	e008      	b.n	80070b8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a6:	f7fe fad9 	bl	800565c <HAL_GetTick>
 80070aa:	0002      	movs	r2, r0
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e045      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80070b8:	4b24      	ldr	r3, [pc, #144]	; (800714c <HAL_RCC_OscConfig+0x794>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	049b      	lsls	r3, r3, #18
 80070c0:	4013      	ands	r3, r2
 80070c2:	d0f0      	beq.n	80070a6 <HAL_RCC_OscConfig+0x6ee>
 80070c4:	e03d      	b.n	8007142 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070c6:	4b21      	ldr	r3, [pc, #132]	; (800714c <HAL_RCC_OscConfig+0x794>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4b20      	ldr	r3, [pc, #128]	; (800714c <HAL_RCC_OscConfig+0x794>)
 80070cc:	4921      	ldr	r1, [pc, #132]	; (8007154 <HAL_RCC_OscConfig+0x79c>)
 80070ce:	400a      	ands	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d2:	f7fe fac3 	bl	800565c <HAL_GetTick>
 80070d6:	0003      	movs	r3, r0
 80070d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070da:	e008      	b.n	80070ee <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070dc:	f7fe fabe 	bl	800565c <HAL_GetTick>
 80070e0:	0002      	movs	r2, r0
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e02a      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070ee:	4b17      	ldr	r3, [pc, #92]	; (800714c <HAL_RCC_OscConfig+0x794>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	2380      	movs	r3, #128	; 0x80
 80070f4:	049b      	lsls	r3, r3, #18
 80070f6:	4013      	ands	r3, r2
 80070f8:	d1f0      	bne.n	80070dc <HAL_RCC_OscConfig+0x724>
 80070fa:	e022      	b.n	8007142 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e01d      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007108:	4b10      	ldr	r3, [pc, #64]	; (800714c <HAL_RCC_OscConfig+0x794>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	025b      	lsls	r3, r3, #9
 8007114:	401a      	ands	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	429a      	cmp	r2, r3
 800711c:	d10f      	bne.n	800713e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	23f0      	movs	r3, #240	; 0xf0
 8007122:	039b      	lsls	r3, r3, #14
 8007124:	401a      	ands	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d107      	bne.n	800713e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	23c0      	movs	r3, #192	; 0xc0
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	401a      	ands	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800713a:	429a      	cmp	r2, r3
 800713c:	d001      	beq.n	8007142 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	0018      	movs	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	b00a      	add	sp, #40	; 0x28
 800714a:	bdb0      	pop	{r4, r5, r7, pc}
 800714c:	40021000 	.word	0x40021000
 8007150:	ff02ffff 	.word	0xff02ffff
 8007154:	feffffff 	.word	0xfeffffff

08007158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007158:	b5b0      	push	{r4, r5, r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e10d      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800716c:	4b88      	ldr	r3, [pc, #544]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2201      	movs	r2, #1
 8007172:	4013      	ands	r3, r2
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d911      	bls.n	800719e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717a:	4b85      	ldr	r3, [pc, #532]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	4393      	bics	r3, r2
 8007182:	0019      	movs	r1, r3
 8007184:	4b82      	ldr	r3, [pc, #520]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800718c:	4b80      	ldr	r3, [pc, #512]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2201      	movs	r2, #1
 8007192:	4013      	ands	r3, r2
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d001      	beq.n	800719e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e0f4      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2202      	movs	r2, #2
 80071a4:	4013      	ands	r3, r2
 80071a6:	d009      	beq.n	80071bc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a8:	4b7a      	ldr	r3, [pc, #488]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	22f0      	movs	r2, #240	; 0xf0
 80071ae:	4393      	bics	r3, r2
 80071b0:	0019      	movs	r1, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	4b77      	ldr	r3, [pc, #476]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 80071b8:	430a      	orrs	r2, r1
 80071ba:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2201      	movs	r2, #1
 80071c2:	4013      	ands	r3, r2
 80071c4:	d100      	bne.n	80071c8 <HAL_RCC_ClockConfig+0x70>
 80071c6:	e089      	b.n	80072dc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d107      	bne.n	80071e0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071d0:	4b70      	ldr	r3, [pc, #448]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	2380      	movs	r3, #128	; 0x80
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	4013      	ands	r3, r2
 80071da:	d120      	bne.n	800721e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e0d3      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d107      	bne.n	80071f8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e8:	4b6a      	ldr	r3, [pc, #424]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	049b      	lsls	r3, r3, #18
 80071f0:	4013      	ands	r3, r2
 80071f2:	d114      	bne.n	800721e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e0c7      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d106      	bne.n	800720e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007200:	4b64      	ldr	r3, [pc, #400]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2204      	movs	r2, #4
 8007206:	4013      	ands	r3, r2
 8007208:	d109      	bne.n	800721e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e0bc      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800720e:	4b61      	ldr	r3, [pc, #388]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	2380      	movs	r3, #128	; 0x80
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4013      	ands	r3, r2
 8007218:	d101      	bne.n	800721e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e0b4      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800721e:	4b5d      	ldr	r3, [pc, #372]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2203      	movs	r2, #3
 8007224:	4393      	bics	r3, r2
 8007226:	0019      	movs	r1, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	4b59      	ldr	r3, [pc, #356]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 800722e:	430a      	orrs	r2, r1
 8007230:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007232:	f7fe fa13 	bl	800565c <HAL_GetTick>
 8007236:	0003      	movs	r3, r0
 8007238:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d111      	bne.n	8007266 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007242:	e009      	b.n	8007258 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007244:	f7fe fa0a 	bl	800565c <HAL_GetTick>
 8007248:	0002      	movs	r2, r0
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	4a52      	ldr	r2, [pc, #328]	; (8007398 <HAL_RCC_ClockConfig+0x240>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e097      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007258:	4b4e      	ldr	r3, [pc, #312]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	220c      	movs	r2, #12
 800725e:	4013      	ands	r3, r2
 8007260:	2b08      	cmp	r3, #8
 8007262:	d1ef      	bne.n	8007244 <HAL_RCC_ClockConfig+0xec>
 8007264:	e03a      	b.n	80072dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b03      	cmp	r3, #3
 800726c:	d111      	bne.n	8007292 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800726e:	e009      	b.n	8007284 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007270:	f7fe f9f4 	bl	800565c <HAL_GetTick>
 8007274:	0002      	movs	r2, r0
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	4a47      	ldr	r2, [pc, #284]	; (8007398 <HAL_RCC_ClockConfig+0x240>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e081      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007284:	4b43      	ldr	r3, [pc, #268]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	220c      	movs	r2, #12
 800728a:	4013      	ands	r3, r2
 800728c:	2b0c      	cmp	r3, #12
 800728e:	d1ef      	bne.n	8007270 <HAL_RCC_ClockConfig+0x118>
 8007290:	e024      	b.n	80072dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d11b      	bne.n	80072d2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800729a:	e009      	b.n	80072b0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800729c:	f7fe f9de 	bl	800565c <HAL_GetTick>
 80072a0:	0002      	movs	r2, r0
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	4a3c      	ldr	r2, [pc, #240]	; (8007398 <HAL_RCC_ClockConfig+0x240>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e06b      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072b0:	4b38      	ldr	r3, [pc, #224]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	220c      	movs	r2, #12
 80072b6:	4013      	ands	r3, r2
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d1ef      	bne.n	800729c <HAL_RCC_ClockConfig+0x144>
 80072bc:	e00e      	b.n	80072dc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072be:	f7fe f9cd 	bl	800565c <HAL_GetTick>
 80072c2:	0002      	movs	r2, r0
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	4a33      	ldr	r2, [pc, #204]	; (8007398 <HAL_RCC_ClockConfig+0x240>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e05a      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80072d2:	4b30      	ldr	r3, [pc, #192]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	220c      	movs	r2, #12
 80072d8:	4013      	ands	r3, r2
 80072da:	d1f0      	bne.n	80072be <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072dc:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	4013      	ands	r3, r2
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d211      	bcs.n	800730e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ea:	4b29      	ldr	r3, [pc, #164]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2201      	movs	r2, #1
 80072f0:	4393      	bics	r3, r2
 80072f2:	0019      	movs	r1, r3
 80072f4:	4b26      	ldr	r3, [pc, #152]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072fc:	4b24      	ldr	r3, [pc, #144]	; (8007390 <HAL_RCC_ClockConfig+0x238>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2201      	movs	r2, #1
 8007302:	4013      	ands	r3, r2
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d001      	beq.n	800730e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e03c      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2204      	movs	r2, #4
 8007314:	4013      	ands	r3, r2
 8007316:	d009      	beq.n	800732c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	4a1f      	ldr	r2, [pc, #124]	; (800739c <HAL_RCC_ClockConfig+0x244>)
 800731e:	4013      	ands	r3, r2
 8007320:	0019      	movs	r1, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007328:	430a      	orrs	r2, r1
 800732a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2208      	movs	r2, #8
 8007332:	4013      	ands	r3, r2
 8007334:	d00a      	beq.n	800734c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007336:	4b17      	ldr	r3, [pc, #92]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	4a19      	ldr	r2, [pc, #100]	; (80073a0 <HAL_RCC_ClockConfig+0x248>)
 800733c:	4013      	ands	r3, r2
 800733e:	0019      	movs	r1, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	00da      	lsls	r2, r3, #3
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007348:	430a      	orrs	r2, r1
 800734a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800734c:	f000 f82e 	bl	80073ac <HAL_RCC_GetSysClockFreq>
 8007350:	0001      	movs	r1, r0
 8007352:	4b10      	ldr	r3, [pc, #64]	; (8007394 <HAL_RCC_ClockConfig+0x23c>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	091b      	lsrs	r3, r3, #4
 8007358:	220f      	movs	r2, #15
 800735a:	4013      	ands	r3, r2
 800735c:	4a11      	ldr	r2, [pc, #68]	; (80073a4 <HAL_RCC_ClockConfig+0x24c>)
 800735e:	5cd3      	ldrb	r3, [r2, r3]
 8007360:	000a      	movs	r2, r1
 8007362:	40da      	lsrs	r2, r3
 8007364:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <HAL_RCC_ClockConfig+0x250>)
 8007366:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8007368:	250b      	movs	r5, #11
 800736a:	197c      	adds	r4, r7, r5
 800736c:	2000      	movs	r0, #0
 800736e:	f7fe f93f 	bl	80055f0 <HAL_InitTick>
 8007372:	0003      	movs	r3, r0
 8007374:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007376:	197b      	adds	r3, r7, r5
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800737e:	230b      	movs	r3, #11
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	e000      	b.n	8007388 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	0018      	movs	r0, r3
 800738a:	46bd      	mov	sp, r7
 800738c:	b004      	add	sp, #16
 800738e:	bdb0      	pop	{r4, r5, r7, pc}
 8007390:	40022000 	.word	0x40022000
 8007394:	40021000 	.word	0x40021000
 8007398:	00001388 	.word	0x00001388
 800739c:	fffff8ff 	.word	0xfffff8ff
 80073a0:	ffffc7ff 	.word	0xffffc7ff
 80073a4:	0800e95c 	.word	0x0800e95c
 80073a8:	2000000c 	.word	0x2000000c

080073ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80073b2:	4b3b      	ldr	r3, [pc, #236]	; (80074a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	220c      	movs	r2, #12
 80073bc:	4013      	ands	r3, r2
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d00e      	beq.n	80073e0 <HAL_RCC_GetSysClockFreq+0x34>
 80073c2:	2b0c      	cmp	r3, #12
 80073c4:	d00f      	beq.n	80073e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d157      	bne.n	800747a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80073ca:	4b35      	ldr	r3, [pc, #212]	; (80074a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2210      	movs	r2, #16
 80073d0:	4013      	ands	r3, r2
 80073d2:	d002      	beq.n	80073da <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80073d4:	4b33      	ldr	r3, [pc, #204]	; (80074a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80073d6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80073d8:	e05d      	b.n	8007496 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80073da:	4b33      	ldr	r3, [pc, #204]	; (80074a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80073dc:	613b      	str	r3, [r7, #16]
      break;
 80073de:	e05a      	b.n	8007496 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073e0:	4b32      	ldr	r3, [pc, #200]	; (80074ac <HAL_RCC_GetSysClockFreq+0x100>)
 80073e2:	613b      	str	r3, [r7, #16]
      break;
 80073e4:	e057      	b.n	8007496 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	0c9b      	lsrs	r3, r3, #18
 80073ea:	220f      	movs	r2, #15
 80073ec:	4013      	ands	r3, r2
 80073ee:	4a30      	ldr	r2, [pc, #192]	; (80074b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80073f0:	5cd3      	ldrb	r3, [r2, r3]
 80073f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	0d9b      	lsrs	r3, r3, #22
 80073f8:	2203      	movs	r2, #3
 80073fa:	4013      	ands	r3, r2
 80073fc:	3301      	adds	r3, #1
 80073fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007400:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	025b      	lsls	r3, r3, #9
 8007408:	4013      	ands	r3, r2
 800740a:	d00f      	beq.n	800742c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	000a      	movs	r2, r1
 8007410:	0152      	lsls	r2, r2, #5
 8007412:	1a52      	subs	r2, r2, r1
 8007414:	0193      	lsls	r3, r2, #6
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	185b      	adds	r3, r3, r1
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	0018      	movs	r0, r3
 8007422:	f7f8 fe8d 	bl	8000140 <__udivsi3>
 8007426:	0003      	movs	r3, r0
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	e023      	b.n	8007474 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800742c:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2210      	movs	r2, #16
 8007432:	4013      	ands	r3, r2
 8007434:	d00f      	beq.n	8007456 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	000a      	movs	r2, r1
 800743a:	0152      	lsls	r2, r2, #5
 800743c:	1a52      	subs	r2, r2, r1
 800743e:	0193      	lsls	r3, r2, #6
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	185b      	adds	r3, r3, r1
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	0018      	movs	r0, r3
 800744c:	f7f8 fe78 	bl	8000140 <__udivsi3>
 8007450:	0003      	movs	r3, r0
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e00e      	b.n	8007474 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	000a      	movs	r2, r1
 800745a:	0152      	lsls	r2, r2, #5
 800745c:	1a52      	subs	r2, r2, r1
 800745e:	0193      	lsls	r3, r2, #6
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	185b      	adds	r3, r3, r1
 8007466:	029b      	lsls	r3, r3, #10
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	0018      	movs	r0, r3
 800746c:	f7f8 fe68 	bl	8000140 <__udivsi3>
 8007470:	0003      	movs	r3, r0
 8007472:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	613b      	str	r3, [r7, #16]
      break;
 8007478:	e00d      	b.n	8007496 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800747a:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	0b5b      	lsrs	r3, r3, #13
 8007480:	2207      	movs	r2, #7
 8007482:	4013      	ands	r3, r2
 8007484:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	2280      	movs	r2, #128	; 0x80
 800748c:	0212      	lsls	r2, r2, #8
 800748e:	409a      	lsls	r2, r3
 8007490:	0013      	movs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
      break;
 8007494:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007496:	693b      	ldr	r3, [r7, #16]
}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b006      	add	sp, #24
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40021000 	.word	0x40021000
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	00f42400 	.word	0x00f42400
 80074ac:	007a1200 	.word	0x007a1200
 80074b0:	0800e974 	.word	0x0800e974

080074b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074b8:	4b02      	ldr	r3, [pc, #8]	; (80074c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80074ba:	681b      	ldr	r3, [r3, #0]
}
 80074bc:	0018      	movs	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	2000000c 	.word	0x2000000c

080074c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074cc:	f7ff fff2 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 80074d0:	0001      	movs	r1, r0
 80074d2:	4b06      	ldr	r3, [pc, #24]	; (80074ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	2207      	movs	r2, #7
 80074da:	4013      	ands	r3, r2
 80074dc:	4a04      	ldr	r2, [pc, #16]	; (80074f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074de:	5cd3      	ldrb	r3, [r2, r3]
 80074e0:	40d9      	lsrs	r1, r3
 80074e2:	000b      	movs	r3, r1
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	40021000 	.word	0x40021000
 80074f0:	0800e96c 	.word	0x0800e96c

080074f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074f8:	f7ff ffdc 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 80074fc:	0001      	movs	r1, r0
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	0adb      	lsrs	r3, r3, #11
 8007504:	2207      	movs	r2, #7
 8007506:	4013      	ands	r3, r2
 8007508:	4a04      	ldr	r2, [pc, #16]	; (800751c <HAL_RCC_GetPCLK2Freq+0x28>)
 800750a:	5cd3      	ldrb	r3, [r2, r3]
 800750c:	40d9      	lsrs	r1, r3
 800750e:	000b      	movs	r3, r1
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	40021000 	.word	0x40021000
 800751c:	0800e96c 	.word	0x0800e96c

08007520 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2220      	movs	r2, #32
 800752e:	4013      	ands	r3, r2
 8007530:	d106      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	4013      	ands	r3, r2
 800753c:	d100      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800753e:	e0dd      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8007540:	2317      	movs	r3, #23
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007548:	4ba4      	ldr	r3, [pc, #656]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800754a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	055b      	lsls	r3, r3, #21
 8007550:	4013      	ands	r3, r2
 8007552:	d10a      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007554:	4ba1      	ldr	r3, [pc, #644]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007558:	4ba0      	ldr	r3, [pc, #640]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800755a:	2180      	movs	r1, #128	; 0x80
 800755c:	0549      	lsls	r1, r1, #21
 800755e:	430a      	orrs	r2, r1
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007562:	2317      	movs	r3, #23
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	2201      	movs	r2, #1
 8007568:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756a:	4b9d      	ldr	r3, [pc, #628]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	2380      	movs	r3, #128	; 0x80
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	4013      	ands	r3, r2
 8007574:	d11a      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007576:	4b9a      	ldr	r3, [pc, #616]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b99      	ldr	r3, [pc, #612]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800757c:	2180      	movs	r1, #128	; 0x80
 800757e:	0049      	lsls	r1, r1, #1
 8007580:	430a      	orrs	r2, r1
 8007582:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007584:	f7fe f86a 	bl	800565c <HAL_GetTick>
 8007588:	0003      	movs	r3, r0
 800758a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800758c:	e008      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800758e:	f7fe f865 	bl	800565c <HAL_GetTick>
 8007592:	0002      	movs	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b64      	cmp	r3, #100	; 0x64
 800759a:	d901      	bls.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e118      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a0:	4b8f      	ldr	r3, [pc, #572]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	4013      	ands	r3, r2
 80075aa:	d0f0      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80075ac:	4b8b      	ldr	r3, [pc, #556]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	23c0      	movs	r3, #192	; 0xc0
 80075b2:	039b      	lsls	r3, r3, #14
 80075b4:	4013      	ands	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	23c0      	movs	r3, #192	; 0xc0
 80075be:	039b      	lsls	r3, r3, #14
 80075c0:	4013      	ands	r3, r2
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d107      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	23c0      	movs	r3, #192	; 0xc0
 80075ce:	039b      	lsls	r3, r3, #14
 80075d0:	4013      	ands	r3, r2
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d013      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	23c0      	movs	r3, #192	; 0xc0
 80075de:	029b      	lsls	r3, r3, #10
 80075e0:	401a      	ands	r2, r3
 80075e2:	23c0      	movs	r3, #192	; 0xc0
 80075e4:	029b      	lsls	r3, r3, #10
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d10a      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075ea:	4b7c      	ldr	r3, [pc, #496]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	2380      	movs	r3, #128	; 0x80
 80075f0:	029b      	lsls	r3, r3, #10
 80075f2:	401a      	ands	r2, r3
 80075f4:	2380      	movs	r3, #128	; 0x80
 80075f6:	029b      	lsls	r3, r3, #10
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d101      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0e8      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007600:	4b76      	ldr	r3, [pc, #472]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007604:	23c0      	movs	r3, #192	; 0xc0
 8007606:	029b      	lsls	r3, r3, #10
 8007608:	4013      	ands	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d049      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	23c0      	movs	r3, #192	; 0xc0
 8007618:	029b      	lsls	r3, r3, #10
 800761a:	4013      	ands	r3, r2
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	429a      	cmp	r2, r3
 8007620:	d004      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2220      	movs	r2, #32
 8007628:	4013      	ands	r3, r2
 800762a:	d10d      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	23c0      	movs	r3, #192	; 0xc0
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	4013      	ands	r3, r2
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	429a      	cmp	r2, r3
 800763a:	d034      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	4013      	ands	r3, r2
 8007646:	d02e      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007648:	4b64      	ldr	r3, [pc, #400]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	4a65      	ldr	r2, [pc, #404]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800764e:	4013      	ands	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007652:	4b62      	ldr	r3, [pc, #392]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007656:	4b61      	ldr	r3, [pc, #388]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007658:	2180      	movs	r1, #128	; 0x80
 800765a:	0309      	lsls	r1, r1, #12
 800765c:	430a      	orrs	r2, r1
 800765e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007660:	4b5e      	ldr	r3, [pc, #376]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007664:	4b5d      	ldr	r3, [pc, #372]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007666:	4960      	ldr	r1, [pc, #384]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007668:	400a      	ands	r2, r1
 800766a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800766c:	4b5b      	ldr	r3, [pc, #364]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4013      	ands	r3, r2
 800767a:	d014      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767c:	f7fd ffee 	bl	800565c <HAL_GetTick>
 8007680:	0003      	movs	r3, r0
 8007682:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007684:	e009      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007686:	f7fd ffe9 	bl	800565c <HAL_GetTick>
 800768a:	0002      	movs	r2, r0
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	4a56      	ldr	r2, [pc, #344]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e09b      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800769a:	4b50      	ldr	r3, [pc, #320]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800769c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800769e:	2380      	movs	r3, #128	; 0x80
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4013      	ands	r3, r2
 80076a4:	d0ef      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	23c0      	movs	r3, #192	; 0xc0
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	401a      	ands	r2, r3
 80076b0:	23c0      	movs	r3, #192	; 0xc0
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d10c      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80076b8:	4b48      	ldr	r3, [pc, #288]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a4c      	ldr	r2, [pc, #304]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80076be:	4013      	ands	r3, r2
 80076c0:	0019      	movs	r1, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	23c0      	movs	r3, #192	; 0xc0
 80076c8:	039b      	lsls	r3, r3, #14
 80076ca:	401a      	ands	r2, r3
 80076cc:	4b43      	ldr	r3, [pc, #268]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80076ce:	430a      	orrs	r2, r1
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	4b42      	ldr	r3, [pc, #264]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80076d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	23c0      	movs	r3, #192	; 0xc0
 80076dc:	029b      	lsls	r3, r3, #10
 80076de:	401a      	ands	r2, r3
 80076e0:	4b3e      	ldr	r3, [pc, #248]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80076e2:	430a      	orrs	r2, r1
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80076e6:	2317      	movs	r3, #23
 80076e8:	18fb      	adds	r3, r7, r3
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d105      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f0:	4b3a      	ldr	r3, [pc, #232]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80076f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f4:	4b39      	ldr	r3, [pc, #228]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80076f6:	493f      	ldr	r1, [pc, #252]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076f8:	400a      	ands	r2, r1
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2201      	movs	r2, #1
 8007702:	4013      	ands	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007706:	4b35      	ldr	r3, [pc, #212]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	2203      	movs	r2, #3
 800770c:	4393      	bics	r3, r2
 800770e:	0019      	movs	r1, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	4b31      	ldr	r3, [pc, #196]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007716:	430a      	orrs	r2, r1
 8007718:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2202      	movs	r2, #2
 8007720:	4013      	ands	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007724:	4b2d      	ldr	r3, [pc, #180]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007728:	220c      	movs	r2, #12
 800772a:	4393      	bics	r3, r2
 800772c:	0019      	movs	r1, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007734:	430a      	orrs	r2, r1
 8007736:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2204      	movs	r2, #4
 800773e:	4013      	ands	r3, r2
 8007740:	d009      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007746:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007748:	4013      	ands	r3, r2
 800774a:	0019      	movs	r1, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	4b22      	ldr	r3, [pc, #136]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007752:	430a      	orrs	r2, r1
 8007754:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2208      	movs	r2, #8
 800775c:	4013      	ands	r3, r2
 800775e:	d009      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007760:	4b1e      	ldr	r3, [pc, #120]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007764:	4a25      	ldr	r2, [pc, #148]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007766:	4013      	ands	r3, r2
 8007768:	0019      	movs	r1, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007770:	430a      	orrs	r2, r1
 8007772:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	2380      	movs	r3, #128	; 0x80
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4013      	ands	r3, r2
 800777e:	d009      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007780:	4b16      	ldr	r3, [pc, #88]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007784:	4a17      	ldr	r2, [pc, #92]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007786:	4013      	ands	r3, r2
 8007788:	0019      	movs	r1, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69da      	ldr	r2, [r3, #28]
 800778e:	4b13      	ldr	r3, [pc, #76]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007790:	430a      	orrs	r2, r1
 8007792:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2240      	movs	r2, #64	; 0x40
 800779a:	4013      	ands	r3, r2
 800779c:	d009      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80077a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a2:	4a17      	ldr	r2, [pc, #92]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	0019      	movs	r1, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80077ae:	430a      	orrs	r2, r1
 80077b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	4013      	ands	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80077bc:	4b07      	ldr	r3, [pc, #28]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80077be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c0:	4a10      	ldr	r2, [pc, #64]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	0019      	movs	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1a      	ldr	r2, [r3, #32]
 80077ca:	4b04      	ldr	r3, [pc, #16]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80077cc:	430a      	orrs	r2, r1
 80077ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	0018      	movs	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b006      	add	sp, #24
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	40021000 	.word	0x40021000
 80077e0:	40007000 	.word	0x40007000
 80077e4:	fffcffff 	.word	0xfffcffff
 80077e8:	fff7ffff 	.word	0xfff7ffff
 80077ec:	00001388 	.word	0x00001388
 80077f0:	ffcfffff 	.word	0xffcfffff
 80077f4:	efffffff 	.word	0xefffffff
 80077f8:	fffff3ff 	.word	0xfffff3ff
 80077fc:	ffffcfff 	.word	0xffffcfff
 8007800:	fbffffff 	.word	0xfbffffff
 8007804:	fff3ffff 	.word	0xfff3ffff

08007808 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e08e      	b.n	8007938 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2221      	movs	r2, #33	; 0x21
 800781e:	5c9b      	ldrb	r3, [r3, r2]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d107      	bne.n	8007836 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	2100      	movs	r1, #0
 800782c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	0018      	movs	r0, r3
 8007832:	f7fb fe4f 	bl	80034d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2221      	movs	r2, #33	; 0x21
 800783a:	2102      	movs	r1, #2
 800783c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	22ca      	movs	r2, #202	; 0xca
 8007844:	625a      	str	r2, [r3, #36]	; 0x24
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2253      	movs	r2, #83	; 0x53
 800784c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	0018      	movs	r0, r3
 8007852:	f000 faba 	bl	8007dca <RTC_EnterInitMode>
 8007856:	1e03      	subs	r3, r0, #0
 8007858:	d009      	beq.n	800786e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	22ff      	movs	r2, #255	; 0xff
 8007860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2221      	movs	r2, #33	; 0x21
 8007866:	2104      	movs	r1, #4
 8007868:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e064      	b.n	8007938 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4931      	ldr	r1, [pc, #196]	; (8007940 <HAL_RTC_Init+0x138>)
 800787a:	400a      	ands	r2, r1
 800787c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6899      	ldr	r1, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	68d2      	ldr	r2, [r2, #12]
 80078a4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6919      	ldr	r1, [r3, #16]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	041a      	lsls	r2, r3, #16
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	438a      	bics	r2, r1
 80078c8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2103      	movs	r1, #3
 80078d6:	438a      	bics	r2, r1
 80078d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69da      	ldr	r2, [r3, #28]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2220      	movs	r2, #32
 80078fa:	4013      	ands	r3, r2
 80078fc:	d113      	bne.n	8007926 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	0018      	movs	r0, r3
 8007902:	f000 fa3b 	bl	8007d7c <HAL_RTC_WaitForSynchro>
 8007906:	1e03      	subs	r3, r0, #0
 8007908:	d00d      	beq.n	8007926 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	22ff      	movs	r2, #255	; 0xff
 8007910:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2221      	movs	r2, #33	; 0x21
 8007916:	2104      	movs	r1, #4
 8007918:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e008      	b.n	8007938 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	2101      	movs	r1, #1
 8007934:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007936:	2300      	movs	r3, #0
  }
}
 8007938:	0018      	movs	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	b002      	add	sp, #8
 800793e:	bd80      	pop	{r7, pc}
 8007940:	ff8fffbf 	.word	0xff8fffbf

08007944 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2220      	movs	r2, #32
 8007954:	5c9b      	ldrb	r3, [r3, r2]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_RTC_SetTime+0x1a>
 800795a:	2302      	movs	r3, #2
 800795c:	e0ad      	b.n	8007aba <HAL_RTC_SetTime+0x176>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	2101      	movs	r1, #1
 8007964:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2221      	movs	r2, #33	; 0x21
 800796a:	2102      	movs	r1, #2
 800796c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d125      	bne.n	80079c0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2240      	movs	r2, #64	; 0x40
 800797c:	4013      	ands	r3, r2
 800797e:	d102      	bne.n	8007986 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	0018      	movs	r0, r3
 800798c:	f000 fa47 	bl	8007e1e <RTC_ByteToBcd2>
 8007990:	0003      	movs	r3, r0
 8007992:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	0018      	movs	r0, r3
 800799a:	f000 fa40 	bl	8007e1e <RTC_ByteToBcd2>
 800799e:	0003      	movs	r3, r0
 80079a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079a2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	789b      	ldrb	r3, [r3, #2]
 80079a8:	0018      	movs	r0, r3
 80079aa:	f000 fa38 	bl	8007e1e <RTC_ByteToBcd2>
 80079ae:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80079b0:	0022      	movs	r2, r4
 80079b2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	78db      	ldrb	r3, [r3, #3]
 80079b8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e017      	b.n	80079f0 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2240      	movs	r2, #64	; 0x40
 80079c8:	4013      	ands	r3, r2
 80079ca:	d102      	bne.n	80079d2 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2200      	movs	r2, #0
 80079d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80079de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80079e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	78db      	ldrb	r3, [r3, #3]
 80079ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	22ca      	movs	r2, #202	; 0xca
 80079f6:	625a      	str	r2, [r3, #36]	; 0x24
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2253      	movs	r2, #83	; 0x53
 80079fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	0018      	movs	r0, r3
 8007a04:	f000 f9e1 	bl	8007dca <RTC_EnterInitMode>
 8007a08:	1e03      	subs	r3, r0, #0
 8007a0a:	d00d      	beq.n	8007a28 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	22ff      	movs	r2, #255	; 0xff
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2221      	movs	r2, #33	; 0x21
 8007a18:	2104      	movs	r1, #4
 8007a1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	2100      	movs	r1, #0
 8007a22:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e048      	b.n	8007aba <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4925      	ldr	r1, [pc, #148]	; (8007ac4 <HAL_RTC_SetTime+0x180>)
 8007a30:	400a      	ands	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4922      	ldr	r1, [pc, #136]	; (8007ac8 <HAL_RTC_SetTime+0x184>)
 8007a40:	400a      	ands	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6899      	ldr	r1, [r3, #8]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2180      	movs	r1, #128	; 0x80
 8007a68:	438a      	bics	r2, r1
 8007a6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2220      	movs	r2, #32
 8007a74:	4013      	ands	r3, r2
 8007a76:	d113      	bne.n	8007aa0 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f000 f97e 	bl	8007d7c <HAL_RTC_WaitForSynchro>
 8007a80:	1e03      	subs	r3, r0, #0
 8007a82:	d00d      	beq.n	8007aa0 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	22ff      	movs	r2, #255	; 0xff
 8007a8a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2221      	movs	r2, #33	; 0x21
 8007a90:	2104      	movs	r1, #4
 8007a92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	2100      	movs	r1, #0
 8007a9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e00c      	b.n	8007aba <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	22ff      	movs	r2, #255	; 0xff
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2221      	movs	r2, #33	; 0x21
 8007aac:	2101      	movs	r1, #1
 8007aae:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
  }
}
 8007aba:	0018      	movs	r0, r3
 8007abc:	46bd      	mov	sp, r7
 8007abe:	b007      	add	sp, #28
 8007ac0:	bd90      	pop	{r4, r7, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	007f7f7f 	.word	0x007f7f7f
 8007ac8:	fffbffff 	.word	0xfffbffff

08007acc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	045b      	lsls	r3, r3, #17
 8007aea:	0c5a      	lsrs	r2, r3, #17
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a22      	ldr	r2, [pc, #136]	; (8007b80 <HAL_RTC_GetTime+0xb4>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	0c1b      	lsrs	r3, r3, #16
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	223f      	movs	r2, #63	; 0x3f
 8007b04:	4013      	ands	r3, r2
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	0a1b      	lsrs	r3, r3, #8
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	227f      	movs	r2, #127	; 0x7f
 8007b14:	4013      	ands	r3, r2
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	227f      	movs	r2, #127	; 0x7f
 8007b22:	4013      	ands	r3, r2
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	0c1b      	lsrs	r3, r3, #16
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2240      	movs	r2, #64	; 0x40
 8007b32:	4013      	ands	r3, r2
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11a      	bne.n	8007b76 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f000 f993 	bl	8007e70 <RTC_Bcd2ToByte>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	001a      	movs	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	0018      	movs	r0, r3
 8007b58:	f000 f98a 	bl	8007e70 <RTC_Bcd2ToByte>
 8007b5c:	0003      	movs	r3, r0
 8007b5e:	001a      	movs	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	789b      	ldrb	r3, [r3, #2]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 f981 	bl	8007e70 <RTC_Bcd2ToByte>
 8007b6e:	0003      	movs	r3, r0
 8007b70:	001a      	movs	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	0018      	movs	r0, r3
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	b006      	add	sp, #24
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	007f7f7f 	.word	0x007f7f7f

08007b84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b84:	b590      	push	{r4, r7, lr}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	5c9b      	ldrb	r3, [r3, r2]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_RTC_SetDate+0x1a>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e099      	b.n	8007cd2 <HAL_RTC_SetDate+0x14e>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2221      	movs	r2, #33	; 0x21
 8007baa:	2102      	movs	r1, #2
 8007bac:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10e      	bne.n	8007bd2 <HAL_RTC_SetDate+0x4e>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	785b      	ldrb	r3, [r3, #1]
 8007bb8:	001a      	movs	r2, r3
 8007bba:	2310      	movs	r3, #16
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d008      	beq.n	8007bd2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2210      	movs	r2, #16
 8007bc6:	4393      	bics	r3, r2
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	330a      	adds	r3, #10
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11c      	bne.n	8007c12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	78db      	ldrb	r3, [r3, #3]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f000 f91e 	bl	8007e1e <RTC_ByteToBcd2>
 8007be2:	0003      	movs	r3, r0
 8007be4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	0018      	movs	r0, r3
 8007bec:	f000 f917 	bl	8007e1e <RTC_ByteToBcd2>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007bf4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	789b      	ldrb	r3, [r3, #2]
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f000 f90f 	bl	8007e1e <RTC_ByteToBcd2>
 8007c00:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007c02:	0022      	movs	r2, r4
 8007c04:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e00e      	b.n	8007c30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	78db      	ldrb	r3, [r3, #3]
 8007c16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c1e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007c24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	22ca      	movs	r2, #202	; 0xca
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2253      	movs	r2, #83	; 0x53
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	0018      	movs	r0, r3
 8007c44:	f000 f8c1 	bl	8007dca <RTC_EnterInitMode>
 8007c48:	1e03      	subs	r3, r0, #0
 8007c4a:	d00d      	beq.n	8007c68 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2221      	movs	r2, #33	; 0x21
 8007c58:	2104      	movs	r1, #4
 8007c5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	2100      	movs	r1, #0
 8007c62:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e034      	b.n	8007cd2 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	491b      	ldr	r1, [pc, #108]	; (8007cdc <HAL_RTC_SetDate+0x158>)
 8007c70:	400a      	ands	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2180      	movs	r1, #128	; 0x80
 8007c80:	438a      	bics	r2, r1
 8007c82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d113      	bne.n	8007cb8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	0018      	movs	r0, r3
 8007c94:	f000 f872 	bl	8007d7c <HAL_RTC_WaitForSynchro>
 8007c98:	1e03      	subs	r3, r0, #0
 8007c9a:	d00d      	beq.n	8007cb8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	22ff      	movs	r2, #255	; 0xff
 8007ca2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2221      	movs	r2, #33	; 0x21
 8007ca8:	2104      	movs	r1, #4
 8007caa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e00c      	b.n	8007cd2 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	22ff      	movs	r2, #255	; 0xff
 8007cbe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2221      	movs	r2, #33	; 0x21
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	2100      	movs	r1, #0
 8007cce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
  }
}
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b007      	add	sp, #28
 8007cd8:	bd90      	pop	{r4, r7, pc}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	00ffff3f 	.word	0x00ffff3f

08007ce0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <HAL_RTC_GetDate+0x98>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	0c1b      	lsrs	r3, r3, #16
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	221f      	movs	r2, #31
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	223f      	movs	r2, #63	; 0x3f
 8007d18:	4013      	ands	r3, r2
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	0b5b      	lsrs	r3, r3, #13
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2207      	movs	r2, #7
 8007d28:	4013      	ands	r3, r2
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11a      	bne.n	8007d6c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	78db      	ldrb	r3, [r3, #3]
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f000 f898 	bl	8007e70 <RTC_Bcd2ToByte>
 8007d40:	0003      	movs	r3, r0
 8007d42:	001a      	movs	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f000 f88f 	bl	8007e70 <RTC_Bcd2ToByte>
 8007d52:	0003      	movs	r3, r0
 8007d54:	001a      	movs	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	789b      	ldrb	r3, [r3, #2]
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f000 f886 	bl	8007e70 <RTC_Bcd2ToByte>
 8007d64:	0003      	movs	r3, r0
 8007d66:	001a      	movs	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	0018      	movs	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b006      	add	sp, #24
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	00ffff3f 	.word	0x00ffff3f

08007d7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	21a0      	movs	r1, #160	; 0xa0
 8007d90:	438a      	bics	r2, r1
 8007d92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d94:	f7fd fc62 	bl	800565c <HAL_GetTick>
 8007d98:	0003      	movs	r3, r0
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d9c:	e00a      	b.n	8007db4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d9e:	f7fd fc5d 	bl	800565c <HAL_GetTick>
 8007da2:	0002      	movs	r2, r0
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	23fa      	movs	r3, #250	; 0xfa
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d901      	bls.n	8007db4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e006      	b.n	8007dc2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d0ee      	beq.n	8007d9e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	b004      	add	sp, #16
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2240      	movs	r2, #64	; 0x40
 8007dda:	4013      	ands	r3, r2
 8007ddc:	d11a      	bne.n	8007e14 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2201      	movs	r2, #1
 8007de4:	4252      	negs	r2, r2
 8007de6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007de8:	f7fd fc38 	bl	800565c <HAL_GetTick>
 8007dec:	0003      	movs	r3, r0
 8007dee:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007df0:	e00a      	b.n	8007e08 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007df2:	f7fd fc33 	bl	800565c <HAL_GetTick>
 8007df6:	0002      	movs	r2, r0
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	23fa      	movs	r3, #250	; 0xfa
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d901      	bls.n	8007e08 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e006      	b.n	8007e16 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2240      	movs	r2, #64	; 0x40
 8007e10:	4013      	ands	r3, r2
 8007e12:	d0ee      	beq.n	8007df2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	0018      	movs	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	b004      	add	sp, #16
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	0002      	movs	r2, r0
 8007e26:	1dfb      	adds	r3, r7, #7
 8007e28:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007e2e:	230b      	movs	r3, #11
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	1dfa      	adds	r2, r7, #7
 8007e34:	7812      	ldrb	r2, [r2, #0]
 8007e36:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8007e38:	e008      	b.n	8007e4c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007e40:	220b      	movs	r2, #11
 8007e42:	18bb      	adds	r3, r7, r2
 8007e44:	18ba      	adds	r2, r7, r2
 8007e46:	7812      	ldrb	r2, [r2, #0]
 8007e48:	3a0a      	subs	r2, #10
 8007e4a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8007e4c:	230b      	movs	r3, #11
 8007e4e:	18fb      	adds	r3, r7, r3
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	d8f1      	bhi.n	8007e3a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	230b      	movs	r3, #11
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b2db      	uxtb	r3, r3
}
 8007e68:	0018      	movs	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b004      	add	sp, #16
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	0002      	movs	r2, r0
 8007e78:	1dfb      	adds	r3, r7, #7
 8007e7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007e7c:	1dfb      	adds	r3, r7, #7
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	091b      	lsrs	r3, r3, #4
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	001a      	movs	r2, r3
 8007e86:	0013      	movs	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	189b      	adds	r3, r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	1dfb      	adds	r3, r7, #7
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	210f      	movs	r1, #15
 8007e9a:	400b      	ands	r3, r1
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	18d3      	adds	r3, r2, r3
 8007ea0:	b2db      	uxtb	r3, r3
}
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	b004      	add	sp, #16
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e059      	b.n	8007f72 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2251      	movs	r2, #81	; 0x51
 8007ec8:	5c9b      	ldrb	r3, [r3, r2]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d107      	bne.n	8007ee0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2250      	movs	r2, #80	; 0x50
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	0018      	movs	r0, r3
 8007edc:	f7fb fb12 	bl	8003504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2251      	movs	r2, #81	; 0x51
 8007ee4:	2102      	movs	r1, #2
 8007ee6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2140      	movs	r1, #64	; 0x40
 8007ef4:	438a      	bics	r2, r1
 8007ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6999      	ldr	r1, [r3, #24]
 8007f18:	2380      	movs	r3, #128	; 0x80
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	400b      	ands	r3, r1
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	431a      	orrs	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	0011      	movs	r1, r2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	0c1b      	lsrs	r3, r3, #16
 8007f40:	2204      	movs	r2, #4
 8007f42:	4013      	ands	r3, r2
 8007f44:	0019      	movs	r1, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69da      	ldr	r2, [r3, #28]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4907      	ldr	r1, [pc, #28]	; (8007f7c <HAL_SPI_Init+0xd0>)
 8007f5e:	400a      	ands	r2, r1
 8007f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2251      	movs	r2, #81	; 0x51
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	0018      	movs	r0, r3
 8007f74:	46bd      	mov	sp, r7
 8007f76:	b002      	add	sp, #8
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	fffff7ff 	.word	0xfffff7ff

08007f80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	1dbb      	adds	r3, r7, #6
 8007f8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f90:	231f      	movs	r3, #31
 8007f92:	18fb      	adds	r3, r7, r3
 8007f94:	2200      	movs	r2, #0
 8007f96:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2250      	movs	r2, #80	; 0x50
 8007f9c:	5c9b      	ldrb	r3, [r3, r2]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_SPI_Transmit+0x26>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e136      	b.n	8008214 <HAL_SPI_Transmit+0x294>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2250      	movs	r2, #80	; 0x50
 8007faa:	2101      	movs	r1, #1
 8007fac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fae:	f7fd fb55 	bl	800565c <HAL_GetTick>
 8007fb2:	0003      	movs	r3, r0
 8007fb4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007fb6:	2316      	movs	r3, #22
 8007fb8:	18fb      	adds	r3, r7, r3
 8007fba:	1dba      	adds	r2, r7, #6
 8007fbc:	8812      	ldrh	r2, [r2, #0]
 8007fbe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2251      	movs	r2, #81	; 0x51
 8007fc4:	5c9b      	ldrb	r3, [r3, r2]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d004      	beq.n	8007fd6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007fcc:	231f      	movs	r3, #31
 8007fce:	18fb      	adds	r3, r7, r3
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fd4:	e113      	b.n	80081fe <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_SPI_Transmit+0x64>
 8007fdc:	1dbb      	adds	r3, r7, #6
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007fe4:	231f      	movs	r3, #31
 8007fe6:	18fb      	adds	r3, r7, r3
 8007fe8:	2201      	movs	r2, #1
 8007fea:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fec:	e107      	b.n	80081fe <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2251      	movs	r2, #81	; 0x51
 8007ff2:	2103      	movs	r1, #3
 8007ff4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1dba      	adds	r2, r7, #6
 8008006:	8812      	ldrh	r2, [r2, #0]
 8008008:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	1dba      	adds	r2, r7, #6
 800800e:	8812      	ldrh	r2, [r2, #0]
 8008010:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	2380      	movs	r3, #128	; 0x80
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	429a      	cmp	r2, r3
 800803a:	d108      	bne.n	800804e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2180      	movs	r1, #128	; 0x80
 8008048:	01c9      	lsls	r1, r1, #7
 800804a:	430a      	orrs	r2, r1
 800804c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2240      	movs	r2, #64	; 0x40
 8008056:	4013      	ands	r3, r2
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d007      	beq.n	800806c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2140      	movs	r1, #64	; 0x40
 8008068:	430a      	orrs	r2, r1
 800806a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	429a      	cmp	r2, r3
 8008076:	d14e      	bne.n	8008116 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <HAL_SPI_Transmit+0x10a>
 8008080:	2316      	movs	r3, #22
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d13f      	bne.n	800810a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808e:	881a      	ldrh	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	1c9a      	adds	r2, r3, #2
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080ae:	e02c      	b.n	800810a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	2202      	movs	r2, #2
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d112      	bne.n	80080e4 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	881a      	ldrh	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	1c9a      	adds	r2, r3, #2
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80080e2:	e012      	b.n	800810a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080e4:	f7fd faba 	bl	800565c <HAL_GetTick>
 80080e8:	0002      	movs	r2, r0
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d802      	bhi.n	80080fa <HAL_SPI_Transmit+0x17a>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	3301      	adds	r3, #1
 80080f8:	d102      	bne.n	8008100 <HAL_SPI_Transmit+0x180>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8008100:	231f      	movs	r3, #31
 8008102:	18fb      	adds	r3, r7, r3
 8008104:	2203      	movs	r2, #3
 8008106:	701a      	strb	r2, [r3, #0]
          goto error;
 8008108:	e079      	b.n	80081fe <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800810e:	b29b      	uxth	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1cd      	bne.n	80080b0 <HAL_SPI_Transmit+0x130>
 8008114:	e04f      	b.n	80081b6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <HAL_SPI_Transmit+0x1a8>
 800811e:	2316      	movs	r3, #22
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d141      	bne.n	80081ac <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800814e:	e02d      	b.n	80081ac <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2202      	movs	r2, #2
 8008158:	4013      	ands	r3, r2
 800815a:	2b02      	cmp	r3, #2
 800815c:	d113      	bne.n	8008186 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	330c      	adds	r3, #12
 8008168:	7812      	ldrb	r2, [r2, #0]
 800816a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	86da      	strh	r2, [r3, #54]	; 0x36
 8008184:	e012      	b.n	80081ac <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008186:	f7fd fa69 	bl	800565c <HAL_GetTick>
 800818a:	0002      	movs	r2, r0
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d802      	bhi.n	800819c <HAL_SPI_Transmit+0x21c>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	d102      	bne.n	80081a2 <HAL_SPI_Transmit+0x222>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80081a2:	231f      	movs	r3, #31
 80081a4:	18fb      	adds	r3, r7, r3
 80081a6:	2203      	movs	r2, #3
 80081a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80081aa:	e028      	b.n	80081fe <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1cc      	bne.n	8008150 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	0018      	movs	r0, r3
 80081be:	f000 fbe1 	bl	8008984 <SPI_EndRxTxTransaction>
 80081c2:	1e03      	subs	r3, r0, #0
 80081c4:	d002      	beq.n	80081cc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2220      	movs	r2, #32
 80081ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081d4:	2300      	movs	r3, #0
 80081d6:	613b      	str	r3, [r7, #16]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80081f2:	231f      	movs	r3, #31
 80081f4:	18fb      	adds	r3, r7, r3
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
 80081fa:	e000      	b.n	80081fe <HAL_SPI_Transmit+0x27e>
  }

error:
 80081fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2251      	movs	r2, #81	; 0x51
 8008202:	2101      	movs	r1, #1
 8008204:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2250      	movs	r2, #80	; 0x50
 800820a:	2100      	movs	r1, #0
 800820c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800820e:	231f      	movs	r3, #31
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	781b      	ldrb	r3, [r3, #0]
}
 8008214:	0018      	movs	r0, r3
 8008216:	46bd      	mov	sp, r7
 8008218:	b008      	add	sp, #32
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800821c:	b590      	push	{r4, r7, lr}
 800821e:	b089      	sub	sp, #36	; 0x24
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	1dbb      	adds	r3, r7, #6
 800822a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800822c:	2317      	movs	r3, #23
 800822e:	18fb      	adds	r3, r7, r3
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	2382      	movs	r3, #130	; 0x82
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	429a      	cmp	r2, r3
 800823e:	d113      	bne.n	8008268 <HAL_SPI_Receive+0x4c>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10f      	bne.n	8008268 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2251      	movs	r2, #81	; 0x51
 800824c:	2104      	movs	r1, #4
 800824e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008250:	1dbb      	adds	r3, r7, #6
 8008252:	881c      	ldrh	r4, [r3, #0]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	0023      	movs	r3, r4
 8008260:	f000 f8fa 	bl	8008458 <HAL_SPI_TransmitReceive>
 8008264:	0003      	movs	r3, r0
 8008266:	e0f1      	b.n	800844c <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2250      	movs	r2, #80	; 0x50
 800826c:	5c9b      	ldrb	r3, [r3, r2]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_SPI_Receive+0x5a>
 8008272:	2302      	movs	r3, #2
 8008274:	e0ea      	b.n	800844c <HAL_SPI_Receive+0x230>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2250      	movs	r2, #80	; 0x50
 800827a:	2101      	movs	r1, #1
 800827c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800827e:	f7fd f9ed 	bl	800565c <HAL_GetTick>
 8008282:	0003      	movs	r3, r0
 8008284:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2251      	movs	r2, #81	; 0x51
 800828a:	5c9b      	ldrb	r3, [r3, r2]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b01      	cmp	r3, #1
 8008290:	d004      	beq.n	800829c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8008292:	2317      	movs	r3, #23
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	2202      	movs	r2, #2
 8008298:	701a      	strb	r2, [r3, #0]
    goto error;
 800829a:	e0cc      	b.n	8008436 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_SPI_Receive+0x8e>
 80082a2:	1dbb      	adds	r3, r7, #6
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80082aa:	2317      	movs	r3, #23
 80082ac:	18fb      	adds	r3, r7, r3
 80082ae:	2201      	movs	r2, #1
 80082b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80082b2:	e0c0      	b.n	8008436 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2251      	movs	r2, #81	; 0x51
 80082b8:	2104      	movs	r1, #4
 80082ba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	1dba      	adds	r2, r7, #6
 80082cc:	8812      	ldrh	r2, [r2, #0]
 80082ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	1dba      	adds	r2, r7, #6
 80082d4:	8812      	ldrh	r2, [r2, #0]
 80082d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	429a      	cmp	r2, r3
 8008300:	d107      	bne.n	8008312 <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4951      	ldr	r1, [pc, #324]	; (8008454 <HAL_SPI_Receive+0x238>)
 800830e:	400a      	ands	r2, r1
 8008310:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2240      	movs	r2, #64	; 0x40
 800831a:	4013      	ands	r3, r2
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d007      	beq.n	8008330 <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2140      	movs	r1, #64	; 0x40
 800832c:	430a      	orrs	r2, r1
 800832e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d164      	bne.n	8008402 <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008338:	e02f      	b.n	800839a <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2201      	movs	r2, #1
 8008342:	4013      	ands	r3, r2
 8008344:	2b01      	cmp	r3, #1
 8008346:	d115      	bne.n	8008374 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	001a      	movs	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	7812      	ldrb	r2, [r2, #0]
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008372:	e012      	b.n	800839a <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008374:	f7fd f972 	bl	800565c <HAL_GetTick>
 8008378:	0002      	movs	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	429a      	cmp	r2, r3
 8008382:	d802      	bhi.n	800838a <HAL_SPI_Receive+0x16e>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	d102      	bne.n	8008390 <HAL_SPI_Receive+0x174>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 8008390:	2317      	movs	r3, #23
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	2203      	movs	r2, #3
 8008396:	701a      	strb	r2, [r3, #0]
          goto error;
 8008398:	e04d      	b.n	8008436 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839e:	b29b      	uxth	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1ca      	bne.n	800833a <HAL_SPI_Receive+0x11e>
 80083a4:	e032      	b.n	800840c <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2201      	movs	r2, #1
 80083ae:	4013      	ands	r3, r2
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d113      	bne.n	80083dc <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	b292      	uxth	r2, r2
 80083c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	1c9a      	adds	r2, r3, #2
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083da:	e012      	b.n	8008402 <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083dc:	f7fd f93e 	bl	800565c <HAL_GetTick>
 80083e0:	0002      	movs	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d802      	bhi.n	80083f2 <HAL_SPI_Receive+0x1d6>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	3301      	adds	r3, #1
 80083f0:	d102      	bne.n	80083f8 <HAL_SPI_Receive+0x1dc>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 80083f8:	2317      	movs	r3, #23
 80083fa:	18fb      	adds	r3, r7, r3
 80083fc:	2203      	movs	r2, #3
 80083fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8008400:	e019      	b.n	8008436 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1cc      	bne.n	80083a6 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	0018      	movs	r0, r3
 8008414:	f000 fa4c 	bl	80088b0 <SPI_EndRxTransaction>
 8008418:	1e03      	subs	r3, r0, #0
 800841a:	d002      	beq.n	8008422 <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 800842a:	2317      	movs	r3, #23
 800842c:	18fb      	adds	r3, r7, r3
 800842e:	2201      	movs	r2, #1
 8008430:	701a      	strb	r2, [r3, #0]
 8008432:	e000      	b.n	8008436 <HAL_SPI_Receive+0x21a>
  }

error :
 8008434:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2251      	movs	r2, #81	; 0x51
 800843a:	2101      	movs	r1, #1
 800843c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2250      	movs	r2, #80	; 0x50
 8008442:	2100      	movs	r1, #0
 8008444:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008446:	2317      	movs	r3, #23
 8008448:	18fb      	adds	r3, r7, r3
 800844a:	781b      	ldrb	r3, [r3, #0]
}
 800844c:	0018      	movs	r0, r3
 800844e:	46bd      	mov	sp, r7
 8008450:	b007      	add	sp, #28
 8008452:	bd90      	pop	{r4, r7, pc}
 8008454:	ffffbfff 	.word	0xffffbfff

08008458 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08c      	sub	sp, #48	; 0x30
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	001a      	movs	r2, r3
 8008466:	1cbb      	adds	r3, r7, #2
 8008468:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800846a:	2301      	movs	r3, #1
 800846c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800846e:	232b      	movs	r3, #43	; 0x2b
 8008470:	18fb      	adds	r3, r7, r3
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2250      	movs	r2, #80	; 0x50
 800847a:	5c9b      	ldrb	r3, [r3, r2]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_SPI_TransmitReceive+0x2c>
 8008480:	2302      	movs	r3, #2
 8008482:	e1a1      	b.n	80087c8 <HAL_SPI_TransmitReceive+0x370>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2250      	movs	r2, #80	; 0x50
 8008488:	2101      	movs	r1, #1
 800848a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800848c:	f7fd f8e6 	bl	800565c <HAL_GetTick>
 8008490:	0003      	movs	r3, r0
 8008492:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008494:	2023      	movs	r0, #35	; 0x23
 8008496:	183b      	adds	r3, r7, r0
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	2151      	movs	r1, #81	; 0x51
 800849c:	5c52      	ldrb	r2, [r2, r1]
 800849e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80084a6:	231a      	movs	r3, #26
 80084a8:	18fb      	adds	r3, r7, r3
 80084aa:	1cba      	adds	r2, r7, #2
 80084ac:	8812      	ldrh	r2, [r2, #0]
 80084ae:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084b0:	183b      	adds	r3, r7, r0
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d012      	beq.n	80084de <HAL_SPI_TransmitReceive+0x86>
 80084b8:	69fa      	ldr	r2, [r7, #28]
 80084ba:	2382      	movs	r3, #130	; 0x82
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	429a      	cmp	r2, r3
 80084c0:	d108      	bne.n	80084d4 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d104      	bne.n	80084d4 <HAL_SPI_TransmitReceive+0x7c>
 80084ca:	2323      	movs	r3, #35	; 0x23
 80084cc:	18fb      	adds	r3, r7, r3
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d004      	beq.n	80084de <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80084d4:	232b      	movs	r3, #43	; 0x2b
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	2202      	movs	r2, #2
 80084da:	701a      	strb	r2, [r3, #0]
    goto error;
 80084dc:	e169      	b.n	80087b2 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d006      	beq.n	80084f2 <HAL_SPI_TransmitReceive+0x9a>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_SPI_TransmitReceive+0x9a>
 80084ea:	1cbb      	adds	r3, r7, #2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d104      	bne.n	80084fc <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80084f2:	232b      	movs	r3, #43	; 0x2b
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	2201      	movs	r2, #1
 80084f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80084fa:	e15a      	b.n	80087b2 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2251      	movs	r2, #81	; 0x51
 8008500:	5c9b      	ldrb	r3, [r3, r2]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b04      	cmp	r3, #4
 8008506:	d003      	beq.n	8008510 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2251      	movs	r2, #81	; 0x51
 800850c:	2105      	movs	r1, #5
 800850e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	1cba      	adds	r2, r7, #2
 8008520:	8812      	ldrh	r2, [r2, #0]
 8008522:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	1cba      	adds	r2, r7, #2
 8008528:	8812      	ldrh	r2, [r2, #0]
 800852a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1cba      	adds	r2, r7, #2
 8008536:	8812      	ldrh	r2, [r2, #0]
 8008538:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	1cba      	adds	r2, r7, #2
 800853e:	8812      	ldrh	r2, [r2, #0]
 8008540:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2240      	movs	r2, #64	; 0x40
 8008556:	4013      	ands	r3, r2
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d007      	beq.n	800856c <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2140      	movs	r1, #64	; 0x40
 8008568:	430a      	orrs	r2, r1
 800856a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	2380      	movs	r3, #128	; 0x80
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	429a      	cmp	r2, r3
 8008576:	d000      	beq.n	800857a <HAL_SPI_TransmitReceive+0x122>
 8008578:	e07a      	b.n	8008670 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <HAL_SPI_TransmitReceive+0x134>
 8008582:	231a      	movs	r3, #26
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d166      	bne.n	800865a <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	881a      	ldrh	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	1c9a      	adds	r2, r3, #2
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085b0:	e053      	b.n	800865a <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2202      	movs	r2, #2
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d11b      	bne.n	80085f8 <HAL_SPI_TransmitReceive+0x1a0>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <HAL_SPI_TransmitReceive+0x1a0>
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d113      	bne.n	80085f8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	881a      	ldrh	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e0:	1c9a      	adds	r2, r3, #2
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2201      	movs	r2, #1
 8008600:	4013      	ands	r3, r2
 8008602:	2b01      	cmp	r3, #1
 8008604:	d119      	bne.n	800863a <HAL_SPI_TransmitReceive+0x1e2>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800860a:	b29b      	uxth	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d014      	beq.n	800863a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	b292      	uxth	r2, r2
 800861c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	1c9a      	adds	r2, r3, #2
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008636:	2301      	movs	r3, #1
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800863a:	f7fd f80f 	bl	800565c <HAL_GetTick>
 800863e:	0002      	movs	r2, r0
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008646:	429a      	cmp	r2, r3
 8008648:	d807      	bhi.n	800865a <HAL_SPI_TransmitReceive+0x202>
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	3301      	adds	r3, #1
 800864e:	d004      	beq.n	800865a <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8008650:	232b      	movs	r3, #43	; 0x2b
 8008652:	18fb      	adds	r3, r7, r3
 8008654:	2203      	movs	r2, #3
 8008656:	701a      	strb	r2, [r3, #0]
        goto error;
 8008658:	e0ab      	b.n	80087b2 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800865e:	b29b      	uxth	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1a6      	bne.n	80085b2 <HAL_SPI_TransmitReceive+0x15a>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1a1      	bne.n	80085b2 <HAL_SPI_TransmitReceive+0x15a>
 800866e:	e07f      	b.n	8008770 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x22c>
 8008678:	231a      	movs	r3, #26
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d000      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x22c>
 8008682:	e06b      	b.n	800875c <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086aa:	e057      	b.n	800875c <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	2202      	movs	r2, #2
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d11c      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x29c>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d017      	beq.n	80086f4 <HAL_SPI_TransmitReceive+0x29c>
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d114      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	330c      	adds	r3, #12
 80086d4:	7812      	ldrb	r2, [r2, #0]
 80086d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	2201      	movs	r2, #1
 80086fc:	4013      	ands	r3, r2
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d119      	bne.n	8008736 <HAL_SPI_TransmitReceive+0x2de>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008706:	b29b      	uxth	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d014      	beq.n	8008736 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	b2d2      	uxtb	r2, r2
 8008718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008732:	2301      	movs	r3, #1
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008736:	f7fc ff91 	bl	800565c <HAL_GetTick>
 800873a:	0002      	movs	r2, r0
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008742:	429a      	cmp	r2, r3
 8008744:	d802      	bhi.n	800874c <HAL_SPI_TransmitReceive+0x2f4>
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	3301      	adds	r3, #1
 800874a:	d102      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x2fa>
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8008752:	232b      	movs	r3, #43	; 0x2b
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	2203      	movs	r2, #3
 8008758:	701a      	strb	r2, [r3, #0]
        goto error;
 800875a:	e02a      	b.n	80087b2 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008760:	b29b      	uxth	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1a2      	bne.n	80086ac <HAL_SPI_TransmitReceive+0x254>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800876a:	b29b      	uxth	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d19d      	bne.n	80086ac <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	0018      	movs	r0, r3
 8008778:	f000 f904 	bl	8008984 <SPI_EndRxTxTransaction>
 800877c:	1e03      	subs	r3, r0, #0
 800877e:	d007      	beq.n	8008790 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8008780:	232b      	movs	r3, #43	; 0x2b
 8008782:	18fb      	adds	r3, r7, r3
 8008784:	2201      	movs	r2, #1
 8008786:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800878e:	e010      	b.n	80087b2 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10b      	bne.n	80087b0 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	e000      	b.n	80087b2 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80087b0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2251      	movs	r2, #81	; 0x51
 80087b6:	2101      	movs	r1, #1
 80087b8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2250      	movs	r2, #80	; 0x50
 80087be:	2100      	movs	r1, #0
 80087c0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80087c2:	232b      	movs	r3, #43	; 0x2b
 80087c4:	18fb      	adds	r3, r7, r3
 80087c6:	781b      	ldrb	r3, [r3, #0]
}
 80087c8:	0018      	movs	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	b00c      	add	sp, #48	; 0x30
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	1dfb      	adds	r3, r7, #7
 80087de:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087e0:	e050      	b.n	8008884 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	3301      	adds	r3, #1
 80087e6:	d04d      	beq.n	8008884 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80087e8:	f7fc ff38 	bl	800565c <HAL_GetTick>
 80087ec:	0002      	movs	r2, r0
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d902      	bls.n	80087fe <SPI_WaitFlagStateUntilTimeout+0x2e>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d142      	bne.n	8008884 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	21e0      	movs	r1, #224	; 0xe0
 800880a:	438a      	bics	r2, r1
 800880c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	2382      	movs	r3, #130	; 0x82
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	429a      	cmp	r2, r3
 8008818:	d113      	bne.n	8008842 <SPI_WaitFlagStateUntilTimeout+0x72>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	2380      	movs	r3, #128	; 0x80
 8008820:	021b      	lsls	r3, r3, #8
 8008822:	429a      	cmp	r2, r3
 8008824:	d005      	beq.n	8008832 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	2380      	movs	r3, #128	; 0x80
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	429a      	cmp	r2, r3
 8008830:	d107      	bne.n	8008842 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2140      	movs	r1, #64	; 0x40
 800883e:	438a      	bics	r2, r1
 8008840:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008846:	2380      	movs	r3, #128	; 0x80
 8008848:	019b      	lsls	r3, r3, #6
 800884a:	429a      	cmp	r2, r3
 800884c:	d110      	bne.n	8008870 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4914      	ldr	r1, [pc, #80]	; (80088ac <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800885a:	400a      	ands	r2, r1
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2180      	movs	r1, #128	; 0x80
 800886a:	0189      	lsls	r1, r1, #6
 800886c:	430a      	orrs	r2, r1
 800886e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2251      	movs	r2, #81	; 0x51
 8008874:	2101      	movs	r1, #1
 8008876:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2250      	movs	r2, #80	; 0x50
 800887c:	2100      	movs	r1, #0
 800887e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e00f      	b.n	80088a4 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4013      	ands	r3, r2
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	425a      	negs	r2, r3
 8008894:	4153      	adcs	r3, r2
 8008896:	b2db      	uxtb	r3, r3
 8008898:	001a      	movs	r2, r3
 800889a:	1dfb      	adds	r3, r7, #7
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d19f      	bne.n	80087e2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	0018      	movs	r0, r3
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b004      	add	sp, #16
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	ffffdfff 	.word	0xffffdfff

080088b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	2382      	movs	r3, #130	; 0x82
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d113      	bne.n	80088f0 <SPI_EndRxTransaction+0x40>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	2380      	movs	r3, #128	; 0x80
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d005      	beq.n	80088e0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	429a      	cmp	r2, r3
 80088de:	d107      	bne.n	80088f0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2140      	movs	r1, #64	; 0x40
 80088ec:	438a      	bics	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	2382      	movs	r3, #130	; 0x82
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d12b      	bne.n	8008954 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	2380      	movs	r3, #128	; 0x80
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	429a      	cmp	r2, r3
 8008906:	d012      	beq.n	800892e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	0013      	movs	r3, r2
 8008912:	2200      	movs	r2, #0
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	f7ff ff5b 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 800891a:	1e03      	subs	r3, r0, #0
 800891c:	d02d      	beq.n	800897a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	2220      	movs	r2, #32
 8008924:	431a      	orrs	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e026      	b.n	800897c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	0013      	movs	r3, r2
 8008938:	2200      	movs	r2, #0
 800893a:	2101      	movs	r1, #1
 800893c:	f7ff ff48 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 8008940:	1e03      	subs	r3, r0, #0
 8008942:	d01a      	beq.n	800897a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008948:	2220      	movs	r2, #32
 800894a:	431a      	orrs	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e013      	b.n	800897c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	0013      	movs	r3, r2
 800895e:	2200      	movs	r2, #0
 8008960:	2101      	movs	r1, #1
 8008962:	f7ff ff35 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 8008966:	1e03      	subs	r3, r0, #0
 8008968:	d007      	beq.n	800897a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896e:	2220      	movs	r2, #32
 8008970:	431a      	orrs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e000      	b.n	800897c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	0018      	movs	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	b004      	add	sp, #16
 8008982:	bd80      	pop	{r7, pc}

08008984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	2382      	movs	r3, #130	; 0x82
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	429a      	cmp	r2, r3
 800899a:	d112      	bne.n	80089c2 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	0013      	movs	r3, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	2180      	movs	r1, #128	; 0x80
 80089aa:	f7ff ff11 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 80089ae:	1e03      	subs	r3, r0, #0
 80089b0:	d020      	beq.n	80089f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b6:	2220      	movs	r2, #32
 80089b8:	431a      	orrs	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e019      	b.n	80089f6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2251      	movs	r2, #81	; 0x51
 80089c6:	5c9b      	ldrb	r3, [r3, r2]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	d112      	bne.n	80089f4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	0013      	movs	r3, r2
 80089d8:	2200      	movs	r2, #0
 80089da:	2101      	movs	r1, #1
 80089dc:	f7ff fef8 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 80089e0:	1e03      	subs	r3, r0, #0
 80089e2:	d007      	beq.n	80089f4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e8:	2220      	movs	r2, #32
 80089ea:	431a      	orrs	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e000      	b.n	80089f6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	0018      	movs	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	b004      	add	sp, #16
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e01e      	b.n	8008a4e <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2239      	movs	r2, #57	; 0x39
 8008a14:	5c9b      	ldrb	r3, [r3, r2]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d107      	bne.n	8008a2c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2238      	movs	r2, #56	; 0x38
 8008a20:	2100      	movs	r1, #0
 8008a22:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	0018      	movs	r0, r3
 8008a28:	f7fa fdd4 	bl	80035d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2239      	movs	r2, #57	; 0x39
 8008a30:	2102      	movs	r1, #2
 8008a32:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	0019      	movs	r1, r3
 8008a3e:	0010      	movs	r0, r2
 8008a40:	f000 fa40 	bl	8008ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2239      	movs	r2, #57	; 0x39
 8008a48:	2101      	movs	r1, #1
 8008a4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	0018      	movs	r0, r3
 8008a50:	46bd      	mov	sp, r7
 8008a52:	b002      	add	sp, #8
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68da      	ldr	r2, [r3, #12]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2101      	movs	r1, #1
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2207      	movs	r2, #7
 8008a76:	4013      	ands	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b06      	cmp	r3, #6
 8008a7e:	d007      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	0018      	movs	r0, r3
 8008a94:	46bd      	mov	sp, r7
 8008a96:	b004      	add	sp, #16
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	4013      	ands	r3, r2
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d124      	bne.n	8008afa <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d11d      	bne.n	8008afa <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	4252      	negs	r2, r2
 8008ac6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	0018      	movs	r0, r3
 8008ade:	f000 f9d9 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008ae2:	e007      	b.n	8008af4 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f000 f9cc 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	0018      	movs	r0, r3
 8008af0:	f000 f9d8 	bl	8008ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2204      	movs	r2, #4
 8008b02:	4013      	ands	r3, r2
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d125      	bne.n	8008b54 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d11e      	bne.n	8008b54 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	4252      	negs	r2, r2
 8008b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	23c0      	movs	r3, #192	; 0xc0
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4013      	ands	r3, r2
 8008b32:	d004      	beq.n	8008b3e <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	0018      	movs	r0, r3
 8008b38:	f000 f9ac 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008b3c:	e007      	b.n	8008b4e <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	0018      	movs	r0, r3
 8008b42:	f000 f99f 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f000 f9ab 	bl	8008ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2208      	movs	r2, #8
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d124      	bne.n	8008bac <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	2208      	movs	r2, #8
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d11d      	bne.n	8008bac <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2209      	movs	r2, #9
 8008b76:	4252      	negs	r2, r2
 8008b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	2203      	movs	r2, #3
 8008b88:	4013      	ands	r3, r2
 8008b8a:	d004      	beq.n	8008b96 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f000 f980 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008b94:	e007      	b.n	8008ba6 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f000 f973 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f000 f97f 	bl	8008ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2210      	movs	r2, #16
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d125      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2210      	movs	r2, #16
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	2b10      	cmp	r3, #16
 8008bc6:	d11e      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2211      	movs	r2, #17
 8008bce:	4252      	negs	r2, r2
 8008bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2208      	movs	r2, #8
 8008bd6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69da      	ldr	r2, [r3, #28]
 8008bde:	23c0      	movs	r3, #192	; 0xc0
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4013      	ands	r3, r2
 8008be4:	d004      	beq.n	8008bf0 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	0018      	movs	r0, r3
 8008bea:	f000 f953 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008bee:	e007      	b.n	8008c00 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f000 f946 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 f952 	bl	8008ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d10f      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d108      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2202      	movs	r2, #2
 8008c28:	4252      	negs	r2, r2
 8008c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f000 f920 	bl	8008e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2240      	movs	r2, #64	; 0x40
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	d10f      	bne.n	8008c62 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2240      	movs	r2, #64	; 0x40
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d108      	bne.n	8008c62 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2241      	movs	r2, #65	; 0x41
 8008c56:	4252      	negs	r2, r2
 8008c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f000 f929 	bl	8008eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	46bd      	mov	sp, r7
 8008c66:	b002      	add	sp, #8
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2238      	movs	r2, #56	; 0x38
 8008c7a:	5c9b      	ldrb	r3, [r3, r2]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_TIM_ConfigClockSource+0x18>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e0ab      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x170>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2238      	movs	r2, #56	; 0x38
 8008c88:	2101      	movs	r1, #1
 8008c8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2239      	movs	r2, #57	; 0x39
 8008c90:	2102      	movs	r1, #2
 8008c92:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2277      	movs	r2, #119	; 0x77
 8008ca0:	4393      	bics	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4a4f      	ldr	r2, [pc, #316]	; (8008de4 <HAL_TIM_ConfigClockSource+0x178>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b40      	cmp	r3, #64	; 0x40
 8008cba:	d100      	bne.n	8008cbe <HAL_TIM_ConfigClockSource+0x52>
 8008cbc:	e06b      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x12a>
 8008cbe:	d80e      	bhi.n	8008cde <HAL_TIM_ConfigClockSource+0x72>
 8008cc0:	2b10      	cmp	r3, #16
 8008cc2:	d100      	bne.n	8008cc6 <HAL_TIM_ConfigClockSource+0x5a>
 8008cc4:	e077      	b.n	8008db6 <HAL_TIM_ConfigClockSource+0x14a>
 8008cc6:	d803      	bhi.n	8008cd0 <HAL_TIM_ConfigClockSource+0x64>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d100      	bne.n	8008cce <HAL_TIM_ConfigClockSource+0x62>
 8008ccc:	e073      	b.n	8008db6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008cce:	e07c      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d100      	bne.n	8008cd6 <HAL_TIM_ConfigClockSource+0x6a>
 8008cd4:	e06f      	b.n	8008db6 <HAL_TIM_ConfigClockSource+0x14a>
 8008cd6:	2b30      	cmp	r3, #48	; 0x30
 8008cd8:	d100      	bne.n	8008cdc <HAL_TIM_ConfigClockSource+0x70>
 8008cda:	e06c      	b.n	8008db6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8008cdc:	e075      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008cde:	2b70      	cmp	r3, #112	; 0x70
 8008ce0:	d00e      	beq.n	8008d00 <HAL_TIM_ConfigClockSource+0x94>
 8008ce2:	d804      	bhi.n	8008cee <HAL_TIM_ConfigClockSource+0x82>
 8008ce4:	2b50      	cmp	r3, #80	; 0x50
 8008ce6:	d036      	beq.n	8008d56 <HAL_TIM_ConfigClockSource+0xea>
 8008ce8:	2b60      	cmp	r3, #96	; 0x60
 8008cea:	d044      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8008cec:	e06d      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008cee:	2280      	movs	r2, #128	; 0x80
 8008cf0:	0152      	lsls	r2, r2, #5
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d068      	beq.n	8008dc8 <HAL_TIM_ConfigClockSource+0x15c>
 8008cf6:	2280      	movs	r2, #128	; 0x80
 8008cf8:	0192      	lsls	r2, r2, #6
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d017      	beq.n	8008d2e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8008cfe:	e064      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	6899      	ldr	r1, [r3, #8]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f000 fa34 	bl	800917c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2277      	movs	r2, #119	; 0x77
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	609a      	str	r2, [r3, #8]
      break;
 8008d2c:	e04d      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6899      	ldr	r1, [r3, #8]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f000 fa1d 	bl	800917c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2180      	movs	r1, #128	; 0x80
 8008d4e:	01c9      	lsls	r1, r1, #7
 8008d50:	430a      	orrs	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
      break;
 8008d54:	e039      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6859      	ldr	r1, [r3, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	001a      	movs	r2, r3
 8008d64:	f000 f990 	bl	8009088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2150      	movs	r1, #80	; 0x50
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f000 f9ea 	bl	8009148 <TIM_ITRx_SetConfig>
      break;
 8008d74:	e029      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	001a      	movs	r2, r3
 8008d84:	f000 f9ae 	bl	80090e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2160      	movs	r1, #96	; 0x60
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f000 f9da 	bl	8009148 <TIM_ITRx_SetConfig>
      break;
 8008d94:	e019      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6859      	ldr	r1, [r3, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	001a      	movs	r2, r3
 8008da4:	f000 f970 	bl	8009088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2140      	movs	r1, #64	; 0x40
 8008dae:	0018      	movs	r0, r3
 8008db0:	f000 f9ca 	bl	8009148 <TIM_ITRx_SetConfig>
      break;
 8008db4:	e009      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	0019      	movs	r1, r3
 8008dc0:	0010      	movs	r0, r2
 8008dc2:	f000 f9c1 	bl	8009148 <TIM_ITRx_SetConfig>
      break;
 8008dc6:	e000      	b.n	8008dca <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8008dc8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2239      	movs	r2, #57	; 0x39
 8008dce:	2101      	movs	r1, #1
 8008dd0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2238      	movs	r2, #56	; 0x38
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	0018      	movs	r0, r3
 8008dde:	46bd      	mov	sp, r7
 8008de0:	b004      	add	sp, #16
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	ffff00ff 	.word	0xffff00ff

08008de8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2238      	movs	r2, #56	; 0x38
 8008df6:	5c9b      	ldrb	r3, [r3, r2]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e032      	b.n	8008e66 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2238      	movs	r2, #56	; 0x38
 8008e04:	2101      	movs	r1, #1
 8008e06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2239      	movs	r2, #57	; 0x39
 8008e0c:	2102      	movs	r1, #2
 8008e0e:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	0011      	movs	r1, r2
 8008e16:	0018      	movs	r0, r3
 8008e18:	f000 f8b2 	bl	8008f80 <TIM_SlaveTimer_SetConfig>
 8008e1c:	1e03      	subs	r3, r0, #0
 8008e1e:	d009      	beq.n	8008e34 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2239      	movs	r2, #57	; 0x39
 8008e24:	2101      	movs	r1, #1
 8008e26:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2238      	movs	r2, #56	; 0x38
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e018      	b.n	8008e66 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2140      	movs	r1, #64	; 0x40
 8008e40:	438a      	bics	r2, r1
 8008e42:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4908      	ldr	r1, [pc, #32]	; (8008e70 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8008e50:	400a      	ands	r2, r1
 8008e52:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2239      	movs	r2, #57	; 0x39
 8008e58:	2101      	movs	r1, #1
 8008e5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2238      	movs	r2, #56	; 0x38
 8008e60:	2100      	movs	r1, #0
 8008e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	0018      	movs	r0, r3
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b002      	add	sp, #8
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	46c0      	nop			; (mov r8, r8)
 8008e70:	ffffbfff 	.word	0xffffbfff

08008e74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e7c:	46c0      	nop			; (mov r8, r8)
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b002      	add	sp, #8
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e8c:	46c0      	nop			; (mov r8, r8)
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	b002      	add	sp, #8
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e9c:	46c0      	nop			; (mov r8, r8)
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	b002      	add	sp, #8
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eac:	46c0      	nop			; (mov r8, r8)
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	b002      	add	sp, #8
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ebc:	46c0      	nop			; (mov r8, r8)
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b002      	add	sp, #8
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	2380      	movs	r3, #128	; 0x80
 8008ed8:	05db      	lsls	r3, r3, #23
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d00b      	beq.n	8008ef6 <TIM_Base_SetConfig+0x32>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a23      	ldr	r2, [pc, #140]	; (8008f70 <TIM_Base_SetConfig+0xac>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d007      	beq.n	8008ef6 <TIM_Base_SetConfig+0x32>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a22      	ldr	r2, [pc, #136]	; (8008f74 <TIM_Base_SetConfig+0xb0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d003      	beq.n	8008ef6 <TIM_Base_SetConfig+0x32>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a21      	ldr	r2, [pc, #132]	; (8008f78 <TIM_Base_SetConfig+0xb4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d108      	bne.n	8008f08 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2270      	movs	r2, #112	; 0x70
 8008efa:	4393      	bics	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	2380      	movs	r3, #128	; 0x80
 8008f0c:	05db      	lsls	r3, r3, #23
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d00b      	beq.n	8008f2a <TIM_Base_SetConfig+0x66>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a16      	ldr	r2, [pc, #88]	; (8008f70 <TIM_Base_SetConfig+0xac>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d007      	beq.n	8008f2a <TIM_Base_SetConfig+0x66>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a15      	ldr	r2, [pc, #84]	; (8008f74 <TIM_Base_SetConfig+0xb0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d003      	beq.n	8008f2a <TIM_Base_SetConfig+0x66>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a14      	ldr	r2, [pc, #80]	; (8008f78 <TIM_Base_SetConfig+0xb4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d108      	bne.n	8008f3c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4a13      	ldr	r2, [pc, #76]	; (8008f7c <TIM_Base_SetConfig+0xb8>)
 8008f2e:	4013      	ands	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2280      	movs	r2, #128	; 0x80
 8008f40:	4393      	bics	r3, r2
 8008f42:	001a      	movs	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	689a      	ldr	r2, [r3, #8]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	615a      	str	r2, [r3, #20]
}
 8008f68:	46c0      	nop			; (mov r8, r8)
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b004      	add	sp, #16
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	40000400 	.word	0x40000400
 8008f74:	40010800 	.word	0x40010800
 8008f78:	40011400 	.word	0x40011400
 8008f7c:	fffffcff 	.word	0xfffffcff

08008f80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2270      	movs	r2, #112	; 0x70
 8008f96:	4393      	bics	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2207      	movs	r2, #7
 8008fa8:	4393      	bics	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	2b30      	cmp	r3, #48	; 0x30
 8008fc4:	d05a      	beq.n	800907c <TIM_SlaveTimer_SetConfig+0xfc>
 8008fc6:	d806      	bhi.n	8008fd6 <TIM_SlaveTimer_SetConfig+0x56>
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	d057      	beq.n	800907c <TIM_SlaveTimer_SetConfig+0xfc>
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	d055      	beq.n	800907c <TIM_SlaveTimer_SetConfig+0xfc>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d053      	beq.n	800907c <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008fd4:	e053      	b.n	800907e <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8008fd6:	2b50      	cmp	r3, #80	; 0x50
 8008fd8:	d03c      	beq.n	8009054 <TIM_SlaveTimer_SetConfig+0xd4>
 8008fda:	d802      	bhi.n	8008fe2 <TIM_SlaveTimer_SetConfig+0x62>
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d010      	beq.n	8009002 <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8008fe0:	e04d      	b.n	800907e <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8008fe2:	2b60      	cmp	r3, #96	; 0x60
 8008fe4:	d040      	beq.n	8009068 <TIM_SlaveTimer_SetConfig+0xe8>
 8008fe6:	2b70      	cmp	r3, #112	; 0x70
 8008fe8:	d000      	beq.n	8008fec <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8008fea:	e048      	b.n	800907e <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	68d9      	ldr	r1, [r3, #12]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f000 f8be 	bl	800917c <TIM_ETR_SetConfig>
      break;
 8009000:	e03d      	b.n	800907e <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b05      	cmp	r3, #5
 8009008:	d101      	bne.n	800900e <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e038      	b.n	8009080 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6a1a      	ldr	r2, [r3, #32]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2101      	movs	r1, #1
 8009022:	438a      	bics	r2, r1
 8009024:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	22f0      	movs	r2, #240	; 0xf0
 8009032:	4393      	bics	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	621a      	str	r2, [r3, #32]
      break;
 8009052:	e014      	b.n	800907e <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6818      	ldr	r0, [r3, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	6899      	ldr	r1, [r3, #8]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	001a      	movs	r2, r3
 8009062:	f000 f811 	bl	8009088 <TIM_TI1_ConfigInputStage>
      break;
 8009066:	e00a      	b.n	800907e <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	6899      	ldr	r1, [r3, #8]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	001a      	movs	r2, r3
 8009076:	f000 f835 	bl	80090e4 <TIM_TI2_ConfigInputStage>
      break;
 800907a:	e000      	b.n	800907e <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 800907c:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	b006      	add	sp, #24
 8009086:	bd80      	pop	{r7, pc}

08009088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	2201      	movs	r2, #1
 80090a0:	4393      	bics	r3, r2
 80090a2:	001a      	movs	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	22f0      	movs	r2, #240	; 0xf0
 80090b2:	4393      	bics	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	220a      	movs	r2, #10
 80090c4:	4393      	bics	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	621a      	str	r2, [r3, #32]
}
 80090dc:	46c0      	nop			; (mov r8, r8)
 80090de:	46bd      	mov	sp, r7
 80090e0:	b006      	add	sp, #24
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	2210      	movs	r2, #16
 80090f6:	4393      	bics	r3, r2
 80090f8:	001a      	movs	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	4a0d      	ldr	r2, [pc, #52]	; (8009144 <TIM_TI2_ConfigInputStage+0x60>)
 800910e:	4013      	ands	r3, r2
 8009110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	031b      	lsls	r3, r3, #12
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	22a0      	movs	r2, #160	; 0xa0
 8009120:	4393      	bics	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	621a      	str	r2, [r3, #32]
}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	46bd      	mov	sp, r7
 800913e:	b006      	add	sp, #24
 8009140:	bd80      	pop	{r7, pc}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	ffff0fff 	.word	0xffff0fff

08009148 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2270      	movs	r2, #112	; 0x70
 800915c:	4393      	bics	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4313      	orrs	r3, r2
 8009166:	2207      	movs	r2, #7
 8009168:	4313      	orrs	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	609a      	str	r2, [r3, #8]
}
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	46bd      	mov	sp, r7
 8009176:	b004      	add	sp, #16
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <TIM_ETR_SetConfig+0x3c>)
 8009194:	4013      	ands	r3, r2
 8009196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	021a      	lsls	r2, r3, #8
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	431a      	orrs	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	609a      	str	r2, [r3, #8]
}
 80091b0:	46c0      	nop			; (mov r8, r8)
 80091b2:	46bd      	mov	sp, r7
 80091b4:	b006      	add	sp, #24
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	ffff00ff 	.word	0xffff00ff

080091bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2238      	movs	r2, #56	; 0x38
 80091ca:	5c9b      	ldrb	r3, [r3, r2]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e032      	b.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2238      	movs	r2, #56	; 0x38
 80091d8:	2101      	movs	r1, #1
 80091da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2239      	movs	r2, #57	; 0x39
 80091e0:	2102      	movs	r1, #2
 80091e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2270      	movs	r2, #112	; 0x70
 80091f8:	4393      	bics	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2280      	movs	r2, #128	; 0x80
 800920a:	4393      	bics	r3, r2
 800920c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4313      	orrs	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2239      	movs	r2, #57	; 0x39
 800922c:	2101      	movs	r1, #1
 800922e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2238      	movs	r2, #56	; 0x38
 8009234:	2100      	movs	r1, #0
 8009236:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	0018      	movs	r0, r3
 800923c:	46bd      	mov	sp, r7
 800923e:	b004      	add	sp, #16
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e044      	b.n	80092e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925a:	2b00      	cmp	r3, #0
 800925c:	d107      	bne.n	800926e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2270      	movs	r2, #112	; 0x70
 8009262:	2100      	movs	r1, #0
 8009264:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	0018      	movs	r0, r3
 800926a:	f7fa f9c9 	bl	8003600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	; 0x24
 8009272:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2101      	movs	r1, #1
 8009280:	438a      	bics	r2, r1
 8009282:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	0018      	movs	r0, r3
 8009288:	f000 f9c2 	bl	8009610 <UART_SetConfig>
 800928c:	0003      	movs	r3, r0
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e024      	b.n	80092e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	0018      	movs	r0, r3
 80092a2:	f000 fce9 	bl	8009c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	490d      	ldr	r1, [pc, #52]	; (80092e8 <HAL_UART_Init+0xa4>)
 80092b2:	400a      	ands	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	212a      	movs	r1, #42	; 0x2a
 80092c2:	438a      	bics	r2, r1
 80092c4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2101      	movs	r1, #1
 80092d2:	430a      	orrs	r2, r1
 80092d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	0018      	movs	r0, r3
 80092da:	f000 fd81 	bl	8009de0 <UART_CheckIdleState>
 80092de:	0003      	movs	r3, r0
}
 80092e0:	0018      	movs	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b002      	add	sp, #8
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	ffffb7ff 	.word	0xffffb7ff

080092ec <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08a      	sub	sp, #40	; 0x28
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	1dbb      	adds	r3, r7, #6
 80092fa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009300:	2b20      	cmp	r3, #32
 8009302:	d000      	beq.n	8009306 <HAL_UART_Transmit+0x1a>
 8009304:	e094      	b.n	8009430 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <HAL_UART_Transmit+0x28>
 800930c:	1dbb      	adds	r3, r7, #6
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e08c      	b.n	8009432 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	2380      	movs	r3, #128	; 0x80
 800931e:	015b      	lsls	r3, r3, #5
 8009320:	429a      	cmp	r2, r3
 8009322:	d109      	bne.n	8009338 <HAL_UART_Transmit+0x4c>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d105      	bne.n	8009338 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2201      	movs	r2, #1
 8009330:	4013      	ands	r3, r2
 8009332:	d001      	beq.n	8009338 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e07c      	b.n	8009432 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2270      	movs	r2, #112	; 0x70
 800933c:	5c9b      	ldrb	r3, [r3, r2]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_UART_Transmit+0x5a>
 8009342:	2302      	movs	r3, #2
 8009344:	e075      	b.n	8009432 <HAL_UART_Transmit+0x146>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2270      	movs	r2, #112	; 0x70
 800934a:	2101      	movs	r1, #1
 800934c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2221      	movs	r2, #33	; 0x21
 8009358:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800935a:	f7fc f97f 	bl	800565c <HAL_GetTick>
 800935e:	0003      	movs	r3, r0
 8009360:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	1dba      	adds	r2, r7, #6
 8009366:	2150      	movs	r1, #80	; 0x50
 8009368:	8812      	ldrh	r2, [r2, #0]
 800936a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	1dba      	adds	r2, r7, #6
 8009370:	2152      	movs	r1, #82	; 0x52
 8009372:	8812      	ldrh	r2, [r2, #0]
 8009374:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	2380      	movs	r3, #128	; 0x80
 800937c:	015b      	lsls	r3, r3, #5
 800937e:	429a      	cmp	r2, r3
 8009380:	d108      	bne.n	8009394 <HAL_UART_Transmit+0xa8>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	61bb      	str	r3, [r7, #24]
 8009392:	e003      	b.n	800939c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009398:	2300      	movs	r3, #0
 800939a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800939c:	e02c      	b.n	80093f8 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	0013      	movs	r3, r2
 80093a8:	2200      	movs	r2, #0
 80093aa:	2180      	movs	r1, #128	; 0x80
 80093ac:	f000 fd5e 	bl	8009e6c <UART_WaitOnFlagUntilTimeout>
 80093b0:	1e03      	subs	r3, r0, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e03c      	b.n	8009432 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	001a      	movs	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	05d2      	lsls	r2, r2, #23
 80093ca:	0dd2      	lsrs	r2, r2, #23
 80093cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	3302      	adds	r3, #2
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	e007      	b.n	80093e6 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	781a      	ldrb	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2252      	movs	r2, #82	; 0x52
 80093ea:	5a9b      	ldrh	r3, [r3, r2]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b299      	uxth	r1, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2252      	movs	r2, #82	; 0x52
 80093f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2252      	movs	r2, #82	; 0x52
 80093fc:	5a9b      	ldrh	r3, [r3, r2]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1cc      	bne.n	800939e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	0013      	movs	r3, r2
 800940e:	2200      	movs	r2, #0
 8009410:	2140      	movs	r1, #64	; 0x40
 8009412:	f000 fd2b 	bl	8009e6c <UART_WaitOnFlagUntilTimeout>
 8009416:	1e03      	subs	r3, r0, #0
 8009418:	d001      	beq.n	800941e <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e009      	b.n	8009432 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2220      	movs	r2, #32
 8009422:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2270      	movs	r2, #112	; 0x70
 8009428:	2100      	movs	r1, #0
 800942a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	e000      	b.n	8009432 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8009430:	2302      	movs	r3, #2
  }
}
 8009432:	0018      	movs	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	b008      	add	sp, #32
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08a      	sub	sp, #40	; 0x28
 8009440:	af02      	add	r7, sp, #8
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	1dbb      	adds	r3, r7, #6
 800944a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009450:	2b20      	cmp	r3, #32
 8009452:	d000      	beq.n	8009456 <HAL_UART_Receive+0x1a>
 8009454:	e0d5      	b.n	8009602 <HAL_UART_Receive+0x1c6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <HAL_UART_Receive+0x28>
 800945c:	1dbb      	adds	r3, r7, #6
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e0cd      	b.n	8009604 <HAL_UART_Receive+0x1c8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	2380      	movs	r3, #128	; 0x80
 800946e:	015b      	lsls	r3, r3, #5
 8009470:	429a      	cmp	r2, r3
 8009472:	d109      	bne.n	8009488 <HAL_UART_Receive+0x4c>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2201      	movs	r2, #1
 8009480:	4013      	ands	r3, r2
 8009482:	d001      	beq.n	8009488 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e0bd      	b.n	8009604 <HAL_UART_Receive+0x1c8>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2270      	movs	r2, #112	; 0x70
 800948c:	5c9b      	ldrb	r3, [r3, r2]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d101      	bne.n	8009496 <HAL_UART_Receive+0x5a>
 8009492:	2302      	movs	r3, #2
 8009494:	e0b6      	b.n	8009604 <HAL_UART_Receive+0x1c8>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2270      	movs	r2, #112	; 0x70
 800949a:	2101      	movs	r1, #1
 800949c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2222      	movs	r2, #34	; 0x22
 80094a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80094aa:	f7fc f8d7 	bl	800565c <HAL_GetTick>
 80094ae:	0003      	movs	r3, r0
 80094b0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	1dba      	adds	r2, r7, #6
 80094b6:	2158      	movs	r1, #88	; 0x58
 80094b8:	8812      	ldrh	r2, [r2, #0]
 80094ba:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	1dba      	adds	r2, r7, #6
 80094c0:	215a      	movs	r1, #90	; 0x5a
 80094c2:	8812      	ldrh	r2, [r2, #0]
 80094c4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	2380      	movs	r3, #128	; 0x80
 80094cc:	015b      	lsls	r3, r3, #5
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d10d      	bne.n	80094ee <HAL_UART_Receive+0xb2>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d104      	bne.n	80094e4 <HAL_UART_Receive+0xa8>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	225c      	movs	r2, #92	; 0x5c
 80094de:	494b      	ldr	r1, [pc, #300]	; (800960c <HAL_UART_Receive+0x1d0>)
 80094e0:	5299      	strh	r1, [r3, r2]
 80094e2:	e02e      	b.n	8009542 <HAL_UART_Receive+0x106>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	225c      	movs	r2, #92	; 0x5c
 80094e8:	21ff      	movs	r1, #255	; 0xff
 80094ea:	5299      	strh	r1, [r3, r2]
 80094ec:	e029      	b.n	8009542 <HAL_UART_Receive+0x106>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <HAL_UART_Receive+0xd6>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d104      	bne.n	8009508 <HAL_UART_Receive+0xcc>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	225c      	movs	r2, #92	; 0x5c
 8009502:	21ff      	movs	r1, #255	; 0xff
 8009504:	5299      	strh	r1, [r3, r2]
 8009506:	e01c      	b.n	8009542 <HAL_UART_Receive+0x106>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	225c      	movs	r2, #92	; 0x5c
 800950c:	217f      	movs	r1, #127	; 0x7f
 800950e:	5299      	strh	r1, [r3, r2]
 8009510:	e017      	b.n	8009542 <HAL_UART_Receive+0x106>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	2380      	movs	r3, #128	; 0x80
 8009518:	055b      	lsls	r3, r3, #21
 800951a:	429a      	cmp	r2, r3
 800951c:	d10d      	bne.n	800953a <HAL_UART_Receive+0xfe>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d104      	bne.n	8009530 <HAL_UART_Receive+0xf4>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	225c      	movs	r2, #92	; 0x5c
 800952a:	217f      	movs	r1, #127	; 0x7f
 800952c:	5299      	strh	r1, [r3, r2]
 800952e:	e008      	b.n	8009542 <HAL_UART_Receive+0x106>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	225c      	movs	r2, #92	; 0x5c
 8009534:	213f      	movs	r1, #63	; 0x3f
 8009536:	5299      	strh	r1, [r3, r2]
 8009538:	e003      	b.n	8009542 <HAL_UART_Receive+0x106>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	225c      	movs	r2, #92	; 0x5c
 800953e:	2100      	movs	r1, #0
 8009540:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8009542:	2312      	movs	r3, #18
 8009544:	18fb      	adds	r3, r7, r3
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	215c      	movs	r1, #92	; 0x5c
 800954a:	5a52      	ldrh	r2, [r2, r1]
 800954c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	2380      	movs	r3, #128	; 0x80
 8009554:	015b      	lsls	r3, r3, #5
 8009556:	429a      	cmp	r2, r3
 8009558:	d108      	bne.n	800956c <HAL_UART_Receive+0x130>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d104      	bne.n	800956c <HAL_UART_Receive+0x130>
    {
      pdata8bits  = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e003      	b.n	8009574 <HAL_UART_Receive+0x138>
    }
    else
    {
      pdata8bits  = pData;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009570:	2300      	movs	r3, #0
 8009572:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009574:	e036      	b.n	80095e4 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	0013      	movs	r3, r2
 8009580:	2200      	movs	r2, #0
 8009582:	2120      	movs	r1, #32
 8009584:	f000 fc72 	bl	8009e6c <UART_WaitOnFlagUntilTimeout>
 8009588:	1e03      	subs	r3, r0, #0
 800958a:	d001      	beq.n	8009590 <HAL_UART_Receive+0x154>
      {
        return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e039      	b.n	8009604 <HAL_UART_Receive+0x1c8>
      }
      if (pdata8bits == NULL)
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10e      	bne.n	80095b4 <HAL_UART_Receive+0x178>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	b29b      	uxth	r3, r3
 800959e:	2212      	movs	r2, #18
 80095a0:	18ba      	adds	r2, r7, r2
 80095a2:	8812      	ldrh	r2, [r2, #0]
 80095a4:	4013      	ands	r3, r2
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	3302      	adds	r3, #2
 80095b0:	61bb      	str	r3, [r7, #24]
 80095b2:	e00e      	b.n	80095d2 <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2212      	movs	r2, #18
 80095be:	18ba      	adds	r2, r7, r2
 80095c0:	8812      	ldrh	r2, [r2, #0]
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	4013      	ands	r3, r2
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	3301      	adds	r3, #1
 80095d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	225a      	movs	r2, #90	; 0x5a
 80095d6:	5a9b      	ldrh	r3, [r3, r2]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	b299      	uxth	r1, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	225a      	movs	r2, #90	; 0x5a
 80095e2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	225a      	movs	r2, #90	; 0x5a
 80095e8:	5a9b      	ldrh	r3, [r3, r2]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1c2      	bne.n	8009576 <HAL_UART_Receive+0x13a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2220      	movs	r2, #32
 80095f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2270      	movs	r2, #112	; 0x70
 80095fa:	2100      	movs	r1, #0
 80095fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	e000      	b.n	8009604 <HAL_UART_Receive+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8009602:	2302      	movs	r3, #2
  }
}
 8009604:	0018      	movs	r0, r3
 8009606:	46bd      	mov	sp, r7
 8009608:	b008      	add	sp, #32
 800960a:	bd80      	pop	{r7, pc}
 800960c:	000001ff 	.word	0x000001ff

08009610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009610:	b5b0      	push	{r4, r5, r7, lr}
 8009612:	b08e      	sub	sp, #56	; 0x38
 8009614:	af00      	add	r7, sp, #0
 8009616:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8009618:	231b      	movs	r3, #27
 800961a:	2218      	movs	r2, #24
 800961c:	4694      	mov	ip, r2
 800961e:	44bc      	add	ip, r7
 8009620:	4463      	add	r3, ip
 8009622:	2210      	movs	r2, #16
 8009624:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8009626:	2300      	movs	r3, #0
 8009628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800962a:	2313      	movs	r3, #19
 800962c:	2218      	movs	r2, #24
 800962e:	4694      	mov	ip, r2
 8009630:	44bc      	add	ip, r7
 8009632:	4463      	add	r3, ip
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009638:	2300      	movs	r3, #0
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	431a      	orrs	r2, r3
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	431a      	orrs	r2, r3
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	4313      	orrs	r3, r2
 8009652:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4aca      	ldr	r2, [pc, #808]	; (8009984 <UART_SetConfig+0x374>)
 800965c:	4013      	ands	r3, r2
 800965e:	0019      	movs	r1, r3
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009666:	430a      	orrs	r2, r1
 8009668:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4ac5      	ldr	r2, [pc, #788]	; (8009988 <UART_SetConfig+0x378>)
 8009672:	4013      	ands	r3, r2
 8009674:	0019      	movs	r1, r3
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4abf      	ldr	r2, [pc, #764]	; (800998c <UART_SetConfig+0x37c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d004      	beq.n	800969c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009698:	4313      	orrs	r3, r2
 800969a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	4abb      	ldr	r2, [pc, #748]	; (8009990 <UART_SetConfig+0x380>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	0019      	movs	r1, r3
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ae:	430a      	orrs	r2, r1
 80096b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4ab7      	ldr	r2, [pc, #732]	; (8009994 <UART_SetConfig+0x384>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d134      	bne.n	8009726 <UART_SetConfig+0x116>
 80096bc:	4bb6      	ldr	r3, [pc, #728]	; (8009998 <UART_SetConfig+0x388>)
 80096be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c0:	2203      	movs	r2, #3
 80096c2:	4013      	ands	r3, r2
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d015      	beq.n	80096f4 <UART_SetConfig+0xe4>
 80096c8:	d304      	bcc.n	80096d4 <UART_SetConfig+0xc4>
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d00a      	beq.n	80096e4 <UART_SetConfig+0xd4>
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d018      	beq.n	8009704 <UART_SetConfig+0xf4>
 80096d2:	e01f      	b.n	8009714 <UART_SetConfig+0x104>
 80096d4:	231b      	movs	r3, #27
 80096d6:	2218      	movs	r2, #24
 80096d8:	4694      	mov	ip, r2
 80096da:	44bc      	add	ip, r7
 80096dc:	4463      	add	r3, ip
 80096de:	2201      	movs	r2, #1
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e0c5      	b.n	8009870 <UART_SetConfig+0x260>
 80096e4:	231b      	movs	r3, #27
 80096e6:	2218      	movs	r2, #24
 80096e8:	4694      	mov	ip, r2
 80096ea:	44bc      	add	ip, r7
 80096ec:	4463      	add	r3, ip
 80096ee:	2202      	movs	r2, #2
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e0bd      	b.n	8009870 <UART_SetConfig+0x260>
 80096f4:	231b      	movs	r3, #27
 80096f6:	2218      	movs	r2, #24
 80096f8:	4694      	mov	ip, r2
 80096fa:	44bc      	add	ip, r7
 80096fc:	4463      	add	r3, ip
 80096fe:	2204      	movs	r2, #4
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e0b5      	b.n	8009870 <UART_SetConfig+0x260>
 8009704:	231b      	movs	r3, #27
 8009706:	2218      	movs	r2, #24
 8009708:	4694      	mov	ip, r2
 800970a:	44bc      	add	ip, r7
 800970c:	4463      	add	r3, ip
 800970e:	2208      	movs	r2, #8
 8009710:	701a      	strb	r2, [r3, #0]
 8009712:	e0ad      	b.n	8009870 <UART_SetConfig+0x260>
 8009714:	231b      	movs	r3, #27
 8009716:	2218      	movs	r2, #24
 8009718:	4694      	mov	ip, r2
 800971a:	44bc      	add	ip, r7
 800971c:	4463      	add	r3, ip
 800971e:	2210      	movs	r2, #16
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	e0a4      	b.n	8009870 <UART_SetConfig+0x260>
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a9c      	ldr	r2, [pc, #624]	; (800999c <UART_SetConfig+0x38c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d137      	bne.n	80097a0 <UART_SetConfig+0x190>
 8009730:	4b99      	ldr	r3, [pc, #612]	; (8009998 <UART_SetConfig+0x388>)
 8009732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009734:	220c      	movs	r2, #12
 8009736:	4013      	ands	r3, r2
 8009738:	2b04      	cmp	r3, #4
 800973a:	d018      	beq.n	800976e <UART_SetConfig+0x15e>
 800973c:	d802      	bhi.n	8009744 <UART_SetConfig+0x134>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <UART_SetConfig+0x13e>
 8009742:	e024      	b.n	800978e <UART_SetConfig+0x17e>
 8009744:	2b08      	cmp	r3, #8
 8009746:	d00a      	beq.n	800975e <UART_SetConfig+0x14e>
 8009748:	2b0c      	cmp	r3, #12
 800974a:	d018      	beq.n	800977e <UART_SetConfig+0x16e>
 800974c:	e01f      	b.n	800978e <UART_SetConfig+0x17e>
 800974e:	231b      	movs	r3, #27
 8009750:	2218      	movs	r2, #24
 8009752:	4694      	mov	ip, r2
 8009754:	44bc      	add	ip, r7
 8009756:	4463      	add	r3, ip
 8009758:	2200      	movs	r2, #0
 800975a:	701a      	strb	r2, [r3, #0]
 800975c:	e088      	b.n	8009870 <UART_SetConfig+0x260>
 800975e:	231b      	movs	r3, #27
 8009760:	2218      	movs	r2, #24
 8009762:	4694      	mov	ip, r2
 8009764:	44bc      	add	ip, r7
 8009766:	4463      	add	r3, ip
 8009768:	2202      	movs	r2, #2
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e080      	b.n	8009870 <UART_SetConfig+0x260>
 800976e:	231b      	movs	r3, #27
 8009770:	2218      	movs	r2, #24
 8009772:	4694      	mov	ip, r2
 8009774:	44bc      	add	ip, r7
 8009776:	4463      	add	r3, ip
 8009778:	2204      	movs	r2, #4
 800977a:	701a      	strb	r2, [r3, #0]
 800977c:	e078      	b.n	8009870 <UART_SetConfig+0x260>
 800977e:	231b      	movs	r3, #27
 8009780:	2218      	movs	r2, #24
 8009782:	4694      	mov	ip, r2
 8009784:	44bc      	add	ip, r7
 8009786:	4463      	add	r3, ip
 8009788:	2208      	movs	r2, #8
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	e070      	b.n	8009870 <UART_SetConfig+0x260>
 800978e:	231b      	movs	r3, #27
 8009790:	2218      	movs	r2, #24
 8009792:	4694      	mov	ip, r2
 8009794:	44bc      	add	ip, r7
 8009796:	4463      	add	r3, ip
 8009798:	2210      	movs	r2, #16
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	46c0      	nop			; (mov r8, r8)
 800979e:	e067      	b.n	8009870 <UART_SetConfig+0x260>
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a7e      	ldr	r2, [pc, #504]	; (80099a0 <UART_SetConfig+0x390>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d107      	bne.n	80097ba <UART_SetConfig+0x1aa>
 80097aa:	231b      	movs	r3, #27
 80097ac:	2218      	movs	r2, #24
 80097ae:	4694      	mov	ip, r2
 80097b0:	44bc      	add	ip, r7
 80097b2:	4463      	add	r3, ip
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	e05a      	b.n	8009870 <UART_SetConfig+0x260>
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a79      	ldr	r2, [pc, #484]	; (80099a4 <UART_SetConfig+0x394>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d107      	bne.n	80097d4 <UART_SetConfig+0x1c4>
 80097c4:	231b      	movs	r3, #27
 80097c6:	2218      	movs	r2, #24
 80097c8:	4694      	mov	ip, r2
 80097ca:	44bc      	add	ip, r7
 80097cc:	4463      	add	r3, ip
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	e04d      	b.n	8009870 <UART_SetConfig+0x260>
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a6c      	ldr	r2, [pc, #432]	; (800998c <UART_SetConfig+0x37c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d141      	bne.n	8009862 <UART_SetConfig+0x252>
 80097de:	4b6e      	ldr	r3, [pc, #440]	; (8009998 <UART_SetConfig+0x388>)
 80097e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097e2:	23c0      	movs	r3, #192	; 0xc0
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	4013      	ands	r3, r2
 80097e8:	2280      	movs	r2, #128	; 0x80
 80097ea:	00d2      	lsls	r2, r2, #3
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d01f      	beq.n	8009830 <UART_SetConfig+0x220>
 80097f0:	2280      	movs	r2, #128	; 0x80
 80097f2:	00d2      	lsls	r2, r2, #3
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d802      	bhi.n	80097fe <UART_SetConfig+0x1ee>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <UART_SetConfig+0x200>
 80097fc:	e028      	b.n	8009850 <UART_SetConfig+0x240>
 80097fe:	2280      	movs	r2, #128	; 0x80
 8009800:	0112      	lsls	r2, r2, #4
 8009802:	4293      	cmp	r3, r2
 8009804:	d00c      	beq.n	8009820 <UART_SetConfig+0x210>
 8009806:	22c0      	movs	r2, #192	; 0xc0
 8009808:	0112      	lsls	r2, r2, #4
 800980a:	4293      	cmp	r3, r2
 800980c:	d018      	beq.n	8009840 <UART_SetConfig+0x230>
 800980e:	e01f      	b.n	8009850 <UART_SetConfig+0x240>
 8009810:	231b      	movs	r3, #27
 8009812:	2218      	movs	r2, #24
 8009814:	4694      	mov	ip, r2
 8009816:	44bc      	add	ip, r7
 8009818:	4463      	add	r3, ip
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	e027      	b.n	8009870 <UART_SetConfig+0x260>
 8009820:	231b      	movs	r3, #27
 8009822:	2218      	movs	r2, #24
 8009824:	4694      	mov	ip, r2
 8009826:	44bc      	add	ip, r7
 8009828:	4463      	add	r3, ip
 800982a:	2202      	movs	r2, #2
 800982c:	701a      	strb	r2, [r3, #0]
 800982e:	e01f      	b.n	8009870 <UART_SetConfig+0x260>
 8009830:	231b      	movs	r3, #27
 8009832:	2218      	movs	r2, #24
 8009834:	4694      	mov	ip, r2
 8009836:	44bc      	add	ip, r7
 8009838:	4463      	add	r3, ip
 800983a:	2204      	movs	r2, #4
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e017      	b.n	8009870 <UART_SetConfig+0x260>
 8009840:	231b      	movs	r3, #27
 8009842:	2218      	movs	r2, #24
 8009844:	4694      	mov	ip, r2
 8009846:	44bc      	add	ip, r7
 8009848:	4463      	add	r3, ip
 800984a:	2208      	movs	r2, #8
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	e00f      	b.n	8009870 <UART_SetConfig+0x260>
 8009850:	231b      	movs	r3, #27
 8009852:	2218      	movs	r2, #24
 8009854:	4694      	mov	ip, r2
 8009856:	44bc      	add	ip, r7
 8009858:	4463      	add	r3, ip
 800985a:	2210      	movs	r2, #16
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	e006      	b.n	8009870 <UART_SetConfig+0x260>
 8009862:	231b      	movs	r3, #27
 8009864:	2218      	movs	r2, #24
 8009866:	4694      	mov	ip, r2
 8009868:	44bc      	add	ip, r7
 800986a:	4463      	add	r3, ip
 800986c:	2210      	movs	r2, #16
 800986e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a45      	ldr	r2, [pc, #276]	; (800998c <UART_SetConfig+0x37c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d000      	beq.n	800987c <UART_SetConfig+0x26c>
 800987a:	e09d      	b.n	80099b8 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800987c:	231b      	movs	r3, #27
 800987e:	2218      	movs	r2, #24
 8009880:	4694      	mov	ip, r2
 8009882:	44bc      	add	ip, r7
 8009884:	4463      	add	r3, ip
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d00d      	beq.n	80098a8 <UART_SetConfig+0x298>
 800988c:	dc02      	bgt.n	8009894 <UART_SetConfig+0x284>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <UART_SetConfig+0x28e>
 8009892:	e01d      	b.n	80098d0 <UART_SetConfig+0x2c0>
 8009894:	2b04      	cmp	r3, #4
 8009896:	d012      	beq.n	80098be <UART_SetConfig+0x2ae>
 8009898:	2b08      	cmp	r3, #8
 800989a:	d015      	beq.n	80098c8 <UART_SetConfig+0x2b8>
 800989c:	e018      	b.n	80098d0 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800989e:	f7fd fe13 	bl	80074c8 <HAL_RCC_GetPCLK1Freq>
 80098a2:	0003      	movs	r3, r0
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098a6:	e01b      	b.n	80098e0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a8:	4b3b      	ldr	r3, [pc, #236]	; (8009998 <UART_SetConfig+0x388>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2210      	movs	r2, #16
 80098ae:	4013      	ands	r3, r2
 80098b0:	d002      	beq.n	80098b8 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80098b2:	4b3d      	ldr	r3, [pc, #244]	; (80099a8 <UART_SetConfig+0x398>)
 80098b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80098b6:	e013      	b.n	80098e0 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80098b8:	4b3c      	ldr	r3, [pc, #240]	; (80099ac <UART_SetConfig+0x39c>)
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098bc:	e010      	b.n	80098e0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80098be:	f7fd fd75 	bl	80073ac <HAL_RCC_GetSysClockFreq>
 80098c2:	0003      	movs	r3, r0
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098c6:	e00b      	b.n	80098e0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098ce:	e007      	b.n	80098e0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80098d0:	2313      	movs	r3, #19
 80098d2:	2218      	movs	r2, #24
 80098d4:	4694      	mov	ip, r2
 80098d6:	44bc      	add	ip, r7
 80098d8:	4463      	add	r3, ip
 80098da:	2201      	movs	r2, #1
 80098dc:	701a      	strb	r2, [r3, #0]
        break;
 80098de:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d100      	bne.n	80098e8 <UART_SetConfig+0x2d8>
 80098e6:	e1a6      	b.n	8009c36 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	0013      	movs	r3, r2
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	189b      	adds	r3, r3, r2
 80098f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d305      	bcc.n	8009904 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009900:	429a      	cmp	r2, r3
 8009902:	d907      	bls.n	8009914 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8009904:	2313      	movs	r3, #19
 8009906:	2218      	movs	r2, #24
 8009908:	4694      	mov	ip, r2
 800990a:	44bc      	add	ip, r7
 800990c:	4463      	add	r3, ip
 800990e:	2201      	movs	r2, #1
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	e190      	b.n	8009c36 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	613b      	str	r3, [r7, #16]
 8009918:	2300      	movs	r3, #0
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	6939      	ldr	r1, [r7, #16]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	000b      	movs	r3, r1
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	0010      	movs	r0, r2
 8009926:	0205      	lsls	r5, r0, #8
 8009928:	431d      	orrs	r5, r3
 800992a:	000b      	movs	r3, r1
 800992c:	021c      	lsls	r4, r3, #8
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	085b      	lsrs	r3, r3, #1
 8009934:	60bb      	str	r3, [r7, #8]
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	68b8      	ldr	r0, [r7, #8]
 800993c:	68f9      	ldr	r1, [r7, #12]
 800993e:	1900      	adds	r0, r0, r4
 8009940:	4169      	adcs	r1, r5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f7f6 fde4 	bl	800051c <__aeabi_uldivmod>
 8009954:	0003      	movs	r3, r0
 8009956:	000c      	movs	r4, r1
 8009958:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	4a14      	ldr	r2, [pc, #80]	; (80099b0 <UART_SetConfig+0x3a0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d908      	bls.n	8009974 <UART_SetConfig+0x364>
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	4a13      	ldr	r2, [pc, #76]	; (80099b4 <UART_SetConfig+0x3a4>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d804      	bhi.n	8009974 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009970:	60da      	str	r2, [r3, #12]
 8009972:	e160      	b.n	8009c36 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8009974:	2313      	movs	r3, #19
 8009976:	2218      	movs	r2, #24
 8009978:	4694      	mov	ip, r2
 800997a:	44bc      	add	ip, r7
 800997c:	4463      	add	r3, ip
 800997e:	2201      	movs	r2, #1
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	e158      	b.n	8009c36 <UART_SetConfig+0x626>
 8009984:	efff69f3 	.word	0xefff69f3
 8009988:	ffffcfff 	.word	0xffffcfff
 800998c:	40004800 	.word	0x40004800
 8009990:	fffff4ff 	.word	0xfffff4ff
 8009994:	40013800 	.word	0x40013800
 8009998:	40021000 	.word	0x40021000
 800999c:	40004400 	.word	0x40004400
 80099a0:	40004c00 	.word	0x40004c00
 80099a4:	40005000 	.word	0x40005000
 80099a8:	003d0900 	.word	0x003d0900
 80099ac:	00f42400 	.word	0x00f42400
 80099b0:	000002ff 	.word	0x000002ff
 80099b4:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	69da      	ldr	r2, [r3, #28]
 80099bc:	2380      	movs	r3, #128	; 0x80
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d000      	beq.n	80099c6 <UART_SetConfig+0x3b6>
 80099c4:	e0a9      	b.n	8009b1a <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 80099c6:	231b      	movs	r3, #27
 80099c8:	2218      	movs	r2, #24
 80099ca:	4694      	mov	ip, r2
 80099cc:	44bc      	add	ip, r7
 80099ce:	4463      	add	r3, ip
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	d86d      	bhi.n	8009ab2 <UART_SetConfig+0x4a2>
 80099d6:	009a      	lsls	r2, r3, #2
 80099d8:	4b9f      	ldr	r3, [pc, #636]	; (8009c58 <UART_SetConfig+0x648>)
 80099da:	18d3      	adds	r3, r2, r3
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80099e0:	f7fd fd72 	bl	80074c8 <HAL_RCC_GetPCLK1Freq>
 80099e4:	0003      	movs	r3, r0
 80099e6:	005a      	lsls	r2, r3, #1
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	085b      	lsrs	r3, r3, #1
 80099ee:	18d2      	adds	r2, r2, r3
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	0019      	movs	r1, r3
 80099f6:	0010      	movs	r0, r2
 80099f8:	f7f6 fba2 	bl	8000140 <__udivsi3>
 80099fc:	0003      	movs	r3, r0
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a02:	e05e      	b.n	8009ac2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009a04:	f7fd fd76 	bl	80074f4 <HAL_RCC_GetPCLK2Freq>
 8009a08:	0003      	movs	r3, r0
 8009a0a:	005a      	lsls	r2, r3, #1
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	085b      	lsrs	r3, r3, #1
 8009a12:	18d2      	adds	r2, r2, r3
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	0019      	movs	r1, r3
 8009a1a:	0010      	movs	r0, r2
 8009a1c:	f7f6 fb90 	bl	8000140 <__udivsi3>
 8009a20:	0003      	movs	r3, r0
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a26:	e04c      	b.n	8009ac2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a28:	4b8c      	ldr	r3, [pc, #560]	; (8009c5c <UART_SetConfig+0x64c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2210      	movs	r2, #16
 8009a2e:	4013      	ands	r3, r2
 8009a30:	d00e      	beq.n	8009a50 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	085b      	lsrs	r3, r3, #1
 8009a38:	4a89      	ldr	r2, [pc, #548]	; (8009c60 <UART_SetConfig+0x650>)
 8009a3a:	189a      	adds	r2, r3, r2
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	0019      	movs	r1, r3
 8009a42:	0010      	movs	r0, r2
 8009a44:	f7f6 fb7c 	bl	8000140 <__udivsi3>
 8009a48:	0003      	movs	r3, r0
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8009a4e:	e038      	b.n	8009ac2 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	085b      	lsrs	r3, r3, #1
 8009a56:	4a83      	ldr	r2, [pc, #524]	; (8009c64 <UART_SetConfig+0x654>)
 8009a58:	189a      	adds	r2, r3, r2
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	0019      	movs	r1, r3
 8009a60:	0010      	movs	r0, r2
 8009a62:	f7f6 fb6d 	bl	8000140 <__udivsi3>
 8009a66:	0003      	movs	r3, r0
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a6c:	e029      	b.n	8009ac2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009a6e:	f7fd fc9d 	bl	80073ac <HAL_RCC_GetSysClockFreq>
 8009a72:	0003      	movs	r3, r0
 8009a74:	005a      	lsls	r2, r3, #1
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	085b      	lsrs	r3, r3, #1
 8009a7c:	18d2      	adds	r2, r2, r3
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	0019      	movs	r1, r3
 8009a84:	0010      	movs	r0, r2
 8009a86:	f7f6 fb5b 	bl	8000140 <__udivsi3>
 8009a8a:	0003      	movs	r3, r0
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a90:	e017      	b.n	8009ac2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	2280      	movs	r2, #128	; 0x80
 8009a9a:	0252      	lsls	r2, r2, #9
 8009a9c:	189a      	adds	r2, r3, r2
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	0019      	movs	r1, r3
 8009aa4:	0010      	movs	r0, r2
 8009aa6:	f7f6 fb4b 	bl	8000140 <__udivsi3>
 8009aaa:	0003      	movs	r3, r0
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ab0:	e007      	b.n	8009ac2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009ab2:	2313      	movs	r3, #19
 8009ab4:	2218      	movs	r2, #24
 8009ab6:	4694      	mov	ip, r2
 8009ab8:	44bc      	add	ip, r7
 8009aba:	4463      	add	r3, ip
 8009abc:	2201      	movs	r2, #1
 8009abe:	701a      	strb	r2, [r3, #0]
        break;
 8009ac0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	2b0f      	cmp	r3, #15
 8009ac6:	d920      	bls.n	8009b0a <UART_SetConfig+0x4fa>
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	4a67      	ldr	r2, [pc, #412]	; (8009c68 <UART_SetConfig+0x658>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d81c      	bhi.n	8009b0a <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	200a      	movs	r0, #10
 8009ad6:	2418      	movs	r4, #24
 8009ad8:	193b      	adds	r3, r7, r4
 8009ada:	181b      	adds	r3, r3, r0
 8009adc:	210f      	movs	r1, #15
 8009ade:	438a      	bics	r2, r1
 8009ae0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	085b      	lsrs	r3, r3, #1
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	2207      	movs	r2, #7
 8009aea:	4013      	ands	r3, r2
 8009aec:	b299      	uxth	r1, r3
 8009aee:	193b      	adds	r3, r7, r4
 8009af0:	181b      	adds	r3, r3, r0
 8009af2:	193a      	adds	r2, r7, r4
 8009af4:	1812      	adds	r2, r2, r0
 8009af6:	8812      	ldrh	r2, [r2, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	193a      	adds	r2, r7, r4
 8009b02:	1812      	adds	r2, r2, r0
 8009b04:	8812      	ldrh	r2, [r2, #0]
 8009b06:	60da      	str	r2, [r3, #12]
 8009b08:	e095      	b.n	8009c36 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8009b0a:	2313      	movs	r3, #19
 8009b0c:	2218      	movs	r2, #24
 8009b0e:	4694      	mov	ip, r2
 8009b10:	44bc      	add	ip, r7
 8009b12:	4463      	add	r3, ip
 8009b14:	2201      	movs	r2, #1
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e08d      	b.n	8009c36 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8009b1a:	231b      	movs	r3, #27
 8009b1c:	2218      	movs	r2, #24
 8009b1e:	4694      	mov	ip, r2
 8009b20:	44bc      	add	ip, r7
 8009b22:	4463      	add	r3, ip
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	d86a      	bhi.n	8009c00 <UART_SetConfig+0x5f0>
 8009b2a:	009a      	lsls	r2, r3, #2
 8009b2c:	4b4f      	ldr	r3, [pc, #316]	; (8009c6c <UART_SetConfig+0x65c>)
 8009b2e:	18d3      	adds	r3, r2, r3
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009b34:	f7fd fcc8 	bl	80074c8 <HAL_RCC_GetPCLK1Freq>
 8009b38:	0002      	movs	r2, r0
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	18d2      	adds	r2, r2, r3
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	0019      	movs	r1, r3
 8009b48:	0010      	movs	r0, r2
 8009b4a:	f7f6 faf9 	bl	8000140 <__udivsi3>
 8009b4e:	0003      	movs	r3, r0
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b54:	e05c      	b.n	8009c10 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009b56:	f7fd fccd 	bl	80074f4 <HAL_RCC_GetPCLK2Freq>
 8009b5a:	0002      	movs	r2, r0
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	085b      	lsrs	r3, r3, #1
 8009b62:	18d2      	adds	r2, r2, r3
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	0019      	movs	r1, r3
 8009b6a:	0010      	movs	r0, r2
 8009b6c:	f7f6 fae8 	bl	8000140 <__udivsi3>
 8009b70:	0003      	movs	r3, r0
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b76:	e04b      	b.n	8009c10 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b78:	4b38      	ldr	r3, [pc, #224]	; (8009c5c <UART_SetConfig+0x64c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2210      	movs	r2, #16
 8009b7e:	4013      	ands	r3, r2
 8009b80:	d00e      	beq.n	8009ba0 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	085b      	lsrs	r3, r3, #1
 8009b88:	4a39      	ldr	r2, [pc, #228]	; (8009c70 <UART_SetConfig+0x660>)
 8009b8a:	189a      	adds	r2, r3, r2
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	0019      	movs	r1, r3
 8009b92:	0010      	movs	r0, r2
 8009b94:	f7f6 fad4 	bl	8000140 <__udivsi3>
 8009b98:	0003      	movs	r3, r0
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8009b9e:	e037      	b.n	8009c10 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	085b      	lsrs	r3, r3, #1
 8009ba6:	4a33      	ldr	r2, [pc, #204]	; (8009c74 <UART_SetConfig+0x664>)
 8009ba8:	189a      	adds	r2, r3, r2
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	0019      	movs	r1, r3
 8009bb0:	0010      	movs	r0, r2
 8009bb2:	f7f6 fac5 	bl	8000140 <__udivsi3>
 8009bb6:	0003      	movs	r3, r0
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bbc:	e028      	b.n	8009c10 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009bbe:	f7fd fbf5 	bl	80073ac <HAL_RCC_GetSysClockFreq>
 8009bc2:	0002      	movs	r2, r0
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	085b      	lsrs	r3, r3, #1
 8009bca:	18d2      	adds	r2, r2, r3
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	0019      	movs	r1, r3
 8009bd2:	0010      	movs	r0, r2
 8009bd4:	f7f6 fab4 	bl	8000140 <__udivsi3>
 8009bd8:	0003      	movs	r3, r0
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bde:	e017      	b.n	8009c10 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	085b      	lsrs	r3, r3, #1
 8009be6:	2280      	movs	r2, #128	; 0x80
 8009be8:	0212      	lsls	r2, r2, #8
 8009bea:	189a      	adds	r2, r3, r2
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	0019      	movs	r1, r3
 8009bf2:	0010      	movs	r0, r2
 8009bf4:	f7f6 faa4 	bl	8000140 <__udivsi3>
 8009bf8:	0003      	movs	r3, r0
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bfe:	e007      	b.n	8009c10 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009c00:	2313      	movs	r3, #19
 8009c02:	2218      	movs	r2, #24
 8009c04:	4694      	mov	ip, r2
 8009c06:	44bc      	add	ip, r7
 8009c08:	4463      	add	r3, ip
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	701a      	strb	r2, [r3, #0]
        break;
 8009c0e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	2b0f      	cmp	r3, #15
 8009c14:	d908      	bls.n	8009c28 <UART_SetConfig+0x618>
 8009c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c18:	4a13      	ldr	r2, [pc, #76]	; (8009c68 <UART_SetConfig+0x658>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d804      	bhi.n	8009c28 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c24:	60da      	str	r2, [r3, #12]
 8009c26:	e006      	b.n	8009c36 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8009c28:	2313      	movs	r3, #19
 8009c2a:	2218      	movs	r2, #24
 8009c2c:	4694      	mov	ip, r2
 8009c2e:	44bc      	add	ip, r7
 8009c30:	4463      	add	r3, ip
 8009c32:	2201      	movs	r2, #1
 8009c34:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009c42:	2313      	movs	r3, #19
 8009c44:	2218      	movs	r2, #24
 8009c46:	4694      	mov	ip, r2
 8009c48:	44bc      	add	ip, r7
 8009c4a:	4463      	add	r3, ip
 8009c4c:	781b      	ldrb	r3, [r3, #0]
}
 8009c4e:	0018      	movs	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	b00e      	add	sp, #56	; 0x38
 8009c54:	bdb0      	pop	{r4, r5, r7, pc}
 8009c56:	46c0      	nop			; (mov r8, r8)
 8009c58:	0800e980 	.word	0x0800e980
 8009c5c:	40021000 	.word	0x40021000
 8009c60:	007a1200 	.word	0x007a1200
 8009c64:	01e84800 	.word	0x01e84800
 8009c68:	0000ffff 	.word	0x0000ffff
 8009c6c:	0800e9a4 	.word	0x0800e9a4
 8009c70:	003d0900 	.word	0x003d0900
 8009c74:	00f42400 	.word	0x00f42400

08009c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	2201      	movs	r2, #1
 8009c86:	4013      	ands	r3, r2
 8009c88:	d00b      	beq.n	8009ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	4a4a      	ldr	r2, [pc, #296]	; (8009dbc <UART_AdvFeatureConfig+0x144>)
 8009c92:	4013      	ands	r3, r2
 8009c94:	0019      	movs	r1, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	4013      	ands	r3, r2
 8009caa:	d00b      	beq.n	8009cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	4a43      	ldr	r2, [pc, #268]	; (8009dc0 <UART_AdvFeatureConfig+0x148>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	0019      	movs	r1, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	2204      	movs	r2, #4
 8009cca:	4013      	ands	r3, r2
 8009ccc:	d00b      	beq.n	8009ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	4a3b      	ldr	r2, [pc, #236]	; (8009dc4 <UART_AdvFeatureConfig+0x14c>)
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	0019      	movs	r1, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cea:	2208      	movs	r2, #8
 8009cec:	4013      	ands	r3, r2
 8009cee:	d00b      	beq.n	8009d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	4a34      	ldr	r2, [pc, #208]	; (8009dc8 <UART_AdvFeatureConfig+0x150>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	0019      	movs	r1, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	4013      	ands	r3, r2
 8009d10:	d00b      	beq.n	8009d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	4a2c      	ldr	r2, [pc, #176]	; (8009dcc <UART_AdvFeatureConfig+0x154>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	0019      	movs	r1, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2220      	movs	r2, #32
 8009d30:	4013      	ands	r3, r2
 8009d32:	d00b      	beq.n	8009d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	4a25      	ldr	r2, [pc, #148]	; (8009dd0 <UART_AdvFeatureConfig+0x158>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	0019      	movs	r1, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2240      	movs	r2, #64	; 0x40
 8009d52:	4013      	ands	r3, r2
 8009d54:	d01d      	beq.n	8009d92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	4a1d      	ldr	r2, [pc, #116]	; (8009dd4 <UART_AdvFeatureConfig+0x15c>)
 8009d5e:	4013      	ands	r3, r2
 8009d60:	0019      	movs	r1, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d72:	2380      	movs	r3, #128	; 0x80
 8009d74:	035b      	lsls	r3, r3, #13
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d10b      	bne.n	8009d92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a15      	ldr	r2, [pc, #84]	; (8009dd8 <UART_AdvFeatureConfig+0x160>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	0019      	movs	r1, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	2280      	movs	r2, #128	; 0x80
 8009d98:	4013      	ands	r3, r2
 8009d9a:	d00b      	beq.n	8009db4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4a0e      	ldr	r2, [pc, #56]	; (8009ddc <UART_AdvFeatureConfig+0x164>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	0019      	movs	r1, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	605a      	str	r2, [r3, #4]
  }
}
 8009db4:	46c0      	nop			; (mov r8, r8)
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b002      	add	sp, #8
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	fffdffff 	.word	0xfffdffff
 8009dc0:	fffeffff 	.word	0xfffeffff
 8009dc4:	fffbffff 	.word	0xfffbffff
 8009dc8:	ffff7fff 	.word	0xffff7fff
 8009dcc:	ffffefff 	.word	0xffffefff
 8009dd0:	ffffdfff 	.word	0xffffdfff
 8009dd4:	ffefffff 	.word	0xffefffff
 8009dd8:	ff9fffff 	.word	0xff9fffff
 8009ddc:	fff7ffff 	.word	0xfff7ffff

08009de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009dee:	f7fb fc35 	bl	800565c <HAL_GetTick>
 8009df2:	0003      	movs	r3, r0
 8009df4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2208      	movs	r2, #8
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	d10d      	bne.n	8009e20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	2380      	movs	r3, #128	; 0x80
 8009e08:	0399      	lsls	r1, r3, #14
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	4b16      	ldr	r3, [pc, #88]	; (8009e68 <UART_CheckIdleState+0x88>)
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	0013      	movs	r3, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	f000 f82a 	bl	8009e6c <UART_WaitOnFlagUntilTimeout>
 8009e18:	1e03      	subs	r3, r0, #0
 8009e1a:	d001      	beq.n	8009e20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e01f      	b.n	8009e60 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2204      	movs	r2, #4
 8009e28:	4013      	ands	r3, r2
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	d10d      	bne.n	8009e4a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	03d9      	lsls	r1, r3, #15
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <UART_CheckIdleState+0x88>)
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	0013      	movs	r3, r2
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f000 f815 	bl	8009e6c <UART_WaitOnFlagUntilTimeout>
 8009e42:	1e03      	subs	r3, r0, #0
 8009e44:	d001      	beq.n	8009e4a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e00a      	b.n	8009e60 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2220      	movs	r2, #32
 8009e54:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2270      	movs	r2, #112	; 0x70
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	0018      	movs	r0, r3
 8009e62:	46bd      	mov	sp, r7
 8009e64:	b004      	add	sp, #16
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	01ffffff 	.word	0x01ffffff

08009e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	603b      	str	r3, [r7, #0]
 8009e78:	1dfb      	adds	r3, r7, #7
 8009e7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e7c:	e029      	b.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	3301      	adds	r3, #1
 8009e82:	d026      	beq.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e84:	f7fb fbea 	bl	800565c <HAL_GetTick>
 8009e88:	0002      	movs	r2, r0
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d302      	bcc.n	8009e9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d11b      	bne.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4915      	ldr	r1, [pc, #84]	; (8009efc <UART_WaitOnFlagUntilTimeout+0x90>)
 8009ea6:	400a      	ands	r2, r1
 8009ea8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	438a      	bics	r2, r1
 8009eb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2220      	movs	r2, #32
 8009ebe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2270      	movs	r2, #112	; 0x70
 8009eca:	2100      	movs	r1, #0
 8009ecc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e00f      	b.n	8009ef2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	4013      	ands	r3, r2
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	425a      	negs	r2, r3
 8009ee2:	4153      	adcs	r3, r2
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	001a      	movs	r2, r3
 8009ee8:	1dfb      	adds	r3, r7, #7
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d0c6      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b004      	add	sp, #16
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	fffffe5f 	.word	0xfffffe5f

08009f00 <calloc>:
 8009f00:	b510      	push	{r4, lr}
 8009f02:	4b03      	ldr	r3, [pc, #12]	; (8009f10 <calloc+0x10>)
 8009f04:	000a      	movs	r2, r1
 8009f06:	0001      	movs	r1, r0
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	f000 fac5 	bl	800a498 <_calloc_r>
 8009f0e:	bd10      	pop	{r4, pc}
 8009f10:	20000010 	.word	0x20000010

08009f14 <__errno>:
 8009f14:	4b01      	ldr	r3, [pc, #4]	; (8009f1c <__errno+0x8>)
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	4770      	bx	lr
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	20000010 	.word	0x20000010

08009f20 <__libc_init_array>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	2600      	movs	r6, #0
 8009f24:	4d0c      	ldr	r5, [pc, #48]	; (8009f58 <__libc_init_array+0x38>)
 8009f26:	4c0d      	ldr	r4, [pc, #52]	; (8009f5c <__libc_init_array+0x3c>)
 8009f28:	1b64      	subs	r4, r4, r5
 8009f2a:	10a4      	asrs	r4, r4, #2
 8009f2c:	42a6      	cmp	r6, r4
 8009f2e:	d109      	bne.n	8009f44 <__libc_init_array+0x24>
 8009f30:	2600      	movs	r6, #0
 8009f32:	f004 fb6f 	bl	800e614 <_init>
 8009f36:	4d0a      	ldr	r5, [pc, #40]	; (8009f60 <__libc_init_array+0x40>)
 8009f38:	4c0a      	ldr	r4, [pc, #40]	; (8009f64 <__libc_init_array+0x44>)
 8009f3a:	1b64      	subs	r4, r4, r5
 8009f3c:	10a4      	asrs	r4, r4, #2
 8009f3e:	42a6      	cmp	r6, r4
 8009f40:	d105      	bne.n	8009f4e <__libc_init_array+0x2e>
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	00b3      	lsls	r3, r6, #2
 8009f46:	58eb      	ldr	r3, [r5, r3]
 8009f48:	4798      	blx	r3
 8009f4a:	3601      	adds	r6, #1
 8009f4c:	e7ee      	b.n	8009f2c <__libc_init_array+0xc>
 8009f4e:	00b3      	lsls	r3, r6, #2
 8009f50:	58eb      	ldr	r3, [r5, r3]
 8009f52:	4798      	blx	r3
 8009f54:	3601      	adds	r6, #1
 8009f56:	e7f2      	b.n	8009f3e <__libc_init_array+0x1e>
 8009f58:	0800ede8 	.word	0x0800ede8
 8009f5c:	0800ede8 	.word	0x0800ede8
 8009f60:	0800ede8 	.word	0x0800ede8
 8009f64:	0800edec 	.word	0x0800edec

08009f68 <memcpy>:
 8009f68:	2300      	movs	r3, #0
 8009f6a:	b510      	push	{r4, lr}
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d100      	bne.n	8009f72 <memcpy+0xa>
 8009f70:	bd10      	pop	{r4, pc}
 8009f72:	5ccc      	ldrb	r4, [r1, r3]
 8009f74:	54c4      	strb	r4, [r0, r3]
 8009f76:	3301      	adds	r3, #1
 8009f78:	e7f8      	b.n	8009f6c <memcpy+0x4>

08009f7a <memset>:
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	1812      	adds	r2, r2, r0
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d100      	bne.n	8009f84 <memset+0xa>
 8009f82:	4770      	bx	lr
 8009f84:	7019      	strb	r1, [r3, #0]
 8009f86:	3301      	adds	r3, #1
 8009f88:	e7f9      	b.n	8009f7e <memset+0x4>
	...

08009f8c <validate_structure>:
 8009f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f8e:	6801      	ldr	r1, [r0, #0]
 8009f90:	0004      	movs	r4, r0
 8009f92:	293b      	cmp	r1, #59	; 0x3b
 8009f94:	d90b      	bls.n	8009fae <validate_structure+0x22>
 8009f96:	223c      	movs	r2, #60	; 0x3c
 8009f98:	4668      	mov	r0, sp
 8009f9a:	f001 f9cb 	bl	800b334 <div>
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	9900      	ldr	r1, [sp, #0]
 8009fa2:	9a01      	ldr	r2, [sp, #4]
 8009fa4:	185b      	adds	r3, r3, r1
 8009fa6:	6063      	str	r3, [r4, #4]
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	db51      	blt.n	800a050 <validate_structure+0xc4>
 8009fac:	6022      	str	r2, [r4, #0]
 8009fae:	6861      	ldr	r1, [r4, #4]
 8009fb0:	293b      	cmp	r1, #59	; 0x3b
 8009fb2:	d90b      	bls.n	8009fcc <validate_structure+0x40>
 8009fb4:	223c      	movs	r2, #60	; 0x3c
 8009fb6:	4668      	mov	r0, sp
 8009fb8:	f001 f9bc 	bl	800b334 <div>
 8009fbc:	68a3      	ldr	r3, [r4, #8]
 8009fbe:	9900      	ldr	r1, [sp, #0]
 8009fc0:	9a01      	ldr	r2, [sp, #4]
 8009fc2:	185b      	adds	r3, r3, r1
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	db47      	blt.n	800a05a <validate_structure+0xce>
 8009fca:	6062      	str	r2, [r4, #4]
 8009fcc:	68a1      	ldr	r1, [r4, #8]
 8009fce:	2917      	cmp	r1, #23
 8009fd0:	d90b      	bls.n	8009fea <validate_structure+0x5e>
 8009fd2:	2218      	movs	r2, #24
 8009fd4:	4668      	mov	r0, sp
 8009fd6:	f001 f9ad 	bl	800b334 <div>
 8009fda:	68e3      	ldr	r3, [r4, #12]
 8009fdc:	9900      	ldr	r1, [sp, #0]
 8009fde:	9a01      	ldr	r2, [sp, #4]
 8009fe0:	185b      	adds	r3, r3, r1
 8009fe2:	60e3      	str	r3, [r4, #12]
 8009fe4:	2a00      	cmp	r2, #0
 8009fe6:	db3d      	blt.n	800a064 <validate_structure+0xd8>
 8009fe8:	60a2      	str	r2, [r4, #8]
 8009fea:	6921      	ldr	r1, [r4, #16]
 8009fec:	290b      	cmp	r1, #11
 8009fee:	d90b      	bls.n	800a008 <validate_structure+0x7c>
 8009ff0:	220c      	movs	r2, #12
 8009ff2:	4668      	mov	r0, sp
 8009ff4:	f001 f99e 	bl	800b334 <div>
 8009ff8:	6963      	ldr	r3, [r4, #20]
 8009ffa:	9900      	ldr	r1, [sp, #0]
 8009ffc:	9a01      	ldr	r2, [sp, #4]
 8009ffe:	185b      	adds	r3, r3, r1
 800a000:	6163      	str	r3, [r4, #20]
 800a002:	2a00      	cmp	r2, #0
 800a004:	db33      	blt.n	800a06e <validate_structure+0xe2>
 800a006:	6122      	str	r2, [r4, #16]
 800a008:	6965      	ldr	r5, [r4, #20]
 800a00a:	231c      	movs	r3, #28
 800a00c:	07aa      	lsls	r2, r5, #30
 800a00e:	d10f      	bne.n	800a030 <validate_structure+0xa4>
 800a010:	2164      	movs	r1, #100	; 0x64
 800a012:	0028      	movs	r0, r5
 800a014:	f7f6 fa04 	bl	8000420 <__aeabi_idivmod>
 800a018:	231d      	movs	r3, #29
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d108      	bne.n	800a030 <validate_structure+0xa4>
 800a01e:	4b3c      	ldr	r3, [pc, #240]	; (800a110 <validate_structure+0x184>)
 800a020:	3191      	adds	r1, #145	; 0x91
 800a022:	18e8      	adds	r0, r5, r3
 800a024:	31ff      	adds	r1, #255	; 0xff
 800a026:	f7f6 f9fb 	bl	8000420 <__aeabi_idivmod>
 800a02a:	424b      	negs	r3, r1
 800a02c:	414b      	adcs	r3, r1
 800a02e:	331c      	adds	r3, #28
 800a030:	68e2      	ldr	r2, [r4, #12]
 800a032:	271d      	movs	r7, #29
 800a034:	2a00      	cmp	r2, #0
 800a036:	dd45      	ble.n	800a0c4 <validate_structure+0x138>
 800a038:	2603      	movs	r6, #3
 800a03a:	271c      	movs	r7, #28
 800a03c:	6922      	ldr	r2, [r4, #16]
 800a03e:	68e1      	ldr	r1, [r4, #12]
 800a040:	2a01      	cmp	r2, #1
 800a042:	d043      	beq.n	800a0cc <validate_structure+0x140>
 800a044:	4d33      	ldr	r5, [pc, #204]	; (800a114 <validate_structure+0x188>)
 800a046:	0090      	lsls	r0, r2, #2
 800a048:	5940      	ldr	r0, [r0, r5]
 800a04a:	4281      	cmp	r1, r0
 800a04c:	dc41      	bgt.n	800a0d2 <validate_structure+0x146>
 800a04e:	e03c      	b.n	800a0ca <validate_structure+0x13e>
 800a050:	323c      	adds	r2, #60	; 0x3c
 800a052:	3b01      	subs	r3, #1
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	6063      	str	r3, [r4, #4]
 800a058:	e7a9      	b.n	8009fae <validate_structure+0x22>
 800a05a:	323c      	adds	r2, #60	; 0x3c
 800a05c:	3b01      	subs	r3, #1
 800a05e:	6062      	str	r2, [r4, #4]
 800a060:	60a3      	str	r3, [r4, #8]
 800a062:	e7b3      	b.n	8009fcc <validate_structure+0x40>
 800a064:	3218      	adds	r2, #24
 800a066:	3b01      	subs	r3, #1
 800a068:	60a2      	str	r2, [r4, #8]
 800a06a:	60e3      	str	r3, [r4, #12]
 800a06c:	e7bd      	b.n	8009fea <validate_structure+0x5e>
 800a06e:	320c      	adds	r2, #12
 800a070:	3b01      	subs	r3, #1
 800a072:	6122      	str	r2, [r4, #16]
 800a074:	6163      	str	r3, [r4, #20]
 800a076:	e7c7      	b.n	800a008 <validate_structure+0x7c>
 800a078:	6922      	ldr	r2, [r4, #16]
 800a07a:	3a01      	subs	r2, #1
 800a07c:	6122      	str	r2, [r4, #16]
 800a07e:	3201      	adds	r2, #1
 800a080:	d117      	bne.n	800a0b2 <validate_structure+0x126>
 800a082:	230b      	movs	r3, #11
 800a084:	2203      	movs	r2, #3
 800a086:	6965      	ldr	r5, [r4, #20]
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	1e68      	subs	r0, r5, #1
 800a08c:	6160      	str	r0, [r4, #20]
 800a08e:	3311      	adds	r3, #17
 800a090:	4210      	tst	r0, r2
 800a092:	d10e      	bne.n	800a0b2 <validate_structure+0x126>
 800a094:	2164      	movs	r1, #100	; 0x64
 800a096:	f7f6 f9c3 	bl	8000420 <__aeabi_idivmod>
 800a09a:	003b      	movs	r3, r7
 800a09c:	2900      	cmp	r1, #0
 800a09e:	d108      	bne.n	800a0b2 <validate_structure+0x126>
 800a0a0:	4b1d      	ldr	r3, [pc, #116]	; (800a118 <validate_structure+0x18c>)
 800a0a2:	3191      	adds	r1, #145	; 0x91
 800a0a4:	18e8      	adds	r0, r5, r3
 800a0a6:	31ff      	adds	r1, #255	; 0xff
 800a0a8:	f7f6 f9ba 	bl	8000420 <__aeabi_idivmod>
 800a0ac:	424b      	negs	r3, r1
 800a0ae:	414b      	adcs	r3, r1
 800a0b0:	331c      	adds	r3, #28
 800a0b2:	6921      	ldr	r1, [r4, #16]
 800a0b4:	001a      	movs	r2, r3
 800a0b6:	2901      	cmp	r1, #1
 800a0b8:	d002      	beq.n	800a0c0 <validate_structure+0x134>
 800a0ba:	4a16      	ldr	r2, [pc, #88]	; (800a114 <validate_structure+0x188>)
 800a0bc:	0089      	lsls	r1, r1, #2
 800a0be:	588a      	ldr	r2, [r1, r2]
 800a0c0:	18b6      	adds	r6, r6, r2
 800a0c2:	60e6      	str	r6, [r4, #12]
 800a0c4:	68e6      	ldr	r6, [r4, #12]
 800a0c6:	2e00      	cmp	r6, #0
 800a0c8:	ddd6      	ble.n	800a078 <validate_structure+0xec>
 800a0ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a0cc:	428b      	cmp	r3, r1
 800a0ce:	dafc      	bge.n	800a0ca <validate_structure+0x13e>
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	1a09      	subs	r1, r1, r0
 800a0d4:	3201      	adds	r2, #1
 800a0d6:	60e1      	str	r1, [r4, #12]
 800a0d8:	6122      	str	r2, [r4, #16]
 800a0da:	2a0c      	cmp	r2, #12
 800a0dc:	d1ae      	bne.n	800a03c <validate_structure+0xb0>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	6965      	ldr	r5, [r4, #20]
 800a0e2:	6123      	str	r3, [r4, #16]
 800a0e4:	1c68      	adds	r0, r5, #1
 800a0e6:	6160      	str	r0, [r4, #20]
 800a0e8:	003b      	movs	r3, r7
 800a0ea:	4230      	tst	r0, r6
 800a0ec:	d1a6      	bne.n	800a03c <validate_structure+0xb0>
 800a0ee:	2164      	movs	r1, #100	; 0x64
 800a0f0:	f7f6 f996 	bl	8000420 <__aeabi_idivmod>
 800a0f4:	231d      	movs	r3, #29
 800a0f6:	2900      	cmp	r1, #0
 800a0f8:	d1a0      	bne.n	800a03c <validate_structure+0xb0>
 800a0fa:	4b08      	ldr	r3, [pc, #32]	; (800a11c <validate_structure+0x190>)
 800a0fc:	3191      	adds	r1, #145	; 0x91
 800a0fe:	18e8      	adds	r0, r5, r3
 800a100:	31ff      	adds	r1, #255	; 0xff
 800a102:	f7f6 f98d 	bl	8000420 <__aeabi_idivmod>
 800a106:	424b      	negs	r3, r1
 800a108:	414b      	adcs	r3, r1
 800a10a:	331c      	adds	r3, #28
 800a10c:	e796      	b.n	800a03c <validate_structure+0xb0>
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	0000076c 	.word	0x0000076c
 800a114:	0800e9c8 	.word	0x0800e9c8
 800a118:	0000076b 	.word	0x0000076b
 800a11c:	0000076d 	.word	0x0000076d

0800a120 <mktime>:
 800a120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a122:	b08b      	sub	sp, #44	; 0x2c
 800a124:	0004      	movs	r4, r0
 800a126:	f001 ffd7 	bl	800c0d8 <__gettzinfo>
 800a12a:	0007      	movs	r7, r0
 800a12c:	0020      	movs	r0, r4
 800a12e:	f7ff ff2d 	bl	8009f8c <validate_structure>
 800a132:	233c      	movs	r3, #60	; 0x3c
 800a134:	6862      	ldr	r2, [r4, #4]
 800a136:	68a1      	ldr	r1, [r4, #8]
 800a138:	4353      	muls	r3, r2
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	189b      	adds	r3, r3, r2
 800a13e:	22e1      	movs	r2, #225	; 0xe1
 800a140:	0112      	lsls	r2, r2, #4
 800a142:	434a      	muls	r2, r1
 800a144:	189b      	adds	r3, r3, r2
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	68e2      	ldr	r2, [r4, #12]
 800a14a:	17db      	asrs	r3, r3, #31
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	6923      	ldr	r3, [r4, #16]
 800a150:	1e50      	subs	r0, r2, #1
 800a152:	4ab5      	ldr	r2, [pc, #724]	; (800a428 <mktime+0x308>)
 800a154:	0099      	lsls	r1, r3, #2
 800a156:	588a      	ldr	r2, [r1, r2]
 800a158:	1882      	adds	r2, r0, r2
 800a15a:	9204      	str	r2, [sp, #16]
 800a15c:	6962      	ldr	r2, [r4, #20]
 800a15e:	9203      	str	r2, [sp, #12]
 800a160:	2b01      	cmp	r3, #1
 800a162:	dd14      	ble.n	800a18e <mktime+0x6e>
 800a164:	0013      	movs	r3, r2
 800a166:	079b      	lsls	r3, r3, #30
 800a168:	d111      	bne.n	800a18e <mktime+0x6e>
 800a16a:	2164      	movs	r1, #100	; 0x64
 800a16c:	0010      	movs	r0, r2
 800a16e:	f7f6 f957 	bl	8000420 <__aeabi_idivmod>
 800a172:	2900      	cmp	r1, #0
 800a174:	d108      	bne.n	800a188 <mktime+0x68>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	4aac      	ldr	r2, [pc, #688]	; (800a42c <mktime+0x30c>)
 800a17a:	3191      	adds	r1, #145	; 0x91
 800a17c:	31ff      	adds	r1, #255	; 0xff
 800a17e:	1898      	adds	r0, r3, r2
 800a180:	f7f6 f94e 	bl	8000420 <__aeabi_idivmod>
 800a184:	2900      	cmp	r1, #0
 800a186:	d102      	bne.n	800a18e <mktime+0x6e>
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	3301      	adds	r3, #1
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	49a7      	ldr	r1, [pc, #668]	; (800a430 <mktime+0x310>)
 800a192:	61e3      	str	r3, [r4, #28]
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	4aa7      	ldr	r2, [pc, #668]	; (800a434 <mktime+0x314>)
 800a198:	185b      	adds	r3, r3, r1
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d900      	bls.n	800a1a0 <mktime+0x80>
 800a19e:	e174      	b.n	800a48a <mktime+0x36a>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	2b46      	cmp	r3, #70	; 0x46
 800a1a4:	dc00      	bgt.n	800a1a8 <mktime+0x88>
 800a1a6:	e088      	b.n	800a2ba <mktime+0x19a>
 800a1a8:	26c8      	movs	r6, #200	; 0xc8
 800a1aa:	2546      	movs	r5, #70	; 0x46
 800a1ac:	0076      	lsls	r6, r6, #1
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	421d      	tst	r5, r3
 800a1b2:	d000      	beq.n	800a1b6 <mktime+0x96>
 800a1b4:	e07f      	b.n	800a2b6 <mktime+0x196>
 800a1b6:	2164      	movs	r1, #100	; 0x64
 800a1b8:	0028      	movs	r0, r5
 800a1ba:	f7f6 f931 	bl	8000420 <__aeabi_idivmod>
 800a1be:	23b7      	movs	r3, #183	; 0xb7
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	d108      	bne.n	800a1d8 <mktime+0xb8>
 800a1c6:	4b99      	ldr	r3, [pc, #612]	; (800a42c <mktime+0x30c>)
 800a1c8:	0031      	movs	r1, r6
 800a1ca:	18e8      	adds	r0, r5, r3
 800a1cc:	f7f6 f928 	bl	8000420 <__aeabi_idivmod>
 800a1d0:	424b      	negs	r3, r1
 800a1d2:	414b      	adcs	r3, r1
 800a1d4:	336e      	adds	r3, #110	; 0x6e
 800a1d6:	33ff      	adds	r3, #255	; 0xff
 800a1d8:	9a04      	ldr	r2, [sp, #16]
 800a1da:	3501      	adds	r5, #1
 800a1dc:	18d3      	adds	r3, r2, r3
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	42ab      	cmp	r3, r5
 800a1e4:	d1e3      	bne.n	800a1ae <mktime+0x8e>
 800a1e6:	9a04      	ldr	r2, [sp, #16]
 800a1e8:	4b93      	ldr	r3, [pc, #588]	; (800a438 <mktime+0x318>)
 800a1ea:	4353      	muls	r3, r2
 800a1ec:	0018      	movs	r0, r3
 800a1ee:	17d9      	asrs	r1, r3, #31
 800a1f0:	9a00      	ldr	r2, [sp, #0]
 800a1f2:	9b01      	ldr	r3, [sp, #4]
 800a1f4:	1812      	adds	r2, r2, r0
 800a1f6:	414b      	adcs	r3, r1
 800a1f8:	9200      	str	r2, [sp, #0]
 800a1fa:	9301      	str	r3, [sp, #4]
 800a1fc:	f000 ff12 	bl	800b024 <__tz_lock>
 800a200:	f000 ff12 	bl	800b028 <_tzset_unlocked>
 800a204:	4b8d      	ldr	r3, [pc, #564]	; (800a43c <mktime+0x31c>)
 800a206:	681d      	ldr	r5, [r3, #0]
 800a208:	2d00      	cmp	r5, #0
 800a20a:	d04c      	beq.n	800a2a6 <mktime+0x186>
 800a20c:	6963      	ldr	r3, [r4, #20]
 800a20e:	4a87      	ldr	r2, [pc, #540]	; (800a42c <mktime+0x30c>)
 800a210:	1898      	adds	r0, r3, r2
 800a212:	6a23      	ldr	r3, [r4, #32]
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	9308      	str	r3, [sp, #32]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dd01      	ble.n	800a220 <mktime+0x100>
 800a21c:	2301      	movs	r3, #1
 800a21e:	9308      	str	r3, [sp, #32]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4283      	cmp	r3, r0
 800a224:	d000      	beq.n	800a228 <mktime+0x108>
 800a226:	e089      	b.n	800a33c <mktime+0x21c>
 800a228:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a22a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a22c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a22e:	0002      	movs	r2, r0
 800a230:	9309      	str	r3, [sp, #36]	; 0x24
 800a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a234:	9306      	str	r3, [sp, #24]
 800a236:	17db      	asrs	r3, r3, #31
 800a238:	9307      	str	r3, [sp, #28]
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	001d      	movs	r5, r3
 800a23e:	17de      	asrs	r6, r3, #31
 800a240:	469c      	mov	ip, r3
 800a242:	000b      	movs	r3, r1
 800a244:	1b52      	subs	r2, r2, r5
 800a246:	41b3      	sbcs	r3, r6
 800a248:	001e      	movs	r6, r3
 800a24a:	9b01      	ldr	r3, [sp, #4]
 800a24c:	0015      	movs	r5, r2
 800a24e:	429e      	cmp	r6, r3
 800a250:	dc0e      	bgt.n	800a270 <mktime+0x150>
 800a252:	d102      	bne.n	800a25a <mktime+0x13a>
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	429d      	cmp	r5, r3
 800a258:	d80a      	bhi.n	800a270 <mktime+0x150>
 800a25a:	9a06      	ldr	r2, [sp, #24]
 800a25c:	9b07      	ldr	r3, [sp, #28]
 800a25e:	1a80      	subs	r0, r0, r2
 800a260:	4199      	sbcs	r1, r3
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	4299      	cmp	r1, r3
 800a266:	dc6e      	bgt.n	800a346 <mktime+0x226>
 800a268:	d102      	bne.n	800a270 <mktime+0x150>
 800a26a:	9b00      	ldr	r3, [sp, #0]
 800a26c:	4298      	cmp	r0, r3
 800a26e:	d86a      	bhi.n	800a346 <mktime+0x226>
 800a270:	9806      	ldr	r0, [sp, #24]
 800a272:	9907      	ldr	r1, [sp, #28]
 800a274:	6a3a      	ldr	r2, [r7, #32]
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	1a12      	subs	r2, r2, r0
 800a27a:	418b      	sbcs	r3, r1
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	2900      	cmp	r1, #0
 800a280:	d063      	beq.n	800a34a <mktime+0x22a>
 800a282:	9901      	ldr	r1, [sp, #4]
 800a284:	428b      	cmp	r3, r1
 800a286:	dc0a      	bgt.n	800a29e <mktime+0x17e>
 800a288:	d102      	bne.n	800a290 <mktime+0x170>
 800a28a:	9900      	ldr	r1, [sp, #0]
 800a28c:	428a      	cmp	r2, r1
 800a28e:	d806      	bhi.n	800a29e <mktime+0x17e>
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	429e      	cmp	r6, r3
 800a294:	dc60      	bgt.n	800a358 <mktime+0x238>
 800a296:	d102      	bne.n	800a29e <mktime+0x17e>
 800a298:	9b00      	ldr	r3, [sp, #0]
 800a29a:	429d      	cmp	r5, r3
 800a29c:	d85c      	bhi.n	800a358 <mktime+0x238>
 800a29e:	9b05      	ldr	r3, [sp, #20]
 800a2a0:	2500      	movs	r5, #0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	da5c      	bge.n	800a360 <mktime+0x240>
 800a2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a8:	001e      	movs	r6, r3
 800a2aa:	17df      	asrs	r7, r3, #31
 800a2ac:	9a00      	ldr	r2, [sp, #0]
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	18b6      	adds	r6, r6, r2
 800a2b2:	415f      	adcs	r7, r3
 800a2b4:	e0a6      	b.n	800a404 <mktime+0x2e4>
 800a2b6:	236e      	movs	r3, #110	; 0x6e
 800a2b8:	e78d      	b.n	800a1d6 <mktime+0xb6>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	2b46      	cmp	r3, #70	; 0x46
 800a2be:	d092      	beq.n	800a1e6 <mktime+0xc6>
 800a2c0:	26c8      	movs	r6, #200	; 0xc8
 800a2c2:	2545      	movs	r5, #69	; 0x45
 800a2c4:	0076      	lsls	r6, r6, #1
 800a2c6:	e016      	b.n	800a2f6 <mktime+0x1d6>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d130      	bne.n	800a32e <mktime+0x20e>
 800a2cc:	2164      	movs	r1, #100	; 0x64
 800a2ce:	0028      	movs	r0, r5
 800a2d0:	f7f6 f8a6 	bl	8000420 <__aeabi_idivmod>
 800a2d4:	23b7      	movs	r3, #183	; 0xb7
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	2900      	cmp	r1, #0
 800a2da:	d108      	bne.n	800a2ee <mktime+0x1ce>
 800a2dc:	4b53      	ldr	r3, [pc, #332]	; (800a42c <mktime+0x30c>)
 800a2de:	0031      	movs	r1, r6
 800a2e0:	18e8      	adds	r0, r5, r3
 800a2e2:	f7f6 f89d 	bl	8000420 <__aeabi_idivmod>
 800a2e6:	424b      	negs	r3, r1
 800a2e8:	414b      	adcs	r3, r1
 800a2ea:	336e      	adds	r3, #110	; 0x6e
 800a2ec:	33ff      	adds	r3, #255	; 0xff
 800a2ee:	9a04      	ldr	r2, [sp, #16]
 800a2f0:	3d01      	subs	r5, #1
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	9304      	str	r3, [sp, #16]
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	9a03      	ldr	r2, [sp, #12]
 800a2fa:	402b      	ands	r3, r5
 800a2fc:	42aa      	cmp	r2, r5
 800a2fe:	dbe3      	blt.n	800a2c8 <mktime+0x1a8>
 800a300:	2b00      	cmp	r3, #0
 800a302:	d116      	bne.n	800a332 <mktime+0x212>
 800a304:	2164      	movs	r1, #100	; 0x64
 800a306:	0010      	movs	r0, r2
 800a308:	f7f6 f88a 	bl	8000420 <__aeabi_idivmod>
 800a30c:	2900      	cmp	r1, #0
 800a30e:	d112      	bne.n	800a336 <mktime+0x216>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	4a46      	ldr	r2, [pc, #280]	; (800a42c <mktime+0x30c>)
 800a314:	3191      	adds	r1, #145	; 0x91
 800a316:	1898      	adds	r0, r3, r2
 800a318:	31ff      	adds	r1, #255	; 0xff
 800a31a:	f7f6 f881 	bl	8000420 <__aeabi_idivmod>
 800a31e:	424b      	negs	r3, r1
 800a320:	4159      	adcs	r1, r3
 800a322:	316e      	adds	r1, #110	; 0x6e
 800a324:	31ff      	adds	r1, #255	; 0xff
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	1a5b      	subs	r3, r3, r1
 800a32a:	9304      	str	r3, [sp, #16]
 800a32c:	e75b      	b.n	800a1e6 <mktime+0xc6>
 800a32e:	236e      	movs	r3, #110	; 0x6e
 800a330:	e7dc      	b.n	800a2ec <mktime+0x1cc>
 800a332:	216e      	movs	r1, #110	; 0x6e
 800a334:	e7f6      	b.n	800a324 <mktime+0x204>
 800a336:	21b7      	movs	r1, #183	; 0xb7
 800a338:	0049      	lsls	r1, r1, #1
 800a33a:	e7f4      	b.n	800a326 <mktime+0x206>
 800a33c:	f000 fdc2 	bl	800aec4 <__tzcalc_limits>
 800a340:	2800      	cmp	r0, #0
 800a342:	d000      	beq.n	800a346 <mktime+0x226>
 800a344:	e770      	b.n	800a228 <mktime+0x108>
 800a346:	9d08      	ldr	r5, [sp, #32]
 800a348:	e051      	b.n	800a3ee <mktime+0x2ce>
 800a34a:	9901      	ldr	r1, [sp, #4]
 800a34c:	428b      	cmp	r3, r1
 800a34e:	dc9f      	bgt.n	800a290 <mktime+0x170>
 800a350:	d102      	bne.n	800a358 <mktime+0x238>
 800a352:	9900      	ldr	r1, [sp, #0]
 800a354:	428a      	cmp	r2, r1
 800a356:	d89b      	bhi.n	800a290 <mktime+0x170>
 800a358:	9b05      	ldr	r3, [sp, #20]
 800a35a:	2501      	movs	r5, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	db49      	blt.n	800a3f4 <mktime+0x2d4>
 800a360:	9e08      	ldr	r6, [sp, #32]
 800a362:	406e      	eors	r6, r5
 800a364:	2e01      	cmp	r6, #1
 800a366:	d142      	bne.n	800a3ee <mktime+0x2ce>
 800a368:	4663      	mov	r3, ip
 800a36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a36c:	1a9b      	subs	r3, r3, r2
 800a36e:	2d00      	cmp	r5, #0
 800a370:	d100      	bne.n	800a374 <mktime+0x254>
 800a372:	425b      	negs	r3, r3
 800a374:	0018      	movs	r0, r3
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	17d9      	asrs	r1, r3, #31
 800a37a:	18d2      	adds	r2, r2, r3
 800a37c:	6022      	str	r2, [r4, #0]
 800a37e:	9a00      	ldr	r2, [sp, #0]
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	1812      	adds	r2, r2, r0
 800a384:	414b      	adcs	r3, r1
 800a386:	9200      	str	r2, [sp, #0]
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	68e3      	ldr	r3, [r4, #12]
 800a38c:	0020      	movs	r0, r4
 800a38e:	9305      	str	r3, [sp, #20]
 800a390:	f7ff fdfc 	bl	8009f8c <validate_structure>
 800a394:	68e3      	ldr	r3, [r4, #12]
 800a396:	9a05      	ldr	r2, [sp, #20]
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	d028      	beq.n	800a3ee <mktime+0x2ce>
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	dc20      	bgt.n	800a3e2 <mktime+0x2c2>
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	db00      	blt.n	800a3a6 <mktime+0x286>
 800a3a4:	001e      	movs	r6, r3
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	69e2      	ldr	r2, [r4, #28]
 800a3aa:	199b      	adds	r3, r3, r6
 800a3ac:	9304      	str	r3, [sp, #16]
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	18b6      	adds	r6, r6, r2
 800a3b2:	d547      	bpl.n	800a444 <mktime+0x324>
 800a3b4:	9a03      	ldr	r2, [sp, #12]
 800a3b6:	1e50      	subs	r0, r2, #1
 800a3b8:	4218      	tst	r0, r3
 800a3ba:	d115      	bne.n	800a3e8 <mktime+0x2c8>
 800a3bc:	2164      	movs	r1, #100	; 0x64
 800a3be:	f7f6 f82f 	bl	8000420 <__aeabi_idivmod>
 800a3c2:	2900      	cmp	r1, #0
 800a3c4:	d12d      	bne.n	800a422 <mktime+0x302>
 800a3c6:	4a1e      	ldr	r2, [pc, #120]	; (800a440 <mktime+0x320>)
 800a3c8:	9b03      	ldr	r3, [sp, #12]
 800a3ca:	4694      	mov	ip, r2
 800a3cc:	3191      	adds	r1, #145	; 0x91
 800a3ce:	4463      	add	r3, ip
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	31ff      	adds	r1, #255	; 0xff
 800a3d4:	f7f6 f824 	bl	8000420 <__aeabi_idivmod>
 800a3d8:	424b      	negs	r3, r1
 800a3da:	4159      	adcs	r1, r3
 800a3dc:	316d      	adds	r1, #109	; 0x6d
 800a3de:	31ff      	adds	r1, #255	; 0xff
 800a3e0:	e004      	b.n	800a3ec <mktime+0x2cc>
 800a3e2:	2601      	movs	r6, #1
 800a3e4:	4276      	negs	r6, r6
 800a3e6:	e7de      	b.n	800a3a6 <mktime+0x286>
 800a3e8:	21b6      	movs	r1, #182	; 0xb6
 800a3ea:	0049      	lsls	r1, r1, #1
 800a3ec:	61e1      	str	r1, [r4, #28]
 800a3ee:	2d01      	cmp	r5, #1
 800a3f0:	d000      	beq.n	800a3f4 <mktime+0x2d4>
 800a3f2:	e758      	b.n	800a2a6 <mktime+0x186>
 800a3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f6:	2501      	movs	r5, #1
 800a3f8:	001e      	movs	r6, r3
 800a3fa:	17df      	asrs	r7, r3, #31
 800a3fc:	9a00      	ldr	r2, [sp, #0]
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	18b6      	adds	r6, r6, r2
 800a402:	415f      	adcs	r7, r3
 800a404:	f000 fe0f 	bl	800b026 <__tz_unlock>
 800a408:	9804      	ldr	r0, [sp, #16]
 800a40a:	6225      	str	r5, [r4, #32]
 800a40c:	3004      	adds	r0, #4
 800a40e:	2107      	movs	r1, #7
 800a410:	f7f6 f806 	bl	8000420 <__aeabi_idivmod>
 800a414:	2900      	cmp	r1, #0
 800a416:	db36      	blt.n	800a486 <mktime+0x366>
 800a418:	61a1      	str	r1, [r4, #24]
 800a41a:	0030      	movs	r0, r6
 800a41c:	0039      	movs	r1, r7
 800a41e:	b00b      	add	sp, #44	; 0x2c
 800a420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a422:	216e      	movs	r1, #110	; 0x6e
 800a424:	e7db      	b.n	800a3de <mktime+0x2be>
 800a426:	46c0      	nop			; (mov r8, r8)
 800a428:	0800e9f8 	.word	0x0800e9f8
 800a42c:	0000076c 	.word	0x0000076c
 800a430:	00002710 	.word	0x00002710
 800a434:	00004e20 	.word	0x00004e20
 800a438:	00015180 	.word	0x00015180
 800a43c:	20000298 	.word	0x20000298
 800a440:	0000076b 	.word	0x0000076b
 800a444:	9a03      	ldr	r2, [sp, #12]
 800a446:	421a      	tst	r2, r3
 800a448:	d116      	bne.n	800a478 <mktime+0x358>
 800a44a:	2164      	movs	r1, #100	; 0x64
 800a44c:	0010      	movs	r0, r2
 800a44e:	f7f5 ffe7 	bl	8000420 <__aeabi_idivmod>
 800a452:	2900      	cmp	r1, #0
 800a454:	d112      	bne.n	800a47c <mktime+0x35c>
 800a456:	4a0f      	ldr	r2, [pc, #60]	; (800a494 <mktime+0x374>)
 800a458:	9b03      	ldr	r3, [sp, #12]
 800a45a:	4694      	mov	ip, r2
 800a45c:	3191      	adds	r1, #145	; 0x91
 800a45e:	4463      	add	r3, ip
 800a460:	0018      	movs	r0, r3
 800a462:	31ff      	adds	r1, #255	; 0xff
 800a464:	f7f5 ffdc 	bl	8000420 <__aeabi_idivmod>
 800a468:	424b      	negs	r3, r1
 800a46a:	4159      	adcs	r1, r3
 800a46c:	316e      	adds	r1, #110	; 0x6e
 800a46e:	31ff      	adds	r1, #255	; 0xff
 800a470:	428e      	cmp	r6, r1
 800a472:	da06      	bge.n	800a482 <mktime+0x362>
 800a474:	61e6      	str	r6, [r4, #28]
 800a476:	e7ba      	b.n	800a3ee <mktime+0x2ce>
 800a478:	216e      	movs	r1, #110	; 0x6e
 800a47a:	e7f8      	b.n	800a46e <mktime+0x34e>
 800a47c:	21b7      	movs	r1, #183	; 0xb7
 800a47e:	0049      	lsls	r1, r1, #1
 800a480:	e7f6      	b.n	800a470 <mktime+0x350>
 800a482:	1a76      	subs	r6, r6, r1
 800a484:	e7f6      	b.n	800a474 <mktime+0x354>
 800a486:	3107      	adds	r1, #7
 800a488:	e7c6      	b.n	800a418 <mktime+0x2f8>
 800a48a:	2601      	movs	r6, #1
 800a48c:	4276      	negs	r6, r6
 800a48e:	17f7      	asrs	r7, r6, #31
 800a490:	e7c3      	b.n	800a41a <mktime+0x2fa>
 800a492:	46c0      	nop			; (mov r8, r8)
 800a494:	0000076c 	.word	0x0000076c

0800a498 <_calloc_r>:
 800a498:	434a      	muls	r2, r1
 800a49a:	b570      	push	{r4, r5, r6, lr}
 800a49c:	0011      	movs	r1, r2
 800a49e:	0014      	movs	r4, r2
 800a4a0:	f000 f808 	bl	800a4b4 <_malloc_r>
 800a4a4:	1e05      	subs	r5, r0, #0
 800a4a6:	d003      	beq.n	800a4b0 <_calloc_r+0x18>
 800a4a8:	0022      	movs	r2, r4
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f7ff fd65 	bl	8009f7a <memset>
 800a4b0:	0028      	movs	r0, r5
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}

0800a4b4 <_malloc_r>:
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	b570      	push	{r4, r5, r6, lr}
 800a4b8:	1ccd      	adds	r5, r1, #3
 800a4ba:	439d      	bics	r5, r3
 800a4bc:	3508      	adds	r5, #8
 800a4be:	0006      	movs	r6, r0
 800a4c0:	2d0c      	cmp	r5, #12
 800a4c2:	d21e      	bcs.n	800a502 <_malloc_r+0x4e>
 800a4c4:	250c      	movs	r5, #12
 800a4c6:	42a9      	cmp	r1, r5
 800a4c8:	d81d      	bhi.n	800a506 <_malloc_r+0x52>
 800a4ca:	0030      	movs	r0, r6
 800a4cc:	f001 fe33 	bl	800c136 <__malloc_lock>
 800a4d0:	4a25      	ldr	r2, [pc, #148]	; (800a568 <_malloc_r+0xb4>)
 800a4d2:	6814      	ldr	r4, [r2, #0]
 800a4d4:	0021      	movs	r1, r4
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d119      	bne.n	800a50e <_malloc_r+0x5a>
 800a4da:	4c24      	ldr	r4, [pc, #144]	; (800a56c <_malloc_r+0xb8>)
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d103      	bne.n	800a4ea <_malloc_r+0x36>
 800a4e2:	0030      	movs	r0, r6
 800a4e4:	f000 fca2 	bl	800ae2c <_sbrk_r>
 800a4e8:	6020      	str	r0, [r4, #0]
 800a4ea:	0029      	movs	r1, r5
 800a4ec:	0030      	movs	r0, r6
 800a4ee:	f000 fc9d 	bl	800ae2c <_sbrk_r>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	d12b      	bne.n	800a54e <_malloc_r+0x9a>
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	0030      	movs	r0, r6
 800a4fa:	6033      	str	r3, [r6, #0]
 800a4fc:	f001 fe1c 	bl	800c138 <__malloc_unlock>
 800a500:	e003      	b.n	800a50a <_malloc_r+0x56>
 800a502:	2d00      	cmp	r5, #0
 800a504:	dadf      	bge.n	800a4c6 <_malloc_r+0x12>
 800a506:	230c      	movs	r3, #12
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	2000      	movs	r0, #0
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	680b      	ldr	r3, [r1, #0]
 800a510:	1b5b      	subs	r3, r3, r5
 800a512:	d419      	bmi.n	800a548 <_malloc_r+0x94>
 800a514:	2b0b      	cmp	r3, #11
 800a516:	d903      	bls.n	800a520 <_malloc_r+0x6c>
 800a518:	600b      	str	r3, [r1, #0]
 800a51a:	18cc      	adds	r4, r1, r3
 800a51c:	6025      	str	r5, [r4, #0]
 800a51e:	e003      	b.n	800a528 <_malloc_r+0x74>
 800a520:	684b      	ldr	r3, [r1, #4]
 800a522:	428c      	cmp	r4, r1
 800a524:	d10d      	bne.n	800a542 <_malloc_r+0x8e>
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	0030      	movs	r0, r6
 800a52a:	f001 fe05 	bl	800c138 <__malloc_unlock>
 800a52e:	0020      	movs	r0, r4
 800a530:	2207      	movs	r2, #7
 800a532:	300b      	adds	r0, #11
 800a534:	1d23      	adds	r3, r4, #4
 800a536:	4390      	bics	r0, r2
 800a538:	1ac3      	subs	r3, r0, r3
 800a53a:	d0e7      	beq.n	800a50c <_malloc_r+0x58>
 800a53c:	425a      	negs	r2, r3
 800a53e:	50e2      	str	r2, [r4, r3]
 800a540:	e7e4      	b.n	800a50c <_malloc_r+0x58>
 800a542:	6063      	str	r3, [r4, #4]
 800a544:	000c      	movs	r4, r1
 800a546:	e7ef      	b.n	800a528 <_malloc_r+0x74>
 800a548:	000c      	movs	r4, r1
 800a54a:	6849      	ldr	r1, [r1, #4]
 800a54c:	e7c3      	b.n	800a4d6 <_malloc_r+0x22>
 800a54e:	2303      	movs	r3, #3
 800a550:	1cc4      	adds	r4, r0, #3
 800a552:	439c      	bics	r4, r3
 800a554:	42a0      	cmp	r0, r4
 800a556:	d0e1      	beq.n	800a51c <_malloc_r+0x68>
 800a558:	1a21      	subs	r1, r4, r0
 800a55a:	0030      	movs	r0, r6
 800a55c:	f000 fc66 	bl	800ae2c <_sbrk_r>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d1db      	bne.n	800a51c <_malloc_r+0x68>
 800a564:	e7c7      	b.n	800a4f6 <_malloc_r+0x42>
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	20000274 	.word	0x20000274
 800a56c:	20000278 	.word	0x20000278

0800a570 <__cvt>:
 800a570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a572:	b08b      	sub	sp, #44	; 0x2c
 800a574:	0014      	movs	r4, r2
 800a576:	1e1d      	subs	r5, r3, #0
 800a578:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a57a:	da53      	bge.n	800a624 <__cvt+0xb4>
 800a57c:	2480      	movs	r4, #128	; 0x80
 800a57e:	0624      	lsls	r4, r4, #24
 800a580:	191b      	adds	r3, r3, r4
 800a582:	001d      	movs	r5, r3
 800a584:	0014      	movs	r4, r2
 800a586:	232d      	movs	r3, #45	; 0x2d
 800a588:	700b      	strb	r3, [r1, #0]
 800a58a:	2320      	movs	r3, #32
 800a58c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a58e:	2203      	movs	r2, #3
 800a590:	439e      	bics	r6, r3
 800a592:	2e46      	cmp	r6, #70	; 0x46
 800a594:	d007      	beq.n	800a5a6 <__cvt+0x36>
 800a596:	0033      	movs	r3, r6
 800a598:	3b45      	subs	r3, #69	; 0x45
 800a59a:	4259      	negs	r1, r3
 800a59c:	414b      	adcs	r3, r1
 800a59e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a5a0:	3a01      	subs	r2, #1
 800a5a2:	18cb      	adds	r3, r1, r3
 800a5a4:	9310      	str	r3, [sp, #64]	; 0x40
 800a5a6:	ab09      	add	r3, sp, #36	; 0x24
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	ab08      	add	r3, sp, #32
 800a5ac:	9303      	str	r3, [sp, #12]
 800a5ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5b0:	9200      	str	r2, [sp, #0]
 800a5b2:	9302      	str	r3, [sp, #8]
 800a5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5b6:	0022      	movs	r2, r4
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	002b      	movs	r3, r5
 800a5bc:	f000 ff58 	bl	800b470 <_dtoa_r>
 800a5c0:	0007      	movs	r7, r0
 800a5c2:	2e47      	cmp	r6, #71	; 0x47
 800a5c4:	d102      	bne.n	800a5cc <__cvt+0x5c>
 800a5c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5c8:	07db      	lsls	r3, r3, #31
 800a5ca:	d524      	bpl.n	800a616 <__cvt+0xa6>
 800a5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ce:	18fb      	adds	r3, r7, r3
 800a5d0:	9307      	str	r3, [sp, #28]
 800a5d2:	2e46      	cmp	r6, #70	; 0x46
 800a5d4:	d114      	bne.n	800a600 <__cvt+0x90>
 800a5d6:	783b      	ldrb	r3, [r7, #0]
 800a5d8:	2b30      	cmp	r3, #48	; 0x30
 800a5da:	d10c      	bne.n	800a5f6 <__cvt+0x86>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2300      	movs	r3, #0
 800a5e0:	0020      	movs	r0, r4
 800a5e2:	0029      	movs	r1, r5
 800a5e4:	f7f5 ff32 	bl	800044c <__aeabi_dcmpeq>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d104      	bne.n	800a5f6 <__cvt+0x86>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5f8:	9a07      	ldr	r2, [sp, #28]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	18d3      	adds	r3, r2, r3
 800a5fe:	9307      	str	r3, [sp, #28]
 800a600:	2200      	movs	r2, #0
 800a602:	2300      	movs	r3, #0
 800a604:	0020      	movs	r0, r4
 800a606:	0029      	movs	r1, r5
 800a608:	f7f5 ff20 	bl	800044c <__aeabi_dcmpeq>
 800a60c:	2230      	movs	r2, #48	; 0x30
 800a60e:	2800      	cmp	r0, #0
 800a610:	d00d      	beq.n	800a62e <__cvt+0xbe>
 800a612:	9b07      	ldr	r3, [sp, #28]
 800a614:	9309      	str	r3, [sp, #36]	; 0x24
 800a616:	0038      	movs	r0, r7
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a61c:	1bdb      	subs	r3, r3, r7
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	b00b      	add	sp, #44	; 0x2c
 800a622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a624:	2300      	movs	r3, #0
 800a626:	e7af      	b.n	800a588 <__cvt+0x18>
 800a628:	1c59      	adds	r1, r3, #1
 800a62a:	9109      	str	r1, [sp, #36]	; 0x24
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a630:	9907      	ldr	r1, [sp, #28]
 800a632:	428b      	cmp	r3, r1
 800a634:	d3f8      	bcc.n	800a628 <__cvt+0xb8>
 800a636:	e7ee      	b.n	800a616 <__cvt+0xa6>

0800a638 <__exponent>:
 800a638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a63a:	1c83      	adds	r3, r0, #2
 800a63c:	b085      	sub	sp, #20
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	0006      	movs	r6, r0
 800a642:	000c      	movs	r4, r1
 800a644:	7002      	strb	r2, [r0, #0]
 800a646:	232b      	movs	r3, #43	; 0x2b
 800a648:	2900      	cmp	r1, #0
 800a64a:	da01      	bge.n	800a650 <__exponent+0x18>
 800a64c:	232d      	movs	r3, #45	; 0x2d
 800a64e:	424c      	negs	r4, r1
 800a650:	7073      	strb	r3, [r6, #1]
 800a652:	2c09      	cmp	r4, #9
 800a654:	dd22      	ble.n	800a69c <__exponent+0x64>
 800a656:	ab02      	add	r3, sp, #8
 800a658:	1ddd      	adds	r5, r3, #7
 800a65a:	0020      	movs	r0, r4
 800a65c:	210a      	movs	r1, #10
 800a65e:	f7f5 fedf 	bl	8000420 <__aeabi_idivmod>
 800a662:	1e6f      	subs	r7, r5, #1
 800a664:	3130      	adds	r1, #48	; 0x30
 800a666:	7039      	strb	r1, [r7, #0]
 800a668:	0020      	movs	r0, r4
 800a66a:	210a      	movs	r1, #10
 800a66c:	f7f5 fdf2 	bl	8000254 <__divsi3>
 800a670:	0004      	movs	r4, r0
 800a672:	2809      	cmp	r0, #9
 800a674:	dc0b      	bgt.n	800a68e <__exponent+0x56>
 800a676:	3d02      	subs	r5, #2
 800a678:	3430      	adds	r4, #48	; 0x30
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	702c      	strb	r4, [r5, #0]
 800a67e:	aa02      	add	r2, sp, #8
 800a680:	3207      	adds	r2, #7
 800a682:	0018      	movs	r0, r3
 800a684:	42aa      	cmp	r2, r5
 800a686:	d804      	bhi.n	800a692 <__exponent+0x5a>
 800a688:	1b80      	subs	r0, r0, r6
 800a68a:	b005      	add	sp, #20
 800a68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a68e:	003d      	movs	r5, r7
 800a690:	e7e3      	b.n	800a65a <__exponent+0x22>
 800a692:	782a      	ldrb	r2, [r5, #0]
 800a694:	3501      	adds	r5, #1
 800a696:	701a      	strb	r2, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	e7f0      	b.n	800a67e <__exponent+0x46>
 800a69c:	2330      	movs	r3, #48	; 0x30
 800a69e:	18e4      	adds	r4, r4, r3
 800a6a0:	70b3      	strb	r3, [r6, #2]
 800a6a2:	1d30      	adds	r0, r6, #4
 800a6a4:	70f4      	strb	r4, [r6, #3]
 800a6a6:	e7ef      	b.n	800a688 <__exponent+0x50>

0800a6a8 <_printf_float>:
 800a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6aa:	b095      	sub	sp, #84	; 0x54
 800a6ac:	000c      	movs	r4, r1
 800a6ae:	920a      	str	r2, [sp, #40]	; 0x28
 800a6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6b2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a6b4:	9009      	str	r0, [sp, #36]	; 0x24
 800a6b6:	f001 fd13 	bl	800c0e0 <_localeconv_r>
 800a6ba:	6803      	ldr	r3, [r0, #0]
 800a6bc:	0018      	movs	r0, r3
 800a6be:	930c      	str	r3, [sp, #48]	; 0x30
 800a6c0:	f7f5 fd22 	bl	8000108 <strlen>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9312      	str	r3, [sp, #72]	; 0x48
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	900e      	str	r0, [sp, #56]	; 0x38
 800a6cc:	930d      	str	r3, [sp, #52]	; 0x34
 800a6ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6d0:	7e27      	ldrb	r7, [r4, #24]
 800a6d2:	682b      	ldr	r3, [r5, #0]
 800a6d4:	2207      	movs	r2, #7
 800a6d6:	05c9      	lsls	r1, r1, #23
 800a6d8:	d545      	bpl.n	800a766 <_printf_float+0xbe>
 800a6da:	189b      	adds	r3, r3, r2
 800a6dc:	4393      	bics	r3, r2
 800a6de:	001a      	movs	r2, r3
 800a6e0:	3208      	adds	r2, #8
 800a6e2:	602a      	str	r2, [r5, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	64a2      	str	r2, [r4, #72]	; 0x48
 800a6ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a6f0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800a6f2:	006b      	lsls	r3, r5, #1
 800a6f4:	085b      	lsrs	r3, r3, #1
 800a6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6f8:	4252      	negs	r2, r2
 800a6fa:	4bac      	ldr	r3, [pc, #688]	; (800a9ac <_printf_float+0x304>)
 800a6fc:	0030      	movs	r0, r6
 800a6fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a700:	f7f7 ff6e 	bl	80025e0 <__aeabi_dcmpun>
 800a704:	2800      	cmp	r0, #0
 800a706:	d130      	bne.n	800a76a <_printf_float+0xc2>
 800a708:	2201      	movs	r2, #1
 800a70a:	4ba8      	ldr	r3, [pc, #672]	; (800a9ac <_printf_float+0x304>)
 800a70c:	4252      	negs	r2, r2
 800a70e:	0030      	movs	r0, r6
 800a710:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a712:	f7f5 feab 	bl	800046c <__aeabi_dcmple>
 800a716:	2800      	cmp	r0, #0
 800a718:	d127      	bne.n	800a76a <_printf_float+0xc2>
 800a71a:	2200      	movs	r2, #0
 800a71c:	2300      	movs	r3, #0
 800a71e:	0030      	movs	r0, r6
 800a720:	0029      	movs	r1, r5
 800a722:	f7f5 fe99 	bl	8000458 <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d003      	beq.n	800a732 <_printf_float+0x8a>
 800a72a:	0023      	movs	r3, r4
 800a72c:	222d      	movs	r2, #45	; 0x2d
 800a72e:	3343      	adds	r3, #67	; 0x43
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	4d9f      	ldr	r5, [pc, #636]	; (800a9b0 <_printf_float+0x308>)
 800a734:	2f47      	cmp	r7, #71	; 0x47
 800a736:	d800      	bhi.n	800a73a <_printf_float+0x92>
 800a738:	4d9e      	ldr	r5, [pc, #632]	; (800a9b4 <_printf_float+0x30c>)
 800a73a:	2303      	movs	r3, #3
 800a73c:	2600      	movs	r6, #0
 800a73e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a740:	6123      	str	r3, [r4, #16]
 800a742:	3301      	adds	r3, #1
 800a744:	439a      	bics	r2, r3
 800a746:	6022      	str	r2, [r4, #0]
 800a748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a74a:	aa13      	add	r2, sp, #76	; 0x4c
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	0021      	movs	r1, r4
 800a750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a752:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a754:	f000 f9f4 	bl	800ab40 <_printf_common>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d000      	beq.n	800a75e <_printf_float+0xb6>
 800a75c:	e093      	b.n	800a886 <_printf_float+0x1de>
 800a75e:	2001      	movs	r0, #1
 800a760:	4240      	negs	r0, r0
 800a762:	b015      	add	sp, #84	; 0x54
 800a764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a766:	3307      	adds	r3, #7
 800a768:	e7b8      	b.n	800a6dc <_printf_float+0x34>
 800a76a:	0032      	movs	r2, r6
 800a76c:	002b      	movs	r3, r5
 800a76e:	0030      	movs	r0, r6
 800a770:	0029      	movs	r1, r5
 800a772:	f7f7 ff35 	bl	80025e0 <__aeabi_dcmpun>
 800a776:	2800      	cmp	r0, #0
 800a778:	d004      	beq.n	800a784 <_printf_float+0xdc>
 800a77a:	4d8f      	ldr	r5, [pc, #572]	; (800a9b8 <_printf_float+0x310>)
 800a77c:	2f47      	cmp	r7, #71	; 0x47
 800a77e:	d8dc      	bhi.n	800a73a <_printf_float+0x92>
 800a780:	4d8e      	ldr	r5, [pc, #568]	; (800a9bc <_printf_float+0x314>)
 800a782:	e7da      	b.n	800a73a <_printf_float+0x92>
 800a784:	2380      	movs	r3, #128	; 0x80
 800a786:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a788:	6862      	ldr	r2, [r4, #4]
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	430b      	orrs	r3, r1
 800a78e:	1c51      	adds	r1, r2, #1
 800a790:	d143      	bne.n	800a81a <_printf_float+0x172>
 800a792:	3207      	adds	r2, #7
 800a794:	6062      	str	r2, [r4, #4]
 800a796:	aa12      	add	r2, sp, #72	; 0x48
 800a798:	2100      	movs	r1, #0
 800a79a:	9205      	str	r2, [sp, #20]
 800a79c:	aa11      	add	r2, sp, #68	; 0x44
 800a79e:	9203      	str	r2, [sp, #12]
 800a7a0:	2223      	movs	r2, #35	; 0x23
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	9106      	str	r1, [sp, #24]
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	a908      	add	r1, sp, #32
 800a7aa:	6863      	ldr	r3, [r4, #4]
 800a7ac:	1852      	adds	r2, r2, r1
 800a7ae:	9202      	str	r2, [sp, #8]
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	0032      	movs	r2, r6
 800a7b4:	002b      	movs	r3, r5
 800a7b6:	9704      	str	r7, [sp, #16]
 800a7b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ba:	f7ff fed9 	bl	800a570 <__cvt>
 800a7be:	2320      	movs	r3, #32
 800a7c0:	003a      	movs	r2, r7
 800a7c2:	0005      	movs	r5, r0
 800a7c4:	439a      	bics	r2, r3
 800a7c6:	2a47      	cmp	r2, #71	; 0x47
 800a7c8:	d107      	bne.n	800a7da <_printf_float+0x132>
 800a7ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7cc:	1cda      	adds	r2, r3, #3
 800a7ce:	db02      	blt.n	800a7d6 <_printf_float+0x12e>
 800a7d0:	6862      	ldr	r2, [r4, #4]
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	dd45      	ble.n	800a862 <_printf_float+0x1ba>
 800a7d6:	3f02      	subs	r7, #2
 800a7d8:	b2ff      	uxtb	r7, r7
 800a7da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7dc:	2f65      	cmp	r7, #101	; 0x65
 800a7de:	d825      	bhi.n	800a82c <_printf_float+0x184>
 800a7e0:	0020      	movs	r0, r4
 800a7e2:	3901      	subs	r1, #1
 800a7e4:	003a      	movs	r2, r7
 800a7e6:	3050      	adds	r0, #80	; 0x50
 800a7e8:	9111      	str	r1, [sp, #68]	; 0x44
 800a7ea:	f7ff ff25 	bl	800a638 <__exponent>
 800a7ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7f0:	0006      	movs	r6, r0
 800a7f2:	1813      	adds	r3, r2, r0
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	2a01      	cmp	r2, #1
 800a7f8:	dc02      	bgt.n	800a800 <_printf_float+0x158>
 800a7fa:	6822      	ldr	r2, [r4, #0]
 800a7fc:	07d2      	lsls	r2, r2, #31
 800a7fe:	d501      	bpl.n	800a804 <_printf_float+0x15c>
 800a800:	3301      	adds	r3, #1
 800a802:	6123      	str	r3, [r4, #16]
 800a804:	2323      	movs	r3, #35	; 0x23
 800a806:	aa08      	add	r2, sp, #32
 800a808:	189b      	adds	r3, r3, r2
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d09b      	beq.n	800a748 <_printf_float+0xa0>
 800a810:	0023      	movs	r3, r4
 800a812:	222d      	movs	r2, #45	; 0x2d
 800a814:	3343      	adds	r3, #67	; 0x43
 800a816:	701a      	strb	r2, [r3, #0]
 800a818:	e796      	b.n	800a748 <_printf_float+0xa0>
 800a81a:	2f67      	cmp	r7, #103	; 0x67
 800a81c:	d100      	bne.n	800a820 <_printf_float+0x178>
 800a81e:	e176      	b.n	800ab0e <_printf_float+0x466>
 800a820:	2f47      	cmp	r7, #71	; 0x47
 800a822:	d1b8      	bne.n	800a796 <_printf_float+0xee>
 800a824:	2a00      	cmp	r2, #0
 800a826:	d1b6      	bne.n	800a796 <_printf_float+0xee>
 800a828:	2201      	movs	r2, #1
 800a82a:	e7b3      	b.n	800a794 <_printf_float+0xec>
 800a82c:	2f66      	cmp	r7, #102	; 0x66
 800a82e:	d119      	bne.n	800a864 <_printf_float+0x1bc>
 800a830:	6863      	ldr	r3, [r4, #4]
 800a832:	2900      	cmp	r1, #0
 800a834:	dd0c      	ble.n	800a850 <_printf_float+0x1a8>
 800a836:	6121      	str	r1, [r4, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d102      	bne.n	800a842 <_printf_float+0x19a>
 800a83c:	6822      	ldr	r2, [r4, #0]
 800a83e:	07d2      	lsls	r2, r2, #31
 800a840:	d502      	bpl.n	800a848 <_printf_float+0x1a0>
 800a842:	3301      	adds	r3, #1
 800a844:	185b      	adds	r3, r3, r1
 800a846:	6123      	str	r3, [r4, #16]
 800a848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a84a:	2600      	movs	r6, #0
 800a84c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a84e:	e7d9      	b.n	800a804 <_printf_float+0x15c>
 800a850:	2b00      	cmp	r3, #0
 800a852:	d103      	bne.n	800a85c <_printf_float+0x1b4>
 800a854:	2201      	movs	r2, #1
 800a856:	6821      	ldr	r1, [r4, #0]
 800a858:	4211      	tst	r1, r2
 800a85a:	d000      	beq.n	800a85e <_printf_float+0x1b6>
 800a85c:	1c9a      	adds	r2, r3, #2
 800a85e:	6122      	str	r2, [r4, #16]
 800a860:	e7f2      	b.n	800a848 <_printf_float+0x1a0>
 800a862:	2767      	movs	r7, #103	; 0x67
 800a864:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a868:	4293      	cmp	r3, r2
 800a86a:	db05      	blt.n	800a878 <_printf_float+0x1d0>
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	07d2      	lsls	r2, r2, #31
 800a872:	d5e9      	bpl.n	800a848 <_printf_float+0x1a0>
 800a874:	3301      	adds	r3, #1
 800a876:	e7e6      	b.n	800a846 <_printf_float+0x19e>
 800a878:	2101      	movs	r1, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dc01      	bgt.n	800a882 <_printf_float+0x1da>
 800a87e:	1849      	adds	r1, r1, r1
 800a880:	1ac9      	subs	r1, r1, r3
 800a882:	1852      	adds	r2, r2, r1
 800a884:	e7eb      	b.n	800a85e <_printf_float+0x1b6>
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	0553      	lsls	r3, r2, #21
 800a88a:	d408      	bmi.n	800a89e <_printf_float+0x1f6>
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	002a      	movs	r2, r5
 800a890:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a892:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a894:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a896:	47a8      	blx	r5
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d129      	bne.n	800a8f0 <_printf_float+0x248>
 800a89c:	e75f      	b.n	800a75e <_printf_float+0xb6>
 800a89e:	2f65      	cmp	r7, #101	; 0x65
 800a8a0:	d800      	bhi.n	800a8a4 <_printf_float+0x1fc>
 800a8a2:	e0e0      	b.n	800aa66 <_printf_float+0x3be>
 800a8a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a8a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f7f5 fdce 	bl	800044c <__aeabi_dcmpeq>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d034      	beq.n	800a91e <_printf_float+0x276>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	4a42      	ldr	r2, [pc, #264]	; (800a9c0 <_printf_float+0x318>)
 800a8b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a8be:	47a8      	blx	r5
 800a8c0:	1c43      	adds	r3, r0, #1
 800a8c2:	d100      	bne.n	800a8c6 <_printf_float+0x21e>
 800a8c4:	e74b      	b.n	800a75e <_printf_float+0xb6>
 800a8c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	db02      	blt.n	800a8d4 <_printf_float+0x22c>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	07db      	lsls	r3, r3, #31
 800a8d2:	d50d      	bpl.n	800a8f0 <_printf_float+0x248>
 800a8d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a8d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8da:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8de:	47a8      	blx	r5
 800a8e0:	2500      	movs	r5, #0
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d100      	bne.n	800a8e8 <_printf_float+0x240>
 800a8e6:	e73a      	b.n	800a75e <_printf_float+0xb6>
 800a8e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	42ab      	cmp	r3, r5
 800a8ee:	dc0a      	bgt.n	800a906 <_printf_float+0x25e>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	079b      	lsls	r3, r3, #30
 800a8f4:	d500      	bpl.n	800a8f8 <_printf_float+0x250>
 800a8f6:	e108      	b.n	800ab0a <_printf_float+0x462>
 800a8f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8fa:	68e0      	ldr	r0, [r4, #12]
 800a8fc:	4298      	cmp	r0, r3
 800a8fe:	db00      	blt.n	800a902 <_printf_float+0x25a>
 800a900:	e72f      	b.n	800a762 <_printf_float+0xba>
 800a902:	0018      	movs	r0, r3
 800a904:	e72d      	b.n	800a762 <_printf_float+0xba>
 800a906:	0022      	movs	r2, r4
 800a908:	2301      	movs	r3, #1
 800a90a:	321a      	adds	r2, #26
 800a90c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a90e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a910:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a912:	47b0      	blx	r6
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d100      	bne.n	800a91a <_printf_float+0x272>
 800a918:	e721      	b.n	800a75e <_printf_float+0xb6>
 800a91a:	3501      	adds	r5, #1
 800a91c:	e7e4      	b.n	800a8e8 <_printf_float+0x240>
 800a91e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a920:	2b00      	cmp	r3, #0
 800a922:	dc2d      	bgt.n	800a980 <_printf_float+0x2d8>
 800a924:	2301      	movs	r3, #1
 800a926:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <_printf_float+0x318>)
 800a928:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a92a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a92e:	47b0      	blx	r6
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d100      	bne.n	800a936 <_printf_float+0x28e>
 800a934:	e713      	b.n	800a75e <_printf_float+0xb6>
 800a936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d105      	bne.n	800a948 <_printf_float+0x2a0>
 800a93c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <_printf_float+0x2a0>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	07db      	lsls	r3, r3, #31
 800a946:	d5d3      	bpl.n	800a8f0 <_printf_float+0x248>
 800a948:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a94a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a94c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a94e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a950:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a952:	47b0      	blx	r6
 800a954:	2600      	movs	r6, #0
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d100      	bne.n	800a95c <_printf_float+0x2b4>
 800a95a:	e700      	b.n	800a75e <_printf_float+0xb6>
 800a95c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a95e:	425b      	negs	r3, r3
 800a960:	42b3      	cmp	r3, r6
 800a962:	dc01      	bgt.n	800a968 <_printf_float+0x2c0>
 800a964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a966:	e792      	b.n	800a88e <_printf_float+0x1e6>
 800a968:	0022      	movs	r2, r4
 800a96a:	2301      	movs	r3, #1
 800a96c:	321a      	adds	r2, #26
 800a96e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a970:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a972:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a974:	47b8      	blx	r7
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	d100      	bne.n	800a97c <_printf_float+0x2d4>
 800a97a:	e6f0      	b.n	800a75e <_printf_float+0xb6>
 800a97c:	3601      	adds	r6, #1
 800a97e:	e7ed      	b.n	800a95c <_printf_float+0x2b4>
 800a980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a982:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a984:	429f      	cmp	r7, r3
 800a986:	dd00      	ble.n	800a98a <_printf_float+0x2e2>
 800a988:	001f      	movs	r7, r3
 800a98a:	2f00      	cmp	r7, #0
 800a98c:	dd08      	ble.n	800a9a0 <_printf_float+0x2f8>
 800a98e:	003b      	movs	r3, r7
 800a990:	002a      	movs	r2, r5
 800a992:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a994:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a996:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a998:	47b0      	blx	r6
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	d100      	bne.n	800a9a0 <_printf_float+0x2f8>
 800a99e:	e6de      	b.n	800a75e <_printf_float+0xb6>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a9a4:	43fb      	mvns	r3, r7
 800a9a6:	17db      	asrs	r3, r3, #31
 800a9a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9aa:	e018      	b.n	800a9de <_printf_float+0x336>
 800a9ac:	7fefffff 	.word	0x7fefffff
 800a9b0:	0800ea2c 	.word	0x0800ea2c
 800a9b4:	0800ea28 	.word	0x0800ea28
 800a9b8:	0800ea34 	.word	0x0800ea34
 800a9bc:	0800ea30 	.word	0x0800ea30
 800a9c0:	0800ec35 	.word	0x0800ec35
 800a9c4:	0022      	movs	r2, r4
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	321a      	adds	r2, #26
 800a9ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a9d0:	47b0      	blx	r6
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d100      	bne.n	800a9d8 <_printf_float+0x330>
 800a9d6:	e6c2      	b.n	800a75e <_printf_float+0xb6>
 800a9d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9da:	3301      	adds	r3, #1
 800a9dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a9de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9e0:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800a9e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9e4:	403b      	ands	r3, r7
 800a9e6:	1af3      	subs	r3, r6, r3
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	dceb      	bgt.n	800a9c4 <_printf_float+0x31c>
 800a9ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9f0:	19ad      	adds	r5, r5, r6
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	db10      	blt.n	800aa18 <_printf_float+0x370>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	07db      	lsls	r3, r3, #31
 800a9fa:	d40d      	bmi.n	800aa18 <_printf_float+0x370>
 800a9fc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa00:	1bbe      	subs	r6, r7, r6
 800aa02:	1aff      	subs	r7, r7, r3
 800aa04:	42b7      	cmp	r7, r6
 800aa06:	dd00      	ble.n	800aa0a <_printf_float+0x362>
 800aa08:	0037      	movs	r7, r6
 800aa0a:	2f00      	cmp	r7, #0
 800aa0c:	dc0d      	bgt.n	800aa2a <_printf_float+0x382>
 800aa0e:	43fe      	mvns	r6, r7
 800aa10:	17f3      	asrs	r3, r6, #31
 800aa12:	2500      	movs	r5, #0
 800aa14:	930c      	str	r3, [sp, #48]	; 0x30
 800aa16:	e01c      	b.n	800aa52 <_printf_float+0x3aa>
 800aa18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800aa22:	47b8      	blx	r7
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d1e9      	bne.n	800a9fc <_printf_float+0x354>
 800aa28:	e699      	b.n	800a75e <_printf_float+0xb6>
 800aa2a:	003b      	movs	r3, r7
 800aa2c:	002a      	movs	r2, r5
 800aa2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aa34:	47a8      	blx	r5
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d1e9      	bne.n	800aa0e <_printf_float+0x366>
 800aa3a:	e690      	b.n	800a75e <_printf_float+0xb6>
 800aa3c:	0022      	movs	r2, r4
 800aa3e:	2301      	movs	r3, #1
 800aa40:	321a      	adds	r2, #26
 800aa42:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa46:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aa48:	47b0      	blx	r6
 800aa4a:	1c43      	adds	r3, r0, #1
 800aa4c:	d100      	bne.n	800aa50 <_printf_float+0x3a8>
 800aa4e:	e686      	b.n	800a75e <_printf_float+0xb6>
 800aa50:	3501      	adds	r5, #1
 800aa52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa56:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa58:	1a9b      	subs	r3, r3, r2
 800aa5a:	003a      	movs	r2, r7
 800aa5c:	400a      	ands	r2, r1
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	42ab      	cmp	r3, r5
 800aa62:	dceb      	bgt.n	800aa3c <_printf_float+0x394>
 800aa64:	e744      	b.n	800a8f0 <_printf_float+0x248>
 800aa66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	dc02      	bgt.n	800aa72 <_printf_float+0x3ca>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	421a      	tst	r2, r3
 800aa70:	d032      	beq.n	800aad8 <_printf_float+0x430>
 800aa72:	2301      	movs	r3, #1
 800aa74:	002a      	movs	r2, r5
 800aa76:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800aa7c:	47b8      	blx	r7
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d100      	bne.n	800aa84 <_printf_float+0x3dc>
 800aa82:	e66c      	b.n	800a75e <_printf_float+0xb6>
 800aa84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa88:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800aa8e:	3501      	adds	r5, #1
 800aa90:	47b8      	blx	r7
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d100      	bne.n	800aa98 <_printf_float+0x3f0>
 800aa96:	e662      	b.n	800a75e <_printf_float+0xb6>
 800aa98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aa9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aa9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	1e5f      	subs	r7, r3, #1
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f7f5 fcd2 	bl	800044c <__aeabi_dcmpeq>
 800aaa8:	003b      	movs	r3, r7
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d014      	beq.n	800aad8 <_printf_float+0x430>
 800aaae:	2500      	movs	r5, #0
 800aab0:	e00a      	b.n	800aac8 <_printf_float+0x420>
 800aab2:	0022      	movs	r2, r4
 800aab4:	2301      	movs	r3, #1
 800aab6:	321a      	adds	r2, #26
 800aab8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aaba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aabc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800aabe:	47b8      	blx	r7
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d100      	bne.n	800aac6 <_printf_float+0x41e>
 800aac4:	e64b      	b.n	800a75e <_printf_float+0xb6>
 800aac6:	3501      	adds	r5, #1
 800aac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaca:	3b01      	subs	r3, #1
 800aacc:	42ab      	cmp	r3, r5
 800aace:	dcf0      	bgt.n	800aab2 <_printf_float+0x40a>
 800aad0:	0022      	movs	r2, r4
 800aad2:	0033      	movs	r3, r6
 800aad4:	3250      	adds	r2, #80	; 0x50
 800aad6:	e6db      	b.n	800a890 <_printf_float+0x1e8>
 800aad8:	002a      	movs	r2, r5
 800aada:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aadc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aade:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aae0:	47a8      	blx	r5
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d1f4      	bne.n	800aad0 <_printf_float+0x428>
 800aae6:	e63a      	b.n	800a75e <_printf_float+0xb6>
 800aae8:	0022      	movs	r2, r4
 800aaea:	2301      	movs	r3, #1
 800aaec:	3219      	adds	r2, #25
 800aaee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aaf4:	47b0      	blx	r6
 800aaf6:	1c43      	adds	r3, r0, #1
 800aaf8:	d100      	bne.n	800aafc <_printf_float+0x454>
 800aafa:	e630      	b.n	800a75e <_printf_float+0xb6>
 800aafc:	3501      	adds	r5, #1
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dcef      	bgt.n	800aae8 <_printf_float+0x440>
 800ab08:	e6f6      	b.n	800a8f8 <_printf_float+0x250>
 800ab0a:	2500      	movs	r5, #0
 800ab0c:	e7f7      	b.n	800aafe <_printf_float+0x456>
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	d100      	bne.n	800ab14 <_printf_float+0x46c>
 800ab12:	e689      	b.n	800a828 <_printf_float+0x180>
 800ab14:	2100      	movs	r1, #0
 800ab16:	9106      	str	r1, [sp, #24]
 800ab18:	a912      	add	r1, sp, #72	; 0x48
 800ab1a:	9105      	str	r1, [sp, #20]
 800ab1c:	a911      	add	r1, sp, #68	; 0x44
 800ab1e:	9103      	str	r1, [sp, #12]
 800ab20:	2123      	movs	r1, #35	; 0x23
 800ab22:	a808      	add	r0, sp, #32
 800ab24:	1809      	adds	r1, r1, r0
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	9200      	str	r2, [sp, #0]
 800ab2c:	002b      	movs	r3, r5
 800ab2e:	9704      	str	r7, [sp, #16]
 800ab30:	9102      	str	r1, [sp, #8]
 800ab32:	0032      	movs	r2, r6
 800ab34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab36:	f7ff fd1b 	bl	800a570 <__cvt>
 800ab3a:	0005      	movs	r5, r0
 800ab3c:	e645      	b.n	800a7ca <_printf_float+0x122>
 800ab3e:	46c0      	nop			; (mov r8, r8)

0800ab40 <_printf_common>:
 800ab40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab42:	0015      	movs	r5, r2
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	688a      	ldr	r2, [r1, #8]
 800ab48:	690b      	ldr	r3, [r1, #16]
 800ab4a:	9000      	str	r0, [sp, #0]
 800ab4c:	000c      	movs	r4, r1
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	da00      	bge.n	800ab54 <_printf_common+0x14>
 800ab52:	0013      	movs	r3, r2
 800ab54:	0022      	movs	r2, r4
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	3243      	adds	r2, #67	; 0x43
 800ab5a:	7812      	ldrb	r2, [r2, #0]
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	d001      	beq.n	800ab64 <_printf_common+0x24>
 800ab60:	3301      	adds	r3, #1
 800ab62:	602b      	str	r3, [r5, #0]
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	069b      	lsls	r3, r3, #26
 800ab68:	d502      	bpl.n	800ab70 <_printf_common+0x30>
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	3302      	adds	r3, #2
 800ab6e:	602b      	str	r3, [r5, #0]
 800ab70:	2706      	movs	r7, #6
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	401f      	ands	r7, r3
 800ab76:	d027      	beq.n	800abc8 <_printf_common+0x88>
 800ab78:	0023      	movs	r3, r4
 800ab7a:	3343      	adds	r3, #67	; 0x43
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	1e5a      	subs	r2, r3, #1
 800ab80:	4193      	sbcs	r3, r2
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	0692      	lsls	r2, r2, #26
 800ab86:	d430      	bmi.n	800abea <_printf_common+0xaa>
 800ab88:	0022      	movs	r2, r4
 800ab8a:	9901      	ldr	r1, [sp, #4]
 800ab8c:	3243      	adds	r2, #67	; 0x43
 800ab8e:	9800      	ldr	r0, [sp, #0]
 800ab90:	9e08      	ldr	r6, [sp, #32]
 800ab92:	47b0      	blx	r6
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d025      	beq.n	800abe4 <_printf_common+0xa4>
 800ab98:	2306      	movs	r3, #6
 800ab9a:	6820      	ldr	r0, [r4, #0]
 800ab9c:	682a      	ldr	r2, [r5, #0]
 800ab9e:	68e1      	ldr	r1, [r4, #12]
 800aba0:	4003      	ands	r3, r0
 800aba2:	2500      	movs	r5, #0
 800aba4:	2b04      	cmp	r3, #4
 800aba6:	d103      	bne.n	800abb0 <_printf_common+0x70>
 800aba8:	1a8d      	subs	r5, r1, r2
 800abaa:	43eb      	mvns	r3, r5
 800abac:	17db      	asrs	r3, r3, #31
 800abae:	401d      	ands	r5, r3
 800abb0:	68a3      	ldr	r3, [r4, #8]
 800abb2:	6922      	ldr	r2, [r4, #16]
 800abb4:	4293      	cmp	r3, r2
 800abb6:	dd01      	ble.n	800abbc <_printf_common+0x7c>
 800abb8:	1a9b      	subs	r3, r3, r2
 800abba:	18ed      	adds	r5, r5, r3
 800abbc:	2700      	movs	r7, #0
 800abbe:	42bd      	cmp	r5, r7
 800abc0:	d120      	bne.n	800ac04 <_printf_common+0xc4>
 800abc2:	2000      	movs	r0, #0
 800abc4:	e010      	b.n	800abe8 <_printf_common+0xa8>
 800abc6:	3701      	adds	r7, #1
 800abc8:	68e3      	ldr	r3, [r4, #12]
 800abca:	682a      	ldr	r2, [r5, #0]
 800abcc:	1a9b      	subs	r3, r3, r2
 800abce:	42bb      	cmp	r3, r7
 800abd0:	ddd2      	ble.n	800ab78 <_printf_common+0x38>
 800abd2:	0022      	movs	r2, r4
 800abd4:	2301      	movs	r3, #1
 800abd6:	3219      	adds	r2, #25
 800abd8:	9901      	ldr	r1, [sp, #4]
 800abda:	9800      	ldr	r0, [sp, #0]
 800abdc:	9e08      	ldr	r6, [sp, #32]
 800abde:	47b0      	blx	r6
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d1f0      	bne.n	800abc6 <_printf_common+0x86>
 800abe4:	2001      	movs	r0, #1
 800abe6:	4240      	negs	r0, r0
 800abe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abea:	2030      	movs	r0, #48	; 0x30
 800abec:	18e1      	adds	r1, r4, r3
 800abee:	3143      	adds	r1, #67	; 0x43
 800abf0:	7008      	strb	r0, [r1, #0]
 800abf2:	0021      	movs	r1, r4
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	3145      	adds	r1, #69	; 0x45
 800abf8:	7809      	ldrb	r1, [r1, #0]
 800abfa:	18a2      	adds	r2, r4, r2
 800abfc:	3243      	adds	r2, #67	; 0x43
 800abfe:	3302      	adds	r3, #2
 800ac00:	7011      	strb	r1, [r2, #0]
 800ac02:	e7c1      	b.n	800ab88 <_printf_common+0x48>
 800ac04:	0022      	movs	r2, r4
 800ac06:	2301      	movs	r3, #1
 800ac08:	321a      	adds	r2, #26
 800ac0a:	9901      	ldr	r1, [sp, #4]
 800ac0c:	9800      	ldr	r0, [sp, #0]
 800ac0e:	9e08      	ldr	r6, [sp, #32]
 800ac10:	47b0      	blx	r6
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	d0e6      	beq.n	800abe4 <_printf_common+0xa4>
 800ac16:	3701      	adds	r7, #1
 800ac18:	e7d1      	b.n	800abbe <_printf_common+0x7e>
	...

0800ac1c <_printf_i>:
 800ac1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1e:	b089      	sub	sp, #36	; 0x24
 800ac20:	9204      	str	r2, [sp, #16]
 800ac22:	000a      	movs	r2, r1
 800ac24:	3243      	adds	r2, #67	; 0x43
 800ac26:	9305      	str	r3, [sp, #20]
 800ac28:	9003      	str	r0, [sp, #12]
 800ac2a:	9202      	str	r2, [sp, #8]
 800ac2c:	7e0a      	ldrb	r2, [r1, #24]
 800ac2e:	000c      	movs	r4, r1
 800ac30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac32:	2a6e      	cmp	r2, #110	; 0x6e
 800ac34:	d100      	bne.n	800ac38 <_printf_i+0x1c>
 800ac36:	e086      	b.n	800ad46 <_printf_i+0x12a>
 800ac38:	d81f      	bhi.n	800ac7a <_printf_i+0x5e>
 800ac3a:	2a63      	cmp	r2, #99	; 0x63
 800ac3c:	d033      	beq.n	800aca6 <_printf_i+0x8a>
 800ac3e:	d808      	bhi.n	800ac52 <_printf_i+0x36>
 800ac40:	2a00      	cmp	r2, #0
 800ac42:	d100      	bne.n	800ac46 <_printf_i+0x2a>
 800ac44:	e08c      	b.n	800ad60 <_printf_i+0x144>
 800ac46:	2a58      	cmp	r2, #88	; 0x58
 800ac48:	d04d      	beq.n	800ace6 <_printf_i+0xca>
 800ac4a:	0025      	movs	r5, r4
 800ac4c:	3542      	adds	r5, #66	; 0x42
 800ac4e:	702a      	strb	r2, [r5, #0]
 800ac50:	e030      	b.n	800acb4 <_printf_i+0x98>
 800ac52:	2a64      	cmp	r2, #100	; 0x64
 800ac54:	d001      	beq.n	800ac5a <_printf_i+0x3e>
 800ac56:	2a69      	cmp	r2, #105	; 0x69
 800ac58:	d1f7      	bne.n	800ac4a <_printf_i+0x2e>
 800ac5a:	6819      	ldr	r1, [r3, #0]
 800ac5c:	6825      	ldr	r5, [r4, #0]
 800ac5e:	1d0a      	adds	r2, r1, #4
 800ac60:	0628      	lsls	r0, r5, #24
 800ac62:	d529      	bpl.n	800acb8 <_printf_i+0x9c>
 800ac64:	6808      	ldr	r0, [r1, #0]
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	da03      	bge.n	800ac74 <_printf_i+0x58>
 800ac6c:	232d      	movs	r3, #45	; 0x2d
 800ac6e:	9a02      	ldr	r2, [sp, #8]
 800ac70:	4240      	negs	r0, r0
 800ac72:	7013      	strb	r3, [r2, #0]
 800ac74:	4e6b      	ldr	r6, [pc, #428]	; (800ae24 <_printf_i+0x208>)
 800ac76:	270a      	movs	r7, #10
 800ac78:	e04f      	b.n	800ad1a <_printf_i+0xfe>
 800ac7a:	2a73      	cmp	r2, #115	; 0x73
 800ac7c:	d074      	beq.n	800ad68 <_printf_i+0x14c>
 800ac7e:	d808      	bhi.n	800ac92 <_printf_i+0x76>
 800ac80:	2a6f      	cmp	r2, #111	; 0x6f
 800ac82:	d01f      	beq.n	800acc4 <_printf_i+0xa8>
 800ac84:	2a70      	cmp	r2, #112	; 0x70
 800ac86:	d1e0      	bne.n	800ac4a <_printf_i+0x2e>
 800ac88:	2220      	movs	r2, #32
 800ac8a:	6809      	ldr	r1, [r1, #0]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	6022      	str	r2, [r4, #0]
 800ac90:	e003      	b.n	800ac9a <_printf_i+0x7e>
 800ac92:	2a75      	cmp	r2, #117	; 0x75
 800ac94:	d016      	beq.n	800acc4 <_printf_i+0xa8>
 800ac96:	2a78      	cmp	r2, #120	; 0x78
 800ac98:	d1d7      	bne.n	800ac4a <_printf_i+0x2e>
 800ac9a:	0022      	movs	r2, r4
 800ac9c:	2178      	movs	r1, #120	; 0x78
 800ac9e:	3245      	adds	r2, #69	; 0x45
 800aca0:	7011      	strb	r1, [r2, #0]
 800aca2:	4e61      	ldr	r6, [pc, #388]	; (800ae28 <_printf_i+0x20c>)
 800aca4:	e022      	b.n	800acec <_printf_i+0xd0>
 800aca6:	0025      	movs	r5, r4
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	3542      	adds	r5, #66	; 0x42
 800acac:	1d11      	adds	r1, r2, #4
 800acae:	6019      	str	r1, [r3, #0]
 800acb0:	6813      	ldr	r3, [r2, #0]
 800acb2:	702b      	strb	r3, [r5, #0]
 800acb4:	2301      	movs	r3, #1
 800acb6:	e065      	b.n	800ad84 <_printf_i+0x168>
 800acb8:	6808      	ldr	r0, [r1, #0]
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	0669      	lsls	r1, r5, #25
 800acbe:	d5d3      	bpl.n	800ac68 <_printf_i+0x4c>
 800acc0:	b200      	sxth	r0, r0
 800acc2:	e7d1      	b.n	800ac68 <_printf_i+0x4c>
 800acc4:	6819      	ldr	r1, [r3, #0]
 800acc6:	6825      	ldr	r5, [r4, #0]
 800acc8:	1d08      	adds	r0, r1, #4
 800acca:	6018      	str	r0, [r3, #0]
 800accc:	6808      	ldr	r0, [r1, #0]
 800acce:	062e      	lsls	r6, r5, #24
 800acd0:	d505      	bpl.n	800acde <_printf_i+0xc2>
 800acd2:	4e54      	ldr	r6, [pc, #336]	; (800ae24 <_printf_i+0x208>)
 800acd4:	2708      	movs	r7, #8
 800acd6:	2a6f      	cmp	r2, #111	; 0x6f
 800acd8:	d01b      	beq.n	800ad12 <_printf_i+0xf6>
 800acda:	270a      	movs	r7, #10
 800acdc:	e019      	b.n	800ad12 <_printf_i+0xf6>
 800acde:	066d      	lsls	r5, r5, #25
 800ace0:	d5f7      	bpl.n	800acd2 <_printf_i+0xb6>
 800ace2:	b280      	uxth	r0, r0
 800ace4:	e7f5      	b.n	800acd2 <_printf_i+0xb6>
 800ace6:	3145      	adds	r1, #69	; 0x45
 800ace8:	4e4e      	ldr	r6, [pc, #312]	; (800ae24 <_printf_i+0x208>)
 800acea:	700a      	strb	r2, [r1, #0]
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	6822      	ldr	r2, [r4, #0]
 800acf0:	1d01      	adds	r1, r0, #4
 800acf2:	6800      	ldr	r0, [r0, #0]
 800acf4:	6019      	str	r1, [r3, #0]
 800acf6:	0615      	lsls	r5, r2, #24
 800acf8:	d521      	bpl.n	800ad3e <_printf_i+0x122>
 800acfa:	07d3      	lsls	r3, r2, #31
 800acfc:	d502      	bpl.n	800ad04 <_printf_i+0xe8>
 800acfe:	2320      	movs	r3, #32
 800ad00:	431a      	orrs	r2, r3
 800ad02:	6022      	str	r2, [r4, #0]
 800ad04:	2710      	movs	r7, #16
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d103      	bne.n	800ad12 <_printf_i+0xf6>
 800ad0a:	2320      	movs	r3, #32
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	439a      	bics	r2, r3
 800ad10:	6022      	str	r2, [r4, #0]
 800ad12:	0023      	movs	r3, r4
 800ad14:	2200      	movs	r2, #0
 800ad16:	3343      	adds	r3, #67	; 0x43
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	6863      	ldr	r3, [r4, #4]
 800ad1c:	60a3      	str	r3, [r4, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	db58      	blt.n	800add4 <_printf_i+0x1b8>
 800ad22:	2204      	movs	r2, #4
 800ad24:	6821      	ldr	r1, [r4, #0]
 800ad26:	4391      	bics	r1, r2
 800ad28:	6021      	str	r1, [r4, #0]
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d154      	bne.n	800add8 <_printf_i+0x1bc>
 800ad2e:	9d02      	ldr	r5, [sp, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d05a      	beq.n	800adea <_printf_i+0x1ce>
 800ad34:	0025      	movs	r5, r4
 800ad36:	7833      	ldrb	r3, [r6, #0]
 800ad38:	3542      	adds	r5, #66	; 0x42
 800ad3a:	702b      	strb	r3, [r5, #0]
 800ad3c:	e055      	b.n	800adea <_printf_i+0x1ce>
 800ad3e:	0655      	lsls	r5, r2, #25
 800ad40:	d5db      	bpl.n	800acfa <_printf_i+0xde>
 800ad42:	b280      	uxth	r0, r0
 800ad44:	e7d9      	b.n	800acfa <_printf_i+0xde>
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	680d      	ldr	r5, [r1, #0]
 800ad4a:	1d10      	adds	r0, r2, #4
 800ad4c:	6949      	ldr	r1, [r1, #20]
 800ad4e:	6018      	str	r0, [r3, #0]
 800ad50:	6813      	ldr	r3, [r2, #0]
 800ad52:	062e      	lsls	r6, r5, #24
 800ad54:	d501      	bpl.n	800ad5a <_printf_i+0x13e>
 800ad56:	6019      	str	r1, [r3, #0]
 800ad58:	e002      	b.n	800ad60 <_printf_i+0x144>
 800ad5a:	066d      	lsls	r5, r5, #25
 800ad5c:	d5fb      	bpl.n	800ad56 <_printf_i+0x13a>
 800ad5e:	8019      	strh	r1, [r3, #0]
 800ad60:	2300      	movs	r3, #0
 800ad62:	9d02      	ldr	r5, [sp, #8]
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	e04f      	b.n	800ae08 <_printf_i+0x1ec>
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	1d11      	adds	r1, r2, #4
 800ad6c:	6019      	str	r1, [r3, #0]
 800ad6e:	6815      	ldr	r5, [r2, #0]
 800ad70:	2100      	movs	r1, #0
 800ad72:	6862      	ldr	r2, [r4, #4]
 800ad74:	0028      	movs	r0, r5
 800ad76:	f001 f9d3 	bl	800c120 <memchr>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d001      	beq.n	800ad82 <_printf_i+0x166>
 800ad7e:	1b40      	subs	r0, r0, r5
 800ad80:	6060      	str	r0, [r4, #4]
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	2300      	movs	r3, #0
 800ad88:	9a02      	ldr	r2, [sp, #8]
 800ad8a:	7013      	strb	r3, [r2, #0]
 800ad8c:	e03c      	b.n	800ae08 <_printf_i+0x1ec>
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	002a      	movs	r2, r5
 800ad92:	9904      	ldr	r1, [sp, #16]
 800ad94:	9803      	ldr	r0, [sp, #12]
 800ad96:	9d05      	ldr	r5, [sp, #20]
 800ad98:	47a8      	blx	r5
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d03e      	beq.n	800ae1c <_printf_i+0x200>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	079b      	lsls	r3, r3, #30
 800ada2:	d415      	bmi.n	800add0 <_printf_i+0x1b4>
 800ada4:	9b07      	ldr	r3, [sp, #28]
 800ada6:	68e0      	ldr	r0, [r4, #12]
 800ada8:	4298      	cmp	r0, r3
 800adaa:	da39      	bge.n	800ae20 <_printf_i+0x204>
 800adac:	0018      	movs	r0, r3
 800adae:	e037      	b.n	800ae20 <_printf_i+0x204>
 800adb0:	0022      	movs	r2, r4
 800adb2:	2301      	movs	r3, #1
 800adb4:	3219      	adds	r2, #25
 800adb6:	9904      	ldr	r1, [sp, #16]
 800adb8:	9803      	ldr	r0, [sp, #12]
 800adba:	9e05      	ldr	r6, [sp, #20]
 800adbc:	47b0      	blx	r6
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d02c      	beq.n	800ae1c <_printf_i+0x200>
 800adc2:	3501      	adds	r5, #1
 800adc4:	68e3      	ldr	r3, [r4, #12]
 800adc6:	9a07      	ldr	r2, [sp, #28]
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	42ab      	cmp	r3, r5
 800adcc:	dcf0      	bgt.n	800adb0 <_printf_i+0x194>
 800adce:	e7e9      	b.n	800ada4 <_printf_i+0x188>
 800add0:	2500      	movs	r5, #0
 800add2:	e7f7      	b.n	800adc4 <_printf_i+0x1a8>
 800add4:	2800      	cmp	r0, #0
 800add6:	d0ad      	beq.n	800ad34 <_printf_i+0x118>
 800add8:	9d02      	ldr	r5, [sp, #8]
 800adda:	0039      	movs	r1, r7
 800addc:	f7f5 fa36 	bl	800024c <__aeabi_uidivmod>
 800ade0:	5c73      	ldrb	r3, [r6, r1]
 800ade2:	3d01      	subs	r5, #1
 800ade4:	702b      	strb	r3, [r5, #0]
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d1f7      	bne.n	800adda <_printf_i+0x1be>
 800adea:	2f08      	cmp	r7, #8
 800adec:	d109      	bne.n	800ae02 <_printf_i+0x1e6>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	07db      	lsls	r3, r3, #31
 800adf2:	d506      	bpl.n	800ae02 <_printf_i+0x1e6>
 800adf4:	6863      	ldr	r3, [r4, #4]
 800adf6:	6922      	ldr	r2, [r4, #16]
 800adf8:	4293      	cmp	r3, r2
 800adfa:	dc02      	bgt.n	800ae02 <_printf_i+0x1e6>
 800adfc:	2330      	movs	r3, #48	; 0x30
 800adfe:	3d01      	subs	r5, #1
 800ae00:	702b      	strb	r3, [r5, #0]
 800ae02:	9b02      	ldr	r3, [sp, #8]
 800ae04:	1b5b      	subs	r3, r3, r5
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	9b05      	ldr	r3, [sp, #20]
 800ae0a:	aa07      	add	r2, sp, #28
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	0021      	movs	r1, r4
 800ae10:	9b04      	ldr	r3, [sp, #16]
 800ae12:	9803      	ldr	r0, [sp, #12]
 800ae14:	f7ff fe94 	bl	800ab40 <_printf_common>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d1b8      	bne.n	800ad8e <_printf_i+0x172>
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	4240      	negs	r0, r0
 800ae20:	b009      	add	sp, #36	; 0x24
 800ae22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae24:	0800ea38 	.word	0x0800ea38
 800ae28:	0800ea49 	.word	0x0800ea49

0800ae2c <_sbrk_r>:
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	b570      	push	{r4, r5, r6, lr}
 800ae30:	4c06      	ldr	r4, [pc, #24]	; (800ae4c <_sbrk_r+0x20>)
 800ae32:	0005      	movs	r5, r0
 800ae34:	0008      	movs	r0, r1
 800ae36:	6023      	str	r3, [r4, #0]
 800ae38:	f7f8 ff6a 	bl	8003d10 <_sbrk>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d103      	bne.n	800ae48 <_sbrk_r+0x1c>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d000      	beq.n	800ae48 <_sbrk_r+0x1c>
 800ae46:	602b      	str	r3, [r5, #0]
 800ae48:	bd70      	pop	{r4, r5, r6, pc}
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	200004cc 	.word	0x200004cc

0800ae50 <siprintf>:
 800ae50:	b40e      	push	{r1, r2, r3}
 800ae52:	b500      	push	{lr}
 800ae54:	490b      	ldr	r1, [pc, #44]	; (800ae84 <siprintf+0x34>)
 800ae56:	b09c      	sub	sp, #112	; 0x70
 800ae58:	ab1d      	add	r3, sp, #116	; 0x74
 800ae5a:	9002      	str	r0, [sp, #8]
 800ae5c:	9006      	str	r0, [sp, #24]
 800ae5e:	9107      	str	r1, [sp, #28]
 800ae60:	9104      	str	r1, [sp, #16]
 800ae62:	4809      	ldr	r0, [pc, #36]	; (800ae88 <siprintf+0x38>)
 800ae64:	4909      	ldr	r1, [pc, #36]	; (800ae8c <siprintf+0x3c>)
 800ae66:	cb04      	ldmia	r3!, {r2}
 800ae68:	9105      	str	r1, [sp, #20]
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	a902      	add	r1, sp, #8
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	f001 fcf6 	bl	800c860 <_svfiprintf_r>
 800ae74:	2300      	movs	r3, #0
 800ae76:	9a02      	ldr	r2, [sp, #8]
 800ae78:	7013      	strb	r3, [r2, #0]
 800ae7a:	b01c      	add	sp, #112	; 0x70
 800ae7c:	bc08      	pop	{r3}
 800ae7e:	b003      	add	sp, #12
 800ae80:	4718      	bx	r3
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	7fffffff 	.word	0x7fffffff
 800ae88:	20000010 	.word	0x20000010
 800ae8c:	ffff0208 	.word	0xffff0208

0800ae90 <time>:
 800ae90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae92:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <time+0x30>)
 800ae94:	0004      	movs	r4, r0
 800ae96:	2200      	movs	r2, #0
 800ae98:	4669      	mov	r1, sp
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	f001 f90a 	bl	800c0b4 <_gettimeofday_r>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	da04      	bge.n	800aeae <time+0x1e>
 800aea4:	2201      	movs	r2, #1
 800aea6:	4252      	negs	r2, r2
 800aea8:	17d3      	asrs	r3, r2, #31
 800aeaa:	9200      	str	r2, [sp, #0]
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	9800      	ldr	r0, [sp, #0]
 800aeb0:	9901      	ldr	r1, [sp, #4]
 800aeb2:	2c00      	cmp	r4, #0
 800aeb4:	d001      	beq.n	800aeba <time+0x2a>
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	6061      	str	r1, [r4, #4]
 800aeba:	b004      	add	sp, #16
 800aebc:	bd10      	pop	{r4, pc}
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	20000010 	.word	0x20000010

0800aec4 <__tzcalc_limits>:
 800aec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec6:	b089      	sub	sp, #36	; 0x24
 800aec8:	0004      	movs	r4, r0
 800aeca:	f001 f905 	bl	800c0d8 <__gettzinfo>
 800aece:	4b4e      	ldr	r3, [pc, #312]	; (800b008 <__tzcalc_limits+0x144>)
 800aed0:	0006      	movs	r6, r0
 800aed2:	2000      	movs	r0, #0
 800aed4:	429c      	cmp	r4, r3
 800aed6:	dd5f      	ble.n	800af98 <__tzcalc_limits+0xd4>
 800aed8:	256e      	movs	r5, #110	; 0x6e
 800aeda:	2164      	movs	r1, #100	; 0x64
 800aedc:	4b4b      	ldr	r3, [pc, #300]	; (800b00c <__tzcalc_limits+0x148>)
 800aede:	35ff      	adds	r5, #255	; 0xff
 800aee0:	18e0      	adds	r0, r4, r3
 800aee2:	4345      	muls	r5, r0
 800aee4:	4b4a      	ldr	r3, [pc, #296]	; (800b010 <__tzcalc_limits+0x14c>)
 800aee6:	6074      	str	r4, [r6, #4]
 800aee8:	18e0      	adds	r0, r4, r3
 800aeea:	4b4a      	ldr	r3, [pc, #296]	; (800b014 <__tzcalc_limits+0x150>)
 800aeec:	1080      	asrs	r0, r0, #2
 800aeee:	182d      	adds	r5, r5, r0
 800aef0:	4249      	negs	r1, r1
 800aef2:	18e0      	adds	r0, r4, r3
 800aef4:	f7f5 f9ae 	bl	8000254 <__divsi3>
 800aef8:	21c8      	movs	r1, #200	; 0xc8
 800aefa:	4b47      	ldr	r3, [pc, #284]	; (800b018 <__tzcalc_limits+0x154>)
 800aefc:	182d      	adds	r5, r5, r0
 800aefe:	0049      	lsls	r1, r1, #1
 800af00:	18e0      	adds	r0, r4, r3
 800af02:	f7f5 f9a7 	bl	8000254 <__divsi3>
 800af06:	2164      	movs	r1, #100	; 0x64
 800af08:	182b      	adds	r3, r5, r0
 800af0a:	0020      	movs	r0, r4
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	f7f5 fa87 	bl	8000420 <__aeabi_idivmod>
 800af12:	9101      	str	r1, [sp, #4]
 800af14:	21c8      	movs	r1, #200	; 0xc8
 800af16:	0020      	movs	r0, r4
 800af18:	0049      	lsls	r1, r1, #1
 800af1a:	f7f5 fa81 	bl	8000420 <__aeabi_idivmod>
 800af1e:	000a      	movs	r2, r1
 800af20:	4253      	negs	r3, r2
 800af22:	415a      	adcs	r2, r3
 800af24:	0033      	movs	r3, r6
 800af26:	3358      	adds	r3, #88	; 0x58
 800af28:	9307      	str	r3, [sp, #28]
 800af2a:	2303      	movs	r3, #3
 800af2c:	0035      	movs	r5, r6
 800af2e:	401c      	ands	r4, r3
 800af30:	9102      	str	r1, [sp, #8]
 800af32:	9204      	str	r2, [sp, #16]
 800af34:	3508      	adds	r5, #8
 800af36:	9405      	str	r4, [sp, #20]
 800af38:	782b      	ldrb	r3, [r5, #0]
 800af3a:	68ef      	ldr	r7, [r5, #12]
 800af3c:	2b4a      	cmp	r3, #74	; 0x4a
 800af3e:	d12d      	bne.n	800af9c <__tzcalc_limits+0xd8>
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	19dc      	adds	r4, r3, r7
 800af44:	9b05      	ldr	r3, [sp, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d102      	bne.n	800af50 <__tzcalc_limits+0x8c>
 800af4a:	9b01      	ldr	r3, [sp, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d103      	bne.n	800af58 <__tzcalc_limits+0x94>
 800af50:	2100      	movs	r1, #0
 800af52:	9b02      	ldr	r3, [sp, #8]
 800af54:	428b      	cmp	r3, r1
 800af56:	d103      	bne.n	800af60 <__tzcalc_limits+0x9c>
 800af58:	2101      	movs	r1, #1
 800af5a:	2f3b      	cmp	r7, #59	; 0x3b
 800af5c:	dc00      	bgt.n	800af60 <__tzcalc_limits+0x9c>
 800af5e:	2100      	movs	r1, #0
 800af60:	1864      	adds	r4, r4, r1
 800af62:	3c01      	subs	r4, #1
 800af64:	492d      	ldr	r1, [pc, #180]	; (800b01c <__tzcalc_limits+0x158>)
 800af66:	692b      	ldr	r3, [r5, #16]
 800af68:	434c      	muls	r4, r1
 800af6a:	18e4      	adds	r4, r4, r3
 800af6c:	6a2b      	ldr	r3, [r5, #32]
 800af6e:	18e4      	adds	r4, r4, r3
 800af70:	61ac      	str	r4, [r5, #24]
 800af72:	9b07      	ldr	r3, [sp, #28]
 800af74:	17e4      	asrs	r4, r4, #31
 800af76:	61ec      	str	r4, [r5, #28]
 800af78:	3528      	adds	r5, #40	; 0x28
 800af7a:	42ab      	cmp	r3, r5
 800af7c:	d1dc      	bne.n	800af38 <__tzcalc_limits+0x74>
 800af7e:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
 800af80:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800af82:	2301      	movs	r3, #1
 800af84:	4291      	cmp	r1, r2
 800af86:	dc05      	bgt.n	800af94 <__tzcalc_limits+0xd0>
 800af88:	d103      	bne.n	800af92 <__tzcalc_limits+0xce>
 800af8a:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 800af8c:	6a31      	ldr	r1, [r6, #32]
 800af8e:	428a      	cmp	r2, r1
 800af90:	d800      	bhi.n	800af94 <__tzcalc_limits+0xd0>
 800af92:	2300      	movs	r3, #0
 800af94:	2001      	movs	r0, #1
 800af96:	6033      	str	r3, [r6, #0]
 800af98:	b009      	add	sp, #36	; 0x24
 800af9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af9c:	2b44      	cmp	r3, #68	; 0x44
 800af9e:	d102      	bne.n	800afa6 <__tzcalc_limits+0xe2>
 800afa0:	9b00      	ldr	r3, [sp, #0]
 800afa2:	19dc      	adds	r4, r3, r7
 800afa4:	e7de      	b.n	800af64 <__tzcalc_limits+0xa0>
 800afa6:	9b05      	ldr	r3, [sp, #20]
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <__tzcalc_limits+0xf2>
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d000      	beq.n	800afb6 <__tzcalc_limits+0xf2>
 800afb4:	2201      	movs	r2, #1
 800afb6:	2330      	movs	r3, #48	; 0x30
 800afb8:	4353      	muls	r3, r2
 800afba:	9306      	str	r3, [sp, #24]
 800afbc:	4b18      	ldr	r3, [pc, #96]	; (800b020 <__tzcalc_limits+0x15c>)
 800afbe:	2100      	movs	r1, #0
 800afc0:	469c      	mov	ip, r3
 800afc2:	6868      	ldr	r0, [r5, #4]
 800afc4:	9c00      	ldr	r4, [sp, #0]
 800afc6:	9a06      	ldr	r2, [sp, #24]
 800afc8:	3101      	adds	r1, #1
 800afca:	008b      	lsls	r3, r1, #2
 800afcc:	189b      	adds	r3, r3, r2
 800afce:	4662      	mov	r2, ip
 800afd0:	3b04      	subs	r3, #4
 800afd2:	58d3      	ldr	r3, [r2, r3]
 800afd4:	9303      	str	r3, [sp, #12]
 800afd6:	4288      	cmp	r0, r1
 800afd8:	dc10      	bgt.n	800affc <__tzcalc_limits+0x138>
 800afda:	1d20      	adds	r0, r4, #4
 800afdc:	2107      	movs	r1, #7
 800afde:	f7f5 fa1f 	bl	8000420 <__aeabi_idivmod>
 800afe2:	1a79      	subs	r1, r7, r1
 800afe4:	d500      	bpl.n	800afe8 <__tzcalc_limits+0x124>
 800afe6:	3107      	adds	r1, #7
 800afe8:	68ab      	ldr	r3, [r5, #8]
 800afea:	1e5a      	subs	r2, r3, #1
 800afec:	2307      	movs	r3, #7
 800afee:	4353      	muls	r3, r2
 800aff0:	1859      	adds	r1, r3, r1
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	4299      	cmp	r1, r3
 800aff6:	da04      	bge.n	800b002 <__tzcalc_limits+0x13e>
 800aff8:	1864      	adds	r4, r4, r1
 800affa:	e7b3      	b.n	800af64 <__tzcalc_limits+0xa0>
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	18e4      	adds	r4, r4, r3
 800b000:	e7e1      	b.n	800afc6 <__tzcalc_limits+0x102>
 800b002:	3907      	subs	r1, #7
 800b004:	e7f5      	b.n	800aff2 <__tzcalc_limits+0x12e>
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	000007b1 	.word	0x000007b1
 800b00c:	fffff84e 	.word	0xfffff84e
 800b010:	fffff84f 	.word	0xfffff84f
 800b014:	fffff893 	.word	0xfffff893
 800b018:	fffff9bf 	.word	0xfffff9bf
 800b01c:	00015180 	.word	0x00015180
 800b020:	0800eaa4 	.word	0x0800eaa4

0800b024 <__tz_lock>:
 800b024:	4770      	bx	lr

0800b026 <__tz_unlock>:
 800b026:	4770      	bx	lr

0800b028 <_tzset_unlocked>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	4b02      	ldr	r3, [pc, #8]	; (800b034 <_tzset_unlocked+0xc>)
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	f000 f803 	bl	800b038 <_tzset_unlocked_r>
 800b032:	bd10      	pop	{r4, pc}
 800b034:	20000010 	.word	0x20000010

0800b038 <_tzset_unlocked_r>:
 800b038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b03a:	b08d      	sub	sp, #52	; 0x34
 800b03c:	0007      	movs	r7, r0
 800b03e:	f001 f84b 	bl	800c0d8 <__gettzinfo>
 800b042:	49af      	ldr	r1, [pc, #700]	; (800b300 <_tzset_unlocked_r+0x2c8>)
 800b044:	0006      	movs	r6, r0
 800b046:	0038      	movs	r0, r7
 800b048:	f001 f82e 	bl	800c0a8 <_getenv_r>
 800b04c:	4dad      	ldr	r5, [pc, #692]	; (800b304 <_tzset_unlocked_r+0x2cc>)
 800b04e:	1e04      	subs	r4, r0, #0
 800b050:	d10d      	bne.n	800b06e <_tzset_unlocked_r+0x36>
 800b052:	4bad      	ldr	r3, [pc, #692]	; (800b308 <_tzset_unlocked_r+0x2d0>)
 800b054:	4aad      	ldr	r2, [pc, #692]	; (800b30c <_tzset_unlocked_r+0x2d4>)
 800b056:	6018      	str	r0, [r3, #0]
 800b058:	4bad      	ldr	r3, [pc, #692]	; (800b310 <_tzset_unlocked_r+0x2d8>)
 800b05a:	6018      	str	r0, [r3, #0]
 800b05c:	4bad      	ldr	r3, [pc, #692]	; (800b314 <_tzset_unlocked_r+0x2dc>)
 800b05e:	6828      	ldr	r0, [r5, #0]
 800b060:	601a      	str	r2, [r3, #0]
 800b062:	605a      	str	r2, [r3, #4]
 800b064:	f001 f852 	bl	800c10c <free>
 800b068:	602c      	str	r4, [r5, #0]
 800b06a:	b00d      	add	sp, #52	; 0x34
 800b06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06e:	6829      	ldr	r1, [r5, #0]
 800b070:	2900      	cmp	r1, #0
 800b072:	d159      	bne.n	800b128 <_tzset_unlocked_r+0xf0>
 800b074:	6828      	ldr	r0, [r5, #0]
 800b076:	f001 f849 	bl	800c10c <free>
 800b07a:	0020      	movs	r0, r4
 800b07c:	f7f5 f844 	bl	8000108 <strlen>
 800b080:	1c41      	adds	r1, r0, #1
 800b082:	0038      	movs	r0, r7
 800b084:	f7ff fa16 	bl	800a4b4 <_malloc_r>
 800b088:	6028      	str	r0, [r5, #0]
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d151      	bne.n	800b132 <_tzset_unlocked_r+0xfa>
 800b08e:	7823      	ldrb	r3, [r4, #0]
 800b090:	49a1      	ldr	r1, [pc, #644]	; (800b318 <_tzset_unlocked_r+0x2e0>)
 800b092:	3b3a      	subs	r3, #58	; 0x3a
 800b094:	425a      	negs	r2, r3
 800b096:	4153      	adcs	r3, r2
 800b098:	18e4      	adds	r4, r4, r3
 800b09a:	4aa0      	ldr	r2, [pc, #640]	; (800b31c <_tzset_unlocked_r+0x2e4>)
 800b09c:	ab0a      	add	r3, sp, #40	; 0x28
 800b09e:	0020      	movs	r0, r4
 800b0a0:	f001 fcdc 	bl	800ca5c <siscanf>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	dde0      	ble.n	800b06a <_tzset_unlocked_r+0x32>
 800b0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0aa:	18e4      	adds	r4, r4, r3
 800b0ac:	7823      	ldrb	r3, [r4, #0]
 800b0ae:	2b2d      	cmp	r3, #45	; 0x2d
 800b0b0:	d143      	bne.n	800b13a <_tzset_unlocked_r+0x102>
 800b0b2:	3b2e      	subs	r3, #46	; 0x2e
 800b0b4:	3401      	adds	r4, #1
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	2716      	movs	r7, #22
 800b0ba:	ab02      	add	r3, sp, #8
 800b0bc:	18ff      	adds	r7, r7, r3
 800b0be:	2300      	movs	r3, #0
 800b0c0:	ad08      	add	r5, sp, #32
 800b0c2:	803b      	strh	r3, [r7, #0]
 800b0c4:	802b      	strh	r3, [r5, #0]
 800b0c6:	ab0a      	add	r3, sp, #40	; 0x28
 800b0c8:	9303      	str	r3, [sp, #12]
 800b0ca:	9502      	str	r5, [sp, #8]
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	9700      	str	r7, [sp, #0]
 800b0d0:	aa07      	add	r2, sp, #28
 800b0d2:	4993      	ldr	r1, [pc, #588]	; (800b320 <_tzset_unlocked_r+0x2e8>)
 800b0d4:	0020      	movs	r0, r4
 800b0d6:	f001 fcc1 	bl	800ca5c <siscanf>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	ddc5      	ble.n	800b06a <_tzset_unlocked_r+0x32>
 800b0de:	233c      	movs	r3, #60	; 0x3c
 800b0e0:	883a      	ldrh	r2, [r7, #0]
 800b0e2:	4f90      	ldr	r7, [pc, #576]	; (800b324 <_tzset_unlocked_r+0x2ec>)
 800b0e4:	4353      	muls	r3, r2
 800b0e6:	882a      	ldrh	r2, [r5, #0]
 800b0e8:	4d8a      	ldr	r5, [pc, #552]	; (800b314 <_tzset_unlocked_r+0x2dc>)
 800b0ea:	189b      	adds	r3, r3, r2
 800b0ec:	aa02      	add	r2, sp, #8
 800b0ee:	8a91      	ldrh	r1, [r2, #20]
 800b0f0:	22e1      	movs	r2, #225	; 0xe1
 800b0f2:	0112      	lsls	r2, r2, #4
 800b0f4:	434a      	muls	r2, r1
 800b0f6:	189b      	adds	r3, r3, r2
 800b0f8:	9a04      	ldr	r2, [sp, #16]
 800b0fa:	4987      	ldr	r1, [pc, #540]	; (800b318 <_tzset_unlocked_r+0x2e0>)
 800b0fc:	435a      	muls	r2, r3
 800b0fe:	4b87      	ldr	r3, [pc, #540]	; (800b31c <_tzset_unlocked_r+0x2e4>)
 800b100:	62b2      	str	r2, [r6, #40]	; 0x28
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b106:	003a      	movs	r2, r7
 800b108:	18e4      	adds	r4, r4, r3
 800b10a:	0020      	movs	r0, r4
 800b10c:	ab0a      	add	r3, sp, #40	; 0x28
 800b10e:	f001 fca5 	bl	800ca5c <siscanf>
 800b112:	2800      	cmp	r0, #0
 800b114:	dc18      	bgt.n	800b148 <_tzset_unlocked_r+0x110>
 800b116:	682b      	ldr	r3, [r5, #0]
 800b118:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800b11a:	606b      	str	r3, [r5, #4]
 800b11c:	4b7a      	ldr	r3, [pc, #488]	; (800b308 <_tzset_unlocked_r+0x2d0>)
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	2200      	movs	r2, #0
 800b122:	4b7b      	ldr	r3, [pc, #492]	; (800b310 <_tzset_unlocked_r+0x2d8>)
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	e7a0      	b.n	800b06a <_tzset_unlocked_r+0x32>
 800b128:	f7f4 fff5 	bl	8000116 <strcmp>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d09c      	beq.n	800b06a <_tzset_unlocked_r+0x32>
 800b130:	e7a0      	b.n	800b074 <_tzset_unlocked_r+0x3c>
 800b132:	0021      	movs	r1, r4
 800b134:	f001 fcbc 	bl	800cab0 <strcpy>
 800b138:	e7a9      	b.n	800b08e <_tzset_unlocked_r+0x56>
 800b13a:	2201      	movs	r2, #1
 800b13c:	3b2b      	subs	r3, #43	; 0x2b
 800b13e:	9204      	str	r2, [sp, #16]
 800b140:	425a      	negs	r2, r3
 800b142:	4153      	adcs	r3, r2
 800b144:	18e4      	adds	r4, r4, r3
 800b146:	e7b7      	b.n	800b0b8 <_tzset_unlocked_r+0x80>
 800b148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b14a:	606f      	str	r7, [r5, #4]
 800b14c:	18e4      	adds	r4, r4, r3
 800b14e:	7823      	ldrb	r3, [r4, #0]
 800b150:	2b2d      	cmp	r3, #45	; 0x2d
 800b152:	d000      	beq.n	800b156 <_tzset_unlocked_r+0x11e>
 800b154:	e08d      	b.n	800b272 <_tzset_unlocked_r+0x23a>
 800b156:	3b2e      	subs	r3, #46	; 0x2e
 800b158:	3401      	adds	r4, #1
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	2716      	movs	r7, #22
 800b15e:	2300      	movs	r3, #0
 800b160:	aa02      	add	r2, sp, #8
 800b162:	18bf      	adds	r7, r7, r2
 800b164:	ad07      	add	r5, sp, #28
 800b166:	8313      	strh	r3, [r2, #24]
 800b168:	802b      	strh	r3, [r5, #0]
 800b16a:	803b      	strh	r3, [r7, #0]
 800b16c:	aa08      	add	r2, sp, #32
 800b16e:	930a      	str	r3, [sp, #40]	; 0x28
 800b170:	ab0a      	add	r3, sp, #40	; 0x28
 800b172:	9202      	str	r2, [sp, #8]
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	9700      	str	r7, [sp, #0]
 800b17a:	002a      	movs	r2, r5
 800b17c:	4968      	ldr	r1, [pc, #416]	; (800b320 <_tzset_unlocked_r+0x2e8>)
 800b17e:	0020      	movs	r0, r4
 800b180:	f001 fc6c 	bl	800ca5c <siscanf>
 800b184:	2800      	cmp	r0, #0
 800b186:	dd00      	ble.n	800b18a <_tzset_unlocked_r+0x152>
 800b188:	e07a      	b.n	800b280 <_tzset_unlocked_r+0x248>
 800b18a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800b18c:	4a66      	ldr	r2, [pc, #408]	; (800b328 <_tzset_unlocked_r+0x2f0>)
 800b18e:	189b      	adds	r3, r3, r2
 800b190:	6533      	str	r3, [r6, #80]	; 0x50
 800b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b194:	0037      	movs	r7, r6
 800b196:	18e4      	adds	r4, r4, r3
 800b198:	2300      	movs	r3, #0
 800b19a:	3708      	adds	r7, #8
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	7823      	ldrb	r3, [r4, #0]
 800b1a0:	3b2c      	subs	r3, #44	; 0x2c
 800b1a2:	425a      	negs	r2, r3
 800b1a4:	4153      	adcs	r3, r2
 800b1a6:	18e4      	adds	r4, r4, r3
 800b1a8:	7825      	ldrb	r5, [r4, #0]
 800b1aa:	2d4d      	cmp	r5, #77	; 0x4d
 800b1ac:	d000      	beq.n	800b1b0 <_tzset_unlocked_r+0x178>
 800b1ae:	e078      	b.n	800b2a2 <_tzset_unlocked_r+0x26a>
 800b1b0:	221e      	movs	r2, #30
 800b1b2:	a902      	add	r1, sp, #8
 800b1b4:	1852      	adds	r2, r2, r1
 800b1b6:	9202      	str	r2, [sp, #8]
 800b1b8:	aa09      	add	r2, sp, #36	; 0x24
 800b1ba:	9200      	str	r2, [sp, #0]
 800b1bc:	221a      	movs	r2, #26
 800b1be:	ab0a      	add	r3, sp, #40	; 0x28
 800b1c0:	1852      	adds	r2, r2, r1
 800b1c2:	9303      	str	r3, [sp, #12]
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	4959      	ldr	r1, [pc, #356]	; (800b32c <_tzset_unlocked_r+0x2f4>)
 800b1c8:	0020      	movs	r0, r4
 800b1ca:	f001 fc47 	bl	800ca5c <siscanf>
 800b1ce:	2803      	cmp	r0, #3
 800b1d0:	d000      	beq.n	800b1d4 <_tzset_unlocked_r+0x19c>
 800b1d2:	e74a      	b.n	800b06a <_tzset_unlocked_r+0x32>
 800b1d4:	ab02      	add	r3, sp, #8
 800b1d6:	8b59      	ldrh	r1, [r3, #26]
 800b1d8:	1e4b      	subs	r3, r1, #1
 800b1da:	2b0b      	cmp	r3, #11
 800b1dc:	d900      	bls.n	800b1e0 <_tzset_unlocked_r+0x1a8>
 800b1de:	e744      	b.n	800b06a <_tzset_unlocked_r+0x32>
 800b1e0:	ab02      	add	r3, sp, #8
 800b1e2:	8b9a      	ldrh	r2, [r3, #28]
 800b1e4:	1e53      	subs	r3, r2, #1
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d900      	bls.n	800b1ec <_tzset_unlocked_r+0x1b4>
 800b1ea:	e73e      	b.n	800b06a <_tzset_unlocked_r+0x32>
 800b1ec:	ab02      	add	r3, sp, #8
 800b1ee:	8bdb      	ldrh	r3, [r3, #30]
 800b1f0:	2b06      	cmp	r3, #6
 800b1f2:	d900      	bls.n	800b1f6 <_tzset_unlocked_r+0x1be>
 800b1f4:	e739      	b.n	800b06a <_tzset_unlocked_r+0x32>
 800b1f6:	703d      	strb	r5, [r7, #0]
 800b1f8:	6079      	str	r1, [r7, #4]
 800b1fa:	60ba      	str	r2, [r7, #8]
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b200:	18e5      	adds	r5, r4, r3
 800b202:	2302      	movs	r3, #2
 800b204:	aa07      	add	r2, sp, #28
 800b206:	8013      	strh	r3, [r2, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	a902      	add	r1, sp, #8
 800b20c:	ac08      	add	r4, sp, #32
 800b20e:	82cb      	strh	r3, [r1, #22]
 800b210:	8023      	strh	r3, [r4, #0]
 800b212:	930a      	str	r3, [sp, #40]	; 0x28
 800b214:	782b      	ldrb	r3, [r5, #0]
 800b216:	2b2f      	cmp	r3, #47	; 0x2f
 800b218:	d10b      	bne.n	800b232 <_tzset_unlocked_r+0x1fa>
 800b21a:	2116      	movs	r1, #22
 800b21c:	a802      	add	r0, sp, #8
 800b21e:	1809      	adds	r1, r1, r0
 800b220:	ab0a      	add	r3, sp, #40	; 0x28
 800b222:	9100      	str	r1, [sp, #0]
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	9402      	str	r4, [sp, #8]
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	4941      	ldr	r1, [pc, #260]	; (800b330 <_tzset_unlocked_r+0x2f8>)
 800b22c:	0028      	movs	r0, r5
 800b22e:	f001 fc15 	bl	800ca5c <siscanf>
 800b232:	ab02      	add	r3, sp, #8
 800b234:	8ada      	ldrh	r2, [r3, #22]
 800b236:	233c      	movs	r3, #60	; 0x3c
 800b238:	4353      	muls	r3, r2
 800b23a:	8822      	ldrh	r2, [r4, #0]
 800b23c:	189b      	adds	r3, r3, r2
 800b23e:	aa07      	add	r2, sp, #28
 800b240:	8811      	ldrh	r1, [r2, #0]
 800b242:	22e1      	movs	r2, #225	; 0xe1
 800b244:	0112      	lsls	r2, r2, #4
 800b246:	434a      	muls	r2, r1
 800b248:	189b      	adds	r3, r3, r2
 800b24a:	613b      	str	r3, [r7, #16]
 800b24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24e:	3728      	adds	r7, #40	; 0x28
 800b250:	18ec      	adds	r4, r5, r3
 800b252:	9b04      	ldr	r3, [sp, #16]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d122      	bne.n	800b29e <_tzset_unlocked_r+0x266>
 800b258:	6870      	ldr	r0, [r6, #4]
 800b25a:	f7ff fe33 	bl	800aec4 <__tzcalc_limits>
 800b25e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800b260:	4b29      	ldr	r3, [pc, #164]	; (800b308 <_tzset_unlocked_r+0x2d0>)
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800b266:	1a9b      	subs	r3, r3, r2
 800b268:	1e5a      	subs	r2, r3, #1
 800b26a:	4193      	sbcs	r3, r2
 800b26c:	4a28      	ldr	r2, [pc, #160]	; (800b310 <_tzset_unlocked_r+0x2d8>)
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	e6fb      	b.n	800b06a <_tzset_unlocked_r+0x32>
 800b272:	2201      	movs	r2, #1
 800b274:	3b2b      	subs	r3, #43	; 0x2b
 800b276:	9204      	str	r2, [sp, #16]
 800b278:	425a      	negs	r2, r3
 800b27a:	4153      	adcs	r3, r2
 800b27c:	18e4      	adds	r4, r4, r3
 800b27e:	e76d      	b.n	800b15c <_tzset_unlocked_r+0x124>
 800b280:	233c      	movs	r3, #60	; 0x3c
 800b282:	883a      	ldrh	r2, [r7, #0]
 800b284:	8829      	ldrh	r1, [r5, #0]
 800b286:	4353      	muls	r3, r2
 800b288:	aa02      	add	r2, sp, #8
 800b28a:	8b12      	ldrh	r2, [r2, #24]
 800b28c:	189b      	adds	r3, r3, r2
 800b28e:	22e1      	movs	r2, #225	; 0xe1
 800b290:	0112      	lsls	r2, r2, #4
 800b292:	434a      	muls	r2, r1
 800b294:	189b      	adds	r3, r3, r2
 800b296:	9a04      	ldr	r2, [sp, #16]
 800b298:	435a      	muls	r2, r3
 800b29a:	0013      	movs	r3, r2
 800b29c:	e778      	b.n	800b190 <_tzset_unlocked_r+0x158>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e77c      	b.n	800b19c <_tzset_unlocked_r+0x164>
 800b2a2:	2344      	movs	r3, #68	; 0x44
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	2d4a      	cmp	r5, #74	; 0x4a
 800b2a8:	d101      	bne.n	800b2ae <_tzset_unlocked_r+0x276>
 800b2aa:	3401      	adds	r4, #1
 800b2ac:	9505      	str	r5, [sp, #20]
 800b2ae:	220a      	movs	r2, #10
 800b2b0:	a90b      	add	r1, sp, #44	; 0x2c
 800b2b2:	0020      	movs	r0, r4
 800b2b4:	f001 fca8 	bl	800cc08 <strtoul>
 800b2b8:	231e      	movs	r3, #30
 800b2ba:	aa02      	add	r2, sp, #8
 800b2bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b2be:	189b      	adds	r3, r3, r2
 800b2c0:	8018      	strh	r0, [r3, #0]
 800b2c2:	42a5      	cmp	r5, r4
 800b2c4:	d116      	bne.n	800b2f4 <_tzset_unlocked_r+0x2bc>
 800b2c6:	9b04      	ldr	r3, [sp, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d108      	bne.n	800b2de <_tzset_unlocked_r+0x2a6>
 800b2cc:	334d      	adds	r3, #77	; 0x4d
 800b2ce:	7233      	strb	r3, [r6, #8]
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	60f3      	str	r3, [r6, #12]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	6133      	str	r3, [r6, #16]
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	6173      	str	r3, [r6, #20]
 800b2dc:	e791      	b.n	800b202 <_tzset_unlocked_r+0x1ca>
 800b2de:	0033      	movs	r3, r6
 800b2e0:	224d      	movs	r2, #77	; 0x4d
 800b2e2:	3330      	adds	r3, #48	; 0x30
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	230b      	movs	r3, #11
 800b2e8:	6373      	str	r3, [r6, #52]	; 0x34
 800b2ea:	3b0a      	subs	r3, #10
 800b2ec:	63b3      	str	r3, [r6, #56]	; 0x38
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b2f2:	e786      	b.n	800b202 <_tzset_unlocked_r+0x1ca>
 800b2f4:	9b05      	ldr	r3, [sp, #20]
 800b2f6:	b280      	uxth	r0, r0
 800b2f8:	703b      	strb	r3, [r7, #0]
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	e781      	b.n	800b202 <_tzset_unlocked_r+0x1ca>
 800b2fe:	46c0      	nop			; (mov r8, r8)
 800b300:	0800ea5a 	.word	0x0800ea5a
 800b304:	20000294 	.word	0x20000294
 800b308:	2000029c 	.word	0x2000029c
 800b30c:	0800ea5d 	.word	0x0800ea5d
 800b310:	20000298 	.word	0x20000298
 800b314:	20000074 	.word	0x20000074
 800b318:	0800ea61 	.word	0x0800ea61
 800b31c:	20000287 	.word	0x20000287
 800b320:	0800ea84 	.word	0x0800ea84
 800b324:	2000027c 	.word	0x2000027c
 800b328:	fffff1f0 	.word	0xfffff1f0
 800b32c:	0800ea70 	.word	0x0800ea70
 800b330:	0800ea83 	.word	0x0800ea83

0800b334 <div>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	000e      	movs	r6, r1
 800b338:	0004      	movs	r4, r0
 800b33a:	0011      	movs	r1, r2
 800b33c:	0030      	movs	r0, r6
 800b33e:	0015      	movs	r5, r2
 800b340:	f7f5 f86e 	bl	8000420 <__aeabi_idivmod>
 800b344:	2e00      	cmp	r6, #0
 800b346:	db07      	blt.n	800b358 <div+0x24>
 800b348:	2900      	cmp	r1, #0
 800b34a:	da01      	bge.n	800b350 <div+0x1c>
 800b34c:	3001      	adds	r0, #1
 800b34e:	1b49      	subs	r1, r1, r5
 800b350:	6020      	str	r0, [r4, #0]
 800b352:	6061      	str	r1, [r4, #4]
 800b354:	0020      	movs	r0, r4
 800b356:	bd70      	pop	{r4, r5, r6, pc}
 800b358:	2900      	cmp	r1, #0
 800b35a:	ddf9      	ble.n	800b350 <div+0x1c>
 800b35c:	3801      	subs	r0, #1
 800b35e:	1949      	adds	r1, r1, r5
 800b360:	e7f6      	b.n	800b350 <div+0x1c>

0800b362 <quorem>:
 800b362:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b364:	6903      	ldr	r3, [r0, #16]
 800b366:	690c      	ldr	r4, [r1, #16]
 800b368:	b089      	sub	sp, #36	; 0x24
 800b36a:	0007      	movs	r7, r0
 800b36c:	9105      	str	r1, [sp, #20]
 800b36e:	2600      	movs	r6, #0
 800b370:	42a3      	cmp	r3, r4
 800b372:	db65      	blt.n	800b440 <quorem+0xde>
 800b374:	000b      	movs	r3, r1
 800b376:	3c01      	subs	r4, #1
 800b378:	3314      	adds	r3, #20
 800b37a:	00a5      	lsls	r5, r4, #2
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	195b      	adds	r3, r3, r5
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	0003      	movs	r3, r0
 800b384:	3314      	adds	r3, #20
 800b386:	9302      	str	r3, [sp, #8]
 800b388:	195d      	adds	r5, r3, r5
 800b38a:	9b04      	ldr	r3, [sp, #16]
 800b38c:	6828      	ldr	r0, [r5, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	1c59      	adds	r1, r3, #1
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	f7f4 fed4 	bl	8000140 <__udivsi3>
 800b398:	9001      	str	r0, [sp, #4]
 800b39a:	42b0      	cmp	r0, r6
 800b39c:	d029      	beq.n	800b3f2 <quorem+0x90>
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	9802      	ldr	r0, [sp, #8]
 800b3a2:	469c      	mov	ip, r3
 800b3a4:	9606      	str	r6, [sp, #24]
 800b3a6:	4662      	mov	r2, ip
 800b3a8:	ca08      	ldmia	r2!, {r3}
 800b3aa:	4694      	mov	ip, r2
 800b3ac:	9a01      	ldr	r2, [sp, #4]
 800b3ae:	b299      	uxth	r1, r3
 800b3b0:	4351      	muls	r1, r2
 800b3b2:	0c1b      	lsrs	r3, r3, #16
 800b3b4:	4353      	muls	r3, r2
 800b3b6:	1989      	adds	r1, r1, r6
 800b3b8:	0c0a      	lsrs	r2, r1, #16
 800b3ba:	189b      	adds	r3, r3, r2
 800b3bc:	9307      	str	r3, [sp, #28]
 800b3be:	0c1e      	lsrs	r6, r3, #16
 800b3c0:	6803      	ldr	r3, [r0, #0]
 800b3c2:	b289      	uxth	r1, r1
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	9b06      	ldr	r3, [sp, #24]
 800b3c8:	18d2      	adds	r2, r2, r3
 800b3ca:	6803      	ldr	r3, [r0, #0]
 800b3cc:	1a52      	subs	r2, r2, r1
 800b3ce:	0c19      	lsrs	r1, r3, #16
 800b3d0:	466b      	mov	r3, sp
 800b3d2:	8b9b      	ldrh	r3, [r3, #28]
 800b3d4:	1acb      	subs	r3, r1, r3
 800b3d6:	1411      	asrs	r1, r2, #16
 800b3d8:	185b      	adds	r3, r3, r1
 800b3da:	1419      	asrs	r1, r3, #16
 800b3dc:	b292      	uxth	r2, r2
 800b3de:	041b      	lsls	r3, r3, #16
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	9106      	str	r1, [sp, #24]
 800b3e6:	c004      	stmia	r0!, {r2}
 800b3e8:	4563      	cmp	r3, ip
 800b3ea:	d2dc      	bcs.n	800b3a6 <quorem+0x44>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d02d      	beq.n	800b44e <quorem+0xec>
 800b3f2:	9905      	ldr	r1, [sp, #20]
 800b3f4:	0038      	movs	r0, r7
 800b3f6:	f001 f8b5 	bl	800c564 <__mcmp>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	db1f      	blt.n	800b43e <quorem+0xdc>
 800b3fe:	2500      	movs	r5, #0
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	9802      	ldr	r0, [sp, #8]
 800b404:	3301      	adds	r3, #1
 800b406:	9903      	ldr	r1, [sp, #12]
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	6802      	ldr	r2, [r0, #0]
 800b40c:	c908      	ldmia	r1!, {r3}
 800b40e:	b292      	uxth	r2, r2
 800b410:	1955      	adds	r5, r2, r5
 800b412:	b29a      	uxth	r2, r3
 800b414:	1aaa      	subs	r2, r5, r2
 800b416:	6805      	ldr	r5, [r0, #0]
 800b418:	0c1b      	lsrs	r3, r3, #16
 800b41a:	0c2d      	lsrs	r5, r5, #16
 800b41c:	1aeb      	subs	r3, r5, r3
 800b41e:	1415      	asrs	r5, r2, #16
 800b420:	195b      	adds	r3, r3, r5
 800b422:	141d      	asrs	r5, r3, #16
 800b424:	b292      	uxth	r2, r2
 800b426:	041b      	lsls	r3, r3, #16
 800b428:	4313      	orrs	r3, r2
 800b42a:	c008      	stmia	r0!, {r3}
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	428b      	cmp	r3, r1
 800b430:	d2eb      	bcs.n	800b40a <quorem+0xa8>
 800b432:	9a02      	ldr	r2, [sp, #8]
 800b434:	00a3      	lsls	r3, r4, #2
 800b436:	18d3      	adds	r3, r2, r3
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	2a00      	cmp	r2, #0
 800b43c:	d011      	beq.n	800b462 <quorem+0x100>
 800b43e:	9e01      	ldr	r6, [sp, #4]
 800b440:	0030      	movs	r0, r6
 800b442:	b009      	add	sp, #36	; 0x24
 800b444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <quorem+0xf4>
 800b44c:	3c01      	subs	r4, #1
 800b44e:	9b02      	ldr	r3, [sp, #8]
 800b450:	3d04      	subs	r5, #4
 800b452:	42ab      	cmp	r3, r5
 800b454:	d3f7      	bcc.n	800b446 <quorem+0xe4>
 800b456:	613c      	str	r4, [r7, #16]
 800b458:	e7cb      	b.n	800b3f2 <quorem+0x90>
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	2a00      	cmp	r2, #0
 800b45e:	d104      	bne.n	800b46a <quorem+0x108>
 800b460:	3c01      	subs	r4, #1
 800b462:	9a02      	ldr	r2, [sp, #8]
 800b464:	3b04      	subs	r3, #4
 800b466:	429a      	cmp	r2, r3
 800b468:	d3f7      	bcc.n	800b45a <quorem+0xf8>
 800b46a:	613c      	str	r4, [r7, #16]
 800b46c:	e7e7      	b.n	800b43e <quorem+0xdc>
	...

0800b470 <_dtoa_r>:
 800b470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b472:	0016      	movs	r6, r2
 800b474:	001f      	movs	r7, r3
 800b476:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b478:	b09b      	sub	sp, #108	; 0x6c
 800b47a:	9002      	str	r0, [sp, #8]
 800b47c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800b47e:	9606      	str	r6, [sp, #24]
 800b480:	9707      	str	r7, [sp, #28]
 800b482:	2c00      	cmp	r4, #0
 800b484:	d108      	bne.n	800b498 <_dtoa_r+0x28>
 800b486:	2010      	movs	r0, #16
 800b488:	f000 fe36 	bl	800c0f8 <malloc>
 800b48c:	9b02      	ldr	r3, [sp, #8]
 800b48e:	6258      	str	r0, [r3, #36]	; 0x24
 800b490:	6044      	str	r4, [r0, #4]
 800b492:	6084      	str	r4, [r0, #8]
 800b494:	6004      	str	r4, [r0, #0]
 800b496:	60c4      	str	r4, [r0, #12]
 800b498:	9b02      	ldr	r3, [sp, #8]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	6819      	ldr	r1, [r3, #0]
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d00b      	beq.n	800b4ba <_dtoa_r+0x4a>
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	4093      	lsls	r3, r2
 800b4a8:	604a      	str	r2, [r1, #4]
 800b4aa:	608b      	str	r3, [r1, #8]
 800b4ac:	9802      	ldr	r0, [sp, #8]
 800b4ae:	f000 fe7c 	bl	800c1aa <_Bfree>
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	2f00      	cmp	r7, #0
 800b4bc:	da20      	bge.n	800b500 <_dtoa_r+0x90>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	602b      	str	r3, [r5, #0]
 800b4c2:	007b      	lsls	r3, r7, #1
 800b4c4:	085b      	lsrs	r3, r3, #1
 800b4c6:	9307      	str	r3, [sp, #28]
 800b4c8:	9c07      	ldr	r4, [sp, #28]
 800b4ca:	4bb2      	ldr	r3, [pc, #712]	; (800b794 <_dtoa_r+0x324>)
 800b4cc:	0022      	movs	r2, r4
 800b4ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800b4d0:	401a      	ands	r2, r3
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d117      	bne.n	800b506 <_dtoa_r+0x96>
 800b4d6:	4bb0      	ldr	r3, [pc, #704]	; (800b798 <_dtoa_r+0x328>)
 800b4d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	9b06      	ldr	r3, [sp, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d103      	bne.n	800b4ea <_dtoa_r+0x7a>
 800b4e2:	0324      	lsls	r4, r4, #12
 800b4e4:	d101      	bne.n	800b4ea <_dtoa_r+0x7a>
 800b4e6:	f000 fd87 	bl	800bff8 <_dtoa_r+0xb88>
 800b4ea:	4bac      	ldr	r3, [pc, #688]	; (800b79c <_dtoa_r+0x32c>)
 800b4ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b4ee:	9308      	str	r3, [sp, #32]
 800b4f0:	2a00      	cmp	r2, #0
 800b4f2:	d002      	beq.n	800b4fa <_dtoa_r+0x8a>
 800b4f4:	4baa      	ldr	r3, [pc, #680]	; (800b7a0 <_dtoa_r+0x330>)
 800b4f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b4f8:	6013      	str	r3, [r2, #0]
 800b4fa:	9808      	ldr	r0, [sp, #32]
 800b4fc:	b01b      	add	sp, #108	; 0x6c
 800b4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b500:	2300      	movs	r3, #0
 800b502:	602b      	str	r3, [r5, #0]
 800b504:	e7e0      	b.n	800b4c8 <_dtoa_r+0x58>
 800b506:	9e06      	ldr	r6, [sp, #24]
 800b508:	9f07      	ldr	r7, [sp, #28]
 800b50a:	2200      	movs	r2, #0
 800b50c:	2300      	movs	r3, #0
 800b50e:	0030      	movs	r0, r6
 800b510:	0039      	movs	r1, r7
 800b512:	f7f4 ff9b 	bl	800044c <__aeabi_dcmpeq>
 800b516:	1e05      	subs	r5, r0, #0
 800b518:	d00b      	beq.n	800b532 <_dtoa_r+0xc2>
 800b51a:	2301      	movs	r3, #1
 800b51c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	4ba0      	ldr	r3, [pc, #640]	; (800b7a4 <_dtoa_r+0x334>)
 800b522:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b524:	9308      	str	r3, [sp, #32]
 800b526:	2a00      	cmp	r2, #0
 800b528:	d0e7      	beq.n	800b4fa <_dtoa_r+0x8a>
 800b52a:	4a9f      	ldr	r2, [pc, #636]	; (800b7a8 <_dtoa_r+0x338>)
 800b52c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b52e:	600a      	str	r2, [r1, #0]
 800b530:	e7e3      	b.n	800b4fa <_dtoa_r+0x8a>
 800b532:	ab18      	add	r3, sp, #96	; 0x60
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	ab19      	add	r3, sp, #100	; 0x64
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	0032      	movs	r2, r6
 800b53c:	003b      	movs	r3, r7
 800b53e:	9802      	ldr	r0, [sp, #8]
 800b540:	f001 f88e 	bl	800c660 <__d2b>
 800b544:	0063      	lsls	r3, r4, #1
 800b546:	9003      	str	r0, [sp, #12]
 800b548:	0d5b      	lsrs	r3, r3, #21
 800b54a:	d074      	beq.n	800b636 <_dtoa_r+0x1c6>
 800b54c:	033a      	lsls	r2, r7, #12
 800b54e:	4c97      	ldr	r4, [pc, #604]	; (800b7ac <_dtoa_r+0x33c>)
 800b550:	0b12      	lsrs	r2, r2, #12
 800b552:	4314      	orrs	r4, r2
 800b554:	0021      	movs	r1, r4
 800b556:	4a96      	ldr	r2, [pc, #600]	; (800b7b0 <_dtoa_r+0x340>)
 800b558:	0030      	movs	r0, r6
 800b55a:	9516      	str	r5, [sp, #88]	; 0x58
 800b55c:	189e      	adds	r6, r3, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	4b94      	ldr	r3, [pc, #592]	; (800b7b4 <_dtoa_r+0x344>)
 800b562:	f7f6 fcf5 	bl	8001f50 <__aeabi_dsub>
 800b566:	4a94      	ldr	r2, [pc, #592]	; (800b7b8 <_dtoa_r+0x348>)
 800b568:	4b94      	ldr	r3, [pc, #592]	; (800b7bc <_dtoa_r+0x34c>)
 800b56a:	f7f6 fa7f 	bl	8001a6c <__aeabi_dmul>
 800b56e:	4a94      	ldr	r2, [pc, #592]	; (800b7c0 <_dtoa_r+0x350>)
 800b570:	4b94      	ldr	r3, [pc, #592]	; (800b7c4 <_dtoa_r+0x354>)
 800b572:	f7f5 fb55 	bl	8000c20 <__aeabi_dadd>
 800b576:	0004      	movs	r4, r0
 800b578:	0030      	movs	r0, r6
 800b57a:	000d      	movs	r5, r1
 800b57c:	f7f7 f882 	bl	8002684 <__aeabi_i2d>
 800b580:	4a91      	ldr	r2, [pc, #580]	; (800b7c8 <_dtoa_r+0x358>)
 800b582:	4b92      	ldr	r3, [pc, #584]	; (800b7cc <_dtoa_r+0x35c>)
 800b584:	f7f6 fa72 	bl	8001a6c <__aeabi_dmul>
 800b588:	0002      	movs	r2, r0
 800b58a:	000b      	movs	r3, r1
 800b58c:	0020      	movs	r0, r4
 800b58e:	0029      	movs	r1, r5
 800b590:	f7f5 fb46 	bl	8000c20 <__aeabi_dadd>
 800b594:	0004      	movs	r4, r0
 800b596:	000d      	movs	r5, r1
 800b598:	f7f7 f83e 	bl	8002618 <__aeabi_d2iz>
 800b59c:	2200      	movs	r2, #0
 800b59e:	0007      	movs	r7, r0
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	0020      	movs	r0, r4
 800b5a4:	0029      	movs	r1, r5
 800b5a6:	f7f4 ff57 	bl	8000458 <__aeabi_dcmplt>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d009      	beq.n	800b5c2 <_dtoa_r+0x152>
 800b5ae:	0038      	movs	r0, r7
 800b5b0:	f7f7 f868 	bl	8002684 <__aeabi_i2d>
 800b5b4:	002b      	movs	r3, r5
 800b5b6:	0022      	movs	r2, r4
 800b5b8:	f7f4 ff48 	bl	800044c <__aeabi_dcmpeq>
 800b5bc:	4243      	negs	r3, r0
 800b5be:	4158      	adcs	r0, r3
 800b5c0:	1a3f      	subs	r7, r7, r0
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	9314      	str	r3, [sp, #80]	; 0x50
 800b5c6:	2f16      	cmp	r7, #22
 800b5c8:	d80d      	bhi.n	800b5e6 <_dtoa_r+0x176>
 800b5ca:	4981      	ldr	r1, [pc, #516]	; (800b7d0 <_dtoa_r+0x360>)
 800b5cc:	00fb      	lsls	r3, r7, #3
 800b5ce:	18c9      	adds	r1, r1, r3
 800b5d0:	6808      	ldr	r0, [r1, #0]
 800b5d2:	6849      	ldr	r1, [r1, #4]
 800b5d4:	9a06      	ldr	r2, [sp, #24]
 800b5d6:	9b07      	ldr	r3, [sp, #28]
 800b5d8:	f7f4 ff52 	bl	8000480 <__aeabi_dcmpgt>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d046      	beq.n	800b66e <_dtoa_r+0x1fe>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	3f01      	subs	r7, #1
 800b5e4:	9314      	str	r3, [sp, #80]	; 0x50
 800b5e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b5e8:	1b9e      	subs	r6, r3, r6
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	930a      	str	r3, [sp, #40]	; 0x28
 800b5ee:	0033      	movs	r3, r6
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5f4:	d504      	bpl.n	800b600 <_dtoa_r+0x190>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	1b9b      	subs	r3, r3, r6
 800b5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b600:	2f00      	cmp	r7, #0
 800b602:	db36      	blt.n	800b672 <_dtoa_r+0x202>
 800b604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b606:	9711      	str	r7, [sp, #68]	; 0x44
 800b608:	19db      	adds	r3, r3, r7
 800b60a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b60c:	2300      	movs	r3, #0
 800b60e:	9304      	str	r3, [sp, #16]
 800b610:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b612:	2401      	movs	r4, #1
 800b614:	2b09      	cmp	r3, #9
 800b616:	d900      	bls.n	800b61a <_dtoa_r+0x1aa>
 800b618:	e084      	b.n	800b724 <_dtoa_r+0x2b4>
 800b61a:	2b05      	cmp	r3, #5
 800b61c:	dd02      	ble.n	800b624 <_dtoa_r+0x1b4>
 800b61e:	2400      	movs	r4, #0
 800b620:	3b04      	subs	r3, #4
 800b622:	9320      	str	r3, [sp, #128]	; 0x80
 800b624:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b626:	1e98      	subs	r0, r3, #2
 800b628:	2803      	cmp	r0, #3
 800b62a:	d900      	bls.n	800b62e <_dtoa_r+0x1be>
 800b62c:	e084      	b.n	800b738 <_dtoa_r+0x2c8>
 800b62e:	f7f4 fd7d 	bl	800012c <__gnu_thumb1_case_uqi>
 800b632:	7775      	.short	0x7775
 800b634:	6a28      	.short	0x6a28
 800b636:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b638:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b63a:	189e      	adds	r6, r3, r2
 800b63c:	4b65      	ldr	r3, [pc, #404]	; (800b7d4 <_dtoa_r+0x364>)
 800b63e:	18f2      	adds	r2, r6, r3
 800b640:	2a20      	cmp	r2, #32
 800b642:	dd0f      	ble.n	800b664 <_dtoa_r+0x1f4>
 800b644:	2340      	movs	r3, #64	; 0x40
 800b646:	1a9b      	subs	r3, r3, r2
 800b648:	409c      	lsls	r4, r3
 800b64a:	4b63      	ldr	r3, [pc, #396]	; (800b7d8 <_dtoa_r+0x368>)
 800b64c:	9806      	ldr	r0, [sp, #24]
 800b64e:	18f3      	adds	r3, r6, r3
 800b650:	40d8      	lsrs	r0, r3
 800b652:	4320      	orrs	r0, r4
 800b654:	f7f7 f850 	bl	80026f8 <__aeabi_ui2d>
 800b658:	2301      	movs	r3, #1
 800b65a:	4c60      	ldr	r4, [pc, #384]	; (800b7dc <_dtoa_r+0x36c>)
 800b65c:	3e01      	subs	r6, #1
 800b65e:	1909      	adds	r1, r1, r4
 800b660:	9316      	str	r3, [sp, #88]	; 0x58
 800b662:	e77c      	b.n	800b55e <_dtoa_r+0xee>
 800b664:	2320      	movs	r3, #32
 800b666:	9806      	ldr	r0, [sp, #24]
 800b668:	1a9b      	subs	r3, r3, r2
 800b66a:	4098      	lsls	r0, r3
 800b66c:	e7f2      	b.n	800b654 <_dtoa_r+0x1e4>
 800b66e:	9014      	str	r0, [sp, #80]	; 0x50
 800b670:	e7b9      	b.n	800b5e6 <_dtoa_r+0x176>
 800b672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b674:	1bdb      	subs	r3, r3, r7
 800b676:	930a      	str	r3, [sp, #40]	; 0x28
 800b678:	427b      	negs	r3, r7
 800b67a:	9304      	str	r3, [sp, #16]
 800b67c:	2300      	movs	r3, #0
 800b67e:	9311      	str	r3, [sp, #68]	; 0x44
 800b680:	e7c6      	b.n	800b610 <_dtoa_r+0x1a0>
 800b682:	2301      	movs	r3, #1
 800b684:	930d      	str	r3, [sp, #52]	; 0x34
 800b686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dd59      	ble.n	800b740 <_dtoa_r+0x2d0>
 800b68c:	930c      	str	r3, [sp, #48]	; 0x30
 800b68e:	9309      	str	r3, [sp, #36]	; 0x24
 800b690:	9a02      	ldr	r2, [sp, #8]
 800b692:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800b694:	2200      	movs	r2, #0
 800b696:	606a      	str	r2, [r5, #4]
 800b698:	3204      	adds	r2, #4
 800b69a:	0010      	movs	r0, r2
 800b69c:	3014      	adds	r0, #20
 800b69e:	6869      	ldr	r1, [r5, #4]
 800b6a0:	4298      	cmp	r0, r3
 800b6a2:	d952      	bls.n	800b74a <_dtoa_r+0x2da>
 800b6a4:	9802      	ldr	r0, [sp, #8]
 800b6a6:	f000 fd48 	bl	800c13a <_Balloc>
 800b6aa:	9b02      	ldr	r3, [sp, #8]
 800b6ac:	6028      	str	r0, [r5, #0]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	9308      	str	r3, [sp, #32]
 800b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b6:	2b0e      	cmp	r3, #14
 800b6b8:	d900      	bls.n	800b6bc <_dtoa_r+0x24c>
 800b6ba:	e10a      	b.n	800b8d2 <_dtoa_r+0x462>
 800b6bc:	2c00      	cmp	r4, #0
 800b6be:	d100      	bne.n	800b6c2 <_dtoa_r+0x252>
 800b6c0:	e107      	b.n	800b8d2 <_dtoa_r+0x462>
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	9c07      	ldr	r4, [sp, #28]
 800b6c6:	9312      	str	r3, [sp, #72]	; 0x48
 800b6c8:	9413      	str	r4, [sp, #76]	; 0x4c
 800b6ca:	2f00      	cmp	r7, #0
 800b6cc:	dc00      	bgt.n	800b6d0 <_dtoa_r+0x260>
 800b6ce:	e089      	b.n	800b7e4 <_dtoa_r+0x374>
 800b6d0:	210f      	movs	r1, #15
 800b6d2:	003a      	movs	r2, r7
 800b6d4:	4b3e      	ldr	r3, [pc, #248]	; (800b7d0 <_dtoa_r+0x360>)
 800b6d6:	400a      	ands	r2, r1
 800b6d8:	00d2      	lsls	r2, r2, #3
 800b6da:	189b      	adds	r3, r3, r2
 800b6dc:	681d      	ldr	r5, [r3, #0]
 800b6de:	685e      	ldr	r6, [r3, #4]
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	113c      	asrs	r4, r7, #4
 800b6e4:	930e      	str	r3, [sp, #56]	; 0x38
 800b6e6:	06e3      	lsls	r3, r4, #27
 800b6e8:	d50b      	bpl.n	800b702 <_dtoa_r+0x292>
 800b6ea:	4b3d      	ldr	r3, [pc, #244]	; (800b7e0 <_dtoa_r+0x370>)
 800b6ec:	400c      	ands	r4, r1
 800b6ee:	6a1a      	ldr	r2, [r3, #32]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b6f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b6f6:	f7f5 fdaf 	bl	8001258 <__aeabi_ddiv>
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	9006      	str	r0, [sp, #24]
 800b6fe:	9107      	str	r1, [sp, #28]
 800b700:	930e      	str	r3, [sp, #56]	; 0x38
 800b702:	2300      	movs	r3, #0
 800b704:	e03a      	b.n	800b77c <_dtoa_r+0x30c>
 800b706:	2301      	movs	r3, #1
 800b708:	930d      	str	r3, [sp, #52]	; 0x34
 800b70a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b70c:	18fb      	adds	r3, r7, r3
 800b70e:	930c      	str	r3, [sp, #48]	; 0x30
 800b710:	3301      	adds	r3, #1
 800b712:	9309      	str	r3, [sp, #36]	; 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	dcbb      	bgt.n	800b690 <_dtoa_r+0x220>
 800b718:	2301      	movs	r3, #1
 800b71a:	e7b9      	b.n	800b690 <_dtoa_r+0x220>
 800b71c:	2300      	movs	r3, #0
 800b71e:	e7b1      	b.n	800b684 <_dtoa_r+0x214>
 800b720:	2300      	movs	r3, #0
 800b722:	e7f1      	b.n	800b708 <_dtoa_r+0x298>
 800b724:	2300      	movs	r3, #0
 800b726:	940d      	str	r4, [sp, #52]	; 0x34
 800b728:	9320      	str	r3, [sp, #128]	; 0x80
 800b72a:	3b01      	subs	r3, #1
 800b72c:	2200      	movs	r2, #0
 800b72e:	930c      	str	r3, [sp, #48]	; 0x30
 800b730:	9309      	str	r3, [sp, #36]	; 0x24
 800b732:	3313      	adds	r3, #19
 800b734:	9221      	str	r2, [sp, #132]	; 0x84
 800b736:	e7ab      	b.n	800b690 <_dtoa_r+0x220>
 800b738:	2301      	movs	r3, #1
 800b73a:	930d      	str	r3, [sp, #52]	; 0x34
 800b73c:	3b02      	subs	r3, #2
 800b73e:	e7f5      	b.n	800b72c <_dtoa_r+0x2bc>
 800b740:	2301      	movs	r3, #1
 800b742:	930c      	str	r3, [sp, #48]	; 0x30
 800b744:	9309      	str	r3, [sp, #36]	; 0x24
 800b746:	001a      	movs	r2, r3
 800b748:	e7f4      	b.n	800b734 <_dtoa_r+0x2c4>
 800b74a:	3101      	adds	r1, #1
 800b74c:	6069      	str	r1, [r5, #4]
 800b74e:	0052      	lsls	r2, r2, #1
 800b750:	e7a3      	b.n	800b69a <_dtoa_r+0x22a>
 800b752:	2301      	movs	r3, #1
 800b754:	421c      	tst	r4, r3
 800b756:	d00e      	beq.n	800b776 <_dtoa_r+0x306>
 800b758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b75a:	4a21      	ldr	r2, [pc, #132]	; (800b7e0 <_dtoa_r+0x370>)
 800b75c:	3301      	adds	r3, #1
 800b75e:	930e      	str	r3, [sp, #56]	; 0x38
 800b760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b762:	0028      	movs	r0, r5
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	189b      	adds	r3, r3, r2
 800b768:	0031      	movs	r1, r6
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	f7f6 f97d 	bl	8001a6c <__aeabi_dmul>
 800b772:	0005      	movs	r5, r0
 800b774:	000e      	movs	r6, r1
 800b776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b778:	1064      	asrs	r4, r4, #1
 800b77a:	3301      	adds	r3, #1
 800b77c:	9310      	str	r3, [sp, #64]	; 0x40
 800b77e:	2c00      	cmp	r4, #0
 800b780:	d1e7      	bne.n	800b752 <_dtoa_r+0x2e2>
 800b782:	9806      	ldr	r0, [sp, #24]
 800b784:	9907      	ldr	r1, [sp, #28]
 800b786:	002a      	movs	r2, r5
 800b788:	0033      	movs	r3, r6
 800b78a:	f7f5 fd65 	bl	8001258 <__aeabi_ddiv>
 800b78e:	9006      	str	r0, [sp, #24]
 800b790:	9107      	str	r1, [sp, #28]
 800b792:	e042      	b.n	800b81a <_dtoa_r+0x3aa>
 800b794:	7ff00000 	.word	0x7ff00000
 800b798:	0000270f 	.word	0x0000270f
 800b79c:	0800ea9f 	.word	0x0800ea9f
 800b7a0:	0800eaa2 	.word	0x0800eaa2
 800b7a4:	0800ec35 	.word	0x0800ec35
 800b7a8:	0800ec36 	.word	0x0800ec36
 800b7ac:	3ff00000 	.word	0x3ff00000
 800b7b0:	fffffc01 	.word	0xfffffc01
 800b7b4:	3ff80000 	.word	0x3ff80000
 800b7b8:	636f4361 	.word	0x636f4361
 800b7bc:	3fd287a7 	.word	0x3fd287a7
 800b7c0:	8b60c8b3 	.word	0x8b60c8b3
 800b7c4:	3fc68a28 	.word	0x3fc68a28
 800b7c8:	509f79fb 	.word	0x509f79fb
 800b7cc:	3fd34413 	.word	0x3fd34413
 800b7d0:	0800eb30 	.word	0x0800eb30
 800b7d4:	00000432 	.word	0x00000432
 800b7d8:	00000412 	.word	0x00000412
 800b7dc:	fe100000 	.word	0xfe100000
 800b7e0:	0800eb08 	.word	0x0800eb08
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b7e8:	2f00      	cmp	r7, #0
 800b7ea:	d016      	beq.n	800b81a <_dtoa_r+0x3aa>
 800b7ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b7ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b7f0:	427c      	negs	r4, r7
 800b7f2:	330d      	adds	r3, #13
 800b7f4:	4023      	ands	r3, r4
 800b7f6:	4ace      	ldr	r2, [pc, #824]	; (800bb30 <_dtoa_r+0x6c0>)
 800b7f8:	00db      	lsls	r3, r3, #3
 800b7fa:	18d3      	adds	r3, r2, r3
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f7f6 f934 	bl	8001a6c <__aeabi_dmul>
 800b804:	2300      	movs	r3, #0
 800b806:	2601      	movs	r6, #1
 800b808:	001d      	movs	r5, r3
 800b80a:	9006      	str	r0, [sp, #24]
 800b80c:	9107      	str	r1, [sp, #28]
 800b80e:	1124      	asrs	r4, r4, #4
 800b810:	2c00      	cmp	r4, #0
 800b812:	d000      	beq.n	800b816 <_dtoa_r+0x3a6>
 800b814:	e08c      	b.n	800b930 <_dtoa_r+0x4c0>
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1b9      	bne.n	800b78e <_dtoa_r+0x31e>
 800b81a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d100      	bne.n	800b822 <_dtoa_r+0x3b2>
 800b820:	e096      	b.n	800b950 <_dtoa_r+0x4e0>
 800b822:	9c06      	ldr	r4, [sp, #24]
 800b824:	9d07      	ldr	r5, [sp, #28]
 800b826:	2200      	movs	r2, #0
 800b828:	4bc2      	ldr	r3, [pc, #776]	; (800bb34 <_dtoa_r+0x6c4>)
 800b82a:	0020      	movs	r0, r4
 800b82c:	0029      	movs	r1, r5
 800b82e:	f7f4 fe13 	bl	8000458 <__aeabi_dcmplt>
 800b832:	2800      	cmp	r0, #0
 800b834:	d100      	bne.n	800b838 <_dtoa_r+0x3c8>
 800b836:	e08b      	b.n	800b950 <_dtoa_r+0x4e0>
 800b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d100      	bne.n	800b840 <_dtoa_r+0x3d0>
 800b83e:	e087      	b.n	800b950 <_dtoa_r+0x4e0>
 800b840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b842:	2b00      	cmp	r3, #0
 800b844:	dd41      	ble.n	800b8ca <_dtoa_r+0x45a>
 800b846:	4bbc      	ldr	r3, [pc, #752]	; (800bb38 <_dtoa_r+0x6c8>)
 800b848:	2200      	movs	r2, #0
 800b84a:	0020      	movs	r0, r4
 800b84c:	0029      	movs	r1, r5
 800b84e:	f7f6 f90d 	bl	8001a6c <__aeabi_dmul>
 800b852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b854:	9006      	str	r0, [sp, #24]
 800b856:	9107      	str	r1, [sp, #28]
 800b858:	3301      	adds	r3, #1
 800b85a:	930e      	str	r3, [sp, #56]	; 0x38
 800b85c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b85e:	1e7e      	subs	r6, r7, #1
 800b860:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b862:	9310      	str	r3, [sp, #64]	; 0x40
 800b864:	f7f6 ff0e 	bl	8002684 <__aeabi_i2d>
 800b868:	9a06      	ldr	r2, [sp, #24]
 800b86a:	9b07      	ldr	r3, [sp, #28]
 800b86c:	f7f6 f8fe 	bl	8001a6c <__aeabi_dmul>
 800b870:	2200      	movs	r2, #0
 800b872:	4bb2      	ldr	r3, [pc, #712]	; (800bb3c <_dtoa_r+0x6cc>)
 800b874:	f7f5 f9d4 	bl	8000c20 <__aeabi_dadd>
 800b878:	4ab1      	ldr	r2, [pc, #708]	; (800bb40 <_dtoa_r+0x6d0>)
 800b87a:	900e      	str	r0, [sp, #56]	; 0x38
 800b87c:	910f      	str	r1, [sp, #60]	; 0x3c
 800b87e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b880:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b882:	4694      	mov	ip, r2
 800b884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b886:	4463      	add	r3, ip
 800b888:	9315      	str	r3, [sp, #84]	; 0x54
 800b88a:	001d      	movs	r5, r3
 800b88c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d161      	bne.n	800b956 <_dtoa_r+0x4e6>
 800b892:	9806      	ldr	r0, [sp, #24]
 800b894:	9907      	ldr	r1, [sp, #28]
 800b896:	2200      	movs	r2, #0
 800b898:	4baa      	ldr	r3, [pc, #680]	; (800bb44 <_dtoa_r+0x6d4>)
 800b89a:	f7f6 fb59 	bl	8001f50 <__aeabi_dsub>
 800b89e:	0022      	movs	r2, r4
 800b8a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8a2:	9006      	str	r0, [sp, #24]
 800b8a4:	9107      	str	r1, [sp, #28]
 800b8a6:	f7f4 fdeb 	bl	8000480 <__aeabi_dcmpgt>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d000      	beq.n	800b8b0 <_dtoa_r+0x440>
 800b8ae:	e2a8      	b.n	800be02 <_dtoa_r+0x992>
 800b8b0:	48a5      	ldr	r0, [pc, #660]	; (800bb48 <_dtoa_r+0x6d8>)
 800b8b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b8b4:	4684      	mov	ip, r0
 800b8b6:	4461      	add	r1, ip
 800b8b8:	000b      	movs	r3, r1
 800b8ba:	9806      	ldr	r0, [sp, #24]
 800b8bc:	9907      	ldr	r1, [sp, #28]
 800b8be:	0022      	movs	r2, r4
 800b8c0:	f7f4 fdca 	bl	8000458 <__aeabi_dcmplt>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d000      	beq.n	800b8ca <_dtoa_r+0x45a>
 800b8c8:	e295      	b.n	800bdf6 <_dtoa_r+0x986>
 800b8ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b8ce:	9306      	str	r3, [sp, #24]
 800b8d0:	9407      	str	r4, [sp, #28]
 800b8d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	da00      	bge.n	800b8da <_dtoa_r+0x46a>
 800b8d8:	e15c      	b.n	800bb94 <_dtoa_r+0x724>
 800b8da:	2f0e      	cmp	r7, #14
 800b8dc:	dd00      	ble.n	800b8e0 <_dtoa_r+0x470>
 800b8de:	e159      	b.n	800bb94 <_dtoa_r+0x724>
 800b8e0:	4b93      	ldr	r3, [pc, #588]	; (800bb30 <_dtoa_r+0x6c0>)
 800b8e2:	00fa      	lsls	r2, r7, #3
 800b8e4:	189b      	adds	r3, r3, r2
 800b8e6:	685c      	ldr	r4, [r3, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	9405      	str	r4, [sp, #20]
 800b8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	db00      	blt.n	800b8f6 <_dtoa_r+0x486>
 800b8f4:	e0d8      	b.n	800baa8 <_dtoa_r+0x638>
 800b8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dd00      	ble.n	800b8fe <_dtoa_r+0x48e>
 800b8fc:	e0d4      	b.n	800baa8 <_dtoa_r+0x638>
 800b8fe:	d000      	beq.n	800b902 <_dtoa_r+0x492>
 800b900:	e27d      	b.n	800bdfe <_dtoa_r+0x98e>
 800b902:	9804      	ldr	r0, [sp, #16]
 800b904:	9905      	ldr	r1, [sp, #20]
 800b906:	2200      	movs	r2, #0
 800b908:	4b8e      	ldr	r3, [pc, #568]	; (800bb44 <_dtoa_r+0x6d4>)
 800b90a:	f7f6 f8af 	bl	8001a6c <__aeabi_dmul>
 800b90e:	9a06      	ldr	r2, [sp, #24]
 800b910:	9b07      	ldr	r3, [sp, #28]
 800b912:	f7f4 fdbf 	bl	8000494 <__aeabi_dcmpge>
 800b916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	001e      	movs	r6, r3
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d000      	beq.n	800b922 <_dtoa_r+0x4b2>
 800b920:	e24f      	b.n	800bdc2 <_dtoa_r+0x952>
 800b922:	9b08      	ldr	r3, [sp, #32]
 800b924:	9a08      	ldr	r2, [sp, #32]
 800b926:	1c5d      	adds	r5, r3, #1
 800b928:	2331      	movs	r3, #49	; 0x31
 800b92a:	3701      	adds	r7, #1
 800b92c:	7013      	strb	r3, [r2, #0]
 800b92e:	e24b      	b.n	800bdc8 <_dtoa_r+0x958>
 800b930:	4234      	tst	r4, r6
 800b932:	d00a      	beq.n	800b94a <_dtoa_r+0x4da>
 800b934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b936:	4a85      	ldr	r2, [pc, #532]	; (800bb4c <_dtoa_r+0x6dc>)
 800b938:	3301      	adds	r3, #1
 800b93a:	930e      	str	r3, [sp, #56]	; 0x38
 800b93c:	00eb      	lsls	r3, r5, #3
 800b93e:	189b      	adds	r3, r3, r2
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	f7f6 f892 	bl	8001a6c <__aeabi_dmul>
 800b948:	0033      	movs	r3, r6
 800b94a:	1064      	asrs	r4, r4, #1
 800b94c:	3501      	adds	r5, #1
 800b94e:	e75f      	b.n	800b810 <_dtoa_r+0x3a0>
 800b950:	003e      	movs	r6, r7
 800b952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b954:	e784      	b.n	800b860 <_dtoa_r+0x3f0>
 800b956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b958:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b95a:	1e5a      	subs	r2, r3, #1
 800b95c:	4b74      	ldr	r3, [pc, #464]	; (800bb30 <_dtoa_r+0x6c0>)
 800b95e:	00d2      	lsls	r2, r2, #3
 800b960:	189b      	adds	r3, r3, r2
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	2900      	cmp	r1, #0
 800b968:	d049      	beq.n	800b9fe <_dtoa_r+0x58e>
 800b96a:	2000      	movs	r0, #0
 800b96c:	4978      	ldr	r1, [pc, #480]	; (800bb50 <_dtoa_r+0x6e0>)
 800b96e:	f7f5 fc73 	bl	8001258 <__aeabi_ddiv>
 800b972:	002b      	movs	r3, r5
 800b974:	0022      	movs	r2, r4
 800b976:	f7f6 faeb 	bl	8001f50 <__aeabi_dsub>
 800b97a:	9b08      	ldr	r3, [sp, #32]
 800b97c:	900e      	str	r0, [sp, #56]	; 0x38
 800b97e:	910f      	str	r1, [sp, #60]	; 0x3c
 800b980:	9315      	str	r3, [sp, #84]	; 0x54
 800b982:	9806      	ldr	r0, [sp, #24]
 800b984:	9907      	ldr	r1, [sp, #28]
 800b986:	f7f6 fe47 	bl	8002618 <__aeabi_d2iz>
 800b98a:	0004      	movs	r4, r0
 800b98c:	f7f6 fe7a 	bl	8002684 <__aeabi_i2d>
 800b990:	0002      	movs	r2, r0
 800b992:	000b      	movs	r3, r1
 800b994:	9806      	ldr	r0, [sp, #24]
 800b996:	9907      	ldr	r1, [sp, #28]
 800b998:	f7f6 fada 	bl	8001f50 <__aeabi_dsub>
 800b99c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b99e:	3430      	adds	r4, #48	; 0x30
 800b9a0:	1c5d      	adds	r5, r3, #1
 800b9a2:	701c      	strb	r4, [r3, #0]
 800b9a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9a8:	9006      	str	r0, [sp, #24]
 800b9aa:	9107      	str	r1, [sp, #28]
 800b9ac:	f7f4 fd54 	bl	8000458 <__aeabi_dcmplt>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d16c      	bne.n	800ba8e <_dtoa_r+0x61e>
 800b9b4:	9a06      	ldr	r2, [sp, #24]
 800b9b6:	9b07      	ldr	r3, [sp, #28]
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	495e      	ldr	r1, [pc, #376]	; (800bb34 <_dtoa_r+0x6c4>)
 800b9bc:	f7f6 fac8 	bl	8001f50 <__aeabi_dsub>
 800b9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9c4:	f7f4 fd48 	bl	8000458 <__aeabi_dcmplt>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d000      	beq.n	800b9ce <_dtoa_r+0x55e>
 800b9cc:	e0c3      	b.n	800bb56 <_dtoa_r+0x6e6>
 800b9ce:	9b08      	ldr	r3, [sp, #32]
 800b9d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9d2:	1aeb      	subs	r3, r5, r3
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	dc00      	bgt.n	800b9da <_dtoa_r+0x56a>
 800b9d8:	e777      	b.n	800b8ca <_dtoa_r+0x45a>
 800b9da:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b9dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b9de:	2200      	movs	r2, #0
 800b9e0:	4b55      	ldr	r3, [pc, #340]	; (800bb38 <_dtoa_r+0x6c8>)
 800b9e2:	f7f6 f843 	bl	8001a6c <__aeabi_dmul>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	900e      	str	r0, [sp, #56]	; 0x38
 800b9ea:	910f      	str	r1, [sp, #60]	; 0x3c
 800b9ec:	9806      	ldr	r0, [sp, #24]
 800b9ee:	9907      	ldr	r1, [sp, #28]
 800b9f0:	4b51      	ldr	r3, [pc, #324]	; (800bb38 <_dtoa_r+0x6c8>)
 800b9f2:	f7f6 f83b 	bl	8001a6c <__aeabi_dmul>
 800b9f6:	9515      	str	r5, [sp, #84]	; 0x54
 800b9f8:	9006      	str	r0, [sp, #24]
 800b9fa:	9107      	str	r1, [sp, #28]
 800b9fc:	e7c1      	b.n	800b982 <_dtoa_r+0x512>
 800b9fe:	0020      	movs	r0, r4
 800ba00:	0029      	movs	r1, r5
 800ba02:	f7f6 f833 	bl	8001a6c <__aeabi_dmul>
 800ba06:	9c08      	ldr	r4, [sp, #32]
 800ba08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba0a:	0023      	movs	r3, r4
 800ba0c:	4694      	mov	ip, r2
 800ba0e:	900e      	str	r0, [sp, #56]	; 0x38
 800ba10:	910f      	str	r1, [sp, #60]	; 0x3c
 800ba12:	4463      	add	r3, ip
 800ba14:	9315      	str	r3, [sp, #84]	; 0x54
 800ba16:	9806      	ldr	r0, [sp, #24]
 800ba18:	9907      	ldr	r1, [sp, #28]
 800ba1a:	f7f6 fdfd 	bl	8002618 <__aeabi_d2iz>
 800ba1e:	0005      	movs	r5, r0
 800ba20:	f7f6 fe30 	bl	8002684 <__aeabi_i2d>
 800ba24:	000b      	movs	r3, r1
 800ba26:	0002      	movs	r2, r0
 800ba28:	9806      	ldr	r0, [sp, #24]
 800ba2a:	9907      	ldr	r1, [sp, #28]
 800ba2c:	f7f6 fa90 	bl	8001f50 <__aeabi_dsub>
 800ba30:	3530      	adds	r5, #48	; 0x30
 800ba32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba34:	7025      	strb	r5, [r4, #0]
 800ba36:	3401      	adds	r4, #1
 800ba38:	9006      	str	r0, [sp, #24]
 800ba3a:	9107      	str	r1, [sp, #28]
 800ba3c:	42a3      	cmp	r3, r4
 800ba3e:	d12a      	bne.n	800ba96 <_dtoa_r+0x626>
 800ba40:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba44:	9a08      	ldr	r2, [sp, #32]
 800ba46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba48:	4694      	mov	ip, r2
 800ba4a:	4463      	add	r3, ip
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	001d      	movs	r5, r3
 800ba50:	4b3f      	ldr	r3, [pc, #252]	; (800bb50 <_dtoa_r+0x6e0>)
 800ba52:	f7f5 f8e5 	bl	8000c20 <__aeabi_dadd>
 800ba56:	0002      	movs	r2, r0
 800ba58:	000b      	movs	r3, r1
 800ba5a:	9806      	ldr	r0, [sp, #24]
 800ba5c:	9907      	ldr	r1, [sp, #28]
 800ba5e:	f7f4 fd0f 	bl	8000480 <__aeabi_dcmpgt>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d000      	beq.n	800ba68 <_dtoa_r+0x5f8>
 800ba66:	e076      	b.n	800bb56 <_dtoa_r+0x6e6>
 800ba68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	4938      	ldr	r1, [pc, #224]	; (800bb50 <_dtoa_r+0x6e0>)
 800ba70:	f7f6 fa6e 	bl	8001f50 <__aeabi_dsub>
 800ba74:	0002      	movs	r2, r0
 800ba76:	000b      	movs	r3, r1
 800ba78:	9806      	ldr	r0, [sp, #24]
 800ba7a:	9907      	ldr	r1, [sp, #28]
 800ba7c:	f7f4 fcec 	bl	8000458 <__aeabi_dcmplt>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d100      	bne.n	800ba86 <_dtoa_r+0x616>
 800ba84:	e721      	b.n	800b8ca <_dtoa_r+0x45a>
 800ba86:	1e6b      	subs	r3, r5, #1
 800ba88:	781a      	ldrb	r2, [r3, #0]
 800ba8a:	2a30      	cmp	r2, #48	; 0x30
 800ba8c:	d001      	beq.n	800ba92 <_dtoa_r+0x622>
 800ba8e:	0037      	movs	r7, r6
 800ba90:	e03f      	b.n	800bb12 <_dtoa_r+0x6a2>
 800ba92:	001d      	movs	r5, r3
 800ba94:	e7f7      	b.n	800ba86 <_dtoa_r+0x616>
 800ba96:	9806      	ldr	r0, [sp, #24]
 800ba98:	9907      	ldr	r1, [sp, #28]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4b26      	ldr	r3, [pc, #152]	; (800bb38 <_dtoa_r+0x6c8>)
 800ba9e:	f7f5 ffe5 	bl	8001a6c <__aeabi_dmul>
 800baa2:	9006      	str	r0, [sp, #24]
 800baa4:	9107      	str	r1, [sp, #28]
 800baa6:	e7b6      	b.n	800ba16 <_dtoa_r+0x5a6>
 800baa8:	9e08      	ldr	r6, [sp, #32]
 800baaa:	9a04      	ldr	r2, [sp, #16]
 800baac:	9b05      	ldr	r3, [sp, #20]
 800baae:	9806      	ldr	r0, [sp, #24]
 800bab0:	9907      	ldr	r1, [sp, #28]
 800bab2:	f7f5 fbd1 	bl	8001258 <__aeabi_ddiv>
 800bab6:	f7f6 fdaf 	bl	8002618 <__aeabi_d2iz>
 800baba:	0004      	movs	r4, r0
 800babc:	f7f6 fde2 	bl	8002684 <__aeabi_i2d>
 800bac0:	9a04      	ldr	r2, [sp, #16]
 800bac2:	9b05      	ldr	r3, [sp, #20]
 800bac4:	f7f5 ffd2 	bl	8001a6c <__aeabi_dmul>
 800bac8:	0002      	movs	r2, r0
 800baca:	000b      	movs	r3, r1
 800bacc:	9806      	ldr	r0, [sp, #24]
 800bace:	9907      	ldr	r1, [sp, #28]
 800bad0:	f7f6 fa3e 	bl	8001f50 <__aeabi_dsub>
 800bad4:	0023      	movs	r3, r4
 800bad6:	3330      	adds	r3, #48	; 0x30
 800bad8:	7033      	strb	r3, [r6, #0]
 800bada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800badc:	9b08      	ldr	r3, [sp, #32]
 800bade:	1c75      	adds	r5, r6, #1
 800bae0:	1aeb      	subs	r3, r5, r3
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d148      	bne.n	800bb78 <_dtoa_r+0x708>
 800bae6:	0002      	movs	r2, r0
 800bae8:	000b      	movs	r3, r1
 800baea:	f7f5 f899 	bl	8000c20 <__aeabi_dadd>
 800baee:	9a04      	ldr	r2, [sp, #16]
 800baf0:	9b05      	ldr	r3, [sp, #20]
 800baf2:	9006      	str	r0, [sp, #24]
 800baf4:	9107      	str	r1, [sp, #28]
 800baf6:	f7f4 fcc3 	bl	8000480 <__aeabi_dcmpgt>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d12a      	bne.n	800bb54 <_dtoa_r+0x6e4>
 800bafe:	9a04      	ldr	r2, [sp, #16]
 800bb00:	9b05      	ldr	r3, [sp, #20]
 800bb02:	9806      	ldr	r0, [sp, #24]
 800bb04:	9907      	ldr	r1, [sp, #28]
 800bb06:	f7f4 fca1 	bl	800044c <__aeabi_dcmpeq>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d001      	beq.n	800bb12 <_dtoa_r+0x6a2>
 800bb0e:	07e3      	lsls	r3, r4, #31
 800bb10:	d420      	bmi.n	800bb54 <_dtoa_r+0x6e4>
 800bb12:	9903      	ldr	r1, [sp, #12]
 800bb14:	9802      	ldr	r0, [sp, #8]
 800bb16:	f000 fb48 	bl	800c1aa <_Bfree>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	702b      	strb	r3, [r5, #0]
 800bb1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb20:	3701      	adds	r7, #1
 800bb22:	601f      	str	r7, [r3, #0]
 800bb24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d100      	bne.n	800bb2c <_dtoa_r+0x6bc>
 800bb2a:	e4e6      	b.n	800b4fa <_dtoa_r+0x8a>
 800bb2c:	601d      	str	r5, [r3, #0]
 800bb2e:	e4e4      	b.n	800b4fa <_dtoa_r+0x8a>
 800bb30:	0800eb30 	.word	0x0800eb30
 800bb34:	3ff00000 	.word	0x3ff00000
 800bb38:	40240000 	.word	0x40240000
 800bb3c:	401c0000 	.word	0x401c0000
 800bb40:	fcc00000 	.word	0xfcc00000
 800bb44:	40140000 	.word	0x40140000
 800bb48:	7cc00000 	.word	0x7cc00000
 800bb4c:	0800eb08 	.word	0x0800eb08
 800bb50:	3fe00000 	.word	0x3fe00000
 800bb54:	003e      	movs	r6, r7
 800bb56:	1e6b      	subs	r3, r5, #1
 800bb58:	781a      	ldrb	r2, [r3, #0]
 800bb5a:	2a39      	cmp	r2, #57	; 0x39
 800bb5c:	d106      	bne.n	800bb6c <_dtoa_r+0x6fc>
 800bb5e:	9a08      	ldr	r2, [sp, #32]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d107      	bne.n	800bb74 <_dtoa_r+0x704>
 800bb64:	2330      	movs	r3, #48	; 0x30
 800bb66:	7013      	strb	r3, [r2, #0]
 800bb68:	0013      	movs	r3, r2
 800bb6a:	3601      	adds	r6, #1
 800bb6c:	781a      	ldrb	r2, [r3, #0]
 800bb6e:	3201      	adds	r2, #1
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	e78c      	b.n	800ba8e <_dtoa_r+0x61e>
 800bb74:	001d      	movs	r5, r3
 800bb76:	e7ee      	b.n	800bb56 <_dtoa_r+0x6e6>
 800bb78:	2200      	movs	r2, #0
 800bb7a:	4ba4      	ldr	r3, [pc, #656]	; (800be0c <_dtoa_r+0x99c>)
 800bb7c:	f7f5 ff76 	bl	8001a6c <__aeabi_dmul>
 800bb80:	2200      	movs	r2, #0
 800bb82:	2300      	movs	r3, #0
 800bb84:	9006      	str	r0, [sp, #24]
 800bb86:	9107      	str	r1, [sp, #28]
 800bb88:	002e      	movs	r6, r5
 800bb8a:	f7f4 fc5f 	bl	800044c <__aeabi_dcmpeq>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d08b      	beq.n	800baaa <_dtoa_r+0x63a>
 800bb92:	e7be      	b.n	800bb12 <_dtoa_r+0x6a2>
 800bb94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb96:	2a00      	cmp	r2, #0
 800bb98:	d100      	bne.n	800bb9c <_dtoa_r+0x72c>
 800bb9a:	e0da      	b.n	800bd52 <_dtoa_r+0x8e2>
 800bb9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb9e:	2a01      	cmp	r2, #1
 800bba0:	dd00      	ble.n	800bba4 <_dtoa_r+0x734>
 800bba2:	e0bd      	b.n	800bd20 <_dtoa_r+0x8b0>
 800bba4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bba6:	2a00      	cmp	r2, #0
 800bba8:	d100      	bne.n	800bbac <_dtoa_r+0x73c>
 800bbaa:	e0b5      	b.n	800bd18 <_dtoa_r+0x8a8>
 800bbac:	4a98      	ldr	r2, [pc, #608]	; (800be10 <_dtoa_r+0x9a0>)
 800bbae:	189b      	adds	r3, r3, r2
 800bbb0:	9d04      	ldr	r5, [sp, #16]
 800bbb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bbb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	18d2      	adds	r2, r2, r3
 800bbba:	920a      	str	r2, [sp, #40]	; 0x28
 800bbbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbbe:	9802      	ldr	r0, [sp, #8]
 800bbc0:	18d3      	adds	r3, r2, r3
 800bbc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbc4:	f000 fb91 	bl	800c2ea <__i2b>
 800bbc8:	0006      	movs	r6, r0
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	dd0e      	ble.n	800bbec <_dtoa_r+0x77c>
 800bbce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	dd0b      	ble.n	800bbec <_dtoa_r+0x77c>
 800bbd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbd6:	0023      	movs	r3, r4
 800bbd8:	4294      	cmp	r4, r2
 800bbda:	dd00      	ble.n	800bbde <_dtoa_r+0x76e>
 800bbdc:	0013      	movs	r3, r2
 800bbde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbe0:	1ae4      	subs	r4, r4, r3
 800bbe2:	1ad2      	subs	r2, r2, r3
 800bbe4:	920a      	str	r2, [sp, #40]	; 0x28
 800bbe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbec:	9b04      	ldr	r3, [sp, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d01f      	beq.n	800bc32 <_dtoa_r+0x7c2>
 800bbf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d100      	bne.n	800bbfa <_dtoa_r+0x78a>
 800bbf8:	e0af      	b.n	800bd5a <_dtoa_r+0x8ea>
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	d011      	beq.n	800bc22 <_dtoa_r+0x7b2>
 800bbfe:	0031      	movs	r1, r6
 800bc00:	002a      	movs	r2, r5
 800bc02:	9802      	ldr	r0, [sp, #8]
 800bc04:	f000 fc0a 	bl	800c41c <__pow5mult>
 800bc08:	9a03      	ldr	r2, [sp, #12]
 800bc0a:	0001      	movs	r1, r0
 800bc0c:	0006      	movs	r6, r0
 800bc0e:	9802      	ldr	r0, [sp, #8]
 800bc10:	f000 fb74 	bl	800c2fc <__multiply>
 800bc14:	9903      	ldr	r1, [sp, #12]
 800bc16:	9010      	str	r0, [sp, #64]	; 0x40
 800bc18:	9802      	ldr	r0, [sp, #8]
 800bc1a:	f000 fac6 	bl	800c1aa <_Bfree>
 800bc1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	9b04      	ldr	r3, [sp, #16]
 800bc24:	1b5a      	subs	r2, r3, r5
 800bc26:	d004      	beq.n	800bc32 <_dtoa_r+0x7c2>
 800bc28:	9903      	ldr	r1, [sp, #12]
 800bc2a:	9802      	ldr	r0, [sp, #8]
 800bc2c:	f000 fbf6 	bl	800c41c <__pow5mult>
 800bc30:	9003      	str	r0, [sp, #12]
 800bc32:	2101      	movs	r1, #1
 800bc34:	9802      	ldr	r0, [sp, #8]
 800bc36:	f000 fb58 	bl	800c2ea <__i2b>
 800bc3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc3c:	9004      	str	r0, [sp, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d100      	bne.n	800bc44 <_dtoa_r+0x7d4>
 800bc42:	e1e3      	b.n	800c00c <_dtoa_r+0xb9c>
 800bc44:	001a      	movs	r2, r3
 800bc46:	0001      	movs	r1, r0
 800bc48:	9802      	ldr	r0, [sp, #8]
 800bc4a:	f000 fbe7 	bl	800c41c <__pow5mult>
 800bc4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bc50:	9004      	str	r0, [sp, #16]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	dd00      	ble.n	800bc58 <_dtoa_r+0x7e8>
 800bc56:	e082      	b.n	800bd5e <_dtoa_r+0x8ee>
 800bc58:	2500      	movs	r5, #0
 800bc5a:	9b06      	ldr	r3, [sp, #24]
 800bc5c:	42ab      	cmp	r3, r5
 800bc5e:	d10e      	bne.n	800bc7e <_dtoa_r+0x80e>
 800bc60:	9b07      	ldr	r3, [sp, #28]
 800bc62:	031b      	lsls	r3, r3, #12
 800bc64:	42ab      	cmp	r3, r5
 800bc66:	d10a      	bne.n	800bc7e <_dtoa_r+0x80e>
 800bc68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc6a:	9a07      	ldr	r2, [sp, #28]
 800bc6c:	4213      	tst	r3, r2
 800bc6e:	d006      	beq.n	800bc7e <_dtoa_r+0x80e>
 800bc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc72:	3501      	adds	r5, #1
 800bc74:	3301      	adds	r3, #1
 800bc76:	930a      	str	r3, [sp, #40]	; 0x28
 800bc78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc80:	2001      	movs	r0, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d16c      	bne.n	800bd60 <_dtoa_r+0x8f0>
 800bc86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc88:	1818      	adds	r0, r3, r0
 800bc8a:	231f      	movs	r3, #31
 800bc8c:	4018      	ands	r0, r3
 800bc8e:	d07e      	beq.n	800bd8e <_dtoa_r+0x91e>
 800bc90:	3301      	adds	r3, #1
 800bc92:	1a1b      	subs	r3, r3, r0
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	dd70      	ble.n	800bd7a <_dtoa_r+0x90a>
 800bc98:	231c      	movs	r3, #28
 800bc9a:	1a18      	subs	r0, r3, r0
 800bc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc9e:	1824      	adds	r4, r4, r0
 800bca0:	181b      	adds	r3, r3, r0
 800bca2:	930a      	str	r3, [sp, #40]	; 0x28
 800bca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca6:	181b      	adds	r3, r3, r0
 800bca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	dd05      	ble.n	800bcbc <_dtoa_r+0x84c>
 800bcb0:	001a      	movs	r2, r3
 800bcb2:	9903      	ldr	r1, [sp, #12]
 800bcb4:	9802      	ldr	r0, [sp, #8]
 800bcb6:	f000 fc03 	bl	800c4c0 <__lshift>
 800bcba:	9003      	str	r0, [sp, #12]
 800bcbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	dd05      	ble.n	800bcce <_dtoa_r+0x85e>
 800bcc2:	001a      	movs	r2, r3
 800bcc4:	9904      	ldr	r1, [sp, #16]
 800bcc6:	9802      	ldr	r0, [sp, #8]
 800bcc8:	f000 fbfa 	bl	800c4c0 <__lshift>
 800bccc:	9004      	str	r0, [sp, #16]
 800bcce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d05e      	beq.n	800bd92 <_dtoa_r+0x922>
 800bcd4:	9904      	ldr	r1, [sp, #16]
 800bcd6:	9803      	ldr	r0, [sp, #12]
 800bcd8:	f000 fc44 	bl	800c564 <__mcmp>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	da58      	bge.n	800bd92 <_dtoa_r+0x922>
 800bce0:	2300      	movs	r3, #0
 800bce2:	220a      	movs	r2, #10
 800bce4:	9903      	ldr	r1, [sp, #12]
 800bce6:	9802      	ldr	r0, [sp, #8]
 800bce8:	f000 fa78 	bl	800c1dc <__multadd>
 800bcec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcee:	3f01      	subs	r7, #1
 800bcf0:	9003      	str	r0, [sp, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d100      	bne.n	800bcf8 <_dtoa_r+0x888>
 800bcf6:	e190      	b.n	800c01a <_dtoa_r+0xbaa>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	0031      	movs	r1, r6
 800bcfc:	220a      	movs	r2, #10
 800bcfe:	9802      	ldr	r0, [sp, #8]
 800bd00:	f000 fa6c 	bl	800c1dc <__multadd>
 800bd04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd06:	0006      	movs	r6, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dd00      	ble.n	800bd0e <_dtoa_r+0x89e>
 800bd0c:	e088      	b.n	800be20 <_dtoa_r+0x9b0>
 800bd0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	dc00      	bgt.n	800bd16 <_dtoa_r+0x8a6>
 800bd14:	e084      	b.n	800be20 <_dtoa_r+0x9b0>
 800bd16:	e044      	b.n	800bda2 <_dtoa_r+0x932>
 800bd18:	2336      	movs	r3, #54	; 0x36
 800bd1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd1c:	1a9b      	subs	r3, r3, r2
 800bd1e:	e747      	b.n	800bbb0 <_dtoa_r+0x740>
 800bd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd22:	1e5d      	subs	r5, r3, #1
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	42ab      	cmp	r3, r5
 800bd28:	db08      	blt.n	800bd3c <_dtoa_r+0x8cc>
 800bd2a:	1b5d      	subs	r5, r3, r5
 800bd2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	da0c      	bge.n	800bd4c <_dtoa_r+0x8dc>
 800bd32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd36:	1a9c      	subs	r4, r3, r2
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e73b      	b.n	800bbb4 <_dtoa_r+0x744>
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	9504      	str	r5, [sp, #16]
 800bd40:	1aea      	subs	r2, r5, r3
 800bd42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd44:	2500      	movs	r5, #0
 800bd46:	189b      	adds	r3, r3, r2
 800bd48:	9311      	str	r3, [sp, #68]	; 0x44
 800bd4a:	e7ef      	b.n	800bd2c <_dtoa_r+0x8bc>
 800bd4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd50:	e730      	b.n	800bbb4 <_dtoa_r+0x744>
 800bd52:	9d04      	ldr	r5, [sp, #16]
 800bd54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd56:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800bd58:	e737      	b.n	800bbca <_dtoa_r+0x75a>
 800bd5a:	9a04      	ldr	r2, [sp, #16]
 800bd5c:	e764      	b.n	800bc28 <_dtoa_r+0x7b8>
 800bd5e:	2500      	movs	r5, #0
 800bd60:	9b04      	ldr	r3, [sp, #16]
 800bd62:	9a04      	ldr	r2, [sp, #16]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	9310      	str	r3, [sp, #64]	; 0x40
 800bd68:	3303      	adds	r3, #3
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	18d3      	adds	r3, r2, r3
 800bd6e:	6858      	ldr	r0, [r3, #4]
 800bd70:	f000 fa72 	bl	800c258 <__hi0bits>
 800bd74:	2320      	movs	r3, #32
 800bd76:	1a18      	subs	r0, r3, r0
 800bd78:	e785      	b.n	800bc86 <_dtoa_r+0x816>
 800bd7a:	2b04      	cmp	r3, #4
 800bd7c:	d095      	beq.n	800bcaa <_dtoa_r+0x83a>
 800bd7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd80:	331c      	adds	r3, #28
 800bd82:	18d2      	adds	r2, r2, r3
 800bd84:	920a      	str	r2, [sp, #40]	; 0x28
 800bd86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd88:	18e4      	adds	r4, r4, r3
 800bd8a:	18d3      	adds	r3, r2, r3
 800bd8c:	e78c      	b.n	800bca8 <_dtoa_r+0x838>
 800bd8e:	0003      	movs	r3, r0
 800bd90:	e7f5      	b.n	800bd7e <_dtoa_r+0x90e>
 800bd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	dc3d      	bgt.n	800be14 <_dtoa_r+0x9a4>
 800bd98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	dd3a      	ble.n	800be14 <_dtoa_r+0x9a4>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda0:	930c      	str	r3, [sp, #48]	; 0x30
 800bda2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10c      	bne.n	800bdc2 <_dtoa_r+0x952>
 800bda8:	9904      	ldr	r1, [sp, #16]
 800bdaa:	2205      	movs	r2, #5
 800bdac:	9802      	ldr	r0, [sp, #8]
 800bdae:	f000 fa15 	bl	800c1dc <__multadd>
 800bdb2:	9004      	str	r0, [sp, #16]
 800bdb4:	0001      	movs	r1, r0
 800bdb6:	9803      	ldr	r0, [sp, #12]
 800bdb8:	f000 fbd4 	bl	800c564 <__mcmp>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	dd00      	ble.n	800bdc2 <_dtoa_r+0x952>
 800bdc0:	e5af      	b.n	800b922 <_dtoa_r+0x4b2>
 800bdc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdc4:	9d08      	ldr	r5, [sp, #32]
 800bdc6:	43df      	mvns	r7, r3
 800bdc8:	2300      	movs	r3, #0
 800bdca:	9309      	str	r3, [sp, #36]	; 0x24
 800bdcc:	9904      	ldr	r1, [sp, #16]
 800bdce:	9802      	ldr	r0, [sp, #8]
 800bdd0:	f000 f9eb 	bl	800c1aa <_Bfree>
 800bdd4:	2e00      	cmp	r6, #0
 800bdd6:	d100      	bne.n	800bdda <_dtoa_r+0x96a>
 800bdd8:	e69b      	b.n	800bb12 <_dtoa_r+0x6a2>
 800bdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d005      	beq.n	800bdec <_dtoa_r+0x97c>
 800bde0:	42b3      	cmp	r3, r6
 800bde2:	d003      	beq.n	800bdec <_dtoa_r+0x97c>
 800bde4:	0019      	movs	r1, r3
 800bde6:	9802      	ldr	r0, [sp, #8]
 800bde8:	f000 f9df 	bl	800c1aa <_Bfree>
 800bdec:	0031      	movs	r1, r6
 800bdee:	9802      	ldr	r0, [sp, #8]
 800bdf0:	f000 f9db 	bl	800c1aa <_Bfree>
 800bdf4:	e68d      	b.n	800bb12 <_dtoa_r+0x6a2>
 800bdf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdf8:	9304      	str	r3, [sp, #16]
 800bdfa:	001e      	movs	r6, r3
 800bdfc:	e7e1      	b.n	800bdc2 <_dtoa_r+0x952>
 800bdfe:	2300      	movs	r3, #0
 800be00:	e7fa      	b.n	800bdf8 <_dtoa_r+0x988>
 800be02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be04:	0037      	movs	r7, r6
 800be06:	9304      	str	r3, [sp, #16]
 800be08:	001e      	movs	r6, r3
 800be0a:	e58a      	b.n	800b922 <_dtoa_r+0x4b2>
 800be0c:	40240000 	.word	0x40240000
 800be10:	00000433 	.word	0x00000433
 800be14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be16:	2b00      	cmp	r3, #0
 800be18:	d100      	bne.n	800be1c <_dtoa_r+0x9ac>
 800be1a:	e0b2      	b.n	800bf82 <_dtoa_r+0xb12>
 800be1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1e:	930c      	str	r3, [sp, #48]	; 0x30
 800be20:	2c00      	cmp	r4, #0
 800be22:	dd05      	ble.n	800be30 <_dtoa_r+0x9c0>
 800be24:	0031      	movs	r1, r6
 800be26:	0022      	movs	r2, r4
 800be28:	9802      	ldr	r0, [sp, #8]
 800be2a:	f000 fb49 	bl	800c4c0 <__lshift>
 800be2e:	0006      	movs	r6, r0
 800be30:	0030      	movs	r0, r6
 800be32:	2d00      	cmp	r5, #0
 800be34:	d011      	beq.n	800be5a <_dtoa_r+0x9ea>
 800be36:	6871      	ldr	r1, [r6, #4]
 800be38:	9802      	ldr	r0, [sp, #8]
 800be3a:	f000 f97e 	bl	800c13a <_Balloc>
 800be3e:	0031      	movs	r1, r6
 800be40:	0004      	movs	r4, r0
 800be42:	6933      	ldr	r3, [r6, #16]
 800be44:	310c      	adds	r1, #12
 800be46:	1c9a      	adds	r2, r3, #2
 800be48:	0092      	lsls	r2, r2, #2
 800be4a:	300c      	adds	r0, #12
 800be4c:	f7fe f88c 	bl	8009f68 <memcpy>
 800be50:	2201      	movs	r2, #1
 800be52:	0021      	movs	r1, r4
 800be54:	9802      	ldr	r0, [sp, #8]
 800be56:	f000 fb33 	bl	800c4c0 <__lshift>
 800be5a:	9609      	str	r6, [sp, #36]	; 0x24
 800be5c:	0006      	movs	r6, r0
 800be5e:	9b08      	ldr	r3, [sp, #32]
 800be60:	930a      	str	r3, [sp, #40]	; 0x28
 800be62:	9904      	ldr	r1, [sp, #16]
 800be64:	9803      	ldr	r0, [sp, #12]
 800be66:	f7ff fa7c 	bl	800b362 <quorem>
 800be6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be6c:	900d      	str	r0, [sp, #52]	; 0x34
 800be6e:	0004      	movs	r4, r0
 800be70:	9803      	ldr	r0, [sp, #12]
 800be72:	f000 fb77 	bl	800c564 <__mcmp>
 800be76:	0032      	movs	r2, r6
 800be78:	9010      	str	r0, [sp, #64]	; 0x40
 800be7a:	9904      	ldr	r1, [sp, #16]
 800be7c:	9802      	ldr	r0, [sp, #8]
 800be7e:	f000 fb8b 	bl	800c598 <__mdiff>
 800be82:	2301      	movs	r3, #1
 800be84:	930b      	str	r3, [sp, #44]	; 0x2c
 800be86:	68c3      	ldr	r3, [r0, #12]
 800be88:	3430      	adds	r4, #48	; 0x30
 800be8a:	0005      	movs	r5, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <_dtoa_r+0xa2a>
 800be90:	0001      	movs	r1, r0
 800be92:	9803      	ldr	r0, [sp, #12]
 800be94:	f000 fb66 	bl	800c564 <__mcmp>
 800be98:	900b      	str	r0, [sp, #44]	; 0x2c
 800be9a:	0029      	movs	r1, r5
 800be9c:	9802      	ldr	r0, [sp, #8]
 800be9e:	f000 f984 	bl	800c1aa <_Bfree>
 800bea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bea6:	4313      	orrs	r3, r2
 800bea8:	d10e      	bne.n	800bec8 <_dtoa_r+0xa58>
 800beaa:	9a06      	ldr	r2, [sp, #24]
 800beac:	3301      	adds	r3, #1
 800beae:	4213      	tst	r3, r2
 800beb0:	d10a      	bne.n	800bec8 <_dtoa_r+0xa58>
 800beb2:	2c39      	cmp	r4, #57	; 0x39
 800beb4:	d026      	beq.n	800bf04 <_dtoa_r+0xa94>
 800beb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800beb8:	2b00      	cmp	r3, #0
 800beba:	dd01      	ble.n	800bec0 <_dtoa_r+0xa50>
 800bebc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bebe:	3431      	adds	r4, #49	; 0x31
 800bec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bec2:	1c5d      	adds	r5, r3, #1
 800bec4:	701c      	strb	r4, [r3, #0]
 800bec6:	e781      	b.n	800bdcc <_dtoa_r+0x95c>
 800bec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800beca:	2b00      	cmp	r3, #0
 800becc:	db07      	blt.n	800bede <_dtoa_r+0xa6e>
 800bece:	001d      	movs	r5, r3
 800bed0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bed2:	431d      	orrs	r5, r3
 800bed4:	d122      	bne.n	800bf1c <_dtoa_r+0xaac>
 800bed6:	2301      	movs	r3, #1
 800bed8:	9a06      	ldr	r2, [sp, #24]
 800beda:	4213      	tst	r3, r2
 800bedc:	d11e      	bne.n	800bf1c <_dtoa_r+0xaac>
 800bede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dded      	ble.n	800bec0 <_dtoa_r+0xa50>
 800bee4:	9903      	ldr	r1, [sp, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	9802      	ldr	r0, [sp, #8]
 800beea:	f000 fae9 	bl	800c4c0 <__lshift>
 800beee:	9904      	ldr	r1, [sp, #16]
 800bef0:	9003      	str	r0, [sp, #12]
 800bef2:	f000 fb37 	bl	800c564 <__mcmp>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	dc02      	bgt.n	800bf00 <_dtoa_r+0xa90>
 800befa:	d1e1      	bne.n	800bec0 <_dtoa_r+0xa50>
 800befc:	07e3      	lsls	r3, r4, #31
 800befe:	d5df      	bpl.n	800bec0 <_dtoa_r+0xa50>
 800bf00:	2c39      	cmp	r4, #57	; 0x39
 800bf02:	d1db      	bne.n	800bebc <_dtoa_r+0xa4c>
 800bf04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf08:	1c5d      	adds	r5, r3, #1
 800bf0a:	2339      	movs	r3, #57	; 0x39
 800bf0c:	7013      	strb	r3, [r2, #0]
 800bf0e:	1e6b      	subs	r3, r5, #1
 800bf10:	781a      	ldrb	r2, [r3, #0]
 800bf12:	2a39      	cmp	r2, #57	; 0x39
 800bf14:	d067      	beq.n	800bfe6 <_dtoa_r+0xb76>
 800bf16:	3201      	adds	r2, #1
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	e757      	b.n	800bdcc <_dtoa_r+0x95c>
 800bf1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf1e:	1c5d      	adds	r5, r3, #1
 800bf20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dd04      	ble.n	800bf30 <_dtoa_r+0xac0>
 800bf26:	2c39      	cmp	r4, #57	; 0x39
 800bf28:	d0ec      	beq.n	800bf04 <_dtoa_r+0xa94>
 800bf2a:	3401      	adds	r4, #1
 800bf2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf2e:	e7c9      	b.n	800bec4 <_dtoa_r+0xa54>
 800bf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf34:	701c      	strb	r4, [r3, #0]
 800bf36:	9b08      	ldr	r3, [sp, #32]
 800bf38:	1aeb      	subs	r3, r5, r3
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d03e      	beq.n	800bfbc <_dtoa_r+0xb4c>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	220a      	movs	r2, #10
 800bf42:	9903      	ldr	r1, [sp, #12]
 800bf44:	9802      	ldr	r0, [sp, #8]
 800bf46:	f000 f949 	bl	800c1dc <__multadd>
 800bf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf4c:	9003      	str	r0, [sp, #12]
 800bf4e:	42b3      	cmp	r3, r6
 800bf50:	d109      	bne.n	800bf66 <_dtoa_r+0xaf6>
 800bf52:	2300      	movs	r3, #0
 800bf54:	220a      	movs	r2, #10
 800bf56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf58:	9802      	ldr	r0, [sp, #8]
 800bf5a:	f000 f93f 	bl	800c1dc <__multadd>
 800bf5e:	9009      	str	r0, [sp, #36]	; 0x24
 800bf60:	0006      	movs	r6, r0
 800bf62:	950a      	str	r5, [sp, #40]	; 0x28
 800bf64:	e77d      	b.n	800be62 <_dtoa_r+0x9f2>
 800bf66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf68:	2300      	movs	r3, #0
 800bf6a:	220a      	movs	r2, #10
 800bf6c:	9802      	ldr	r0, [sp, #8]
 800bf6e:	f000 f935 	bl	800c1dc <__multadd>
 800bf72:	2300      	movs	r3, #0
 800bf74:	9009      	str	r0, [sp, #36]	; 0x24
 800bf76:	220a      	movs	r2, #10
 800bf78:	0031      	movs	r1, r6
 800bf7a:	9802      	ldr	r0, [sp, #8]
 800bf7c:	f000 f92e 	bl	800c1dc <__multadd>
 800bf80:	e7ee      	b.n	800bf60 <_dtoa_r+0xaf0>
 800bf82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf84:	930c      	str	r3, [sp, #48]	; 0x30
 800bf86:	9b08      	ldr	r3, [sp, #32]
 800bf88:	9306      	str	r3, [sp, #24]
 800bf8a:	9904      	ldr	r1, [sp, #16]
 800bf8c:	9803      	ldr	r0, [sp, #12]
 800bf8e:	f7ff f9e8 	bl	800b362 <quorem>
 800bf92:	9b06      	ldr	r3, [sp, #24]
 800bf94:	3030      	adds	r0, #48	; 0x30
 800bf96:	1c5d      	adds	r5, r3, #1
 800bf98:	7018      	strb	r0, [r3, #0]
 800bf9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf9c:	9b08      	ldr	r3, [sp, #32]
 800bf9e:	0004      	movs	r4, r0
 800bfa0:	1aeb      	subs	r3, r5, r3
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	dd08      	ble.n	800bfb8 <_dtoa_r+0xb48>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	9903      	ldr	r1, [sp, #12]
 800bfac:	9802      	ldr	r0, [sp, #8]
 800bfae:	f000 f915 	bl	800c1dc <__multadd>
 800bfb2:	9506      	str	r5, [sp, #24]
 800bfb4:	9003      	str	r0, [sp, #12]
 800bfb6:	e7e8      	b.n	800bf8a <_dtoa_r+0xb1a>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	9309      	str	r3, [sp, #36]	; 0x24
 800bfbc:	9903      	ldr	r1, [sp, #12]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	9802      	ldr	r0, [sp, #8]
 800bfc2:	f000 fa7d 	bl	800c4c0 <__lshift>
 800bfc6:	9904      	ldr	r1, [sp, #16]
 800bfc8:	9003      	str	r0, [sp, #12]
 800bfca:	f000 facb 	bl	800c564 <__mcmp>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	dc9d      	bgt.n	800bf0e <_dtoa_r+0xa9e>
 800bfd2:	d101      	bne.n	800bfd8 <_dtoa_r+0xb68>
 800bfd4:	07e3      	lsls	r3, r4, #31
 800bfd6:	d49a      	bmi.n	800bf0e <_dtoa_r+0xa9e>
 800bfd8:	1e6b      	subs	r3, r5, #1
 800bfda:	781a      	ldrb	r2, [r3, #0]
 800bfdc:	2a30      	cmp	r2, #48	; 0x30
 800bfde:	d000      	beq.n	800bfe2 <_dtoa_r+0xb72>
 800bfe0:	e6f4      	b.n	800bdcc <_dtoa_r+0x95c>
 800bfe2:	001d      	movs	r5, r3
 800bfe4:	e7f8      	b.n	800bfd8 <_dtoa_r+0xb68>
 800bfe6:	9a08      	ldr	r2, [sp, #32]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d103      	bne.n	800bff4 <_dtoa_r+0xb84>
 800bfec:	2331      	movs	r3, #49	; 0x31
 800bfee:	3701      	adds	r7, #1
 800bff0:	7013      	strb	r3, [r2, #0]
 800bff2:	e6eb      	b.n	800bdcc <_dtoa_r+0x95c>
 800bff4:	001d      	movs	r5, r3
 800bff6:	e78a      	b.n	800bf0e <_dtoa_r+0xa9e>
 800bff8:	4b0b      	ldr	r3, [pc, #44]	; (800c028 <_dtoa_r+0xbb8>)
 800bffa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bffc:	9308      	str	r3, [sp, #32]
 800bffe:	4b0b      	ldr	r3, [pc, #44]	; (800c02c <_dtoa_r+0xbbc>)
 800c000:	2a00      	cmp	r2, #0
 800c002:	d001      	beq.n	800c008 <_dtoa_r+0xb98>
 800c004:	f7ff fa77 	bl	800b4f6 <_dtoa_r+0x86>
 800c008:	f7ff fa77 	bl	800b4fa <_dtoa_r+0x8a>
 800c00c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c00e:	2b01      	cmp	r3, #1
 800c010:	dc00      	bgt.n	800c014 <_dtoa_r+0xba4>
 800c012:	e621      	b.n	800bc58 <_dtoa_r+0x7e8>
 800c014:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c016:	2001      	movs	r0, #1
 800c018:	e635      	b.n	800bc86 <_dtoa_r+0x816>
 800c01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	dcb2      	bgt.n	800bf86 <_dtoa_r+0xb16>
 800c020:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c022:	2b02      	cmp	r3, #2
 800c024:	ddaf      	ble.n	800bf86 <_dtoa_r+0xb16>
 800c026:	e6bc      	b.n	800bda2 <_dtoa_r+0x932>
 800c028:	0800ea96 	.word	0x0800ea96
 800c02c:	0800ea9e 	.word	0x0800ea9e

0800c030 <_findenv_r>:
 800c030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c032:	000e      	movs	r6, r1
 800c034:	b085      	sub	sp, #20
 800c036:	0007      	movs	r7, r0
 800c038:	9203      	str	r2, [sp, #12]
 800c03a:	f000 fdf9 	bl	800cc30 <__env_lock>
 800c03e:	4c19      	ldr	r4, [pc, #100]	; (800c0a4 <_findenv_r+0x74>)
 800c040:	0033      	movs	r3, r6
 800c042:	6825      	ldr	r5, [r4, #0]
 800c044:	2d00      	cmp	r5, #0
 800c046:	d106      	bne.n	800c056 <_findenv_r+0x26>
 800c048:	0038      	movs	r0, r7
 800c04a:	f000 fdf2 	bl	800cc32 <__env_unlock>
 800c04e:	2000      	movs	r0, #0
 800c050:	b005      	add	sp, #20
 800c052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c054:	3301      	adds	r3, #1
 800c056:	781a      	ldrb	r2, [r3, #0]
 800c058:	2a00      	cmp	r2, #0
 800c05a:	d01f      	beq.n	800c09c <_findenv_r+0x6c>
 800c05c:	2a3d      	cmp	r2, #61	; 0x3d
 800c05e:	d1f9      	bne.n	800c054 <_findenv_r+0x24>
 800c060:	e7f2      	b.n	800c048 <_findenv_r+0x18>
 800c062:	3504      	adds	r5, #4
 800c064:	6828      	ldr	r0, [r5, #0]
 800c066:	2800      	cmp	r0, #0
 800c068:	d0ee      	beq.n	800c048 <_findenv_r+0x18>
 800c06a:	9a01      	ldr	r2, [sp, #4]
 800c06c:	0031      	movs	r1, r6
 800c06e:	f000 fd27 	bl	800cac0 <strncmp>
 800c072:	2800      	cmp	r0, #0
 800c074:	d1f5      	bne.n	800c062 <_findenv_r+0x32>
 800c076:	9a01      	ldr	r2, [sp, #4]
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	4694      	mov	ip, r2
 800c07c:	4463      	add	r3, ip
 800c07e:	9302      	str	r3, [sp, #8]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b3d      	cmp	r3, #61	; 0x3d
 800c084:	d1ed      	bne.n	800c062 <_findenv_r+0x32>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	0038      	movs	r0, r7
 800c08a:	1aed      	subs	r5, r5, r3
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	10ad      	asrs	r5, r5, #2
 800c090:	601d      	str	r5, [r3, #0]
 800c092:	f000 fdce 	bl	800cc32 <__env_unlock>
 800c096:	9802      	ldr	r0, [sp, #8]
 800c098:	3001      	adds	r0, #1
 800c09a:	e7d9      	b.n	800c050 <_findenv_r+0x20>
 800c09c:	1b9b      	subs	r3, r3, r6
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	e7e0      	b.n	800c064 <_findenv_r+0x34>
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	20000008 	.word	0x20000008

0800c0a8 <_getenv_r>:
 800c0a8:	b507      	push	{r0, r1, r2, lr}
 800c0aa:	aa01      	add	r2, sp, #4
 800c0ac:	f7ff ffc0 	bl	800c030 <_findenv_r>
 800c0b0:	bd0e      	pop	{r1, r2, r3, pc}
	...

0800c0b4 <_gettimeofday_r>:
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	b570      	push	{r4, r5, r6, lr}
 800c0b8:	4c06      	ldr	r4, [pc, #24]	; (800c0d4 <_gettimeofday_r+0x20>)
 800c0ba:	0005      	movs	r5, r0
 800c0bc:	0008      	movs	r0, r1
 800c0be:	0011      	movs	r1, r2
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	f002 fa9f 	bl	800e604 <_gettimeofday>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d103      	bne.n	800c0d2 <_gettimeofday_r+0x1e>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d000      	beq.n	800c0d2 <_gettimeofday_r+0x1e>
 800c0d0:	602b      	str	r3, [r5, #0]
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}
 800c0d4:	200004cc 	.word	0x200004cc

0800c0d8 <__gettzinfo>:
 800c0d8:	4800      	ldr	r0, [pc, #0]	; (800c0dc <__gettzinfo+0x4>)
 800c0da:	4770      	bx	lr
 800c0dc:	20000080 	.word	0x20000080

0800c0e0 <_localeconv_r>:
 800c0e0:	4b03      	ldr	r3, [pc, #12]	; (800c0f0 <_localeconv_r+0x10>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6a18      	ldr	r0, [r3, #32]
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d100      	bne.n	800c0ec <_localeconv_r+0xc>
 800c0ea:	4802      	ldr	r0, [pc, #8]	; (800c0f4 <_localeconv_r+0x14>)
 800c0ec:	30f0      	adds	r0, #240	; 0xf0
 800c0ee:	4770      	bx	lr
 800c0f0:	20000010 	.word	0x20000010
 800c0f4:	200000d8 	.word	0x200000d8

0800c0f8 <malloc>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	4b03      	ldr	r3, [pc, #12]	; (800c108 <malloc+0x10>)
 800c0fc:	0001      	movs	r1, r0
 800c0fe:	6818      	ldr	r0, [r3, #0]
 800c100:	f7fe f9d8 	bl	800a4b4 <_malloc_r>
 800c104:	bd10      	pop	{r4, pc}
 800c106:	46c0      	nop			; (mov r8, r8)
 800c108:	20000010 	.word	0x20000010

0800c10c <free>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4b03      	ldr	r3, [pc, #12]	; (800c11c <free+0x10>)
 800c110:	0001      	movs	r1, r0
 800c112:	6818      	ldr	r0, [r3, #0]
 800c114:	f000 faf8 	bl	800c708 <_free_r>
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	20000010 	.word	0x20000010

0800c120 <memchr>:
 800c120:	b2c9      	uxtb	r1, r1
 800c122:	1882      	adds	r2, r0, r2
 800c124:	4290      	cmp	r0, r2
 800c126:	d101      	bne.n	800c12c <memchr+0xc>
 800c128:	2000      	movs	r0, #0
 800c12a:	4770      	bx	lr
 800c12c:	7803      	ldrb	r3, [r0, #0]
 800c12e:	428b      	cmp	r3, r1
 800c130:	d0fb      	beq.n	800c12a <memchr+0xa>
 800c132:	3001      	adds	r0, #1
 800c134:	e7f6      	b.n	800c124 <memchr+0x4>

0800c136 <__malloc_lock>:
 800c136:	4770      	bx	lr

0800c138 <__malloc_unlock>:
 800c138:	4770      	bx	lr

0800c13a <_Balloc>:
 800c13a:	b570      	push	{r4, r5, r6, lr}
 800c13c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c13e:	0004      	movs	r4, r0
 800c140:	000d      	movs	r5, r1
 800c142:	2e00      	cmp	r6, #0
 800c144:	d107      	bne.n	800c156 <_Balloc+0x1c>
 800c146:	2010      	movs	r0, #16
 800c148:	f7ff ffd6 	bl	800c0f8 <malloc>
 800c14c:	6260      	str	r0, [r4, #36]	; 0x24
 800c14e:	6046      	str	r6, [r0, #4]
 800c150:	6086      	str	r6, [r0, #8]
 800c152:	6006      	str	r6, [r0, #0]
 800c154:	60c6      	str	r6, [r0, #12]
 800c156:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c158:	68f3      	ldr	r3, [r6, #12]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d013      	beq.n	800c186 <_Balloc+0x4c>
 800c15e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c160:	00aa      	lsls	r2, r5, #2
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	189b      	adds	r3, r3, r2
 800c166:	6818      	ldr	r0, [r3, #0]
 800c168:	2800      	cmp	r0, #0
 800c16a:	d118      	bne.n	800c19e <_Balloc+0x64>
 800c16c:	2101      	movs	r1, #1
 800c16e:	000e      	movs	r6, r1
 800c170:	40ae      	lsls	r6, r5
 800c172:	1d72      	adds	r2, r6, #5
 800c174:	0092      	lsls	r2, r2, #2
 800c176:	0020      	movs	r0, r4
 800c178:	f7fe f98e 	bl	800a498 <_calloc_r>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d00c      	beq.n	800c19a <_Balloc+0x60>
 800c180:	6045      	str	r5, [r0, #4]
 800c182:	6086      	str	r6, [r0, #8]
 800c184:	e00d      	b.n	800c1a2 <_Balloc+0x68>
 800c186:	2221      	movs	r2, #33	; 0x21
 800c188:	2104      	movs	r1, #4
 800c18a:	0020      	movs	r0, r4
 800c18c:	f7fe f984 	bl	800a498 <_calloc_r>
 800c190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c192:	60f0      	str	r0, [r6, #12]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e1      	bne.n	800c15e <_Balloc+0x24>
 800c19a:	2000      	movs	r0, #0
 800c19c:	bd70      	pop	{r4, r5, r6, pc}
 800c19e:	6802      	ldr	r2, [r0, #0]
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	6103      	str	r3, [r0, #16]
 800c1a6:	60c3      	str	r3, [r0, #12]
 800c1a8:	e7f8      	b.n	800c19c <_Balloc+0x62>

0800c1aa <_Bfree>:
 800c1aa:	b570      	push	{r4, r5, r6, lr}
 800c1ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c1ae:	0006      	movs	r6, r0
 800c1b0:	000d      	movs	r5, r1
 800c1b2:	2c00      	cmp	r4, #0
 800c1b4:	d107      	bne.n	800c1c6 <_Bfree+0x1c>
 800c1b6:	2010      	movs	r0, #16
 800c1b8:	f7ff ff9e 	bl	800c0f8 <malloc>
 800c1bc:	6270      	str	r0, [r6, #36]	; 0x24
 800c1be:	6044      	str	r4, [r0, #4]
 800c1c0:	6084      	str	r4, [r0, #8]
 800c1c2:	6004      	str	r4, [r0, #0]
 800c1c4:	60c4      	str	r4, [r0, #12]
 800c1c6:	2d00      	cmp	r5, #0
 800c1c8:	d007      	beq.n	800c1da <_Bfree+0x30>
 800c1ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c1cc:	686a      	ldr	r2, [r5, #4]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	0092      	lsls	r2, r2, #2
 800c1d2:	189b      	adds	r3, r3, r2
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	602a      	str	r2, [r5, #0]
 800c1d8:	601d      	str	r5, [r3, #0]
 800c1da:	bd70      	pop	{r4, r5, r6, pc}

0800c1dc <__multadd>:
 800c1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1de:	001e      	movs	r6, r3
 800c1e0:	2314      	movs	r3, #20
 800c1e2:	469c      	mov	ip, r3
 800c1e4:	0007      	movs	r7, r0
 800c1e6:	000c      	movs	r4, r1
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	690d      	ldr	r5, [r1, #16]
 800c1ec:	448c      	add	ip, r1
 800c1ee:	4663      	mov	r3, ip
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	b299      	uxth	r1, r3
 800c1f6:	4663      	mov	r3, ip
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4351      	muls	r1, r2
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	4353      	muls	r3, r2
 800c200:	1989      	adds	r1, r1, r6
 800c202:	0c0e      	lsrs	r6, r1, #16
 800c204:	199b      	adds	r3, r3, r6
 800c206:	b289      	uxth	r1, r1
 800c208:	0c1e      	lsrs	r6, r3, #16
 800c20a:	041b      	lsls	r3, r3, #16
 800c20c:	185b      	adds	r3, r3, r1
 800c20e:	4661      	mov	r1, ip
 800c210:	c108      	stmia	r1!, {r3}
 800c212:	468c      	mov	ip, r1
 800c214:	4285      	cmp	r5, r0
 800c216:	dcea      	bgt.n	800c1ee <__multadd+0x12>
 800c218:	2e00      	cmp	r6, #0
 800c21a:	d01b      	beq.n	800c254 <__multadd+0x78>
 800c21c:	68a3      	ldr	r3, [r4, #8]
 800c21e:	42ab      	cmp	r3, r5
 800c220:	dc12      	bgt.n	800c248 <__multadd+0x6c>
 800c222:	6863      	ldr	r3, [r4, #4]
 800c224:	0038      	movs	r0, r7
 800c226:	1c59      	adds	r1, r3, #1
 800c228:	f7ff ff87 	bl	800c13a <_Balloc>
 800c22c:	0021      	movs	r1, r4
 800c22e:	6923      	ldr	r3, [r4, #16]
 800c230:	9001      	str	r0, [sp, #4]
 800c232:	1c9a      	adds	r2, r3, #2
 800c234:	0092      	lsls	r2, r2, #2
 800c236:	310c      	adds	r1, #12
 800c238:	300c      	adds	r0, #12
 800c23a:	f7fd fe95 	bl	8009f68 <memcpy>
 800c23e:	0021      	movs	r1, r4
 800c240:	0038      	movs	r0, r7
 800c242:	f7ff ffb2 	bl	800c1aa <_Bfree>
 800c246:	9c01      	ldr	r4, [sp, #4]
 800c248:	1d2b      	adds	r3, r5, #4
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	18e3      	adds	r3, r4, r3
 800c24e:	3501      	adds	r5, #1
 800c250:	605e      	str	r6, [r3, #4]
 800c252:	6125      	str	r5, [r4, #16]
 800c254:	0020      	movs	r0, r4
 800c256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800c258 <__hi0bits>:
 800c258:	0003      	movs	r3, r0
 800c25a:	0c02      	lsrs	r2, r0, #16
 800c25c:	2000      	movs	r0, #0
 800c25e:	4282      	cmp	r2, r0
 800c260:	d101      	bne.n	800c266 <__hi0bits+0xe>
 800c262:	041b      	lsls	r3, r3, #16
 800c264:	3010      	adds	r0, #16
 800c266:	0e1a      	lsrs	r2, r3, #24
 800c268:	d101      	bne.n	800c26e <__hi0bits+0x16>
 800c26a:	3008      	adds	r0, #8
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	0f1a      	lsrs	r2, r3, #28
 800c270:	d101      	bne.n	800c276 <__hi0bits+0x1e>
 800c272:	3004      	adds	r0, #4
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	0f9a      	lsrs	r2, r3, #30
 800c278:	d101      	bne.n	800c27e <__hi0bits+0x26>
 800c27a:	3002      	adds	r0, #2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	2b00      	cmp	r3, #0
 800c280:	db03      	blt.n	800c28a <__hi0bits+0x32>
 800c282:	3001      	adds	r0, #1
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	d400      	bmi.n	800c28a <__hi0bits+0x32>
 800c288:	2020      	movs	r0, #32
 800c28a:	4770      	bx	lr

0800c28c <__lo0bits>:
 800c28c:	2207      	movs	r2, #7
 800c28e:	6803      	ldr	r3, [r0, #0]
 800c290:	b510      	push	{r4, lr}
 800c292:	0001      	movs	r1, r0
 800c294:	401a      	ands	r2, r3
 800c296:	d00d      	beq.n	800c2b4 <__lo0bits+0x28>
 800c298:	2401      	movs	r4, #1
 800c29a:	2000      	movs	r0, #0
 800c29c:	4223      	tst	r3, r4
 800c29e:	d105      	bne.n	800c2ac <__lo0bits+0x20>
 800c2a0:	3002      	adds	r0, #2
 800c2a2:	4203      	tst	r3, r0
 800c2a4:	d003      	beq.n	800c2ae <__lo0bits+0x22>
 800c2a6:	40e3      	lsrs	r3, r4
 800c2a8:	0020      	movs	r0, r4
 800c2aa:	600b      	str	r3, [r1, #0]
 800c2ac:	bd10      	pop	{r4, pc}
 800c2ae:	089b      	lsrs	r3, r3, #2
 800c2b0:	600b      	str	r3, [r1, #0]
 800c2b2:	e7fb      	b.n	800c2ac <__lo0bits+0x20>
 800c2b4:	b29c      	uxth	r4, r3
 800c2b6:	0010      	movs	r0, r2
 800c2b8:	2c00      	cmp	r4, #0
 800c2ba:	d101      	bne.n	800c2c0 <__lo0bits+0x34>
 800c2bc:	2010      	movs	r0, #16
 800c2be:	0c1b      	lsrs	r3, r3, #16
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	d101      	bne.n	800c2ca <__lo0bits+0x3e>
 800c2c6:	3008      	adds	r0, #8
 800c2c8:	0a1b      	lsrs	r3, r3, #8
 800c2ca:	071a      	lsls	r2, r3, #28
 800c2cc:	d101      	bne.n	800c2d2 <__lo0bits+0x46>
 800c2ce:	3004      	adds	r0, #4
 800c2d0:	091b      	lsrs	r3, r3, #4
 800c2d2:	079a      	lsls	r2, r3, #30
 800c2d4:	d101      	bne.n	800c2da <__lo0bits+0x4e>
 800c2d6:	3002      	adds	r0, #2
 800c2d8:	089b      	lsrs	r3, r3, #2
 800c2da:	07da      	lsls	r2, r3, #31
 800c2dc:	d4e8      	bmi.n	800c2b0 <__lo0bits+0x24>
 800c2de:	085b      	lsrs	r3, r3, #1
 800c2e0:	d001      	beq.n	800c2e6 <__lo0bits+0x5a>
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	e7e4      	b.n	800c2b0 <__lo0bits+0x24>
 800c2e6:	2020      	movs	r0, #32
 800c2e8:	e7e0      	b.n	800c2ac <__lo0bits+0x20>

0800c2ea <__i2b>:
 800c2ea:	b510      	push	{r4, lr}
 800c2ec:	000c      	movs	r4, r1
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	f7ff ff23 	bl	800c13a <_Balloc>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	6144      	str	r4, [r0, #20]
 800c2f8:	6103      	str	r3, [r0, #16]
 800c2fa:	bd10      	pop	{r4, pc}

0800c2fc <__multiply>:
 800c2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fe:	690b      	ldr	r3, [r1, #16]
 800c300:	0014      	movs	r4, r2
 800c302:	6912      	ldr	r2, [r2, #16]
 800c304:	b089      	sub	sp, #36	; 0x24
 800c306:	000d      	movs	r5, r1
 800c308:	4293      	cmp	r3, r2
 800c30a:	da01      	bge.n	800c310 <__multiply+0x14>
 800c30c:	0025      	movs	r5, r4
 800c30e:	000c      	movs	r4, r1
 800c310:	692f      	ldr	r7, [r5, #16]
 800c312:	6926      	ldr	r6, [r4, #16]
 800c314:	6869      	ldr	r1, [r5, #4]
 800c316:	19bb      	adds	r3, r7, r6
 800c318:	9302      	str	r3, [sp, #8]
 800c31a:	68ab      	ldr	r3, [r5, #8]
 800c31c:	19ba      	adds	r2, r7, r6
 800c31e:	4293      	cmp	r3, r2
 800c320:	da00      	bge.n	800c324 <__multiply+0x28>
 800c322:	3101      	adds	r1, #1
 800c324:	f7ff ff09 	bl	800c13a <_Balloc>
 800c328:	0002      	movs	r2, r0
 800c32a:	19bb      	adds	r3, r7, r6
 800c32c:	3214      	adds	r2, #20
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	18d3      	adds	r3, r2, r3
 800c332:	469c      	mov	ip, r3
 800c334:	2100      	movs	r1, #0
 800c336:	0013      	movs	r3, r2
 800c338:	9004      	str	r0, [sp, #16]
 800c33a:	4563      	cmp	r3, ip
 800c33c:	d31d      	bcc.n	800c37a <__multiply+0x7e>
 800c33e:	3514      	adds	r5, #20
 800c340:	00bf      	lsls	r7, r7, #2
 800c342:	19eb      	adds	r3, r5, r7
 800c344:	3414      	adds	r4, #20
 800c346:	00b6      	lsls	r6, r6, #2
 800c348:	9305      	str	r3, [sp, #20]
 800c34a:	19a3      	adds	r3, r4, r6
 800c34c:	9503      	str	r5, [sp, #12]
 800c34e:	9401      	str	r4, [sp, #4]
 800c350:	9307      	str	r3, [sp, #28]
 800c352:	9b07      	ldr	r3, [sp, #28]
 800c354:	9901      	ldr	r1, [sp, #4]
 800c356:	4299      	cmp	r1, r3
 800c358:	d311      	bcc.n	800c37e <__multiply+0x82>
 800c35a:	9b02      	ldr	r3, [sp, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	dd06      	ble.n	800c36e <__multiply+0x72>
 800c360:	2304      	movs	r3, #4
 800c362:	425b      	negs	r3, r3
 800c364:	449c      	add	ip, r3
 800c366:	4663      	mov	r3, ip
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d051      	beq.n	800c412 <__multiply+0x116>
 800c36e:	9b04      	ldr	r3, [sp, #16]
 800c370:	9a02      	ldr	r2, [sp, #8]
 800c372:	0018      	movs	r0, r3
 800c374:	611a      	str	r2, [r3, #16]
 800c376:	b009      	add	sp, #36	; 0x24
 800c378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c37a:	c302      	stmia	r3!, {r1}
 800c37c:	e7dd      	b.n	800c33a <__multiply+0x3e>
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	b298      	uxth	r0, r3
 800c384:	2800      	cmp	r0, #0
 800c386:	d01c      	beq.n	800c3c2 <__multiply+0xc6>
 800c388:	0015      	movs	r5, r2
 800c38a:	2600      	movs	r6, #0
 800c38c:	9f03      	ldr	r7, [sp, #12]
 800c38e:	cf02      	ldmia	r7!, {r1}
 800c390:	682c      	ldr	r4, [r5, #0]
 800c392:	b28b      	uxth	r3, r1
 800c394:	4343      	muls	r3, r0
 800c396:	0c09      	lsrs	r1, r1, #16
 800c398:	4341      	muls	r1, r0
 800c39a:	b2a4      	uxth	r4, r4
 800c39c:	191b      	adds	r3, r3, r4
 800c39e:	199b      	adds	r3, r3, r6
 800c3a0:	000e      	movs	r6, r1
 800c3a2:	6829      	ldr	r1, [r5, #0]
 800c3a4:	9506      	str	r5, [sp, #24]
 800c3a6:	0c09      	lsrs	r1, r1, #16
 800c3a8:	1871      	adds	r1, r6, r1
 800c3aa:	0c1e      	lsrs	r6, r3, #16
 800c3ac:	1989      	adds	r1, r1, r6
 800c3ae:	0c0e      	lsrs	r6, r1, #16
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	0409      	lsls	r1, r1, #16
 800c3b4:	430b      	orrs	r3, r1
 800c3b6:	c508      	stmia	r5!, {r3}
 800c3b8:	9b05      	ldr	r3, [sp, #20]
 800c3ba:	42bb      	cmp	r3, r7
 800c3bc:	d8e7      	bhi.n	800c38e <__multiply+0x92>
 800c3be:	9b06      	ldr	r3, [sp, #24]
 800c3c0:	605e      	str	r6, [r3, #4]
 800c3c2:	9b01      	ldr	r3, [sp, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	0c1d      	lsrs	r5, r3, #16
 800c3c8:	d01e      	beq.n	800c408 <__multiply+0x10c>
 800c3ca:	0010      	movs	r0, r2
 800c3cc:	2700      	movs	r7, #0
 800c3ce:	6813      	ldr	r3, [r2, #0]
 800c3d0:	9e03      	ldr	r6, [sp, #12]
 800c3d2:	6831      	ldr	r1, [r6, #0]
 800c3d4:	6804      	ldr	r4, [r0, #0]
 800c3d6:	b289      	uxth	r1, r1
 800c3d8:	4369      	muls	r1, r5
 800c3da:	0c24      	lsrs	r4, r4, #16
 800c3dc:	1909      	adds	r1, r1, r4
 800c3de:	19c9      	adds	r1, r1, r7
 800c3e0:	040f      	lsls	r7, r1, #16
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	433b      	orrs	r3, r7
 800c3e6:	6003      	str	r3, [r0, #0]
 800c3e8:	ce80      	ldmia	r6!, {r7}
 800c3ea:	6843      	ldr	r3, [r0, #4]
 800c3ec:	0c3f      	lsrs	r7, r7, #16
 800c3ee:	436f      	muls	r7, r5
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	18fb      	adds	r3, r7, r3
 800c3f4:	0c09      	lsrs	r1, r1, #16
 800c3f6:	185b      	adds	r3, r3, r1
 800c3f8:	9905      	ldr	r1, [sp, #20]
 800c3fa:	9006      	str	r0, [sp, #24]
 800c3fc:	0c1f      	lsrs	r7, r3, #16
 800c3fe:	3004      	adds	r0, #4
 800c400:	42b1      	cmp	r1, r6
 800c402:	d8e6      	bhi.n	800c3d2 <__multiply+0xd6>
 800c404:	9906      	ldr	r1, [sp, #24]
 800c406:	604b      	str	r3, [r1, #4]
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	3204      	adds	r2, #4
 800c40c:	3304      	adds	r3, #4
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	e79f      	b.n	800c352 <__multiply+0x56>
 800c412:	9b02      	ldr	r3, [sp, #8]
 800c414:	3b01      	subs	r3, #1
 800c416:	9302      	str	r3, [sp, #8]
 800c418:	e79f      	b.n	800c35a <__multiply+0x5e>
	...

0800c41c <__pow5mult>:
 800c41c:	2303      	movs	r3, #3
 800c41e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c420:	4013      	ands	r3, r2
 800c422:	0005      	movs	r5, r0
 800c424:	000e      	movs	r6, r1
 800c426:	0014      	movs	r4, r2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d008      	beq.n	800c43e <__pow5mult+0x22>
 800c42c:	4922      	ldr	r1, [pc, #136]	; (800c4b8 <__pow5mult+0x9c>)
 800c42e:	3b01      	subs	r3, #1
 800c430:	009a      	lsls	r2, r3, #2
 800c432:	5852      	ldr	r2, [r2, r1]
 800c434:	2300      	movs	r3, #0
 800c436:	0031      	movs	r1, r6
 800c438:	f7ff fed0 	bl	800c1dc <__multadd>
 800c43c:	0006      	movs	r6, r0
 800c43e:	10a3      	asrs	r3, r4, #2
 800c440:	9301      	str	r3, [sp, #4]
 800c442:	d036      	beq.n	800c4b2 <__pow5mult+0x96>
 800c444:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800c446:	2c00      	cmp	r4, #0
 800c448:	d107      	bne.n	800c45a <__pow5mult+0x3e>
 800c44a:	2010      	movs	r0, #16
 800c44c:	f7ff fe54 	bl	800c0f8 <malloc>
 800c450:	6268      	str	r0, [r5, #36]	; 0x24
 800c452:	6044      	str	r4, [r0, #4]
 800c454:	6084      	str	r4, [r0, #8]
 800c456:	6004      	str	r4, [r0, #0]
 800c458:	60c4      	str	r4, [r0, #12]
 800c45a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c45c:	68bc      	ldr	r4, [r7, #8]
 800c45e:	2c00      	cmp	r4, #0
 800c460:	d107      	bne.n	800c472 <__pow5mult+0x56>
 800c462:	4916      	ldr	r1, [pc, #88]	; (800c4bc <__pow5mult+0xa0>)
 800c464:	0028      	movs	r0, r5
 800c466:	f7ff ff40 	bl	800c2ea <__i2b>
 800c46a:	2300      	movs	r3, #0
 800c46c:	0004      	movs	r4, r0
 800c46e:	60b8      	str	r0, [r7, #8]
 800c470:	6003      	str	r3, [r0, #0]
 800c472:	2201      	movs	r2, #1
 800c474:	9b01      	ldr	r3, [sp, #4]
 800c476:	4213      	tst	r3, r2
 800c478:	d00a      	beq.n	800c490 <__pow5mult+0x74>
 800c47a:	0031      	movs	r1, r6
 800c47c:	0022      	movs	r2, r4
 800c47e:	0028      	movs	r0, r5
 800c480:	f7ff ff3c 	bl	800c2fc <__multiply>
 800c484:	0007      	movs	r7, r0
 800c486:	0031      	movs	r1, r6
 800c488:	0028      	movs	r0, r5
 800c48a:	f7ff fe8e 	bl	800c1aa <_Bfree>
 800c48e:	003e      	movs	r6, r7
 800c490:	9b01      	ldr	r3, [sp, #4]
 800c492:	105b      	asrs	r3, r3, #1
 800c494:	9301      	str	r3, [sp, #4]
 800c496:	d00c      	beq.n	800c4b2 <__pow5mult+0x96>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d107      	bne.n	800c4ae <__pow5mult+0x92>
 800c49e:	0022      	movs	r2, r4
 800c4a0:	0021      	movs	r1, r4
 800c4a2:	0028      	movs	r0, r5
 800c4a4:	f7ff ff2a 	bl	800c2fc <__multiply>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	6020      	str	r0, [r4, #0]
 800c4ac:	6003      	str	r3, [r0, #0]
 800c4ae:	0004      	movs	r4, r0
 800c4b0:	e7df      	b.n	800c472 <__pow5mult+0x56>
 800c4b2:	0030      	movs	r0, r6
 800c4b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4b6:	46c0      	nop			; (mov r8, r8)
 800c4b8:	0800ebf8 	.word	0x0800ebf8
 800c4bc:	00000271 	.word	0x00000271

0800c4c0 <__lshift>:
 800c4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4c2:	000d      	movs	r5, r1
 800c4c4:	0017      	movs	r7, r2
 800c4c6:	692b      	ldr	r3, [r5, #16]
 800c4c8:	1154      	asrs	r4, r2, #5
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	18e3      	adds	r3, r4, r3
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	6849      	ldr	r1, [r1, #4]
 800c4d6:	68ab      	ldr	r3, [r5, #8]
 800c4d8:	9002      	str	r0, [sp, #8]
 800c4da:	9a00      	ldr	r2, [sp, #0]
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	db35      	blt.n	800c54c <__lshift+0x8c>
 800c4e0:	9802      	ldr	r0, [sp, #8]
 800c4e2:	f7ff fe2a 	bl	800c13a <_Balloc>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	0002      	movs	r2, r0
 800c4ea:	0006      	movs	r6, r0
 800c4ec:	0019      	movs	r1, r3
 800c4ee:	3214      	adds	r2, #20
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	db2e      	blt.n	800c552 <__lshift+0x92>
 800c4f4:	43e3      	mvns	r3, r4
 800c4f6:	17db      	asrs	r3, r3, #31
 800c4f8:	401c      	ands	r4, r3
 800c4fa:	002b      	movs	r3, r5
 800c4fc:	00a4      	lsls	r4, r4, #2
 800c4fe:	1914      	adds	r4, r2, r4
 800c500:	692a      	ldr	r2, [r5, #16]
 800c502:	3314      	adds	r3, #20
 800c504:	0092      	lsls	r2, r2, #2
 800c506:	189a      	adds	r2, r3, r2
 800c508:	4694      	mov	ip, r2
 800c50a:	221f      	movs	r2, #31
 800c50c:	4017      	ands	r7, r2
 800c50e:	d024      	beq.n	800c55a <__lshift+0x9a>
 800c510:	3201      	adds	r2, #1
 800c512:	1bd2      	subs	r2, r2, r7
 800c514:	9203      	str	r2, [sp, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	6819      	ldr	r1, [r3, #0]
 800c51a:	0020      	movs	r0, r4
 800c51c:	40b9      	lsls	r1, r7
 800c51e:	430a      	orrs	r2, r1
 800c520:	c404      	stmia	r4!, {r2}
 800c522:	cb04      	ldmia	r3!, {r2}
 800c524:	9903      	ldr	r1, [sp, #12]
 800c526:	40ca      	lsrs	r2, r1
 800c528:	459c      	cmp	ip, r3
 800c52a:	d8f5      	bhi.n	800c518 <__lshift+0x58>
 800c52c:	6042      	str	r2, [r0, #4]
 800c52e:	2a00      	cmp	r2, #0
 800c530:	d002      	beq.n	800c538 <__lshift+0x78>
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	3302      	adds	r3, #2
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	9b00      	ldr	r3, [sp, #0]
 800c53a:	9802      	ldr	r0, [sp, #8]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	6133      	str	r3, [r6, #16]
 800c540:	0029      	movs	r1, r5
 800c542:	f7ff fe32 	bl	800c1aa <_Bfree>
 800c546:	0030      	movs	r0, r6
 800c548:	b005      	add	sp, #20
 800c54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54c:	3101      	adds	r1, #1
 800c54e:	005b      	lsls	r3, r3, #1
 800c550:	e7c3      	b.n	800c4da <__lshift+0x1a>
 800c552:	0098      	lsls	r0, r3, #2
 800c554:	5011      	str	r1, [r2, r0]
 800c556:	3301      	adds	r3, #1
 800c558:	e7ca      	b.n	800c4f0 <__lshift+0x30>
 800c55a:	cb04      	ldmia	r3!, {r2}
 800c55c:	c404      	stmia	r4!, {r2}
 800c55e:	459c      	cmp	ip, r3
 800c560:	d8fb      	bhi.n	800c55a <__lshift+0x9a>
 800c562:	e7e9      	b.n	800c538 <__lshift+0x78>

0800c564 <__mcmp>:
 800c564:	690a      	ldr	r2, [r1, #16]
 800c566:	6903      	ldr	r3, [r0, #16]
 800c568:	b530      	push	{r4, r5, lr}
 800c56a:	1a9b      	subs	r3, r3, r2
 800c56c:	d10d      	bne.n	800c58a <__mcmp+0x26>
 800c56e:	0092      	lsls	r2, r2, #2
 800c570:	3014      	adds	r0, #20
 800c572:	3114      	adds	r1, #20
 800c574:	1884      	adds	r4, r0, r2
 800c576:	1889      	adds	r1, r1, r2
 800c578:	3c04      	subs	r4, #4
 800c57a:	3904      	subs	r1, #4
 800c57c:	6825      	ldr	r5, [r4, #0]
 800c57e:	680a      	ldr	r2, [r1, #0]
 800c580:	4295      	cmp	r5, r2
 800c582:	d004      	beq.n	800c58e <__mcmp+0x2a>
 800c584:	2301      	movs	r3, #1
 800c586:	4295      	cmp	r5, r2
 800c588:	d304      	bcc.n	800c594 <__mcmp+0x30>
 800c58a:	0018      	movs	r0, r3
 800c58c:	bd30      	pop	{r4, r5, pc}
 800c58e:	42a0      	cmp	r0, r4
 800c590:	d3f2      	bcc.n	800c578 <__mcmp+0x14>
 800c592:	e7fa      	b.n	800c58a <__mcmp+0x26>
 800c594:	425b      	negs	r3, r3
 800c596:	e7f8      	b.n	800c58a <__mcmp+0x26>

0800c598 <__mdiff>:
 800c598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59a:	000d      	movs	r5, r1
 800c59c:	b085      	sub	sp, #20
 800c59e:	0007      	movs	r7, r0
 800c5a0:	0011      	movs	r1, r2
 800c5a2:	0028      	movs	r0, r5
 800c5a4:	0014      	movs	r4, r2
 800c5a6:	f7ff ffdd 	bl	800c564 <__mcmp>
 800c5aa:	1e06      	subs	r6, r0, #0
 800c5ac:	d108      	bne.n	800c5c0 <__mdiff+0x28>
 800c5ae:	0001      	movs	r1, r0
 800c5b0:	0038      	movs	r0, r7
 800c5b2:	f7ff fdc2 	bl	800c13a <_Balloc>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	6146      	str	r6, [r0, #20]
 800c5ba:	6103      	str	r3, [r0, #16]
 800c5bc:	b005      	add	sp, #20
 800c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	db04      	blt.n	800c5d2 <__mdiff+0x3a>
 800c5c8:	0023      	movs	r3, r4
 800c5ca:	002c      	movs	r4, r5
 800c5cc:	001d      	movs	r5, r3
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	6861      	ldr	r1, [r4, #4]
 800c5d4:	0038      	movs	r0, r7
 800c5d6:	f7ff fdb0 	bl	800c13a <_Balloc>
 800c5da:	002f      	movs	r7, r5
 800c5dc:	2200      	movs	r2, #0
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	6926      	ldr	r6, [r4, #16]
 800c5e2:	60c3      	str	r3, [r0, #12]
 800c5e4:	3414      	adds	r4, #20
 800c5e6:	00b3      	lsls	r3, r6, #2
 800c5e8:	18e3      	adds	r3, r4, r3
 800c5ea:	9302      	str	r3, [sp, #8]
 800c5ec:	692b      	ldr	r3, [r5, #16]
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	18fb      	adds	r3, r7, r3
 800c5f4:	9303      	str	r3, [sp, #12]
 800c5f6:	0003      	movs	r3, r0
 800c5f8:	4694      	mov	ip, r2
 800c5fa:	3314      	adds	r3, #20
 800c5fc:	cc20      	ldmia	r4!, {r5}
 800c5fe:	cf04      	ldmia	r7!, {r2}
 800c600:	9201      	str	r2, [sp, #4]
 800c602:	b2aa      	uxth	r2, r5
 800c604:	4494      	add	ip, r2
 800c606:	466a      	mov	r2, sp
 800c608:	4661      	mov	r1, ip
 800c60a:	8892      	ldrh	r2, [r2, #4]
 800c60c:	0c2d      	lsrs	r5, r5, #16
 800c60e:	1a8a      	subs	r2, r1, r2
 800c610:	9901      	ldr	r1, [sp, #4]
 800c612:	0c09      	lsrs	r1, r1, #16
 800c614:	1a69      	subs	r1, r5, r1
 800c616:	1415      	asrs	r5, r2, #16
 800c618:	1949      	adds	r1, r1, r5
 800c61a:	140d      	asrs	r5, r1, #16
 800c61c:	b292      	uxth	r2, r2
 800c61e:	0409      	lsls	r1, r1, #16
 800c620:	430a      	orrs	r2, r1
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	9a03      	ldr	r2, [sp, #12]
 800c626:	46ac      	mov	ip, r5
 800c628:	3304      	adds	r3, #4
 800c62a:	42ba      	cmp	r2, r7
 800c62c:	d8e6      	bhi.n	800c5fc <__mdiff+0x64>
 800c62e:	9902      	ldr	r1, [sp, #8]
 800c630:	001a      	movs	r2, r3
 800c632:	428c      	cmp	r4, r1
 800c634:	d305      	bcc.n	800c642 <__mdiff+0xaa>
 800c636:	3a04      	subs	r2, #4
 800c638:	6813      	ldr	r3, [r2, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00e      	beq.n	800c65c <__mdiff+0xc4>
 800c63e:	6106      	str	r6, [r0, #16]
 800c640:	e7bc      	b.n	800c5bc <__mdiff+0x24>
 800c642:	cc04      	ldmia	r4!, {r2}
 800c644:	b291      	uxth	r1, r2
 800c646:	4461      	add	r1, ip
 800c648:	140d      	asrs	r5, r1, #16
 800c64a:	0c12      	lsrs	r2, r2, #16
 800c64c:	1952      	adds	r2, r2, r5
 800c64e:	1415      	asrs	r5, r2, #16
 800c650:	b289      	uxth	r1, r1
 800c652:	0412      	lsls	r2, r2, #16
 800c654:	430a      	orrs	r2, r1
 800c656:	46ac      	mov	ip, r5
 800c658:	c304      	stmia	r3!, {r2}
 800c65a:	e7e8      	b.n	800c62e <__mdiff+0x96>
 800c65c:	3e01      	subs	r6, #1
 800c65e:	e7ea      	b.n	800c636 <__mdiff+0x9e>

0800c660 <__d2b>:
 800c660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c662:	001d      	movs	r5, r3
 800c664:	2101      	movs	r1, #1
 800c666:	0014      	movs	r4, r2
 800c668:	9f08      	ldr	r7, [sp, #32]
 800c66a:	f7ff fd66 	bl	800c13a <_Balloc>
 800c66e:	032b      	lsls	r3, r5, #12
 800c670:	006d      	lsls	r5, r5, #1
 800c672:	0006      	movs	r6, r0
 800c674:	0b1b      	lsrs	r3, r3, #12
 800c676:	0d6d      	lsrs	r5, r5, #21
 800c678:	d124      	bne.n	800c6c4 <__d2b+0x64>
 800c67a:	9301      	str	r3, [sp, #4]
 800c67c:	2c00      	cmp	r4, #0
 800c67e:	d027      	beq.n	800c6d0 <__d2b+0x70>
 800c680:	4668      	mov	r0, sp
 800c682:	9400      	str	r4, [sp, #0]
 800c684:	f7ff fe02 	bl	800c28c <__lo0bits>
 800c688:	9c00      	ldr	r4, [sp, #0]
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d01e      	beq.n	800c6cc <__d2b+0x6c>
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	2120      	movs	r1, #32
 800c692:	001a      	movs	r2, r3
 800c694:	1a09      	subs	r1, r1, r0
 800c696:	408a      	lsls	r2, r1
 800c698:	40c3      	lsrs	r3, r0
 800c69a:	4322      	orrs	r2, r4
 800c69c:	6172      	str	r2, [r6, #20]
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	9c01      	ldr	r4, [sp, #4]
 800c6a2:	61b4      	str	r4, [r6, #24]
 800c6a4:	1e63      	subs	r3, r4, #1
 800c6a6:	419c      	sbcs	r4, r3
 800c6a8:	3401      	adds	r4, #1
 800c6aa:	6134      	str	r4, [r6, #16]
 800c6ac:	2d00      	cmp	r5, #0
 800c6ae:	d018      	beq.n	800c6e2 <__d2b+0x82>
 800c6b0:	4b12      	ldr	r3, [pc, #72]	; (800c6fc <__d2b+0x9c>)
 800c6b2:	18ed      	adds	r5, r5, r3
 800c6b4:	2335      	movs	r3, #53	; 0x35
 800c6b6:	182d      	adds	r5, r5, r0
 800c6b8:	603d      	str	r5, [r7, #0]
 800c6ba:	1a18      	subs	r0, r3, r0
 800c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6be:	6018      	str	r0, [r3, #0]
 800c6c0:	0030      	movs	r0, r6
 800c6c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6c4:	2280      	movs	r2, #128	; 0x80
 800c6c6:	0352      	lsls	r2, r2, #13
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	e7d6      	b.n	800c67a <__d2b+0x1a>
 800c6cc:	6174      	str	r4, [r6, #20]
 800c6ce:	e7e7      	b.n	800c6a0 <__d2b+0x40>
 800c6d0:	a801      	add	r0, sp, #4
 800c6d2:	f7ff fddb 	bl	800c28c <__lo0bits>
 800c6d6:	2401      	movs	r4, #1
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	6134      	str	r4, [r6, #16]
 800c6dc:	6173      	str	r3, [r6, #20]
 800c6de:	3020      	adds	r0, #32
 800c6e0:	e7e4      	b.n	800c6ac <__d2b+0x4c>
 800c6e2:	4b07      	ldr	r3, [pc, #28]	; (800c700 <__d2b+0xa0>)
 800c6e4:	18c0      	adds	r0, r0, r3
 800c6e6:	4b07      	ldr	r3, [pc, #28]	; (800c704 <__d2b+0xa4>)
 800c6e8:	6038      	str	r0, [r7, #0]
 800c6ea:	18e3      	adds	r3, r4, r3
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	18f3      	adds	r3, r6, r3
 800c6f0:	6958      	ldr	r0, [r3, #20]
 800c6f2:	f7ff fdb1 	bl	800c258 <__hi0bits>
 800c6f6:	0164      	lsls	r4, r4, #5
 800c6f8:	1a20      	subs	r0, r4, r0
 800c6fa:	e7df      	b.n	800c6bc <__d2b+0x5c>
 800c6fc:	fffffbcd 	.word	0xfffffbcd
 800c700:	fffffbce 	.word	0xfffffbce
 800c704:	3fffffff 	.word	0x3fffffff

0800c708 <_free_r>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	0005      	movs	r5, r0
 800c70c:	2900      	cmp	r1, #0
 800c70e:	d010      	beq.n	800c732 <_free_r+0x2a>
 800c710:	1f0c      	subs	r4, r1, #4
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	da00      	bge.n	800c71a <_free_r+0x12>
 800c718:	18e4      	adds	r4, r4, r3
 800c71a:	0028      	movs	r0, r5
 800c71c:	f7ff fd0b 	bl	800c136 <__malloc_lock>
 800c720:	4a1d      	ldr	r2, [pc, #116]	; (800c798 <_free_r+0x90>)
 800c722:	6813      	ldr	r3, [r2, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d105      	bne.n	800c734 <_free_r+0x2c>
 800c728:	6063      	str	r3, [r4, #4]
 800c72a:	6014      	str	r4, [r2, #0]
 800c72c:	0028      	movs	r0, r5
 800c72e:	f7ff fd03 	bl	800c138 <__malloc_unlock>
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	42a3      	cmp	r3, r4
 800c736:	d909      	bls.n	800c74c <_free_r+0x44>
 800c738:	6821      	ldr	r1, [r4, #0]
 800c73a:	1860      	adds	r0, r4, r1
 800c73c:	4283      	cmp	r3, r0
 800c73e:	d1f3      	bne.n	800c728 <_free_r+0x20>
 800c740:	6818      	ldr	r0, [r3, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	1841      	adds	r1, r0, r1
 800c746:	6021      	str	r1, [r4, #0]
 800c748:	e7ee      	b.n	800c728 <_free_r+0x20>
 800c74a:	0013      	movs	r3, r2
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	2a00      	cmp	r2, #0
 800c750:	d001      	beq.n	800c756 <_free_r+0x4e>
 800c752:	42a2      	cmp	r2, r4
 800c754:	d9f9      	bls.n	800c74a <_free_r+0x42>
 800c756:	6819      	ldr	r1, [r3, #0]
 800c758:	1858      	adds	r0, r3, r1
 800c75a:	42a0      	cmp	r0, r4
 800c75c:	d10b      	bne.n	800c776 <_free_r+0x6e>
 800c75e:	6820      	ldr	r0, [r4, #0]
 800c760:	1809      	adds	r1, r1, r0
 800c762:	1858      	adds	r0, r3, r1
 800c764:	6019      	str	r1, [r3, #0]
 800c766:	4282      	cmp	r2, r0
 800c768:	d1e0      	bne.n	800c72c <_free_r+0x24>
 800c76a:	6810      	ldr	r0, [r2, #0]
 800c76c:	6852      	ldr	r2, [r2, #4]
 800c76e:	1841      	adds	r1, r0, r1
 800c770:	6019      	str	r1, [r3, #0]
 800c772:	605a      	str	r2, [r3, #4]
 800c774:	e7da      	b.n	800c72c <_free_r+0x24>
 800c776:	42a0      	cmp	r0, r4
 800c778:	d902      	bls.n	800c780 <_free_r+0x78>
 800c77a:	230c      	movs	r3, #12
 800c77c:	602b      	str	r3, [r5, #0]
 800c77e:	e7d5      	b.n	800c72c <_free_r+0x24>
 800c780:	6821      	ldr	r1, [r4, #0]
 800c782:	1860      	adds	r0, r4, r1
 800c784:	4282      	cmp	r2, r0
 800c786:	d103      	bne.n	800c790 <_free_r+0x88>
 800c788:	6810      	ldr	r0, [r2, #0]
 800c78a:	6852      	ldr	r2, [r2, #4]
 800c78c:	1841      	adds	r1, r0, r1
 800c78e:	6021      	str	r1, [r4, #0]
 800c790:	6062      	str	r2, [r4, #4]
 800c792:	605c      	str	r4, [r3, #4]
 800c794:	e7ca      	b.n	800c72c <_free_r+0x24>
 800c796:	46c0      	nop			; (mov r8, r8)
 800c798:	20000274 	.word	0x20000274

0800c79c <__ssputs_r>:
 800c79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c79e:	688e      	ldr	r6, [r1, #8]
 800c7a0:	b085      	sub	sp, #20
 800c7a2:	0007      	movs	r7, r0
 800c7a4:	000c      	movs	r4, r1
 800c7a6:	9203      	str	r2, [sp, #12]
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	429e      	cmp	r6, r3
 800c7ac:	d83c      	bhi.n	800c828 <__ssputs_r+0x8c>
 800c7ae:	2390      	movs	r3, #144	; 0x90
 800c7b0:	898a      	ldrh	r2, [r1, #12]
 800c7b2:	00db      	lsls	r3, r3, #3
 800c7b4:	421a      	tst	r2, r3
 800c7b6:	d034      	beq.n	800c822 <__ssputs_r+0x86>
 800c7b8:	2503      	movs	r5, #3
 800c7ba:	6909      	ldr	r1, [r1, #16]
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	1a5b      	subs	r3, r3, r1
 800c7c0:	9302      	str	r3, [sp, #8]
 800c7c2:	6963      	ldr	r3, [r4, #20]
 800c7c4:	9802      	ldr	r0, [sp, #8]
 800c7c6:	435d      	muls	r5, r3
 800c7c8:	0feb      	lsrs	r3, r5, #31
 800c7ca:	195d      	adds	r5, r3, r5
 800c7cc:	9b01      	ldr	r3, [sp, #4]
 800c7ce:	106d      	asrs	r5, r5, #1
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	181b      	adds	r3, r3, r0
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	d900      	bls.n	800c7da <__ssputs_r+0x3e>
 800c7d8:	001d      	movs	r5, r3
 800c7da:	0553      	lsls	r3, r2, #21
 800c7dc:	d532      	bpl.n	800c844 <__ssputs_r+0xa8>
 800c7de:	0029      	movs	r1, r5
 800c7e0:	0038      	movs	r0, r7
 800c7e2:	f7fd fe67 	bl	800a4b4 <_malloc_r>
 800c7e6:	1e06      	subs	r6, r0, #0
 800c7e8:	d109      	bne.n	800c7fe <__ssputs_r+0x62>
 800c7ea:	230c      	movs	r3, #12
 800c7ec:	603b      	str	r3, [r7, #0]
 800c7ee:	2340      	movs	r3, #64	; 0x40
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	89a2      	ldrh	r2, [r4, #12]
 800c7f4:	4240      	negs	r0, r0
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	81a3      	strh	r3, [r4, #12]
 800c7fa:	b005      	add	sp, #20
 800c7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7fe:	9a02      	ldr	r2, [sp, #8]
 800c800:	6921      	ldr	r1, [r4, #16]
 800c802:	f7fd fbb1 	bl	8009f68 <memcpy>
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	4a14      	ldr	r2, [pc, #80]	; (800c85c <__ssputs_r+0xc0>)
 800c80a:	401a      	ands	r2, r3
 800c80c:	2380      	movs	r3, #128	; 0x80
 800c80e:	4313      	orrs	r3, r2
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	9b02      	ldr	r3, [sp, #8]
 800c814:	6126      	str	r6, [r4, #16]
 800c816:	18f6      	adds	r6, r6, r3
 800c818:	6026      	str	r6, [r4, #0]
 800c81a:	6165      	str	r5, [r4, #20]
 800c81c:	9e01      	ldr	r6, [sp, #4]
 800c81e:	1aed      	subs	r5, r5, r3
 800c820:	60a5      	str	r5, [r4, #8]
 800c822:	9b01      	ldr	r3, [sp, #4]
 800c824:	429e      	cmp	r6, r3
 800c826:	d900      	bls.n	800c82a <__ssputs_r+0x8e>
 800c828:	9e01      	ldr	r6, [sp, #4]
 800c82a:	0032      	movs	r2, r6
 800c82c:	9903      	ldr	r1, [sp, #12]
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	f000 fa24 	bl	800cc7c <memmove>
 800c834:	68a3      	ldr	r3, [r4, #8]
 800c836:	2000      	movs	r0, #0
 800c838:	1b9b      	subs	r3, r3, r6
 800c83a:	60a3      	str	r3, [r4, #8]
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	199e      	adds	r6, r3, r6
 800c840:	6026      	str	r6, [r4, #0]
 800c842:	e7da      	b.n	800c7fa <__ssputs_r+0x5e>
 800c844:	002a      	movs	r2, r5
 800c846:	0038      	movs	r0, r7
 800c848:	f000 fa2b 	bl	800cca2 <_realloc_r>
 800c84c:	1e06      	subs	r6, r0, #0
 800c84e:	d1e0      	bne.n	800c812 <__ssputs_r+0x76>
 800c850:	6921      	ldr	r1, [r4, #16]
 800c852:	0038      	movs	r0, r7
 800c854:	f7ff ff58 	bl	800c708 <_free_r>
 800c858:	e7c7      	b.n	800c7ea <__ssputs_r+0x4e>
 800c85a:	46c0      	nop			; (mov r8, r8)
 800c85c:	fffffb7f 	.word	0xfffffb7f

0800c860 <_svfiprintf_r>:
 800c860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c862:	b0a1      	sub	sp, #132	; 0x84
 800c864:	9003      	str	r0, [sp, #12]
 800c866:	001d      	movs	r5, r3
 800c868:	898b      	ldrh	r3, [r1, #12]
 800c86a:	000f      	movs	r7, r1
 800c86c:	0016      	movs	r6, r2
 800c86e:	061b      	lsls	r3, r3, #24
 800c870:	d511      	bpl.n	800c896 <_svfiprintf_r+0x36>
 800c872:	690b      	ldr	r3, [r1, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10e      	bne.n	800c896 <_svfiprintf_r+0x36>
 800c878:	2140      	movs	r1, #64	; 0x40
 800c87a:	f7fd fe1b 	bl	800a4b4 <_malloc_r>
 800c87e:	6038      	str	r0, [r7, #0]
 800c880:	6138      	str	r0, [r7, #16]
 800c882:	2800      	cmp	r0, #0
 800c884:	d105      	bne.n	800c892 <_svfiprintf_r+0x32>
 800c886:	230c      	movs	r3, #12
 800c888:	9a03      	ldr	r2, [sp, #12]
 800c88a:	3801      	subs	r0, #1
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	b021      	add	sp, #132	; 0x84
 800c890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c892:	2340      	movs	r3, #64	; 0x40
 800c894:	617b      	str	r3, [r7, #20]
 800c896:	2300      	movs	r3, #0
 800c898:	ac08      	add	r4, sp, #32
 800c89a:	6163      	str	r3, [r4, #20]
 800c89c:	3320      	adds	r3, #32
 800c89e:	7663      	strb	r3, [r4, #25]
 800c8a0:	3310      	adds	r3, #16
 800c8a2:	76a3      	strb	r3, [r4, #26]
 800c8a4:	9507      	str	r5, [sp, #28]
 800c8a6:	0035      	movs	r5, r6
 800c8a8:	782b      	ldrb	r3, [r5, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <_svfiprintf_r+0x52>
 800c8ae:	2b25      	cmp	r3, #37	; 0x25
 800c8b0:	d146      	bne.n	800c940 <_svfiprintf_r+0xe0>
 800c8b2:	1bab      	subs	r3, r5, r6
 800c8b4:	9305      	str	r3, [sp, #20]
 800c8b6:	d00c      	beq.n	800c8d2 <_svfiprintf_r+0x72>
 800c8b8:	0032      	movs	r2, r6
 800c8ba:	0039      	movs	r1, r7
 800c8bc:	9803      	ldr	r0, [sp, #12]
 800c8be:	f7ff ff6d 	bl	800c79c <__ssputs_r>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d100      	bne.n	800c8c8 <_svfiprintf_r+0x68>
 800c8c6:	e0ae      	b.n	800ca26 <_svfiprintf_r+0x1c6>
 800c8c8:	6962      	ldr	r2, [r4, #20]
 800c8ca:	9b05      	ldr	r3, [sp, #20]
 800c8cc:	4694      	mov	ip, r2
 800c8ce:	4463      	add	r3, ip
 800c8d0:	6163      	str	r3, [r4, #20]
 800c8d2:	782b      	ldrb	r3, [r5, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d100      	bne.n	800c8da <_svfiprintf_r+0x7a>
 800c8d8:	e0a5      	b.n	800ca26 <_svfiprintf_r+0x1c6>
 800c8da:	2201      	movs	r2, #1
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4252      	negs	r2, r2
 800c8e0:	6062      	str	r2, [r4, #4]
 800c8e2:	a904      	add	r1, sp, #16
 800c8e4:	3254      	adds	r2, #84	; 0x54
 800c8e6:	1852      	adds	r2, r2, r1
 800c8e8:	1c6e      	adds	r6, r5, #1
 800c8ea:	6023      	str	r3, [r4, #0]
 800c8ec:	60e3      	str	r3, [r4, #12]
 800c8ee:	60a3      	str	r3, [r4, #8]
 800c8f0:	7013      	strb	r3, [r2, #0]
 800c8f2:	65a3      	str	r3, [r4, #88]	; 0x58
 800c8f4:	7831      	ldrb	r1, [r6, #0]
 800c8f6:	2205      	movs	r2, #5
 800c8f8:	4853      	ldr	r0, [pc, #332]	; (800ca48 <_svfiprintf_r+0x1e8>)
 800c8fa:	f7ff fc11 	bl	800c120 <memchr>
 800c8fe:	1c75      	adds	r5, r6, #1
 800c900:	2800      	cmp	r0, #0
 800c902:	d11f      	bne.n	800c944 <_svfiprintf_r+0xe4>
 800c904:	6822      	ldr	r2, [r4, #0]
 800c906:	06d3      	lsls	r3, r2, #27
 800c908:	d504      	bpl.n	800c914 <_svfiprintf_r+0xb4>
 800c90a:	2353      	movs	r3, #83	; 0x53
 800c90c:	a904      	add	r1, sp, #16
 800c90e:	185b      	adds	r3, r3, r1
 800c910:	2120      	movs	r1, #32
 800c912:	7019      	strb	r1, [r3, #0]
 800c914:	0713      	lsls	r3, r2, #28
 800c916:	d504      	bpl.n	800c922 <_svfiprintf_r+0xc2>
 800c918:	2353      	movs	r3, #83	; 0x53
 800c91a:	a904      	add	r1, sp, #16
 800c91c:	185b      	adds	r3, r3, r1
 800c91e:	212b      	movs	r1, #43	; 0x2b
 800c920:	7019      	strb	r1, [r3, #0]
 800c922:	7833      	ldrb	r3, [r6, #0]
 800c924:	2b2a      	cmp	r3, #42	; 0x2a
 800c926:	d016      	beq.n	800c956 <_svfiprintf_r+0xf6>
 800c928:	0035      	movs	r5, r6
 800c92a:	2100      	movs	r1, #0
 800c92c:	200a      	movs	r0, #10
 800c92e:	68e3      	ldr	r3, [r4, #12]
 800c930:	782a      	ldrb	r2, [r5, #0]
 800c932:	1c6e      	adds	r6, r5, #1
 800c934:	3a30      	subs	r2, #48	; 0x30
 800c936:	2a09      	cmp	r2, #9
 800c938:	d94e      	bls.n	800c9d8 <_svfiprintf_r+0x178>
 800c93a:	2900      	cmp	r1, #0
 800c93c:	d018      	beq.n	800c970 <_svfiprintf_r+0x110>
 800c93e:	e010      	b.n	800c962 <_svfiprintf_r+0x102>
 800c940:	3501      	adds	r5, #1
 800c942:	e7b1      	b.n	800c8a8 <_svfiprintf_r+0x48>
 800c944:	4b40      	ldr	r3, [pc, #256]	; (800ca48 <_svfiprintf_r+0x1e8>)
 800c946:	6822      	ldr	r2, [r4, #0]
 800c948:	1ac0      	subs	r0, r0, r3
 800c94a:	2301      	movs	r3, #1
 800c94c:	4083      	lsls	r3, r0
 800c94e:	4313      	orrs	r3, r2
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	002e      	movs	r6, r5
 800c954:	e7ce      	b.n	800c8f4 <_svfiprintf_r+0x94>
 800c956:	9b07      	ldr	r3, [sp, #28]
 800c958:	1d19      	adds	r1, r3, #4
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	9107      	str	r1, [sp, #28]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	db01      	blt.n	800c966 <_svfiprintf_r+0x106>
 800c962:	930b      	str	r3, [sp, #44]	; 0x2c
 800c964:	e004      	b.n	800c970 <_svfiprintf_r+0x110>
 800c966:	425b      	negs	r3, r3
 800c968:	60e3      	str	r3, [r4, #12]
 800c96a:	2302      	movs	r3, #2
 800c96c:	4313      	orrs	r3, r2
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	782b      	ldrb	r3, [r5, #0]
 800c972:	2b2e      	cmp	r3, #46	; 0x2e
 800c974:	d10a      	bne.n	800c98c <_svfiprintf_r+0x12c>
 800c976:	786b      	ldrb	r3, [r5, #1]
 800c978:	2b2a      	cmp	r3, #42	; 0x2a
 800c97a:	d135      	bne.n	800c9e8 <_svfiprintf_r+0x188>
 800c97c:	9b07      	ldr	r3, [sp, #28]
 800c97e:	3502      	adds	r5, #2
 800c980:	1d1a      	adds	r2, r3, #4
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	9207      	str	r2, [sp, #28]
 800c986:	2b00      	cmp	r3, #0
 800c988:	db2b      	blt.n	800c9e2 <_svfiprintf_r+0x182>
 800c98a:	9309      	str	r3, [sp, #36]	; 0x24
 800c98c:	4e2f      	ldr	r6, [pc, #188]	; (800ca4c <_svfiprintf_r+0x1ec>)
 800c98e:	7829      	ldrb	r1, [r5, #0]
 800c990:	2203      	movs	r2, #3
 800c992:	0030      	movs	r0, r6
 800c994:	f7ff fbc4 	bl	800c120 <memchr>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d006      	beq.n	800c9aa <_svfiprintf_r+0x14a>
 800c99c:	2340      	movs	r3, #64	; 0x40
 800c99e:	1b80      	subs	r0, r0, r6
 800c9a0:	4083      	lsls	r3, r0
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	3501      	adds	r5, #1
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	7829      	ldrb	r1, [r5, #0]
 800c9ac:	2206      	movs	r2, #6
 800c9ae:	4828      	ldr	r0, [pc, #160]	; (800ca50 <_svfiprintf_r+0x1f0>)
 800c9b0:	1c6e      	adds	r6, r5, #1
 800c9b2:	7621      	strb	r1, [r4, #24]
 800c9b4:	f7ff fbb4 	bl	800c120 <memchr>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d03c      	beq.n	800ca36 <_svfiprintf_r+0x1d6>
 800c9bc:	4b25      	ldr	r3, [pc, #148]	; (800ca54 <_svfiprintf_r+0x1f4>)
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d125      	bne.n	800ca0e <_svfiprintf_r+0x1ae>
 800c9c2:	2207      	movs	r2, #7
 800c9c4:	9b07      	ldr	r3, [sp, #28]
 800c9c6:	3307      	adds	r3, #7
 800c9c8:	4393      	bics	r3, r2
 800c9ca:	3308      	adds	r3, #8
 800c9cc:	9307      	str	r3, [sp, #28]
 800c9ce:	6963      	ldr	r3, [r4, #20]
 800c9d0:	9a04      	ldr	r2, [sp, #16]
 800c9d2:	189b      	adds	r3, r3, r2
 800c9d4:	6163      	str	r3, [r4, #20]
 800c9d6:	e766      	b.n	800c8a6 <_svfiprintf_r+0x46>
 800c9d8:	4343      	muls	r3, r0
 800c9da:	2101      	movs	r1, #1
 800c9dc:	189b      	adds	r3, r3, r2
 800c9de:	0035      	movs	r5, r6
 800c9e0:	e7a6      	b.n	800c930 <_svfiprintf_r+0xd0>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	425b      	negs	r3, r3
 800c9e6:	e7d0      	b.n	800c98a <_svfiprintf_r+0x12a>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	200a      	movs	r0, #10
 800c9ec:	001a      	movs	r2, r3
 800c9ee:	3501      	adds	r5, #1
 800c9f0:	6063      	str	r3, [r4, #4]
 800c9f2:	7829      	ldrb	r1, [r5, #0]
 800c9f4:	1c6e      	adds	r6, r5, #1
 800c9f6:	3930      	subs	r1, #48	; 0x30
 800c9f8:	2909      	cmp	r1, #9
 800c9fa:	d903      	bls.n	800ca04 <_svfiprintf_r+0x1a4>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0c5      	beq.n	800c98c <_svfiprintf_r+0x12c>
 800ca00:	9209      	str	r2, [sp, #36]	; 0x24
 800ca02:	e7c3      	b.n	800c98c <_svfiprintf_r+0x12c>
 800ca04:	4342      	muls	r2, r0
 800ca06:	2301      	movs	r3, #1
 800ca08:	1852      	adds	r2, r2, r1
 800ca0a:	0035      	movs	r5, r6
 800ca0c:	e7f1      	b.n	800c9f2 <_svfiprintf_r+0x192>
 800ca0e:	ab07      	add	r3, sp, #28
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	003a      	movs	r2, r7
 800ca14:	4b10      	ldr	r3, [pc, #64]	; (800ca58 <_svfiprintf_r+0x1f8>)
 800ca16:	0021      	movs	r1, r4
 800ca18:	9803      	ldr	r0, [sp, #12]
 800ca1a:	f7fd fe45 	bl	800a6a8 <_printf_float>
 800ca1e:	9004      	str	r0, [sp, #16]
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	3301      	adds	r3, #1
 800ca24:	d1d3      	bne.n	800c9ce <_svfiprintf_r+0x16e>
 800ca26:	89bb      	ldrh	r3, [r7, #12]
 800ca28:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ca2a:	065b      	lsls	r3, r3, #25
 800ca2c:	d400      	bmi.n	800ca30 <_svfiprintf_r+0x1d0>
 800ca2e:	e72e      	b.n	800c88e <_svfiprintf_r+0x2e>
 800ca30:	2001      	movs	r0, #1
 800ca32:	4240      	negs	r0, r0
 800ca34:	e72b      	b.n	800c88e <_svfiprintf_r+0x2e>
 800ca36:	ab07      	add	r3, sp, #28
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	003a      	movs	r2, r7
 800ca3c:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <_svfiprintf_r+0x1f8>)
 800ca3e:	0021      	movs	r1, r4
 800ca40:	9803      	ldr	r0, [sp, #12]
 800ca42:	f7fe f8eb 	bl	800ac1c <_printf_i>
 800ca46:	e7ea      	b.n	800ca1e <_svfiprintf_r+0x1be>
 800ca48:	0800ec04 	.word	0x0800ec04
 800ca4c:	0800ec0a 	.word	0x0800ec0a
 800ca50:	0800ec0e 	.word	0x0800ec0e
 800ca54:	0800a6a9 	.word	0x0800a6a9
 800ca58:	0800c79d 	.word	0x0800c79d

0800ca5c <siscanf>:
 800ca5c:	b40e      	push	{r1, r2, r3}
 800ca5e:	2381      	movs	r3, #129	; 0x81
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	b09d      	sub	sp, #116	; 0x74
 800ca64:	ac02      	add	r4, sp, #8
 800ca66:	ad21      	add	r5, sp, #132	; 0x84
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	cd40      	ldmia	r5!, {r6}
 800ca6c:	81a3      	strh	r3, [r4, #12]
 800ca6e:	9002      	str	r0, [sp, #8]
 800ca70:	9006      	str	r0, [sp, #24]
 800ca72:	f7f3 fb49 	bl	8000108 <strlen>
 800ca76:	4b0b      	ldr	r3, [pc, #44]	; (800caa4 <siscanf+0x48>)
 800ca78:	6060      	str	r0, [r4, #4]
 800ca7a:	6263      	str	r3, [r4, #36]	; 0x24
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	6160      	str	r0, [r4, #20]
 800ca80:	4809      	ldr	r0, [pc, #36]	; (800caa8 <siscanf+0x4c>)
 800ca82:	6363      	str	r3, [r4, #52]	; 0x34
 800ca84:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca86:	3b01      	subs	r3, #1
 800ca88:	81e3      	strh	r3, [r4, #14]
 800ca8a:	0032      	movs	r2, r6
 800ca8c:	002b      	movs	r3, r5
 800ca8e:	0021      	movs	r1, r4
 800ca90:	6800      	ldr	r0, [r0, #0]
 800ca92:	9501      	str	r5, [sp, #4]
 800ca94:	f000 f986 	bl	800cda4 <__ssvfiscanf_r>
 800ca98:	b01d      	add	sp, #116	; 0x74
 800ca9a:	bc70      	pop	{r4, r5, r6}
 800ca9c:	bc08      	pop	{r3}
 800ca9e:	b003      	add	sp, #12
 800caa0:	4718      	bx	r3
 800caa2:	46c0      	nop			; (mov r8, r8)
 800caa4:	0800caad 	.word	0x0800caad
 800caa8:	20000010 	.word	0x20000010

0800caac <__seofread>:
 800caac:	2000      	movs	r0, #0
 800caae:	4770      	bx	lr

0800cab0 <strcpy>:
 800cab0:	0003      	movs	r3, r0
 800cab2:	780a      	ldrb	r2, [r1, #0]
 800cab4:	3101      	adds	r1, #1
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	3301      	adds	r3, #1
 800caba:	2a00      	cmp	r2, #0
 800cabc:	d1f9      	bne.n	800cab2 <strcpy+0x2>
 800cabe:	4770      	bx	lr

0800cac0 <strncmp>:
 800cac0:	2300      	movs	r3, #0
 800cac2:	b530      	push	{r4, r5, lr}
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d00a      	beq.n	800cade <strncmp+0x1e>
 800cac8:	3a01      	subs	r2, #1
 800caca:	5cc4      	ldrb	r4, [r0, r3]
 800cacc:	5ccd      	ldrb	r5, [r1, r3]
 800cace:	42ac      	cmp	r4, r5
 800cad0:	d104      	bne.n	800cadc <strncmp+0x1c>
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d002      	beq.n	800cadc <strncmp+0x1c>
 800cad6:	3301      	adds	r3, #1
 800cad8:	2c00      	cmp	r4, #0
 800cada:	d1f6      	bne.n	800caca <strncmp+0xa>
 800cadc:	1b63      	subs	r3, r4, r5
 800cade:	0018      	movs	r0, r3
 800cae0:	bd30      	pop	{r4, r5, pc}

0800cae2 <_strtoul_l.isra.0>:
 800cae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae4:	001f      	movs	r7, r3
 800cae6:	000e      	movs	r6, r1
 800cae8:	b085      	sub	sp, #20
 800caea:	9003      	str	r0, [sp, #12]
 800caec:	9101      	str	r1, [sp, #4]
 800caee:	9202      	str	r2, [sp, #8]
 800caf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800caf2:	7834      	ldrb	r4, [r6, #0]
 800caf4:	f000 f89e 	bl	800cc34 <__locale_ctype_ptr_l>
 800caf8:	2208      	movs	r2, #8
 800cafa:	1900      	adds	r0, r0, r4
 800cafc:	7843      	ldrb	r3, [r0, #1]
 800cafe:	1c75      	adds	r5, r6, #1
 800cb00:	4013      	ands	r3, r2
 800cb02:	d138      	bne.n	800cb76 <_strtoul_l.isra.0+0x94>
 800cb04:	2c2d      	cmp	r4, #45	; 0x2d
 800cb06:	d138      	bne.n	800cb7a <_strtoul_l.isra.0+0x98>
 800cb08:	7874      	ldrb	r4, [r6, #1]
 800cb0a:	1cb5      	adds	r5, r6, #2
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	2f00      	cmp	r7, #0
 800cb12:	d065      	beq.n	800cbe0 <_strtoul_l.isra.0+0xfe>
 800cb14:	2f10      	cmp	r7, #16
 800cb16:	d109      	bne.n	800cb2c <_strtoul_l.isra.0+0x4a>
 800cb18:	2c30      	cmp	r4, #48	; 0x30
 800cb1a:	d107      	bne.n	800cb2c <_strtoul_l.isra.0+0x4a>
 800cb1c:	2220      	movs	r2, #32
 800cb1e:	782b      	ldrb	r3, [r5, #0]
 800cb20:	4393      	bics	r3, r2
 800cb22:	2b58      	cmp	r3, #88	; 0x58
 800cb24:	d157      	bne.n	800cbd6 <_strtoul_l.isra.0+0xf4>
 800cb26:	2710      	movs	r7, #16
 800cb28:	786c      	ldrb	r4, [r5, #1]
 800cb2a:	3502      	adds	r5, #2
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	0039      	movs	r1, r7
 800cb30:	4240      	negs	r0, r0
 800cb32:	f7f3 fb05 	bl	8000140 <__udivsi3>
 800cb36:	0006      	movs	r6, r0
 800cb38:	2001      	movs	r0, #1
 800cb3a:	0039      	movs	r1, r7
 800cb3c:	4240      	negs	r0, r0
 800cb3e:	f7f3 fb85 	bl	800024c <__aeabi_uidivmod>
 800cb42:	2300      	movs	r3, #0
 800cb44:	2201      	movs	r2, #1
 800cb46:	468c      	mov	ip, r1
 800cb48:	0018      	movs	r0, r3
 800cb4a:	4252      	negs	r2, r2
 800cb4c:	0021      	movs	r1, r4
 800cb4e:	3930      	subs	r1, #48	; 0x30
 800cb50:	2909      	cmp	r1, #9
 800cb52:	d817      	bhi.n	800cb84 <_strtoul_l.isra.0+0xa2>
 800cb54:	000c      	movs	r4, r1
 800cb56:	42a7      	cmp	r7, r4
 800cb58:	dd22      	ble.n	800cba0 <_strtoul_l.isra.0+0xbe>
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	db1e      	blt.n	800cb9c <_strtoul_l.isra.0+0xba>
 800cb5e:	0013      	movs	r3, r2
 800cb60:	4286      	cmp	r6, r0
 800cb62:	d305      	bcc.n	800cb70 <_strtoul_l.isra.0+0x8e>
 800cb64:	d101      	bne.n	800cb6a <_strtoul_l.isra.0+0x88>
 800cb66:	45a4      	cmp	ip, r4
 800cb68:	db02      	blt.n	800cb70 <_strtoul_l.isra.0+0x8e>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	4378      	muls	r0, r7
 800cb6e:	1820      	adds	r0, r4, r0
 800cb70:	782c      	ldrb	r4, [r5, #0]
 800cb72:	3501      	adds	r5, #1
 800cb74:	e7ea      	b.n	800cb4c <_strtoul_l.isra.0+0x6a>
 800cb76:	002e      	movs	r6, r5
 800cb78:	e7ba      	b.n	800caf0 <_strtoul_l.isra.0+0xe>
 800cb7a:	2c2b      	cmp	r4, #43	; 0x2b
 800cb7c:	d1c7      	bne.n	800cb0e <_strtoul_l.isra.0+0x2c>
 800cb7e:	1cb5      	adds	r5, r6, #2
 800cb80:	7874      	ldrb	r4, [r6, #1]
 800cb82:	e7c4      	b.n	800cb0e <_strtoul_l.isra.0+0x2c>
 800cb84:	0021      	movs	r1, r4
 800cb86:	3941      	subs	r1, #65	; 0x41
 800cb88:	2919      	cmp	r1, #25
 800cb8a:	d801      	bhi.n	800cb90 <_strtoul_l.isra.0+0xae>
 800cb8c:	3c37      	subs	r4, #55	; 0x37
 800cb8e:	e7e2      	b.n	800cb56 <_strtoul_l.isra.0+0x74>
 800cb90:	0021      	movs	r1, r4
 800cb92:	3961      	subs	r1, #97	; 0x61
 800cb94:	2919      	cmp	r1, #25
 800cb96:	d803      	bhi.n	800cba0 <_strtoul_l.isra.0+0xbe>
 800cb98:	3c57      	subs	r4, #87	; 0x57
 800cb9a:	e7dc      	b.n	800cb56 <_strtoul_l.isra.0+0x74>
 800cb9c:	0013      	movs	r3, r2
 800cb9e:	e7e7      	b.n	800cb70 <_strtoul_l.isra.0+0x8e>
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	da09      	bge.n	800cbb8 <_strtoul_l.isra.0+0xd6>
 800cba4:	2322      	movs	r3, #34	; 0x22
 800cba6:	2001      	movs	r0, #1
 800cba8:	9a03      	ldr	r2, [sp, #12]
 800cbaa:	4240      	negs	r0, r0
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	9b02      	ldr	r3, [sp, #8]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <_strtoul_l.isra.0+0xe8>
 800cbb4:	b005      	add	sp, #20
 800cbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb8:	9a00      	ldr	r2, [sp, #0]
 800cbba:	2a00      	cmp	r2, #0
 800cbbc:	d000      	beq.n	800cbc0 <_strtoul_l.isra.0+0xde>
 800cbbe:	4240      	negs	r0, r0
 800cbc0:	9a02      	ldr	r2, [sp, #8]
 800cbc2:	2a00      	cmp	r2, #0
 800cbc4:	d0f6      	beq.n	800cbb4 <_strtoul_l.isra.0+0xd2>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <_strtoul_l.isra.0+0xec>
 800cbca:	1e6b      	subs	r3, r5, #1
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	9b02      	ldr	r3, [sp, #8]
 800cbd0:	9a01      	ldr	r2, [sp, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e7ee      	b.n	800cbb4 <_strtoul_l.isra.0+0xd2>
 800cbd6:	2430      	movs	r4, #48	; 0x30
 800cbd8:	2f00      	cmp	r7, #0
 800cbda:	d1a7      	bne.n	800cb2c <_strtoul_l.isra.0+0x4a>
 800cbdc:	2708      	movs	r7, #8
 800cbde:	e7a5      	b.n	800cb2c <_strtoul_l.isra.0+0x4a>
 800cbe0:	2c30      	cmp	r4, #48	; 0x30
 800cbe2:	d09b      	beq.n	800cb1c <_strtoul_l.isra.0+0x3a>
 800cbe4:	270a      	movs	r7, #10
 800cbe6:	e7a1      	b.n	800cb2c <_strtoul_l.isra.0+0x4a>

0800cbe8 <_strtoul_r>:
 800cbe8:	b513      	push	{r0, r1, r4, lr}
 800cbea:	4c05      	ldr	r4, [pc, #20]	; (800cc00 <_strtoul_r+0x18>)
 800cbec:	6824      	ldr	r4, [r4, #0]
 800cbee:	6a24      	ldr	r4, [r4, #32]
 800cbf0:	2c00      	cmp	r4, #0
 800cbf2:	d100      	bne.n	800cbf6 <_strtoul_r+0xe>
 800cbf4:	4c03      	ldr	r4, [pc, #12]	; (800cc04 <_strtoul_r+0x1c>)
 800cbf6:	9400      	str	r4, [sp, #0]
 800cbf8:	f7ff ff73 	bl	800cae2 <_strtoul_l.isra.0>
 800cbfc:	bd16      	pop	{r1, r2, r4, pc}
 800cbfe:	46c0      	nop			; (mov r8, r8)
 800cc00:	20000010 	.word	0x20000010
 800cc04:	200000d8 	.word	0x200000d8

0800cc08 <strtoul>:
 800cc08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc0a:	0013      	movs	r3, r2
 800cc0c:	4a06      	ldr	r2, [pc, #24]	; (800cc28 <strtoul+0x20>)
 800cc0e:	0005      	movs	r5, r0
 800cc10:	6810      	ldr	r0, [r2, #0]
 800cc12:	6a04      	ldr	r4, [r0, #32]
 800cc14:	2c00      	cmp	r4, #0
 800cc16:	d100      	bne.n	800cc1a <strtoul+0x12>
 800cc18:	4c04      	ldr	r4, [pc, #16]	; (800cc2c <strtoul+0x24>)
 800cc1a:	000a      	movs	r2, r1
 800cc1c:	9400      	str	r4, [sp, #0]
 800cc1e:	0029      	movs	r1, r5
 800cc20:	f7ff ff5f 	bl	800cae2 <_strtoul_l.isra.0>
 800cc24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800cc26:	46c0      	nop			; (mov r8, r8)
 800cc28:	20000010 	.word	0x20000010
 800cc2c:	200000d8 	.word	0x200000d8

0800cc30 <__env_lock>:
 800cc30:	4770      	bx	lr

0800cc32 <__env_unlock>:
 800cc32:	4770      	bx	lr

0800cc34 <__locale_ctype_ptr_l>:
 800cc34:	30ec      	adds	r0, #236	; 0xec
 800cc36:	6800      	ldr	r0, [r0, #0]
 800cc38:	4770      	bx	lr
	...

0800cc3c <__locale_ctype_ptr>:
 800cc3c:	4b04      	ldr	r3, [pc, #16]	; (800cc50 <__locale_ctype_ptr+0x14>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d100      	bne.n	800cc48 <__locale_ctype_ptr+0xc>
 800cc46:	4b03      	ldr	r3, [pc, #12]	; (800cc54 <__locale_ctype_ptr+0x18>)
 800cc48:	33ec      	adds	r3, #236	; 0xec
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	4770      	bx	lr
 800cc4e:	46c0      	nop			; (mov r8, r8)
 800cc50:	20000010 	.word	0x20000010
 800cc54:	200000d8 	.word	0x200000d8

0800cc58 <__ascii_mbtowc>:
 800cc58:	b082      	sub	sp, #8
 800cc5a:	2900      	cmp	r1, #0
 800cc5c:	d100      	bne.n	800cc60 <__ascii_mbtowc+0x8>
 800cc5e:	a901      	add	r1, sp, #4
 800cc60:	1e10      	subs	r0, r2, #0
 800cc62:	d006      	beq.n	800cc72 <__ascii_mbtowc+0x1a>
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d006      	beq.n	800cc76 <__ascii_mbtowc+0x1e>
 800cc68:	7813      	ldrb	r3, [r2, #0]
 800cc6a:	600b      	str	r3, [r1, #0]
 800cc6c:	7810      	ldrb	r0, [r2, #0]
 800cc6e:	1e43      	subs	r3, r0, #1
 800cc70:	4198      	sbcs	r0, r3
 800cc72:	b002      	add	sp, #8
 800cc74:	4770      	bx	lr
 800cc76:	2002      	movs	r0, #2
 800cc78:	4240      	negs	r0, r0
 800cc7a:	e7fa      	b.n	800cc72 <__ascii_mbtowc+0x1a>

0800cc7c <memmove>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	4288      	cmp	r0, r1
 800cc80:	d902      	bls.n	800cc88 <memmove+0xc>
 800cc82:	188b      	adds	r3, r1, r2
 800cc84:	4298      	cmp	r0, r3
 800cc86:	d303      	bcc.n	800cc90 <memmove+0x14>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	e007      	b.n	800cc9c <memmove+0x20>
 800cc8c:	5c8b      	ldrb	r3, [r1, r2]
 800cc8e:	5483      	strb	r3, [r0, r2]
 800cc90:	3a01      	subs	r2, #1
 800cc92:	d2fb      	bcs.n	800cc8c <memmove+0x10>
 800cc94:	bd10      	pop	{r4, pc}
 800cc96:	5ccc      	ldrb	r4, [r1, r3]
 800cc98:	54c4      	strb	r4, [r0, r3]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d1fa      	bne.n	800cc96 <memmove+0x1a>
 800cca0:	e7f8      	b.n	800cc94 <memmove+0x18>

0800cca2 <_realloc_r>:
 800cca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca4:	0007      	movs	r7, r0
 800cca6:	000d      	movs	r5, r1
 800cca8:	0016      	movs	r6, r2
 800ccaa:	2900      	cmp	r1, #0
 800ccac:	d105      	bne.n	800ccba <_realloc_r+0x18>
 800ccae:	0011      	movs	r1, r2
 800ccb0:	f7fd fc00 	bl	800a4b4 <_malloc_r>
 800ccb4:	0004      	movs	r4, r0
 800ccb6:	0020      	movs	r0, r4
 800ccb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccba:	2a00      	cmp	r2, #0
 800ccbc:	d103      	bne.n	800ccc6 <_realloc_r+0x24>
 800ccbe:	f7ff fd23 	bl	800c708 <_free_r>
 800ccc2:	0034      	movs	r4, r6
 800ccc4:	e7f7      	b.n	800ccb6 <_realloc_r+0x14>
 800ccc6:	f000 fc4f 	bl	800d568 <_malloc_usable_size_r>
 800ccca:	002c      	movs	r4, r5
 800cccc:	42b0      	cmp	r0, r6
 800ccce:	d2f2      	bcs.n	800ccb6 <_realloc_r+0x14>
 800ccd0:	0031      	movs	r1, r6
 800ccd2:	0038      	movs	r0, r7
 800ccd4:	f7fd fbee 	bl	800a4b4 <_malloc_r>
 800ccd8:	1e04      	subs	r4, r0, #0
 800ccda:	d0ec      	beq.n	800ccb6 <_realloc_r+0x14>
 800ccdc:	0029      	movs	r1, r5
 800ccde:	0032      	movs	r2, r6
 800cce0:	f7fd f942 	bl	8009f68 <memcpy>
 800cce4:	0029      	movs	r1, r5
 800cce6:	0038      	movs	r0, r7
 800cce8:	f7ff fd0e 	bl	800c708 <_free_r>
 800ccec:	e7e3      	b.n	800ccb6 <_realloc_r+0x14>

0800ccee <_sungetc_r>:
 800ccee:	b570      	push	{r4, r5, r6, lr}
 800ccf0:	0014      	movs	r4, r2
 800ccf2:	1c4b      	adds	r3, r1, #1
 800ccf4:	d103      	bne.n	800ccfe <_sungetc_r+0x10>
 800ccf6:	2501      	movs	r5, #1
 800ccf8:	426d      	negs	r5, r5
 800ccfa:	0028      	movs	r0, r5
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	8993      	ldrh	r3, [r2, #12]
 800cd00:	2220      	movs	r2, #32
 800cd02:	4393      	bics	r3, r2
 800cd04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cd06:	81a3      	strh	r3, [r4, #12]
 800cd08:	b2ce      	uxtb	r6, r1
 800cd0a:	b2cd      	uxtb	r5, r1
 800cd0c:	6863      	ldr	r3, [r4, #4]
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	d010      	beq.n	800cd34 <_sungetc_r+0x46>
 800cd12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cd14:	429a      	cmp	r2, r3
 800cd16:	dd07      	ble.n	800cd28 <_sungetc_r+0x3a>
 800cd18:	6823      	ldr	r3, [r4, #0]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	701e      	strb	r6, [r3, #0]
 800cd20:	6863      	ldr	r3, [r4, #4]
 800cd22:	3301      	adds	r3, #1
 800cd24:	6063      	str	r3, [r4, #4]
 800cd26:	e7e8      	b.n	800ccfa <_sungetc_r+0xc>
 800cd28:	0021      	movs	r1, r4
 800cd2a:	f000 fbd3 	bl	800d4d4 <__submore>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d0f2      	beq.n	800cd18 <_sungetc_r+0x2a>
 800cd32:	e7e0      	b.n	800ccf6 <_sungetc_r+0x8>
 800cd34:	6921      	ldr	r1, [r4, #16]
 800cd36:	6822      	ldr	r2, [r4, #0]
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	d007      	beq.n	800cd4c <_sungetc_r+0x5e>
 800cd3c:	4291      	cmp	r1, r2
 800cd3e:	d205      	bcs.n	800cd4c <_sungetc_r+0x5e>
 800cd40:	1e51      	subs	r1, r2, #1
 800cd42:	7808      	ldrb	r0, [r1, #0]
 800cd44:	42a8      	cmp	r0, r5
 800cd46:	d101      	bne.n	800cd4c <_sungetc_r+0x5e>
 800cd48:	6021      	str	r1, [r4, #0]
 800cd4a:	e7ea      	b.n	800cd22 <_sungetc_r+0x34>
 800cd4c:	6423      	str	r3, [r4, #64]	; 0x40
 800cd4e:	0023      	movs	r3, r4
 800cd50:	3344      	adds	r3, #68	; 0x44
 800cd52:	6363      	str	r3, [r4, #52]	; 0x34
 800cd54:	2303      	movs	r3, #3
 800cd56:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd58:	0023      	movs	r3, r4
 800cd5a:	3346      	adds	r3, #70	; 0x46
 800cd5c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800cd5e:	701e      	strb	r6, [r3, #0]
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	2301      	movs	r3, #1
 800cd64:	e7de      	b.n	800cd24 <_sungetc_r+0x36>

0800cd66 <__ssrefill_r>:
 800cd66:	b510      	push	{r4, lr}
 800cd68:	000c      	movs	r4, r1
 800cd6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd6c:	2900      	cmp	r1, #0
 800cd6e:	d00e      	beq.n	800cd8e <__ssrefill_r+0x28>
 800cd70:	0023      	movs	r3, r4
 800cd72:	3344      	adds	r3, #68	; 0x44
 800cd74:	4299      	cmp	r1, r3
 800cd76:	d001      	beq.n	800cd7c <__ssrefill_r+0x16>
 800cd78:	f7ff fcc6 	bl	800c708 <_free_r>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd80:	6360      	str	r0, [r4, #52]	; 0x34
 800cd82:	6063      	str	r3, [r4, #4]
 800cd84:	4283      	cmp	r3, r0
 800cd86:	d002      	beq.n	800cd8e <__ssrefill_r+0x28>
 800cd88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cd8a:	6023      	str	r3, [r4, #0]
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	6923      	ldr	r3, [r4, #16]
 800cd90:	2001      	movs	r0, #1
 800cd92:	6023      	str	r3, [r4, #0]
 800cd94:	2300      	movs	r3, #0
 800cd96:	89a2      	ldrh	r2, [r4, #12]
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	3320      	adds	r3, #32
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	4240      	negs	r0, r0
 800cda2:	e7f3      	b.n	800cd8c <__ssrefill_r+0x26>

0800cda4 <__ssvfiscanf_r>:
 800cda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda6:	0017      	movs	r7, r2
 800cda8:	2200      	movs	r2, #0
 800cdaa:	4cb0      	ldr	r4, [pc, #704]	; (800d06c <__ssvfiscanf_r+0x2c8>)
 800cdac:	25c0      	movs	r5, #192	; 0xc0
 800cdae:	44a5      	add	sp, r4
 800cdb0:	9248      	str	r2, [sp, #288]	; 0x120
 800cdb2:	9249      	str	r2, [sp, #292]	; 0x124
 800cdb4:	aa05      	add	r2, sp, #20
 800cdb6:	924a      	str	r2, [sp, #296]	; 0x128
 800cdb8:	22be      	movs	r2, #190	; 0xbe
 800cdba:	000c      	movs	r4, r1
 800cdbc:	49ac      	ldr	r1, [pc, #688]	; (800d070 <__ssvfiscanf_r+0x2cc>)
 800cdbe:	9000      	str	r0, [sp, #0]
 800cdc0:	0052      	lsls	r2, r2, #1
 800cdc2:	a845      	add	r0, sp, #276	; 0x114
 800cdc4:	5081      	str	r1, [r0, r2]
 800cdc6:	49ab      	ldr	r1, [pc, #684]	; (800d074 <__ssvfiscanf_r+0x2d0>)
 800cdc8:	006d      	lsls	r5, r5, #1
 800cdca:	5141      	str	r1, [r0, r5]
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	783b      	ldrb	r3, [r7, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d100      	bne.n	800cdd6 <__ssvfiscanf_r+0x32>
 800cdd4:	e148      	b.n	800d068 <__ssvfiscanf_r+0x2c4>
 800cdd6:	f7ff ff31 	bl	800cc3c <__locale_ctype_ptr>
 800cdda:	2208      	movs	r2, #8
 800cddc:	783b      	ldrb	r3, [r7, #0]
 800cdde:	1c7e      	adds	r6, r7, #1
 800cde0:	18c0      	adds	r0, r0, r3
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	7843      	ldrb	r3, [r0, #1]
 800cde6:	4013      	ands	r3, r2
 800cde8:	d020      	beq.n	800ce2c <__ssvfiscanf_r+0x88>
 800cdea:	6863      	ldr	r3, [r4, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dd14      	ble.n	800ce1a <__ssvfiscanf_r+0x76>
 800cdf0:	f7ff ff24 	bl	800cc3c <__locale_ctype_ptr>
 800cdf4:	2108      	movs	r1, #8
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	781a      	ldrb	r2, [r3, #0]
 800cdfa:	1880      	adds	r0, r0, r2
 800cdfc:	7842      	ldrb	r2, [r0, #1]
 800cdfe:	420a      	tst	r2, r1
 800ce00:	d101      	bne.n	800ce06 <__ssvfiscanf_r+0x62>
 800ce02:	0037      	movs	r7, r6
 800ce04:	e7e3      	b.n	800cdce <__ssvfiscanf_r+0x2a>
 800ce06:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800ce08:	3301      	adds	r3, #1
 800ce0a:	9201      	str	r2, [sp, #4]
 800ce0c:	3201      	adds	r2, #1
 800ce0e:	9249      	str	r2, [sp, #292]	; 0x124
 800ce10:	6862      	ldr	r2, [r4, #4]
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	3a01      	subs	r2, #1
 800ce16:	6062      	str	r2, [r4, #4]
 800ce18:	e7e7      	b.n	800cdea <__ssvfiscanf_r+0x46>
 800ce1a:	ab45      	add	r3, sp, #276	; 0x114
 800ce1c:	595b      	ldr	r3, [r3, r5]
 800ce1e:	0021      	movs	r1, r4
 800ce20:	9800      	ldr	r0, [sp, #0]
 800ce22:	9301      	str	r3, [sp, #4]
 800ce24:	4798      	blx	r3
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d0e2      	beq.n	800cdf0 <__ssvfiscanf_r+0x4c>
 800ce2a:	e7ea      	b.n	800ce02 <__ssvfiscanf_r+0x5e>
 800ce2c:	9a01      	ldr	r2, [sp, #4]
 800ce2e:	2a25      	cmp	r2, #37	; 0x25
 800ce30:	d16d      	bne.n	800cf0e <__ssvfiscanf_r+0x16a>
 800ce32:	9347      	str	r3, [sp, #284]	; 0x11c
 800ce34:	9345      	str	r3, [sp, #276]	; 0x114
 800ce36:	787b      	ldrb	r3, [r7, #1]
 800ce38:	2b2a      	cmp	r3, #42	; 0x2a
 800ce3a:	d102      	bne.n	800ce42 <__ssvfiscanf_r+0x9e>
 800ce3c:	3b1a      	subs	r3, #26
 800ce3e:	9345      	str	r3, [sp, #276]	; 0x114
 800ce40:	1cbe      	adds	r6, r7, #2
 800ce42:	0037      	movs	r7, r6
 800ce44:	220a      	movs	r2, #10
 800ce46:	7839      	ldrb	r1, [r7, #0]
 800ce48:	1c7b      	adds	r3, r7, #1
 800ce4a:	9302      	str	r3, [sp, #8]
 800ce4c:	000b      	movs	r3, r1
 800ce4e:	3b30      	subs	r3, #48	; 0x30
 800ce50:	2b09      	cmp	r3, #9
 800ce52:	d924      	bls.n	800ce9e <__ssvfiscanf_r+0xfa>
 800ce54:	4e88      	ldr	r6, [pc, #544]	; (800d078 <__ssvfiscanf_r+0x2d4>)
 800ce56:	2203      	movs	r2, #3
 800ce58:	0030      	movs	r0, r6
 800ce5a:	f7ff f961 	bl	800c120 <memchr>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d007      	beq.n	800ce72 <__ssvfiscanf_r+0xce>
 800ce62:	2301      	movs	r3, #1
 800ce64:	1b80      	subs	r0, r0, r6
 800ce66:	4083      	lsls	r3, r0
 800ce68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce6a:	9f02      	ldr	r7, [sp, #8]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	9203      	str	r2, [sp, #12]
 800ce70:	9345      	str	r3, [sp, #276]	; 0x114
 800ce72:	783b      	ldrb	r3, [r7, #0]
 800ce74:	1c7e      	adds	r6, r7, #1
 800ce76:	2b67      	cmp	r3, #103	; 0x67
 800ce78:	d835      	bhi.n	800cee6 <__ssvfiscanf_r+0x142>
 800ce7a:	2b65      	cmp	r3, #101	; 0x65
 800ce7c:	d300      	bcc.n	800ce80 <__ssvfiscanf_r+0xdc>
 800ce7e:	e0b8      	b.n	800cff2 <__ssvfiscanf_r+0x24e>
 800ce80:	2b47      	cmp	r3, #71	; 0x47
 800ce82:	d814      	bhi.n	800ceae <__ssvfiscanf_r+0x10a>
 800ce84:	2b45      	cmp	r3, #69	; 0x45
 800ce86:	d300      	bcc.n	800ce8a <__ssvfiscanf_r+0xe6>
 800ce88:	e0b3      	b.n	800cff2 <__ssvfiscanf_r+0x24e>
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d100      	bne.n	800ce90 <__ssvfiscanf_r+0xec>
 800ce8e:	e0e8      	b.n	800d062 <__ssvfiscanf_r+0x2be>
 800ce90:	2b25      	cmp	r3, #37	; 0x25
 800ce92:	d03c      	beq.n	800cf0e <__ssvfiscanf_r+0x16a>
 800ce94:	2303      	movs	r3, #3
 800ce96:	934b      	str	r3, [sp, #300]	; 0x12c
 800ce98:	3307      	adds	r3, #7
 800ce9a:	9346      	str	r3, [sp, #280]	; 0x118
 800ce9c:	e066      	b.n	800cf6c <__ssvfiscanf_r+0x1c8>
 800ce9e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cea0:	9f02      	ldr	r7, [sp, #8]
 800cea2:	9303      	str	r3, [sp, #12]
 800cea4:	4353      	muls	r3, r2
 800cea6:	3b30      	subs	r3, #48	; 0x30
 800cea8:	1859      	adds	r1, r3, r1
 800ceaa:	9147      	str	r1, [sp, #284]	; 0x11c
 800ceac:	e7cb      	b.n	800ce46 <__ssvfiscanf_r+0xa2>
 800ceae:	2b5b      	cmp	r3, #91	; 0x5b
 800ceb0:	d100      	bne.n	800ceb4 <__ssvfiscanf_r+0x110>
 800ceb2:	e07a      	b.n	800cfaa <__ssvfiscanf_r+0x206>
 800ceb4:	d810      	bhi.n	800ced8 <__ssvfiscanf_r+0x134>
 800ceb6:	2b58      	cmp	r3, #88	; 0x58
 800ceb8:	d1ec      	bne.n	800ce94 <__ssvfiscanf_r+0xf0>
 800ceba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cebc:	9201      	str	r2, [sp, #4]
 800cebe:	2280      	movs	r2, #128	; 0x80
 800cec0:	9901      	ldr	r1, [sp, #4]
 800cec2:	0092      	lsls	r2, r2, #2
 800cec4:	430a      	orrs	r2, r1
 800cec6:	9245      	str	r2, [sp, #276]	; 0x114
 800cec8:	2210      	movs	r2, #16
 800ceca:	9246      	str	r2, [sp, #280]	; 0x118
 800cecc:	226e      	movs	r2, #110	; 0x6e
 800cece:	429a      	cmp	r2, r3
 800ced0:	419b      	sbcs	r3, r3
 800ced2:	425b      	negs	r3, r3
 800ced4:	3303      	adds	r3, #3
 800ced6:	e048      	b.n	800cf6a <__ssvfiscanf_r+0x1c6>
 800ced8:	2b63      	cmp	r3, #99	; 0x63
 800ceda:	d100      	bne.n	800cede <__ssvfiscanf_r+0x13a>
 800cedc:	e072      	b.n	800cfc4 <__ssvfiscanf_r+0x220>
 800cede:	2b64      	cmp	r3, #100	; 0x64
 800cee0:	d1d8      	bne.n	800ce94 <__ssvfiscanf_r+0xf0>
 800cee2:	220a      	movs	r2, #10
 800cee4:	e7f1      	b.n	800ceca <__ssvfiscanf_r+0x126>
 800cee6:	2b70      	cmp	r3, #112	; 0x70
 800cee8:	d035      	beq.n	800cf56 <__ssvfiscanf_r+0x1b2>
 800ceea:	d808      	bhi.n	800cefe <__ssvfiscanf_r+0x15a>
 800ceec:	2b6e      	cmp	r3, #110	; 0x6e
 800ceee:	d100      	bne.n	800cef2 <__ssvfiscanf_r+0x14e>
 800cef0:	e070      	b.n	800cfd4 <__ssvfiscanf_r+0x230>
 800cef2:	d837      	bhi.n	800cf64 <__ssvfiscanf_r+0x1c0>
 800cef4:	2b69      	cmp	r3, #105	; 0x69
 800cef6:	d1cd      	bne.n	800ce94 <__ssvfiscanf_r+0xf0>
 800cef8:	2300      	movs	r3, #0
 800cefa:	9346      	str	r3, [sp, #280]	; 0x118
 800cefc:	e7ea      	b.n	800ced4 <__ssvfiscanf_r+0x130>
 800cefe:	2b75      	cmp	r3, #117	; 0x75
 800cf00:	d0ef      	beq.n	800cee2 <__ssvfiscanf_r+0x13e>
 800cf02:	2b78      	cmp	r3, #120	; 0x78
 800cf04:	d0d9      	beq.n	800ceba <__ssvfiscanf_r+0x116>
 800cf06:	2b73      	cmp	r3, #115	; 0x73
 800cf08:	d1c4      	bne.n	800ce94 <__ssvfiscanf_r+0xf0>
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	e02d      	b.n	800cf6a <__ssvfiscanf_r+0x1c6>
 800cf0e:	6863      	ldr	r3, [r4, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dd0f      	ble.n	800cf34 <__ssvfiscanf_r+0x190>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	9901      	ldr	r1, [sp, #4]
 800cf18:	781a      	ldrb	r2, [r3, #0]
 800cf1a:	428a      	cmp	r2, r1
 800cf1c:	d000      	beq.n	800cf20 <__ssvfiscanf_r+0x17c>
 800cf1e:	e0a3      	b.n	800d068 <__ssvfiscanf_r+0x2c4>
 800cf20:	3301      	adds	r3, #1
 800cf22:	6862      	ldr	r2, [r4, #4]
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800cf28:	3a01      	subs	r2, #1
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	6062      	str	r2, [r4, #4]
 800cf30:	9349      	str	r3, [sp, #292]	; 0x124
 800cf32:	e766      	b.n	800ce02 <__ssvfiscanf_r+0x5e>
 800cf34:	ab45      	add	r3, sp, #276	; 0x114
 800cf36:	595b      	ldr	r3, [r3, r5]
 800cf38:	0021      	movs	r1, r4
 800cf3a:	9800      	ldr	r0, [sp, #0]
 800cf3c:	9302      	str	r3, [sp, #8]
 800cf3e:	4798      	blx	r3
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d0e7      	beq.n	800cf14 <__ssvfiscanf_r+0x170>
 800cf44:	9848      	ldr	r0, [sp, #288]	; 0x120
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d000      	beq.n	800cf4c <__ssvfiscanf_r+0x1a8>
 800cf4a:	e086      	b.n	800d05a <__ssvfiscanf_r+0x2b6>
 800cf4c:	3801      	subs	r0, #1
 800cf4e:	23a7      	movs	r3, #167	; 0xa7
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	449d      	add	sp, r3
 800cf54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cf58:	9201      	str	r2, [sp, #4]
 800cf5a:	2220      	movs	r2, #32
 800cf5c:	9901      	ldr	r1, [sp, #4]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	9245      	str	r2, [sp, #276]	; 0x114
 800cf62:	e7aa      	b.n	800ceba <__ssvfiscanf_r+0x116>
 800cf64:	2308      	movs	r3, #8
 800cf66:	9346      	str	r3, [sp, #280]	; 0x118
 800cf68:	3b04      	subs	r3, #4
 800cf6a:	934b      	str	r3, [sp, #300]	; 0x12c
 800cf6c:	6863      	ldr	r3, [r4, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dd41      	ble.n	800cff6 <__ssvfiscanf_r+0x252>
 800cf72:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cf74:	9301      	str	r3, [sp, #4]
 800cf76:	065b      	lsls	r3, r3, #25
 800cf78:	d408      	bmi.n	800cf8c <__ssvfiscanf_r+0x1e8>
 800cf7a:	f7ff fe5f 	bl	800cc3c <__locale_ctype_ptr>
 800cf7e:	2108      	movs	r1, #8
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	781a      	ldrb	r2, [r3, #0]
 800cf84:	1880      	adds	r0, r0, r2
 800cf86:	7842      	ldrb	r2, [r0, #1]
 800cf88:	420a      	tst	r2, r1
 800cf8a:	d13d      	bne.n	800d008 <__ssvfiscanf_r+0x264>
 800cf8c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	dc4f      	bgt.n	800d032 <__ssvfiscanf_r+0x28e>
 800cf92:	ab04      	add	r3, sp, #16
 800cf94:	0022      	movs	r2, r4
 800cf96:	a945      	add	r1, sp, #276	; 0x114
 800cf98:	9800      	ldr	r0, [sp, #0]
 800cf9a:	f000 f871 	bl	800d080 <_scanf_chars>
 800cf9e:	2801      	cmp	r0, #1
 800cfa0:	d062      	beq.n	800d068 <__ssvfiscanf_r+0x2c4>
 800cfa2:	2802      	cmp	r0, #2
 800cfa4:	d000      	beq.n	800cfa8 <__ssvfiscanf_r+0x204>
 800cfa6:	e72c      	b.n	800ce02 <__ssvfiscanf_r+0x5e>
 800cfa8:	e7cc      	b.n	800cf44 <__ssvfiscanf_r+0x1a0>
 800cfaa:	0031      	movs	r1, r6
 800cfac:	a805      	add	r0, sp, #20
 800cfae:	f000 f9cf 	bl	800d350 <__sccl>
 800cfb2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cfb4:	0006      	movs	r6, r0
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	2340      	movs	r3, #64	; 0x40
 800cfba:	9a01      	ldr	r2, [sp, #4]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	9345      	str	r3, [sp, #276]	; 0x114
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e7d2      	b.n	800cf6a <__ssvfiscanf_r+0x1c6>
 800cfc4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cfc6:	9301      	str	r3, [sp, #4]
 800cfc8:	2340      	movs	r3, #64	; 0x40
 800cfca:	9a01      	ldr	r2, [sp, #4]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	9345      	str	r3, [sp, #276]	; 0x114
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	e7ca      	b.n	800cf6a <__ssvfiscanf_r+0x1c6>
 800cfd4:	9845      	ldr	r0, [sp, #276]	; 0x114
 800cfd6:	06c3      	lsls	r3, r0, #27
 800cfd8:	d500      	bpl.n	800cfdc <__ssvfiscanf_r+0x238>
 800cfda:	e712      	b.n	800ce02 <__ssvfiscanf_r+0x5e>
 800cfdc:	9b04      	ldr	r3, [sp, #16]
 800cfde:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800cfe0:	1d19      	adds	r1, r3, #4
 800cfe2:	9104      	str	r1, [sp, #16]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	07c7      	lsls	r7, r0, #31
 800cfe8:	d501      	bpl.n	800cfee <__ssvfiscanf_r+0x24a>
 800cfea:	801a      	strh	r2, [r3, #0]
 800cfec:	e709      	b.n	800ce02 <__ssvfiscanf_r+0x5e>
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	e707      	b.n	800ce02 <__ssvfiscanf_r+0x5e>
 800cff2:	2305      	movs	r3, #5
 800cff4:	e7b9      	b.n	800cf6a <__ssvfiscanf_r+0x1c6>
 800cff6:	ab45      	add	r3, sp, #276	; 0x114
 800cff8:	595b      	ldr	r3, [r3, r5]
 800cffa:	0021      	movs	r1, r4
 800cffc:	9800      	ldr	r0, [sp, #0]
 800cffe:	9301      	str	r3, [sp, #4]
 800d000:	4798      	blx	r3
 800d002:	2800      	cmp	r0, #0
 800d004:	d0b5      	beq.n	800cf72 <__ssvfiscanf_r+0x1ce>
 800d006:	e79d      	b.n	800cf44 <__ssvfiscanf_r+0x1a0>
 800d008:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d00a:	9201      	str	r2, [sp, #4]
 800d00c:	3201      	adds	r2, #1
 800d00e:	9249      	str	r2, [sp, #292]	; 0x124
 800d010:	6862      	ldr	r2, [r4, #4]
 800d012:	3a01      	subs	r2, #1
 800d014:	6062      	str	r2, [r4, #4]
 800d016:	2a00      	cmp	r2, #0
 800d018:	dd02      	ble.n	800d020 <__ssvfiscanf_r+0x27c>
 800d01a:	3301      	adds	r3, #1
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	e7ac      	b.n	800cf7a <__ssvfiscanf_r+0x1d6>
 800d020:	ab45      	add	r3, sp, #276	; 0x114
 800d022:	595b      	ldr	r3, [r3, r5]
 800d024:	0021      	movs	r1, r4
 800d026:	9800      	ldr	r0, [sp, #0]
 800d028:	9301      	str	r3, [sp, #4]
 800d02a:	4798      	blx	r3
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d0a4      	beq.n	800cf7a <__ssvfiscanf_r+0x1d6>
 800d030:	e788      	b.n	800cf44 <__ssvfiscanf_r+0x1a0>
 800d032:	2b04      	cmp	r3, #4
 800d034:	dc06      	bgt.n	800d044 <__ssvfiscanf_r+0x2a0>
 800d036:	ab04      	add	r3, sp, #16
 800d038:	0022      	movs	r2, r4
 800d03a:	a945      	add	r1, sp, #276	; 0x114
 800d03c:	9800      	ldr	r0, [sp, #0]
 800d03e:	f000 f885 	bl	800d14c <_scanf_i>
 800d042:	e7ac      	b.n	800cf9e <__ssvfiscanf_r+0x1fa>
 800d044:	4b0d      	ldr	r3, [pc, #52]	; (800d07c <__ssvfiscanf_r+0x2d8>)
 800d046:	2b00      	cmp	r3, #0
 800d048:	d100      	bne.n	800d04c <__ssvfiscanf_r+0x2a8>
 800d04a:	e6da      	b.n	800ce02 <__ssvfiscanf_r+0x5e>
 800d04c:	ab04      	add	r3, sp, #16
 800d04e:	0022      	movs	r2, r4
 800d050:	a945      	add	r1, sp, #276	; 0x114
 800d052:	9800      	ldr	r0, [sp, #0]
 800d054:	e000      	b.n	800d058 <__ssvfiscanf_r+0x2b4>
 800d056:	bf00      	nop
 800d058:	e7a1      	b.n	800cf9e <__ssvfiscanf_r+0x1fa>
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	065b      	lsls	r3, r3, #25
 800d05e:	d400      	bmi.n	800d062 <__ssvfiscanf_r+0x2be>
 800d060:	e775      	b.n	800cf4e <__ssvfiscanf_r+0x1aa>
 800d062:	2001      	movs	r0, #1
 800d064:	4240      	negs	r0, r0
 800d066:	e772      	b.n	800cf4e <__ssvfiscanf_r+0x1aa>
 800d068:	9848      	ldr	r0, [sp, #288]	; 0x120
 800d06a:	e770      	b.n	800cf4e <__ssvfiscanf_r+0x1aa>
 800d06c:	fffffd64 	.word	0xfffffd64
 800d070:	0800ccef 	.word	0x0800ccef
 800d074:	0800cd67 	.word	0x0800cd67
 800d078:	0800ec0a 	.word	0x0800ec0a
 800d07c:	00000000 	.word	0x00000000

0800d080 <_scanf_chars>:
 800d080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d082:	0015      	movs	r5, r2
 800d084:	688a      	ldr	r2, [r1, #8]
 800d086:	9001      	str	r0, [sp, #4]
 800d088:	000c      	movs	r4, r1
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	d104      	bne.n	800d098 <_scanf_chars+0x18>
 800d08e:	698a      	ldr	r2, [r1, #24]
 800d090:	2a00      	cmp	r2, #0
 800d092:	d117      	bne.n	800d0c4 <_scanf_chars+0x44>
 800d094:	3201      	adds	r2, #1
 800d096:	60a2      	str	r2, [r4, #8]
 800d098:	6822      	ldr	r2, [r4, #0]
 800d09a:	06d2      	lsls	r2, r2, #27
 800d09c:	d403      	bmi.n	800d0a6 <_scanf_chars+0x26>
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	1d11      	adds	r1, r2, #4
 800d0a2:	6019      	str	r1, [r3, #0]
 800d0a4:	6817      	ldr	r7, [r2, #0]
 800d0a6:	2600      	movs	r6, #0
 800d0a8:	69a3      	ldr	r3, [r4, #24]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d01f      	beq.n	800d0ee <_scanf_chars+0x6e>
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d10b      	bne.n	800d0ca <_scanf_chars+0x4a>
 800d0b2:	682b      	ldr	r3, [r5, #0]
 800d0b4:	6962      	ldr	r2, [r4, #20]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	5cd3      	ldrb	r3, [r2, r3]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d117      	bne.n	800d0ee <_scanf_chars+0x6e>
 800d0be:	2e00      	cmp	r6, #0
 800d0c0:	d133      	bne.n	800d12a <_scanf_chars+0xaa>
 800d0c2:	e009      	b.n	800d0d8 <_scanf_chars+0x58>
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	4252      	negs	r2, r2
 800d0c8:	e7e5      	b.n	800d096 <_scanf_chars+0x16>
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d006      	beq.n	800d0dc <_scanf_chars+0x5c>
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	d12b      	bne.n	800d12a <_scanf_chars+0xaa>
 800d0d2:	69a3      	ldr	r3, [r4, #24]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d128      	bne.n	800d12a <_scanf_chars+0xaa>
 800d0d8:	2001      	movs	r0, #1
 800d0da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0dc:	f7ff fdae 	bl	800cc3c <__locale_ctype_ptr>
 800d0e0:	2208      	movs	r2, #8
 800d0e2:	682b      	ldr	r3, [r5, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	18c0      	adds	r0, r0, r3
 800d0e8:	7843      	ldrb	r3, [r0, #1]
 800d0ea:	4213      	tst	r3, r2
 800d0ec:	d1ef      	bne.n	800d0ce <_scanf_chars+0x4e>
 800d0ee:	2210      	movs	r2, #16
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	3601      	adds	r6, #1
 800d0f4:	4213      	tst	r3, r2
 800d0f6:	d103      	bne.n	800d100 <_scanf_chars+0x80>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	703b      	strb	r3, [r7, #0]
 800d0fe:	3701      	adds	r7, #1
 800d100:	682a      	ldr	r2, [r5, #0]
 800d102:	686b      	ldr	r3, [r5, #4]
 800d104:	3201      	adds	r2, #1
 800d106:	602a      	str	r2, [r5, #0]
 800d108:	68a2      	ldr	r2, [r4, #8]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	3a01      	subs	r2, #1
 800d10e:	606b      	str	r3, [r5, #4]
 800d110:	60a2      	str	r2, [r4, #8]
 800d112:	2a00      	cmp	r2, #0
 800d114:	d009      	beq.n	800d12a <_scanf_chars+0xaa>
 800d116:	2b00      	cmp	r3, #0
 800d118:	dcc6      	bgt.n	800d0a8 <_scanf_chars+0x28>
 800d11a:	23c0      	movs	r3, #192	; 0xc0
 800d11c:	005b      	lsls	r3, r3, #1
 800d11e:	58e3      	ldr	r3, [r4, r3]
 800d120:	0029      	movs	r1, r5
 800d122:	9801      	ldr	r0, [sp, #4]
 800d124:	4798      	blx	r3
 800d126:	2800      	cmp	r0, #0
 800d128:	d0be      	beq.n	800d0a8 <_scanf_chars+0x28>
 800d12a:	2310      	movs	r3, #16
 800d12c:	6822      	ldr	r2, [r4, #0]
 800d12e:	4013      	ands	r3, r2
 800d130:	d106      	bne.n	800d140 <_scanf_chars+0xc0>
 800d132:	68e2      	ldr	r2, [r4, #12]
 800d134:	3201      	adds	r2, #1
 800d136:	60e2      	str	r2, [r4, #12]
 800d138:	69a2      	ldr	r2, [r4, #24]
 800d13a:	2a00      	cmp	r2, #0
 800d13c:	d000      	beq.n	800d140 <_scanf_chars+0xc0>
 800d13e:	703b      	strb	r3, [r7, #0]
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	2000      	movs	r0, #0
 800d144:	199e      	adds	r6, r3, r6
 800d146:	6126      	str	r6, [r4, #16]
 800d148:	e7c7      	b.n	800d0da <_scanf_chars+0x5a>
	...

0800d14c <_scanf_i>:
 800d14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14e:	000c      	movs	r4, r1
 800d150:	b08b      	sub	sp, #44	; 0x2c
 800d152:	9302      	str	r3, [sp, #8]
 800d154:	4b78      	ldr	r3, [pc, #480]	; (800d338 <_scanf_i+0x1ec>)
 800d156:	9004      	str	r0, [sp, #16]
 800d158:	0016      	movs	r6, r2
 800d15a:	aa07      	add	r2, sp, #28
 800d15c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800d15e:	c223      	stmia	r2!, {r0, r1, r5}
 800d160:	4b76      	ldr	r3, [pc, #472]	; (800d33c <_scanf_i+0x1f0>)
 800d162:	9305      	str	r3, [sp, #20]
 800d164:	69a3      	ldr	r3, [r4, #24]
 800d166:	2b03      	cmp	r3, #3
 800d168:	d101      	bne.n	800d16e <_scanf_i+0x22>
 800d16a:	4b75      	ldr	r3, [pc, #468]	; (800d340 <_scanf_i+0x1f4>)
 800d16c:	9305      	str	r3, [sp, #20]
 800d16e:	22ae      	movs	r2, #174	; 0xae
 800d170:	2000      	movs	r0, #0
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	0052      	lsls	r2, r2, #1
 800d176:	1e59      	subs	r1, r3, #1
 800d178:	9003      	str	r0, [sp, #12]
 800d17a:	4291      	cmp	r1, r2
 800d17c:	d905      	bls.n	800d18a <_scanf_i+0x3e>
 800d17e:	3b5e      	subs	r3, #94	; 0x5e
 800d180:	3bff      	subs	r3, #255	; 0xff
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	235e      	movs	r3, #94	; 0x5e
 800d186:	33ff      	adds	r3, #255	; 0xff
 800d188:	60a3      	str	r3, [r4, #8]
 800d18a:	0023      	movs	r3, r4
 800d18c:	331c      	adds	r3, #28
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	23d0      	movs	r3, #208	; 0xd0
 800d192:	2700      	movs	r7, #0
 800d194:	6822      	ldr	r2, [r4, #0]
 800d196:	011b      	lsls	r3, r3, #4
 800d198:	4313      	orrs	r3, r2
 800d19a:	6023      	str	r3, [r4, #0]
 800d19c:	9b01      	ldr	r3, [sp, #4]
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	6833      	ldr	r3, [r6, #0]
 800d1a2:	a807      	add	r0, sp, #28
 800d1a4:	7819      	ldrb	r1, [r3, #0]
 800d1a6:	00bb      	lsls	r3, r7, #2
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	5818      	ldr	r0, [r3, r0]
 800d1ac:	f7fe ffb8 	bl	800c120 <memchr>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d02b      	beq.n	800d20c <_scanf_i+0xc0>
 800d1b4:	2f01      	cmp	r7, #1
 800d1b6:	d162      	bne.n	800d27e <_scanf_i+0x132>
 800d1b8:	6863      	ldr	r3, [r4, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d106      	bne.n	800d1cc <_scanf_i+0x80>
 800d1be:	3308      	adds	r3, #8
 800d1c0:	6822      	ldr	r2, [r4, #0]
 800d1c2:	6063      	str	r3, [r4, #4]
 800d1c4:	33f9      	adds	r3, #249	; 0xf9
 800d1c6:	33ff      	adds	r3, #255	; 0xff
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	6023      	str	r3, [r4, #0]
 800d1cc:	4b5d      	ldr	r3, [pc, #372]	; (800d344 <_scanf_i+0x1f8>)
 800d1ce:	6822      	ldr	r2, [r4, #0]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	68a3      	ldr	r3, [r4, #8]
 800d1d6:	1e5a      	subs	r2, r3, #1
 800d1d8:	60a2      	str	r2, [r4, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d016      	beq.n	800d20c <_scanf_i+0xc0>
 800d1de:	6833      	ldr	r3, [r6, #0]
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	6032      	str	r2, [r6, #0]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	9a00      	ldr	r2, [sp, #0]
 800d1e8:	7013      	strb	r3, [r2, #0]
 800d1ea:	6873      	ldr	r3, [r6, #4]
 800d1ec:	1c55      	adds	r5, r2, #1
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	6073      	str	r3, [r6, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	dc09      	bgt.n	800d20a <_scanf_i+0xbe>
 800d1f6:	23c0      	movs	r3, #192	; 0xc0
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	58e3      	ldr	r3, [r4, r3]
 800d1fc:	0031      	movs	r1, r6
 800d1fe:	9804      	ldr	r0, [sp, #16]
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	4798      	blx	r3
 800d204:	2800      	cmp	r0, #0
 800d206:	d000      	beq.n	800d20a <_scanf_i+0xbe>
 800d208:	e080      	b.n	800d30c <_scanf_i+0x1c0>
 800d20a:	9500      	str	r5, [sp, #0]
 800d20c:	3701      	adds	r7, #1
 800d20e:	2f03      	cmp	r7, #3
 800d210:	d1c6      	bne.n	800d1a0 <_scanf_i+0x54>
 800d212:	6863      	ldr	r3, [r4, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d101      	bne.n	800d21c <_scanf_i+0xd0>
 800d218:	330a      	adds	r3, #10
 800d21a:	6063      	str	r3, [r4, #4]
 800d21c:	2110      	movs	r1, #16
 800d21e:	2700      	movs	r7, #0
 800d220:	6863      	ldr	r3, [r4, #4]
 800d222:	6960      	ldr	r0, [r4, #20]
 800d224:	1ac9      	subs	r1, r1, r3
 800d226:	4b48      	ldr	r3, [pc, #288]	; (800d348 <_scanf_i+0x1fc>)
 800d228:	18c9      	adds	r1, r1, r3
 800d22a:	f000 f891 	bl	800d350 <__sccl>
 800d22e:	9d00      	ldr	r5, [sp, #0]
 800d230:	68a3      	ldr	r3, [r4, #8]
 800d232:	6822      	ldr	r2, [r4, #0]
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d041      	beq.n	800d2be <_scanf_i+0x172>
 800d23a:	6831      	ldr	r1, [r6, #0]
 800d23c:	6963      	ldr	r3, [r4, #20]
 800d23e:	7808      	ldrb	r0, [r1, #0]
 800d240:	5c1b      	ldrb	r3, [r3, r0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d03b      	beq.n	800d2be <_scanf_i+0x172>
 800d246:	2830      	cmp	r0, #48	; 0x30
 800d248:	d129      	bne.n	800d29e <_scanf_i+0x152>
 800d24a:	2380      	movs	r3, #128	; 0x80
 800d24c:	011b      	lsls	r3, r3, #4
 800d24e:	421a      	tst	r2, r3
 800d250:	d025      	beq.n	800d29e <_scanf_i+0x152>
 800d252:	9b03      	ldr	r3, [sp, #12]
 800d254:	3701      	adds	r7, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	d005      	beq.n	800d266 <_scanf_i+0x11a>
 800d25a:	001a      	movs	r2, r3
 800d25c:	9b00      	ldr	r3, [sp, #0]
 800d25e:	3a01      	subs	r2, #1
 800d260:	3301      	adds	r3, #1
 800d262:	9203      	str	r2, [sp, #12]
 800d264:	60a3      	str	r3, [r4, #8]
 800d266:	6873      	ldr	r3, [r6, #4]
 800d268:	3b01      	subs	r3, #1
 800d26a:	6073      	str	r3, [r6, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dd1d      	ble.n	800d2ac <_scanf_i+0x160>
 800d270:	6833      	ldr	r3, [r6, #0]
 800d272:	3301      	adds	r3, #1
 800d274:	6033      	str	r3, [r6, #0]
 800d276:	68a3      	ldr	r3, [r4, #8]
 800d278:	3b01      	subs	r3, #1
 800d27a:	60a3      	str	r3, [r4, #8]
 800d27c:	e7d8      	b.n	800d230 <_scanf_i+0xe4>
 800d27e:	2f02      	cmp	r7, #2
 800d280:	d1a8      	bne.n	800d1d4 <_scanf_i+0x88>
 800d282:	21c0      	movs	r1, #192	; 0xc0
 800d284:	2380      	movs	r3, #128	; 0x80
 800d286:	6822      	ldr	r2, [r4, #0]
 800d288:	00c9      	lsls	r1, r1, #3
 800d28a:	4011      	ands	r1, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4299      	cmp	r1, r3
 800d290:	d1bf      	bne.n	800d212 <_scanf_i+0xc6>
 800d292:	3bf1      	subs	r3, #241	; 0xf1
 800d294:	3bff      	subs	r3, #255	; 0xff
 800d296:	6063      	str	r3, [r4, #4]
 800d298:	33f0      	adds	r3, #240	; 0xf0
 800d29a:	4313      	orrs	r3, r2
 800d29c:	e799      	b.n	800d1d2 <_scanf_i+0x86>
 800d29e:	4b2b      	ldr	r3, [pc, #172]	; (800d34c <_scanf_i+0x200>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	6023      	str	r3, [r4, #0]
 800d2a4:	780b      	ldrb	r3, [r1, #0]
 800d2a6:	702b      	strb	r3, [r5, #0]
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	e7dc      	b.n	800d266 <_scanf_i+0x11a>
 800d2ac:	23c0      	movs	r3, #192	; 0xc0
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	58e3      	ldr	r3, [r4, r3]
 800d2b2:	0031      	movs	r1, r6
 800d2b4:	9804      	ldr	r0, [sp, #16]
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	4798      	blx	r3
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d0db      	beq.n	800d276 <_scanf_i+0x12a>
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	05db      	lsls	r3, r3, #23
 800d2c2:	d50e      	bpl.n	800d2e2 <_scanf_i+0x196>
 800d2c4:	9b01      	ldr	r3, [sp, #4]
 800d2c6:	429d      	cmp	r5, r3
 800d2c8:	d907      	bls.n	800d2da <_scanf_i+0x18e>
 800d2ca:	23be      	movs	r3, #190	; 0xbe
 800d2cc:	3d01      	subs	r5, #1
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	7829      	ldrb	r1, [r5, #0]
 800d2d2:	58e3      	ldr	r3, [r4, r3]
 800d2d4:	0032      	movs	r2, r6
 800d2d6:	9804      	ldr	r0, [sp, #16]
 800d2d8:	4798      	blx	r3
 800d2da:	9b01      	ldr	r3, [sp, #4]
 800d2dc:	2001      	movs	r0, #1
 800d2de:	429d      	cmp	r5, r3
 800d2e0:	d027      	beq.n	800d332 <_scanf_i+0x1e6>
 800d2e2:	2210      	movs	r2, #16
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	401a      	ands	r2, r3
 800d2e8:	d11c      	bne.n	800d324 <_scanf_i+0x1d8>
 800d2ea:	702a      	strb	r2, [r5, #0]
 800d2ec:	6863      	ldr	r3, [r4, #4]
 800d2ee:	9901      	ldr	r1, [sp, #4]
 800d2f0:	9804      	ldr	r0, [sp, #16]
 800d2f2:	9e05      	ldr	r6, [sp, #20]
 800d2f4:	47b0      	blx	r6
 800d2f6:	9b02      	ldr	r3, [sp, #8]
 800d2f8:	6821      	ldr	r1, [r4, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	068a      	lsls	r2, r1, #26
 800d2fe:	d507      	bpl.n	800d310 <_scanf_i+0x1c4>
 800d300:	1d1a      	adds	r2, r3, #4
 800d302:	9902      	ldr	r1, [sp, #8]
 800d304:	600a      	str	r2, [r1, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6018      	str	r0, [r3, #0]
 800d30a:	e008      	b.n	800d31e <_scanf_i+0x1d2>
 800d30c:	2700      	movs	r7, #0
 800d30e:	e7d6      	b.n	800d2be <_scanf_i+0x172>
 800d310:	1d1a      	adds	r2, r3, #4
 800d312:	07ce      	lsls	r6, r1, #31
 800d314:	d5f5      	bpl.n	800d302 <_scanf_i+0x1b6>
 800d316:	9902      	ldr	r1, [sp, #8]
 800d318:	600a      	str	r2, [r1, #0]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	8018      	strh	r0, [r3, #0]
 800d31e:	68e3      	ldr	r3, [r4, #12]
 800d320:	3301      	adds	r3, #1
 800d322:	60e3      	str	r3, [r4, #12]
 800d324:	2000      	movs	r0, #0
 800d326:	9b01      	ldr	r3, [sp, #4]
 800d328:	1aed      	subs	r5, r5, r3
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	19ef      	adds	r7, r5, r7
 800d32e:	19df      	adds	r7, r3, r7
 800d330:	6127      	str	r7, [r4, #16]
 800d332:	b00b      	add	sp, #44	; 0x2c
 800d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	0800e8cc 	.word	0x0800e8cc
 800d33c:	0800cbe9 	.word	0x0800cbe9
 800d340:	0800d4b5 	.word	0x0800d4b5
 800d344:	fffffaff 	.word	0xfffffaff
 800d348:	0800ec1f 	.word	0x0800ec1f
 800d34c:	fffff6ff 	.word	0xfffff6ff

0800d350 <__sccl>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	780b      	ldrb	r3, [r1, #0]
 800d354:	0005      	movs	r5, r0
 800d356:	2b5e      	cmp	r3, #94	; 0x5e
 800d358:	d018      	beq.n	800d38c <__sccl+0x3c>
 800d35a:	1c4a      	adds	r2, r1, #1
 800d35c:	2100      	movs	r1, #0
 800d35e:	0028      	movs	r0, r5
 800d360:	1c6c      	adds	r4, r5, #1
 800d362:	34ff      	adds	r4, #255	; 0xff
 800d364:	7001      	strb	r1, [r0, #0]
 800d366:	3001      	adds	r0, #1
 800d368:	42a0      	cmp	r0, r4
 800d36a:	d1fb      	bne.n	800d364 <__sccl+0x14>
 800d36c:	1e50      	subs	r0, r2, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00b      	beq.n	800d38a <__sccl+0x3a>
 800d372:	2001      	movs	r0, #1
 800d374:	4041      	eors	r1, r0
 800d376:	54e9      	strb	r1, [r5, r3]
 800d378:	7814      	ldrb	r4, [r2, #0]
 800d37a:	1c50      	adds	r0, r2, #1
 800d37c:	2c2d      	cmp	r4, #45	; 0x2d
 800d37e:	d00c      	beq.n	800d39a <__sccl+0x4a>
 800d380:	2c5d      	cmp	r4, #93	; 0x5d
 800d382:	d002      	beq.n	800d38a <__sccl+0x3a>
 800d384:	2c00      	cmp	r4, #0
 800d386:	d105      	bne.n	800d394 <__sccl+0x44>
 800d388:	0010      	movs	r0, r2
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	1c8a      	adds	r2, r1, #2
 800d38e:	784b      	ldrb	r3, [r1, #1]
 800d390:	2101      	movs	r1, #1
 800d392:	e7e4      	b.n	800d35e <__sccl+0xe>
 800d394:	0023      	movs	r3, r4
 800d396:	0002      	movs	r2, r0
 800d398:	e7ed      	b.n	800d376 <__sccl+0x26>
 800d39a:	7856      	ldrb	r6, [r2, #1]
 800d39c:	2e5d      	cmp	r6, #93	; 0x5d
 800d39e:	d0f9      	beq.n	800d394 <__sccl+0x44>
 800d3a0:	42b3      	cmp	r3, r6
 800d3a2:	dcf7      	bgt.n	800d394 <__sccl+0x44>
 800d3a4:	3202      	adds	r2, #2
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	54e9      	strb	r1, [r5, r3]
 800d3aa:	429e      	cmp	r6, r3
 800d3ac:	dcfb      	bgt.n	800d3a6 <__sccl+0x56>
 800d3ae:	e7e3      	b.n	800d378 <__sccl+0x28>

0800d3b0 <_strtol_l.isra.0>:
 800d3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b2:	001f      	movs	r7, r3
 800d3b4:	000e      	movs	r6, r1
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	9005      	str	r0, [sp, #20]
 800d3ba:	9101      	str	r1, [sp, #4]
 800d3bc:	9202      	str	r2, [sp, #8]
 800d3be:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d3c0:	7834      	ldrb	r4, [r6, #0]
 800d3c2:	f7ff fc37 	bl	800cc34 <__locale_ctype_ptr_l>
 800d3c6:	2208      	movs	r2, #8
 800d3c8:	1900      	adds	r0, r0, r4
 800d3ca:	7843      	ldrb	r3, [r0, #1]
 800d3cc:	1c75      	adds	r5, r6, #1
 800d3ce:	4013      	ands	r3, r2
 800d3d0:	d136      	bne.n	800d440 <_strtol_l.isra.0+0x90>
 800d3d2:	2c2d      	cmp	r4, #45	; 0x2d
 800d3d4:	d136      	bne.n	800d444 <_strtol_l.isra.0+0x94>
 800d3d6:	1cb5      	adds	r5, r6, #2
 800d3d8:	7874      	ldrb	r4, [r6, #1]
 800d3da:	2601      	movs	r6, #1
 800d3dc:	2f00      	cmp	r7, #0
 800d3de:	d062      	beq.n	800d4a6 <_strtol_l.isra.0+0xf6>
 800d3e0:	2f10      	cmp	r7, #16
 800d3e2:	d109      	bne.n	800d3f8 <_strtol_l.isra.0+0x48>
 800d3e4:	2c30      	cmp	r4, #48	; 0x30
 800d3e6:	d107      	bne.n	800d3f8 <_strtol_l.isra.0+0x48>
 800d3e8:	2220      	movs	r2, #32
 800d3ea:	782b      	ldrb	r3, [r5, #0]
 800d3ec:	4393      	bics	r3, r2
 800d3ee:	2b58      	cmp	r3, #88	; 0x58
 800d3f0:	d154      	bne.n	800d49c <_strtol_l.isra.0+0xec>
 800d3f2:	2710      	movs	r7, #16
 800d3f4:	786c      	ldrb	r4, [r5, #1]
 800d3f6:	3502      	adds	r5, #2
 800d3f8:	4b2d      	ldr	r3, [pc, #180]	; (800d4b0 <_strtol_l.isra.0+0x100>)
 800d3fa:	0039      	movs	r1, r7
 800d3fc:	18f3      	adds	r3, r6, r3
 800d3fe:	0018      	movs	r0, r3
 800d400:	9303      	str	r3, [sp, #12]
 800d402:	f7f2 ff23 	bl	800024c <__aeabi_uidivmod>
 800d406:	9104      	str	r1, [sp, #16]
 800d408:	2101      	movs	r1, #1
 800d40a:	2300      	movs	r3, #0
 800d40c:	4249      	negs	r1, r1
 800d40e:	0002      	movs	r2, r0
 800d410:	468c      	mov	ip, r1
 800d412:	0018      	movs	r0, r3
 800d414:	0021      	movs	r1, r4
 800d416:	3930      	subs	r1, #48	; 0x30
 800d418:	2909      	cmp	r1, #9
 800d41a:	d81a      	bhi.n	800d452 <_strtol_l.isra.0+0xa2>
 800d41c:	000c      	movs	r4, r1
 800d41e:	42a7      	cmp	r7, r4
 800d420:	dd23      	ble.n	800d46a <_strtol_l.isra.0+0xba>
 800d422:	1c59      	adds	r1, r3, #1
 800d424:	d009      	beq.n	800d43a <_strtol_l.isra.0+0x8a>
 800d426:	4663      	mov	r3, ip
 800d428:	4282      	cmp	r2, r0
 800d42a:	d306      	bcc.n	800d43a <_strtol_l.isra.0+0x8a>
 800d42c:	d102      	bne.n	800d434 <_strtol_l.isra.0+0x84>
 800d42e:	9904      	ldr	r1, [sp, #16]
 800d430:	42a1      	cmp	r1, r4
 800d432:	db02      	blt.n	800d43a <_strtol_l.isra.0+0x8a>
 800d434:	2301      	movs	r3, #1
 800d436:	4378      	muls	r0, r7
 800d438:	1820      	adds	r0, r4, r0
 800d43a:	782c      	ldrb	r4, [r5, #0]
 800d43c:	3501      	adds	r5, #1
 800d43e:	e7e9      	b.n	800d414 <_strtol_l.isra.0+0x64>
 800d440:	002e      	movs	r6, r5
 800d442:	e7bc      	b.n	800d3be <_strtol_l.isra.0+0xe>
 800d444:	2c2b      	cmp	r4, #43	; 0x2b
 800d446:	d001      	beq.n	800d44c <_strtol_l.isra.0+0x9c>
 800d448:	001e      	movs	r6, r3
 800d44a:	e7c7      	b.n	800d3dc <_strtol_l.isra.0+0x2c>
 800d44c:	1cb5      	adds	r5, r6, #2
 800d44e:	7874      	ldrb	r4, [r6, #1]
 800d450:	e7fa      	b.n	800d448 <_strtol_l.isra.0+0x98>
 800d452:	0021      	movs	r1, r4
 800d454:	3941      	subs	r1, #65	; 0x41
 800d456:	2919      	cmp	r1, #25
 800d458:	d801      	bhi.n	800d45e <_strtol_l.isra.0+0xae>
 800d45a:	3c37      	subs	r4, #55	; 0x37
 800d45c:	e7df      	b.n	800d41e <_strtol_l.isra.0+0x6e>
 800d45e:	0021      	movs	r1, r4
 800d460:	3961      	subs	r1, #97	; 0x61
 800d462:	2919      	cmp	r1, #25
 800d464:	d801      	bhi.n	800d46a <_strtol_l.isra.0+0xba>
 800d466:	3c57      	subs	r4, #87	; 0x57
 800d468:	e7d9      	b.n	800d41e <_strtol_l.isra.0+0x6e>
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	d108      	bne.n	800d480 <_strtol_l.isra.0+0xd0>
 800d46e:	9a05      	ldr	r2, [sp, #20]
 800d470:	3323      	adds	r3, #35	; 0x23
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	9b02      	ldr	r3, [sp, #8]
 800d476:	9803      	ldr	r0, [sp, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d109      	bne.n	800d490 <_strtol_l.isra.0+0xe0>
 800d47c:	b007      	add	sp, #28
 800d47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d480:	2e00      	cmp	r6, #0
 800d482:	d000      	beq.n	800d486 <_strtol_l.isra.0+0xd6>
 800d484:	4240      	negs	r0, r0
 800d486:	9a02      	ldr	r2, [sp, #8]
 800d488:	2a00      	cmp	r2, #0
 800d48a:	d0f7      	beq.n	800d47c <_strtol_l.isra.0+0xcc>
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d001      	beq.n	800d494 <_strtol_l.isra.0+0xe4>
 800d490:	1e6b      	subs	r3, r5, #1
 800d492:	9301      	str	r3, [sp, #4]
 800d494:	9b02      	ldr	r3, [sp, #8]
 800d496:	9a01      	ldr	r2, [sp, #4]
 800d498:	601a      	str	r2, [r3, #0]
 800d49a:	e7ef      	b.n	800d47c <_strtol_l.isra.0+0xcc>
 800d49c:	2430      	movs	r4, #48	; 0x30
 800d49e:	2f00      	cmp	r7, #0
 800d4a0:	d1aa      	bne.n	800d3f8 <_strtol_l.isra.0+0x48>
 800d4a2:	2708      	movs	r7, #8
 800d4a4:	e7a8      	b.n	800d3f8 <_strtol_l.isra.0+0x48>
 800d4a6:	2c30      	cmp	r4, #48	; 0x30
 800d4a8:	d09e      	beq.n	800d3e8 <_strtol_l.isra.0+0x38>
 800d4aa:	270a      	movs	r7, #10
 800d4ac:	e7a4      	b.n	800d3f8 <_strtol_l.isra.0+0x48>
 800d4ae:	46c0      	nop			; (mov r8, r8)
 800d4b0:	7fffffff 	.word	0x7fffffff

0800d4b4 <_strtol_r>:
 800d4b4:	b513      	push	{r0, r1, r4, lr}
 800d4b6:	4c05      	ldr	r4, [pc, #20]	; (800d4cc <_strtol_r+0x18>)
 800d4b8:	6824      	ldr	r4, [r4, #0]
 800d4ba:	6a24      	ldr	r4, [r4, #32]
 800d4bc:	2c00      	cmp	r4, #0
 800d4be:	d100      	bne.n	800d4c2 <_strtol_r+0xe>
 800d4c0:	4c03      	ldr	r4, [pc, #12]	; (800d4d0 <_strtol_r+0x1c>)
 800d4c2:	9400      	str	r4, [sp, #0]
 800d4c4:	f7ff ff74 	bl	800d3b0 <_strtol_l.isra.0>
 800d4c8:	bd16      	pop	{r1, r2, r4, pc}
 800d4ca:	46c0      	nop			; (mov r8, r8)
 800d4cc:	20000010 	.word	0x20000010
 800d4d0:	200000d8 	.word	0x200000d8

0800d4d4 <__submore>:
 800d4d4:	000b      	movs	r3, r1
 800d4d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d4da:	3344      	adds	r3, #68	; 0x44
 800d4dc:	000c      	movs	r4, r1
 800d4de:	429d      	cmp	r5, r3
 800d4e0:	d11c      	bne.n	800d51c <__submore+0x48>
 800d4e2:	2680      	movs	r6, #128	; 0x80
 800d4e4:	00f6      	lsls	r6, r6, #3
 800d4e6:	0031      	movs	r1, r6
 800d4e8:	f7fc ffe4 	bl	800a4b4 <_malloc_r>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d102      	bne.n	800d4f6 <__submore+0x22>
 800d4f0:	2001      	movs	r0, #1
 800d4f2:	4240      	negs	r0, r0
 800d4f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4f6:	0023      	movs	r3, r4
 800d4f8:	6360      	str	r0, [r4, #52]	; 0x34
 800d4fa:	63a6      	str	r6, [r4, #56]	; 0x38
 800d4fc:	3346      	adds	r3, #70	; 0x46
 800d4fe:	781a      	ldrb	r2, [r3, #0]
 800d500:	4b10      	ldr	r3, [pc, #64]	; (800d544 <__submore+0x70>)
 800d502:	54c2      	strb	r2, [r0, r3]
 800d504:	0023      	movs	r3, r4
 800d506:	3345      	adds	r3, #69	; 0x45
 800d508:	781a      	ldrb	r2, [r3, #0]
 800d50a:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <__submore+0x74>)
 800d50c:	54c2      	strb	r2, [r0, r3]
 800d50e:	782a      	ldrb	r2, [r5, #0]
 800d510:	4b0e      	ldr	r3, [pc, #56]	; (800d54c <__submore+0x78>)
 800d512:	54c2      	strb	r2, [r0, r3]
 800d514:	18c0      	adds	r0, r0, r3
 800d516:	6020      	str	r0, [r4, #0]
 800d518:	2000      	movs	r0, #0
 800d51a:	e7eb      	b.n	800d4f4 <__submore+0x20>
 800d51c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800d51e:	0029      	movs	r1, r5
 800d520:	0073      	lsls	r3, r6, #1
 800d522:	001a      	movs	r2, r3
 800d524:	9301      	str	r3, [sp, #4]
 800d526:	f7ff fbbc 	bl	800cca2 <_realloc_r>
 800d52a:	1e05      	subs	r5, r0, #0
 800d52c:	d0e0      	beq.n	800d4f0 <__submore+0x1c>
 800d52e:	1987      	adds	r7, r0, r6
 800d530:	0001      	movs	r1, r0
 800d532:	0032      	movs	r2, r6
 800d534:	0038      	movs	r0, r7
 800d536:	f7fc fd17 	bl	8009f68 <memcpy>
 800d53a:	9b01      	ldr	r3, [sp, #4]
 800d53c:	6027      	str	r7, [r4, #0]
 800d53e:	6365      	str	r5, [r4, #52]	; 0x34
 800d540:	63a3      	str	r3, [r4, #56]	; 0x38
 800d542:	e7e9      	b.n	800d518 <__submore+0x44>
 800d544:	000003ff 	.word	0x000003ff
 800d548:	000003fe 	.word	0x000003fe
 800d54c:	000003fd 	.word	0x000003fd

0800d550 <__ascii_wctomb>:
 800d550:	1e0b      	subs	r3, r1, #0
 800d552:	d004      	beq.n	800d55e <__ascii_wctomb+0xe>
 800d554:	2aff      	cmp	r2, #255	; 0xff
 800d556:	d904      	bls.n	800d562 <__ascii_wctomb+0x12>
 800d558:	238a      	movs	r3, #138	; 0x8a
 800d55a:	6003      	str	r3, [r0, #0]
 800d55c:	3b8b      	subs	r3, #139	; 0x8b
 800d55e:	0018      	movs	r0, r3
 800d560:	4770      	bx	lr
 800d562:	700a      	strb	r2, [r1, #0]
 800d564:	2301      	movs	r3, #1
 800d566:	e7fa      	b.n	800d55e <__ascii_wctomb+0xe>

0800d568 <_malloc_usable_size_r>:
 800d568:	1f0b      	subs	r3, r1, #4
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	1f18      	subs	r0, r3, #4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	da01      	bge.n	800d576 <_malloc_usable_size_r+0xe>
 800d572:	580b      	ldr	r3, [r1, r0]
 800d574:	18c0      	adds	r0, r0, r3
 800d576:	4770      	bx	lr

0800d578 <pow>:
 800d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57a:	2400      	movs	r4, #0
 800d57c:	b091      	sub	sp, #68	; 0x44
 800d57e:	001f      	movs	r7, r3
 800d580:	9000      	str	r0, [sp, #0]
 800d582:	9101      	str	r1, [sp, #4]
 800d584:	0016      	movs	r6, r2
 800d586:	f000 f98d 	bl	800d8a4 <__ieee754_pow>
 800d58a:	4bbe      	ldr	r3, [pc, #760]	; (800d884 <pow+0x30c>)
 800d58c:	9002      	str	r0, [sp, #8]
 800d58e:	9103      	str	r1, [sp, #12]
 800d590:	571c      	ldrsb	r4, [r3, r4]
 800d592:	1c63      	adds	r3, r4, #1
 800d594:	d100      	bne.n	800d598 <pow+0x20>
 800d596:	e0d4      	b.n	800d742 <pow+0x1ca>
 800d598:	0032      	movs	r2, r6
 800d59a:	003b      	movs	r3, r7
 800d59c:	0030      	movs	r0, r6
 800d59e:	0039      	movs	r1, r7
 800d5a0:	f7f5 f81e 	bl	80025e0 <__aeabi_dcmpun>
 800d5a4:	1e05      	subs	r5, r0, #0
 800d5a6:	d000      	beq.n	800d5aa <pow+0x32>
 800d5a8:	e0cb      	b.n	800d742 <pow+0x1ca>
 800d5aa:	9a00      	ldr	r2, [sp, #0]
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	0010      	movs	r0, r2
 800d5b0:	0019      	movs	r1, r3
 800d5b2:	f7f5 f815 	bl	80025e0 <__aeabi_dcmpun>
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	9005      	str	r0, [sp, #20]
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d01e      	beq.n	800d5fc <pow+0x84>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	0030      	movs	r0, r6
 800d5c2:	0039      	movs	r1, r7
 800d5c4:	f7f2 ff42 	bl	800044c <__aeabi_dcmpeq>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d100      	bne.n	800d5ce <pow+0x56>
 800d5cc:	e0b9      	b.n	800d742 <pow+0x1ca>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	9306      	str	r3, [sp, #24]
 800d5d2:	4bad      	ldr	r3, [pc, #692]	; (800d888 <pow+0x310>)
 800d5d4:	950e      	str	r5, [sp, #56]	; 0x38
 800d5d6:	9307      	str	r3, [sp, #28]
 800d5d8:	9a00      	ldr	r2, [sp, #0]
 800d5da:	9b01      	ldr	r3, [sp, #4]
 800d5dc:	9208      	str	r2, [sp, #32]
 800d5de:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	4baa      	ldr	r3, [pc, #680]	; (800d88c <pow+0x314>)
 800d5e4:	960a      	str	r6, [sp, #40]	; 0x28
 800d5e6:	970b      	str	r7, [sp, #44]	; 0x2c
 800d5e8:	920c      	str	r2, [sp, #48]	; 0x30
 800d5ea:	930d      	str	r3, [sp, #52]	; 0x34
 800d5ec:	2c02      	cmp	r4, #2
 800d5ee:	d033      	beq.n	800d658 <pow+0xe0>
 800d5f0:	a806      	add	r0, sp, #24
 800d5f2:	f000 ff0b 	bl	800e40c <matherr>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d125      	bne.n	800d646 <pow+0xce>
 800d5fa:	e059      	b.n	800d6b0 <pow+0x138>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	9800      	ldr	r0, [sp, #0]
 800d600:	9901      	ldr	r1, [sp, #4]
 800d602:	f7f2 ff23 	bl	800044c <__aeabi_dcmpeq>
 800d606:	2800      	cmp	r0, #0
 800d608:	d057      	beq.n	800d6ba <pow+0x142>
 800d60a:	2200      	movs	r2, #0
 800d60c:	2300      	movs	r3, #0
 800d60e:	0030      	movs	r0, r6
 800d610:	0039      	movs	r1, r7
 800d612:	f7f2 ff1b 	bl	800044c <__aeabi_dcmpeq>
 800d616:	1e05      	subs	r5, r0, #0
 800d618:	d021      	beq.n	800d65e <pow+0xe6>
 800d61a:	2301      	movs	r3, #1
 800d61c:	9306      	str	r3, [sp, #24]
 800d61e:	4b9a      	ldr	r3, [pc, #616]	; (800d888 <pow+0x310>)
 800d620:	960a      	str	r6, [sp, #40]	; 0x28
 800d622:	970b      	str	r7, [sp, #44]	; 0x2c
 800d624:	9307      	str	r3, [sp, #28]
 800d626:	9b05      	ldr	r3, [sp, #20]
 800d628:	930e      	str	r3, [sp, #56]	; 0x38
 800d62a:	9a00      	ldr	r2, [sp, #0]
 800d62c:	9b01      	ldr	r3, [sp, #4]
 800d62e:	9208      	str	r2, [sp, #32]
 800d630:	9309      	str	r3, [sp, #36]	; 0x24
 800d632:	2200      	movs	r2, #0
 800d634:	2300      	movs	r3, #0
 800d636:	920c      	str	r2, [sp, #48]	; 0x30
 800d638:	930d      	str	r3, [sp, #52]	; 0x34
 800d63a:	2c00      	cmp	r4, #0
 800d63c:	d0d8      	beq.n	800d5f0 <pow+0x78>
 800d63e:	2200      	movs	r2, #0
 800d640:	4b92      	ldr	r3, [pc, #584]	; (800d88c <pow+0x314>)
 800d642:	920c      	str	r2, [sp, #48]	; 0x30
 800d644:	930d      	str	r3, [sp, #52]	; 0x34
 800d646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d004      	beq.n	800d658 <pow+0xe0>
 800d64e:	f7fc fc61 	bl	8009f14 <__errno>
 800d652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	6003      	str	r3, [r0, #0]
 800d658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d65a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d65c:	e06f      	b.n	800d73e <pow+0x1c6>
 800d65e:	0030      	movs	r0, r6
 800d660:	0039      	movs	r1, r7
 800d662:	f000 fecb 	bl	800e3fc <finite>
 800d666:	2800      	cmp	r0, #0
 800d668:	d06b      	beq.n	800d742 <pow+0x1ca>
 800d66a:	2200      	movs	r2, #0
 800d66c:	2300      	movs	r3, #0
 800d66e:	0030      	movs	r0, r6
 800d670:	0039      	movs	r1, r7
 800d672:	f7f2 fef1 	bl	8000458 <__aeabi_dcmplt>
 800d676:	2800      	cmp	r0, #0
 800d678:	d063      	beq.n	800d742 <pow+0x1ca>
 800d67a:	2301      	movs	r3, #1
 800d67c:	9306      	str	r3, [sp, #24]
 800d67e:	4b82      	ldr	r3, [pc, #520]	; (800d888 <pow+0x310>)
 800d680:	950e      	str	r5, [sp, #56]	; 0x38
 800d682:	9307      	str	r3, [sp, #28]
 800d684:	9b00      	ldr	r3, [sp, #0]
 800d686:	9c01      	ldr	r4, [sp, #4]
 800d688:	9308      	str	r3, [sp, #32]
 800d68a:	9409      	str	r4, [sp, #36]	; 0x24
 800d68c:	4b7d      	ldr	r3, [pc, #500]	; (800d884 <pow+0x30c>)
 800d68e:	960a      	str	r6, [sp, #40]	; 0x28
 800d690:	970b      	str	r7, [sp, #44]	; 0x2c
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	b25b      	sxtb	r3, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	d104      	bne.n	800d6a4 <pow+0x12c>
 800d69a:	2300      	movs	r3, #0
 800d69c:	2400      	movs	r4, #0
 800d69e:	930c      	str	r3, [sp, #48]	; 0x30
 800d6a0:	940d      	str	r4, [sp, #52]	; 0x34
 800d6a2:	e7a5      	b.n	800d5f0 <pow+0x78>
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	497a      	ldr	r1, [pc, #488]	; (800d890 <pow+0x318>)
 800d6a8:	900c      	str	r0, [sp, #48]	; 0x30
 800d6aa:	910d      	str	r1, [sp, #52]	; 0x34
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d19f      	bne.n	800d5f0 <pow+0x78>
 800d6b0:	f7fc fc30 	bl	8009f14 <__errno>
 800d6b4:	2321      	movs	r3, #33	; 0x21
 800d6b6:	6003      	str	r3, [r0, #0]
 800d6b8:	e7c5      	b.n	800d646 <pow+0xce>
 800d6ba:	9802      	ldr	r0, [sp, #8]
 800d6bc:	9903      	ldr	r1, [sp, #12]
 800d6be:	f000 fe9d 	bl	800e3fc <finite>
 800d6c2:	9005      	str	r0, [sp, #20]
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d000      	beq.n	800d6ca <pow+0x152>
 800d6c8:	e0a5      	b.n	800d816 <pow+0x29e>
 800d6ca:	9800      	ldr	r0, [sp, #0]
 800d6cc:	9901      	ldr	r1, [sp, #4]
 800d6ce:	f000 fe95 	bl	800e3fc <finite>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d100      	bne.n	800d6d8 <pow+0x160>
 800d6d6:	e09e      	b.n	800d816 <pow+0x29e>
 800d6d8:	0030      	movs	r0, r6
 800d6da:	0039      	movs	r1, r7
 800d6dc:	f000 fe8e 	bl	800e3fc <finite>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d100      	bne.n	800d6e6 <pow+0x16e>
 800d6e4:	e097      	b.n	800d816 <pow+0x29e>
 800d6e6:	2500      	movs	r5, #0
 800d6e8:	4b66      	ldr	r3, [pc, #408]	; (800d884 <pow+0x30c>)
 800d6ea:	ac06      	add	r4, sp, #24
 800d6ec:	575d      	ldrsb	r5, [r3, r5]
 800d6ee:	9a02      	ldr	r2, [sp, #8]
 800d6f0:	9b03      	ldr	r3, [sp, #12]
 800d6f2:	0019      	movs	r1, r3
 800d6f4:	0010      	movs	r0, r2
 800d6f6:	f7f4 ff73 	bl	80025e0 <__aeabi_dcmpun>
 800d6fa:	4b63      	ldr	r3, [pc, #396]	; (800d888 <pow+0x310>)
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d031      	beq.n	800d764 <pow+0x1ec>
 800d700:	2201      	movs	r2, #1
 800d702:	6063      	str	r3, [r4, #4]
 800d704:	9b05      	ldr	r3, [sp, #20]
 800d706:	9206      	str	r2, [sp, #24]
 800d708:	6223      	str	r3, [r4, #32]
 800d70a:	6126      	str	r6, [r4, #16]
 800d70c:	6167      	str	r7, [r4, #20]
 800d70e:	9a00      	ldr	r2, [sp, #0]
 800d710:	9b01      	ldr	r3, [sp, #4]
 800d712:	60a2      	str	r2, [r4, #8]
 800d714:	60e3      	str	r3, [r4, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	2300      	movs	r3, #0
 800d71a:	2d00      	cmp	r5, #0
 800d71c:	d115      	bne.n	800d74a <pow+0x1d2>
 800d71e:	61a2      	str	r2, [r4, #24]
 800d720:	61e3      	str	r3, [r4, #28]
 800d722:	0020      	movs	r0, r4
 800d724:	f000 fe72 	bl	800e40c <matherr>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d016      	beq.n	800d75a <pow+0x1e2>
 800d72c:	6a23      	ldr	r3, [r4, #32]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d003      	beq.n	800d73a <pow+0x1c2>
 800d732:	f7fc fbef 	bl	8009f14 <__errno>
 800d736:	6a23      	ldr	r3, [r4, #32]
 800d738:	6003      	str	r3, [r0, #0]
 800d73a:	69a3      	ldr	r3, [r4, #24]
 800d73c:	69e4      	ldr	r4, [r4, #28]
 800d73e:	9302      	str	r3, [sp, #8]
 800d740:	9403      	str	r4, [sp, #12]
 800d742:	9802      	ldr	r0, [sp, #8]
 800d744:	9903      	ldr	r1, [sp, #12]
 800d746:	b011      	add	sp, #68	; 0x44
 800d748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d74a:	0010      	movs	r0, r2
 800d74c:	0019      	movs	r1, r3
 800d74e:	f7f3 fd83 	bl	8001258 <__aeabi_ddiv>
 800d752:	61a0      	str	r0, [r4, #24]
 800d754:	61e1      	str	r1, [r4, #28]
 800d756:	2d02      	cmp	r5, #2
 800d758:	d1e3      	bne.n	800d722 <pow+0x1aa>
 800d75a:	f7fc fbdb 	bl	8009f14 <__errno>
 800d75e:	2321      	movs	r3, #33	; 0x21
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	e7e3      	b.n	800d72c <pow+0x1b4>
 800d764:	2203      	movs	r2, #3
 800d766:	6126      	str	r6, [r4, #16]
 800d768:	6167      	str	r7, [r4, #20]
 800d76a:	9206      	str	r2, [sp, #24]
 800d76c:	6063      	str	r3, [r4, #4]
 800d76e:	6220      	str	r0, [r4, #32]
 800d770:	9a00      	ldr	r2, [sp, #0]
 800d772:	9b01      	ldr	r3, [sp, #4]
 800d774:	0030      	movs	r0, r6
 800d776:	60a2      	str	r2, [r4, #8]
 800d778:	60e3      	str	r3, [r4, #12]
 800d77a:	0039      	movs	r1, r7
 800d77c:	2200      	movs	r2, #0
 800d77e:	4b45      	ldr	r3, [pc, #276]	; (800d894 <pow+0x31c>)
 800d780:	f7f4 f974 	bl	8001a6c <__aeabi_dmul>
 800d784:	0006      	movs	r6, r0
 800d786:	000f      	movs	r7, r1
 800d788:	2d00      	cmp	r5, #0
 800d78a:	d124      	bne.n	800d7d6 <pow+0x25e>
 800d78c:	9800      	ldr	r0, [sp, #0]
 800d78e:	9901      	ldr	r1, [sp, #4]
 800d790:	22e0      	movs	r2, #224	; 0xe0
 800d792:	4b41      	ldr	r3, [pc, #260]	; (800d898 <pow+0x320>)
 800d794:	0612      	lsls	r2, r2, #24
 800d796:	61a2      	str	r2, [r4, #24]
 800d798:	61e3      	str	r3, [r4, #28]
 800d79a:	2200      	movs	r2, #0
 800d79c:	2300      	movs	r3, #0
 800d79e:	f7f2 fe5b 	bl	8000458 <__aeabi_dcmplt>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d030      	beq.n	800d808 <pow+0x290>
 800d7a6:	0030      	movs	r0, r6
 800d7a8:	0039      	movs	r1, r7
 800d7aa:	f000 fe37 	bl	800e41c <rint>
 800d7ae:	0032      	movs	r2, r6
 800d7b0:	003b      	movs	r3, r7
 800d7b2:	f7f2 fe4b 	bl	800044c <__aeabi_dcmpeq>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d104      	bne.n	800d7c4 <pow+0x24c>
 800d7ba:	22e0      	movs	r2, #224	; 0xe0
 800d7bc:	4b37      	ldr	r3, [pc, #220]	; (800d89c <pow+0x324>)
 800d7be:	0612      	lsls	r2, r2, #24
 800d7c0:	61a2      	str	r2, [r4, #24]
 800d7c2:	61e3      	str	r3, [r4, #28]
 800d7c4:	4b2f      	ldr	r3, [pc, #188]	; (800d884 <pow+0x30c>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	b25b      	sxtb	r3, r3
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d11c      	bne.n	800d808 <pow+0x290>
 800d7ce:	f7fc fba1 	bl	8009f14 <__errno>
 800d7d2:	2322      	movs	r3, #34	; 0x22
 800d7d4:	e7c4      	b.n	800d760 <pow+0x1e8>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	9800      	ldr	r0, [sp, #0]
 800d7da:	9901      	ldr	r1, [sp, #4]
 800d7dc:	4b30      	ldr	r3, [pc, #192]	; (800d8a0 <pow+0x328>)
 800d7de:	61a2      	str	r2, [r4, #24]
 800d7e0:	61e3      	str	r3, [r4, #28]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f7f2 fe37 	bl	8000458 <__aeabi_dcmplt>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d0ea      	beq.n	800d7c4 <pow+0x24c>
 800d7ee:	0030      	movs	r0, r6
 800d7f0:	0039      	movs	r1, r7
 800d7f2:	f000 fe13 	bl	800e41c <rint>
 800d7f6:	0032      	movs	r2, r6
 800d7f8:	003b      	movs	r3, r7
 800d7fa:	f7f2 fe27 	bl	800044c <__aeabi_dcmpeq>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d1e0      	bne.n	800d7c4 <pow+0x24c>
 800d802:	2200      	movs	r2, #0
 800d804:	4b22      	ldr	r3, [pc, #136]	; (800d890 <pow+0x318>)
 800d806:	e7db      	b.n	800d7c0 <pow+0x248>
 800d808:	0020      	movs	r0, r4
 800d80a:	f000 fdff 	bl	800e40c <matherr>
 800d80e:	2800      	cmp	r0, #0
 800d810:	d000      	beq.n	800d814 <pow+0x29c>
 800d812:	e78b      	b.n	800d72c <pow+0x1b4>
 800d814:	e7db      	b.n	800d7ce <pow+0x256>
 800d816:	2200      	movs	r2, #0
 800d818:	9802      	ldr	r0, [sp, #8]
 800d81a:	9903      	ldr	r1, [sp, #12]
 800d81c:	2300      	movs	r3, #0
 800d81e:	f7f2 fe15 	bl	800044c <__aeabi_dcmpeq>
 800d822:	2800      	cmp	r0, #0
 800d824:	d100      	bne.n	800d828 <pow+0x2b0>
 800d826:	e78c      	b.n	800d742 <pow+0x1ca>
 800d828:	9800      	ldr	r0, [sp, #0]
 800d82a:	9901      	ldr	r1, [sp, #4]
 800d82c:	f000 fde6 	bl	800e3fc <finite>
 800d830:	2800      	cmp	r0, #0
 800d832:	d100      	bne.n	800d836 <pow+0x2be>
 800d834:	e785      	b.n	800d742 <pow+0x1ca>
 800d836:	0030      	movs	r0, r6
 800d838:	0039      	movs	r1, r7
 800d83a:	f000 fddf 	bl	800e3fc <finite>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d100      	bne.n	800d844 <pow+0x2cc>
 800d842:	e77e      	b.n	800d742 <pow+0x1ca>
 800d844:	2304      	movs	r3, #4
 800d846:	9306      	str	r3, [sp, #24]
 800d848:	4b0f      	ldr	r3, [pc, #60]	; (800d888 <pow+0x310>)
 800d84a:	960a      	str	r6, [sp, #40]	; 0x28
 800d84c:	970b      	str	r7, [sp, #44]	; 0x2c
 800d84e:	9307      	str	r3, [sp, #28]
 800d850:	2300      	movs	r3, #0
 800d852:	930e      	str	r3, [sp, #56]	; 0x38
 800d854:	9b00      	ldr	r3, [sp, #0]
 800d856:	9c01      	ldr	r4, [sp, #4]
 800d858:	9308      	str	r3, [sp, #32]
 800d85a:	9409      	str	r4, [sp, #36]	; 0x24
 800d85c:	2300      	movs	r3, #0
 800d85e:	2400      	movs	r4, #0
 800d860:	930c      	str	r3, [sp, #48]	; 0x30
 800d862:	940d      	str	r4, [sp, #52]	; 0x34
 800d864:	4b07      	ldr	r3, [pc, #28]	; (800d884 <pow+0x30c>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d103      	bne.n	800d876 <pow+0x2fe>
 800d86e:	f7fc fb51 	bl	8009f14 <__errno>
 800d872:	2322      	movs	r3, #34	; 0x22
 800d874:	e71f      	b.n	800d6b6 <pow+0x13e>
 800d876:	a806      	add	r0, sp, #24
 800d878:	f000 fdc8 	bl	800e40c <matherr>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d000      	beq.n	800d882 <pow+0x30a>
 800d880:	e6e1      	b.n	800d646 <pow+0xce>
 800d882:	e7f4      	b.n	800d86e <pow+0x2f6>
 800d884:	20000244 	.word	0x20000244
 800d888:	0800ed9c 	.word	0x0800ed9c
 800d88c:	3ff00000 	.word	0x3ff00000
 800d890:	fff00000 	.word	0xfff00000
 800d894:	3fe00000 	.word	0x3fe00000
 800d898:	47efffff 	.word	0x47efffff
 800d89c:	c7efffff 	.word	0xc7efffff
 800d8a0:	7ff00000 	.word	0x7ff00000

0800d8a4 <__ieee754_pow>:
 800d8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8a6:	b095      	sub	sp, #84	; 0x54
 800d8a8:	9202      	str	r2, [sp, #8]
 800d8aa:	9303      	str	r3, [sp, #12]
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	000e      	movs	r6, r1
 800d8b0:	9902      	ldr	r1, [sp, #8]
 800d8b2:	005d      	lsls	r5, r3, #1
 800d8b4:	9304      	str	r3, [sp, #16]
 800d8b6:	000b      	movs	r3, r1
 800d8b8:	086d      	lsrs	r5, r5, #1
 800d8ba:	0007      	movs	r7, r0
 800d8bc:	432b      	orrs	r3, r5
 800d8be:	d101      	bne.n	800d8c4 <__ieee754_pow+0x20>
 800d8c0:	f000 fcad 	bl	800e21e <__ieee754_pow+0x97a>
 800d8c4:	4b7e      	ldr	r3, [pc, #504]	; (800dac0 <__ieee754_pow+0x21c>)
 800d8c6:	0074      	lsls	r4, r6, #1
 800d8c8:	9608      	str	r6, [sp, #32]
 800d8ca:	9000      	str	r0, [sp, #0]
 800d8cc:	0864      	lsrs	r4, r4, #1
 800d8ce:	469c      	mov	ip, r3
 800d8d0:	429c      	cmp	r4, r3
 800d8d2:	dc0b      	bgt.n	800d8ec <__ieee754_pow+0x48>
 800d8d4:	d104      	bne.n	800d8e0 <__ieee754_pow+0x3c>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d108      	bne.n	800d8ec <__ieee754_pow+0x48>
 800d8da:	42a5      	cmp	r5, r4
 800d8dc:	dc0c      	bgt.n	800d8f8 <__ieee754_pow+0x54>
 800d8de:	e001      	b.n	800d8e4 <__ieee754_pow+0x40>
 800d8e0:	429d      	cmp	r5, r3
 800d8e2:	dc03      	bgt.n	800d8ec <__ieee754_pow+0x48>
 800d8e4:	4565      	cmp	r5, ip
 800d8e6:	d10d      	bne.n	800d904 <__ieee754_pow+0x60>
 800d8e8:	2900      	cmp	r1, #0
 800d8ea:	d00b      	beq.n	800d904 <__ieee754_pow+0x60>
 800d8ec:	4b75      	ldr	r3, [pc, #468]	; (800dac4 <__ieee754_pow+0x220>)
 800d8ee:	18e4      	adds	r4, r4, r3
 800d8f0:	4327      	orrs	r7, r4
 800d8f2:	d101      	bne.n	800d8f8 <__ieee754_pow+0x54>
 800d8f4:	f000 fc93 	bl	800e21e <__ieee754_pow+0x97a>
 800d8f8:	4873      	ldr	r0, [pc, #460]	; (800dac8 <__ieee754_pow+0x224>)
 800d8fa:	f000 fd89 	bl	800e410 <nan>
 800d8fe:	9000      	str	r0, [sp, #0]
 800d900:	9101      	str	r1, [sp, #4]
 800d902:	e061      	b.n	800d9c8 <__ieee754_pow+0x124>
 800d904:	2300      	movs	r3, #0
 800d906:	9306      	str	r3, [sp, #24]
 800d908:	2e00      	cmp	r6, #0
 800d90a:	da17      	bge.n	800d93c <__ieee754_pow+0x98>
 800d90c:	4a6f      	ldr	r2, [pc, #444]	; (800dacc <__ieee754_pow+0x228>)
 800d90e:	4295      	cmp	r5, r2
 800d910:	dc4d      	bgt.n	800d9ae <__ieee754_pow+0x10a>
 800d912:	4a6f      	ldr	r2, [pc, #444]	; (800dad0 <__ieee754_pow+0x22c>)
 800d914:	4295      	cmp	r5, r2
 800d916:	dd11      	ble.n	800d93c <__ieee754_pow+0x98>
 800d918:	4b6e      	ldr	r3, [pc, #440]	; (800dad4 <__ieee754_pow+0x230>)
 800d91a:	152a      	asrs	r2, r5, #20
 800d91c:	18d2      	adds	r2, r2, r3
 800d91e:	2a14      	cmp	r2, #20
 800d920:	dd25      	ble.n	800d96e <__ieee754_pow+0xca>
 800d922:	2034      	movs	r0, #52	; 0x34
 800d924:	1a82      	subs	r2, r0, r2
 800d926:	9802      	ldr	r0, [sp, #8]
 800d928:	40d0      	lsrs	r0, r2
 800d92a:	0003      	movs	r3, r0
 800d92c:	4093      	lsls	r3, r2
 800d92e:	428b      	cmp	r3, r1
 800d930:	d104      	bne.n	800d93c <__ieee754_pow+0x98>
 800d932:	2201      	movs	r2, #1
 800d934:	4010      	ands	r0, r2
 800d936:	1892      	adds	r2, r2, r2
 800d938:	1a13      	subs	r3, r2, r0
 800d93a:	9306      	str	r3, [sp, #24]
 800d93c:	2900      	cmp	r1, #0
 800d93e:	d15e      	bne.n	800d9fe <__ieee754_pow+0x15a>
 800d940:	4565      	cmp	r5, ip
 800d942:	d123      	bne.n	800d98c <__ieee754_pow+0xe8>
 800d944:	4b5f      	ldr	r3, [pc, #380]	; (800dac4 <__ieee754_pow+0x220>)
 800d946:	18e3      	adds	r3, r4, r3
 800d948:	431f      	orrs	r7, r3
 800d94a:	d101      	bne.n	800d950 <__ieee754_pow+0xac>
 800d94c:	f000 fc67 	bl	800e21e <__ieee754_pow+0x97a>
 800d950:	4b5f      	ldr	r3, [pc, #380]	; (800dad0 <__ieee754_pow+0x22c>)
 800d952:	429c      	cmp	r4, r3
 800d954:	dd2d      	ble.n	800d9b2 <__ieee754_pow+0x10e>
 800d956:	9b02      	ldr	r3, [sp, #8]
 800d958:	9c03      	ldr	r4, [sp, #12]
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	9401      	str	r4, [sp, #4]
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	2b00      	cmp	r3, #0
 800d962:	da31      	bge.n	800d9c8 <__ieee754_pow+0x124>
 800d964:	2300      	movs	r3, #0
 800d966:	2400      	movs	r4, #0
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	9401      	str	r4, [sp, #4]
 800d96c:	e02c      	b.n	800d9c8 <__ieee754_pow+0x124>
 800d96e:	2900      	cmp	r1, #0
 800d970:	d145      	bne.n	800d9fe <__ieee754_pow+0x15a>
 800d972:	2314      	movs	r3, #20
 800d974:	1a9a      	subs	r2, r3, r2
 800d976:	002b      	movs	r3, r5
 800d978:	4113      	asrs	r3, r2
 800d97a:	0019      	movs	r1, r3
 800d97c:	4091      	lsls	r1, r2
 800d97e:	42a9      	cmp	r1, r5
 800d980:	d104      	bne.n	800d98c <__ieee754_pow+0xe8>
 800d982:	2201      	movs	r2, #1
 800d984:	4013      	ands	r3, r2
 800d986:	1892      	adds	r2, r2, r2
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	9306      	str	r3, [sp, #24]
 800d98c:	4b52      	ldr	r3, [pc, #328]	; (800dad8 <__ieee754_pow+0x234>)
 800d98e:	429d      	cmp	r5, r3
 800d990:	d11e      	bne.n	800d9d0 <__ieee754_pow+0x12c>
 800d992:	0038      	movs	r0, r7
 800d994:	0031      	movs	r1, r6
 800d996:	9b04      	ldr	r3, [sp, #16]
 800d998:	9000      	str	r0, [sp, #0]
 800d99a:	9101      	str	r1, [sp, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	da13      	bge.n	800d9c8 <__ieee754_pow+0x124>
 800d9a0:	003a      	movs	r2, r7
 800d9a2:	0033      	movs	r3, r6
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	494c      	ldr	r1, [pc, #304]	; (800dad8 <__ieee754_pow+0x234>)
 800d9a8:	f7f3 fc56 	bl	8001258 <__aeabi_ddiv>
 800d9ac:	e7a7      	b.n	800d8fe <__ieee754_pow+0x5a>
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	e7c3      	b.n	800d93a <__ieee754_pow+0x96>
 800d9b2:	9b04      	ldr	r3, [sp, #16]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	dad5      	bge.n	800d964 <__ieee754_pow+0xc0>
 800d9b8:	2280      	movs	r2, #128	; 0x80
 800d9ba:	0612      	lsls	r2, r2, #24
 800d9bc:	4694      	mov	ip, r2
 800d9be:	9b02      	ldr	r3, [sp, #8]
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	9b03      	ldr	r3, [sp, #12]
 800d9c4:	4463      	add	r3, ip
 800d9c6:	9301      	str	r3, [sp, #4]
 800d9c8:	9800      	ldr	r0, [sp, #0]
 800d9ca:	9901      	ldr	r1, [sp, #4]
 800d9cc:	b015      	add	sp, #84	; 0x54
 800d9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9d0:	2380      	movs	r3, #128	; 0x80
 800d9d2:	9a04      	ldr	r2, [sp, #16]
 800d9d4:	05db      	lsls	r3, r3, #23
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d106      	bne.n	800d9e8 <__ieee754_pow+0x144>
 800d9da:	003a      	movs	r2, r7
 800d9dc:	0033      	movs	r3, r6
 800d9de:	0038      	movs	r0, r7
 800d9e0:	0031      	movs	r1, r6
 800d9e2:	f7f4 f843 	bl	8001a6c <__aeabi_dmul>
 800d9e6:	e78a      	b.n	800d8fe <__ieee754_pow+0x5a>
 800d9e8:	4b3c      	ldr	r3, [pc, #240]	; (800dadc <__ieee754_pow+0x238>)
 800d9ea:	9a04      	ldr	r2, [sp, #16]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d106      	bne.n	800d9fe <__ieee754_pow+0x15a>
 800d9f0:	2e00      	cmp	r6, #0
 800d9f2:	db04      	blt.n	800d9fe <__ieee754_pow+0x15a>
 800d9f4:	0038      	movs	r0, r7
 800d9f6:	0031      	movs	r1, r6
 800d9f8:	f000 fc4a 	bl	800e290 <__ieee754_sqrt>
 800d9fc:	e77f      	b.n	800d8fe <__ieee754_pow+0x5a>
 800d9fe:	0038      	movs	r0, r7
 800da00:	0031      	movs	r1, r6
 800da02:	f000 fcf7 	bl	800e3f4 <fabs>
 800da06:	9000      	str	r0, [sp, #0]
 800da08:	9101      	str	r1, [sp, #4]
 800da0a:	2f00      	cmp	r7, #0
 800da0c:	d12e      	bne.n	800da6c <__ieee754_pow+0x1c8>
 800da0e:	2c00      	cmp	r4, #0
 800da10:	d004      	beq.n	800da1c <__ieee754_pow+0x178>
 800da12:	4a31      	ldr	r2, [pc, #196]	; (800dad8 <__ieee754_pow+0x234>)
 800da14:	00b3      	lsls	r3, r6, #2
 800da16:	089b      	lsrs	r3, r3, #2
 800da18:	4293      	cmp	r3, r2
 800da1a:	d127      	bne.n	800da6c <__ieee754_pow+0x1c8>
 800da1c:	9b04      	ldr	r3, [sp, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	da07      	bge.n	800da32 <__ieee754_pow+0x18e>
 800da22:	9a00      	ldr	r2, [sp, #0]
 800da24:	9b01      	ldr	r3, [sp, #4]
 800da26:	2000      	movs	r0, #0
 800da28:	492b      	ldr	r1, [pc, #172]	; (800dad8 <__ieee754_pow+0x234>)
 800da2a:	f7f3 fc15 	bl	8001258 <__aeabi_ddiv>
 800da2e:	9000      	str	r0, [sp, #0]
 800da30:	9101      	str	r1, [sp, #4]
 800da32:	9b08      	ldr	r3, [sp, #32]
 800da34:	2b00      	cmp	r3, #0
 800da36:	dac7      	bge.n	800d9c8 <__ieee754_pow+0x124>
 800da38:	4b22      	ldr	r3, [pc, #136]	; (800dac4 <__ieee754_pow+0x220>)
 800da3a:	18e4      	adds	r4, r4, r3
 800da3c:	9b06      	ldr	r3, [sp, #24]
 800da3e:	431c      	orrs	r4, r3
 800da40:	d108      	bne.n	800da54 <__ieee754_pow+0x1b0>
 800da42:	9a00      	ldr	r2, [sp, #0]
 800da44:	9b01      	ldr	r3, [sp, #4]
 800da46:	0010      	movs	r0, r2
 800da48:	0019      	movs	r1, r3
 800da4a:	f7f4 fa81 	bl	8001f50 <__aeabi_dsub>
 800da4e:	0002      	movs	r2, r0
 800da50:	000b      	movs	r3, r1
 800da52:	e7a9      	b.n	800d9a8 <__ieee754_pow+0x104>
 800da54:	9b06      	ldr	r3, [sp, #24]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d1b6      	bne.n	800d9c8 <__ieee754_pow+0x124>
 800da5a:	9800      	ldr	r0, [sp, #0]
 800da5c:	2180      	movs	r1, #128	; 0x80
 800da5e:	0002      	movs	r2, r0
 800da60:	9801      	ldr	r0, [sp, #4]
 800da62:	0609      	lsls	r1, r1, #24
 800da64:	1843      	adds	r3, r0, r1
 800da66:	9200      	str	r2, [sp, #0]
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	e7ad      	b.n	800d9c8 <__ieee754_pow+0x124>
 800da6c:	0ff3      	lsrs	r3, r6, #31
 800da6e:	3b01      	subs	r3, #1
 800da70:	9310      	str	r3, [sp, #64]	; 0x40
 800da72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800da74:	9b06      	ldr	r3, [sp, #24]
 800da76:	4313      	orrs	r3, r2
 800da78:	d104      	bne.n	800da84 <__ieee754_pow+0x1e0>
 800da7a:	003a      	movs	r2, r7
 800da7c:	0033      	movs	r3, r6
 800da7e:	0038      	movs	r0, r7
 800da80:	0031      	movs	r1, r6
 800da82:	e7e2      	b.n	800da4a <__ieee754_pow+0x1a6>
 800da84:	4b16      	ldr	r3, [pc, #88]	; (800dae0 <__ieee754_pow+0x23c>)
 800da86:	429d      	cmp	r5, r3
 800da88:	dc00      	bgt.n	800da8c <__ieee754_pow+0x1e8>
 800da8a:	e0f7      	b.n	800dc7c <__ieee754_pow+0x3d8>
 800da8c:	4b15      	ldr	r3, [pc, #84]	; (800dae4 <__ieee754_pow+0x240>)
 800da8e:	429d      	cmp	r5, r3
 800da90:	dd0b      	ble.n	800daaa <__ieee754_pow+0x206>
 800da92:	4b0f      	ldr	r3, [pc, #60]	; (800dad0 <__ieee754_pow+0x22c>)
 800da94:	429c      	cmp	r4, r3
 800da96:	dc0e      	bgt.n	800dab6 <__ieee754_pow+0x212>
 800da98:	9b04      	ldr	r3, [sp, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	db00      	blt.n	800daa0 <__ieee754_pow+0x1fc>
 800da9e:	e761      	b.n	800d964 <__ieee754_pow+0xc0>
 800daa0:	4a11      	ldr	r2, [pc, #68]	; (800dae8 <__ieee754_pow+0x244>)
 800daa2:	4b12      	ldr	r3, [pc, #72]	; (800daec <__ieee754_pow+0x248>)
 800daa4:	0010      	movs	r0, r2
 800daa6:	0019      	movs	r1, r3
 800daa8:	e79b      	b.n	800d9e2 <__ieee754_pow+0x13e>
 800daaa:	4b11      	ldr	r3, [pc, #68]	; (800daf0 <__ieee754_pow+0x24c>)
 800daac:	429c      	cmp	r4, r3
 800daae:	ddf3      	ble.n	800da98 <__ieee754_pow+0x1f4>
 800dab0:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <__ieee754_pow+0x234>)
 800dab2:	429c      	cmp	r4, r3
 800dab4:	dd1e      	ble.n	800daf4 <__ieee754_pow+0x250>
 800dab6:	9b04      	ldr	r3, [sp, #16]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	dcf1      	bgt.n	800daa0 <__ieee754_pow+0x1fc>
 800dabc:	e752      	b.n	800d964 <__ieee754_pow+0xc0>
 800dabe:	46c0      	nop			; (mov r8, r8)
 800dac0:	7ff00000 	.word	0x7ff00000
 800dac4:	c0100000 	.word	0xc0100000
 800dac8:	0800ec09 	.word	0x0800ec09
 800dacc:	433fffff 	.word	0x433fffff
 800dad0:	3fefffff 	.word	0x3fefffff
 800dad4:	fffffc01 	.word	0xfffffc01
 800dad8:	3ff00000 	.word	0x3ff00000
 800dadc:	3fe00000 	.word	0x3fe00000
 800dae0:	41e00000 	.word	0x41e00000
 800dae4:	43f00000 	.word	0x43f00000
 800dae8:	8800759c 	.word	0x8800759c
 800daec:	7e37e43c 	.word	0x7e37e43c
 800daf0:	3feffffe 	.word	0x3feffffe
 800daf4:	2200      	movs	r2, #0
 800daf6:	9800      	ldr	r0, [sp, #0]
 800daf8:	9901      	ldr	r1, [sp, #4]
 800dafa:	4b52      	ldr	r3, [pc, #328]	; (800dc44 <__ieee754_pow+0x3a0>)
 800dafc:	f7f4 fa28 	bl	8001f50 <__aeabi_dsub>
 800db00:	22c0      	movs	r2, #192	; 0xc0
 800db02:	4b51      	ldr	r3, [pc, #324]	; (800dc48 <__ieee754_pow+0x3a4>)
 800db04:	05d2      	lsls	r2, r2, #23
 800db06:	0006      	movs	r6, r0
 800db08:	000f      	movs	r7, r1
 800db0a:	f7f3 ffaf 	bl	8001a6c <__aeabi_dmul>
 800db0e:	4a4f      	ldr	r2, [pc, #316]	; (800dc4c <__ieee754_pow+0x3a8>)
 800db10:	9000      	str	r0, [sp, #0]
 800db12:	9101      	str	r1, [sp, #4]
 800db14:	4b4e      	ldr	r3, [pc, #312]	; (800dc50 <__ieee754_pow+0x3ac>)
 800db16:	0030      	movs	r0, r6
 800db18:	0039      	movs	r1, r7
 800db1a:	f7f3 ffa7 	bl	8001a6c <__aeabi_dmul>
 800db1e:	2200      	movs	r2, #0
 800db20:	9004      	str	r0, [sp, #16]
 800db22:	9105      	str	r1, [sp, #20]
 800db24:	4b4b      	ldr	r3, [pc, #300]	; (800dc54 <__ieee754_pow+0x3b0>)
 800db26:	0030      	movs	r0, r6
 800db28:	0039      	movs	r1, r7
 800db2a:	f7f3 ff9f 	bl	8001a6c <__aeabi_dmul>
 800db2e:	0002      	movs	r2, r0
 800db30:	000b      	movs	r3, r1
 800db32:	4849      	ldr	r0, [pc, #292]	; (800dc58 <__ieee754_pow+0x3b4>)
 800db34:	4949      	ldr	r1, [pc, #292]	; (800dc5c <__ieee754_pow+0x3b8>)
 800db36:	f7f4 fa0b 	bl	8001f50 <__aeabi_dsub>
 800db3a:	0032      	movs	r2, r6
 800db3c:	003b      	movs	r3, r7
 800db3e:	f7f3 ff95 	bl	8001a6c <__aeabi_dmul>
 800db42:	0002      	movs	r2, r0
 800db44:	000b      	movs	r3, r1
 800db46:	2000      	movs	r0, #0
 800db48:	4945      	ldr	r1, [pc, #276]	; (800dc60 <__ieee754_pow+0x3bc>)
 800db4a:	f7f4 fa01 	bl	8001f50 <__aeabi_dsub>
 800db4e:	0032      	movs	r2, r6
 800db50:	0004      	movs	r4, r0
 800db52:	000d      	movs	r5, r1
 800db54:	003b      	movs	r3, r7
 800db56:	0030      	movs	r0, r6
 800db58:	0039      	movs	r1, r7
 800db5a:	f7f3 ff87 	bl	8001a6c <__aeabi_dmul>
 800db5e:	0002      	movs	r2, r0
 800db60:	000b      	movs	r3, r1
 800db62:	0020      	movs	r0, r4
 800db64:	0029      	movs	r1, r5
 800db66:	f7f3 ff81 	bl	8001a6c <__aeabi_dmul>
 800db6a:	4a3e      	ldr	r2, [pc, #248]	; (800dc64 <__ieee754_pow+0x3c0>)
 800db6c:	4b36      	ldr	r3, [pc, #216]	; (800dc48 <__ieee754_pow+0x3a4>)
 800db6e:	f7f3 ff7d 	bl	8001a6c <__aeabi_dmul>
 800db72:	0002      	movs	r2, r0
 800db74:	000b      	movs	r3, r1
 800db76:	9804      	ldr	r0, [sp, #16]
 800db78:	9905      	ldr	r1, [sp, #20]
 800db7a:	f7f4 f9e9 	bl	8001f50 <__aeabi_dsub>
 800db7e:	0002      	movs	r2, r0
 800db80:	000b      	movs	r3, r1
 800db82:	0004      	movs	r4, r0
 800db84:	000d      	movs	r5, r1
 800db86:	9800      	ldr	r0, [sp, #0]
 800db88:	9901      	ldr	r1, [sp, #4]
 800db8a:	f7f3 f849 	bl	8000c20 <__aeabi_dadd>
 800db8e:	9a00      	ldr	r2, [sp, #0]
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	2000      	movs	r0, #0
 800db94:	9004      	str	r0, [sp, #16]
 800db96:	9105      	str	r1, [sp, #20]
 800db98:	f7f4 f9da 	bl	8001f50 <__aeabi_dsub>
 800db9c:	0002      	movs	r2, r0
 800db9e:	000b      	movs	r3, r1
 800dba0:	0020      	movs	r0, r4
 800dba2:	0029      	movs	r1, r5
 800dba4:	f7f4 f9d4 	bl	8001f50 <__aeabi_dsub>
 800dba8:	9b06      	ldr	r3, [sp, #24]
 800dbaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbac:	3b01      	subs	r3, #1
 800dbae:	0006      	movs	r6, r0
 800dbb0:	000f      	movs	r7, r1
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	d000      	beq.n	800dbb8 <__ieee754_pow+0x314>
 800dbb6:	e1de      	b.n	800df76 <__ieee754_pow+0x6d2>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4c2b      	ldr	r4, [pc, #172]	; (800dc68 <__ieee754_pow+0x3c4>)
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	9401      	str	r4, [sp, #4]
 800dbc0:	9c02      	ldr	r4, [sp, #8]
 800dbc2:	9d03      	ldr	r5, [sp, #12]
 800dbc4:	9802      	ldr	r0, [sp, #8]
 800dbc6:	9903      	ldr	r1, [sp, #12]
 800dbc8:	2400      	movs	r4, #0
 800dbca:	002b      	movs	r3, r5
 800dbcc:	0022      	movs	r2, r4
 800dbce:	f7f4 f9bf 	bl	8001f50 <__aeabi_dsub>
 800dbd2:	9a04      	ldr	r2, [sp, #16]
 800dbd4:	9b05      	ldr	r3, [sp, #20]
 800dbd6:	f7f3 ff49 	bl	8001a6c <__aeabi_dmul>
 800dbda:	9a02      	ldr	r2, [sp, #8]
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	9006      	str	r0, [sp, #24]
 800dbe0:	9107      	str	r1, [sp, #28]
 800dbe2:	0030      	movs	r0, r6
 800dbe4:	0039      	movs	r1, r7
 800dbe6:	f7f3 ff41 	bl	8001a6c <__aeabi_dmul>
 800dbea:	0002      	movs	r2, r0
 800dbec:	000b      	movs	r3, r1
 800dbee:	9806      	ldr	r0, [sp, #24]
 800dbf0:	9907      	ldr	r1, [sp, #28]
 800dbf2:	f7f3 f815 	bl	8000c20 <__aeabi_dadd>
 800dbf6:	0022      	movs	r2, r4
 800dbf8:	002b      	movs	r3, r5
 800dbfa:	9006      	str	r0, [sp, #24]
 800dbfc:	9107      	str	r1, [sp, #28]
 800dbfe:	9804      	ldr	r0, [sp, #16]
 800dc00:	9905      	ldr	r1, [sp, #20]
 800dc02:	f7f3 ff33 	bl	8001a6c <__aeabi_dmul>
 800dc06:	0006      	movs	r6, r0
 800dc08:	000f      	movs	r7, r1
 800dc0a:	000b      	movs	r3, r1
 800dc0c:	0002      	movs	r2, r0
 800dc0e:	9806      	ldr	r0, [sp, #24]
 800dc10:	9907      	ldr	r1, [sp, #28]
 800dc12:	9604      	str	r6, [sp, #16]
 800dc14:	9705      	str	r7, [sp, #20]
 800dc16:	f7f3 f803 	bl	8000c20 <__aeabi_dadd>
 800dc1a:	4b14      	ldr	r3, [pc, #80]	; (800dc6c <__ieee754_pow+0x3c8>)
 800dc1c:	0005      	movs	r5, r0
 800dc1e:	000c      	movs	r4, r1
 800dc20:	9108      	str	r1, [sp, #32]
 800dc22:	4299      	cmp	r1, r3
 800dc24:	dc00      	bgt.n	800dc28 <__ieee754_pow+0x384>
 800dc26:	e2d8      	b.n	800e1da <__ieee754_pow+0x936>
 800dc28:	4b11      	ldr	r3, [pc, #68]	; (800dc70 <__ieee754_pow+0x3cc>)
 800dc2a:	18cb      	adds	r3, r1, r3
 800dc2c:	4303      	orrs	r3, r0
 800dc2e:	d100      	bne.n	800dc32 <__ieee754_pow+0x38e>
 800dc30:	e1da      	b.n	800dfe8 <__ieee754_pow+0x744>
 800dc32:	9800      	ldr	r0, [sp, #0]
 800dc34:	9901      	ldr	r1, [sp, #4]
 800dc36:	4a0f      	ldr	r2, [pc, #60]	; (800dc74 <__ieee754_pow+0x3d0>)
 800dc38:	4b0f      	ldr	r3, [pc, #60]	; (800dc78 <__ieee754_pow+0x3d4>)
 800dc3a:	f7f3 ff17 	bl	8001a6c <__aeabi_dmul>
 800dc3e:	4a0d      	ldr	r2, [pc, #52]	; (800dc74 <__ieee754_pow+0x3d0>)
 800dc40:	4b0d      	ldr	r3, [pc, #52]	; (800dc78 <__ieee754_pow+0x3d4>)
 800dc42:	e6ce      	b.n	800d9e2 <__ieee754_pow+0x13e>
 800dc44:	3ff00000 	.word	0x3ff00000
 800dc48:	3ff71547 	.word	0x3ff71547
 800dc4c:	f85ddf44 	.word	0xf85ddf44
 800dc50:	3e54ae0b 	.word	0x3e54ae0b
 800dc54:	3fd00000 	.word	0x3fd00000
 800dc58:	55555555 	.word	0x55555555
 800dc5c:	3fd55555 	.word	0x3fd55555
 800dc60:	3fe00000 	.word	0x3fe00000
 800dc64:	652b82fe 	.word	0x652b82fe
 800dc68:	bff00000 	.word	0xbff00000
 800dc6c:	408fffff 	.word	0x408fffff
 800dc70:	bf700000 	.word	0xbf700000
 800dc74:	8800759c 	.word	0x8800759c
 800dc78:	7e37e43c 	.word	0x7e37e43c
 800dc7c:	4bbf      	ldr	r3, [pc, #764]	; (800df7c <__ieee754_pow+0x6d8>)
 800dc7e:	2200      	movs	r2, #0
 800dc80:	429c      	cmp	r4, r3
 800dc82:	dc0a      	bgt.n	800dc9a <__ieee754_pow+0x3f6>
 800dc84:	9800      	ldr	r0, [sp, #0]
 800dc86:	9901      	ldr	r1, [sp, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	4bbd      	ldr	r3, [pc, #756]	; (800df80 <__ieee754_pow+0x6dc>)
 800dc8c:	f7f3 feee 	bl	8001a6c <__aeabi_dmul>
 800dc90:	2235      	movs	r2, #53	; 0x35
 800dc92:	9000      	str	r0, [sp, #0]
 800dc94:	9101      	str	r1, [sp, #4]
 800dc96:	9c01      	ldr	r4, [sp, #4]
 800dc98:	4252      	negs	r2, r2
 800dc9a:	49ba      	ldr	r1, [pc, #744]	; (800df84 <__ieee754_pow+0x6e0>)
 800dc9c:	1523      	asrs	r3, r4, #20
 800dc9e:	185b      	adds	r3, r3, r1
 800dca0:	189b      	adds	r3, r3, r2
 800dca2:	0324      	lsls	r4, r4, #12
 800dca4:	4db8      	ldr	r5, [pc, #736]	; (800df88 <__ieee754_pow+0x6e4>)
 800dca6:	4ab9      	ldr	r2, [pc, #740]	; (800df8c <__ieee754_pow+0x6e8>)
 800dca8:	930d      	str	r3, [sp, #52]	; 0x34
 800dcaa:	0b23      	lsrs	r3, r4, #12
 800dcac:	431d      	orrs	r5, r3
 800dcae:	2400      	movs	r4, #0
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	dd09      	ble.n	800dcc8 <__ieee754_pow+0x424>
 800dcb4:	4ab6      	ldr	r2, [pc, #728]	; (800df90 <__ieee754_pow+0x6ec>)
 800dcb6:	3401      	adds	r4, #1
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	dd05      	ble.n	800dcc8 <__ieee754_pow+0x424>
 800dcbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcbe:	191b      	adds	r3, r3, r4
 800dcc0:	2400      	movs	r4, #0
 800dcc2:	930d      	str	r3, [sp, #52]	; 0x34
 800dcc4:	4bb3      	ldr	r3, [pc, #716]	; (800df94 <__ieee754_pow+0x6f0>)
 800dcc6:	18ed      	adds	r5, r5, r3
 800dcc8:	9800      	ldr	r0, [sp, #0]
 800dcca:	9901      	ldr	r1, [sp, #4]
 800dccc:	0029      	movs	r1, r5
 800dcce:	00e3      	lsls	r3, r4, #3
 800dcd0:	9311      	str	r3, [sp, #68]	; 0x44
 800dcd2:	4bb1      	ldr	r3, [pc, #708]	; (800df98 <__ieee754_pow+0x6f4>)
 800dcd4:	00e2      	lsls	r2, r4, #3
 800dcd6:	189b      	adds	r3, r3, r2
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	900e      	str	r0, [sp, #56]	; 0x38
 800dcde:	910f      	str	r1, [sp, #60]	; 0x3c
 800dce0:	920a      	str	r2, [sp, #40]	; 0x28
 800dce2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dce4:	f7f4 f934 	bl	8001f50 <__aeabi_dsub>
 800dce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcec:	0006      	movs	r6, r0
 800dcee:	000f      	movs	r7, r1
 800dcf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcf4:	f7f2 ff94 	bl	8000c20 <__aeabi_dadd>
 800dcf8:	0002      	movs	r2, r0
 800dcfa:	000b      	movs	r3, r1
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	49a2      	ldr	r1, [pc, #648]	; (800df88 <__ieee754_pow+0x6e4>)
 800dd00:	f7f3 faaa 	bl	8001258 <__aeabi_ddiv>
 800dd04:	9012      	str	r0, [sp, #72]	; 0x48
 800dd06:	9113      	str	r1, [sp, #76]	; 0x4c
 800dd08:	0002      	movs	r2, r0
 800dd0a:	000b      	movs	r3, r1
 800dd0c:	0030      	movs	r0, r6
 800dd0e:	0039      	movs	r1, r7
 800dd10:	f7f3 feac 	bl	8001a6c <__aeabi_dmul>
 800dd14:	9008      	str	r0, [sp, #32]
 800dd16:	9109      	str	r1, [sp, #36]	; 0x24
 800dd18:	9a08      	ldr	r2, [sp, #32]
 800dd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1c:	2180      	movs	r1, #128	; 0x80
 800dd1e:	9204      	str	r2, [sp, #16]
 800dd20:	9305      	str	r3, [sp, #20]
 800dd22:	2300      	movs	r3, #0
 800dd24:	0589      	lsls	r1, r1, #22
 800dd26:	106d      	asrs	r5, r5, #1
 800dd28:	430d      	orrs	r5, r1
 800dd2a:	2180      	movs	r1, #128	; 0x80
 800dd2c:	9304      	str	r3, [sp, #16]
 800dd2e:	9a04      	ldr	r2, [sp, #16]
 800dd30:	9b05      	ldr	r3, [sp, #20]
 800dd32:	9200      	str	r2, [sp, #0]
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	0309      	lsls	r1, r1, #12
 800dd3a:	186d      	adds	r5, r5, r1
 800dd3c:	04a4      	lsls	r4, r4, #18
 800dd3e:	192b      	adds	r3, r5, r4
 800dd40:	9800      	ldr	r0, [sp, #0]
 800dd42:	9901      	ldr	r1, [sp, #4]
 800dd44:	0014      	movs	r4, r2
 800dd46:	001d      	movs	r5, r3
 800dd48:	f7f3 fe90 	bl	8001a6c <__aeabi_dmul>
 800dd4c:	0002      	movs	r2, r0
 800dd4e:	000b      	movs	r3, r1
 800dd50:	0030      	movs	r0, r6
 800dd52:	0039      	movs	r1, r7
 800dd54:	f7f4 f8fc 	bl	8001f50 <__aeabi_dsub>
 800dd58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd5c:	0006      	movs	r6, r0
 800dd5e:	000f      	movs	r7, r1
 800dd60:	0020      	movs	r0, r4
 800dd62:	0029      	movs	r1, r5
 800dd64:	f7f4 f8f4 	bl	8001f50 <__aeabi_dsub>
 800dd68:	0002      	movs	r2, r0
 800dd6a:	000b      	movs	r3, r1
 800dd6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800dd6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd70:	f7f4 f8ee 	bl	8001f50 <__aeabi_dsub>
 800dd74:	9a00      	ldr	r2, [sp, #0]
 800dd76:	9b01      	ldr	r3, [sp, #4]
 800dd78:	f7f3 fe78 	bl	8001a6c <__aeabi_dmul>
 800dd7c:	0002      	movs	r2, r0
 800dd7e:	000b      	movs	r3, r1
 800dd80:	0030      	movs	r0, r6
 800dd82:	0039      	movs	r1, r7
 800dd84:	f7f4 f8e4 	bl	8001f50 <__aeabi_dsub>
 800dd88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd8c:	f7f3 fe6e 	bl	8001a6c <__aeabi_dmul>
 800dd90:	9a08      	ldr	r2, [sp, #32]
 800dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd94:	900a      	str	r0, [sp, #40]	; 0x28
 800dd96:	910b      	str	r1, [sp, #44]	; 0x2c
 800dd98:	0010      	movs	r0, r2
 800dd9a:	0019      	movs	r1, r3
 800dd9c:	f7f3 fe66 	bl	8001a6c <__aeabi_dmul>
 800dda0:	0006      	movs	r6, r0
 800dda2:	000f      	movs	r7, r1
 800dda4:	4a7d      	ldr	r2, [pc, #500]	; (800df9c <__ieee754_pow+0x6f8>)
 800dda6:	4b7e      	ldr	r3, [pc, #504]	; (800dfa0 <__ieee754_pow+0x6fc>)
 800dda8:	f7f3 fe60 	bl	8001a6c <__aeabi_dmul>
 800ddac:	4a7d      	ldr	r2, [pc, #500]	; (800dfa4 <__ieee754_pow+0x700>)
 800ddae:	4b7e      	ldr	r3, [pc, #504]	; (800dfa8 <__ieee754_pow+0x704>)
 800ddb0:	f7f2 ff36 	bl	8000c20 <__aeabi_dadd>
 800ddb4:	0032      	movs	r2, r6
 800ddb6:	003b      	movs	r3, r7
 800ddb8:	f7f3 fe58 	bl	8001a6c <__aeabi_dmul>
 800ddbc:	4a7b      	ldr	r2, [pc, #492]	; (800dfac <__ieee754_pow+0x708>)
 800ddbe:	4b7c      	ldr	r3, [pc, #496]	; (800dfb0 <__ieee754_pow+0x70c>)
 800ddc0:	f7f2 ff2e 	bl	8000c20 <__aeabi_dadd>
 800ddc4:	0032      	movs	r2, r6
 800ddc6:	003b      	movs	r3, r7
 800ddc8:	f7f3 fe50 	bl	8001a6c <__aeabi_dmul>
 800ddcc:	4a79      	ldr	r2, [pc, #484]	; (800dfb4 <__ieee754_pow+0x710>)
 800ddce:	4b7a      	ldr	r3, [pc, #488]	; (800dfb8 <__ieee754_pow+0x714>)
 800ddd0:	f7f2 ff26 	bl	8000c20 <__aeabi_dadd>
 800ddd4:	0032      	movs	r2, r6
 800ddd6:	003b      	movs	r3, r7
 800ddd8:	f7f3 fe48 	bl	8001a6c <__aeabi_dmul>
 800dddc:	4a77      	ldr	r2, [pc, #476]	; (800dfbc <__ieee754_pow+0x718>)
 800ddde:	4b78      	ldr	r3, [pc, #480]	; (800dfc0 <__ieee754_pow+0x71c>)
 800dde0:	f7f2 ff1e 	bl	8000c20 <__aeabi_dadd>
 800dde4:	0032      	movs	r2, r6
 800dde6:	003b      	movs	r3, r7
 800dde8:	f7f3 fe40 	bl	8001a6c <__aeabi_dmul>
 800ddec:	4a75      	ldr	r2, [pc, #468]	; (800dfc4 <__ieee754_pow+0x720>)
 800ddee:	4b76      	ldr	r3, [pc, #472]	; (800dfc8 <__ieee754_pow+0x724>)
 800ddf0:	f7f2 ff16 	bl	8000c20 <__aeabi_dadd>
 800ddf4:	0032      	movs	r2, r6
 800ddf6:	0004      	movs	r4, r0
 800ddf8:	000d      	movs	r5, r1
 800ddfa:	003b      	movs	r3, r7
 800ddfc:	0030      	movs	r0, r6
 800ddfe:	0039      	movs	r1, r7
 800de00:	f7f3 fe34 	bl	8001a6c <__aeabi_dmul>
 800de04:	0002      	movs	r2, r0
 800de06:	000b      	movs	r3, r1
 800de08:	0020      	movs	r0, r4
 800de0a:	0029      	movs	r1, r5
 800de0c:	f7f3 fe2e 	bl	8001a6c <__aeabi_dmul>
 800de10:	9a00      	ldr	r2, [sp, #0]
 800de12:	9b01      	ldr	r3, [sp, #4]
 800de14:	0004      	movs	r4, r0
 800de16:	000d      	movs	r5, r1
 800de18:	9808      	ldr	r0, [sp, #32]
 800de1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de1c:	f7f2 ff00 	bl	8000c20 <__aeabi_dadd>
 800de20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de24:	f7f3 fe22 	bl	8001a6c <__aeabi_dmul>
 800de28:	0022      	movs	r2, r4
 800de2a:	002b      	movs	r3, r5
 800de2c:	f7f2 fef8 	bl	8000c20 <__aeabi_dadd>
 800de30:	9a00      	ldr	r2, [sp, #0]
 800de32:	9b01      	ldr	r3, [sp, #4]
 800de34:	900e      	str	r0, [sp, #56]	; 0x38
 800de36:	910f      	str	r1, [sp, #60]	; 0x3c
 800de38:	0010      	movs	r0, r2
 800de3a:	0019      	movs	r1, r3
 800de3c:	f7f3 fe16 	bl	8001a6c <__aeabi_dmul>
 800de40:	2200      	movs	r2, #0
 800de42:	4b62      	ldr	r3, [pc, #392]	; (800dfcc <__ieee754_pow+0x728>)
 800de44:	0004      	movs	r4, r0
 800de46:	000d      	movs	r5, r1
 800de48:	f7f2 feea 	bl	8000c20 <__aeabi_dadd>
 800de4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de50:	f7f2 fee6 	bl	8000c20 <__aeabi_dadd>
 800de54:	9e04      	ldr	r6, [sp, #16]
 800de56:	000f      	movs	r7, r1
 800de58:	0032      	movs	r2, r6
 800de5a:	000b      	movs	r3, r1
 800de5c:	9800      	ldr	r0, [sp, #0]
 800de5e:	9901      	ldr	r1, [sp, #4]
 800de60:	f7f3 fe04 	bl	8001a6c <__aeabi_dmul>
 800de64:	2200      	movs	r2, #0
 800de66:	9000      	str	r0, [sp, #0]
 800de68:	9101      	str	r1, [sp, #4]
 800de6a:	4b58      	ldr	r3, [pc, #352]	; (800dfcc <__ieee754_pow+0x728>)
 800de6c:	0030      	movs	r0, r6
 800de6e:	0039      	movs	r1, r7
 800de70:	f7f4 f86e 	bl	8001f50 <__aeabi_dsub>
 800de74:	0022      	movs	r2, r4
 800de76:	002b      	movs	r3, r5
 800de78:	f7f4 f86a 	bl	8001f50 <__aeabi_dsub>
 800de7c:	0002      	movs	r2, r0
 800de7e:	000b      	movs	r3, r1
 800de80:	980e      	ldr	r0, [sp, #56]	; 0x38
 800de82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de84:	f7f4 f864 	bl	8001f50 <__aeabi_dsub>
 800de88:	9a08      	ldr	r2, [sp, #32]
 800de8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de8c:	f7f3 fdee 	bl	8001a6c <__aeabi_dmul>
 800de90:	0032      	movs	r2, r6
 800de92:	0004      	movs	r4, r0
 800de94:	000d      	movs	r5, r1
 800de96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de9a:	003b      	movs	r3, r7
 800de9c:	f7f3 fde6 	bl	8001a6c <__aeabi_dmul>
 800dea0:	0002      	movs	r2, r0
 800dea2:	000b      	movs	r3, r1
 800dea4:	0020      	movs	r0, r4
 800dea6:	0029      	movs	r1, r5
 800dea8:	f7f2 feba 	bl	8000c20 <__aeabi_dadd>
 800deac:	0004      	movs	r4, r0
 800deae:	000d      	movs	r5, r1
 800deb0:	0002      	movs	r2, r0
 800deb2:	000b      	movs	r3, r1
 800deb4:	9800      	ldr	r0, [sp, #0]
 800deb6:	9901      	ldr	r1, [sp, #4]
 800deb8:	f7f2 feb2 	bl	8000c20 <__aeabi_dadd>
 800debc:	22e0      	movs	r2, #224	; 0xe0
 800debe:	9e04      	ldr	r6, [sp, #16]
 800dec0:	0612      	lsls	r2, r2, #24
 800dec2:	4b43      	ldr	r3, [pc, #268]	; (800dfd0 <__ieee754_pow+0x72c>)
 800dec4:	0030      	movs	r0, r6
 800dec6:	000f      	movs	r7, r1
 800dec8:	f7f3 fdd0 	bl	8001a6c <__aeabi_dmul>
 800decc:	9008      	str	r0, [sp, #32]
 800dece:	9109      	str	r1, [sp, #36]	; 0x24
 800ded0:	9a00      	ldr	r2, [sp, #0]
 800ded2:	9b01      	ldr	r3, [sp, #4]
 800ded4:	0030      	movs	r0, r6
 800ded6:	0039      	movs	r1, r7
 800ded8:	f7f4 f83a 	bl	8001f50 <__aeabi_dsub>
 800dedc:	0002      	movs	r2, r0
 800dede:	000b      	movs	r3, r1
 800dee0:	0020      	movs	r0, r4
 800dee2:	0029      	movs	r1, r5
 800dee4:	f7f4 f834 	bl	8001f50 <__aeabi_dsub>
 800dee8:	4a3a      	ldr	r2, [pc, #232]	; (800dfd4 <__ieee754_pow+0x730>)
 800deea:	4b39      	ldr	r3, [pc, #228]	; (800dfd0 <__ieee754_pow+0x72c>)
 800deec:	f7f3 fdbe 	bl	8001a6c <__aeabi_dmul>
 800def0:	4a39      	ldr	r2, [pc, #228]	; (800dfd8 <__ieee754_pow+0x734>)
 800def2:	0004      	movs	r4, r0
 800def4:	000d      	movs	r5, r1
 800def6:	4b39      	ldr	r3, [pc, #228]	; (800dfdc <__ieee754_pow+0x738>)
 800def8:	0030      	movs	r0, r6
 800defa:	0039      	movs	r1, r7
 800defc:	f7f3 fdb6 	bl	8001a6c <__aeabi_dmul>
 800df00:	0002      	movs	r2, r0
 800df02:	000b      	movs	r3, r1
 800df04:	0020      	movs	r0, r4
 800df06:	0029      	movs	r1, r5
 800df08:	f7f2 fe8a 	bl	8000c20 <__aeabi_dadd>
 800df0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df0e:	4b34      	ldr	r3, [pc, #208]	; (800dfe0 <__ieee754_pow+0x73c>)
 800df10:	189b      	adds	r3, r3, r2
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	f7f2 fe83 	bl	8000c20 <__aeabi_dadd>
 800df1a:	9000      	str	r0, [sp, #0]
 800df1c:	9101      	str	r1, [sp, #4]
 800df1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800df20:	f7f4 fbb0 	bl	8002684 <__aeabi_i2d>
 800df24:	0004      	movs	r4, r0
 800df26:	000d      	movs	r5, r1
 800df28:	9808      	ldr	r0, [sp, #32]
 800df2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df2e:	4b2d      	ldr	r3, [pc, #180]	; (800dfe4 <__ieee754_pow+0x740>)
 800df30:	189b      	adds	r3, r3, r2
 800df32:	681e      	ldr	r6, [r3, #0]
 800df34:	685f      	ldr	r7, [r3, #4]
 800df36:	9a00      	ldr	r2, [sp, #0]
 800df38:	9b01      	ldr	r3, [sp, #4]
 800df3a:	f7f2 fe71 	bl	8000c20 <__aeabi_dadd>
 800df3e:	0032      	movs	r2, r6
 800df40:	003b      	movs	r3, r7
 800df42:	f7f2 fe6d 	bl	8000c20 <__aeabi_dadd>
 800df46:	0022      	movs	r2, r4
 800df48:	002b      	movs	r3, r5
 800df4a:	f7f2 fe69 	bl	8000c20 <__aeabi_dadd>
 800df4e:	9804      	ldr	r0, [sp, #16]
 800df50:	0022      	movs	r2, r4
 800df52:	002b      	movs	r3, r5
 800df54:	9004      	str	r0, [sp, #16]
 800df56:	9105      	str	r1, [sp, #20]
 800df58:	f7f3 fffa 	bl	8001f50 <__aeabi_dsub>
 800df5c:	0032      	movs	r2, r6
 800df5e:	003b      	movs	r3, r7
 800df60:	f7f3 fff6 	bl	8001f50 <__aeabi_dsub>
 800df64:	9a08      	ldr	r2, [sp, #32]
 800df66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df68:	f7f3 fff2 	bl	8001f50 <__aeabi_dsub>
 800df6c:	0002      	movs	r2, r0
 800df6e:	000b      	movs	r3, r1
 800df70:	9800      	ldr	r0, [sp, #0]
 800df72:	9901      	ldr	r1, [sp, #4]
 800df74:	e616      	b.n	800dba4 <__ieee754_pow+0x300>
 800df76:	2300      	movs	r3, #0
 800df78:	4c03      	ldr	r4, [pc, #12]	; (800df88 <__ieee754_pow+0x6e4>)
 800df7a:	e61f      	b.n	800dbbc <__ieee754_pow+0x318>
 800df7c:	000fffff 	.word	0x000fffff
 800df80:	43400000 	.word	0x43400000
 800df84:	fffffc01 	.word	0xfffffc01
 800df88:	3ff00000 	.word	0x3ff00000
 800df8c:	0003988e 	.word	0x0003988e
 800df90:	000bb679 	.word	0x000bb679
 800df94:	fff00000 	.word	0xfff00000
 800df98:	0800eda0 	.word	0x0800eda0
 800df9c:	4a454eef 	.word	0x4a454eef
 800dfa0:	3fca7e28 	.word	0x3fca7e28
 800dfa4:	93c9db65 	.word	0x93c9db65
 800dfa8:	3fcd864a 	.word	0x3fcd864a
 800dfac:	a91d4101 	.word	0xa91d4101
 800dfb0:	3fd17460 	.word	0x3fd17460
 800dfb4:	518f264d 	.word	0x518f264d
 800dfb8:	3fd55555 	.word	0x3fd55555
 800dfbc:	db6fabff 	.word	0xdb6fabff
 800dfc0:	3fdb6db6 	.word	0x3fdb6db6
 800dfc4:	33333303 	.word	0x33333303
 800dfc8:	3fe33333 	.word	0x3fe33333
 800dfcc:	40080000 	.word	0x40080000
 800dfd0:	3feec709 	.word	0x3feec709
 800dfd4:	dc3a03fd 	.word	0xdc3a03fd
 800dfd8:	145b01f5 	.word	0x145b01f5
 800dfdc:	be3e2fe0 	.word	0xbe3e2fe0
 800dfe0:	0800edc0 	.word	0x0800edc0
 800dfe4:	0800edb0 	.word	0x0800edb0
 800dfe8:	4a8f      	ldr	r2, [pc, #572]	; (800e228 <__ieee754_pow+0x984>)
 800dfea:	4b90      	ldr	r3, [pc, #576]	; (800e22c <__ieee754_pow+0x988>)
 800dfec:	9806      	ldr	r0, [sp, #24]
 800dfee:	9907      	ldr	r1, [sp, #28]
 800dff0:	f7f2 fe16 	bl	8000c20 <__aeabi_dadd>
 800dff4:	0032      	movs	r2, r6
 800dff6:	9002      	str	r0, [sp, #8]
 800dff8:	9103      	str	r1, [sp, #12]
 800dffa:	003b      	movs	r3, r7
 800dffc:	0028      	movs	r0, r5
 800dffe:	0021      	movs	r1, r4
 800e000:	f7f3 ffa6 	bl	8001f50 <__aeabi_dsub>
 800e004:	0002      	movs	r2, r0
 800e006:	000b      	movs	r3, r1
 800e008:	9802      	ldr	r0, [sp, #8]
 800e00a:	9903      	ldr	r1, [sp, #12]
 800e00c:	f7f2 fa38 	bl	8000480 <__aeabi_dcmpgt>
 800e010:	2800      	cmp	r0, #0
 800e012:	d000      	beq.n	800e016 <__ieee754_pow+0x772>
 800e014:	e60d      	b.n	800dc32 <__ieee754_pow+0x38e>
 800e016:	2100      	movs	r1, #0
 800e018:	4a85      	ldr	r2, [pc, #532]	; (800e230 <__ieee754_pow+0x98c>)
 800e01a:	0063      	lsls	r3, r4, #1
 800e01c:	085b      	lsrs	r3, r3, #1
 800e01e:	9102      	str	r1, [sp, #8]
 800e020:	4293      	cmp	r3, r2
 800e022:	dd25      	ble.n	800e070 <__ieee754_pow+0x7cc>
 800e024:	4a83      	ldr	r2, [pc, #524]	; (800e234 <__ieee754_pow+0x990>)
 800e026:	151b      	asrs	r3, r3, #20
 800e028:	189b      	adds	r3, r3, r2
 800e02a:	2280      	movs	r2, #128	; 0x80
 800e02c:	0352      	lsls	r2, r2, #13
 800e02e:	4694      	mov	ip, r2
 800e030:	411a      	asrs	r2, r3
 800e032:	1914      	adds	r4, r2, r4
 800e034:	0060      	lsls	r0, r4, #1
 800e036:	4b80      	ldr	r3, [pc, #512]	; (800e238 <__ieee754_pow+0x994>)
 800e038:	0d40      	lsrs	r0, r0, #21
 800e03a:	4d80      	ldr	r5, [pc, #512]	; (800e23c <__ieee754_pow+0x998>)
 800e03c:	18c0      	adds	r0, r0, r3
 800e03e:	4105      	asrs	r5, r0
 800e040:	0021      	movs	r1, r4
 800e042:	43a9      	bics	r1, r5
 800e044:	000b      	movs	r3, r1
 800e046:	4661      	mov	r1, ip
 800e048:	0324      	lsls	r4, r4, #12
 800e04a:	0b24      	lsrs	r4, r4, #12
 800e04c:	4321      	orrs	r1, r4
 800e04e:	2414      	movs	r4, #20
 800e050:	1a20      	subs	r0, r4, r0
 800e052:	4101      	asrs	r1, r0
 800e054:	9102      	str	r1, [sp, #8]
 800e056:	9908      	ldr	r1, [sp, #32]
 800e058:	2200      	movs	r2, #0
 800e05a:	2900      	cmp	r1, #0
 800e05c:	da02      	bge.n	800e064 <__ieee754_pow+0x7c0>
 800e05e:	9902      	ldr	r1, [sp, #8]
 800e060:	4249      	negs	r1, r1
 800e062:	9102      	str	r1, [sp, #8]
 800e064:	0030      	movs	r0, r6
 800e066:	0039      	movs	r1, r7
 800e068:	f7f3 ff72 	bl	8001f50 <__aeabi_dsub>
 800e06c:	9004      	str	r0, [sp, #16]
 800e06e:	9105      	str	r1, [sp, #20]
 800e070:	9a06      	ldr	r2, [sp, #24]
 800e072:	9b07      	ldr	r3, [sp, #28]
 800e074:	9804      	ldr	r0, [sp, #16]
 800e076:	9905      	ldr	r1, [sp, #20]
 800e078:	2600      	movs	r6, #0
 800e07a:	f7f2 fdd1 	bl	8000c20 <__aeabi_dadd>
 800e07e:	2200      	movs	r2, #0
 800e080:	4b6f      	ldr	r3, [pc, #444]	; (800e240 <__ieee754_pow+0x99c>)
 800e082:	0030      	movs	r0, r6
 800e084:	000f      	movs	r7, r1
 800e086:	f7f3 fcf1 	bl	8001a6c <__aeabi_dmul>
 800e08a:	9a04      	ldr	r2, [sp, #16]
 800e08c:	9b05      	ldr	r3, [sp, #20]
 800e08e:	9008      	str	r0, [sp, #32]
 800e090:	9109      	str	r1, [sp, #36]	; 0x24
 800e092:	0030      	movs	r0, r6
 800e094:	0039      	movs	r1, r7
 800e096:	f7f3 ff5b 	bl	8001f50 <__aeabi_dsub>
 800e09a:	0002      	movs	r2, r0
 800e09c:	000b      	movs	r3, r1
 800e09e:	9806      	ldr	r0, [sp, #24]
 800e0a0:	9907      	ldr	r1, [sp, #28]
 800e0a2:	f7f3 ff55 	bl	8001f50 <__aeabi_dsub>
 800e0a6:	4a67      	ldr	r2, [pc, #412]	; (800e244 <__ieee754_pow+0x9a0>)
 800e0a8:	4b67      	ldr	r3, [pc, #412]	; (800e248 <__ieee754_pow+0x9a4>)
 800e0aa:	f7f3 fcdf 	bl	8001a6c <__aeabi_dmul>
 800e0ae:	4a67      	ldr	r2, [pc, #412]	; (800e24c <__ieee754_pow+0x9a8>)
 800e0b0:	0004      	movs	r4, r0
 800e0b2:	000d      	movs	r5, r1
 800e0b4:	4b66      	ldr	r3, [pc, #408]	; (800e250 <__ieee754_pow+0x9ac>)
 800e0b6:	0030      	movs	r0, r6
 800e0b8:	0039      	movs	r1, r7
 800e0ba:	f7f3 fcd7 	bl	8001a6c <__aeabi_dmul>
 800e0be:	0002      	movs	r2, r0
 800e0c0:	000b      	movs	r3, r1
 800e0c2:	0020      	movs	r0, r4
 800e0c4:	0029      	movs	r1, r5
 800e0c6:	f7f2 fdab 	bl	8000c20 <__aeabi_dadd>
 800e0ca:	0004      	movs	r4, r0
 800e0cc:	000d      	movs	r5, r1
 800e0ce:	0002      	movs	r2, r0
 800e0d0:	000b      	movs	r3, r1
 800e0d2:	9808      	ldr	r0, [sp, #32]
 800e0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0d6:	f7f2 fda3 	bl	8000c20 <__aeabi_dadd>
 800e0da:	9a08      	ldr	r2, [sp, #32]
 800e0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0de:	0006      	movs	r6, r0
 800e0e0:	000f      	movs	r7, r1
 800e0e2:	f7f3 ff35 	bl	8001f50 <__aeabi_dsub>
 800e0e6:	0002      	movs	r2, r0
 800e0e8:	000b      	movs	r3, r1
 800e0ea:	0020      	movs	r0, r4
 800e0ec:	0029      	movs	r1, r5
 800e0ee:	f7f3 ff2f 	bl	8001f50 <__aeabi_dsub>
 800e0f2:	0032      	movs	r2, r6
 800e0f4:	9004      	str	r0, [sp, #16]
 800e0f6:	9105      	str	r1, [sp, #20]
 800e0f8:	003b      	movs	r3, r7
 800e0fa:	0030      	movs	r0, r6
 800e0fc:	0039      	movs	r1, r7
 800e0fe:	f7f3 fcb5 	bl	8001a6c <__aeabi_dmul>
 800e102:	0004      	movs	r4, r0
 800e104:	000d      	movs	r5, r1
 800e106:	4a53      	ldr	r2, [pc, #332]	; (800e254 <__ieee754_pow+0x9b0>)
 800e108:	4b53      	ldr	r3, [pc, #332]	; (800e258 <__ieee754_pow+0x9b4>)
 800e10a:	f7f3 fcaf 	bl	8001a6c <__aeabi_dmul>
 800e10e:	4a53      	ldr	r2, [pc, #332]	; (800e25c <__ieee754_pow+0x9b8>)
 800e110:	4b53      	ldr	r3, [pc, #332]	; (800e260 <__ieee754_pow+0x9bc>)
 800e112:	f7f3 ff1d 	bl	8001f50 <__aeabi_dsub>
 800e116:	0022      	movs	r2, r4
 800e118:	002b      	movs	r3, r5
 800e11a:	f7f3 fca7 	bl	8001a6c <__aeabi_dmul>
 800e11e:	4a51      	ldr	r2, [pc, #324]	; (800e264 <__ieee754_pow+0x9c0>)
 800e120:	4b51      	ldr	r3, [pc, #324]	; (800e268 <__ieee754_pow+0x9c4>)
 800e122:	f7f2 fd7d 	bl	8000c20 <__aeabi_dadd>
 800e126:	0022      	movs	r2, r4
 800e128:	002b      	movs	r3, r5
 800e12a:	f7f3 fc9f 	bl	8001a6c <__aeabi_dmul>
 800e12e:	4a4f      	ldr	r2, [pc, #316]	; (800e26c <__ieee754_pow+0x9c8>)
 800e130:	4b4f      	ldr	r3, [pc, #316]	; (800e270 <__ieee754_pow+0x9cc>)
 800e132:	f7f3 ff0d 	bl	8001f50 <__aeabi_dsub>
 800e136:	0022      	movs	r2, r4
 800e138:	002b      	movs	r3, r5
 800e13a:	f7f3 fc97 	bl	8001a6c <__aeabi_dmul>
 800e13e:	4a4d      	ldr	r2, [pc, #308]	; (800e274 <__ieee754_pow+0x9d0>)
 800e140:	4b4d      	ldr	r3, [pc, #308]	; (800e278 <__ieee754_pow+0x9d4>)
 800e142:	f7f2 fd6d 	bl	8000c20 <__aeabi_dadd>
 800e146:	0022      	movs	r2, r4
 800e148:	002b      	movs	r3, r5
 800e14a:	f7f3 fc8f 	bl	8001a6c <__aeabi_dmul>
 800e14e:	0002      	movs	r2, r0
 800e150:	000b      	movs	r3, r1
 800e152:	0030      	movs	r0, r6
 800e154:	0039      	movs	r1, r7
 800e156:	f7f3 fefb 	bl	8001f50 <__aeabi_dsub>
 800e15a:	0004      	movs	r4, r0
 800e15c:	000d      	movs	r5, r1
 800e15e:	0002      	movs	r2, r0
 800e160:	000b      	movs	r3, r1
 800e162:	0030      	movs	r0, r6
 800e164:	0039      	movs	r1, r7
 800e166:	f7f3 fc81 	bl	8001a6c <__aeabi_dmul>
 800e16a:	2380      	movs	r3, #128	; 0x80
 800e16c:	9006      	str	r0, [sp, #24]
 800e16e:	9107      	str	r1, [sp, #28]
 800e170:	2200      	movs	r2, #0
 800e172:	05db      	lsls	r3, r3, #23
 800e174:	0020      	movs	r0, r4
 800e176:	0029      	movs	r1, r5
 800e178:	f7f3 feea 	bl	8001f50 <__aeabi_dsub>
 800e17c:	0002      	movs	r2, r0
 800e17e:	000b      	movs	r3, r1
 800e180:	9806      	ldr	r0, [sp, #24]
 800e182:	9907      	ldr	r1, [sp, #28]
 800e184:	f7f3 f868 	bl	8001258 <__aeabi_ddiv>
 800e188:	9a04      	ldr	r2, [sp, #16]
 800e18a:	9b05      	ldr	r3, [sp, #20]
 800e18c:	0004      	movs	r4, r0
 800e18e:	000d      	movs	r5, r1
 800e190:	0030      	movs	r0, r6
 800e192:	0039      	movs	r1, r7
 800e194:	f7f3 fc6a 	bl	8001a6c <__aeabi_dmul>
 800e198:	9a04      	ldr	r2, [sp, #16]
 800e19a:	9b05      	ldr	r3, [sp, #20]
 800e19c:	f7f2 fd40 	bl	8000c20 <__aeabi_dadd>
 800e1a0:	0002      	movs	r2, r0
 800e1a2:	000b      	movs	r3, r1
 800e1a4:	0020      	movs	r0, r4
 800e1a6:	0029      	movs	r1, r5
 800e1a8:	f7f3 fed2 	bl	8001f50 <__aeabi_dsub>
 800e1ac:	0032      	movs	r2, r6
 800e1ae:	003b      	movs	r3, r7
 800e1b0:	f7f3 fece 	bl	8001f50 <__aeabi_dsub>
 800e1b4:	0002      	movs	r2, r0
 800e1b6:	000b      	movs	r3, r1
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	4930      	ldr	r1, [pc, #192]	; (800e27c <__ieee754_pow+0x9d8>)
 800e1bc:	f7f3 fec8 	bl	8001f50 <__aeabi_dsub>
 800e1c0:	9b02      	ldr	r3, [sp, #8]
 800e1c2:	051b      	lsls	r3, r3, #20
 800e1c4:	185b      	adds	r3, r3, r1
 800e1c6:	151a      	asrs	r2, r3, #20
 800e1c8:	2a00      	cmp	r2, #0
 800e1ca:	dc26      	bgt.n	800e21a <__ieee754_pow+0x976>
 800e1cc:	9a02      	ldr	r2, [sp, #8]
 800e1ce:	f000 f9ad 	bl	800e52c <scalbn>
 800e1d2:	9a00      	ldr	r2, [sp, #0]
 800e1d4:	9b01      	ldr	r3, [sp, #4]
 800e1d6:	f7ff fc04 	bl	800d9e2 <__ieee754_pow+0x13e>
 800e1da:	4a29      	ldr	r2, [pc, #164]	; (800e280 <__ieee754_pow+0x9dc>)
 800e1dc:	004b      	lsls	r3, r1, #1
 800e1de:	085b      	lsrs	r3, r3, #1
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	dc00      	bgt.n	800e1e6 <__ieee754_pow+0x942>
 800e1e4:	e717      	b.n	800e016 <__ieee754_pow+0x772>
 800e1e6:	4b27      	ldr	r3, [pc, #156]	; (800e284 <__ieee754_pow+0x9e0>)
 800e1e8:	18cb      	adds	r3, r1, r3
 800e1ea:	4303      	orrs	r3, r0
 800e1ec:	d009      	beq.n	800e202 <__ieee754_pow+0x95e>
 800e1ee:	9800      	ldr	r0, [sp, #0]
 800e1f0:	9901      	ldr	r1, [sp, #4]
 800e1f2:	4a25      	ldr	r2, [pc, #148]	; (800e288 <__ieee754_pow+0x9e4>)
 800e1f4:	4b25      	ldr	r3, [pc, #148]	; (800e28c <__ieee754_pow+0x9e8>)
 800e1f6:	f7f3 fc39 	bl	8001a6c <__aeabi_dmul>
 800e1fa:	4a23      	ldr	r2, [pc, #140]	; (800e288 <__ieee754_pow+0x9e4>)
 800e1fc:	4b23      	ldr	r3, [pc, #140]	; (800e28c <__ieee754_pow+0x9e8>)
 800e1fe:	f7ff fbf0 	bl	800d9e2 <__ieee754_pow+0x13e>
 800e202:	0032      	movs	r2, r6
 800e204:	003b      	movs	r3, r7
 800e206:	f7f3 fea3 	bl	8001f50 <__aeabi_dsub>
 800e20a:	9a06      	ldr	r2, [sp, #24]
 800e20c:	9b07      	ldr	r3, [sp, #28]
 800e20e:	f7f2 f941 	bl	8000494 <__aeabi_dcmpge>
 800e212:	2800      	cmp	r0, #0
 800e214:	d100      	bne.n	800e218 <__ieee754_pow+0x974>
 800e216:	e6fe      	b.n	800e016 <__ieee754_pow+0x772>
 800e218:	e7e9      	b.n	800e1ee <__ieee754_pow+0x94a>
 800e21a:	0019      	movs	r1, r3
 800e21c:	e7d9      	b.n	800e1d2 <__ieee754_pow+0x92e>
 800e21e:	2300      	movs	r3, #0
 800e220:	4c16      	ldr	r4, [pc, #88]	; (800e27c <__ieee754_pow+0x9d8>)
 800e222:	f7ff fba1 	bl	800d968 <__ieee754_pow+0xc4>
 800e226:	46c0      	nop			; (mov r8, r8)
 800e228:	652b82fe 	.word	0x652b82fe
 800e22c:	3c971547 	.word	0x3c971547
 800e230:	3fe00000 	.word	0x3fe00000
 800e234:	fffffc02 	.word	0xfffffc02
 800e238:	fffffc01 	.word	0xfffffc01
 800e23c:	000fffff 	.word	0x000fffff
 800e240:	3fe62e43 	.word	0x3fe62e43
 800e244:	fefa39ef 	.word	0xfefa39ef
 800e248:	3fe62e42 	.word	0x3fe62e42
 800e24c:	0ca86c39 	.word	0x0ca86c39
 800e250:	be205c61 	.word	0xbe205c61
 800e254:	72bea4d0 	.word	0x72bea4d0
 800e258:	3e663769 	.word	0x3e663769
 800e25c:	c5d26bf1 	.word	0xc5d26bf1
 800e260:	3ebbbd41 	.word	0x3ebbbd41
 800e264:	af25de2c 	.word	0xaf25de2c
 800e268:	3f11566a 	.word	0x3f11566a
 800e26c:	16bebd93 	.word	0x16bebd93
 800e270:	3f66c16c 	.word	0x3f66c16c
 800e274:	5555553e 	.word	0x5555553e
 800e278:	3fc55555 	.word	0x3fc55555
 800e27c:	3ff00000 	.word	0x3ff00000
 800e280:	4090cbff 	.word	0x4090cbff
 800e284:	3f6f3400 	.word	0x3f6f3400
 800e288:	c2f8f359 	.word	0xc2f8f359
 800e28c:	01a56e1f 	.word	0x01a56e1f

0800e290 <__ieee754_sqrt>:
 800e290:	4b55      	ldr	r3, [pc, #340]	; (800e3e8 <__ieee754_sqrt+0x158>)
 800e292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e294:	001a      	movs	r2, r3
 800e296:	0005      	movs	r5, r0
 800e298:	000c      	movs	r4, r1
 800e29a:	400a      	ands	r2, r1
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d10f      	bne.n	800e2c0 <__ieee754_sqrt+0x30>
 800e2a0:	0002      	movs	r2, r0
 800e2a2:	000b      	movs	r3, r1
 800e2a4:	f7f3 fbe2 	bl	8001a6c <__aeabi_dmul>
 800e2a8:	0002      	movs	r2, r0
 800e2aa:	000b      	movs	r3, r1
 800e2ac:	0028      	movs	r0, r5
 800e2ae:	0021      	movs	r1, r4
 800e2b0:	f7f2 fcb6 	bl	8000c20 <__aeabi_dadd>
 800e2b4:	0005      	movs	r5, r0
 800e2b6:	000c      	movs	r4, r1
 800e2b8:	0028      	movs	r0, r5
 800e2ba:	0021      	movs	r1, r4
 800e2bc:	b003      	add	sp, #12
 800e2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2c0:	0002      	movs	r2, r0
 800e2c2:	2900      	cmp	r1, #0
 800e2c4:	dc10      	bgt.n	800e2e8 <__ieee754_sqrt+0x58>
 800e2c6:	004b      	lsls	r3, r1, #1
 800e2c8:	085b      	lsrs	r3, r3, #1
 800e2ca:	4303      	orrs	r3, r0
 800e2cc:	d0f4      	beq.n	800e2b8 <__ieee754_sqrt+0x28>
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	4281      	cmp	r1, r0
 800e2d2:	d100      	bne.n	800e2d6 <__ieee754_sqrt+0x46>
 800e2d4:	e07f      	b.n	800e3d6 <__ieee754_sqrt+0x146>
 800e2d6:	000b      	movs	r3, r1
 800e2d8:	0028      	movs	r0, r5
 800e2da:	f7f3 fe39 	bl	8001f50 <__aeabi_dsub>
 800e2de:	0002      	movs	r2, r0
 800e2e0:	000b      	movs	r3, r1
 800e2e2:	f7f2 ffb9 	bl	8001258 <__aeabi_ddiv>
 800e2e6:	e7e5      	b.n	800e2b4 <__ieee754_sqrt+0x24>
 800e2e8:	1508      	asrs	r0, r1, #20
 800e2ea:	d074      	beq.n	800e3d6 <__ieee754_sqrt+0x146>
 800e2ec:	4b3f      	ldr	r3, [pc, #252]	; (800e3ec <__ieee754_sqrt+0x15c>)
 800e2ee:	0309      	lsls	r1, r1, #12
 800e2f0:	18c0      	adds	r0, r0, r3
 800e2f2:	2380      	movs	r3, #128	; 0x80
 800e2f4:	0b09      	lsrs	r1, r1, #12
 800e2f6:	035b      	lsls	r3, r3, #13
 800e2f8:	4319      	orrs	r1, r3
 800e2fa:	07c3      	lsls	r3, r0, #31
 800e2fc:	d503      	bpl.n	800e306 <__ieee754_sqrt+0x76>
 800e2fe:	0fd3      	lsrs	r3, r2, #31
 800e300:	0049      	lsls	r1, r1, #1
 800e302:	18c9      	adds	r1, r1, r3
 800e304:	0052      	lsls	r2, r2, #1
 800e306:	2400      	movs	r4, #0
 800e308:	1043      	asrs	r3, r0, #1
 800e30a:	0049      	lsls	r1, r1, #1
 800e30c:	9301      	str	r3, [sp, #4]
 800e30e:	2580      	movs	r5, #128	; 0x80
 800e310:	0fd3      	lsrs	r3, r2, #31
 800e312:	18cb      	adds	r3, r1, r3
 800e314:	0020      	movs	r0, r4
 800e316:	2116      	movs	r1, #22
 800e318:	0052      	lsls	r2, r2, #1
 800e31a:	03ad      	lsls	r5, r5, #14
 800e31c:	1946      	adds	r6, r0, r5
 800e31e:	429e      	cmp	r6, r3
 800e320:	dc02      	bgt.n	800e328 <__ieee754_sqrt+0x98>
 800e322:	1970      	adds	r0, r6, r5
 800e324:	1b9b      	subs	r3, r3, r6
 800e326:	1964      	adds	r4, r4, r5
 800e328:	0fd6      	lsrs	r6, r2, #31
 800e32a:	005b      	lsls	r3, r3, #1
 800e32c:	3901      	subs	r1, #1
 800e32e:	199b      	adds	r3, r3, r6
 800e330:	0052      	lsls	r2, r2, #1
 800e332:	086d      	lsrs	r5, r5, #1
 800e334:	2900      	cmp	r1, #0
 800e336:	d1f1      	bne.n	800e31c <__ieee754_sqrt+0x8c>
 800e338:	2520      	movs	r5, #32
 800e33a:	2680      	movs	r6, #128	; 0x80
 800e33c:	46ac      	mov	ip, r5
 800e33e:	9100      	str	r1, [sp, #0]
 800e340:	0636      	lsls	r6, r6, #24
 800e342:	9d00      	ldr	r5, [sp, #0]
 800e344:	1977      	adds	r7, r6, r5
 800e346:	4283      	cmp	r3, r0
 800e348:	dc02      	bgt.n	800e350 <__ieee754_sqrt+0xc0>
 800e34a:	d112      	bne.n	800e372 <__ieee754_sqrt+0xe2>
 800e34c:	4297      	cmp	r7, r2
 800e34e:	d810      	bhi.n	800e372 <__ieee754_sqrt+0xe2>
 800e350:	19bd      	adds	r5, r7, r6
 800e352:	9500      	str	r5, [sp, #0]
 800e354:	0005      	movs	r5, r0
 800e356:	2f00      	cmp	r7, #0
 800e358:	da03      	bge.n	800e362 <__ieee754_sqrt+0xd2>
 800e35a:	9d00      	ldr	r5, [sp, #0]
 800e35c:	43ed      	mvns	r5, r5
 800e35e:	0fed      	lsrs	r5, r5, #31
 800e360:	1945      	adds	r5, r0, r5
 800e362:	1a1b      	subs	r3, r3, r0
 800e364:	42ba      	cmp	r2, r7
 800e366:	4180      	sbcs	r0, r0
 800e368:	4240      	negs	r0, r0
 800e36a:	1a1b      	subs	r3, r3, r0
 800e36c:	0028      	movs	r0, r5
 800e36e:	1bd2      	subs	r2, r2, r7
 800e370:	1989      	adds	r1, r1, r6
 800e372:	0fd5      	lsrs	r5, r2, #31
 800e374:	005b      	lsls	r3, r3, #1
 800e376:	18eb      	adds	r3, r5, r3
 800e378:	2501      	movs	r5, #1
 800e37a:	426d      	negs	r5, r5
 800e37c:	44ac      	add	ip, r5
 800e37e:	4665      	mov	r5, ip
 800e380:	0052      	lsls	r2, r2, #1
 800e382:	0876      	lsrs	r6, r6, #1
 800e384:	2d00      	cmp	r5, #0
 800e386:	d1dc      	bne.n	800e342 <__ieee754_sqrt+0xb2>
 800e388:	4313      	orrs	r3, r2
 800e38a:	d003      	beq.n	800e394 <__ieee754_sqrt+0x104>
 800e38c:	1c4b      	adds	r3, r1, #1
 800e38e:	d127      	bne.n	800e3e0 <__ieee754_sqrt+0x150>
 800e390:	4661      	mov	r1, ip
 800e392:	3401      	adds	r4, #1
 800e394:	4b16      	ldr	r3, [pc, #88]	; (800e3f0 <__ieee754_sqrt+0x160>)
 800e396:	1060      	asrs	r0, r4, #1
 800e398:	18c0      	adds	r0, r0, r3
 800e39a:	0849      	lsrs	r1, r1, #1
 800e39c:	07e3      	lsls	r3, r4, #31
 800e39e:	d502      	bpl.n	800e3a6 <__ieee754_sqrt+0x116>
 800e3a0:	2380      	movs	r3, #128	; 0x80
 800e3a2:	061b      	lsls	r3, r3, #24
 800e3a4:	4319      	orrs	r1, r3
 800e3a6:	9b01      	ldr	r3, [sp, #4]
 800e3a8:	000d      	movs	r5, r1
 800e3aa:	051c      	lsls	r4, r3, #20
 800e3ac:	1823      	adds	r3, r4, r0
 800e3ae:	001c      	movs	r4, r3
 800e3b0:	e782      	b.n	800e2b8 <__ieee754_sqrt+0x28>
 800e3b2:	0ad1      	lsrs	r1, r2, #11
 800e3b4:	3b15      	subs	r3, #21
 800e3b6:	0552      	lsls	r2, r2, #21
 800e3b8:	2900      	cmp	r1, #0
 800e3ba:	d0fa      	beq.n	800e3b2 <__ieee754_sqrt+0x122>
 800e3bc:	2480      	movs	r4, #128	; 0x80
 800e3be:	0364      	lsls	r4, r4, #13
 800e3c0:	4221      	tst	r1, r4
 800e3c2:	d00a      	beq.n	800e3da <__ieee754_sqrt+0x14a>
 800e3c4:	2420      	movs	r4, #32
 800e3c6:	0016      	movs	r6, r2
 800e3c8:	1a24      	subs	r4, r4, r0
 800e3ca:	40e6      	lsrs	r6, r4
 800e3cc:	1e45      	subs	r5, r0, #1
 800e3ce:	4082      	lsls	r2, r0
 800e3d0:	4331      	orrs	r1, r6
 800e3d2:	1b58      	subs	r0, r3, r5
 800e3d4:	e78a      	b.n	800e2ec <__ieee754_sqrt+0x5c>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e7ee      	b.n	800e3b8 <__ieee754_sqrt+0x128>
 800e3da:	0049      	lsls	r1, r1, #1
 800e3dc:	3001      	adds	r0, #1
 800e3de:	e7ef      	b.n	800e3c0 <__ieee754_sqrt+0x130>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	3101      	adds	r1, #1
 800e3e4:	4399      	bics	r1, r3
 800e3e6:	e7d5      	b.n	800e394 <__ieee754_sqrt+0x104>
 800e3e8:	7ff00000 	.word	0x7ff00000
 800e3ec:	fffffc01 	.word	0xfffffc01
 800e3f0:	3fe00000 	.word	0x3fe00000

0800e3f4 <fabs>:
 800e3f4:	0049      	lsls	r1, r1, #1
 800e3f6:	084b      	lsrs	r3, r1, #1
 800e3f8:	0019      	movs	r1, r3
 800e3fa:	4770      	bx	lr

0800e3fc <finite>:
 800e3fc:	0048      	lsls	r0, r1, #1
 800e3fe:	4b02      	ldr	r3, [pc, #8]	; (800e408 <finite+0xc>)
 800e400:	0840      	lsrs	r0, r0, #1
 800e402:	18c0      	adds	r0, r0, r3
 800e404:	0fc0      	lsrs	r0, r0, #31
 800e406:	4770      	bx	lr
 800e408:	80100000 	.word	0x80100000

0800e40c <matherr>:
 800e40c:	2000      	movs	r0, #0
 800e40e:	4770      	bx	lr

0800e410 <nan>:
 800e410:	2000      	movs	r0, #0
 800e412:	4901      	ldr	r1, [pc, #4]	; (800e418 <nan+0x8>)
 800e414:	4770      	bx	lr
 800e416:	46c0      	nop			; (mov r8, r8)
 800e418:	7ff80000 	.word	0x7ff80000

0800e41c <rint>:
 800e41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e41e:	004a      	lsls	r2, r1, #1
 800e420:	4e3e      	ldr	r6, [pc, #248]	; (800e51c <rint+0x100>)
 800e422:	0d52      	lsrs	r2, r2, #21
 800e424:	b085      	sub	sp, #20
 800e426:	1996      	adds	r6, r2, r6
 800e428:	000d      	movs	r5, r1
 800e42a:	9101      	str	r1, [sp, #4]
 800e42c:	0003      	movs	r3, r0
 800e42e:	0fcc      	lsrs	r4, r1, #31
 800e430:	2e13      	cmp	r6, #19
 800e432:	dc57      	bgt.n	800e4e4 <rint+0xc8>
 800e434:	2e00      	cmp	r6, #0
 800e436:	da2a      	bge.n	800e48e <rint+0x72>
 800e438:	004a      	lsls	r2, r1, #1
 800e43a:	0852      	lsrs	r2, r2, #1
 800e43c:	4302      	orrs	r2, r0
 800e43e:	d024      	beq.n	800e48a <rint+0x6e>
 800e440:	030a      	lsls	r2, r1, #12
 800e442:	0b12      	lsrs	r2, r2, #12
 800e444:	4302      	orrs	r2, r0
 800e446:	4253      	negs	r3, r2
 800e448:	4313      	orrs	r3, r2
 800e44a:	2280      	movs	r2, #128	; 0x80
 800e44c:	0c4d      	lsrs	r5, r1, #17
 800e44e:	0312      	lsls	r2, r2, #12
 800e450:	0b1b      	lsrs	r3, r3, #12
 800e452:	4013      	ands	r3, r2
 800e454:	046d      	lsls	r5, r5, #17
 800e456:	432b      	orrs	r3, r5
 800e458:	0019      	movs	r1, r3
 800e45a:	4b31      	ldr	r3, [pc, #196]	; (800e520 <rint+0x104>)
 800e45c:	00e2      	lsls	r2, r4, #3
 800e45e:	189b      	adds	r3, r3, r2
 800e460:	681e      	ldr	r6, [r3, #0]
 800e462:	685f      	ldr	r7, [r3, #4]
 800e464:	0002      	movs	r2, r0
 800e466:	000b      	movs	r3, r1
 800e468:	0030      	movs	r0, r6
 800e46a:	0039      	movs	r1, r7
 800e46c:	f7f2 fbd8 	bl	8000c20 <__aeabi_dadd>
 800e470:	9002      	str	r0, [sp, #8]
 800e472:	9103      	str	r1, [sp, #12]
 800e474:	9802      	ldr	r0, [sp, #8]
 800e476:	9903      	ldr	r1, [sp, #12]
 800e478:	003b      	movs	r3, r7
 800e47a:	0032      	movs	r2, r6
 800e47c:	f7f3 fd68 	bl	8001f50 <__aeabi_dsub>
 800e480:	004b      	lsls	r3, r1, #1
 800e482:	085b      	lsrs	r3, r3, #1
 800e484:	07e4      	lsls	r4, r4, #31
 800e486:	4323      	orrs	r3, r4
 800e488:	0019      	movs	r1, r3
 800e48a:	b005      	add	sp, #20
 800e48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e48e:	4a25      	ldr	r2, [pc, #148]	; (800e524 <rint+0x108>)
 800e490:	4132      	asrs	r2, r6
 800e492:	0017      	movs	r7, r2
 800e494:	400f      	ands	r7, r1
 800e496:	4307      	orrs	r7, r0
 800e498:	d0f7      	beq.n	800e48a <rint+0x6e>
 800e49a:	0852      	lsrs	r2, r2, #1
 800e49c:	0011      	movs	r1, r2
 800e49e:	4029      	ands	r1, r5
 800e4a0:	430b      	orrs	r3, r1
 800e4a2:	d00a      	beq.n	800e4ba <rint+0x9e>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	2e13      	cmp	r6, #19
 800e4a8:	d101      	bne.n	800e4ae <rint+0x92>
 800e4aa:	2380      	movs	r3, #128	; 0x80
 800e4ac:	061b      	lsls	r3, r3, #24
 800e4ae:	2780      	movs	r7, #128	; 0x80
 800e4b0:	02ff      	lsls	r7, r7, #11
 800e4b2:	4137      	asrs	r7, r6
 800e4b4:	4395      	bics	r5, r2
 800e4b6:	432f      	orrs	r7, r5
 800e4b8:	9701      	str	r7, [sp, #4]
 800e4ba:	9901      	ldr	r1, [sp, #4]
 800e4bc:	001a      	movs	r2, r3
 800e4be:	000b      	movs	r3, r1
 800e4c0:	4917      	ldr	r1, [pc, #92]	; (800e520 <rint+0x104>)
 800e4c2:	00e4      	lsls	r4, r4, #3
 800e4c4:	190c      	adds	r4, r1, r4
 800e4c6:	6865      	ldr	r5, [r4, #4]
 800e4c8:	6824      	ldr	r4, [r4, #0]
 800e4ca:	0020      	movs	r0, r4
 800e4cc:	0029      	movs	r1, r5
 800e4ce:	f7f2 fba7 	bl	8000c20 <__aeabi_dadd>
 800e4d2:	9002      	str	r0, [sp, #8]
 800e4d4:	9103      	str	r1, [sp, #12]
 800e4d6:	9802      	ldr	r0, [sp, #8]
 800e4d8:	9903      	ldr	r1, [sp, #12]
 800e4da:	0022      	movs	r2, r4
 800e4dc:	002b      	movs	r3, r5
 800e4de:	f7f3 fd37 	bl	8001f50 <__aeabi_dsub>
 800e4e2:	e7d2      	b.n	800e48a <rint+0x6e>
 800e4e4:	2e33      	cmp	r6, #51	; 0x33
 800e4e6:	dd08      	ble.n	800e4fa <rint+0xde>
 800e4e8:	2380      	movs	r3, #128	; 0x80
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	429e      	cmp	r6, r3
 800e4ee:	d1cc      	bne.n	800e48a <rint+0x6e>
 800e4f0:	0002      	movs	r2, r0
 800e4f2:	000b      	movs	r3, r1
 800e4f4:	f7f2 fb94 	bl	8000c20 <__aeabi_dadd>
 800e4f8:	e7c7      	b.n	800e48a <rint+0x6e>
 800e4fa:	2601      	movs	r6, #1
 800e4fc:	4d0a      	ldr	r5, [pc, #40]	; (800e528 <rint+0x10c>)
 800e4fe:	4276      	negs	r6, r6
 800e500:	1952      	adds	r2, r2, r5
 800e502:	40d6      	lsrs	r6, r2
 800e504:	4206      	tst	r6, r0
 800e506:	d0c0      	beq.n	800e48a <rint+0x6e>
 800e508:	0876      	lsrs	r6, r6, #1
 800e50a:	4206      	tst	r6, r0
 800e50c:	d0d5      	beq.n	800e4ba <rint+0x9e>
 800e50e:	2180      	movs	r1, #128	; 0x80
 800e510:	05c9      	lsls	r1, r1, #23
 800e512:	4111      	asrs	r1, r2
 800e514:	43b3      	bics	r3, r6
 800e516:	430b      	orrs	r3, r1
 800e518:	e7cf      	b.n	800e4ba <rint+0x9e>
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	fffffc01 	.word	0xfffffc01
 800e520:	0800edd0 	.word	0x0800edd0
 800e524:	000fffff 	.word	0x000fffff
 800e528:	fffffbed 	.word	0xfffffbed

0800e52c <scalbn>:
 800e52c:	004b      	lsls	r3, r1, #1
 800e52e:	b570      	push	{r4, r5, r6, lr}
 800e530:	0d5b      	lsrs	r3, r3, #21
 800e532:	0014      	movs	r4, r2
 800e534:	000a      	movs	r2, r1
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10d      	bne.n	800e556 <scalbn+0x2a>
 800e53a:	004b      	lsls	r3, r1, #1
 800e53c:	085b      	lsrs	r3, r3, #1
 800e53e:	4303      	orrs	r3, r0
 800e540:	d010      	beq.n	800e564 <scalbn+0x38>
 800e542:	4b21      	ldr	r3, [pc, #132]	; (800e5c8 <scalbn+0x9c>)
 800e544:	2200      	movs	r2, #0
 800e546:	f7f3 fa91 	bl	8001a6c <__aeabi_dmul>
 800e54a:	4b20      	ldr	r3, [pc, #128]	; (800e5cc <scalbn+0xa0>)
 800e54c:	429c      	cmp	r4, r3
 800e54e:	da0a      	bge.n	800e566 <scalbn+0x3a>
 800e550:	4a1f      	ldr	r2, [pc, #124]	; (800e5d0 <scalbn+0xa4>)
 800e552:	4b20      	ldr	r3, [pc, #128]	; (800e5d4 <scalbn+0xa8>)
 800e554:	e017      	b.n	800e586 <scalbn+0x5a>
 800e556:	4d20      	ldr	r5, [pc, #128]	; (800e5d8 <scalbn+0xac>)
 800e558:	42ab      	cmp	r3, r5
 800e55a:	d108      	bne.n	800e56e <scalbn+0x42>
 800e55c:	0002      	movs	r2, r0
 800e55e:	000b      	movs	r3, r1
 800e560:	f7f2 fb5e 	bl	8000c20 <__aeabi_dadd>
 800e564:	bd70      	pop	{r4, r5, r6, pc}
 800e566:	000a      	movs	r2, r1
 800e568:	004b      	lsls	r3, r1, #1
 800e56a:	0d5b      	lsrs	r3, r3, #21
 800e56c:	3b36      	subs	r3, #54	; 0x36
 800e56e:	4d1b      	ldr	r5, [pc, #108]	; (800e5dc <scalbn+0xb0>)
 800e570:	18e3      	adds	r3, r4, r3
 800e572:	42ab      	cmp	r3, r5
 800e574:	dd0a      	ble.n	800e58c <scalbn+0x60>
 800e576:	0002      	movs	r2, r0
 800e578:	000b      	movs	r3, r1
 800e57a:	4819      	ldr	r0, [pc, #100]	; (800e5e0 <scalbn+0xb4>)
 800e57c:	4919      	ldr	r1, [pc, #100]	; (800e5e4 <scalbn+0xb8>)
 800e57e:	f000 f839 	bl	800e5f4 <copysign>
 800e582:	4a17      	ldr	r2, [pc, #92]	; (800e5e0 <scalbn+0xb4>)
 800e584:	4b17      	ldr	r3, [pc, #92]	; (800e5e4 <scalbn+0xb8>)
 800e586:	f7f3 fa71 	bl	8001a6c <__aeabi_dmul>
 800e58a:	e7eb      	b.n	800e564 <scalbn+0x38>
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	dd05      	ble.n	800e59c <scalbn+0x70>
 800e590:	4c15      	ldr	r4, [pc, #84]	; (800e5e8 <scalbn+0xbc>)
 800e592:	051b      	lsls	r3, r3, #20
 800e594:	4022      	ands	r2, r4
 800e596:	431a      	orrs	r2, r3
 800e598:	0011      	movs	r1, r2
 800e59a:	e7e3      	b.n	800e564 <scalbn+0x38>
 800e59c:	001d      	movs	r5, r3
 800e59e:	3535      	adds	r5, #53	; 0x35
 800e5a0:	da09      	bge.n	800e5b6 <scalbn+0x8a>
 800e5a2:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <scalbn+0xc0>)
 800e5a4:	0002      	movs	r2, r0
 800e5a6:	429c      	cmp	r4, r3
 800e5a8:	dce6      	bgt.n	800e578 <scalbn+0x4c>
 800e5aa:	000b      	movs	r3, r1
 800e5ac:	4808      	ldr	r0, [pc, #32]	; (800e5d0 <scalbn+0xa4>)
 800e5ae:	4909      	ldr	r1, [pc, #36]	; (800e5d4 <scalbn+0xa8>)
 800e5b0:	f000 f820 	bl	800e5f4 <copysign>
 800e5b4:	e7cc      	b.n	800e550 <scalbn+0x24>
 800e5b6:	4c0c      	ldr	r4, [pc, #48]	; (800e5e8 <scalbn+0xbc>)
 800e5b8:	3336      	adds	r3, #54	; 0x36
 800e5ba:	4022      	ands	r2, r4
 800e5bc:	051b      	lsls	r3, r3, #20
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	0019      	movs	r1, r3
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	4b0a      	ldr	r3, [pc, #40]	; (800e5f0 <scalbn+0xc4>)
 800e5c6:	e7de      	b.n	800e586 <scalbn+0x5a>
 800e5c8:	43500000 	.word	0x43500000
 800e5cc:	ffff3cb0 	.word	0xffff3cb0
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	01a56e1f 	.word	0x01a56e1f
 800e5d8:	000007ff 	.word	0x000007ff
 800e5dc:	000007fe 	.word	0x000007fe
 800e5e0:	8800759c 	.word	0x8800759c
 800e5e4:	7e37e43c 	.word	0x7e37e43c
 800e5e8:	800fffff 	.word	0x800fffff
 800e5ec:	0000c350 	.word	0x0000c350
 800e5f0:	3c900000 	.word	0x3c900000

0800e5f4 <copysign>:
 800e5f4:	b530      	push	{r4, r5, lr}
 800e5f6:	004a      	lsls	r2, r1, #1
 800e5f8:	0fdb      	lsrs	r3, r3, #31
 800e5fa:	07db      	lsls	r3, r3, #31
 800e5fc:	0852      	lsrs	r2, r2, #1
 800e5fe:	431a      	orrs	r2, r3
 800e600:	0011      	movs	r1, r2
 800e602:	bd30      	pop	{r4, r5, pc}

0800e604 <_gettimeofday>:
 800e604:	2258      	movs	r2, #88	; 0x58
 800e606:	2001      	movs	r0, #1
 800e608:	4b01      	ldr	r3, [pc, #4]	; (800e610 <_gettimeofday+0xc>)
 800e60a:	4240      	negs	r0, r0
 800e60c:	601a      	str	r2, [r3, #0]
 800e60e:	4770      	bx	lr
 800e610:	200004cc 	.word	0x200004cc

0800e614 <_init>:
 800e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e616:	46c0      	nop			; (mov r8, r8)
 800e618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61a:	bc08      	pop	{r3}
 800e61c:	469e      	mov	lr, r3
 800e61e:	4770      	bx	lr

0800e620 <_fini>:
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e622:	46c0      	nop			; (mov r8, r8)
 800e624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e626:	bc08      	pop	{r3}
 800e628:	469e      	mov	lr, r3
 800e62a:	4770      	bx	lr
