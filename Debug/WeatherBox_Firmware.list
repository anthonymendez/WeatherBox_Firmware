
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800325c  0800325c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800325c  0800325c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800325c  0800325c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000068  080032cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080032cc  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e9e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018b5  00000000  00000000  00029f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  0002b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002c220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e10  00000000  00000000  0002cb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b60  00000000  00000000  00041990  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000800bf  00000000  00000000  000494f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c95af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac4  00000000  00000000  000c962c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003184 	.word	0x08003184

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003184 	.word	0x08003184

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb7e 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f810 	bl	800024c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  printf("Sys_Inited");
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <main+0x28>)
 800022e:	0018      	movs	r0, r3
 8000230:	f002 f890 	bl	8002354 <iprintf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f916 	bl	8000464 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000238:	f000 f86a 	bl	8000310 <MX_SPI1_Init>
  MX_TIM2_Init();
 800023c:	f000 f8a0 	bl	8000380 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000240:	f000 f858 	bl	80002f4 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x24>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	0800319c 	.word	0x0800319c

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b095      	sub	sp, #84	; 0x54
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	2418      	movs	r4, #24
 8000254:	193b      	adds	r3, r7, r4
 8000256:	0018      	movs	r0, r3
 8000258:	2338      	movs	r3, #56	; 0x38
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 f871 	bl	8002344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	0018      	movs	r0, r3
 8000266:	2314      	movs	r3, #20
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f002 f86a 	bl	8002344 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000270:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <SystemClock_Config+0xa0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1e      	ldr	r2, [pc, #120]	; (80002f0 <SystemClock_Config+0xa4>)
 8000276:	401a      	ands	r2, r3
 8000278:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <SystemClock_Config+0xa0>)
 800027a:	2180      	movs	r1, #128	; 0x80
 800027c:	0109      	lsls	r1, r1, #4
 800027e:	430a      	orrs	r2, r1
 8000280:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000282:	0021      	movs	r1, r4
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2210      	movs	r2, #16
 8000288:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2201      	movs	r2, #1
 800028e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2200      	movs	r2, #0
 8000294:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	22a0      	movs	r2, #160	; 0xa0
 800029a:	0212      	lsls	r2, r2, #8
 800029c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fe18 	bl	8000edc <HAL_RCC_OscConfig>
 80002ac:	1e03      	subs	r3, r0, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002b0:	f000 f97c 	bl	80005ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	220f      	movs	r2, #15
 80002b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f9d0 	bl	800167c <HAL_RCC_ClockConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002e0:	f000 f964 	bl	80005ac <Error_Handler>
  }
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b015      	add	sp, #84	; 0x54
 80002ea:	bd90      	pop	{r4, r7, pc}
 80002ec:	40007000 	.word	0x40007000
 80002f0:	ffffe7ff 	.word	0xffffe7ff

080002f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2101      	movs	r1, #1
 80002fc:	200f      	movs	r0, #15
 80002fe:	f000 fc0d 	bl	8000b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000302:	200f      	movs	r0, #15
 8000304:	f000 fc1f 	bl	8000b46 <HAL_NVIC_EnableIRQ>
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_SPI1_Init+0x68>)
 8000316:	4a19      	ldr	r2, [pc, #100]	; (800037c <MX_SPI1_Init+0x6c>)
 8000318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_SPI1_Init+0x68>)
 800031c:	2282      	movs	r2, #130	; 0x82
 800031e:	0052      	lsls	r2, r2, #1
 8000320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_SPI1_Init+0x68>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_SPI1_Init+0x68>)
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	0112      	lsls	r2, r2, #4
 800032e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_SPI1_Init+0x68>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_SPI1_Init+0x68>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_SPI1_Init+0x68>)
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	02d2      	lsls	r2, r2, #11
 8000342:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_SPI1_Init+0x68>)
 8000346:	2230      	movs	r2, #48	; 0x30
 8000348:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_SPI1_Init+0x68>)
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_SPI1_Init+0x68>)
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_SPI1_Init+0x68>)
 8000358:	2200      	movs	r2, #0
 800035a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_SPI1_Init+0x68>)
 800035e:	2207      	movs	r2, #7
 8000360:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_SPI1_Init+0x68>)
 8000364:	0018      	movs	r0, r3
 8000366:	f001 fb37 	bl	80019d8 <HAL_SPI_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800036e:	f000 f91d 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000090 	.word	0x20000090
 800037c:	40013000 	.word	0x40013000

08000380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08c      	sub	sp, #48	; 0x30
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	2320      	movs	r3, #32
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	0018      	movs	r0, r3
 800038c:	2310      	movs	r3, #16
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f001 ffd7 	bl	8002344 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000396:	230c      	movs	r3, #12
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	0018      	movs	r0, r3
 800039c:	2314      	movs	r3, #20
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f001 ffcf 	bl	8002344 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	0018      	movs	r0, r3
 80003aa:	2308      	movs	r3, #8
 80003ac:	001a      	movs	r2, r3
 80003ae:	2100      	movs	r1, #0
 80003b0:	f001 ffc8 	bl	8002344 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003b4:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003b6:	2280      	movs	r2, #128	; 0x80
 80003b8:	05d2      	lsls	r2, r2, #23
 80003ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 512;
 80003bc:	4b28      	ldr	r3, [pc, #160]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	0092      	lsls	r2, r2, #2
 80003c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003cc:	22fa      	movs	r2, #250	; 0xfa
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d2:	4b23      	ldr	r3, [pc, #140]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003de:	4b20      	ldr	r3, [pc, #128]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fb63 	bl	8001aac <HAL_TIM_Base_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f8df 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ee:	2120      	movs	r1, #32
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	0152      	lsls	r2, r2, #5
 80003f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003f8:	187a      	adds	r2, r7, r1
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_TIM2_Init+0xe0>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 fc8a 	bl	8001d18 <HAL_TIM_ConfigClockSource>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000408:	f000 f8d0 	bl	80005ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800040c:	210c      	movs	r1, #12
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800041a:	187a      	adds	r2, r7, r1
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_TIM2_Init+0xe0>)
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f001 fd37 	bl	8001e94 <HAL_TIM_SlaveConfigSynchro>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800042a:	f000 f8bf 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043a:	1d3a      	adds	r2, r7, #4
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_TIM2_Init+0xe0>)
 800043e:	0011      	movs	r1, r2
 8000440:	0018      	movs	r0, r3
 8000442:	f001 ff11 	bl	8002268 <HAL_TIMEx_MasterConfigSynchronization>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800044a:	f000 f8af 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <MX_TIM2_Init+0xe0>)
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fb57 	bl	8001b04 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b00c      	add	sp, #48	; 0x30
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	200000e8 	.word	0x200000e8

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b08b      	sub	sp, #44	; 0x2c
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	2414      	movs	r4, #20
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2314      	movs	r3, #20
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f001 ff65 	bl	8002344 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b48      	ldr	r3, [pc, #288]	; (800059c <MX_GPIO_Init+0x138>)
 800047c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800047e:	4b47      	ldr	r3, [pc, #284]	; (800059c <MX_GPIO_Init+0x138>)
 8000480:	2104      	movs	r1, #4
 8000482:	430a      	orrs	r2, r1
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
 8000486:	4b45      	ldr	r3, [pc, #276]	; (800059c <MX_GPIO_Init+0x138>)
 8000488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048a:	2204      	movs	r2, #4
 800048c:	4013      	ands	r3, r2
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000492:	4b42      	ldr	r3, [pc, #264]	; (800059c <MX_GPIO_Init+0x138>)
 8000494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000496:	4b41      	ldr	r3, [pc, #260]	; (800059c <MX_GPIO_Init+0x138>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	430a      	orrs	r2, r1
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
 800049e:	4b3f      	ldr	r3, [pc, #252]	; (800059c <MX_GPIO_Init+0x138>)
 80004a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b3c      	ldr	r3, [pc, #240]	; (800059c <MX_GPIO_Init+0x138>)
 80004ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ae:	4b3b      	ldr	r3, [pc, #236]	; (800059c <MX_GPIO_Init+0x138>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004b6:	4b39      	ldr	r3, [pc, #228]	; (800059c <MX_GPIO_Init+0x138>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b36      	ldr	r3, [pc, #216]	; (800059c <MX_GPIO_Init+0x138>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c6:	4b35      	ldr	r3, [pc, #212]	; (800059c <MX_GPIO_Init+0x138>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ce:	4b33      	ldr	r3, [pc, #204]	; (800059c <MX_GPIO_Init+0x138>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d2:	2202      	movs	r2, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fcca 	bl	8000e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	019b      	lsls	r3, r3, #6
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <MX_GPIO_Init+0x13c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0019      	movs	r1, r3
 80004f2:	f000 fcc3 	bl	8000e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	0192      	lsls	r2, r2, #6
 80004fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	4a28      	ldr	r2, [pc, #160]	; (80005a4 <MX_GPIO_Init+0x140>)
 8000502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800050a:	193b      	adds	r3, r7, r4
 800050c:	4a26      	ldr	r2, [pc, #152]	; (80005a8 <MX_GPIO_Init+0x144>)
 800050e:	0019      	movs	r1, r3
 8000510:	0010      	movs	r0, r2
 8000512:	f000 fb35 	bl	8000b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	220c      	movs	r2, #12
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2202      	movs	r2, #2
 8000520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2203      	movs	r2, #3
 800052c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2204      	movs	r2, #4
 8000532:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	193a      	adds	r2, r7, r4
 8000536:	23a0      	movs	r3, #160	; 0xa0
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fb1f 	bl	8000b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2220      	movs	r2, #32
 8000548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 800055c:	000c      	movs	r4, r1
 800055e:	187a      	adds	r2, r7, r1
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fb0a 	bl	8000b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	0192      	lsls	r2, r2, #6
 8000574:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2201      	movs	r2, #1
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000588:	187b      	adds	r3, r7, r1
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <MX_GPIO_Init+0x13c>)
 800058c:	0019      	movs	r1, r3
 800058e:	0010      	movs	r0, r2
 8000590:	f000 faf6 	bl	8000b80 <HAL_GPIO_Init>

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b00b      	add	sp, #44	; 0x2c
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	50000400 	.word	0x50000400
 80005a4:	10210000 	.word	0x10210000
 80005a8:	50000800 	.word	0x50000800

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_MspInit+0x24>)
 80005be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_MspInit+0x24>)
 80005c2:	2101      	movs	r1, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_MspInit+0x24>)
 80005ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_MspInit+0x24>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0549      	lsls	r1, r1, #21
 80005d2:	430a      	orrs	r2, r1
 80005d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b08b      	sub	sp, #44	; 0x2c
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	2314      	movs	r3, #20
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	0018      	movs	r0, r3
 80005ee:	2314      	movs	r3, #20
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f001 fea6 	bl	8002344 <memset>
  if(hspi->Instance==SPI1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <HAL_SPI_MspInit+0xc4>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d14b      	bne.n	800069a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 8000604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0149      	lsls	r1, r1, #5
 800060c:	430a      	orrs	r2, r1
 800060e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 8000612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 8000616:	2101      	movs	r1, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 800061e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000620:	2201      	movs	r2, #1
 8000622:	4013      	ands	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 800062a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 800062e:	2102      	movs	r1, #2
 8000630:	430a      	orrs	r2, r1
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_SPI_MspInit+0xc8>)
 8000636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000638:	2202      	movs	r2, #2
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000640:	2414      	movs	r4, #20
 8000642:	193b      	adds	r3, r7, r4
 8000644:	22d0      	movs	r2, #208	; 0xd0
 8000646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2202      	movs	r2, #2
 800064c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2203      	movs	r2, #3
 8000658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	193a      	adds	r2, r7, r4
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fa89 	bl	8000b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800066e:	0021      	movs	r1, r4
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2208      	movs	r2, #8
 8000674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2203      	movs	r2, #3
 8000686:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	187b      	adds	r3, r7, r1
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_SPI_MspInit+0xcc>)
 8000692:	0019      	movs	r1, r3
 8000694:	0010      	movs	r0, r2
 8000696:	f000 fa73 	bl	8000b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b00b      	add	sp, #44	; 0x2c
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40013000 	.word	0x40013000
 80006a8:	40021000 	.word	0x40021000
 80006ac:	50000400 	.word	0x50000400

080006b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d105      	bne.n	80006d0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <HAL_TIM_Base_MspInit+0x28>)
 80006c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_TIM_Base_MspInit+0x28>)
 80006ca:	2101      	movs	r1, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <TIM2_IRQHandler+0x20>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fa18 	bl	8001b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8000718:	23a0      	movs	r3, #160	; 0xa0
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2120      	movs	r1, #32
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fbc9 	bl	8000eb6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	200000e8 	.word	0x200000e8

08000730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e00a      	b.n	8000758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000742:	e000      	b.n	8000746 <_read+0x16>
 8000744:	bf00      	nop
 8000746:	0001      	movs	r1, r0
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	60ba      	str	r2, [r7, #8]
 800074e:	b2ca      	uxtb	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbf0      	blt.n	8000742 <_read+0x12>
	}

return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b006      	add	sp, #24
 8000768:	bd80      	pop	{r7, pc}

0800076a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	e009      	b.n	8000790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	60ba      	str	r2, [r7, #8]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	e000      	b.n	800078a <_write+0x20>
 8000788:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf1      	blt.n	800077c <_write+0x12>
	}
	return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	0018      	movs	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	b006      	add	sp, #24
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_close>:

int _close(int file)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	return -1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	425b      	negs	r3, r3
}
 80007ae:	0018      	movs	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	605a      	str	r2, [r3, #4]
	return 0;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_isatty>:

int _isatty(int file)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	return 1;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	0018      	movs	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x50>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x16>
		heap_end = &end;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <_sbrk+0x50>)
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <_sbrk+0x54>)
 8000810:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <_sbrk+0x50>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <_sbrk+0x50>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	18d3      	adds	r3, r2, r3
 8000820:	466a      	mov	r2, sp
 8000822:	4293      	cmp	r3, r2
 8000824:	d907      	bls.n	8000836 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000826:	f001 fd63 	bl	80022f0 <__errno>
 800082a:	0003      	movs	r3, r0
 800082c:	220c      	movs	r2, #12
 800082e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000830:	2301      	movs	r3, #1
 8000832:	425b      	negs	r3, r3
 8000834:	e006      	b.n	8000844 <_sbrk+0x48>
	}

	heap_end += incr;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <_sbrk+0x50>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	18d2      	adds	r2, r2, r3
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <_sbrk+0x50>)
 8000840:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000084 	.word	0x20000084
 8000850:	20000130 	.word	0x20000130

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <SystemInit+0x64>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <SystemInit+0x64>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	0049      	lsls	r1, r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <SystemInit+0x64>)
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <SystemInit+0x64>)
 800086c:	4913      	ldr	r1, [pc, #76]	; (80008bc <SystemInit+0x68>)
 800086e:	400a      	ands	r2, r1
 8000870:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <SystemInit+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <SystemInit+0x64>)
 8000878:	4911      	ldr	r1, [pc, #68]	; (80008c0 <SystemInit+0x6c>)
 800087a:	400a      	ands	r2, r1
 800087c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <SystemInit+0x64>)
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <SystemInit+0x64>)
 8000884:	2101      	movs	r1, #1
 8000886:	438a      	bics	r2, r1
 8000888:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <SystemInit+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <SystemInit+0x64>)
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <SystemInit+0x70>)
 8000892:	400a      	ands	r2, r1
 8000894:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <SystemInit+0x64>)
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <SystemInit+0x64>)
 800089c:	490a      	ldr	r1, [pc, #40]	; (80008c8 <SystemInit+0x74>)
 800089e:	400a      	ands	r2, r1
 80008a0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SystemInit+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SystemInit+0x78>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0512      	lsls	r2, r2, #20
 80008ae:	609a      	str	r2, [r3, #8]
#endif
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40021000 	.word	0x40021000
 80008bc:	88ff400c 	.word	0x88ff400c
 80008c0:	fef6fff6 	.word	0xfef6fff6
 80008c4:	fffbffff 	.word	0xfffbffff
 80008c8:	ff02ffff 	.word	0xff02ffff
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80008d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008d6:	e003      	b.n	80008e0 <LoopCopyDataInit>

080008d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80008da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008de:	3104      	adds	r1, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <LoopForever+0xa>)
  ldr  r3, =_edata
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <LoopForever+0xe>)
  adds  r2, r0, r1
 80008e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008e8:	d3f6      	bcc.n	80008d8 <CopyDataInit>
  ldr  r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopForever+0x12>)
  b  LoopFillZerobss
 80008ec:	e002      	b.n	80008f4 <LoopFillZerobss>

080008ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80008ee:	2300      	movs	r3, #0
  str  r3, [r2]
 80008f0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f2:	3204      	adds	r2, #4

080008f4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <LoopForever+0x16>)
  cmp  r2, r3
 80008f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008f8:	d3f9      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008fa:	f7ff ffab 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f001 fcfd 	bl	80022fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fc8d 	bl	8000220 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
   ldr   r0, =_estack
 8000908:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800090c:	08003264 	.word	0x08003264
  ldr  r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000914:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000918:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 800091c:	2000012c 	.word	0x2000012c

08000920 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_COMP_IRQHandler>
	...

08000924 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x3c>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Init+0x3c>)
 8000936:	2140      	movs	r1, #64	; 0x40
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093c:	2000      	movs	r0, #0
 800093e:	f000 f811 	bl	8000964 <HAL_InitTick>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d003      	beq.n	800094e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e001      	b.n	8000952 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800094e:	f7ff fe33 	bl	80005b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	230f      	movs	r3, #15
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_InitTick+0x50>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	23fa      	movs	r3, #250	; 0xfa
 800097a:	0099      	lsls	r1, r3, #2
 800097c:	0010      	movs	r0, r2
 800097e:	f7ff fbc3 	bl	8000108 <__udivsi3>
 8000982:	0003      	movs	r3, r0
 8000984:	0018      	movs	r0, r3
 8000986:	f000 f8ee 	bl	8000b66 <HAL_SYSTICK_Config>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d004      	beq.n	8000998 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800098e:	230f      	movs	r3, #15
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e006      	b.n	80009a6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	2301      	movs	r3, #1
 800099c:	425b      	negs	r3, r3
 800099e:	2200      	movs	r2, #0
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 f8bb 	bl	8000b1c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80009a6:	230f      	movs	r3, #15
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	781b      	ldrb	r3, [r3, #0]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b004      	add	sp, #16
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <HAL_GetTick+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000124 	.word	0x20000124

080009cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	231f      	movs	r3, #31
 80009e0:	401a      	ands	r2, r3
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <NVIC_EnableIRQ+0x28>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	4091      	lsls	r1, r2
 80009e8:	000a      	movs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	0002      	movs	r2, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0c:	d932      	bls.n	8000a74 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <NVIC_SetPriority+0xd4>)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	0019      	movs	r1, r3
 8000a16:	230f      	movs	r3, #15
 8000a18:	400b      	ands	r3, r1
 8000a1a:	3b08      	subs	r3, #8
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3306      	adds	r3, #6
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	3304      	adds	r3, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	1dfa      	adds	r2, r7, #7
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	2203      	movs	r2, #3
 8000a30:	400a      	ands	r2, r1
 8000a32:	00d2      	lsls	r2, r2, #3
 8000a34:	21ff      	movs	r1, #255	; 0xff
 8000a36:	4091      	lsls	r1, r2
 8000a38:	000a      	movs	r2, r1
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	019b      	lsls	r3, r3, #6
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	401a      	ands	r2, r3
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2303      	movs	r3, #3
 8000a50:	4003      	ands	r3, r0
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a56:	481d      	ldr	r0, [pc, #116]	; (8000acc <NVIC_SetPriority+0xd4>)
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	001c      	movs	r4, r3
 8000a5e:	230f      	movs	r3, #15
 8000a60:	4023      	ands	r3, r4
 8000a62:	3b08      	subs	r3, #8
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	3306      	adds	r3, #6
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	18c3      	adds	r3, r0, r3
 8000a6e:	3304      	adds	r3, #4
 8000a70:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a72:	e027      	b.n	8000ac4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <NVIC_SetPriority+0xd8>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	33c0      	adds	r3, #192	; 0xc0
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	589b      	ldr	r3, [r3, r2]
 8000a84:	1dfa      	adds	r2, r7, #7
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	0011      	movs	r1, r2
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	00d2      	lsls	r2, r2, #3
 8000a90:	21ff      	movs	r1, #255	; 0xff
 8000a92:	4091      	lsls	r1, r2
 8000a94:	000a      	movs	r2, r1
 8000a96:	43d2      	mvns	r2, r2
 8000a98:	401a      	ands	r2, r3
 8000a9a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	019b      	lsls	r3, r3, #6
 8000aa0:	22ff      	movs	r2, #255	; 0xff
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2303      	movs	r3, #3
 8000aac:	4003      	ands	r3, r0
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <NVIC_SetPriority+0xd8>)
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	430a      	orrs	r2, r1
 8000abe:	33c0      	adds	r3, #192	; 0xc0
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	501a      	str	r2, [r3, r0]
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <SysTick_Config+0x40>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d901      	bls.n	8000aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e010      	b.n	8000b0c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <SysTick_Config+0x44>)
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	3a01      	subs	r2, #1
 8000af0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af2:	2301      	movs	r3, #1
 8000af4:	425b      	negs	r3, r3
 8000af6:	2103      	movs	r1, #3
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff ff7d 	bl	80009f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SysTick_Config+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x44>)
 8000b06:	2207      	movs	r2, #7
 8000b08:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	00ffffff 	.word	0x00ffffff
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	210f      	movs	r1, #15
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	1c02      	adds	r2, r0, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <NVIC_SetPriority>
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	0002      	movs	r2, r0
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b25b      	sxtb	r3, r3
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ff37 	bl	80009cc <NVIC_EnableIRQ>
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ffaf 	bl	8000ad4 <SysTick_Config>
 8000b76:	0003      	movs	r3, r0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b96:	e155      	b.n	8000e44 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <HAL_GPIO_Init+0x30>
 8000bae:	e146      	b.n	8000e3e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x40>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b12      	cmp	r3, #18
 8000bbe:	d123      	bne.n	8000c08 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	58d3      	ldr	r3, [r2, r3]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	43da      	mvns	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2107      	movs	r1, #7
 8000bec:	400b      	ands	r3, r1
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	409a      	lsls	r2, r3
 8000bf2:	0013      	movs	r3, r2
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	08da      	lsrs	r2, r3, #3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3208      	adds	r2, #8
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	6939      	ldr	r1, [r7, #16]
 8000c06:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d00b      	beq.n	8000c28 <HAL_GPIO_Init+0xa8>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d007      	beq.n	8000c28 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1c:	2b11      	cmp	r3, #17
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b12      	cmp	r3, #18
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	43da      	mvns	r2, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	2201      	movs	r2, #1
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	401a      	ands	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	055b      	lsls	r3, r3, #21
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d100      	bne.n	8000cfc <HAL_GPIO_Init+0x17c>
 8000cfa:	e0a0      	b.n	8000e3e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfc:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <HAL_GPIO_Init+0x2dc>)
 8000cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d00:	4b56      	ldr	r3, [pc, #344]	; (8000e5c <HAL_GPIO_Init+0x2dc>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	430a      	orrs	r2, r1
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d08:	4a55      	ldr	r2, [pc, #340]	; (8000e60 <HAL_GPIO_Init+0x2e0>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	589b      	ldr	r3, [r3, r2]
 8000d14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	409a      	lsls	r2, r3
 8000d22:	0013      	movs	r3, r2
 8000d24:	43da      	mvns	r2, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	23a0      	movs	r3, #160	; 0xa0
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d01f      	beq.n	8000d76 <HAL_GPIO_Init+0x1f6>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d019      	beq.n	8000d72 <HAL_GPIO_Init+0x1f2>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0x1ee>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_GPIO_Init+0x2ec>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00d      	beq.n	8000d6a <HAL_GPIO_Init+0x1ea>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a47      	ldr	r2, [pc, #284]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d007      	beq.n	8000d66 <HAL_GPIO_Init+0x1e6>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <HAL_GPIO_Init+0x2f4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_GPIO_Init+0x1e2>
 8000d5e:	2305      	movs	r3, #5
 8000d60:	e00a      	b.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d62:	2306      	movs	r3, #6
 8000d64:	e008      	b.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d66:	2304      	movs	r3, #4
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e004      	b.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d76:	2300      	movs	r3, #0
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4093      	lsls	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d88:	4935      	ldr	r1, [pc, #212]	; (8000e60 <HAL_GPIO_Init+0x2e0>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	025b      	lsls	r3, r3, #9
 8000dae:	4013      	ands	r3, r2
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	035b      	lsls	r3, r3, #13
 8000e02:	4013      	ands	r3, r2
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	039b      	lsls	r3, r3, #14
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	40da      	lsrs	r2, r3
 8000e4c:	1e13      	subs	r3, r2, #0
 8000e4e:	d000      	beq.n	8000e52 <HAL_GPIO_Init+0x2d2>
 8000e50:	e6a2      	b.n	8000b98 <HAL_GPIO_Init+0x18>
  }
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b006      	add	sp, #24
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	50000400 	.word	0x50000400
 8000e68:	50000800 	.word	0x50000800
 8000e6c:	50000c00 	.word	0x50000c00
 8000e70:	50001000 	.word	0x50001000
 8000e74:	50001c00 	.word	0x50001c00
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	0008      	movs	r0, r1
 8000e86:	0011      	movs	r1, r2
 8000e88:	1cbb      	adds	r3, r7, #2
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	801a      	strh	r2, [r3, #0]
 8000e8e:	1c7b      	adds	r3, r7, #1
 8000e90:	1c0a      	adds	r2, r1, #0
 8000e92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000e94:	1c7b      	adds	r3, r7, #1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9c:	1cbb      	adds	r3, r7, #2
 8000e9e:	881a      	ldrh	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ea4:	e003      	b.n	8000eae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ea6:	1cbb      	adds	r3, r7, #2
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	1cbb      	adds	r3, r7, #2
 8000ec2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	1cbb      	adds	r3, r7, #2
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	405a      	eors	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	615a      	str	r2, [r3, #20]
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f000 fbbc 	bl	8001668 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef0:	4bc8      	ldr	r3, [pc, #800]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000efa:	4bc6      	ldr	r3, [pc, #792]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	025b      	lsls	r3, r3, #9
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d100      	bne.n	8000f12 <HAL_RCC_OscConfig+0x36>
 8000f10:	e07e      	b.n	8001010 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d007      	beq.n	8000f28 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0c      	cmp	r3, #12
 8000f1c:	d112      	bne.n	8000f44 <HAL_RCC_OscConfig+0x68>
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	025b      	lsls	r3, r3, #9
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d10d      	bne.n	8000f44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4bba      	ldr	r3, [pc, #744]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	d100      	bne.n	8000f36 <HAL_RCC_OscConfig+0x5a>
 8000f34:	e06b      	b.n	800100e <HAL_RCC_OscConfig+0x132>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d167      	bne.n	800100e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f000 fb92 	bl	8001668 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	025b      	lsls	r3, r3, #9
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d107      	bne.n	8000f60 <HAL_RCC_OscConfig+0x84>
 8000f50:	4bb0      	ldr	r3, [pc, #704]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4baf      	ldr	r3, [pc, #700]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e027      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	23a0      	movs	r3, #160	; 0xa0
 8000f66:	02db      	lsls	r3, r3, #11
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d10e      	bne.n	8000f8a <HAL_RCC_OscConfig+0xae>
 8000f6c:	4ba9      	ldr	r3, [pc, #676]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4ba8      	ldr	r3, [pc, #672]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	02c9      	lsls	r1, r1, #11
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	4ba6      	ldr	r3, [pc, #664]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4ba5      	ldr	r3, [pc, #660]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0249      	lsls	r1, r1, #9
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e012      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f8a:	4ba2      	ldr	r3, [pc, #648]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4ba1      	ldr	r3, [pc, #644]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f90:	49a1      	ldr	r1, [pc, #644]	; (8001218 <HAL_RCC_OscConfig+0x33c>)
 8000f92:	400a      	ands	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	4b9f      	ldr	r3, [pc, #636]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	025b      	lsls	r3, r3, #9
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4b9b      	ldr	r3, [pc, #620]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b9a      	ldr	r3, [pc, #616]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000faa:	499c      	ldr	r1, [pc, #624]	; (800121c <HAL_RCC_OscConfig+0x340>)
 8000fac:	400a      	ands	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d015      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fcfe 	bl	80009b8 <HAL_GetTick>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fc0:	e009      	b.n	8000fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fcf9 	bl	80009b8 <HAL_GetTick>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b64      	cmp	r3, #100	; 0x64
 8000fce:	d902      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	f000 fb49 	bl	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fd6:	4b8f      	ldr	r3, [pc, #572]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	029b      	lsls	r3, r3, #10
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d0ef      	beq.n	8000fc2 <HAL_RCC_OscConfig+0xe6>
 8000fe2:	e015      	b.n	8001010 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fce8 	bl	80009b8 <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fee:	f7ff fce3 	bl	80009b8 <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e333      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001000:	4b84      	ldr	r3, [pc, #528]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	4013      	ands	r3, r2
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0x112>
 800100c:	e000      	b.n	8001010 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_RCC_OscConfig+0x140>
 800101a:	e098      	b.n	800114e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	2220      	movs	r2, #32
 8001026:	4013      	ands	r3, r2
 8001028:	d009      	beq.n	800103e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800102a:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b79      	ldr	r3, [pc, #484]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001030:	2120      	movs	r1, #32
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	2220      	movs	r2, #32
 800103a:	4393      	bics	r3, r2
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d005      	beq.n	8001050 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0c      	cmp	r3, #12
 8001048:	d13d      	bne.n	80010c6 <HAL_RCC_OscConfig+0x1ea>
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d13a      	bne.n	80010c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001050:	4b70      	ldr	r3, [pc, #448]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2204      	movs	r2, #4
 8001056:	4013      	ands	r3, r2
 8001058:	d004      	beq.n	8001064 <HAL_RCC_OscConfig+0x188>
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e301      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a6d      	ldr	r2, [pc, #436]	; (8001220 <HAL_RCC_OscConfig+0x344>)
 800106a:	4013      	ands	r3, r2
 800106c:	0019      	movs	r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	021a      	lsls	r2, r3, #8
 8001074:	4b67      	ldr	r3, [pc, #412]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001076:	430a      	orrs	r2, r1
 8001078:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800107a:	4b66      	ldr	r3, [pc, #408]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2209      	movs	r2, #9
 8001080:	4393      	bics	r3, r2
 8001082:	0019      	movs	r1, r3
 8001084:	4b63      	ldr	r3, [pc, #396]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800108c:	f000 fc20 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 8001090:	0001      	movs	r1, r0
 8001092:	4b60      	ldr	r3, [pc, #384]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	220f      	movs	r2, #15
 800109a:	4013      	ands	r3, r2
 800109c:	4a61      	ldr	r2, [pc, #388]	; (8001224 <HAL_RCC_OscConfig+0x348>)
 800109e:	5cd3      	ldrb	r3, [r2, r3]
 80010a0:	000a      	movs	r2, r1
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	4b60      	ldr	r3, [pc, #384]	; (8001228 <HAL_RCC_OscConfig+0x34c>)
 80010a6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80010a8:	2513      	movs	r5, #19
 80010aa:	197c      	adds	r4, r7, r5
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fc59 	bl	8000964 <HAL_InitTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010b6:	197b      	adds	r3, r7, r5
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d047      	beq.n	800114e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80010be:	2313      	movs	r3, #19
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	e2d0      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d027      	beq.n	800111c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010cc:	4b51      	ldr	r3, [pc, #324]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2209      	movs	r2, #9
 80010d2:	4393      	bics	r3, r2
 80010d4:	0019      	movs	r1, r3
 80010d6:	4b4f      	ldr	r3, [pc, #316]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 80010d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fc6b 	bl	80009b8 <HAL_GetTick>
 80010e2:	0003      	movs	r3, r0
 80010e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc66 	bl	80009b8 <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e2b6      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010fa:	4b46      	ldr	r3, [pc, #280]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2204      	movs	r2, #4
 8001100:	4013      	ands	r3, r2
 8001102:	d0f1      	beq.n	80010e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4a45      	ldr	r2, [pc, #276]	; (8001220 <HAL_RCC_OscConfig+0x344>)
 800110a:	4013      	ands	r3, r2
 800110c:	0019      	movs	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	021a      	lsls	r2, r3, #8
 8001114:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001116:	430a      	orrs	r2, r1
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	e018      	b.n	800114e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111c:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001122:	2101      	movs	r1, #1
 8001124:	438a      	bics	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fc46 	bl	80009b8 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fc41 	bl	80009b8 <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e291      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2204      	movs	r2, #4
 800114a:	4013      	ands	r3, r2
 800114c:	d1f1      	bne.n	8001132 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2210      	movs	r2, #16
 8001154:	4013      	ands	r3, r2
 8001156:	d100      	bne.n	800115a <HAL_RCC_OscConfig+0x27e>
 8001158:	e09f      	b.n	800129a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d13f      	bne.n	80011e0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d005      	beq.n	8001178 <HAL_RCC_OscConfig+0x29c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e277      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a2b      	ldr	r2, [pc, #172]	; (800122c <HAL_RCC_OscConfig+0x350>)
 800117e:	4013      	ands	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001188:	430a      	orrs	r2, r1
 800118a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	0a19      	lsrs	r1, r3, #8
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	061a      	lsls	r2, r3, #24
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	0b5b      	lsrs	r3, r3, #13
 80011a6:	3301      	adds	r3, #1
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	0212      	lsls	r2, r2, #8
 80011ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	210f      	movs	r1, #15
 80011b6:	400b      	ands	r3, r1
 80011b8:	491a      	ldr	r1, [pc, #104]	; (8001224 <HAL_RCC_OscConfig+0x348>)
 80011ba:	5ccb      	ldrb	r3, [r1, r3]
 80011bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_RCC_OscConfig+0x34c>)
 80011c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80011c2:	2513      	movs	r5, #19
 80011c4:	197c      	adds	r4, r7, r5
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff fbcc 	bl	8000964 <HAL_InitTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011d0:	197b      	adds	r3, r7, r5
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d060      	beq.n	800129a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80011d8:	2313      	movs	r3, #19
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	e243      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d03e      	beq.n	8001266 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	0049      	lsls	r1, r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fbdf 	bl	80009b8 <HAL_GetTick>
 80011fa:	0003      	movs	r3, r0
 80011fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011fe:	e017      	b.n	8001230 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001200:	f7ff fbda 	bl	80009b8 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d910      	bls.n	8001230 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e22a      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40021000 	.word	0x40021000
 8001218:	fffeffff 	.word	0xfffeffff
 800121c:	fffbffff 	.word	0xfffbffff
 8001220:	ffffe0ff 	.word	0xffffe0ff
 8001224:	080031a8 	.word	0x080031a8
 8001228:	20000000 	.word	0x20000000
 800122c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001230:	4bc6      	ldr	r3, [pc, #792]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d0e1      	beq.n	8001200 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123c:	4bc3      	ldr	r3, [pc, #780]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4ac3      	ldr	r2, [pc, #780]	; (8001550 <HAL_RCC_OscConfig+0x674>)
 8001242:	4013      	ands	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124a:	4bc0      	ldr	r3, [pc, #768]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001250:	4bbe      	ldr	r3, [pc, #760]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	0a19      	lsrs	r1, r3, #8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	061a      	lsls	r2, r3, #24
 800125e:	4bbb      	ldr	r3, [pc, #748]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001260:	430a      	orrs	r2, r1
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	e019      	b.n	800129a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001266:	4bb9      	ldr	r3, [pc, #740]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4bb8      	ldr	r3, [pc, #736]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800126c:	49b9      	ldr	r1, [pc, #740]	; (8001554 <HAL_RCC_OscConfig+0x678>)
 800126e:	400a      	ands	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fba1 	bl	80009b8 <HAL_GetTick>
 8001276:	0003      	movs	r3, r0
 8001278:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800127c:	f7ff fb9c 	bl	80009b8 <HAL_GetTick>
 8001280:	0002      	movs	r2, r0
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1ec      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800128e:	4baf      	ldr	r3, [pc, #700]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2208      	movs	r2, #8
 80012a0:	4013      	ands	r3, r2
 80012a2:	d036      	beq.n	8001312 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d019      	beq.n	80012e0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ac:	4ba7      	ldr	r3, [pc, #668]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80012ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012b0:	4ba6      	ldr	r3, [pc, #664]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fb7e 	bl	80009b8 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fb79 	bl	80009b8 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1c9      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012d4:	4b9d      	ldr	r3, [pc, #628]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80012d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	d0f1      	beq.n	80012c2 <HAL_RCC_OscConfig+0x3e6>
 80012de:	e018      	b.n	8001312 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	4b9a      	ldr	r3, [pc, #616]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80012e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	438a      	bics	r2, r1
 80012ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fb64 	bl	80009b8 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fb5f 	bl	80009b8 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1af      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001308:	4b90      	ldr	r3, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800130a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800130c:	2202      	movs	r2, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d1f1      	bne.n	80012f6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2204      	movs	r2, #4
 8001318:	4013      	ands	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x442>
 800131c:	e0af      	b.n	800147e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131e:	2323      	movs	r3, #35	; 0x23
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	055b      	lsls	r3, r3, #21
 800132e:	4013      	ands	r3, r2
 8001330:	d10a      	bne.n	8001348 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b86      	ldr	r3, [pc, #536]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001336:	4b85      	ldr	r3, [pc, #532]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0549      	lsls	r1, r1, #21
 800133c:	430a      	orrs	r2, r1
 800133e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001340:	2323      	movs	r3, #35	; 0x23
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b83      	ldr	r3, [pc, #524]	; (8001558 <HAL_RCC_OscConfig+0x67c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4013      	ands	r3, r2
 8001352:	d11a      	bne.n	800138a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001354:	4b80      	ldr	r3, [pc, #512]	; (8001558 <HAL_RCC_OscConfig+0x67c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <HAL_RCC_OscConfig+0x67c>)
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0049      	lsls	r1, r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001362:	f7ff fb29 	bl	80009b8 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136c:	f7ff fb24 	bl	80009b8 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e174      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x67c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	429a      	cmp	r2, r3
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_OscConfig+0x4ca>
 8001396:	4b6d      	ldr	r3, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0049      	lsls	r1, r1, #1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	651a      	str	r2, [r3, #80]	; 0x50
 80013a4:	e031      	b.n	800140a <HAL_RCC_OscConfig+0x52e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x4ec>
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013b2:	4b66      	ldr	r3, [pc, #408]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013b4:	4967      	ldr	r1, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x678>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	651a      	str	r2, [r3, #80]	; 0x50
 80013ba:	4b64      	ldr	r3, [pc, #400]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013be:	4b63      	ldr	r3, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013c0:	4966      	ldr	r1, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x680>)
 80013c2:	400a      	ands	r2, r1
 80013c4:	651a      	str	r2, [r3, #80]	; 0x50
 80013c6:	e020      	b.n	800140a <HAL_RCC_OscConfig+0x52e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	23a0      	movs	r3, #160	; 0xa0
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d10e      	bne.n	80013f2 <HAL_RCC_OscConfig+0x516>
 80013d4:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d8:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	00c9      	lsls	r1, r1, #3
 80013de:	430a      	orrs	r2, r1
 80013e0:	651a      	str	r2, [r3, #80]	; 0x50
 80013e2:	4b5a      	ldr	r3, [pc, #360]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e6:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0049      	lsls	r1, r1, #1
 80013ec:	430a      	orrs	r2, r1
 80013ee:	651a      	str	r2, [r3, #80]	; 0x50
 80013f0:	e00b      	b.n	800140a <HAL_RCC_OscConfig+0x52e>
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013f6:	4b55      	ldr	r3, [pc, #340]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80013f8:	4956      	ldr	r1, [pc, #344]	; (8001554 <HAL_RCC_OscConfig+0x678>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	651a      	str	r2, [r3, #80]	; 0x50
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001402:	4b52      	ldr	r3, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001404:	4955      	ldr	r1, [pc, #340]	; (800155c <HAL_RCC_OscConfig+0x680>)
 8001406:	400a      	ands	r2, r1
 8001408:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fad1 	bl	80009b8 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800141a:	e009      	b.n	8001430 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff facc 	bl	80009b8 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x684>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e11b      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4013      	ands	r3, r2
 800143a:	d0ef      	beq.n	800141c <HAL_RCC_OscConfig+0x540>
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fabb 	bl	80009b8 <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001446:	e009      	b.n	800145c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fab6 	bl	80009b8 <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4a43      	ldr	r2, [pc, #268]	; (8001560 <HAL_RCC_OscConfig+0x684>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e105      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800145e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d1ef      	bne.n	8001448 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001468:	2323      	movs	r3, #35	; 0x23
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d105      	bne.n	800147e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001476:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001478:	493a      	ldr	r1, [pc, #232]	; (8001564 <HAL_RCC_OscConfig+0x688>)
 800147a:	400a      	ands	r2, r1
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2220      	movs	r2, #32
 8001484:	4013      	ands	r3, r2
 8001486:	d049      	beq.n	800151c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d026      	beq.n	80014de <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001496:	2101      	movs	r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800149e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_RCC_OscConfig+0x68c>)
 80014aa:	6a1a      	ldr	r2, [r3, #32]
 80014ac:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_RCC_OscConfig+0x68c>)
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	0189      	lsls	r1, r1, #6
 80014b2:	430a      	orrs	r2, r1
 80014b4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fa7f 	bl	80009b8 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c0:	f7ff fa7a 	bl	80009b8 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e0ca      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f1      	beq.n	80014c0 <HAL_RCC_OscConfig+0x5e4>
 80014dc:	e01e      	b.n	800151c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_OscConfig+0x670>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	438a      	bics	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_RCC_OscConfig+0x68c>)
 80014ec:	6a1a      	ldr	r2, [r3, #32]
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_RCC_OscConfig+0x68c>)
 80014f0:	491e      	ldr	r1, [pc, #120]	; (800156c <HAL_RCC_OscConfig+0x690>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fa5f 	bl	80009b8 <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001500:	f7ff fa5a 	bl	80009b8 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e0aa      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d1f1      	bne.n	8001500 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x64a>
 8001524:	e09f      	b.n	8001666 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	2b0c      	cmp	r3, #12
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x652>
 800152c:	e078      	b.n	8001620 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	2b02      	cmp	r3, #2
 8001534:	d159      	bne.n	80015ea <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_OscConfig+0x670>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_OscConfig+0x670>)
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x694>)
 800153e:	400a      	ands	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fa39 	bl	80009b8 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800154a:	e01c      	b.n	8001586 <HAL_RCC_OscConfig+0x6aa>
 800154c:	40021000 	.word	0x40021000
 8001550:	ffff1fff 	.word	0xffff1fff
 8001554:	fffffeff 	.word	0xfffffeff
 8001558:	40007000 	.word	0x40007000
 800155c:	fffffbff 	.word	0xfffffbff
 8001560:	00001388 	.word	0x00001388
 8001564:	efffffff 	.word	0xefffffff
 8001568:	40010000 	.word	0x40010000
 800156c:	ffffdfff 	.word	0xffffdfff
 8001570:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa20 	bl	80009b8 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e070      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	049b      	lsls	r3, r3, #18
 800158e:	4013      	ands	r3, r2
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4a37      	ldr	r2, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x798>)
 8001598:	4013      	ands	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	431a      	orrs	r2, r3
 80015ac:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 80015ae:	430a      	orrs	r2, r1
 80015b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0449      	lsls	r1, r1, #17
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff f9fa 	bl	80009b8 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff f9f5 	bl	80009b8 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e045      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	049b      	lsls	r3, r3, #18
 80015e4:	4013      	ands	r3, r2
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x6ee>
 80015e8:	e03d      	b.n	8001666 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 80015f0:	4921      	ldr	r1, [pc, #132]	; (8001678 <HAL_RCC_OscConfig+0x79c>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff f9df 	bl	80009b8 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff f9da 	bl	80009b8 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e02a      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	049b      	lsls	r3, r3, #18
 800161a:	4013      	ands	r3, r2
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x724>
 800161e:	e022      	b.n	8001666 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_RCC_OscConfig+0x794>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	401a      	ands	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	429a      	cmp	r2, r3
 8001640:	d10f      	bne.n	8001662 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	23f0      	movs	r3, #240	; 0xf0
 8001646:	039b      	lsls	r3, r3, #14
 8001648:	401a      	ands	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	23c0      	movs	r3, #192	; 0xc0
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	401a      	ands	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b00a      	add	sp, #40	; 0x28
 800166e:	bdb0      	pop	{r4, r5, r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	ff02ffff 	.word	0xff02ffff
 8001678:	feffffff 	.word	0xfeffffff

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e10d      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d911      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b85      	ldr	r3, [pc, #532]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b0:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0f4      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d009      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016cc:	4b7a      	ldr	r3, [pc, #488]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	22f0      	movs	r2, #240	; 0xf0
 80016d2:	4393      	bics	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_RCC_ClockConfig+0x70>
 80016ea:	e089      	b.n	8001800 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f4:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	029b      	lsls	r3, r3, #10
 80016fc:	4013      	ands	r3, r2
 80016fe:	d120      	bne.n	8001742 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0d3      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d107      	bne.n	800171c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	049b      	lsls	r3, r3, #18
 8001714:	4013      	ands	r3, r2
 8001716:	d114      	bne.n	8001742 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0c7      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001724:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2204      	movs	r2, #4
 800172a:	4013      	ands	r3, r2
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0bc      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001732:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0b4      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2203      	movs	r2, #3
 8001748:	4393      	bics	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 8001752:	430a      	orrs	r2, r1
 8001754:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001756:	f7ff f92f 	bl	80009b8 <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d111      	bne.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001766:	e009      	b.n	800177c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff f926 	bl	80009b8 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e097      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800177c:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	220c      	movs	r2, #12
 8001782:	4013      	ands	r3, r2
 8001784:	2b08      	cmp	r3, #8
 8001786:	d1ef      	bne.n	8001768 <HAL_RCC_ClockConfig+0xec>
 8001788:	e03a      	b.n	8001800 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d111      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001792:	e009      	b.n	80017a8 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f7ff f910 	bl	80009b8 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a47      	ldr	r2, [pc, #284]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e081      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	220c      	movs	r2, #12
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d1ef      	bne.n	8001794 <HAL_RCC_ClockConfig+0x118>
 80017b4:	e024      	b.n	8001800 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d11b      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	e009      	b.n	80017d4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff f8fa 	bl	80009b8 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	4a3c      	ldr	r2, [pc, #240]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e06b      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d4:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	220c      	movs	r2, #12
 80017da:	4013      	ands	r3, r2
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d1ef      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x144>
 80017e0:	e00e      	b.n	8001800 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e2:	f7ff f8e9 	bl	80009b8 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a33      	ldr	r2, [pc, #204]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e05a      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	220c      	movs	r2, #12
 80017fc:	4013      	ands	r3, r2
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d211      	bcs.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2201      	movs	r2, #1
 8001814:	4393      	bics	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_RCC_ClockConfig+0x238>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e03c      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2204      	movs	r2, #4
 8001838:	4013      	ands	r3, r2
 800183a:	d009      	beq.n	8001850 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001842:	4013      	ands	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2208      	movs	r2, #8
 8001856:	4013      	ands	r3, r2
 8001858:	d00a      	beq.n	8001870 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x248>)
 8001860:	4013      	ands	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00da      	lsls	r2, r3, #3
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 800186c:	430a      	orrs	r2, r1
 800186e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001870:	f000 f82e 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 8001874:	0001      	movs	r1, r0
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_RCC_ClockConfig+0x23c>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	220f      	movs	r2, #15
 800187e:	4013      	ands	r3, r2
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_RCC_ClockConfig+0x24c>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	000a      	movs	r2, r1
 8001886:	40da      	lsrs	r2, r3
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_ClockConfig+0x250>)
 800188a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800188c:	250b      	movs	r5, #11
 800188e:	197c      	adds	r4, r7, r5
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff f867 	bl	8000964 <HAL_InitTick>
 8001896:	0003      	movs	r3, r0
 8001898:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800189a:	197b      	adds	r3, r7, r5
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80018a2:	230b      	movs	r3, #11
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	e000      	b.n	80018ac <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b004      	add	sp, #16
 80018b2:	bdb0      	pop	{r4, r5, r7, pc}
 80018b4:	40022000 	.word	0x40022000
 80018b8:	40021000 	.word	0x40021000
 80018bc:	00001388 	.word	0x00001388
 80018c0:	fffff8ff 	.word	0xfffff8ff
 80018c4:	ffffc7ff 	.word	0xffffc7ff
 80018c8:	080031a8 	.word	0x080031a8
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	220c      	movs	r2, #12
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d00e      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x34>
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d00f      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x3a>
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d157      	bne.n	800199e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2210      	movs	r2, #16
 80018f4:	4013      	ands	r3, r2
 80018f6:	d002      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fa:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018fc:	e05d      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001900:	613b      	str	r3, [r7, #16]
      break;
 8001902:	e05a      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001906:	613b      	str	r3, [r7, #16]
      break;
 8001908:	e057      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	220f      	movs	r2, #15
 8001910:	4013      	ands	r3, r2
 8001912:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	0d9b      	lsrs	r3, r3, #22
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	3301      	adds	r3, #1
 8001922:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	4013      	ands	r3, r2
 800192e:	d00f      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	000a      	movs	r2, r1
 8001934:	0152      	lsls	r2, r2, #5
 8001936:	1a52      	subs	r2, r2, r1
 8001938:	0193      	lsls	r3, r2, #6
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	185b      	adds	r3, r3, r1
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f7fe fbdf 	bl	8000108 <__udivsi3>
 800194a:	0003      	movs	r3, r0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e023      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2210      	movs	r2, #16
 8001956:	4013      	ands	r3, r2
 8001958:	d00f      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800195a:	68b9      	ldr	r1, [r7, #8]
 800195c:	000a      	movs	r2, r1
 800195e:	0152      	lsls	r2, r2, #5
 8001960:	1a52      	subs	r2, r2, r1
 8001962:	0193      	lsls	r3, r2, #6
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	185b      	adds	r3, r3, r1
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbca 	bl	8000108 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00e      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	000a      	movs	r2, r1
 800197e:	0152      	lsls	r2, r2, #5
 8001980:	1a52      	subs	r2, r2, r1
 8001982:	0193      	lsls	r3, r2, #6
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	185b      	adds	r3, r3, r1
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	0018      	movs	r0, r3
 8001990:	f7fe fbba 	bl	8000108 <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
      break;
 800199c:	e00d      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	0b5b      	lsrs	r3, r3, #13
 80019a4:	2207      	movs	r2, #7
 80019a6:	4013      	ands	r3, r2
 80019a8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0212      	lsls	r2, r2, #8
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ba:	693b      	ldr	r3, [r7, #16]
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b006      	add	sp, #24
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	003d0900 	.word	0x003d0900
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	007a1200 	.word	0x007a1200
 80019d4:	080031b8 	.word	0x080031b8

080019d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e059      	b.n	8001a9e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2251      	movs	r2, #81	; 0x51
 80019f4:	5c9b      	ldrb	r3, [r3, r2]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2250      	movs	r2, #80	; 0x50
 8001a00:	2100      	movs	r1, #0
 8001a02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7fe fdea 	bl	80005e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2251      	movs	r2, #81	; 0x51
 8001a10:	2102      	movs	r1, #2
 8001a12:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2140      	movs	r1, #64	; 0x40
 8001a20:	438a      	bics	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6999      	ldr	r1, [r3, #24]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	400b      	ands	r3, r1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	0011      	movs	r1, r2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <HAL_SPI_Init+0xd0>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2251      	movs	r2, #81	; 0x51
 8001a98:	2101      	movs	r1, #1
 8001a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	fffff7ff 	.word	0xfffff7ff

08001aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e01e      	b.n	8001afc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2239      	movs	r2, #57	; 0x39
 8001ac2:	5c9b      	ldrb	r3, [r3, r2]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d107      	bne.n	8001ada <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2238      	movs	r2, #56	; 0x38
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7fe fdeb 	bl	80006b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2239      	movs	r2, #57	; 0x39
 8001ade:	2102      	movs	r1, #2
 8001ae0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	0019      	movs	r1, r3
 8001aec:	0010      	movs	r0, r2
 8001aee:	f000 fa3f 	bl	8001f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2239      	movs	r2, #57	; 0x39
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2101      	movs	r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d007      	beq.n	8001b3e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2202      	movs	r2, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d124      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d11d      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2203      	movs	r2, #3
 8001b72:	4252      	negs	r2, r2
 8001b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2203      	movs	r2, #3
 8001b84:	4013      	ands	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f9d8 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001b90:	e007      	b.n	8001ba2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f9cb 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f9d7 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d125      	bne.n	8001c02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d11e      	bne.n	8001c02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2205      	movs	r2, #5
 8001bca:	4252      	negs	r2, r2
 8001bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	23c0      	movs	r3, #192	; 0xc0
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d004      	beq.n	8001bec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f9ab 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001bea:	e007      	b.n	8001bfc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 f99e 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 f9aa 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2208      	movs	r2, #8
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d124      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2208      	movs	r2, #8
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11d      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2209      	movs	r2, #9
 8001c24:	4252      	negs	r2, r2
 8001c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2203      	movs	r2, #3
 8001c36:	4013      	ands	r3, r2
 8001c38:	d004      	beq.n	8001c44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 f97f 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001c42:	e007      	b.n	8001c54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 f972 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f97e 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2210      	movs	r2, #16
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d125      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2210      	movs	r2, #16
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d11e      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2211      	movs	r2, #17
 8001c7c:	4252      	negs	r2, r2
 8001c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2208      	movs	r2, #8
 8001c84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	23c0      	movs	r3, #192	; 0xc0
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d004      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 f952 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e007      	b.n	8001cae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 f945 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f951 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4252      	negs	r2, r2
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 f91f 	bl	8001f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d10f      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b40      	cmp	r3, #64	; 0x40
 8001cfc:	d108      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2241      	movs	r2, #65	; 0x41
 8001d04:	4252      	negs	r2, r2
 8001d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f928 	bl	8001f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2238      	movs	r2, #56	; 0x38
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_TIM_ConfigClockSource+0x18>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e0ab      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x170>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2238      	movs	r2, #56	; 0x38
 8001d34:	2101      	movs	r1, #1
 8001d36:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2239      	movs	r2, #57	; 0x39
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2277      	movs	r2, #119	; 0x77
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_TIM_ConfigClockSource+0x178>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b40      	cmp	r3, #64	; 0x40
 8001d66:	d100      	bne.n	8001d6a <HAL_TIM_ConfigClockSource+0x52>
 8001d68:	e06b      	b.n	8001e42 <HAL_TIM_ConfigClockSource+0x12a>
 8001d6a:	d80e      	bhi.n	8001d8a <HAL_TIM_ConfigClockSource+0x72>
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d100      	bne.n	8001d72 <HAL_TIM_ConfigClockSource+0x5a>
 8001d70:	e077      	b.n	8001e62 <HAL_TIM_ConfigClockSource+0x14a>
 8001d72:	d803      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x64>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d100      	bne.n	8001d7a <HAL_TIM_ConfigClockSource+0x62>
 8001d78:	e073      	b.n	8001e62 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d7a:	e07c      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d100      	bne.n	8001d82 <HAL_TIM_ConfigClockSource+0x6a>
 8001d80:	e06f      	b.n	8001e62 <HAL_TIM_ConfigClockSource+0x14a>
 8001d82:	2b30      	cmp	r3, #48	; 0x30
 8001d84:	d100      	bne.n	8001d88 <HAL_TIM_ConfigClockSource+0x70>
 8001d86:	e06c      	b.n	8001e62 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001d88:	e075      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d8a:	2b70      	cmp	r3, #112	; 0x70
 8001d8c:	d00e      	beq.n	8001dac <HAL_TIM_ConfigClockSource+0x94>
 8001d8e:	d804      	bhi.n	8001d9a <HAL_TIM_ConfigClockSource+0x82>
 8001d90:	2b50      	cmp	r3, #80	; 0x50
 8001d92:	d036      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0xea>
 8001d94:	2b60      	cmp	r3, #96	; 0x60
 8001d96:	d044      	beq.n	8001e22 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001d98:	e06d      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	0152      	lsls	r2, r2, #5
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d068      	beq.n	8001e74 <HAL_TIM_ConfigClockSource+0x15c>
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0192      	lsls	r2, r2, #6
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d017      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001daa:	e064      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f000 fa34 	bl	8002228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2277      	movs	r2, #119	; 0x77
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]
      break;
 8001dd8:	e04d      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f000 fa1d 	bl	8002228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	01c9      	lsls	r1, r1, #7
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
      break;
 8001e00:	e039      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	001a      	movs	r2, r3
 8001e10:	f000 f990 	bl	8002134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2150      	movs	r1, #80	; 0x50
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 f9ea 	bl	80021f4 <TIM_ITRx_SetConfig>
      break;
 8001e20:	e029      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	001a      	movs	r2, r3
 8001e30:	f000 f9ae 	bl	8002190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2160      	movs	r1, #96	; 0x60
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f9da 	bl	80021f4 <TIM_ITRx_SetConfig>
      break;
 8001e40:	e019      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	001a      	movs	r2, r3
 8001e50:	f000 f970 	bl	8002134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2140      	movs	r1, #64	; 0x40
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 f9ca 	bl	80021f4 <TIM_ITRx_SetConfig>
      break;
 8001e60:	e009      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	0010      	movs	r0, r2
 8001e6e:	f000 f9c1 	bl	80021f4 <TIM_ITRx_SetConfig>
      break;
 8001e72:	e000      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001e74:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2239      	movs	r2, #57	; 0x39
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2238      	movs	r2, #56	; 0x38
 8001e82:	2100      	movs	r1, #0
 8001e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	ffff00ff 	.word	0xffff00ff

08001e94 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2238      	movs	r2, #56	; 0x38
 8001ea2:	5c9b      	ldrb	r3, [r3, r2]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_TIM_SlaveConfigSynchro+0x18>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e032      	b.n	8001f12 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2238      	movs	r2, #56	; 0x38
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2239      	movs	r2, #57	; 0x39
 8001eb8:	2102      	movs	r1, #2
 8001eba:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 f8b2 	bl	800202c <TIM_SlaveTimer_SetConfig>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2239      	movs	r2, #57	; 0x39
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2238      	movs	r2, #56	; 0x38
 8001ed8:	2100      	movs	r1, #0
 8001eda:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e018      	b.n	8001f12 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	438a      	bics	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <HAL_TIM_SlaveConfigSynchro+0x88>)
 8001efc:	400a      	ands	r2, r1
 8001efe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2239      	movs	r2, #57	; 0x39
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2238      	movs	r2, #56	; 0x38
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	ffffbfff 	.word	0xffffbfff

08001f20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	05db      	lsls	r3, r3, #23
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d00b      	beq.n	8001fa2 <TIM_Base_SetConfig+0x32>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a23      	ldr	r2, [pc, #140]	; (800201c <TIM_Base_SetConfig+0xac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0x32>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a22      	ldr	r2, [pc, #136]	; (8002020 <TIM_Base_SetConfig+0xb0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0x32>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a21      	ldr	r2, [pc, #132]	; (8002024 <TIM_Base_SetConfig+0xb4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2270      	movs	r2, #112	; 0x70
 8001fa6:	4393      	bics	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	05db      	lsls	r3, r3, #23
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d00b      	beq.n	8001fd6 <TIM_Base_SetConfig+0x66>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a16      	ldr	r2, [pc, #88]	; (800201c <TIM_Base_SetConfig+0xac>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <TIM_Base_SetConfig+0x66>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a15      	ldr	r2, [pc, #84]	; (8002020 <TIM_Base_SetConfig+0xb0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <TIM_Base_SetConfig+0x66>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <TIM_Base_SetConfig+0xb4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a13      	ldr	r2, [pc, #76]	; (8002028 <TIM_Base_SetConfig+0xb8>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	4393      	bics	r3, r2
 8001fee:	001a      	movs	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	615a      	str	r2, [r3, #20]
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40000400 	.word	0x40000400
 8002020:	40010800 	.word	0x40010800
 8002024:	40011400 	.word	0x40011400
 8002028:	fffffcff 	.word	0xfffffcff

0800202c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2270      	movs	r2, #112	; 0x70
 8002042:	4393      	bics	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2207      	movs	r2, #7
 8002054:	4393      	bics	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b30      	cmp	r3, #48	; 0x30
 8002070:	d05a      	beq.n	8002128 <TIM_SlaveTimer_SetConfig+0xfc>
 8002072:	d806      	bhi.n	8002082 <TIM_SlaveTimer_SetConfig+0x56>
 8002074:	2b10      	cmp	r3, #16
 8002076:	d057      	beq.n	8002128 <TIM_SlaveTimer_SetConfig+0xfc>
 8002078:	2b20      	cmp	r3, #32
 800207a:	d055      	beq.n	8002128 <TIM_SlaveTimer_SetConfig+0xfc>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d053      	beq.n	8002128 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8002080:	e053      	b.n	800212a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8002082:	2b50      	cmp	r3, #80	; 0x50
 8002084:	d03c      	beq.n	8002100 <TIM_SlaveTimer_SetConfig+0xd4>
 8002086:	d802      	bhi.n	800208e <TIM_SlaveTimer_SetConfig+0x62>
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d010      	beq.n	80020ae <TIM_SlaveTimer_SetConfig+0x82>
      break;
 800208c:	e04d      	b.n	800212a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800208e:	2b60      	cmp	r3, #96	; 0x60
 8002090:	d040      	beq.n	8002114 <TIM_SlaveTimer_SetConfig+0xe8>
 8002092:	2b70      	cmp	r3, #112	; 0x70
 8002094:	d000      	beq.n	8002098 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8002096:	e048      	b.n	800212a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68d9      	ldr	r1, [r3, #12]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f000 f8be 	bl	8002228 <TIM_ETR_SetConfig>
      break;
 80020ac:	e03d      	b.n	800212a <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d101      	bne.n	80020ba <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e038      	b.n	800212c <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	438a      	bics	r2, r1
 80020d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	22f0      	movs	r2, #240	; 0xf0
 80020de:	4393      	bics	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	621a      	str	r2, [r3, #32]
      break;
 80020fe:	e014      	b.n	800212a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	001a      	movs	r2, r3
 800210e:	f000 f811 	bl	8002134 <TIM_TI1_ConfigInputStage>
      break;
 8002112:	e00a      	b.n	800212a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	001a      	movs	r2, r3
 8002122:	f000 f835 	bl	8002190 <TIM_TI2_ConfigInputStage>
      break;
 8002126:	e000      	b.n	800212a <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8002128:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b006      	add	sp, #24
 8002132:	bd80      	pop	{r7, pc}

08002134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	2201      	movs	r2, #1
 800214c:	4393      	bics	r3, r2
 800214e:	001a      	movs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	22f0      	movs	r2, #240	; 0xf0
 800215e:	4393      	bics	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	220a      	movs	r2, #10
 8002170:	4393      	bics	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	621a      	str	r2, [r3, #32]
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b006      	add	sp, #24
 800218e:	bd80      	pop	{r7, pc}

08002190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	2210      	movs	r2, #16
 80021a2:	4393      	bics	r3, r2
 80021a4:	001a      	movs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <TIM_TI2_ConfigInputStage+0x60>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	22a0      	movs	r2, #160	; 0xa0
 80021cc:	4393      	bics	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	621a      	str	r2, [r3, #32]
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b006      	add	sp, #24
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	ffff0fff 	.word	0xffff0fff

080021f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2270      	movs	r2, #112	; 0x70
 8002208:	4393      	bics	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	2207      	movs	r2, #7
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	609a      	str	r2, [r3, #8]
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <TIM_ETR_SetConfig+0x3c>)
 8002240:	4013      	ands	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	021a      	lsls	r2, r3, #8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	431a      	orrs	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b006      	add	sp, #24
 8002262:	bd80      	pop	{r7, pc}
 8002264:	ffff00ff 	.word	0xffff00ff

08002268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2238      	movs	r2, #56	; 0x38
 8002276:	5c9b      	ldrb	r3, [r3, r2]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800227c:	2302      	movs	r3, #2
 800227e:	e032      	b.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2238      	movs	r2, #56	; 0x38
 8002284:	2101      	movs	r1, #1
 8002286:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2239      	movs	r2, #57	; 0x39
 800228c:	2102      	movs	r1, #2
 800228e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2270      	movs	r2, #112	; 0x70
 80022a4:	4393      	bics	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	4393      	bics	r3, r2
 80022b8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2239      	movs	r2, #57	; 0x39
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2238      	movs	r2, #56	; 0x38
 80022e0:	2100      	movs	r1, #0
 80022e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b004      	add	sp, #16
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <__errno>:
 80022f0:	4b01      	ldr	r3, [pc, #4]	; (80022f8 <__errno+0x8>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	4770      	bx	lr
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	20000004 	.word	0x20000004

080022fc <__libc_init_array>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	2600      	movs	r6, #0
 8002300:	4d0c      	ldr	r5, [pc, #48]	; (8002334 <__libc_init_array+0x38>)
 8002302:	4c0d      	ldr	r4, [pc, #52]	; (8002338 <__libc_init_array+0x3c>)
 8002304:	1b64      	subs	r4, r4, r5
 8002306:	10a4      	asrs	r4, r4, #2
 8002308:	42a6      	cmp	r6, r4
 800230a:	d109      	bne.n	8002320 <__libc_init_array+0x24>
 800230c:	2600      	movs	r6, #0
 800230e:	f000 ff39 	bl	8003184 <_init>
 8002312:	4d0a      	ldr	r5, [pc, #40]	; (800233c <__libc_init_array+0x40>)
 8002314:	4c0a      	ldr	r4, [pc, #40]	; (8002340 <__libc_init_array+0x44>)
 8002316:	1b64      	subs	r4, r4, r5
 8002318:	10a4      	asrs	r4, r4, #2
 800231a:	42a6      	cmp	r6, r4
 800231c:	d105      	bne.n	800232a <__libc_init_array+0x2e>
 800231e:	bd70      	pop	{r4, r5, r6, pc}
 8002320:	00b3      	lsls	r3, r6, #2
 8002322:	58eb      	ldr	r3, [r5, r3]
 8002324:	4798      	blx	r3
 8002326:	3601      	adds	r6, #1
 8002328:	e7ee      	b.n	8002308 <__libc_init_array+0xc>
 800232a:	00b3      	lsls	r3, r6, #2
 800232c:	58eb      	ldr	r3, [r5, r3]
 800232e:	4798      	blx	r3
 8002330:	3601      	adds	r6, #1
 8002332:	e7f2      	b.n	800231a <__libc_init_array+0x1e>
 8002334:	0800325c 	.word	0x0800325c
 8002338:	0800325c 	.word	0x0800325c
 800233c:	0800325c 	.word	0x0800325c
 8002340:	08003260 	.word	0x08003260

08002344 <memset>:
 8002344:	0003      	movs	r3, r0
 8002346:	1812      	adds	r2, r2, r0
 8002348:	4293      	cmp	r3, r2
 800234a:	d100      	bne.n	800234e <memset+0xa>
 800234c:	4770      	bx	lr
 800234e:	7019      	strb	r1, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	e7f9      	b.n	8002348 <memset+0x4>

08002354 <iprintf>:
 8002354:	b40f      	push	{r0, r1, r2, r3}
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <iprintf+0x30>)
 8002358:	b513      	push	{r0, r1, r4, lr}
 800235a:	681c      	ldr	r4, [r3, #0]
 800235c:	2c00      	cmp	r4, #0
 800235e:	d005      	beq.n	800236c <iprintf+0x18>
 8002360:	69a3      	ldr	r3, [r4, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <iprintf+0x18>
 8002366:	0020      	movs	r0, r4
 8002368:	f000 f850 	bl	800240c <__sinit>
 800236c:	ab05      	add	r3, sp, #20
 800236e:	9a04      	ldr	r2, [sp, #16]
 8002370:	68a1      	ldr	r1, [r4, #8]
 8002372:	0020      	movs	r0, r4
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	f000 f963 	bl	8002640 <_vfiprintf_r>
 800237a:	bc16      	pop	{r1, r2, r4}
 800237c:	bc08      	pop	{r3}
 800237e:	b004      	add	sp, #16
 8002380:	4718      	bx	r3
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	20000004 	.word	0x20000004

08002388 <std>:
 8002388:	2300      	movs	r3, #0
 800238a:	b510      	push	{r4, lr}
 800238c:	0004      	movs	r4, r0
 800238e:	6003      	str	r3, [r0, #0]
 8002390:	6043      	str	r3, [r0, #4]
 8002392:	6083      	str	r3, [r0, #8]
 8002394:	8181      	strh	r1, [r0, #12]
 8002396:	6643      	str	r3, [r0, #100]	; 0x64
 8002398:	81c2      	strh	r2, [r0, #14]
 800239a:	6103      	str	r3, [r0, #16]
 800239c:	6143      	str	r3, [r0, #20]
 800239e:	6183      	str	r3, [r0, #24]
 80023a0:	0019      	movs	r1, r3
 80023a2:	2208      	movs	r2, #8
 80023a4:	305c      	adds	r0, #92	; 0x5c
 80023a6:	f7ff ffcd 	bl	8002344 <memset>
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <std+0x38>)
 80023ac:	6224      	str	r4, [r4, #32]
 80023ae:	6263      	str	r3, [r4, #36]	; 0x24
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <std+0x3c>)
 80023b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <std+0x40>)
 80023b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <std+0x44>)
 80023ba:	6323      	str	r3, [r4, #48]	; 0x30
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	08002b7d 	.word	0x08002b7d
 80023c4:	08002ba5 	.word	0x08002ba5
 80023c8:	08002bdd 	.word	0x08002bdd
 80023cc:	08002c09 	.word	0x08002c09

080023d0 <_cleanup_r>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	4902      	ldr	r1, [pc, #8]	; (80023dc <_cleanup_r+0xc>)
 80023d4:	f000 f88c 	bl	80024f0 <_fwalk_reent>
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	08002f0d 	.word	0x08002f0d

080023e0 <__sfmoreglue>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2568      	movs	r5, #104	; 0x68
 80023e4:	1e4a      	subs	r2, r1, #1
 80023e6:	4355      	muls	r5, r2
 80023e8:	000e      	movs	r6, r1
 80023ea:	0029      	movs	r1, r5
 80023ec:	3174      	adds	r1, #116	; 0x74
 80023ee:	f000 f8a1 	bl	8002534 <_malloc_r>
 80023f2:	1e04      	subs	r4, r0, #0
 80023f4:	d008      	beq.n	8002408 <__sfmoreglue+0x28>
 80023f6:	2100      	movs	r1, #0
 80023f8:	002a      	movs	r2, r5
 80023fa:	6001      	str	r1, [r0, #0]
 80023fc:	6046      	str	r6, [r0, #4]
 80023fe:	300c      	adds	r0, #12
 8002400:	60a0      	str	r0, [r4, #8]
 8002402:	3268      	adds	r2, #104	; 0x68
 8002404:	f7ff ff9e 	bl	8002344 <memset>
 8002408:	0020      	movs	r0, r4
 800240a:	bd70      	pop	{r4, r5, r6, pc}

0800240c <__sinit>:
 800240c:	6983      	ldr	r3, [r0, #24]
 800240e:	b513      	push	{r0, r1, r4, lr}
 8002410:	0004      	movs	r4, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d128      	bne.n	8002468 <__sinit+0x5c>
 8002416:	6483      	str	r3, [r0, #72]	; 0x48
 8002418:	64c3      	str	r3, [r0, #76]	; 0x4c
 800241a:	6503      	str	r3, [r0, #80]	; 0x50
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <__sinit+0x60>)
 800241e:	4a14      	ldr	r2, [pc, #80]	; (8002470 <__sinit+0x64>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6282      	str	r2, [r0, #40]	; 0x28
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	4298      	cmp	r0, r3
 8002428:	d101      	bne.n	800242e <__sinit+0x22>
 800242a:	2301      	movs	r3, #1
 800242c:	6183      	str	r3, [r0, #24]
 800242e:	0020      	movs	r0, r4
 8002430:	f000 f820 	bl	8002474 <__sfp>
 8002434:	6060      	str	r0, [r4, #4]
 8002436:	0020      	movs	r0, r4
 8002438:	f000 f81c 	bl	8002474 <__sfp>
 800243c:	60a0      	str	r0, [r4, #8]
 800243e:	0020      	movs	r0, r4
 8002440:	f000 f818 	bl	8002474 <__sfp>
 8002444:	2200      	movs	r2, #0
 8002446:	60e0      	str	r0, [r4, #12]
 8002448:	2104      	movs	r1, #4
 800244a:	6860      	ldr	r0, [r4, #4]
 800244c:	f7ff ff9c 	bl	8002388 <std>
 8002450:	2201      	movs	r2, #1
 8002452:	2109      	movs	r1, #9
 8002454:	68a0      	ldr	r0, [r4, #8]
 8002456:	f7ff ff97 	bl	8002388 <std>
 800245a:	2202      	movs	r2, #2
 800245c:	2112      	movs	r1, #18
 800245e:	68e0      	ldr	r0, [r4, #12]
 8002460:	f7ff ff92 	bl	8002388 <std>
 8002464:	2301      	movs	r3, #1
 8002466:	61a3      	str	r3, [r4, #24]
 8002468:	bd13      	pop	{r0, r1, r4, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	080031c4 	.word	0x080031c4
 8002470:	080023d1 	.word	0x080023d1

08002474 <__sfp>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <__sfp+0x74>)
 8002478:	0007      	movs	r7, r0
 800247a:	681e      	ldr	r6, [r3, #0]
 800247c:	69b3      	ldr	r3, [r6, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <__sfp+0x14>
 8002482:	0030      	movs	r0, r6
 8002484:	f7ff ffc2 	bl	800240c <__sinit>
 8002488:	3648      	adds	r6, #72	; 0x48
 800248a:	68b4      	ldr	r4, [r6, #8]
 800248c:	6873      	ldr	r3, [r6, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	d504      	bpl.n	800249c <__sfp+0x28>
 8002492:	6833      	ldr	r3, [r6, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <__sfp+0x34>
 8002498:	6836      	ldr	r6, [r6, #0]
 800249a:	e7f6      	b.n	800248a <__sfp+0x16>
 800249c:	220c      	movs	r2, #12
 800249e:	5ea5      	ldrsh	r5, [r4, r2]
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	d00d      	beq.n	80024c0 <__sfp+0x4c>
 80024a4:	3468      	adds	r4, #104	; 0x68
 80024a6:	e7f2      	b.n	800248e <__sfp+0x1a>
 80024a8:	2104      	movs	r1, #4
 80024aa:	0038      	movs	r0, r7
 80024ac:	f7ff ff98 	bl	80023e0 <__sfmoreglue>
 80024b0:	6030      	str	r0, [r6, #0]
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d1f0      	bne.n	8002498 <__sfp+0x24>
 80024b6:	230c      	movs	r3, #12
 80024b8:	0004      	movs	r4, r0
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	0020      	movs	r0, r4
 80024be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024c0:	0020      	movs	r0, r4
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <__sfp+0x78>)
 80024c4:	6665      	str	r5, [r4, #100]	; 0x64
 80024c6:	6025      	str	r5, [r4, #0]
 80024c8:	6065      	str	r5, [r4, #4]
 80024ca:	60a5      	str	r5, [r4, #8]
 80024cc:	60e3      	str	r3, [r4, #12]
 80024ce:	6125      	str	r5, [r4, #16]
 80024d0:	6165      	str	r5, [r4, #20]
 80024d2:	61a5      	str	r5, [r4, #24]
 80024d4:	2208      	movs	r2, #8
 80024d6:	0029      	movs	r1, r5
 80024d8:	305c      	adds	r0, #92	; 0x5c
 80024da:	f7ff ff33 	bl	8002344 <memset>
 80024de:	6365      	str	r5, [r4, #52]	; 0x34
 80024e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80024e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80024e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80024e6:	e7e9      	b.n	80024bc <__sfp+0x48>
 80024e8:	080031c4 	.word	0x080031c4
 80024ec:	ffff0001 	.word	0xffff0001

080024f0 <_fwalk_reent>:
 80024f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024f2:	0004      	movs	r4, r0
 80024f4:	0007      	movs	r7, r0
 80024f6:	2600      	movs	r6, #0
 80024f8:	9101      	str	r1, [sp, #4]
 80024fa:	3448      	adds	r4, #72	; 0x48
 80024fc:	2c00      	cmp	r4, #0
 80024fe:	d101      	bne.n	8002504 <_fwalk_reent+0x14>
 8002500:	0030      	movs	r0, r6
 8002502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002504:	6863      	ldr	r3, [r4, #4]
 8002506:	68a5      	ldr	r5, [r4, #8]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	9b00      	ldr	r3, [sp, #0]
 800250c:	3b01      	subs	r3, #1
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	d501      	bpl.n	8002516 <_fwalk_reent+0x26>
 8002512:	6824      	ldr	r4, [r4, #0]
 8002514:	e7f2      	b.n	80024fc <_fwalk_reent+0xc>
 8002516:	89ab      	ldrh	r3, [r5, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d908      	bls.n	800252e <_fwalk_reent+0x3e>
 800251c:	220e      	movs	r2, #14
 800251e:	5eab      	ldrsh	r3, [r5, r2]
 8002520:	3301      	adds	r3, #1
 8002522:	d004      	beq.n	800252e <_fwalk_reent+0x3e>
 8002524:	0029      	movs	r1, r5
 8002526:	0038      	movs	r0, r7
 8002528:	9b01      	ldr	r3, [sp, #4]
 800252a:	4798      	blx	r3
 800252c:	4306      	orrs	r6, r0
 800252e:	3568      	adds	r5, #104	; 0x68
 8002530:	e7eb      	b.n	800250a <_fwalk_reent+0x1a>
	...

08002534 <_malloc_r>:
 8002534:	2303      	movs	r3, #3
 8002536:	b570      	push	{r4, r5, r6, lr}
 8002538:	1ccd      	adds	r5, r1, #3
 800253a:	439d      	bics	r5, r3
 800253c:	3508      	adds	r5, #8
 800253e:	0006      	movs	r6, r0
 8002540:	2d0c      	cmp	r5, #12
 8002542:	d21e      	bcs.n	8002582 <_malloc_r+0x4e>
 8002544:	250c      	movs	r5, #12
 8002546:	42a9      	cmp	r1, r5
 8002548:	d81d      	bhi.n	8002586 <_malloc_r+0x52>
 800254a:	0030      	movs	r0, r6
 800254c:	f000 fd95 	bl	800307a <__malloc_lock>
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <_malloc_r+0xb4>)
 8002552:	6814      	ldr	r4, [r2, #0]
 8002554:	0021      	movs	r1, r4
 8002556:	2900      	cmp	r1, #0
 8002558:	d119      	bne.n	800258e <_malloc_r+0x5a>
 800255a:	4c24      	ldr	r4, [pc, #144]	; (80025ec <_malloc_r+0xb8>)
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <_malloc_r+0x36>
 8002562:	0030      	movs	r0, r6
 8002564:	f000 faf8 	bl	8002b58 <_sbrk_r>
 8002568:	6020      	str	r0, [r4, #0]
 800256a:	0029      	movs	r1, r5
 800256c:	0030      	movs	r0, r6
 800256e:	f000 faf3 	bl	8002b58 <_sbrk_r>
 8002572:	1c43      	adds	r3, r0, #1
 8002574:	d12b      	bne.n	80025ce <_malloc_r+0x9a>
 8002576:	230c      	movs	r3, #12
 8002578:	0030      	movs	r0, r6
 800257a:	6033      	str	r3, [r6, #0]
 800257c:	f000 fd7e 	bl	800307c <__malloc_unlock>
 8002580:	e003      	b.n	800258a <_malloc_r+0x56>
 8002582:	2d00      	cmp	r5, #0
 8002584:	dadf      	bge.n	8002546 <_malloc_r+0x12>
 8002586:	230c      	movs	r3, #12
 8002588:	6033      	str	r3, [r6, #0]
 800258a:	2000      	movs	r0, #0
 800258c:	bd70      	pop	{r4, r5, r6, pc}
 800258e:	680b      	ldr	r3, [r1, #0]
 8002590:	1b5b      	subs	r3, r3, r5
 8002592:	d419      	bmi.n	80025c8 <_malloc_r+0x94>
 8002594:	2b0b      	cmp	r3, #11
 8002596:	d903      	bls.n	80025a0 <_malloc_r+0x6c>
 8002598:	600b      	str	r3, [r1, #0]
 800259a:	18cc      	adds	r4, r1, r3
 800259c:	6025      	str	r5, [r4, #0]
 800259e:	e003      	b.n	80025a8 <_malloc_r+0x74>
 80025a0:	684b      	ldr	r3, [r1, #4]
 80025a2:	428c      	cmp	r4, r1
 80025a4:	d10d      	bne.n	80025c2 <_malloc_r+0x8e>
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	0030      	movs	r0, r6
 80025aa:	f000 fd67 	bl	800307c <__malloc_unlock>
 80025ae:	0020      	movs	r0, r4
 80025b0:	2207      	movs	r2, #7
 80025b2:	300b      	adds	r0, #11
 80025b4:	1d23      	adds	r3, r4, #4
 80025b6:	4390      	bics	r0, r2
 80025b8:	1ac3      	subs	r3, r0, r3
 80025ba:	d0e7      	beq.n	800258c <_malloc_r+0x58>
 80025bc:	425a      	negs	r2, r3
 80025be:	50e2      	str	r2, [r4, r3]
 80025c0:	e7e4      	b.n	800258c <_malloc_r+0x58>
 80025c2:	6063      	str	r3, [r4, #4]
 80025c4:	000c      	movs	r4, r1
 80025c6:	e7ef      	b.n	80025a8 <_malloc_r+0x74>
 80025c8:	000c      	movs	r4, r1
 80025ca:	6849      	ldr	r1, [r1, #4]
 80025cc:	e7c3      	b.n	8002556 <_malloc_r+0x22>
 80025ce:	2303      	movs	r3, #3
 80025d0:	1cc4      	adds	r4, r0, #3
 80025d2:	439c      	bics	r4, r3
 80025d4:	42a0      	cmp	r0, r4
 80025d6:	d0e1      	beq.n	800259c <_malloc_r+0x68>
 80025d8:	1a21      	subs	r1, r4, r0
 80025da:	0030      	movs	r0, r6
 80025dc:	f000 fabc 	bl	8002b58 <_sbrk_r>
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d1db      	bne.n	800259c <_malloc_r+0x68>
 80025e4:	e7c7      	b.n	8002576 <_malloc_r+0x42>
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	20000088 	.word	0x20000088
 80025ec:	2000008c 	.word	0x2000008c

080025f0 <__sfputc_r>:
 80025f0:	6893      	ldr	r3, [r2, #8]
 80025f2:	b510      	push	{r4, lr}
 80025f4:	3b01      	subs	r3, #1
 80025f6:	6093      	str	r3, [r2, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da04      	bge.n	8002606 <__sfputc_r+0x16>
 80025fc:	6994      	ldr	r4, [r2, #24]
 80025fe:	42a3      	cmp	r3, r4
 8002600:	db07      	blt.n	8002612 <__sfputc_r+0x22>
 8002602:	290a      	cmp	r1, #10
 8002604:	d005      	beq.n	8002612 <__sfputc_r+0x22>
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	1c58      	adds	r0, r3, #1
 800260a:	6010      	str	r0, [r2, #0]
 800260c:	7019      	strb	r1, [r3, #0]
 800260e:	0008      	movs	r0, r1
 8002610:	bd10      	pop	{r4, pc}
 8002612:	f000 faff 	bl	8002c14 <__swbuf_r>
 8002616:	0001      	movs	r1, r0
 8002618:	e7f9      	b.n	800260e <__sfputc_r+0x1e>

0800261a <__sfputs_r>:
 800261a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261c:	0006      	movs	r6, r0
 800261e:	000f      	movs	r7, r1
 8002620:	0014      	movs	r4, r2
 8002622:	18d5      	adds	r5, r2, r3
 8002624:	42ac      	cmp	r4, r5
 8002626:	d101      	bne.n	800262c <__sfputs_r+0x12>
 8002628:	2000      	movs	r0, #0
 800262a:	e007      	b.n	800263c <__sfputs_r+0x22>
 800262c:	7821      	ldrb	r1, [r4, #0]
 800262e:	003a      	movs	r2, r7
 8002630:	0030      	movs	r0, r6
 8002632:	f7ff ffdd 	bl	80025f0 <__sfputc_r>
 8002636:	3401      	adds	r4, #1
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d1f3      	bne.n	8002624 <__sfputs_r+0xa>
 800263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002640 <_vfiprintf_r>:
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	b0a1      	sub	sp, #132	; 0x84
 8002644:	9003      	str	r0, [sp, #12]
 8002646:	000f      	movs	r7, r1
 8002648:	0016      	movs	r6, r2
 800264a:	001d      	movs	r5, r3
 800264c:	2800      	cmp	r0, #0
 800264e:	d005      	beq.n	800265c <_vfiprintf_r+0x1c>
 8002650:	6983      	ldr	r3, [r0, #24]
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <_vfiprintf_r+0x1c>
 8002658:	f7ff fed8 	bl	800240c <__sinit>
 800265c:	4b7b      	ldr	r3, [pc, #492]	; (800284c <_vfiprintf_r+0x20c>)
 800265e:	429f      	cmp	r7, r3
 8002660:	d15c      	bne.n	800271c <_vfiprintf_r+0xdc>
 8002662:	9b03      	ldr	r3, [sp, #12]
 8002664:	685f      	ldr	r7, [r3, #4]
 8002666:	89bb      	ldrh	r3, [r7, #12]
 8002668:	071b      	lsls	r3, r3, #28
 800266a:	d563      	bpl.n	8002734 <_vfiprintf_r+0xf4>
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d060      	beq.n	8002734 <_vfiprintf_r+0xf4>
 8002672:	2300      	movs	r3, #0
 8002674:	ac08      	add	r4, sp, #32
 8002676:	6163      	str	r3, [r4, #20]
 8002678:	3320      	adds	r3, #32
 800267a:	7663      	strb	r3, [r4, #25]
 800267c:	3310      	adds	r3, #16
 800267e:	76a3      	strb	r3, [r4, #26]
 8002680:	9507      	str	r5, [sp, #28]
 8002682:	0035      	movs	r5, r6
 8002684:	782b      	ldrb	r3, [r5, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <_vfiprintf_r+0x4e>
 800268a:	2b25      	cmp	r3, #37	; 0x25
 800268c:	d15c      	bne.n	8002748 <_vfiprintf_r+0x108>
 800268e:	1bab      	subs	r3, r5, r6
 8002690:	9305      	str	r3, [sp, #20]
 8002692:	d00c      	beq.n	80026ae <_vfiprintf_r+0x6e>
 8002694:	0032      	movs	r2, r6
 8002696:	0039      	movs	r1, r7
 8002698:	9803      	ldr	r0, [sp, #12]
 800269a:	f7ff ffbe 	bl	800261a <__sfputs_r>
 800269e:	1c43      	adds	r3, r0, #1
 80026a0:	d100      	bne.n	80026a4 <_vfiprintf_r+0x64>
 80026a2:	e0c4      	b.n	800282e <_vfiprintf_r+0x1ee>
 80026a4:	6962      	ldr	r2, [r4, #20]
 80026a6:	9b05      	ldr	r3, [sp, #20]
 80026a8:	4694      	mov	ip, r2
 80026aa:	4463      	add	r3, ip
 80026ac:	6163      	str	r3, [r4, #20]
 80026ae:	782b      	ldrb	r3, [r5, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d100      	bne.n	80026b6 <_vfiprintf_r+0x76>
 80026b4:	e0bb      	b.n	800282e <_vfiprintf_r+0x1ee>
 80026b6:	2201      	movs	r2, #1
 80026b8:	2300      	movs	r3, #0
 80026ba:	4252      	negs	r2, r2
 80026bc:	6062      	str	r2, [r4, #4]
 80026be:	a904      	add	r1, sp, #16
 80026c0:	3254      	adds	r2, #84	; 0x54
 80026c2:	1852      	adds	r2, r2, r1
 80026c4:	1c6e      	adds	r6, r5, #1
 80026c6:	6023      	str	r3, [r4, #0]
 80026c8:	60e3      	str	r3, [r4, #12]
 80026ca:	60a3      	str	r3, [r4, #8]
 80026cc:	7013      	strb	r3, [r2, #0]
 80026ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80026d0:	7831      	ldrb	r1, [r6, #0]
 80026d2:	2205      	movs	r2, #5
 80026d4:	485e      	ldr	r0, [pc, #376]	; (8002850 <_vfiprintf_r+0x210>)
 80026d6:	f000 fcc5 	bl	8003064 <memchr>
 80026da:	1c75      	adds	r5, r6, #1
 80026dc:	2800      	cmp	r0, #0
 80026de:	d135      	bne.n	800274c <_vfiprintf_r+0x10c>
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	06d3      	lsls	r3, r2, #27
 80026e4:	d504      	bpl.n	80026f0 <_vfiprintf_r+0xb0>
 80026e6:	2353      	movs	r3, #83	; 0x53
 80026e8:	a904      	add	r1, sp, #16
 80026ea:	185b      	adds	r3, r3, r1
 80026ec:	2120      	movs	r1, #32
 80026ee:	7019      	strb	r1, [r3, #0]
 80026f0:	0713      	lsls	r3, r2, #28
 80026f2:	d504      	bpl.n	80026fe <_vfiprintf_r+0xbe>
 80026f4:	2353      	movs	r3, #83	; 0x53
 80026f6:	a904      	add	r1, sp, #16
 80026f8:	185b      	adds	r3, r3, r1
 80026fa:	212b      	movs	r1, #43	; 0x2b
 80026fc:	7019      	strb	r1, [r3, #0]
 80026fe:	7833      	ldrb	r3, [r6, #0]
 8002700:	2b2a      	cmp	r3, #42	; 0x2a
 8002702:	d02c      	beq.n	800275e <_vfiprintf_r+0x11e>
 8002704:	0035      	movs	r5, r6
 8002706:	2100      	movs	r1, #0
 8002708:	200a      	movs	r0, #10
 800270a:	68e3      	ldr	r3, [r4, #12]
 800270c:	782a      	ldrb	r2, [r5, #0]
 800270e:	1c6e      	adds	r6, r5, #1
 8002710:	3a30      	subs	r2, #48	; 0x30
 8002712:	2a09      	cmp	r2, #9
 8002714:	d964      	bls.n	80027e0 <_vfiprintf_r+0x1a0>
 8002716:	2900      	cmp	r1, #0
 8002718:	d02e      	beq.n	8002778 <_vfiprintf_r+0x138>
 800271a:	e026      	b.n	800276a <_vfiprintf_r+0x12a>
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <_vfiprintf_r+0x214>)
 800271e:	429f      	cmp	r7, r3
 8002720:	d102      	bne.n	8002728 <_vfiprintf_r+0xe8>
 8002722:	9b03      	ldr	r3, [sp, #12]
 8002724:	689f      	ldr	r7, [r3, #8]
 8002726:	e79e      	b.n	8002666 <_vfiprintf_r+0x26>
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <_vfiprintf_r+0x218>)
 800272a:	429f      	cmp	r7, r3
 800272c:	d19b      	bne.n	8002666 <_vfiprintf_r+0x26>
 800272e:	9b03      	ldr	r3, [sp, #12]
 8002730:	68df      	ldr	r7, [r3, #12]
 8002732:	e798      	b.n	8002666 <_vfiprintf_r+0x26>
 8002734:	0039      	movs	r1, r7
 8002736:	9803      	ldr	r0, [sp, #12]
 8002738:	f000 fad6 	bl	8002ce8 <__swsetup_r>
 800273c:	2800      	cmp	r0, #0
 800273e:	d098      	beq.n	8002672 <_vfiprintf_r+0x32>
 8002740:	2001      	movs	r0, #1
 8002742:	4240      	negs	r0, r0
 8002744:	b021      	add	sp, #132	; 0x84
 8002746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002748:	3501      	adds	r5, #1
 800274a:	e79b      	b.n	8002684 <_vfiprintf_r+0x44>
 800274c:	4b40      	ldr	r3, [pc, #256]	; (8002850 <_vfiprintf_r+0x210>)
 800274e:	6822      	ldr	r2, [r4, #0]
 8002750:	1ac0      	subs	r0, r0, r3
 8002752:	2301      	movs	r3, #1
 8002754:	4083      	lsls	r3, r0
 8002756:	4313      	orrs	r3, r2
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	002e      	movs	r6, r5
 800275c:	e7b8      	b.n	80026d0 <_vfiprintf_r+0x90>
 800275e:	9b07      	ldr	r3, [sp, #28]
 8002760:	1d19      	adds	r1, r3, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	9107      	str	r1, [sp, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db01      	blt.n	800276e <_vfiprintf_r+0x12e>
 800276a:	930b      	str	r3, [sp, #44]	; 0x2c
 800276c:	e004      	b.n	8002778 <_vfiprintf_r+0x138>
 800276e:	425b      	negs	r3, r3
 8002770:	60e3      	str	r3, [r4, #12]
 8002772:	2302      	movs	r3, #2
 8002774:	4313      	orrs	r3, r2
 8002776:	6023      	str	r3, [r4, #0]
 8002778:	782b      	ldrb	r3, [r5, #0]
 800277a:	2b2e      	cmp	r3, #46	; 0x2e
 800277c:	d10a      	bne.n	8002794 <_vfiprintf_r+0x154>
 800277e:	786b      	ldrb	r3, [r5, #1]
 8002780:	2b2a      	cmp	r3, #42	; 0x2a
 8002782:	d135      	bne.n	80027f0 <_vfiprintf_r+0x1b0>
 8002784:	9b07      	ldr	r3, [sp, #28]
 8002786:	3502      	adds	r5, #2
 8002788:	1d1a      	adds	r2, r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	9207      	str	r2, [sp, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db2b      	blt.n	80027ea <_vfiprintf_r+0x1aa>
 8002792:	9309      	str	r3, [sp, #36]	; 0x24
 8002794:	4e31      	ldr	r6, [pc, #196]	; (800285c <_vfiprintf_r+0x21c>)
 8002796:	7829      	ldrb	r1, [r5, #0]
 8002798:	2203      	movs	r2, #3
 800279a:	0030      	movs	r0, r6
 800279c:	f000 fc62 	bl	8003064 <memchr>
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d006      	beq.n	80027b2 <_vfiprintf_r+0x172>
 80027a4:	2340      	movs	r3, #64	; 0x40
 80027a6:	1b80      	subs	r0, r0, r6
 80027a8:	4083      	lsls	r3, r0
 80027aa:	6822      	ldr	r2, [r4, #0]
 80027ac:	3501      	adds	r5, #1
 80027ae:	4313      	orrs	r3, r2
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	7829      	ldrb	r1, [r5, #0]
 80027b4:	2206      	movs	r2, #6
 80027b6:	482a      	ldr	r0, [pc, #168]	; (8002860 <_vfiprintf_r+0x220>)
 80027b8:	1c6e      	adds	r6, r5, #1
 80027ba:	7621      	strb	r1, [r4, #24]
 80027bc:	f000 fc52 	bl	8003064 <memchr>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d03a      	beq.n	800283a <_vfiprintf_r+0x1fa>
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <_vfiprintf_r+0x224>)
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d125      	bne.n	8002816 <_vfiprintf_r+0x1d6>
 80027ca:	2207      	movs	r2, #7
 80027cc:	9b07      	ldr	r3, [sp, #28]
 80027ce:	3307      	adds	r3, #7
 80027d0:	4393      	bics	r3, r2
 80027d2:	3308      	adds	r3, #8
 80027d4:	9307      	str	r3, [sp, #28]
 80027d6:	6963      	ldr	r3, [r4, #20]
 80027d8:	9a04      	ldr	r2, [sp, #16]
 80027da:	189b      	adds	r3, r3, r2
 80027dc:	6163      	str	r3, [r4, #20]
 80027de:	e750      	b.n	8002682 <_vfiprintf_r+0x42>
 80027e0:	4343      	muls	r3, r0
 80027e2:	2101      	movs	r1, #1
 80027e4:	189b      	adds	r3, r3, r2
 80027e6:	0035      	movs	r5, r6
 80027e8:	e790      	b.n	800270c <_vfiprintf_r+0xcc>
 80027ea:	2301      	movs	r3, #1
 80027ec:	425b      	negs	r3, r3
 80027ee:	e7d0      	b.n	8002792 <_vfiprintf_r+0x152>
 80027f0:	2300      	movs	r3, #0
 80027f2:	200a      	movs	r0, #10
 80027f4:	001a      	movs	r2, r3
 80027f6:	3501      	adds	r5, #1
 80027f8:	6063      	str	r3, [r4, #4]
 80027fa:	7829      	ldrb	r1, [r5, #0]
 80027fc:	1c6e      	adds	r6, r5, #1
 80027fe:	3930      	subs	r1, #48	; 0x30
 8002800:	2909      	cmp	r1, #9
 8002802:	d903      	bls.n	800280c <_vfiprintf_r+0x1cc>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0c5      	beq.n	8002794 <_vfiprintf_r+0x154>
 8002808:	9209      	str	r2, [sp, #36]	; 0x24
 800280a:	e7c3      	b.n	8002794 <_vfiprintf_r+0x154>
 800280c:	4342      	muls	r2, r0
 800280e:	2301      	movs	r3, #1
 8002810:	1852      	adds	r2, r2, r1
 8002812:	0035      	movs	r5, r6
 8002814:	e7f1      	b.n	80027fa <_vfiprintf_r+0x1ba>
 8002816:	ab07      	add	r3, sp, #28
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	003a      	movs	r2, r7
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <_vfiprintf_r+0x228>)
 800281e:	0021      	movs	r1, r4
 8002820:	9803      	ldr	r0, [sp, #12]
 8002822:	e000      	b.n	8002826 <_vfiprintf_r+0x1e6>
 8002824:	bf00      	nop
 8002826:	9004      	str	r0, [sp, #16]
 8002828:	9b04      	ldr	r3, [sp, #16]
 800282a:	3301      	adds	r3, #1
 800282c:	d1d3      	bne.n	80027d6 <_vfiprintf_r+0x196>
 800282e:	89bb      	ldrh	r3, [r7, #12]
 8002830:	065b      	lsls	r3, r3, #25
 8002832:	d500      	bpl.n	8002836 <_vfiprintf_r+0x1f6>
 8002834:	e784      	b.n	8002740 <_vfiprintf_r+0x100>
 8002836:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002838:	e784      	b.n	8002744 <_vfiprintf_r+0x104>
 800283a:	ab07      	add	r3, sp, #28
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	003a      	movs	r2, r7
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <_vfiprintf_r+0x228>)
 8002842:	0021      	movs	r1, r4
 8002844:	9803      	ldr	r0, [sp, #12]
 8002846:	f000 f87f 	bl	8002948 <_printf_i>
 800284a:	e7ec      	b.n	8002826 <_vfiprintf_r+0x1e6>
 800284c:	080031e8 	.word	0x080031e8
 8002850:	08003228 	.word	0x08003228
 8002854:	08003208 	.word	0x08003208
 8002858:	080031c8 	.word	0x080031c8
 800285c:	0800322e 	.word	0x0800322e
 8002860:	08003232 	.word	0x08003232
 8002864:	00000000 	.word	0x00000000
 8002868:	0800261b 	.word	0x0800261b

0800286c <_printf_common>:
 800286c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800286e:	0015      	movs	r5, r2
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	688a      	ldr	r2, [r1, #8]
 8002874:	690b      	ldr	r3, [r1, #16]
 8002876:	9000      	str	r0, [sp, #0]
 8002878:	000c      	movs	r4, r1
 800287a:	4293      	cmp	r3, r2
 800287c:	da00      	bge.n	8002880 <_printf_common+0x14>
 800287e:	0013      	movs	r3, r2
 8002880:	0022      	movs	r2, r4
 8002882:	602b      	str	r3, [r5, #0]
 8002884:	3243      	adds	r2, #67	; 0x43
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	2a00      	cmp	r2, #0
 800288a:	d001      	beq.n	8002890 <_printf_common+0x24>
 800288c:	3301      	adds	r3, #1
 800288e:	602b      	str	r3, [r5, #0]
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	069b      	lsls	r3, r3, #26
 8002894:	d502      	bpl.n	800289c <_printf_common+0x30>
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	3302      	adds	r3, #2
 800289a:	602b      	str	r3, [r5, #0]
 800289c:	2706      	movs	r7, #6
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	401f      	ands	r7, r3
 80028a2:	d027      	beq.n	80028f4 <_printf_common+0x88>
 80028a4:	0023      	movs	r3, r4
 80028a6:	3343      	adds	r3, #67	; 0x43
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	4193      	sbcs	r3, r2
 80028ae:	6822      	ldr	r2, [r4, #0]
 80028b0:	0692      	lsls	r2, r2, #26
 80028b2:	d430      	bmi.n	8002916 <_printf_common+0xaa>
 80028b4:	0022      	movs	r2, r4
 80028b6:	9901      	ldr	r1, [sp, #4]
 80028b8:	3243      	adds	r2, #67	; 0x43
 80028ba:	9800      	ldr	r0, [sp, #0]
 80028bc:	9e08      	ldr	r6, [sp, #32]
 80028be:	47b0      	blx	r6
 80028c0:	1c43      	adds	r3, r0, #1
 80028c2:	d025      	beq.n	8002910 <_printf_common+0xa4>
 80028c4:	2306      	movs	r3, #6
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	682a      	ldr	r2, [r5, #0]
 80028ca:	68e1      	ldr	r1, [r4, #12]
 80028cc:	4003      	ands	r3, r0
 80028ce:	2500      	movs	r5, #0
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d103      	bne.n	80028dc <_printf_common+0x70>
 80028d4:	1a8d      	subs	r5, r1, r2
 80028d6:	43eb      	mvns	r3, r5
 80028d8:	17db      	asrs	r3, r3, #31
 80028da:	401d      	ands	r5, r3
 80028dc:	68a3      	ldr	r3, [r4, #8]
 80028de:	6922      	ldr	r2, [r4, #16]
 80028e0:	4293      	cmp	r3, r2
 80028e2:	dd01      	ble.n	80028e8 <_printf_common+0x7c>
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	18ed      	adds	r5, r5, r3
 80028e8:	2700      	movs	r7, #0
 80028ea:	42bd      	cmp	r5, r7
 80028ec:	d120      	bne.n	8002930 <_printf_common+0xc4>
 80028ee:	2000      	movs	r0, #0
 80028f0:	e010      	b.n	8002914 <_printf_common+0xa8>
 80028f2:	3701      	adds	r7, #1
 80028f4:	68e3      	ldr	r3, [r4, #12]
 80028f6:	682a      	ldr	r2, [r5, #0]
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	42bb      	cmp	r3, r7
 80028fc:	ddd2      	ble.n	80028a4 <_printf_common+0x38>
 80028fe:	0022      	movs	r2, r4
 8002900:	2301      	movs	r3, #1
 8002902:	3219      	adds	r2, #25
 8002904:	9901      	ldr	r1, [sp, #4]
 8002906:	9800      	ldr	r0, [sp, #0]
 8002908:	9e08      	ldr	r6, [sp, #32]
 800290a:	47b0      	blx	r6
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d1f0      	bne.n	80028f2 <_printf_common+0x86>
 8002910:	2001      	movs	r0, #1
 8002912:	4240      	negs	r0, r0
 8002914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002916:	2030      	movs	r0, #48	; 0x30
 8002918:	18e1      	adds	r1, r4, r3
 800291a:	3143      	adds	r1, #67	; 0x43
 800291c:	7008      	strb	r0, [r1, #0]
 800291e:	0021      	movs	r1, r4
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	3145      	adds	r1, #69	; 0x45
 8002924:	7809      	ldrb	r1, [r1, #0]
 8002926:	18a2      	adds	r2, r4, r2
 8002928:	3243      	adds	r2, #67	; 0x43
 800292a:	3302      	adds	r3, #2
 800292c:	7011      	strb	r1, [r2, #0]
 800292e:	e7c1      	b.n	80028b4 <_printf_common+0x48>
 8002930:	0022      	movs	r2, r4
 8002932:	2301      	movs	r3, #1
 8002934:	321a      	adds	r2, #26
 8002936:	9901      	ldr	r1, [sp, #4]
 8002938:	9800      	ldr	r0, [sp, #0]
 800293a:	9e08      	ldr	r6, [sp, #32]
 800293c:	47b0      	blx	r6
 800293e:	1c43      	adds	r3, r0, #1
 8002940:	d0e6      	beq.n	8002910 <_printf_common+0xa4>
 8002942:	3701      	adds	r7, #1
 8002944:	e7d1      	b.n	80028ea <_printf_common+0x7e>
	...

08002948 <_printf_i>:
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	9204      	str	r2, [sp, #16]
 800294e:	000a      	movs	r2, r1
 8002950:	3243      	adds	r2, #67	; 0x43
 8002952:	9305      	str	r3, [sp, #20]
 8002954:	9003      	str	r0, [sp, #12]
 8002956:	9202      	str	r2, [sp, #8]
 8002958:	7e0a      	ldrb	r2, [r1, #24]
 800295a:	000c      	movs	r4, r1
 800295c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800295e:	2a6e      	cmp	r2, #110	; 0x6e
 8002960:	d100      	bne.n	8002964 <_printf_i+0x1c>
 8002962:	e086      	b.n	8002a72 <_printf_i+0x12a>
 8002964:	d81f      	bhi.n	80029a6 <_printf_i+0x5e>
 8002966:	2a63      	cmp	r2, #99	; 0x63
 8002968:	d033      	beq.n	80029d2 <_printf_i+0x8a>
 800296a:	d808      	bhi.n	800297e <_printf_i+0x36>
 800296c:	2a00      	cmp	r2, #0
 800296e:	d100      	bne.n	8002972 <_printf_i+0x2a>
 8002970:	e08c      	b.n	8002a8c <_printf_i+0x144>
 8002972:	2a58      	cmp	r2, #88	; 0x58
 8002974:	d04d      	beq.n	8002a12 <_printf_i+0xca>
 8002976:	0025      	movs	r5, r4
 8002978:	3542      	adds	r5, #66	; 0x42
 800297a:	702a      	strb	r2, [r5, #0]
 800297c:	e030      	b.n	80029e0 <_printf_i+0x98>
 800297e:	2a64      	cmp	r2, #100	; 0x64
 8002980:	d001      	beq.n	8002986 <_printf_i+0x3e>
 8002982:	2a69      	cmp	r2, #105	; 0x69
 8002984:	d1f7      	bne.n	8002976 <_printf_i+0x2e>
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	6825      	ldr	r5, [r4, #0]
 800298a:	1d0a      	adds	r2, r1, #4
 800298c:	0628      	lsls	r0, r5, #24
 800298e:	d529      	bpl.n	80029e4 <_printf_i+0x9c>
 8002990:	6808      	ldr	r0, [r1, #0]
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	2800      	cmp	r0, #0
 8002996:	da03      	bge.n	80029a0 <_printf_i+0x58>
 8002998:	232d      	movs	r3, #45	; 0x2d
 800299a:	9a02      	ldr	r2, [sp, #8]
 800299c:	4240      	negs	r0, r0
 800299e:	7013      	strb	r3, [r2, #0]
 80029a0:	4e6b      	ldr	r6, [pc, #428]	; (8002b50 <_printf_i+0x208>)
 80029a2:	270a      	movs	r7, #10
 80029a4:	e04f      	b.n	8002a46 <_printf_i+0xfe>
 80029a6:	2a73      	cmp	r2, #115	; 0x73
 80029a8:	d074      	beq.n	8002a94 <_printf_i+0x14c>
 80029aa:	d808      	bhi.n	80029be <_printf_i+0x76>
 80029ac:	2a6f      	cmp	r2, #111	; 0x6f
 80029ae:	d01f      	beq.n	80029f0 <_printf_i+0xa8>
 80029b0:	2a70      	cmp	r2, #112	; 0x70
 80029b2:	d1e0      	bne.n	8002976 <_printf_i+0x2e>
 80029b4:	2220      	movs	r2, #32
 80029b6:	6809      	ldr	r1, [r1, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	6022      	str	r2, [r4, #0]
 80029bc:	e003      	b.n	80029c6 <_printf_i+0x7e>
 80029be:	2a75      	cmp	r2, #117	; 0x75
 80029c0:	d016      	beq.n	80029f0 <_printf_i+0xa8>
 80029c2:	2a78      	cmp	r2, #120	; 0x78
 80029c4:	d1d7      	bne.n	8002976 <_printf_i+0x2e>
 80029c6:	0022      	movs	r2, r4
 80029c8:	2178      	movs	r1, #120	; 0x78
 80029ca:	3245      	adds	r2, #69	; 0x45
 80029cc:	7011      	strb	r1, [r2, #0]
 80029ce:	4e61      	ldr	r6, [pc, #388]	; (8002b54 <_printf_i+0x20c>)
 80029d0:	e022      	b.n	8002a18 <_printf_i+0xd0>
 80029d2:	0025      	movs	r5, r4
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	3542      	adds	r5, #66	; 0x42
 80029d8:	1d11      	adds	r1, r2, #4
 80029da:	6019      	str	r1, [r3, #0]
 80029dc:	6813      	ldr	r3, [r2, #0]
 80029de:	702b      	strb	r3, [r5, #0]
 80029e0:	2301      	movs	r3, #1
 80029e2:	e065      	b.n	8002ab0 <_printf_i+0x168>
 80029e4:	6808      	ldr	r0, [r1, #0]
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	0669      	lsls	r1, r5, #25
 80029ea:	d5d3      	bpl.n	8002994 <_printf_i+0x4c>
 80029ec:	b200      	sxth	r0, r0
 80029ee:	e7d1      	b.n	8002994 <_printf_i+0x4c>
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	6825      	ldr	r5, [r4, #0]
 80029f4:	1d08      	adds	r0, r1, #4
 80029f6:	6018      	str	r0, [r3, #0]
 80029f8:	6808      	ldr	r0, [r1, #0]
 80029fa:	062e      	lsls	r6, r5, #24
 80029fc:	d505      	bpl.n	8002a0a <_printf_i+0xc2>
 80029fe:	4e54      	ldr	r6, [pc, #336]	; (8002b50 <_printf_i+0x208>)
 8002a00:	2708      	movs	r7, #8
 8002a02:	2a6f      	cmp	r2, #111	; 0x6f
 8002a04:	d01b      	beq.n	8002a3e <_printf_i+0xf6>
 8002a06:	270a      	movs	r7, #10
 8002a08:	e019      	b.n	8002a3e <_printf_i+0xf6>
 8002a0a:	066d      	lsls	r5, r5, #25
 8002a0c:	d5f7      	bpl.n	80029fe <_printf_i+0xb6>
 8002a0e:	b280      	uxth	r0, r0
 8002a10:	e7f5      	b.n	80029fe <_printf_i+0xb6>
 8002a12:	3145      	adds	r1, #69	; 0x45
 8002a14:	4e4e      	ldr	r6, [pc, #312]	; (8002b50 <_printf_i+0x208>)
 8002a16:	700a      	strb	r2, [r1, #0]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	1d01      	adds	r1, r0, #4
 8002a1e:	6800      	ldr	r0, [r0, #0]
 8002a20:	6019      	str	r1, [r3, #0]
 8002a22:	0615      	lsls	r5, r2, #24
 8002a24:	d521      	bpl.n	8002a6a <_printf_i+0x122>
 8002a26:	07d3      	lsls	r3, r2, #31
 8002a28:	d502      	bpl.n	8002a30 <_printf_i+0xe8>
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	6022      	str	r2, [r4, #0]
 8002a30:	2710      	movs	r7, #16
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d103      	bne.n	8002a3e <_printf_i+0xf6>
 8002a36:	2320      	movs	r3, #32
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	439a      	bics	r2, r3
 8002a3c:	6022      	str	r2, [r4, #0]
 8002a3e:	0023      	movs	r3, r4
 8002a40:	2200      	movs	r2, #0
 8002a42:	3343      	adds	r3, #67	; 0x43
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	60a3      	str	r3, [r4, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db58      	blt.n	8002b00 <_printf_i+0x1b8>
 8002a4e:	2204      	movs	r2, #4
 8002a50:	6821      	ldr	r1, [r4, #0]
 8002a52:	4391      	bics	r1, r2
 8002a54:	6021      	str	r1, [r4, #0]
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d154      	bne.n	8002b04 <_printf_i+0x1bc>
 8002a5a:	9d02      	ldr	r5, [sp, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05a      	beq.n	8002b16 <_printf_i+0x1ce>
 8002a60:	0025      	movs	r5, r4
 8002a62:	7833      	ldrb	r3, [r6, #0]
 8002a64:	3542      	adds	r5, #66	; 0x42
 8002a66:	702b      	strb	r3, [r5, #0]
 8002a68:	e055      	b.n	8002b16 <_printf_i+0x1ce>
 8002a6a:	0655      	lsls	r5, r2, #25
 8002a6c:	d5db      	bpl.n	8002a26 <_printf_i+0xde>
 8002a6e:	b280      	uxth	r0, r0
 8002a70:	e7d9      	b.n	8002a26 <_printf_i+0xde>
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	680d      	ldr	r5, [r1, #0]
 8002a76:	1d10      	adds	r0, r2, #4
 8002a78:	6949      	ldr	r1, [r1, #20]
 8002a7a:	6018      	str	r0, [r3, #0]
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	062e      	lsls	r6, r5, #24
 8002a80:	d501      	bpl.n	8002a86 <_printf_i+0x13e>
 8002a82:	6019      	str	r1, [r3, #0]
 8002a84:	e002      	b.n	8002a8c <_printf_i+0x144>
 8002a86:	066d      	lsls	r5, r5, #25
 8002a88:	d5fb      	bpl.n	8002a82 <_printf_i+0x13a>
 8002a8a:	8019      	strh	r1, [r3, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9d02      	ldr	r5, [sp, #8]
 8002a90:	6123      	str	r3, [r4, #16]
 8002a92:	e04f      	b.n	8002b34 <_printf_i+0x1ec>
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	1d11      	adds	r1, r2, #4
 8002a98:	6019      	str	r1, [r3, #0]
 8002a9a:	6815      	ldr	r5, [r2, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	6862      	ldr	r2, [r4, #4]
 8002aa0:	0028      	movs	r0, r5
 8002aa2:	f000 fadf 	bl	8003064 <memchr>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d001      	beq.n	8002aae <_printf_i+0x166>
 8002aaa:	1b40      	subs	r0, r0, r5
 8002aac:	6060      	str	r0, [r4, #4]
 8002aae:	6863      	ldr	r3, [r4, #4]
 8002ab0:	6123      	str	r3, [r4, #16]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9a02      	ldr	r2, [sp, #8]
 8002ab6:	7013      	strb	r3, [r2, #0]
 8002ab8:	e03c      	b.n	8002b34 <_printf_i+0x1ec>
 8002aba:	6923      	ldr	r3, [r4, #16]
 8002abc:	002a      	movs	r2, r5
 8002abe:	9904      	ldr	r1, [sp, #16]
 8002ac0:	9803      	ldr	r0, [sp, #12]
 8002ac2:	9d05      	ldr	r5, [sp, #20]
 8002ac4:	47a8      	blx	r5
 8002ac6:	1c43      	adds	r3, r0, #1
 8002ac8:	d03e      	beq.n	8002b48 <_printf_i+0x200>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	079b      	lsls	r3, r3, #30
 8002ace:	d415      	bmi.n	8002afc <_printf_i+0x1b4>
 8002ad0:	9b07      	ldr	r3, [sp, #28]
 8002ad2:	68e0      	ldr	r0, [r4, #12]
 8002ad4:	4298      	cmp	r0, r3
 8002ad6:	da39      	bge.n	8002b4c <_printf_i+0x204>
 8002ad8:	0018      	movs	r0, r3
 8002ada:	e037      	b.n	8002b4c <_printf_i+0x204>
 8002adc:	0022      	movs	r2, r4
 8002ade:	2301      	movs	r3, #1
 8002ae0:	3219      	adds	r2, #25
 8002ae2:	9904      	ldr	r1, [sp, #16]
 8002ae4:	9803      	ldr	r0, [sp, #12]
 8002ae6:	9e05      	ldr	r6, [sp, #20]
 8002ae8:	47b0      	blx	r6
 8002aea:	1c43      	adds	r3, r0, #1
 8002aec:	d02c      	beq.n	8002b48 <_printf_i+0x200>
 8002aee:	3501      	adds	r5, #1
 8002af0:	68e3      	ldr	r3, [r4, #12]
 8002af2:	9a07      	ldr	r2, [sp, #28]
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	42ab      	cmp	r3, r5
 8002af8:	dcf0      	bgt.n	8002adc <_printf_i+0x194>
 8002afa:	e7e9      	b.n	8002ad0 <_printf_i+0x188>
 8002afc:	2500      	movs	r5, #0
 8002afe:	e7f7      	b.n	8002af0 <_printf_i+0x1a8>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d0ad      	beq.n	8002a60 <_printf_i+0x118>
 8002b04:	9d02      	ldr	r5, [sp, #8]
 8002b06:	0039      	movs	r1, r7
 8002b08:	f7fd fb84 	bl	8000214 <__aeabi_uidivmod>
 8002b0c:	5c73      	ldrb	r3, [r6, r1]
 8002b0e:	3d01      	subs	r5, #1
 8002b10:	702b      	strb	r3, [r5, #0]
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d1f7      	bne.n	8002b06 <_printf_i+0x1be>
 8002b16:	2f08      	cmp	r7, #8
 8002b18:	d109      	bne.n	8002b2e <_printf_i+0x1e6>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	07db      	lsls	r3, r3, #31
 8002b1e:	d506      	bpl.n	8002b2e <_printf_i+0x1e6>
 8002b20:	6863      	ldr	r3, [r4, #4]
 8002b22:	6922      	ldr	r2, [r4, #16]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	dc02      	bgt.n	8002b2e <_printf_i+0x1e6>
 8002b28:	2330      	movs	r3, #48	; 0x30
 8002b2a:	3d01      	subs	r5, #1
 8002b2c:	702b      	strb	r3, [r5, #0]
 8002b2e:	9b02      	ldr	r3, [sp, #8]
 8002b30:	1b5b      	subs	r3, r3, r5
 8002b32:	6123      	str	r3, [r4, #16]
 8002b34:	9b05      	ldr	r3, [sp, #20]
 8002b36:	aa07      	add	r2, sp, #28
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	0021      	movs	r1, r4
 8002b3c:	9b04      	ldr	r3, [sp, #16]
 8002b3e:	9803      	ldr	r0, [sp, #12]
 8002b40:	f7ff fe94 	bl	800286c <_printf_common>
 8002b44:	1c43      	adds	r3, r0, #1
 8002b46:	d1b8      	bne.n	8002aba <_printf_i+0x172>
 8002b48:	2001      	movs	r0, #1
 8002b4a:	4240      	negs	r0, r0
 8002b4c:	b009      	add	sp, #36	; 0x24
 8002b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b50:	08003239 	.word	0x08003239
 8002b54:	0800324a 	.word	0x0800324a

08002b58 <_sbrk_r>:
 8002b58:	2300      	movs	r3, #0
 8002b5a:	b570      	push	{r4, r5, r6, lr}
 8002b5c:	4c06      	ldr	r4, [pc, #24]	; (8002b78 <_sbrk_r+0x20>)
 8002b5e:	0005      	movs	r5, r0
 8002b60:	0008      	movs	r0, r1
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	f7fd fe4a 	bl	80007fc <_sbrk>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	d103      	bne.n	8002b74 <_sbrk_r+0x1c>
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d000      	beq.n	8002b74 <_sbrk_r+0x1c>
 8002b72:	602b      	str	r3, [r5, #0]
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	20000128 	.word	0x20000128

08002b7c <__sread>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	000c      	movs	r4, r1
 8002b80:	250e      	movs	r5, #14
 8002b82:	5f49      	ldrsh	r1, [r1, r5]
 8002b84:	f000 fac6 	bl	8003114 <_read_r>
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	db03      	blt.n	8002b94 <__sread+0x18>
 8002b8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b8e:	181b      	adds	r3, r3, r0
 8002b90:	6563      	str	r3, [r4, #84]	; 0x54
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	4a02      	ldr	r2, [pc, #8]	; (8002ba0 <__sread+0x24>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	81a3      	strh	r3, [r4, #12]
 8002b9c:	e7f9      	b.n	8002b92 <__sread+0x16>
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	ffffefff 	.word	0xffffefff

08002ba4 <__swrite>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	001f      	movs	r7, r3
 8002ba8:	898b      	ldrh	r3, [r1, #12]
 8002baa:	0005      	movs	r5, r0
 8002bac:	000c      	movs	r4, r1
 8002bae:	0016      	movs	r6, r2
 8002bb0:	05db      	lsls	r3, r3, #23
 8002bb2:	d505      	bpl.n	8002bc0 <__swrite+0x1c>
 8002bb4:	230e      	movs	r3, #14
 8002bb6:	5ec9      	ldrsh	r1, [r1, r3]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2302      	movs	r3, #2
 8002bbc:	f000 f9d2 	bl	8002f64 <_lseek_r>
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <__swrite+0x34>)
 8002bc4:	0028      	movs	r0, r5
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	0032      	movs	r2, r6
 8002bcc:	230e      	movs	r3, #14
 8002bce:	5ee1      	ldrsh	r1, [r4, r3]
 8002bd0:	003b      	movs	r3, r7
 8002bd2:	f000 f875 	bl	8002cc0 <_write_r>
 8002bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd8:	ffffefff 	.word	0xffffefff

08002bdc <__sseek>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	000c      	movs	r4, r1
 8002be0:	250e      	movs	r5, #14
 8002be2:	5f49      	ldrsh	r1, [r1, r5]
 8002be4:	f000 f9be 	bl	8002f64 <_lseek_r>
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	1c42      	adds	r2, r0, #1
 8002bec:	d103      	bne.n	8002bf6 <__sseek+0x1a>
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <__sseek+0x28>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	81a3      	strh	r3, [r4, #12]
 8002bf4:	bd70      	pop	{r4, r5, r6, pc}
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	0152      	lsls	r2, r2, #5
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	81a3      	strh	r3, [r4, #12]
 8002bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8002c00:	e7f8      	b.n	8002bf4 <__sseek+0x18>
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	ffffefff 	.word	0xffffefff

08002c08 <__sclose>:
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	5ec9      	ldrsh	r1, [r1, r3]
 8002c0e:	f000 f8e1 	bl	8002dd4 <_close_r>
 8002c12:	bd10      	pop	{r4, pc}

08002c14 <__swbuf_r>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	0005      	movs	r5, r0
 8002c18:	000e      	movs	r6, r1
 8002c1a:	0014      	movs	r4, r2
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d004      	beq.n	8002c2a <__swbuf_r+0x16>
 8002c20:	6983      	ldr	r3, [r0, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <__swbuf_r+0x16>
 8002c26:	f7ff fbf1 	bl	800240c <__sinit>
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <__swbuf_r+0xa0>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	d12d      	bne.n	8002c8c <__swbuf_r+0x78>
 8002c30:	686c      	ldr	r4, [r5, #4]
 8002c32:	69a3      	ldr	r3, [r4, #24]
 8002c34:	60a3      	str	r3, [r4, #8]
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	d531      	bpl.n	8002ca0 <__swbuf_r+0x8c>
 8002c3c:	6923      	ldr	r3, [r4, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02e      	beq.n	8002ca0 <__swbuf_r+0x8c>
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	6922      	ldr	r2, [r4, #16]
 8002c46:	b2f7      	uxtb	r7, r6
 8002c48:	1a98      	subs	r0, r3, r2
 8002c4a:	6963      	ldr	r3, [r4, #20]
 8002c4c:	b2f6      	uxtb	r6, r6
 8002c4e:	4283      	cmp	r3, r0
 8002c50:	dc05      	bgt.n	8002c5e <__swbuf_r+0x4a>
 8002c52:	0021      	movs	r1, r4
 8002c54:	0028      	movs	r0, r5
 8002c56:	f000 f959 	bl	8002f0c <_fflush_r>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d126      	bne.n	8002cac <__swbuf_r+0x98>
 8002c5e:	68a3      	ldr	r3, [r4, #8]
 8002c60:	3001      	adds	r0, #1
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60a3      	str	r3, [r4, #8]
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	6022      	str	r2, [r4, #0]
 8002c6c:	701f      	strb	r7, [r3, #0]
 8002c6e:	6963      	ldr	r3, [r4, #20]
 8002c70:	4283      	cmp	r3, r0
 8002c72:	d004      	beq.n	8002c7e <__swbuf_r+0x6a>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d51a      	bpl.n	8002cb0 <__swbuf_r+0x9c>
 8002c7a:	2e0a      	cmp	r6, #10
 8002c7c:	d118      	bne.n	8002cb0 <__swbuf_r+0x9c>
 8002c7e:	0021      	movs	r1, r4
 8002c80:	0028      	movs	r0, r5
 8002c82:	f000 f943 	bl	8002f0c <_fflush_r>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d012      	beq.n	8002cb0 <__swbuf_r+0x9c>
 8002c8a:	e00f      	b.n	8002cac <__swbuf_r+0x98>
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <__swbuf_r+0xa4>)
 8002c8e:	429c      	cmp	r4, r3
 8002c90:	d101      	bne.n	8002c96 <__swbuf_r+0x82>
 8002c92:	68ac      	ldr	r4, [r5, #8]
 8002c94:	e7cd      	b.n	8002c32 <__swbuf_r+0x1e>
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <__swbuf_r+0xa8>)
 8002c98:	429c      	cmp	r4, r3
 8002c9a:	d1ca      	bne.n	8002c32 <__swbuf_r+0x1e>
 8002c9c:	68ec      	ldr	r4, [r5, #12]
 8002c9e:	e7c8      	b.n	8002c32 <__swbuf_r+0x1e>
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	0028      	movs	r0, r5
 8002ca4:	f000 f820 	bl	8002ce8 <__swsetup_r>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d0ca      	beq.n	8002c42 <__swbuf_r+0x2e>
 8002cac:	2601      	movs	r6, #1
 8002cae:	4276      	negs	r6, r6
 8002cb0:	0030      	movs	r0, r6
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb4:	080031e8 	.word	0x080031e8
 8002cb8:	08003208 	.word	0x08003208
 8002cbc:	080031c8 	.word	0x080031c8

08002cc0 <_write_r>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	0005      	movs	r5, r0
 8002cc4:	0008      	movs	r0, r1
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4c06      	ldr	r4, [pc, #24]	; (8002ce4 <_write_r+0x24>)
 8002ccc:	6022      	str	r2, [r4, #0]
 8002cce:	001a      	movs	r2, r3
 8002cd0:	f7fd fd4b 	bl	800076a <_write>
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	d103      	bne.n	8002ce0 <_write_r+0x20>
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d000      	beq.n	8002ce0 <_write_r+0x20>
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	20000128 	.word	0x20000128

08002ce8 <__swsetup_r>:
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <__swsetup_r+0xdc>)
 8002cea:	b570      	push	{r4, r5, r6, lr}
 8002cec:	681d      	ldr	r5, [r3, #0]
 8002cee:	0006      	movs	r6, r0
 8002cf0:	000c      	movs	r4, r1
 8002cf2:	2d00      	cmp	r5, #0
 8002cf4:	d005      	beq.n	8002d02 <__swsetup_r+0x1a>
 8002cf6:	69ab      	ldr	r3, [r5, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <__swsetup_r+0x1a>
 8002cfc:	0028      	movs	r0, r5
 8002cfe:	f7ff fb85 	bl	800240c <__sinit>
 8002d02:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <__swsetup_r+0xe0>)
 8002d04:	429c      	cmp	r4, r3
 8002d06:	d10f      	bne.n	8002d28 <__swsetup_r+0x40>
 8002d08:	686c      	ldr	r4, [r5, #4]
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	5ee2      	ldrsh	r2, [r4, r3]
 8002d0e:	b293      	uxth	r3, r2
 8002d10:	0719      	lsls	r1, r3, #28
 8002d12:	d42d      	bmi.n	8002d70 <__swsetup_r+0x88>
 8002d14:	06d9      	lsls	r1, r3, #27
 8002d16:	d411      	bmi.n	8002d3c <__swsetup_r+0x54>
 8002d18:	2309      	movs	r3, #9
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	6033      	str	r3, [r6, #0]
 8002d1e:	3337      	adds	r3, #55	; 0x37
 8002d20:	4313      	orrs	r3, r2
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	4240      	negs	r0, r0
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <__swsetup_r+0xe4>)
 8002d2a:	429c      	cmp	r4, r3
 8002d2c:	d101      	bne.n	8002d32 <__swsetup_r+0x4a>
 8002d2e:	68ac      	ldr	r4, [r5, #8]
 8002d30:	e7eb      	b.n	8002d0a <__swsetup_r+0x22>
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <__swsetup_r+0xe8>)
 8002d34:	429c      	cmp	r4, r3
 8002d36:	d1e8      	bne.n	8002d0a <__swsetup_r+0x22>
 8002d38:	68ec      	ldr	r4, [r5, #12]
 8002d3a:	e7e6      	b.n	8002d0a <__swsetup_r+0x22>
 8002d3c:	075b      	lsls	r3, r3, #29
 8002d3e:	d513      	bpl.n	8002d68 <__swsetup_r+0x80>
 8002d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d008      	beq.n	8002d58 <__swsetup_r+0x70>
 8002d46:	0023      	movs	r3, r4
 8002d48:	3344      	adds	r3, #68	; 0x44
 8002d4a:	4299      	cmp	r1, r3
 8002d4c:	d002      	beq.n	8002d54 <__swsetup_r+0x6c>
 8002d4e:	0030      	movs	r0, r6
 8002d50:	f000 f996 	bl	8003080 <_free_r>
 8002d54:	2300      	movs	r3, #0
 8002d56:	6363      	str	r3, [r4, #52]	; 0x34
 8002d58:	2224      	movs	r2, #36	; 0x24
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	81a3      	strh	r3, [r4, #12]
 8002d60:	2300      	movs	r3, #0
 8002d62:	6063      	str	r3, [r4, #4]
 8002d64:	6923      	ldr	r3, [r4, #16]
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	2308      	movs	r3, #8
 8002d6a:	89a2      	ldrh	r2, [r4, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	6923      	ldr	r3, [r4, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <__swsetup_r+0xa6>
 8002d76:	21a0      	movs	r1, #160	; 0xa0
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	0089      	lsls	r1, r1, #2
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	400b      	ands	r3, r1
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <__swsetup_r+0xa6>
 8002d86:	0021      	movs	r1, r4
 8002d88:	0030      	movs	r0, r6
 8002d8a:	f000 f927 	bl	8002fdc <__smakebuf_r>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	89a2      	ldrh	r2, [r4, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	d011      	beq.n	8002dba <__swsetup_r+0xd2>
 8002d96:	2300      	movs	r3, #0
 8002d98:	60a3      	str	r3, [r4, #8]
 8002d9a:	6963      	ldr	r3, [r4, #20]
 8002d9c:	425b      	negs	r3, r3
 8002d9e:	61a3      	str	r3, [r4, #24]
 8002da0:	2000      	movs	r0, #0
 8002da2:	6923      	ldr	r3, [r4, #16]
 8002da4:	4283      	cmp	r3, r0
 8002da6:	d1be      	bne.n	8002d26 <__swsetup_r+0x3e>
 8002da8:	230c      	movs	r3, #12
 8002daa:	5ee2      	ldrsh	r2, [r4, r3]
 8002dac:	0613      	lsls	r3, r2, #24
 8002dae:	d5ba      	bpl.n	8002d26 <__swsetup_r+0x3e>
 8002db0:	2340      	movs	r3, #64	; 0x40
 8002db2:	4313      	orrs	r3, r2
 8002db4:	81a3      	strh	r3, [r4, #12]
 8002db6:	3801      	subs	r0, #1
 8002db8:	e7b5      	b.n	8002d26 <__swsetup_r+0x3e>
 8002dba:	0792      	lsls	r2, r2, #30
 8002dbc:	d400      	bmi.n	8002dc0 <__swsetup_r+0xd8>
 8002dbe:	6963      	ldr	r3, [r4, #20]
 8002dc0:	60a3      	str	r3, [r4, #8]
 8002dc2:	e7ed      	b.n	8002da0 <__swsetup_r+0xb8>
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	080031e8 	.word	0x080031e8
 8002dcc:	08003208 	.word	0x08003208
 8002dd0:	080031c8 	.word	0x080031c8

08002dd4 <_close_r>:
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	b570      	push	{r4, r5, r6, lr}
 8002dd8:	4c06      	ldr	r4, [pc, #24]	; (8002df4 <_close_r+0x20>)
 8002dda:	0005      	movs	r5, r0
 8002ddc:	0008      	movs	r0, r1
 8002dde:	6023      	str	r3, [r4, #0]
 8002de0:	f7fd fcdf 	bl	80007a2 <_close>
 8002de4:	1c43      	adds	r3, r0, #1
 8002de6:	d103      	bne.n	8002df0 <_close_r+0x1c>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d000      	beq.n	8002df0 <_close_r+0x1c>
 8002dee:	602b      	str	r3, [r5, #0]
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	20000128 	.word	0x20000128

08002df8 <__sflush_r>:
 8002df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dfa:	898a      	ldrh	r2, [r1, #12]
 8002dfc:	0005      	movs	r5, r0
 8002dfe:	000c      	movs	r4, r1
 8002e00:	0713      	lsls	r3, r2, #28
 8002e02:	d460      	bmi.n	8002ec6 <__sflush_r+0xce>
 8002e04:	684b      	ldr	r3, [r1, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	dc04      	bgt.n	8002e14 <__sflush_r+0x1c>
 8002e0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	dc01      	bgt.n	8002e14 <__sflush_r+0x1c>
 8002e10:	2000      	movs	r0, #0
 8002e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e16:	2f00      	cmp	r7, #0
 8002e18:	d0fa      	beq.n	8002e10 <__sflush_r+0x18>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	682e      	ldr	r6, [r5, #0]
 8002e1e:	602b      	str	r3, [r5, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	6a21      	ldr	r1, [r4, #32]
 8002e26:	401a      	ands	r2, r3
 8002e28:	d034      	beq.n	8002e94 <__sflush_r+0x9c>
 8002e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	075b      	lsls	r3, r3, #29
 8002e30:	d506      	bpl.n	8002e40 <__sflush_r+0x48>
 8002e32:	6863      	ldr	r3, [r4, #4]
 8002e34:	1ac0      	subs	r0, r0, r3
 8002e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <__sflush_r+0x48>
 8002e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e3e:	1ac0      	subs	r0, r0, r3
 8002e40:	0002      	movs	r2, r0
 8002e42:	6a21      	ldr	r1, [r4, #32]
 8002e44:	2300      	movs	r3, #0
 8002e46:	0028      	movs	r0, r5
 8002e48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e4a:	47b8      	blx	r7
 8002e4c:	89a1      	ldrh	r1, [r4, #12]
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	d106      	bne.n	8002e60 <__sflush_r+0x68>
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	2b1d      	cmp	r3, #29
 8002e56:	d830      	bhi.n	8002eba <__sflush_r+0xc2>
 8002e58:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <__sflush_r+0x110>)
 8002e5a:	40da      	lsrs	r2, r3
 8002e5c:	07d3      	lsls	r3, r2, #31
 8002e5e:	d52c      	bpl.n	8002eba <__sflush_r+0xc2>
 8002e60:	2300      	movs	r3, #0
 8002e62:	6063      	str	r3, [r4, #4]
 8002e64:	6923      	ldr	r3, [r4, #16]
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	04cb      	lsls	r3, r1, #19
 8002e6a:	d505      	bpl.n	8002e78 <__sflush_r+0x80>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	d102      	bne.n	8002e76 <__sflush_r+0x7e>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d100      	bne.n	8002e78 <__sflush_r+0x80>
 8002e76:	6560      	str	r0, [r4, #84]	; 0x54
 8002e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e7a:	602e      	str	r6, [r5, #0]
 8002e7c:	2900      	cmp	r1, #0
 8002e7e:	d0c7      	beq.n	8002e10 <__sflush_r+0x18>
 8002e80:	0023      	movs	r3, r4
 8002e82:	3344      	adds	r3, #68	; 0x44
 8002e84:	4299      	cmp	r1, r3
 8002e86:	d002      	beq.n	8002e8e <__sflush_r+0x96>
 8002e88:	0028      	movs	r0, r5
 8002e8a:	f000 f8f9 	bl	8003080 <_free_r>
 8002e8e:	2000      	movs	r0, #0
 8002e90:	6360      	str	r0, [r4, #52]	; 0x34
 8002e92:	e7be      	b.n	8002e12 <__sflush_r+0x1a>
 8002e94:	2301      	movs	r3, #1
 8002e96:	0028      	movs	r0, r5
 8002e98:	47b8      	blx	r7
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	d1c6      	bne.n	8002e2c <__sflush_r+0x34>
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0c3      	beq.n	8002e2c <__sflush_r+0x34>
 8002ea4:	2b1d      	cmp	r3, #29
 8002ea6:	d001      	beq.n	8002eac <__sflush_r+0xb4>
 8002ea8:	2b16      	cmp	r3, #22
 8002eaa:	d101      	bne.n	8002eb0 <__sflush_r+0xb8>
 8002eac:	602e      	str	r6, [r5, #0]
 8002eae:	e7af      	b.n	8002e10 <__sflush_r+0x18>
 8002eb0:	2340      	movs	r3, #64	; 0x40
 8002eb2:	89a2      	ldrh	r2, [r4, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	e7ab      	b.n	8002e12 <__sflush_r+0x1a>
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	4240      	negs	r0, r0
 8002ec4:	e7a5      	b.n	8002e12 <__sflush_r+0x1a>
 8002ec6:	690f      	ldr	r7, [r1, #16]
 8002ec8:	2f00      	cmp	r7, #0
 8002eca:	d0a1      	beq.n	8002e10 <__sflush_r+0x18>
 8002ecc:	680b      	ldr	r3, [r1, #0]
 8002ece:	600f      	str	r7, [r1, #0]
 8002ed0:	1bdb      	subs	r3, r3, r7
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	0792      	lsls	r2, r2, #30
 8002ed8:	d100      	bne.n	8002edc <__sflush_r+0xe4>
 8002eda:	694b      	ldr	r3, [r1, #20]
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	9b01      	ldr	r3, [sp, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	dc00      	bgt.n	8002ee6 <__sflush_r+0xee>
 8002ee4:	e794      	b.n	8002e10 <__sflush_r+0x18>
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	003a      	movs	r2, r7
 8002eea:	6a21      	ldr	r1, [r4, #32]
 8002eec:	0028      	movs	r0, r5
 8002eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ef0:	47b0      	blx	r6
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	dc03      	bgt.n	8002efe <__sflush_r+0x106>
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	89a2      	ldrh	r2, [r4, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	e7df      	b.n	8002ebe <__sflush_r+0xc6>
 8002efe:	9b01      	ldr	r3, [sp, #4]
 8002f00:	183f      	adds	r7, r7, r0
 8002f02:	1a1b      	subs	r3, r3, r0
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	e7ea      	b.n	8002ede <__sflush_r+0xe6>
 8002f08:	20400001 	.word	0x20400001

08002f0c <_fflush_r>:
 8002f0c:	690b      	ldr	r3, [r1, #16]
 8002f0e:	b570      	push	{r4, r5, r6, lr}
 8002f10:	0005      	movs	r5, r0
 8002f12:	000c      	movs	r4, r1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <_fflush_r+0x10>
 8002f18:	2000      	movs	r0, #0
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d004      	beq.n	8002f2a <_fflush_r+0x1e>
 8002f20:	6983      	ldr	r3, [r0, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <_fflush_r+0x1e>
 8002f26:	f7ff fa71 	bl	800240c <__sinit>
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <_fflush_r+0x4c>)
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	d109      	bne.n	8002f44 <_fflush_r+0x38>
 8002f30:	686c      	ldr	r4, [r5, #4]
 8002f32:	220c      	movs	r2, #12
 8002f34:	5ea3      	ldrsh	r3, [r4, r2]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ee      	beq.n	8002f18 <_fflush_r+0xc>
 8002f3a:	0021      	movs	r1, r4
 8002f3c:	0028      	movs	r0, r5
 8002f3e:	f7ff ff5b 	bl	8002df8 <__sflush_r>
 8002f42:	e7ea      	b.n	8002f1a <_fflush_r+0xe>
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <_fflush_r+0x50>)
 8002f46:	429c      	cmp	r4, r3
 8002f48:	d101      	bne.n	8002f4e <_fflush_r+0x42>
 8002f4a:	68ac      	ldr	r4, [r5, #8]
 8002f4c:	e7f1      	b.n	8002f32 <_fflush_r+0x26>
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <_fflush_r+0x54>)
 8002f50:	429c      	cmp	r4, r3
 8002f52:	d1ee      	bne.n	8002f32 <_fflush_r+0x26>
 8002f54:	68ec      	ldr	r4, [r5, #12]
 8002f56:	e7ec      	b.n	8002f32 <_fflush_r+0x26>
 8002f58:	080031e8 	.word	0x080031e8
 8002f5c:	08003208 	.word	0x08003208
 8002f60:	080031c8 	.word	0x080031c8

08002f64 <_lseek_r>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	0005      	movs	r5, r0
 8002f68:	0008      	movs	r0, r1
 8002f6a:	0011      	movs	r1, r2
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4c06      	ldr	r4, [pc, #24]	; (8002f88 <_lseek_r+0x24>)
 8002f70:	6022      	str	r2, [r4, #0]
 8002f72:	001a      	movs	r2, r3
 8002f74:	f7fd fc36 	bl	80007e4 <_lseek>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d103      	bne.n	8002f84 <_lseek_r+0x20>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d000      	beq.n	8002f84 <_lseek_r+0x20>
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20000128 	.word	0x20000128

08002f8c <__swhatbuf_r>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	000e      	movs	r6, r1
 8002f90:	001d      	movs	r5, r3
 8002f92:	230e      	movs	r3, #14
 8002f94:	5ec9      	ldrsh	r1, [r1, r3]
 8002f96:	b096      	sub	sp, #88	; 0x58
 8002f98:	0014      	movs	r4, r2
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	da07      	bge.n	8002fae <__swhatbuf_r+0x22>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	89b3      	ldrh	r3, [r6, #12]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	d411      	bmi.n	8002fcc <__swhatbuf_r+0x40>
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	e00f      	b.n	8002fce <__swhatbuf_r+0x42>
 8002fae:	466a      	mov	r2, sp
 8002fb0:	f000 f8c4 	bl	800313c <_fstat_r>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	dbf2      	blt.n	8002f9e <__swhatbuf_r+0x12>
 8002fb8:	22f0      	movs	r2, #240	; 0xf0
 8002fba:	9b01      	ldr	r3, [sp, #4]
 8002fbc:	0212      	lsls	r2, r2, #8
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <__swhatbuf_r+0x4c>)
 8002fc2:	189b      	adds	r3, r3, r2
 8002fc4:	425a      	negs	r2, r3
 8002fc6:	4153      	adcs	r3, r2
 8002fc8:	602b      	str	r3, [r5, #0]
 8002fca:	e7ed      	b.n	8002fa8 <__swhatbuf_r+0x1c>
 8002fcc:	2340      	movs	r3, #64	; 0x40
 8002fce:	2000      	movs	r0, #0
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	b016      	add	sp, #88	; 0x58
 8002fd4:	bd70      	pop	{r4, r5, r6, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	ffffe000 	.word	0xffffe000

08002fdc <__smakebuf_r>:
 8002fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fde:	2602      	movs	r6, #2
 8002fe0:	898b      	ldrh	r3, [r1, #12]
 8002fe2:	0005      	movs	r5, r0
 8002fe4:	000c      	movs	r4, r1
 8002fe6:	4233      	tst	r3, r6
 8002fe8:	d006      	beq.n	8002ff8 <__smakebuf_r+0x1c>
 8002fea:	0023      	movs	r3, r4
 8002fec:	3347      	adds	r3, #71	; 0x47
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	6163      	str	r3, [r4, #20]
 8002ff6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002ff8:	ab01      	add	r3, sp, #4
 8002ffa:	466a      	mov	r2, sp
 8002ffc:	f7ff ffc6 	bl	8002f8c <__swhatbuf_r>
 8003000:	9900      	ldr	r1, [sp, #0]
 8003002:	0007      	movs	r7, r0
 8003004:	0028      	movs	r0, r5
 8003006:	f7ff fa95 	bl	8002534 <_malloc_r>
 800300a:	2800      	cmp	r0, #0
 800300c:	d108      	bne.n	8003020 <__smakebuf_r+0x44>
 800300e:	220c      	movs	r2, #12
 8003010:	5ea3      	ldrsh	r3, [r4, r2]
 8003012:	059a      	lsls	r2, r3, #22
 8003014:	d4ef      	bmi.n	8002ff6 <__smakebuf_r+0x1a>
 8003016:	2203      	movs	r2, #3
 8003018:	4393      	bics	r3, r2
 800301a:	431e      	orrs	r6, r3
 800301c:	81a6      	strh	r6, [r4, #12]
 800301e:	e7e4      	b.n	8002fea <__smakebuf_r+0xe>
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <__smakebuf_r+0x84>)
 8003022:	62ab      	str	r3, [r5, #40]	; 0x28
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	89a2      	ldrh	r2, [r4, #12]
 8003028:	6020      	str	r0, [r4, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	81a3      	strh	r3, [r4, #12]
 800302e:	9b00      	ldr	r3, [sp, #0]
 8003030:	6120      	str	r0, [r4, #16]
 8003032:	6163      	str	r3, [r4, #20]
 8003034:	9b01      	ldr	r3, [sp, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <__smakebuf_r+0x7a>
 800303a:	230e      	movs	r3, #14
 800303c:	5ee1      	ldrsh	r1, [r4, r3]
 800303e:	0028      	movs	r0, r5
 8003040:	f000 f88e 	bl	8003160 <_isatty_r>
 8003044:	2800      	cmp	r0, #0
 8003046:	d006      	beq.n	8003056 <__smakebuf_r+0x7a>
 8003048:	2203      	movs	r2, #3
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	4393      	bics	r3, r2
 800304e:	001a      	movs	r2, r3
 8003050:	2301      	movs	r3, #1
 8003052:	4313      	orrs	r3, r2
 8003054:	81a3      	strh	r3, [r4, #12]
 8003056:	89a0      	ldrh	r0, [r4, #12]
 8003058:	4338      	orrs	r0, r7
 800305a:	81a0      	strh	r0, [r4, #12]
 800305c:	e7cb      	b.n	8002ff6 <__smakebuf_r+0x1a>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	080023d1 	.word	0x080023d1

08003064 <memchr>:
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	1882      	adds	r2, r0, r2
 8003068:	4290      	cmp	r0, r2
 800306a:	d101      	bne.n	8003070 <memchr+0xc>
 800306c:	2000      	movs	r0, #0
 800306e:	4770      	bx	lr
 8003070:	7803      	ldrb	r3, [r0, #0]
 8003072:	428b      	cmp	r3, r1
 8003074:	d0fb      	beq.n	800306e <memchr+0xa>
 8003076:	3001      	adds	r0, #1
 8003078:	e7f6      	b.n	8003068 <memchr+0x4>

0800307a <__malloc_lock>:
 800307a:	4770      	bx	lr

0800307c <__malloc_unlock>:
 800307c:	4770      	bx	lr
	...

08003080 <_free_r>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	0005      	movs	r5, r0
 8003084:	2900      	cmp	r1, #0
 8003086:	d010      	beq.n	80030aa <_free_r+0x2a>
 8003088:	1f0c      	subs	r4, r1, #4
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	da00      	bge.n	8003092 <_free_r+0x12>
 8003090:	18e4      	adds	r4, r4, r3
 8003092:	0028      	movs	r0, r5
 8003094:	f7ff fff1 	bl	800307a <__malloc_lock>
 8003098:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <_free_r+0x90>)
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <_free_r+0x2c>
 80030a0:	6063      	str	r3, [r4, #4]
 80030a2:	6014      	str	r4, [r2, #0]
 80030a4:	0028      	movs	r0, r5
 80030a6:	f7ff ffe9 	bl	800307c <__malloc_unlock>
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	d909      	bls.n	80030c4 <_free_r+0x44>
 80030b0:	6821      	ldr	r1, [r4, #0]
 80030b2:	1860      	adds	r0, r4, r1
 80030b4:	4283      	cmp	r3, r0
 80030b6:	d1f3      	bne.n	80030a0 <_free_r+0x20>
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	1841      	adds	r1, r0, r1
 80030be:	6021      	str	r1, [r4, #0]
 80030c0:	e7ee      	b.n	80030a0 <_free_r+0x20>
 80030c2:	0013      	movs	r3, r2
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	2a00      	cmp	r2, #0
 80030c8:	d001      	beq.n	80030ce <_free_r+0x4e>
 80030ca:	42a2      	cmp	r2, r4
 80030cc:	d9f9      	bls.n	80030c2 <_free_r+0x42>
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	1858      	adds	r0, r3, r1
 80030d2:	42a0      	cmp	r0, r4
 80030d4:	d10b      	bne.n	80030ee <_free_r+0x6e>
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	1809      	adds	r1, r1, r0
 80030da:	1858      	adds	r0, r3, r1
 80030dc:	6019      	str	r1, [r3, #0]
 80030de:	4282      	cmp	r2, r0
 80030e0:	d1e0      	bne.n	80030a4 <_free_r+0x24>
 80030e2:	6810      	ldr	r0, [r2, #0]
 80030e4:	6852      	ldr	r2, [r2, #4]
 80030e6:	1841      	adds	r1, r0, r1
 80030e8:	6019      	str	r1, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e7da      	b.n	80030a4 <_free_r+0x24>
 80030ee:	42a0      	cmp	r0, r4
 80030f0:	d902      	bls.n	80030f8 <_free_r+0x78>
 80030f2:	230c      	movs	r3, #12
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	e7d5      	b.n	80030a4 <_free_r+0x24>
 80030f8:	6821      	ldr	r1, [r4, #0]
 80030fa:	1860      	adds	r0, r4, r1
 80030fc:	4282      	cmp	r2, r0
 80030fe:	d103      	bne.n	8003108 <_free_r+0x88>
 8003100:	6810      	ldr	r0, [r2, #0]
 8003102:	6852      	ldr	r2, [r2, #4]
 8003104:	1841      	adds	r1, r0, r1
 8003106:	6021      	str	r1, [r4, #0]
 8003108:	6062      	str	r2, [r4, #4]
 800310a:	605c      	str	r4, [r3, #4]
 800310c:	e7ca      	b.n	80030a4 <_free_r+0x24>
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	20000088 	.word	0x20000088

08003114 <_read_r>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	0005      	movs	r5, r0
 8003118:	0008      	movs	r0, r1
 800311a:	0011      	movs	r1, r2
 800311c:	2200      	movs	r2, #0
 800311e:	4c06      	ldr	r4, [pc, #24]	; (8003138 <_read_r+0x24>)
 8003120:	6022      	str	r2, [r4, #0]
 8003122:	001a      	movs	r2, r3
 8003124:	f7fd fb04 	bl	8000730 <_read>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d103      	bne.n	8003134 <_read_r+0x20>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d000      	beq.n	8003134 <_read_r+0x20>
 8003132:	602b      	str	r3, [r5, #0]
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	20000128 	.word	0x20000128

0800313c <_fstat_r>:
 800313c:	2300      	movs	r3, #0
 800313e:	b570      	push	{r4, r5, r6, lr}
 8003140:	4c06      	ldr	r4, [pc, #24]	; (800315c <_fstat_r+0x20>)
 8003142:	0005      	movs	r5, r0
 8003144:	0008      	movs	r0, r1
 8003146:	0011      	movs	r1, r2
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	f7fd fb34 	bl	80007b6 <_fstat>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	d103      	bne.n	800315a <_fstat_r+0x1e>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d000      	beq.n	800315a <_fstat_r+0x1e>
 8003158:	602b      	str	r3, [r5, #0]
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	20000128 	.word	0x20000128

08003160 <_isatty_r>:
 8003160:	2300      	movs	r3, #0
 8003162:	b570      	push	{r4, r5, r6, lr}
 8003164:	4c06      	ldr	r4, [pc, #24]	; (8003180 <_isatty_r+0x20>)
 8003166:	0005      	movs	r5, r0
 8003168:	0008      	movs	r0, r1
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	f7fd fb31 	bl	80007d2 <_isatty>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d103      	bne.n	800317c <_isatty_r+0x1c>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d000      	beq.n	800317c <_isatty_r+0x1c>
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	20000128 	.word	0x20000128

08003184 <_init>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr

08003190 <_fini>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr
