
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800c0a8  0800c0a8  0001c0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4a0  0800c4a0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4a0  0800c4a0  0001c4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4a8  0800c4a8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4a8  0800c4a8  0001c4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4ac  0800c4ac  0001c4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001ec  0800c69c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800c69c  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149ef  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b4  00000000  00000000  00034c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  000372b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016299  00000000  00000000  00039aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbd3  00000000  00000000  0004fd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088e1b  00000000  00000000  0005d90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005920  00000000  00000000  000e67a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c090 	.word	0x0800c090

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800c090 	.word	0x0800c090

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f001 fa97 	bl	8001774 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f001 f9ef 	bl	8001634 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 fa89 	bl	8001774 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fa7f 	bl	8001774 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 fa11 	bl	80016ac <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 fa07 	bl	80016ac <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_cfrcmple>:
 80002ac:	4684      	mov	ip, r0
 80002ae:	1c08      	adds	r0, r1, #0
 80002b0:	4661      	mov	r1, ip
 80002b2:	e7ff      	b.n	80002b4 <__aeabi_cfcmpeq>

080002b4 <__aeabi_cfcmpeq>:
 80002b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002b6:	f000 f98b 	bl	80005d0 <__lesf2>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d401      	bmi.n	80002c2 <__aeabi_cfcmpeq+0xe>
 80002be:	2100      	movs	r1, #0
 80002c0:	42c8      	cmn	r0, r1
 80002c2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c4 <__aeabi_fcmpeq>:
 80002c4:	b510      	push	{r4, lr}
 80002c6:	f000 f90d 	bl	80004e4 <__eqsf2>
 80002ca:	4240      	negs	r0, r0
 80002cc:	3001      	adds	r0, #1
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <__aeabi_fcmplt>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	f000 f97d 	bl	80005d0 <__lesf2>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	db01      	blt.n	80002de <__aeabi_fcmplt+0xe>
 80002da:	2000      	movs	r0, #0
 80002dc:	bd10      	pop	{r4, pc}
 80002de:	2001      	movs	r0, #1
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_fcmple>:
 80002e4:	b510      	push	{r4, lr}
 80002e6:	f000 f973 	bl	80005d0 <__lesf2>
 80002ea:	2800      	cmp	r0, #0
 80002ec:	dd01      	ble.n	80002f2 <__aeabi_fcmple+0xe>
 80002ee:	2000      	movs	r0, #0
 80002f0:	bd10      	pop	{r4, pc}
 80002f2:	2001      	movs	r0, #1
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_fcmpgt>:
 80002f8:	b510      	push	{r4, lr}
 80002fa:	f000 f91b 	bl	8000534 <__gesf2>
 80002fe:	2800      	cmp	r0, #0
 8000300:	dc01      	bgt.n	8000306 <__aeabi_fcmpgt+0xe>
 8000302:	2000      	movs	r0, #0
 8000304:	bd10      	pop	{r4, pc}
 8000306:	2001      	movs	r0, #1
 8000308:	bd10      	pop	{r4, pc}
 800030a:	46c0      	nop			; (mov r8, r8)

0800030c <__aeabi_fcmpge>:
 800030c:	b510      	push	{r4, lr}
 800030e:	f000 f911 	bl	8000534 <__gesf2>
 8000312:	2800      	cmp	r0, #0
 8000314:	da01      	bge.n	800031a <__aeabi_fcmpge+0xe>
 8000316:	2000      	movs	r0, #0
 8000318:	bd10      	pop	{r4, pc}
 800031a:	2001      	movs	r0, #1
 800031c:	bd10      	pop	{r4, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_uldivmod>:
 8000320:	2b00      	cmp	r3, #0
 8000322:	d111      	bne.n	8000348 <__aeabi_uldivmod+0x28>
 8000324:	2a00      	cmp	r2, #0
 8000326:	d10f      	bne.n	8000348 <__aeabi_uldivmod+0x28>
 8000328:	2900      	cmp	r1, #0
 800032a:	d100      	bne.n	800032e <__aeabi_uldivmod+0xe>
 800032c:	2800      	cmp	r0, #0
 800032e:	d002      	beq.n	8000336 <__aeabi_uldivmod+0x16>
 8000330:	2100      	movs	r1, #0
 8000332:	43c9      	mvns	r1, r1
 8000334:	1c08      	adds	r0, r1, #0
 8000336:	b407      	push	{r0, r1, r2}
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <__aeabi_uldivmod+0x24>)
 800033a:	a102      	add	r1, pc, #8	; (adr r1, 8000344 <__aeabi_uldivmod+0x24>)
 800033c:	1840      	adds	r0, r0, r1
 800033e:	9002      	str	r0, [sp, #8]
 8000340:	bd03      	pop	{r0, r1, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	fffffee9 	.word	0xfffffee9
 8000348:	b403      	push	{r0, r1}
 800034a:	4668      	mov	r0, sp
 800034c:	b501      	push	{r0, lr}
 800034e:	9802      	ldr	r0, [sp, #8]
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	9b01      	ldr	r3, [sp, #4]
 8000356:	469e      	mov	lr, r3
 8000358:	b002      	add	sp, #8
 800035a:	bc0c      	pop	{r2, r3}
 800035c:	4770      	bx	lr
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__udivmoddi4>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	464f      	mov	r7, r9
 8000364:	4646      	mov	r6, r8
 8000366:	46d6      	mov	lr, sl
 8000368:	b5c0      	push	{r6, r7, lr}
 800036a:	0004      	movs	r4, r0
 800036c:	b082      	sub	sp, #8
 800036e:	000d      	movs	r5, r1
 8000370:	4691      	mov	r9, r2
 8000372:	4698      	mov	r8, r3
 8000374:	428b      	cmp	r3, r1
 8000376:	d82f      	bhi.n	80003d8 <__udivmoddi4+0x78>
 8000378:	d02c      	beq.n	80003d4 <__udivmoddi4+0x74>
 800037a:	4641      	mov	r1, r8
 800037c:	4648      	mov	r0, r9
 800037e:	f002 f9cd 	bl	800271c <__clzdi2>
 8000382:	0029      	movs	r1, r5
 8000384:	0006      	movs	r6, r0
 8000386:	0020      	movs	r0, r4
 8000388:	f002 f9c8 	bl	800271c <__clzdi2>
 800038c:	1a33      	subs	r3, r6, r0
 800038e:	469c      	mov	ip, r3
 8000390:	3b20      	subs	r3, #32
 8000392:	469a      	mov	sl, r3
 8000394:	d500      	bpl.n	8000398 <__udivmoddi4+0x38>
 8000396:	e076      	b.n	8000486 <__udivmoddi4+0x126>
 8000398:	464b      	mov	r3, r9
 800039a:	4652      	mov	r2, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001f      	movs	r7, r3
 80003a0:	464b      	mov	r3, r9
 80003a2:	4662      	mov	r2, ip
 80003a4:	4093      	lsls	r3, r2
 80003a6:	001e      	movs	r6, r3
 80003a8:	42af      	cmp	r7, r5
 80003aa:	d828      	bhi.n	80003fe <__udivmoddi4+0x9e>
 80003ac:	d025      	beq.n	80003fa <__udivmoddi4+0x9a>
 80003ae:	4653      	mov	r3, sl
 80003b0:	1ba4      	subs	r4, r4, r6
 80003b2:	41bd      	sbcs	r5, r7
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	da00      	bge.n	80003ba <__udivmoddi4+0x5a>
 80003b8:	e07b      	b.n	80004b2 <__udivmoddi4+0x152>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	4652      	mov	r2, sl
 80003c6:	4093      	lsls	r3, r2
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	2301      	movs	r3, #1
 80003cc:	4662      	mov	r2, ip
 80003ce:	4093      	lsls	r3, r2
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	e018      	b.n	8000406 <__udivmoddi4+0xa6>
 80003d4:	4282      	cmp	r2, r0
 80003d6:	d9d0      	bls.n	800037a <__udivmoddi4+0x1a>
 80003d8:	2200      	movs	r2, #0
 80003da:	2300      	movs	r3, #0
 80003dc:	9200      	str	r2, [sp, #0]
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <__udivmoddi4+0x8a>
 80003e6:	601c      	str	r4, [r3, #0]
 80003e8:	605d      	str	r5, [r3, #4]
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	b002      	add	sp, #8
 80003f0:	bc1c      	pop	{r2, r3, r4}
 80003f2:	4690      	mov	r8, r2
 80003f4:	4699      	mov	r9, r3
 80003f6:	46a2      	mov	sl, r4
 80003f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003fa:	42a3      	cmp	r3, r4
 80003fc:	d9d7      	bls.n	80003ae <__udivmoddi4+0x4e>
 80003fe:	2200      	movs	r2, #0
 8000400:	2300      	movs	r3, #0
 8000402:	9200      	str	r2, [sp, #0]
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	4663      	mov	r3, ip
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0e9      	beq.n	80003e0 <__udivmoddi4+0x80>
 800040c:	07fb      	lsls	r3, r7, #31
 800040e:	4698      	mov	r8, r3
 8000410:	4641      	mov	r1, r8
 8000412:	0872      	lsrs	r2, r6, #1
 8000414:	430a      	orrs	r2, r1
 8000416:	087b      	lsrs	r3, r7, #1
 8000418:	4666      	mov	r6, ip
 800041a:	e00e      	b.n	800043a <__udivmoddi4+0xda>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d101      	bne.n	8000424 <__udivmoddi4+0xc4>
 8000420:	42a2      	cmp	r2, r4
 8000422:	d80c      	bhi.n	800043e <__udivmoddi4+0xde>
 8000424:	1aa4      	subs	r4, r4, r2
 8000426:	419d      	sbcs	r5, r3
 8000428:	2001      	movs	r0, #1
 800042a:	1924      	adds	r4, r4, r4
 800042c:	416d      	adcs	r5, r5
 800042e:	2100      	movs	r1, #0
 8000430:	3e01      	subs	r6, #1
 8000432:	1824      	adds	r4, r4, r0
 8000434:	414d      	adcs	r5, r1
 8000436:	2e00      	cmp	r6, #0
 8000438:	d006      	beq.n	8000448 <__udivmoddi4+0xe8>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d9ee      	bls.n	800041c <__udivmoddi4+0xbc>
 800043e:	3e01      	subs	r6, #1
 8000440:	1924      	adds	r4, r4, r4
 8000442:	416d      	adcs	r5, r5
 8000444:	2e00      	cmp	r6, #0
 8000446:	d1f8      	bne.n	800043a <__udivmoddi4+0xda>
 8000448:	9800      	ldr	r0, [sp, #0]
 800044a:	9901      	ldr	r1, [sp, #4]
 800044c:	4653      	mov	r3, sl
 800044e:	1900      	adds	r0, r0, r4
 8000450:	4169      	adcs	r1, r5
 8000452:	2b00      	cmp	r3, #0
 8000454:	db23      	blt.n	800049e <__udivmoddi4+0x13e>
 8000456:	002b      	movs	r3, r5
 8000458:	4652      	mov	r2, sl
 800045a:	40d3      	lsrs	r3, r2
 800045c:	002a      	movs	r2, r5
 800045e:	4664      	mov	r4, ip
 8000460:	40e2      	lsrs	r2, r4
 8000462:	001c      	movs	r4, r3
 8000464:	4653      	mov	r3, sl
 8000466:	0015      	movs	r5, r2
 8000468:	2b00      	cmp	r3, #0
 800046a:	db2d      	blt.n	80004c8 <__udivmoddi4+0x168>
 800046c:	0026      	movs	r6, r4
 800046e:	4657      	mov	r7, sl
 8000470:	40be      	lsls	r6, r7
 8000472:	0033      	movs	r3, r6
 8000474:	0026      	movs	r6, r4
 8000476:	4667      	mov	r7, ip
 8000478:	40be      	lsls	r6, r7
 800047a:	0032      	movs	r2, r6
 800047c:	1a80      	subs	r0, r0, r2
 800047e:	4199      	sbcs	r1, r3
 8000480:	9000      	str	r0, [sp, #0]
 8000482:	9101      	str	r1, [sp, #4]
 8000484:	e7ac      	b.n	80003e0 <__udivmoddi4+0x80>
 8000486:	4662      	mov	r2, ip
 8000488:	2320      	movs	r3, #32
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	464a      	mov	r2, r9
 800048e:	40da      	lsrs	r2, r3
 8000490:	4661      	mov	r1, ip
 8000492:	0013      	movs	r3, r2
 8000494:	4642      	mov	r2, r8
 8000496:	408a      	lsls	r2, r1
 8000498:	0017      	movs	r7, r2
 800049a:	431f      	orrs	r7, r3
 800049c:	e780      	b.n	80003a0 <__udivmoddi4+0x40>
 800049e:	4662      	mov	r2, ip
 80004a0:	2320      	movs	r3, #32
 80004a2:	1a9b      	subs	r3, r3, r2
 80004a4:	002a      	movs	r2, r5
 80004a6:	4666      	mov	r6, ip
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0023      	movs	r3, r4
 80004ac:	40f3      	lsrs	r3, r6
 80004ae:	4313      	orrs	r3, r2
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0xfc>
 80004b2:	4662      	mov	r2, ip
 80004b4:	2320      	movs	r3, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	2200      	movs	r2, #0
 80004bc:	9100      	str	r1, [sp, #0]
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	e780      	b.n	80003ca <__udivmoddi4+0x6a>
 80004c8:	2320      	movs	r3, #32
 80004ca:	4662      	mov	r2, ip
 80004cc:	0026      	movs	r6, r4
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	40de      	lsrs	r6, r3
 80004d2:	002f      	movs	r7, r5
 80004d4:	46b0      	mov	r8, r6
 80004d6:	4666      	mov	r6, ip
 80004d8:	40b7      	lsls	r7, r6
 80004da:	4646      	mov	r6, r8
 80004dc:	003b      	movs	r3, r7
 80004de:	4333      	orrs	r3, r6
 80004e0:	e7c8      	b.n	8000474 <__udivmoddi4+0x114>
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__eqsf2>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0042      	lsls	r2, r0, #1
 80004e8:	024e      	lsls	r6, r1, #9
 80004ea:	004c      	lsls	r4, r1, #1
 80004ec:	0245      	lsls	r5, r0, #9
 80004ee:	0a6d      	lsrs	r5, r5, #9
 80004f0:	0e12      	lsrs	r2, r2, #24
 80004f2:	0fc3      	lsrs	r3, r0, #31
 80004f4:	0a76      	lsrs	r6, r6, #9
 80004f6:	0e24      	lsrs	r4, r4, #24
 80004f8:	0fc9      	lsrs	r1, r1, #31
 80004fa:	2aff      	cmp	r2, #255	; 0xff
 80004fc:	d00f      	beq.n	800051e <__eqsf2+0x3a>
 80004fe:	2cff      	cmp	r4, #255	; 0xff
 8000500:	d011      	beq.n	8000526 <__eqsf2+0x42>
 8000502:	2001      	movs	r0, #1
 8000504:	42a2      	cmp	r2, r4
 8000506:	d000      	beq.n	800050a <__eqsf2+0x26>
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	42b5      	cmp	r5, r6
 800050c:	d1fc      	bne.n	8000508 <__eqsf2+0x24>
 800050e:	428b      	cmp	r3, r1
 8000510:	d00d      	beq.n	800052e <__eqsf2+0x4a>
 8000512:	2a00      	cmp	r2, #0
 8000514:	d1f8      	bne.n	8000508 <__eqsf2+0x24>
 8000516:	0028      	movs	r0, r5
 8000518:	1e45      	subs	r5, r0, #1
 800051a:	41a8      	sbcs	r0, r5
 800051c:	e7f4      	b.n	8000508 <__eqsf2+0x24>
 800051e:	2001      	movs	r0, #1
 8000520:	2d00      	cmp	r5, #0
 8000522:	d1f1      	bne.n	8000508 <__eqsf2+0x24>
 8000524:	e7eb      	b.n	80004fe <__eqsf2+0x1a>
 8000526:	2001      	movs	r0, #1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d1ed      	bne.n	8000508 <__eqsf2+0x24>
 800052c:	e7e9      	b.n	8000502 <__eqsf2+0x1e>
 800052e:	2000      	movs	r0, #0
 8000530:	e7ea      	b.n	8000508 <__eqsf2+0x24>
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__gesf2>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	004a      	lsls	r2, r1, #1
 8000538:	024e      	lsls	r6, r1, #9
 800053a:	0245      	lsls	r5, r0, #9
 800053c:	0044      	lsls	r4, r0, #1
 800053e:	0a6d      	lsrs	r5, r5, #9
 8000540:	0e24      	lsrs	r4, r4, #24
 8000542:	0fc3      	lsrs	r3, r0, #31
 8000544:	0a76      	lsrs	r6, r6, #9
 8000546:	0e12      	lsrs	r2, r2, #24
 8000548:	0fc9      	lsrs	r1, r1, #31
 800054a:	2cff      	cmp	r4, #255	; 0xff
 800054c:	d015      	beq.n	800057a <__gesf2+0x46>
 800054e:	2aff      	cmp	r2, #255	; 0xff
 8000550:	d00e      	beq.n	8000570 <__gesf2+0x3c>
 8000552:	2c00      	cmp	r4, #0
 8000554:	d115      	bne.n	8000582 <__gesf2+0x4e>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d101      	bne.n	800055e <__gesf2+0x2a>
 800055a:	2e00      	cmp	r6, #0
 800055c:	d01c      	beq.n	8000598 <__gesf2+0x64>
 800055e:	2d00      	cmp	r5, #0
 8000560:	d014      	beq.n	800058c <__gesf2+0x58>
 8000562:	428b      	cmp	r3, r1
 8000564:	d027      	beq.n	80005b6 <__gesf2+0x82>
 8000566:	2002      	movs	r0, #2
 8000568:	3b01      	subs	r3, #1
 800056a:	4018      	ands	r0, r3
 800056c:	3801      	subs	r0, #1
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	2e00      	cmp	r6, #0
 8000572:	d0ee      	beq.n	8000552 <__gesf2+0x1e>
 8000574:	2002      	movs	r0, #2
 8000576:	4240      	negs	r0, r0
 8000578:	e7f9      	b.n	800056e <__gesf2+0x3a>
 800057a:	2d00      	cmp	r5, #0
 800057c:	d1fa      	bne.n	8000574 <__gesf2+0x40>
 800057e:	2aff      	cmp	r2, #255	; 0xff
 8000580:	d00e      	beq.n	80005a0 <__gesf2+0x6c>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d10e      	bne.n	80005a4 <__gesf2+0x70>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d0ed      	beq.n	8000566 <__gesf2+0x32>
 800058a:	e00b      	b.n	80005a4 <__gesf2+0x70>
 800058c:	2301      	movs	r3, #1
 800058e:	3901      	subs	r1, #1
 8000590:	4399      	bics	r1, r3
 8000592:	0008      	movs	r0, r1
 8000594:	3001      	adds	r0, #1
 8000596:	e7ea      	b.n	800056e <__gesf2+0x3a>
 8000598:	2000      	movs	r0, #0
 800059a:	2d00      	cmp	r5, #0
 800059c:	d0e7      	beq.n	800056e <__gesf2+0x3a>
 800059e:	e7e2      	b.n	8000566 <__gesf2+0x32>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d1e7      	bne.n	8000574 <__gesf2+0x40>
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d1de      	bne.n	8000566 <__gesf2+0x32>
 80005a8:	4294      	cmp	r4, r2
 80005aa:	dd05      	ble.n	80005b8 <__gesf2+0x84>
 80005ac:	2102      	movs	r1, #2
 80005ae:	1e58      	subs	r0, r3, #1
 80005b0:	4008      	ands	r0, r1
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7db      	b.n	800056e <__gesf2+0x3a>
 80005b6:	2400      	movs	r4, #0
 80005b8:	42a2      	cmp	r2, r4
 80005ba:	dc04      	bgt.n	80005c6 <__gesf2+0x92>
 80005bc:	42b5      	cmp	r5, r6
 80005be:	d8d2      	bhi.n	8000566 <__gesf2+0x32>
 80005c0:	2000      	movs	r0, #0
 80005c2:	42b5      	cmp	r5, r6
 80005c4:	d2d3      	bcs.n	800056e <__gesf2+0x3a>
 80005c6:	1e58      	subs	r0, r3, #1
 80005c8:	2301      	movs	r3, #1
 80005ca:	4398      	bics	r0, r3
 80005cc:	3001      	adds	r0, #1
 80005ce:	e7ce      	b.n	800056e <__gesf2+0x3a>

080005d0 <__lesf2>:
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	0042      	lsls	r2, r0, #1
 80005d4:	0244      	lsls	r4, r0, #9
 80005d6:	024d      	lsls	r5, r1, #9
 80005d8:	0fc3      	lsrs	r3, r0, #31
 80005da:	0048      	lsls	r0, r1, #1
 80005dc:	0a64      	lsrs	r4, r4, #9
 80005de:	0e12      	lsrs	r2, r2, #24
 80005e0:	0a6d      	lsrs	r5, r5, #9
 80005e2:	0e00      	lsrs	r0, r0, #24
 80005e4:	0fc9      	lsrs	r1, r1, #31
 80005e6:	2aff      	cmp	r2, #255	; 0xff
 80005e8:	d012      	beq.n	8000610 <__lesf2+0x40>
 80005ea:	28ff      	cmp	r0, #255	; 0xff
 80005ec:	d00c      	beq.n	8000608 <__lesf2+0x38>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d112      	bne.n	8000618 <__lesf2+0x48>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d119      	bne.n	800062a <__lesf2+0x5a>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d117      	bne.n	800062a <__lesf2+0x5a>
 80005fa:	2c00      	cmp	r4, #0
 80005fc:	d02b      	beq.n	8000656 <__lesf2+0x86>
 80005fe:	2002      	movs	r0, #2
 8000600:	3b01      	subs	r3, #1
 8000602:	4018      	ands	r0, r3
 8000604:	3801      	subs	r0, #1
 8000606:	e026      	b.n	8000656 <__lesf2+0x86>
 8000608:	2d00      	cmp	r5, #0
 800060a:	d0f0      	beq.n	80005ee <__lesf2+0x1e>
 800060c:	2002      	movs	r0, #2
 800060e:	e022      	b.n	8000656 <__lesf2+0x86>
 8000610:	2c00      	cmp	r4, #0
 8000612:	d1fb      	bne.n	800060c <__lesf2+0x3c>
 8000614:	28ff      	cmp	r0, #255	; 0xff
 8000616:	d01f      	beq.n	8000658 <__lesf2+0x88>
 8000618:	2800      	cmp	r0, #0
 800061a:	d11f      	bne.n	800065c <__lesf2+0x8c>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d11d      	bne.n	800065c <__lesf2+0x8c>
 8000620:	2002      	movs	r0, #2
 8000622:	3b01      	subs	r3, #1
 8000624:	4018      	ands	r0, r3
 8000626:	3801      	subs	r0, #1
 8000628:	e015      	b.n	8000656 <__lesf2+0x86>
 800062a:	2c00      	cmp	r4, #0
 800062c:	d00e      	beq.n	800064c <__lesf2+0x7c>
 800062e:	428b      	cmp	r3, r1
 8000630:	d1e5      	bne.n	80005fe <__lesf2+0x2e>
 8000632:	2200      	movs	r2, #0
 8000634:	4290      	cmp	r0, r2
 8000636:	dc04      	bgt.n	8000642 <__lesf2+0x72>
 8000638:	42ac      	cmp	r4, r5
 800063a:	d8e0      	bhi.n	80005fe <__lesf2+0x2e>
 800063c:	2000      	movs	r0, #0
 800063e:	42ac      	cmp	r4, r5
 8000640:	d209      	bcs.n	8000656 <__lesf2+0x86>
 8000642:	1e58      	subs	r0, r3, #1
 8000644:	2301      	movs	r3, #1
 8000646:	4398      	bics	r0, r3
 8000648:	3001      	adds	r0, #1
 800064a:	e004      	b.n	8000656 <__lesf2+0x86>
 800064c:	2301      	movs	r3, #1
 800064e:	3901      	subs	r1, #1
 8000650:	4399      	bics	r1, r3
 8000652:	0008      	movs	r0, r1
 8000654:	3001      	adds	r0, #1
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	2d00      	cmp	r5, #0
 800065a:	d1d7      	bne.n	800060c <__lesf2+0x3c>
 800065c:	428b      	cmp	r3, r1
 800065e:	d1ce      	bne.n	80005fe <__lesf2+0x2e>
 8000660:	4282      	cmp	r2, r0
 8000662:	dde7      	ble.n	8000634 <__lesf2+0x64>
 8000664:	2102      	movs	r1, #2
 8000666:	1e58      	subs	r0, r3, #1
 8000668:	4008      	ands	r0, r1
 800066a:	3801      	subs	r0, #1
 800066c:	e7f3      	b.n	8000656 <__lesf2+0x86>
 800066e:	46c0      	nop			; (mov r8, r8)

08000670 <__aeabi_fsub>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	4647      	mov	r7, r8
 8000674:	46ce      	mov	lr, r9
 8000676:	0044      	lsls	r4, r0, #1
 8000678:	0fc2      	lsrs	r2, r0, #31
 800067a:	b580      	push	{r7, lr}
 800067c:	0247      	lsls	r7, r0, #9
 800067e:	0248      	lsls	r0, r1, #9
 8000680:	0a40      	lsrs	r0, r0, #9
 8000682:	4684      	mov	ip, r0
 8000684:	4666      	mov	r6, ip
 8000686:	0048      	lsls	r0, r1, #1
 8000688:	0a7f      	lsrs	r7, r7, #9
 800068a:	0e24      	lsrs	r4, r4, #24
 800068c:	00f6      	lsls	r6, r6, #3
 800068e:	0025      	movs	r5, r4
 8000690:	4690      	mov	r8, r2
 8000692:	00fb      	lsls	r3, r7, #3
 8000694:	0e00      	lsrs	r0, r0, #24
 8000696:	0fc9      	lsrs	r1, r1, #31
 8000698:	46b1      	mov	r9, r6
 800069a:	28ff      	cmp	r0, #255	; 0xff
 800069c:	d100      	bne.n	80006a0 <__aeabi_fsub+0x30>
 800069e:	e085      	b.n	80007ac <__aeabi_fsub+0x13c>
 80006a0:	2601      	movs	r6, #1
 80006a2:	4071      	eors	r1, r6
 80006a4:	1a26      	subs	r6, r4, r0
 80006a6:	4291      	cmp	r1, r2
 80006a8:	d057      	beq.n	800075a <__aeabi_fsub+0xea>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	dd43      	ble.n	8000736 <__aeabi_fsub+0xc6>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fsub+0x44>
 80006b2:	e07f      	b.n	80007b4 <__aeabi_fsub+0x144>
 80006b4:	4649      	mov	r1, r9
 80006b6:	2900      	cmp	r1, #0
 80006b8:	d100      	bne.n	80006bc <__aeabi_fsub+0x4c>
 80006ba:	e0aa      	b.n	8000812 <__aeabi_fsub+0x1a2>
 80006bc:	3e01      	subs	r6, #1
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fsub+0x54>
 80006c2:	e0f7      	b.n	80008b4 <__aeabi_fsub+0x244>
 80006c4:	1a5b      	subs	r3, r3, r1
 80006c6:	015a      	lsls	r2, r3, #5
 80006c8:	d400      	bmi.n	80006cc <__aeabi_fsub+0x5c>
 80006ca:	e08b      	b.n	80007e4 <__aeabi_fsub+0x174>
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	099c      	lsrs	r4, r3, #6
 80006d0:	0020      	movs	r0, r4
 80006d2:	f002 f805 	bl	80026e0 <__clzsi2>
 80006d6:	3805      	subs	r0, #5
 80006d8:	4084      	lsls	r4, r0
 80006da:	4285      	cmp	r5, r0
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_fsub+0x70>
 80006de:	e0d3      	b.n	8000888 <__aeabi_fsub+0x218>
 80006e0:	1b45      	subs	r5, r0, r5
 80006e2:	0023      	movs	r3, r4
 80006e4:	2020      	movs	r0, #32
 80006e6:	3501      	adds	r5, #1
 80006e8:	40eb      	lsrs	r3, r5
 80006ea:	1b45      	subs	r5, r0, r5
 80006ec:	40ac      	lsls	r4, r5
 80006ee:	1e62      	subs	r2, r4, #1
 80006f0:	4194      	sbcs	r4, r2
 80006f2:	4323      	orrs	r3, r4
 80006f4:	2407      	movs	r4, #7
 80006f6:	2500      	movs	r5, #0
 80006f8:	401c      	ands	r4, r3
 80006fa:	2201      	movs	r2, #1
 80006fc:	4641      	mov	r1, r8
 80006fe:	400a      	ands	r2, r1
 8000700:	2c00      	cmp	r4, #0
 8000702:	d004      	beq.n	800070e <__aeabi_fsub+0x9e>
 8000704:	210f      	movs	r1, #15
 8000706:	4019      	ands	r1, r3
 8000708:	2904      	cmp	r1, #4
 800070a:	d000      	beq.n	800070e <__aeabi_fsub+0x9e>
 800070c:	3304      	adds	r3, #4
 800070e:	0159      	lsls	r1, r3, #5
 8000710:	d400      	bmi.n	8000714 <__aeabi_fsub+0xa4>
 8000712:	e080      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000714:	3501      	adds	r5, #1
 8000716:	b2ec      	uxtb	r4, r5
 8000718:	2dff      	cmp	r5, #255	; 0xff
 800071a:	d000      	beq.n	800071e <__aeabi_fsub+0xae>
 800071c:	e0a3      	b.n	8000866 <__aeabi_fsub+0x1f6>
 800071e:	24ff      	movs	r4, #255	; 0xff
 8000720:	2300      	movs	r3, #0
 8000722:	025b      	lsls	r3, r3, #9
 8000724:	05e4      	lsls	r4, r4, #23
 8000726:	0a58      	lsrs	r0, r3, #9
 8000728:	07d2      	lsls	r2, r2, #31
 800072a:	4320      	orrs	r0, r4
 800072c:	4310      	orrs	r0, r2
 800072e:	bc0c      	pop	{r2, r3}
 8000730:	4690      	mov	r8, r2
 8000732:	4699      	mov	r9, r3
 8000734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000736:	2e00      	cmp	r6, #0
 8000738:	d174      	bne.n	8000824 <__aeabi_fsub+0x1b4>
 800073a:	1c60      	adds	r0, r4, #1
 800073c:	b2c0      	uxtb	r0, r0
 800073e:	2801      	cmp	r0, #1
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fsub+0xd4>
 8000742:	e0a7      	b.n	8000894 <__aeabi_fsub+0x224>
 8000744:	464a      	mov	r2, r9
 8000746:	1a9c      	subs	r4, r3, r2
 8000748:	0162      	lsls	r2, r4, #5
 800074a:	d500      	bpl.n	800074e <__aeabi_fsub+0xde>
 800074c:	e0b6      	b.n	80008bc <__aeabi_fsub+0x24c>
 800074e:	2c00      	cmp	r4, #0
 8000750:	d1be      	bne.n	80006d0 <__aeabi_fsub+0x60>
 8000752:	2200      	movs	r2, #0
 8000754:	2400      	movs	r4, #0
 8000756:	2300      	movs	r3, #0
 8000758:	e7e3      	b.n	8000722 <__aeabi_fsub+0xb2>
 800075a:	2e00      	cmp	r6, #0
 800075c:	dc00      	bgt.n	8000760 <__aeabi_fsub+0xf0>
 800075e:	e085      	b.n	800086c <__aeabi_fsub+0x1fc>
 8000760:	2800      	cmp	r0, #0
 8000762:	d046      	beq.n	80007f2 <__aeabi_fsub+0x182>
 8000764:	2cff      	cmp	r4, #255	; 0xff
 8000766:	d049      	beq.n	80007fc <__aeabi_fsub+0x18c>
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	4648      	mov	r0, r9
 800076c:	04d2      	lsls	r2, r2, #19
 800076e:	4310      	orrs	r0, r2
 8000770:	4681      	mov	r9, r0
 8000772:	2201      	movs	r2, #1
 8000774:	2e1b      	cmp	r6, #27
 8000776:	dc09      	bgt.n	800078c <__aeabi_fsub+0x11c>
 8000778:	2020      	movs	r0, #32
 800077a:	464c      	mov	r4, r9
 800077c:	1b80      	subs	r0, r0, r6
 800077e:	4084      	lsls	r4, r0
 8000780:	464a      	mov	r2, r9
 8000782:	0020      	movs	r0, r4
 8000784:	40f2      	lsrs	r2, r6
 8000786:	1e44      	subs	r4, r0, #1
 8000788:	41a0      	sbcs	r0, r4
 800078a:	4302      	orrs	r2, r0
 800078c:	189b      	adds	r3, r3, r2
 800078e:	015a      	lsls	r2, r3, #5
 8000790:	d528      	bpl.n	80007e4 <__aeabi_fsub+0x174>
 8000792:	3501      	adds	r5, #1
 8000794:	2dff      	cmp	r5, #255	; 0xff
 8000796:	d100      	bne.n	800079a <__aeabi_fsub+0x12a>
 8000798:	e0a8      	b.n	80008ec <__aeabi_fsub+0x27c>
 800079a:	2201      	movs	r2, #1
 800079c:	2407      	movs	r4, #7
 800079e:	4994      	ldr	r1, [pc, #592]	; (80009f0 <__aeabi_fsub+0x380>)
 80007a0:	401a      	ands	r2, r3
 80007a2:	085b      	lsrs	r3, r3, #1
 80007a4:	400b      	ands	r3, r1
 80007a6:	4313      	orrs	r3, r2
 80007a8:	401c      	ands	r4, r3
 80007aa:	e7a6      	b.n	80006fa <__aeabi_fsub+0x8a>
 80007ac:	2e00      	cmp	r6, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fsub+0x142>
 80007b0:	e778      	b.n	80006a4 <__aeabi_fsub+0x34>
 80007b2:	e775      	b.n	80006a0 <__aeabi_fsub+0x30>
 80007b4:	2cff      	cmp	r4, #255	; 0xff
 80007b6:	d054      	beq.n	8000862 <__aeabi_fsub+0x1f2>
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	4649      	mov	r1, r9
 80007bc:	04d2      	lsls	r2, r2, #19
 80007be:	4311      	orrs	r1, r2
 80007c0:	4689      	mov	r9, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	2e1b      	cmp	r6, #27
 80007c6:	dc09      	bgt.n	80007dc <__aeabi_fsub+0x16c>
 80007c8:	2120      	movs	r1, #32
 80007ca:	4648      	mov	r0, r9
 80007cc:	1b89      	subs	r1, r1, r6
 80007ce:	4088      	lsls	r0, r1
 80007d0:	464a      	mov	r2, r9
 80007d2:	0001      	movs	r1, r0
 80007d4:	40f2      	lsrs	r2, r6
 80007d6:	1e48      	subs	r0, r1, #1
 80007d8:	4181      	sbcs	r1, r0
 80007da:	430a      	orrs	r2, r1
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	015a      	lsls	r2, r3, #5
 80007e0:	d500      	bpl.n	80007e4 <__aeabi_fsub+0x174>
 80007e2:	e773      	b.n	80006cc <__aeabi_fsub+0x5c>
 80007e4:	2201      	movs	r2, #1
 80007e6:	4641      	mov	r1, r8
 80007e8:	400a      	ands	r2, r1
 80007ea:	0759      	lsls	r1, r3, #29
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fsub+0x180>
 80007ee:	e789      	b.n	8000704 <__aeabi_fsub+0x94>
 80007f0:	e011      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80007f2:	4648      	mov	r0, r9
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d158      	bne.n	80008aa <__aeabi_fsub+0x23a>
 80007f8:	2cff      	cmp	r4, #255	; 0xff
 80007fa:	d10c      	bne.n	8000816 <__aeabi_fsub+0x1a6>
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fsub+0x194>
 8000802:	e78c      	b.n	800071e <__aeabi_fsub+0xae>
 8000804:	2080      	movs	r0, #128	; 0x80
 8000806:	03c0      	lsls	r0, r0, #15
 8000808:	4303      	orrs	r3, r0
 800080a:	025b      	lsls	r3, r3, #9
 800080c:	0a5b      	lsrs	r3, r3, #9
 800080e:	24ff      	movs	r4, #255	; 0xff
 8000810:	e787      	b.n	8000722 <__aeabi_fsub+0xb2>
 8000812:	2cff      	cmp	r4, #255	; 0xff
 8000814:	d025      	beq.n	8000862 <__aeabi_fsub+0x1f2>
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d0f0      	beq.n	80007fe <__aeabi_fsub+0x18e>
 800081c:	025b      	lsls	r3, r3, #9
 800081e:	0a5b      	lsrs	r3, r3, #9
 8000820:	b2ec      	uxtb	r4, r5
 8000822:	e77e      	b.n	8000722 <__aeabi_fsub+0xb2>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d04d      	beq.n	80008c4 <__aeabi_fsub+0x254>
 8000828:	28ff      	cmp	r0, #255	; 0xff
 800082a:	d018      	beq.n	800085e <__aeabi_fsub+0x1ee>
 800082c:	2480      	movs	r4, #128	; 0x80
 800082e:	04e4      	lsls	r4, r4, #19
 8000830:	4272      	negs	r2, r6
 8000832:	4323      	orrs	r3, r4
 8000834:	2a1b      	cmp	r2, #27
 8000836:	dd00      	ble.n	800083a <__aeabi_fsub+0x1ca>
 8000838:	e0c4      	b.n	80009c4 <__aeabi_fsub+0x354>
 800083a:	001c      	movs	r4, r3
 800083c:	2520      	movs	r5, #32
 800083e:	40d4      	lsrs	r4, r2
 8000840:	1aaa      	subs	r2, r5, r2
 8000842:	4093      	lsls	r3, r2
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	4193      	sbcs	r3, r2
 8000848:	4323      	orrs	r3, r4
 800084a:	464a      	mov	r2, r9
 800084c:	0005      	movs	r5, r0
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	4688      	mov	r8, r1
 8000852:	e738      	b.n	80006c6 <__aeabi_fsub+0x56>
 8000854:	1c72      	adds	r2, r6, #1
 8000856:	d0f8      	beq.n	800084a <__aeabi_fsub+0x1da>
 8000858:	43f2      	mvns	r2, r6
 800085a:	28ff      	cmp	r0, #255	; 0xff
 800085c:	d1ea      	bne.n	8000834 <__aeabi_fsub+0x1c4>
 800085e:	000a      	movs	r2, r1
 8000860:	464b      	mov	r3, r9
 8000862:	25ff      	movs	r5, #255	; 0xff
 8000864:	e7d7      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000866:	019b      	lsls	r3, r3, #6
 8000868:	0a5b      	lsrs	r3, r3, #9
 800086a:	e75a      	b.n	8000722 <__aeabi_fsub+0xb2>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d141      	bne.n	80008f4 <__aeabi_fsub+0x284>
 8000870:	1c65      	adds	r5, r4, #1
 8000872:	b2e9      	uxtb	r1, r5
 8000874:	2901      	cmp	r1, #1
 8000876:	dd45      	ble.n	8000904 <__aeabi_fsub+0x294>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x20e>
 800087c:	e74f      	b.n	800071e <__aeabi_fsub+0xae>
 800087e:	2407      	movs	r4, #7
 8000880:	444b      	add	r3, r9
 8000882:	085b      	lsrs	r3, r3, #1
 8000884:	401c      	ands	r4, r3
 8000886:	e738      	b.n	80006fa <__aeabi_fsub+0x8a>
 8000888:	2207      	movs	r2, #7
 800088a:	4b5a      	ldr	r3, [pc, #360]	; (80009f4 <__aeabi_fsub+0x384>)
 800088c:	1a2d      	subs	r5, r5, r0
 800088e:	4023      	ands	r3, r4
 8000890:	4014      	ands	r4, r2
 8000892:	e732      	b.n	80006fa <__aeabi_fsub+0x8a>
 8000894:	2c00      	cmp	r4, #0
 8000896:	d11d      	bne.n	80008d4 <__aeabi_fsub+0x264>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d17a      	bne.n	8000992 <__aeabi_fsub+0x322>
 800089c:	464b      	mov	r3, r9
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x234>
 80008a2:	e091      	b.n	80009c8 <__aeabi_fsub+0x358>
 80008a4:	000a      	movs	r2, r1
 80008a6:	2500      	movs	r5, #0
 80008a8:	e7b5      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008aa:	3e01      	subs	r6, #1
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d119      	bne.n	80008e4 <__aeabi_fsub+0x274>
 80008b0:	444b      	add	r3, r9
 80008b2:	e76c      	b.n	800078e <__aeabi_fsub+0x11e>
 80008b4:	2cff      	cmp	r4, #255	; 0xff
 80008b6:	d184      	bne.n	80007c2 <__aeabi_fsub+0x152>
 80008b8:	25ff      	movs	r5, #255	; 0xff
 80008ba:	e7ac      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008bc:	464a      	mov	r2, r9
 80008be:	4688      	mov	r8, r1
 80008c0:	1ad4      	subs	r4, r2, r3
 80008c2:	e705      	b.n	80006d0 <__aeabi_fsub+0x60>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1c5      	bne.n	8000854 <__aeabi_fsub+0x1e4>
 80008c8:	000a      	movs	r2, r1
 80008ca:	28ff      	cmp	r0, #255	; 0xff
 80008cc:	d0c8      	beq.n	8000860 <__aeabi_fsub+0x1f0>
 80008ce:	0005      	movs	r5, r0
 80008d0:	464b      	mov	r3, r9
 80008d2:	e7a0      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d149      	bne.n	800096c <__aeabi_fsub+0x2fc>
 80008d8:	464b      	mov	r3, r9
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d077      	beq.n	80009ce <__aeabi_fsub+0x35e>
 80008de:	000a      	movs	r2, r1
 80008e0:	25ff      	movs	r5, #255	; 0xff
 80008e2:	e798      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008e4:	2cff      	cmp	r4, #255	; 0xff
 80008e6:	d000      	beq.n	80008ea <__aeabi_fsub+0x27a>
 80008e8:	e743      	b.n	8000772 <__aeabi_fsub+0x102>
 80008ea:	e787      	b.n	80007fc <__aeabi_fsub+0x18c>
 80008ec:	000a      	movs	r2, r1
 80008ee:	24ff      	movs	r4, #255	; 0xff
 80008f0:	2300      	movs	r3, #0
 80008f2:	e716      	b.n	8000722 <__aeabi_fsub+0xb2>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d115      	bne.n	8000924 <__aeabi_fsub+0x2b4>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d157      	bne.n	80009ac <__aeabi_fsub+0x33c>
 80008fc:	28ff      	cmp	r0, #255	; 0xff
 80008fe:	d1e6      	bne.n	80008ce <__aeabi_fsub+0x25e>
 8000900:	464b      	mov	r3, r9
 8000902:	e77b      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000904:	2c00      	cmp	r4, #0
 8000906:	d120      	bne.n	800094a <__aeabi_fsub+0x2da>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d057      	beq.n	80009bc <__aeabi_fsub+0x34c>
 800090c:	4649      	mov	r1, r9
 800090e:	2900      	cmp	r1, #0
 8000910:	d053      	beq.n	80009ba <__aeabi_fsub+0x34a>
 8000912:	444b      	add	r3, r9
 8000914:	015a      	lsls	r2, r3, #5
 8000916:	d568      	bpl.n	80009ea <__aeabi_fsub+0x37a>
 8000918:	2407      	movs	r4, #7
 800091a:	4a36      	ldr	r2, [pc, #216]	; (80009f4 <__aeabi_fsub+0x384>)
 800091c:	401c      	ands	r4, r3
 800091e:	2501      	movs	r5, #1
 8000920:	4013      	ands	r3, r2
 8000922:	e6ea      	b.n	80006fa <__aeabi_fsub+0x8a>
 8000924:	28ff      	cmp	r0, #255	; 0xff
 8000926:	d0eb      	beq.n	8000900 <__aeabi_fsub+0x290>
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	04d2      	lsls	r2, r2, #19
 800092c:	4276      	negs	r6, r6
 800092e:	4313      	orrs	r3, r2
 8000930:	2e1b      	cmp	r6, #27
 8000932:	dc53      	bgt.n	80009dc <__aeabi_fsub+0x36c>
 8000934:	2520      	movs	r5, #32
 8000936:	1bad      	subs	r5, r5, r6
 8000938:	001a      	movs	r2, r3
 800093a:	40ab      	lsls	r3, r5
 800093c:	40f2      	lsrs	r2, r6
 800093e:	1e5c      	subs	r4, r3, #1
 8000940:	41a3      	sbcs	r3, r4
 8000942:	4313      	orrs	r3, r2
 8000944:	444b      	add	r3, r9
 8000946:	0005      	movs	r5, r0
 8000948:	e721      	b.n	800078e <__aeabi_fsub+0x11e>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0d8      	beq.n	8000900 <__aeabi_fsub+0x290>
 800094e:	4649      	mov	r1, r9
 8000950:	2900      	cmp	r1, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_fsub+0x2e6>
 8000954:	e752      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	03c9      	lsls	r1, r1, #15
 800095a:	420f      	tst	r7, r1
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x2f0>
 800095e:	e74d      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000960:	4660      	mov	r0, ip
 8000962:	4208      	tst	r0, r1
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x2f8>
 8000966:	e749      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000968:	464b      	mov	r3, r9
 800096a:	e747      	b.n	80007fc <__aeabi_fsub+0x18c>
 800096c:	4648      	mov	r0, r9
 800096e:	25ff      	movs	r5, #255	; 0xff
 8000970:	2800      	cmp	r0, #0
 8000972:	d100      	bne.n	8000976 <__aeabi_fsub+0x306>
 8000974:	e74f      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	03d2      	lsls	r2, r2, #15
 800097a:	4217      	tst	r7, r2
 800097c:	d004      	beq.n	8000988 <__aeabi_fsub+0x318>
 800097e:	4660      	mov	r0, ip
 8000980:	4210      	tst	r0, r2
 8000982:	d101      	bne.n	8000988 <__aeabi_fsub+0x318>
 8000984:	464b      	mov	r3, r9
 8000986:	4688      	mov	r8, r1
 8000988:	2201      	movs	r2, #1
 800098a:	4641      	mov	r1, r8
 800098c:	25ff      	movs	r5, #255	; 0xff
 800098e:	400a      	ands	r2, r1
 8000990:	e741      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000992:	4648      	mov	r0, r9
 8000994:	2800      	cmp	r0, #0
 8000996:	d01f      	beq.n	80009d8 <__aeabi_fsub+0x368>
 8000998:	1a1a      	subs	r2, r3, r0
 800099a:	0150      	lsls	r0, r2, #5
 800099c:	d520      	bpl.n	80009e0 <__aeabi_fsub+0x370>
 800099e:	464a      	mov	r2, r9
 80009a0:	2407      	movs	r4, #7
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	401c      	ands	r4, r3
 80009a6:	4688      	mov	r8, r1
 80009a8:	2500      	movs	r5, #0
 80009aa:	e6a6      	b.n	80006fa <__aeabi_fsub+0x8a>
 80009ac:	1c74      	adds	r4, r6, #1
 80009ae:	d0c9      	beq.n	8000944 <__aeabi_fsub+0x2d4>
 80009b0:	43f6      	mvns	r6, r6
 80009b2:	28ff      	cmp	r0, #255	; 0xff
 80009b4:	d1bc      	bne.n	8000930 <__aeabi_fsub+0x2c0>
 80009b6:	464b      	mov	r3, r9
 80009b8:	e720      	b.n	80007fc <__aeabi_fsub+0x18c>
 80009ba:	4699      	mov	r9, r3
 80009bc:	464b      	mov	r3, r9
 80009be:	2500      	movs	r5, #0
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	e72b      	b.n	800081c <__aeabi_fsub+0x1ac>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e740      	b.n	800084a <__aeabi_fsub+0x1da>
 80009c8:	2200      	movs	r2, #0
 80009ca:	2300      	movs	r3, #0
 80009cc:	e6a9      	b.n	8000722 <__aeabi_fsub+0xb2>
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	2200      	movs	r2, #0
 80009d2:	03db      	lsls	r3, r3, #15
 80009d4:	24ff      	movs	r4, #255	; 0xff
 80009d6:	e6a4      	b.n	8000722 <__aeabi_fsub+0xb2>
 80009d8:	2500      	movs	r5, #0
 80009da:	e71c      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80009dc:	2301      	movs	r3, #1
 80009de:	e7b1      	b.n	8000944 <__aeabi_fsub+0x2d4>
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	d0f1      	beq.n	80009c8 <__aeabi_fsub+0x358>
 80009e4:	0013      	movs	r3, r2
 80009e6:	2500      	movs	r5, #0
 80009e8:	e6fc      	b.n	80007e4 <__aeabi_fsub+0x174>
 80009ea:	2500      	movs	r5, #0
 80009ec:	e6fa      	b.n	80007e4 <__aeabi_fsub+0x174>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	7dffffff 	.word	0x7dffffff
 80009f4:	fbffffff 	.word	0xfbffffff

080009f8 <__aeabi_dadd>:
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	464f      	mov	r7, r9
 80009fc:	4646      	mov	r6, r8
 80009fe:	46d6      	mov	lr, sl
 8000a00:	000c      	movs	r4, r1
 8000a02:	0309      	lsls	r1, r1, #12
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	0f47      	lsrs	r7, r0, #29
 8000a0a:	005e      	lsls	r6, r3, #1
 8000a0c:	4339      	orrs	r1, r7
 8000a0e:	031f      	lsls	r7, r3, #12
 8000a10:	0fdb      	lsrs	r3, r3, #31
 8000a12:	469c      	mov	ip, r3
 8000a14:	0065      	lsls	r5, r4, #1
 8000a16:	0a7b      	lsrs	r3, r7, #9
 8000a18:	0f57      	lsrs	r7, r2, #29
 8000a1a:	431f      	orrs	r7, r3
 8000a1c:	0d6d      	lsrs	r5, r5, #21
 8000a1e:	0fe4      	lsrs	r4, r4, #31
 8000a20:	0d76      	lsrs	r6, r6, #21
 8000a22:	46a1      	mov	r9, r4
 8000a24:	00c0      	lsls	r0, r0, #3
 8000a26:	46b8      	mov	r8, r7
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	1bab      	subs	r3, r5, r6
 8000a2c:	4564      	cmp	r4, ip
 8000a2e:	d07b      	beq.n	8000b28 <__aeabi_dadd+0x130>
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dd5f      	ble.n	8000af4 <__aeabi_dadd+0xfc>
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x42>
 8000a38:	e0a4      	b.n	8000b84 <__aeabi_dadd+0x18c>
 8000a3a:	003e      	movs	r6, r7
 8000a3c:	4316      	orrs	r6, r2
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x4a>
 8000a40:	e112      	b.n	8000c68 <__aeabi_dadd+0x270>
 8000a42:	1e5e      	subs	r6, r3, #1
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x52>
 8000a48:	e19e      	b.n	8000d88 <__aeabi_dadd+0x390>
 8000a4a:	1a87      	subs	r7, r0, r2
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	42b8      	cmp	r0, r7
 8000a50:	4180      	sbcs	r0, r0
 8000a52:	2501      	movs	r5, #1
 8000a54:	1ac9      	subs	r1, r1, r3
 8000a56:	4240      	negs	r0, r0
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	020b      	lsls	r3, r1, #8
 8000a5c:	d400      	bmi.n	8000a60 <__aeabi_dadd+0x68>
 8000a5e:	e131      	b.n	8000cc4 <__aeabi_dadd+0x2cc>
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	0a4e      	lsrs	r6, r1, #9
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x72>
 8000a68:	e16e      	b.n	8000d48 <__aeabi_dadd+0x350>
 8000a6a:	0030      	movs	r0, r6
 8000a6c:	f001 fe38 	bl	80026e0 <__clzsi2>
 8000a70:	0003      	movs	r3, r0
 8000a72:	3b08      	subs	r3, #8
 8000a74:	2b1f      	cmp	r3, #31
 8000a76:	dd00      	ble.n	8000a7a <__aeabi_dadd+0x82>
 8000a78:	e161      	b.n	8000d3e <__aeabi_dadd+0x346>
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	0039      	movs	r1, r7
 8000a7e:	1ad2      	subs	r2, r2, r3
 8000a80:	409e      	lsls	r6, r3
 8000a82:	40d1      	lsrs	r1, r2
 8000a84:	409f      	lsls	r7, r3
 8000a86:	430e      	orrs	r6, r1
 8000a88:	429d      	cmp	r5, r3
 8000a8a:	dd00      	ble.n	8000a8e <__aeabi_dadd+0x96>
 8000a8c:	e151      	b.n	8000d32 <__aeabi_dadd+0x33a>
 8000a8e:	1b5d      	subs	r5, r3, r5
 8000a90:	1c6b      	adds	r3, r5, #1
 8000a92:	2b1f      	cmp	r3, #31
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_dadd+0xa0>
 8000a96:	e17c      	b.n	8000d92 <__aeabi_dadd+0x39a>
 8000a98:	2120      	movs	r1, #32
 8000a9a:	1ac9      	subs	r1, r1, r3
 8000a9c:	003d      	movs	r5, r7
 8000a9e:	0030      	movs	r0, r6
 8000aa0:	408f      	lsls	r7, r1
 8000aa2:	4088      	lsls	r0, r1
 8000aa4:	40dd      	lsrs	r5, r3
 8000aa6:	1e79      	subs	r1, r7, #1
 8000aa8:	418f      	sbcs	r7, r1
 8000aaa:	0031      	movs	r1, r6
 8000aac:	2207      	movs	r2, #7
 8000aae:	4328      	orrs	r0, r5
 8000ab0:	40d9      	lsrs	r1, r3
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	4307      	orrs	r7, r0
 8000ab6:	403a      	ands	r2, r7
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_dadd+0xd8>
 8000abc:	230f      	movs	r3, #15
 8000abe:	403b      	ands	r3, r7
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d005      	beq.n	8000ad0 <__aeabi_dadd+0xd8>
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	42bb      	cmp	r3, r7
 8000ac8:	41bf      	sbcs	r7, r7
 8000aca:	427f      	negs	r7, r7
 8000acc:	19c9      	adds	r1, r1, r7
 8000ace:	001f      	movs	r7, r3
 8000ad0:	020b      	lsls	r3, r1, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0xde>
 8000ad4:	e226      	b.n	8000f24 <__aeabi_dadd+0x52c>
 8000ad6:	1c6a      	adds	r2, r5, #1
 8000ad8:	4bc6      	ldr	r3, [pc, #792]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000ada:	0555      	lsls	r5, r2, #21
 8000adc:	0d6d      	lsrs	r5, r5, #21
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0xec>
 8000ae2:	e106      	b.n	8000cf2 <__aeabi_dadd+0x2fa>
 8000ae4:	4ac4      	ldr	r2, [pc, #784]	; (8000df8 <__aeabi_dadd+0x400>)
 8000ae6:	08ff      	lsrs	r7, r7, #3
 8000ae8:	400a      	ands	r2, r1
 8000aea:	0753      	lsls	r3, r2, #29
 8000aec:	0252      	lsls	r2, r2, #9
 8000aee:	433b      	orrs	r3, r7
 8000af0:	0b12      	lsrs	r2, r2, #12
 8000af2:	e08e      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x102>
 8000af8:	e0b8      	b.n	8000c6c <__aeabi_dadd+0x274>
 8000afa:	1c6b      	adds	r3, r5, #1
 8000afc:	055b      	lsls	r3, r3, #21
 8000afe:	0d5b      	lsrs	r3, r3, #21
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	dc00      	bgt.n	8000b06 <__aeabi_dadd+0x10e>
 8000b04:	e130      	b.n	8000d68 <__aeabi_dadd+0x370>
 8000b06:	1a87      	subs	r7, r0, r2
 8000b08:	4643      	mov	r3, r8
 8000b0a:	42b8      	cmp	r0, r7
 8000b0c:	41b6      	sbcs	r6, r6
 8000b0e:	1acb      	subs	r3, r1, r3
 8000b10:	4276      	negs	r6, r6
 8000b12:	1b9e      	subs	r6, r3, r6
 8000b14:	0233      	lsls	r3, r6, #8
 8000b16:	d500      	bpl.n	8000b1a <__aeabi_dadd+0x122>
 8000b18:	e14c      	b.n	8000db4 <__aeabi_dadd+0x3bc>
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	4333      	orrs	r3, r6
 8000b1e:	d1a1      	bne.n	8000a64 <__aeabi_dadd+0x6c>
 8000b20:	2200      	movs	r2, #0
 8000b22:	2400      	movs	r4, #0
 8000b24:	2500      	movs	r5, #0
 8000b26:	e070      	b.n	8000c0a <__aeabi_dadd+0x212>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc00      	bgt.n	8000b2e <__aeabi_dadd+0x136>
 8000b2c:	e0e5      	b.n	8000cfa <__aeabi_dadd+0x302>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x13c>
 8000b32:	e083      	b.n	8000c3c <__aeabi_dadd+0x244>
 8000b34:	4eaf      	ldr	r6, [pc, #700]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000b36:	42b5      	cmp	r5, r6
 8000b38:	d060      	beq.n	8000bfc <__aeabi_dadd+0x204>
 8000b3a:	2680      	movs	r6, #128	; 0x80
 8000b3c:	0436      	lsls	r6, r6, #16
 8000b3e:	4337      	orrs	r7, r6
 8000b40:	46b8      	mov	r8, r7
 8000b42:	2b38      	cmp	r3, #56	; 0x38
 8000b44:	dc00      	bgt.n	8000b48 <__aeabi_dadd+0x150>
 8000b46:	e13e      	b.n	8000dc6 <__aeabi_dadd+0x3ce>
 8000b48:	4643      	mov	r3, r8
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	001f      	movs	r7, r3
 8000b4e:	1e7a      	subs	r2, r7, #1
 8000b50:	4197      	sbcs	r7, r2
 8000b52:	183f      	adds	r7, r7, r0
 8000b54:	4287      	cmp	r7, r0
 8000b56:	4180      	sbcs	r0, r0
 8000b58:	4240      	negs	r0, r0
 8000b5a:	1809      	adds	r1, r1, r0
 8000b5c:	020b      	lsls	r3, r1, #8
 8000b5e:	d400      	bmi.n	8000b62 <__aeabi_dadd+0x16a>
 8000b60:	e0b0      	b.n	8000cc4 <__aeabi_dadd+0x2cc>
 8000b62:	4ba4      	ldr	r3, [pc, #656]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000b64:	3501      	adds	r5, #1
 8000b66:	429d      	cmp	r5, r3
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x174>
 8000b6a:	e0c3      	b.n	8000cf4 <__aeabi_dadd+0x2fc>
 8000b6c:	4aa2      	ldr	r2, [pc, #648]	; (8000df8 <__aeabi_dadd+0x400>)
 8000b6e:	087b      	lsrs	r3, r7, #1
 8000b70:	400a      	ands	r2, r1
 8000b72:	2101      	movs	r1, #1
 8000b74:	400f      	ands	r7, r1
 8000b76:	431f      	orrs	r7, r3
 8000b78:	0851      	lsrs	r1, r2, #1
 8000b7a:	07d3      	lsls	r3, r2, #31
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	403a      	ands	r2, r7
 8000b82:	e799      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000b84:	4e9b      	ldr	r6, [pc, #620]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000b86:	42b5      	cmp	r5, r6
 8000b88:	d038      	beq.n	8000bfc <__aeabi_dadd+0x204>
 8000b8a:	2680      	movs	r6, #128	; 0x80
 8000b8c:	0436      	lsls	r6, r6, #16
 8000b8e:	4337      	orrs	r7, r6
 8000b90:	46b8      	mov	r8, r7
 8000b92:	2b38      	cmp	r3, #56	; 0x38
 8000b94:	dd00      	ble.n	8000b98 <__aeabi_dadd+0x1a0>
 8000b96:	e0dc      	b.n	8000d52 <__aeabi_dadd+0x35a>
 8000b98:	2b1f      	cmp	r3, #31
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_dadd+0x1a6>
 8000b9c:	e130      	b.n	8000e00 <__aeabi_dadd+0x408>
 8000b9e:	001e      	movs	r6, r3
 8000ba0:	4647      	mov	r7, r8
 8000ba2:	3e20      	subs	r6, #32
 8000ba4:	40f7      	lsrs	r7, r6
 8000ba6:	46bc      	mov	ip, r7
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	d004      	beq.n	8000bb6 <__aeabi_dadd+0x1be>
 8000bac:	2640      	movs	r6, #64	; 0x40
 8000bae:	1af3      	subs	r3, r6, r3
 8000bb0:	4646      	mov	r6, r8
 8000bb2:	409e      	lsls	r6, r3
 8000bb4:	4332      	orrs	r2, r6
 8000bb6:	0017      	movs	r7, r2
 8000bb8:	4663      	mov	r3, ip
 8000bba:	1e7a      	subs	r2, r7, #1
 8000bbc:	4197      	sbcs	r7, r2
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	e0cc      	b.n	8000d5c <__aeabi_dadd+0x364>
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x1d0>
 8000bc6:	e204      	b.n	8000fd2 <__aeabi_dadd+0x5da>
 8000bc8:	4643      	mov	r3, r8
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0x1d8>
 8000bce:	e159      	b.n	8000e84 <__aeabi_dadd+0x48c>
 8000bd0:	074b      	lsls	r3, r1, #29
 8000bd2:	08c0      	lsrs	r0, r0, #3
 8000bd4:	4318      	orrs	r0, r3
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	08c9      	lsrs	r1, r1, #3
 8000bda:	031b      	lsls	r3, r3, #12
 8000bdc:	4219      	tst	r1, r3
 8000bde:	d008      	beq.n	8000bf2 <__aeabi_dadd+0x1fa>
 8000be0:	4645      	mov	r5, r8
 8000be2:	08ed      	lsrs	r5, r5, #3
 8000be4:	421d      	tst	r5, r3
 8000be6:	d104      	bne.n	8000bf2 <__aeabi_dadd+0x1fa>
 8000be8:	4643      	mov	r3, r8
 8000bea:	08d0      	lsrs	r0, r2, #3
 8000bec:	0759      	lsls	r1, r3, #29
 8000bee:	4308      	orrs	r0, r1
 8000bf0:	0029      	movs	r1, r5
 8000bf2:	0f42      	lsrs	r2, r0, #29
 8000bf4:	00c9      	lsls	r1, r1, #3
 8000bf6:	4d7f      	ldr	r5, [pc, #508]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000bf8:	4311      	orrs	r1, r2
 8000bfa:	00c0      	lsls	r0, r0, #3
 8000bfc:	074b      	lsls	r3, r1, #29
 8000bfe:	08ca      	lsrs	r2, r1, #3
 8000c00:	497c      	ldr	r1, [pc, #496]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000c02:	08c0      	lsrs	r0, r0, #3
 8000c04:	4303      	orrs	r3, r0
 8000c06:	428d      	cmp	r5, r1
 8000c08:	d068      	beq.n	8000cdc <__aeabi_dadd+0x2e4>
 8000c0a:	0312      	lsls	r2, r2, #12
 8000c0c:	056d      	lsls	r5, r5, #21
 8000c0e:	0b12      	lsrs	r2, r2, #12
 8000c10:	0d6d      	lsrs	r5, r5, #21
 8000c12:	2100      	movs	r1, #0
 8000c14:	0312      	lsls	r2, r2, #12
 8000c16:	0018      	movs	r0, r3
 8000c18:	0b13      	lsrs	r3, r2, #12
 8000c1a:	0d0a      	lsrs	r2, r1, #20
 8000c1c:	0512      	lsls	r2, r2, #20
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	4b76      	ldr	r3, [pc, #472]	; (8000dfc <__aeabi_dadd+0x404>)
 8000c22:	052d      	lsls	r5, r5, #20
 8000c24:	4013      	ands	r3, r2
 8000c26:	432b      	orrs	r3, r5
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	07e4      	lsls	r4, r4, #31
 8000c2c:	085b      	lsrs	r3, r3, #1
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	0019      	movs	r1, r3
 8000c32:	bc1c      	pop	{r2, r3, r4}
 8000c34:	4690      	mov	r8, r2
 8000c36:	4699      	mov	r9, r3
 8000c38:	46a2      	mov	sl, r4
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3c:	003e      	movs	r6, r7
 8000c3e:	4316      	orrs	r6, r2
 8000c40:	d012      	beq.n	8000c68 <__aeabi_dadd+0x270>
 8000c42:	1e5e      	subs	r6, r3, #1
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x252>
 8000c48:	e100      	b.n	8000e4c <__aeabi_dadd+0x454>
 8000c4a:	1887      	adds	r7, r0, r2
 8000c4c:	4287      	cmp	r7, r0
 8000c4e:	4180      	sbcs	r0, r0
 8000c50:	4441      	add	r1, r8
 8000c52:	4240      	negs	r0, r0
 8000c54:	1809      	adds	r1, r1, r0
 8000c56:	2501      	movs	r5, #1
 8000c58:	020b      	lsls	r3, r1, #8
 8000c5a:	d533      	bpl.n	8000cc4 <__aeabi_dadd+0x2cc>
 8000c5c:	2502      	movs	r5, #2
 8000c5e:	e785      	b.n	8000b6c <__aeabi_dadd+0x174>
 8000c60:	4664      	mov	r4, ip
 8000c62:	0033      	movs	r3, r6
 8000c64:	4641      	mov	r1, r8
 8000c66:	0010      	movs	r0, r2
 8000c68:	001d      	movs	r5, r3
 8000c6a:	e7c7      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000c6c:	2d00      	cmp	r5, #0
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_dadd+0x27a>
 8000c70:	e0da      	b.n	8000e28 <__aeabi_dadd+0x430>
 8000c72:	000c      	movs	r4, r1
 8000c74:	4304      	orrs	r4, r0
 8000c76:	d0f3      	beq.n	8000c60 <__aeabi_dadd+0x268>
 8000c78:	1c5c      	adds	r4, r3, #1
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x286>
 8000c7c:	e19f      	b.n	8000fbe <__aeabi_dadd+0x5c6>
 8000c7e:	4c5d      	ldr	r4, [pc, #372]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000c80:	42a6      	cmp	r6, r4
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x28e>
 8000c84:	e12f      	b.n	8000ee6 <__aeabi_dadd+0x4ee>
 8000c86:	43db      	mvns	r3, r3
 8000c88:	2b38      	cmp	r3, #56	; 0x38
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_dadd+0x296>
 8000c8c:	e166      	b.n	8000f5c <__aeabi_dadd+0x564>
 8000c8e:	2b1f      	cmp	r3, #31
 8000c90:	dd00      	ble.n	8000c94 <__aeabi_dadd+0x29c>
 8000c92:	e183      	b.n	8000f9c <__aeabi_dadd+0x5a4>
 8000c94:	2420      	movs	r4, #32
 8000c96:	0005      	movs	r5, r0
 8000c98:	1ae4      	subs	r4, r4, r3
 8000c9a:	000f      	movs	r7, r1
 8000c9c:	40dd      	lsrs	r5, r3
 8000c9e:	40d9      	lsrs	r1, r3
 8000ca0:	40a0      	lsls	r0, r4
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	40a7      	lsls	r7, r4
 8000ca6:	1a5b      	subs	r3, r3, r1
 8000ca8:	1e44      	subs	r4, r0, #1
 8000caa:	41a0      	sbcs	r0, r4
 8000cac:	4698      	mov	r8, r3
 8000cae:	432f      	orrs	r7, r5
 8000cb0:	4338      	orrs	r0, r7
 8000cb2:	1a17      	subs	r7, r2, r0
 8000cb4:	42ba      	cmp	r2, r7
 8000cb6:	4192      	sbcs	r2, r2
 8000cb8:	4643      	mov	r3, r8
 8000cba:	4252      	negs	r2, r2
 8000cbc:	1a99      	subs	r1, r3, r2
 8000cbe:	4664      	mov	r4, ip
 8000cc0:	0035      	movs	r5, r6
 8000cc2:	e6ca      	b.n	8000a5a <__aeabi_dadd+0x62>
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	403a      	ands	r2, r7
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x2d6>
 8000ccc:	e6f6      	b.n	8000abc <__aeabi_dadd+0xc4>
 8000cce:	074b      	lsls	r3, r1, #29
 8000cd0:	08ca      	lsrs	r2, r1, #3
 8000cd2:	4948      	ldr	r1, [pc, #288]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000cd4:	08ff      	lsrs	r7, r7, #3
 8000cd6:	433b      	orrs	r3, r7
 8000cd8:	428d      	cmp	r5, r1
 8000cda:	d196      	bne.n	8000c0a <__aeabi_dadd+0x212>
 8000cdc:	0019      	movs	r1, r3
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x2ec>
 8000ce2:	e19e      	b.n	8001022 <__aeabi_dadd+0x62a>
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0309      	lsls	r1, r1, #12
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	0312      	lsls	r2, r2, #12
 8000cec:	0b12      	lsrs	r2, r2, #12
 8000cee:	4d41      	ldr	r5, [pc, #260]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000cf0:	e78f      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000cf2:	0015      	movs	r5, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e78b      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x308>
 8000cfe:	e0c7      	b.n	8000e90 <__aeabi_dadd+0x498>
 8000d00:	1c6b      	adds	r3, r5, #1
 8000d02:	055f      	lsls	r7, r3, #21
 8000d04:	0d7f      	lsrs	r7, r7, #21
 8000d06:	2f01      	cmp	r7, #1
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_dadd+0x314>
 8000d0a:	e0f1      	b.n	8000ef0 <__aeabi_dadd+0x4f8>
 8000d0c:	4d39      	ldr	r5, [pc, #228]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000d0e:	42ab      	cmp	r3, r5
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x31c>
 8000d12:	e0b9      	b.n	8000e88 <__aeabi_dadd+0x490>
 8000d14:	1885      	adds	r5, r0, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	4189      	sbcs	r1, r1
 8000d1c:	4442      	add	r2, r8
 8000d1e:	4249      	negs	r1, r1
 8000d20:	1851      	adds	r1, r2, r1
 8000d22:	2207      	movs	r2, #7
 8000d24:	07cf      	lsls	r7, r1, #31
 8000d26:	086d      	lsrs	r5, r5, #1
 8000d28:	432f      	orrs	r7, r5
 8000d2a:	0849      	lsrs	r1, r1, #1
 8000d2c:	403a      	ands	r2, r7
 8000d2e:	001d      	movs	r5, r3
 8000d30:	e6c2      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000d32:	2207      	movs	r2, #7
 8000d34:	4930      	ldr	r1, [pc, #192]	; (8000df8 <__aeabi_dadd+0x400>)
 8000d36:	1aed      	subs	r5, r5, r3
 8000d38:	4031      	ands	r1, r6
 8000d3a:	403a      	ands	r2, r7
 8000d3c:	e6bc      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000d3e:	003e      	movs	r6, r7
 8000d40:	3828      	subs	r0, #40	; 0x28
 8000d42:	4086      	lsls	r6, r0
 8000d44:	2700      	movs	r7, #0
 8000d46:	e69f      	b.n	8000a88 <__aeabi_dadd+0x90>
 8000d48:	0038      	movs	r0, r7
 8000d4a:	f001 fcc9 	bl	80026e0 <__clzsi2>
 8000d4e:	3020      	adds	r0, #32
 8000d50:	e68e      	b.n	8000a70 <__aeabi_dadd+0x78>
 8000d52:	4643      	mov	r3, r8
 8000d54:	4313      	orrs	r3, r2
 8000d56:	001f      	movs	r7, r3
 8000d58:	1e7a      	subs	r2, r7, #1
 8000d5a:	4197      	sbcs	r7, r2
 8000d5c:	1bc7      	subs	r7, r0, r7
 8000d5e:	42b8      	cmp	r0, r7
 8000d60:	4180      	sbcs	r0, r0
 8000d62:	4240      	negs	r0, r0
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	e678      	b.n	8000a5a <__aeabi_dadd+0x62>
 8000d68:	000e      	movs	r6, r1
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	4306      	orrs	r6, r0
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d161      	bne.n	8000e38 <__aeabi_dadd+0x440>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dadd+0x382>
 8000d78:	e0f4      	b.n	8000f64 <__aeabi_dadd+0x56c>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_dadd+0x388>
 8000d7e:	e11b      	b.n	8000fb8 <__aeabi_dadd+0x5c0>
 8000d80:	4664      	mov	r4, ip
 8000d82:	0039      	movs	r1, r7
 8000d84:	0010      	movs	r0, r2
 8000d86:	e739      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000d88:	4f1a      	ldr	r7, [pc, #104]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000d8a:	42bb      	cmp	r3, r7
 8000d8c:	d07a      	beq.n	8000e84 <__aeabi_dadd+0x48c>
 8000d8e:	0033      	movs	r3, r6
 8000d90:	e6ff      	b.n	8000b92 <__aeabi_dadd+0x19a>
 8000d92:	0030      	movs	r0, r6
 8000d94:	3d1f      	subs	r5, #31
 8000d96:	40e8      	lsrs	r0, r5
 8000d98:	2b20      	cmp	r3, #32
 8000d9a:	d003      	beq.n	8000da4 <__aeabi_dadd+0x3ac>
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	409e      	lsls	r6, r3
 8000da2:	4337      	orrs	r7, r6
 8000da4:	1e7b      	subs	r3, r7, #1
 8000da6:	419f      	sbcs	r7, r3
 8000da8:	2207      	movs	r2, #7
 8000daa:	4307      	orrs	r7, r0
 8000dac:	403a      	ands	r2, r7
 8000dae:	2100      	movs	r1, #0
 8000db0:	2500      	movs	r5, #0
 8000db2:	e789      	b.n	8000cc8 <__aeabi_dadd+0x2d0>
 8000db4:	1a17      	subs	r7, r2, r0
 8000db6:	4643      	mov	r3, r8
 8000db8:	42ba      	cmp	r2, r7
 8000dba:	41b6      	sbcs	r6, r6
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	4276      	negs	r6, r6
 8000dc0:	1b8e      	subs	r6, r1, r6
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	e64e      	b.n	8000a64 <__aeabi_dadd+0x6c>
 8000dc6:	2b1f      	cmp	r3, #31
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_dadd+0x3d4>
 8000dca:	e0ad      	b.n	8000f28 <__aeabi_dadd+0x530>
 8000dcc:	2620      	movs	r6, #32
 8000dce:	4647      	mov	r7, r8
 8000dd0:	1af6      	subs	r6, r6, r3
 8000dd2:	40b7      	lsls	r7, r6
 8000dd4:	46b9      	mov	r9, r7
 8000dd6:	0017      	movs	r7, r2
 8000dd8:	46b2      	mov	sl, r6
 8000dda:	40df      	lsrs	r7, r3
 8000ddc:	464e      	mov	r6, r9
 8000dde:	433e      	orrs	r6, r7
 8000de0:	0037      	movs	r7, r6
 8000de2:	4656      	mov	r6, sl
 8000de4:	40b2      	lsls	r2, r6
 8000de6:	1e56      	subs	r6, r2, #1
 8000de8:	41b2      	sbcs	r2, r6
 8000dea:	4317      	orrs	r7, r2
 8000dec:	4642      	mov	r2, r8
 8000dee:	40da      	lsrs	r2, r3
 8000df0:	1889      	adds	r1, r1, r2
 8000df2:	e6ae      	b.n	8000b52 <__aeabi_dadd+0x15a>
 8000df4:	000007ff 	.word	0x000007ff
 8000df8:	ff7fffff 	.word	0xff7fffff
 8000dfc:	800fffff 	.word	0x800fffff
 8000e00:	2620      	movs	r6, #32
 8000e02:	4647      	mov	r7, r8
 8000e04:	1af6      	subs	r6, r6, r3
 8000e06:	40b7      	lsls	r7, r6
 8000e08:	46b9      	mov	r9, r7
 8000e0a:	0017      	movs	r7, r2
 8000e0c:	46b2      	mov	sl, r6
 8000e0e:	40df      	lsrs	r7, r3
 8000e10:	464e      	mov	r6, r9
 8000e12:	433e      	orrs	r6, r7
 8000e14:	0037      	movs	r7, r6
 8000e16:	4656      	mov	r6, sl
 8000e18:	40b2      	lsls	r2, r6
 8000e1a:	1e56      	subs	r6, r2, #1
 8000e1c:	41b2      	sbcs	r2, r6
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	4642      	mov	r2, r8
 8000e22:	40da      	lsrs	r2, r3
 8000e24:	1a89      	subs	r1, r1, r2
 8000e26:	e799      	b.n	8000d5c <__aeabi_dadd+0x364>
 8000e28:	4c7f      	ldr	r4, [pc, #508]	; (8001028 <__aeabi_dadd+0x630>)
 8000e2a:	42a6      	cmp	r6, r4
 8000e2c:	d05b      	beq.n	8000ee6 <__aeabi_dadd+0x4ee>
 8000e2e:	2480      	movs	r4, #128	; 0x80
 8000e30:	0424      	lsls	r4, r4, #16
 8000e32:	425b      	negs	r3, r3
 8000e34:	4321      	orrs	r1, r4
 8000e36:	e727      	b.n	8000c88 <__aeabi_dadd+0x290>
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d10c      	bne.n	8000e56 <__aeabi_dadd+0x45e>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dadd+0x44a>
 8000e40:	e0cb      	b.n	8000fda <__aeabi_dadd+0x5e2>
 8000e42:	4664      	mov	r4, ip
 8000e44:	0039      	movs	r1, r7
 8000e46:	0010      	movs	r0, r2
 8000e48:	4d77      	ldr	r5, [pc, #476]	; (8001028 <__aeabi_dadd+0x630>)
 8000e4a:	e6d7      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000e4c:	4f76      	ldr	r7, [pc, #472]	; (8001028 <__aeabi_dadd+0x630>)
 8000e4e:	42bb      	cmp	r3, r7
 8000e50:	d018      	beq.n	8000e84 <__aeabi_dadd+0x48c>
 8000e52:	0033      	movs	r3, r6
 8000e54:	e675      	b.n	8000b42 <__aeabi_dadd+0x14a>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d014      	beq.n	8000e84 <__aeabi_dadd+0x48c>
 8000e5a:	074b      	lsls	r3, r1, #29
 8000e5c:	08c0      	lsrs	r0, r0, #3
 8000e5e:	4318      	orrs	r0, r3
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	08c9      	lsrs	r1, r1, #3
 8000e64:	031b      	lsls	r3, r3, #12
 8000e66:	4219      	tst	r1, r3
 8000e68:	d007      	beq.n	8000e7a <__aeabi_dadd+0x482>
 8000e6a:	08fc      	lsrs	r4, r7, #3
 8000e6c:	421c      	tst	r4, r3
 8000e6e:	d104      	bne.n	8000e7a <__aeabi_dadd+0x482>
 8000e70:	0779      	lsls	r1, r7, #29
 8000e72:	08d0      	lsrs	r0, r2, #3
 8000e74:	4308      	orrs	r0, r1
 8000e76:	46e1      	mov	r9, ip
 8000e78:	0021      	movs	r1, r4
 8000e7a:	464c      	mov	r4, r9
 8000e7c:	0f42      	lsrs	r2, r0, #29
 8000e7e:	00c9      	lsls	r1, r1, #3
 8000e80:	4311      	orrs	r1, r2
 8000e82:	00c0      	lsls	r0, r0, #3
 8000e84:	4d68      	ldr	r5, [pc, #416]	; (8001028 <__aeabi_dadd+0x630>)
 8000e86:	e6b9      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000e88:	001d      	movs	r5, r3
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e6c0      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d15b      	bne.n	8000f4c <__aeabi_dadd+0x554>
 8000e94:	000d      	movs	r5, r1
 8000e96:	4305      	orrs	r5, r0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x4a4>
 8000e9a:	e6e2      	b.n	8000c62 <__aeabi_dadd+0x26a>
 8000e9c:	1c5d      	adds	r5, r3, #1
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x4aa>
 8000ea0:	e0b0      	b.n	8001004 <__aeabi_dadd+0x60c>
 8000ea2:	4d61      	ldr	r5, [pc, #388]	; (8001028 <__aeabi_dadd+0x630>)
 8000ea4:	42ae      	cmp	r6, r5
 8000ea6:	d01f      	beq.n	8000ee8 <__aeabi_dadd+0x4f0>
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	2b38      	cmp	r3, #56	; 0x38
 8000eac:	dc71      	bgt.n	8000f92 <__aeabi_dadd+0x59a>
 8000eae:	2b1f      	cmp	r3, #31
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_dadd+0x4bc>
 8000eb2:	e096      	b.n	8000fe2 <__aeabi_dadd+0x5ea>
 8000eb4:	2520      	movs	r5, #32
 8000eb6:	000f      	movs	r7, r1
 8000eb8:	1aed      	subs	r5, r5, r3
 8000eba:	40af      	lsls	r7, r5
 8000ebc:	46b9      	mov	r9, r7
 8000ebe:	0007      	movs	r7, r0
 8000ec0:	46aa      	mov	sl, r5
 8000ec2:	40df      	lsrs	r7, r3
 8000ec4:	464d      	mov	r5, r9
 8000ec6:	433d      	orrs	r5, r7
 8000ec8:	002f      	movs	r7, r5
 8000eca:	4655      	mov	r5, sl
 8000ecc:	40a8      	lsls	r0, r5
 8000ece:	40d9      	lsrs	r1, r3
 8000ed0:	1e45      	subs	r5, r0, #1
 8000ed2:	41a8      	sbcs	r0, r5
 8000ed4:	4488      	add	r8, r1
 8000ed6:	4307      	orrs	r7, r0
 8000ed8:	18bf      	adds	r7, r7, r2
 8000eda:	4297      	cmp	r7, r2
 8000edc:	4192      	sbcs	r2, r2
 8000ede:	4251      	negs	r1, r2
 8000ee0:	4441      	add	r1, r8
 8000ee2:	0035      	movs	r5, r6
 8000ee4:	e63a      	b.n	8000b5c <__aeabi_dadd+0x164>
 8000ee6:	4664      	mov	r4, ip
 8000ee8:	0035      	movs	r5, r6
 8000eea:	4641      	mov	r1, r8
 8000eec:	0010      	movs	r0, r2
 8000eee:	e685      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000ef0:	000b      	movs	r3, r1
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d000      	beq.n	8000efa <__aeabi_dadd+0x502>
 8000ef8:	e663      	b.n	8000bc2 <__aeabi_dadd+0x1ca>
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f5      	beq.n	8000eea <__aeabi_dadd+0x4f2>
 8000efe:	4643      	mov	r3, r8
 8000f00:	4313      	orrs	r3, r2
 8000f02:	d100      	bne.n	8000f06 <__aeabi_dadd+0x50e>
 8000f04:	e67a      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000f06:	1887      	adds	r7, r0, r2
 8000f08:	4287      	cmp	r7, r0
 8000f0a:	4180      	sbcs	r0, r0
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	4441      	add	r1, r8
 8000f10:	4240      	negs	r0, r0
 8000f12:	1809      	adds	r1, r1, r0
 8000f14:	403a      	ands	r2, r7
 8000f16:	020b      	lsls	r3, r1, #8
 8000f18:	d400      	bmi.n	8000f1c <__aeabi_dadd+0x524>
 8000f1a:	e6d5      	b.n	8000cc8 <__aeabi_dadd+0x2d0>
 8000f1c:	4b43      	ldr	r3, [pc, #268]	; (800102c <__aeabi_dadd+0x634>)
 8000f1e:	3501      	adds	r5, #1
 8000f20:	4019      	ands	r1, r3
 8000f22:	e5c9      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000f24:	0038      	movs	r0, r7
 8000f26:	e669      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000f28:	001e      	movs	r6, r3
 8000f2a:	4647      	mov	r7, r8
 8000f2c:	3e20      	subs	r6, #32
 8000f2e:	40f7      	lsrs	r7, r6
 8000f30:	46bc      	mov	ip, r7
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	d004      	beq.n	8000f40 <__aeabi_dadd+0x548>
 8000f36:	2640      	movs	r6, #64	; 0x40
 8000f38:	1af3      	subs	r3, r6, r3
 8000f3a:	4646      	mov	r6, r8
 8000f3c:	409e      	lsls	r6, r3
 8000f3e:	4332      	orrs	r2, r6
 8000f40:	0017      	movs	r7, r2
 8000f42:	4663      	mov	r3, ip
 8000f44:	1e7a      	subs	r2, r7, #1
 8000f46:	4197      	sbcs	r7, r2
 8000f48:	431f      	orrs	r7, r3
 8000f4a:	e602      	b.n	8000b52 <__aeabi_dadd+0x15a>
 8000f4c:	4d36      	ldr	r5, [pc, #216]	; (8001028 <__aeabi_dadd+0x630>)
 8000f4e:	42ae      	cmp	r6, r5
 8000f50:	d0ca      	beq.n	8000ee8 <__aeabi_dadd+0x4f0>
 8000f52:	2580      	movs	r5, #128	; 0x80
 8000f54:	042d      	lsls	r5, r5, #16
 8000f56:	425b      	negs	r3, r3
 8000f58:	4329      	orrs	r1, r5
 8000f5a:	e7a6      	b.n	8000eaa <__aeabi_dadd+0x4b2>
 8000f5c:	4308      	orrs	r0, r1
 8000f5e:	1e41      	subs	r1, r0, #1
 8000f60:	4188      	sbcs	r0, r1
 8000f62:	e6a6      	b.n	8000cb2 <__aeabi_dadd+0x2ba>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0x572>
 8000f68:	e648      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000f6a:	1a87      	subs	r7, r0, r2
 8000f6c:	4643      	mov	r3, r8
 8000f6e:	42b8      	cmp	r0, r7
 8000f70:	41b6      	sbcs	r6, r6
 8000f72:	1acb      	subs	r3, r1, r3
 8000f74:	4276      	negs	r6, r6
 8000f76:	1b9e      	subs	r6, r3, r6
 8000f78:	0233      	lsls	r3, r6, #8
 8000f7a:	d54b      	bpl.n	8001014 <__aeabi_dadd+0x61c>
 8000f7c:	1a17      	subs	r7, r2, r0
 8000f7e:	4643      	mov	r3, r8
 8000f80:	42ba      	cmp	r2, r7
 8000f82:	4192      	sbcs	r2, r2
 8000f84:	1a59      	subs	r1, r3, r1
 8000f86:	4252      	negs	r2, r2
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	4664      	mov	r4, ip
 8000f8e:	403a      	ands	r2, r7
 8000f90:	e592      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000f92:	4301      	orrs	r1, r0
 8000f94:	000f      	movs	r7, r1
 8000f96:	1e79      	subs	r1, r7, #1
 8000f98:	418f      	sbcs	r7, r1
 8000f9a:	e79d      	b.n	8000ed8 <__aeabi_dadd+0x4e0>
 8000f9c:	001c      	movs	r4, r3
 8000f9e:	000f      	movs	r7, r1
 8000fa0:	3c20      	subs	r4, #32
 8000fa2:	40e7      	lsrs	r7, r4
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	d003      	beq.n	8000fb0 <__aeabi_dadd+0x5b8>
 8000fa8:	2440      	movs	r4, #64	; 0x40
 8000faa:	1ae3      	subs	r3, r4, r3
 8000fac:	4099      	lsls	r1, r3
 8000fae:	4308      	orrs	r0, r1
 8000fb0:	1e41      	subs	r1, r0, #1
 8000fb2:	4188      	sbcs	r0, r1
 8000fb4:	4338      	orrs	r0, r7
 8000fb6:	e67c      	b.n	8000cb2 <__aeabi_dadd+0x2ba>
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2400      	movs	r4, #0
 8000fbc:	e625      	b.n	8000c0a <__aeabi_dadd+0x212>
 8000fbe:	1a17      	subs	r7, r2, r0
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	42ba      	cmp	r2, r7
 8000fc4:	4192      	sbcs	r2, r2
 8000fc6:	1a59      	subs	r1, r3, r1
 8000fc8:	4252      	negs	r2, r2
 8000fca:	1a89      	subs	r1, r1, r2
 8000fcc:	4664      	mov	r4, ip
 8000fce:	0035      	movs	r5, r6
 8000fd0:	e543      	b.n	8000a5a <__aeabi_dadd+0x62>
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	0010      	movs	r0, r2
 8000fd6:	4d14      	ldr	r5, [pc, #80]	; (8001028 <__aeabi_dadd+0x630>)
 8000fd8:	e610      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	2400      	movs	r4, #0
 8000fde:	0312      	lsls	r2, r2, #12
 8000fe0:	e680      	b.n	8000ce4 <__aeabi_dadd+0x2ec>
 8000fe2:	001d      	movs	r5, r3
 8000fe4:	000f      	movs	r7, r1
 8000fe6:	3d20      	subs	r5, #32
 8000fe8:	40ef      	lsrs	r7, r5
 8000fea:	46bc      	mov	ip, r7
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d003      	beq.n	8000ff8 <__aeabi_dadd+0x600>
 8000ff0:	2540      	movs	r5, #64	; 0x40
 8000ff2:	1aeb      	subs	r3, r5, r3
 8000ff4:	4099      	lsls	r1, r3
 8000ff6:	4308      	orrs	r0, r1
 8000ff8:	0007      	movs	r7, r0
 8000ffa:	4663      	mov	r3, ip
 8000ffc:	1e78      	subs	r0, r7, #1
 8000ffe:	4187      	sbcs	r7, r0
 8001000:	431f      	orrs	r7, r3
 8001002:	e769      	b.n	8000ed8 <__aeabi_dadd+0x4e0>
 8001004:	1887      	adds	r7, r0, r2
 8001006:	4297      	cmp	r7, r2
 8001008:	419b      	sbcs	r3, r3
 800100a:	4441      	add	r1, r8
 800100c:	425b      	negs	r3, r3
 800100e:	18c9      	adds	r1, r1, r3
 8001010:	0035      	movs	r5, r6
 8001012:	e5a3      	b.n	8000b5c <__aeabi_dadd+0x164>
 8001014:	003b      	movs	r3, r7
 8001016:	4333      	orrs	r3, r6
 8001018:	d0ce      	beq.n	8000fb8 <__aeabi_dadd+0x5c0>
 800101a:	2207      	movs	r2, #7
 800101c:	0031      	movs	r1, r6
 800101e:	403a      	ands	r2, r7
 8001020:	e652      	b.n	8000cc8 <__aeabi_dadd+0x2d0>
 8001022:	2300      	movs	r3, #0
 8001024:	001a      	movs	r2, r3
 8001026:	e5f4      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8001028:	000007ff 	.word	0x000007ff
 800102c:	ff7fffff 	.word	0xff7fffff

08001030 <__aeabi_ddiv>:
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	4657      	mov	r7, sl
 8001034:	46de      	mov	lr, fp
 8001036:	464e      	mov	r6, r9
 8001038:	4645      	mov	r5, r8
 800103a:	b5e0      	push	{r5, r6, r7, lr}
 800103c:	4683      	mov	fp, r0
 800103e:	0007      	movs	r7, r0
 8001040:	030e      	lsls	r6, r1, #12
 8001042:	0048      	lsls	r0, r1, #1
 8001044:	b085      	sub	sp, #20
 8001046:	4692      	mov	sl, r2
 8001048:	001c      	movs	r4, r3
 800104a:	0b36      	lsrs	r6, r6, #12
 800104c:	0d40      	lsrs	r0, r0, #21
 800104e:	0fcd      	lsrs	r5, r1, #31
 8001050:	2800      	cmp	r0, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x26>
 8001054:	e09d      	b.n	8001192 <__aeabi_ddiv+0x162>
 8001056:	4b95      	ldr	r3, [pc, #596]	; (80012ac <__aeabi_ddiv+0x27c>)
 8001058:	4298      	cmp	r0, r3
 800105a:	d039      	beq.n	80010d0 <__aeabi_ddiv+0xa0>
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	00f6      	lsls	r6, r6, #3
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	431e      	orrs	r6, r3
 8001064:	4a92      	ldr	r2, [pc, #584]	; (80012b0 <__aeabi_ddiv+0x280>)
 8001066:	0f7b      	lsrs	r3, r7, #29
 8001068:	4333      	orrs	r3, r6
 800106a:	4699      	mov	r9, r3
 800106c:	4694      	mov	ip, r2
 800106e:	0003      	movs	r3, r0
 8001070:	4463      	add	r3, ip
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	2600      	movs	r6, #0
 8001078:	00ff      	lsls	r7, r7, #3
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	0323      	lsls	r3, r4, #12
 800107e:	0b1b      	lsrs	r3, r3, #12
 8001080:	4698      	mov	r8, r3
 8001082:	0063      	lsls	r3, r4, #1
 8001084:	0fe4      	lsrs	r4, r4, #31
 8001086:	4652      	mov	r2, sl
 8001088:	0d5b      	lsrs	r3, r3, #21
 800108a:	9401      	str	r4, [sp, #4]
 800108c:	d100      	bne.n	8001090 <__aeabi_ddiv+0x60>
 800108e:	e0b3      	b.n	80011f8 <__aeabi_ddiv+0x1c8>
 8001090:	4986      	ldr	r1, [pc, #536]	; (80012ac <__aeabi_ddiv+0x27c>)
 8001092:	428b      	cmp	r3, r1
 8001094:	d100      	bne.n	8001098 <__aeabi_ddiv+0x68>
 8001096:	e09e      	b.n	80011d6 <__aeabi_ddiv+0x1a6>
 8001098:	4642      	mov	r2, r8
 800109a:	00d1      	lsls	r1, r2, #3
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	0412      	lsls	r2, r2, #16
 80010a0:	430a      	orrs	r2, r1
 80010a2:	4651      	mov	r1, sl
 80010a4:	0f49      	lsrs	r1, r1, #29
 80010a6:	4311      	orrs	r1, r2
 80010a8:	468b      	mov	fp, r1
 80010aa:	4981      	ldr	r1, [pc, #516]	; (80012b0 <__aeabi_ddiv+0x280>)
 80010ac:	4652      	mov	r2, sl
 80010ae:	468c      	mov	ip, r1
 80010b0:	9900      	ldr	r1, [sp, #0]
 80010b2:	4463      	add	r3, ip
 80010b4:	1acb      	subs	r3, r1, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	00d2      	lsls	r2, r2, #3
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	002b      	movs	r3, r5
 80010be:	4063      	eors	r3, r4
 80010c0:	469a      	mov	sl, r3
 80010c2:	2e0f      	cmp	r6, #15
 80010c4:	d900      	bls.n	80010c8 <__aeabi_ddiv+0x98>
 80010c6:	e105      	b.n	80012d4 <__aeabi_ddiv+0x2a4>
 80010c8:	4b7a      	ldr	r3, [pc, #488]	; (80012b4 <__aeabi_ddiv+0x284>)
 80010ca:	00b6      	lsls	r6, r6, #2
 80010cc:	599b      	ldr	r3, [r3, r6]
 80010ce:	469f      	mov	pc, r3
 80010d0:	465b      	mov	r3, fp
 80010d2:	4333      	orrs	r3, r6
 80010d4:	4699      	mov	r9, r3
 80010d6:	d000      	beq.n	80010da <__aeabi_ddiv+0xaa>
 80010d8:	e0b8      	b.n	800124c <__aeabi_ddiv+0x21c>
 80010da:	2302      	movs	r3, #2
 80010dc:	2608      	movs	r6, #8
 80010de:	2700      	movs	r7, #0
 80010e0:	9000      	str	r0, [sp, #0]
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	e7ca      	b.n	800107c <__aeabi_ddiv+0x4c>
 80010e6:	46cb      	mov	fp, r9
 80010e8:	003a      	movs	r2, r7
 80010ea:	9902      	ldr	r1, [sp, #8]
 80010ec:	9501      	str	r5, [sp, #4]
 80010ee:	9b01      	ldr	r3, [sp, #4]
 80010f0:	469a      	mov	sl, r3
 80010f2:	2902      	cmp	r1, #2
 80010f4:	d027      	beq.n	8001146 <__aeabi_ddiv+0x116>
 80010f6:	2903      	cmp	r1, #3
 80010f8:	d100      	bne.n	80010fc <__aeabi_ddiv+0xcc>
 80010fa:	e280      	b.n	80015fe <__aeabi_ddiv+0x5ce>
 80010fc:	2901      	cmp	r1, #1
 80010fe:	d044      	beq.n	800118a <__aeabi_ddiv+0x15a>
 8001100:	496d      	ldr	r1, [pc, #436]	; (80012b8 <__aeabi_ddiv+0x288>)
 8001102:	9b00      	ldr	r3, [sp, #0]
 8001104:	468c      	mov	ip, r1
 8001106:	4463      	add	r3, ip
 8001108:	001c      	movs	r4, r3
 800110a:	2c00      	cmp	r4, #0
 800110c:	dd38      	ble.n	8001180 <__aeabi_ddiv+0x150>
 800110e:	0753      	lsls	r3, r2, #29
 8001110:	d000      	beq.n	8001114 <__aeabi_ddiv+0xe4>
 8001112:	e213      	b.n	800153c <__aeabi_ddiv+0x50c>
 8001114:	08d2      	lsrs	r2, r2, #3
 8001116:	465b      	mov	r3, fp
 8001118:	01db      	lsls	r3, r3, #7
 800111a:	d509      	bpl.n	8001130 <__aeabi_ddiv+0x100>
 800111c:	4659      	mov	r1, fp
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <__aeabi_ddiv+0x28c>)
 8001120:	4019      	ands	r1, r3
 8001122:	468b      	mov	fp, r1
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	00c9      	lsls	r1, r1, #3
 8001128:	468c      	mov	ip, r1
 800112a:	9b00      	ldr	r3, [sp, #0]
 800112c:	4463      	add	r3, ip
 800112e:	001c      	movs	r4, r3
 8001130:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <__aeabi_ddiv+0x290>)
 8001132:	429c      	cmp	r4, r3
 8001134:	dc07      	bgt.n	8001146 <__aeabi_ddiv+0x116>
 8001136:	465b      	mov	r3, fp
 8001138:	0564      	lsls	r4, r4, #21
 800113a:	075f      	lsls	r7, r3, #29
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	4317      	orrs	r7, r2
 8001140:	0b1b      	lsrs	r3, r3, #12
 8001142:	0d62      	lsrs	r2, r4, #21
 8001144:	e002      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001146:	2300      	movs	r3, #0
 8001148:	2700      	movs	r7, #0
 800114a:	4a58      	ldr	r2, [pc, #352]	; (80012ac <__aeabi_ddiv+0x27c>)
 800114c:	2100      	movs	r1, #0
 800114e:	031b      	lsls	r3, r3, #12
 8001150:	0b1c      	lsrs	r4, r3, #12
 8001152:	0d0b      	lsrs	r3, r1, #20
 8001154:	051b      	lsls	r3, r3, #20
 8001156:	4323      	orrs	r3, r4
 8001158:	0514      	lsls	r4, r2, #20
 800115a:	4a5a      	ldr	r2, [pc, #360]	; (80012c4 <__aeabi_ddiv+0x294>)
 800115c:	0038      	movs	r0, r7
 800115e:	4013      	ands	r3, r2
 8001160:	431c      	orrs	r4, r3
 8001162:	4653      	mov	r3, sl
 8001164:	0064      	lsls	r4, r4, #1
 8001166:	07db      	lsls	r3, r3, #31
 8001168:	0864      	lsrs	r4, r4, #1
 800116a:	431c      	orrs	r4, r3
 800116c:	0021      	movs	r1, r4
 800116e:	b005      	add	sp, #20
 8001170:	bc3c      	pop	{r2, r3, r4, r5}
 8001172:	4690      	mov	r8, r2
 8001174:	4699      	mov	r9, r3
 8001176:	46a2      	mov	sl, r4
 8001178:	46ab      	mov	fp, r5
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117c:	2201      	movs	r2, #1
 800117e:	4252      	negs	r2, r2
 8001180:	2301      	movs	r3, #1
 8001182:	1b1b      	subs	r3, r3, r4
 8001184:	2b38      	cmp	r3, #56	; 0x38
 8001186:	dc00      	bgt.n	800118a <__aeabi_ddiv+0x15a>
 8001188:	e1ad      	b.n	80014e6 <__aeabi_ddiv+0x4b6>
 800118a:	2200      	movs	r2, #0
 800118c:	2300      	movs	r3, #0
 800118e:	2700      	movs	r7, #0
 8001190:	e7dc      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001192:	465b      	mov	r3, fp
 8001194:	4333      	orrs	r3, r6
 8001196:	4699      	mov	r9, r3
 8001198:	d05e      	beq.n	8001258 <__aeabi_ddiv+0x228>
 800119a:	2e00      	cmp	r6, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x170>
 800119e:	e18a      	b.n	80014b6 <__aeabi_ddiv+0x486>
 80011a0:	0030      	movs	r0, r6
 80011a2:	f001 fa9d 	bl	80026e0 <__clzsi2>
 80011a6:	0003      	movs	r3, r0
 80011a8:	3b0b      	subs	r3, #11
 80011aa:	2b1c      	cmp	r3, #28
 80011ac:	dd00      	ble.n	80011b0 <__aeabi_ddiv+0x180>
 80011ae:	e17b      	b.n	80014a8 <__aeabi_ddiv+0x478>
 80011b0:	221d      	movs	r2, #29
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	465a      	mov	r2, fp
 80011b6:	0001      	movs	r1, r0
 80011b8:	40da      	lsrs	r2, r3
 80011ba:	3908      	subs	r1, #8
 80011bc:	408e      	lsls	r6, r1
 80011be:	0013      	movs	r3, r2
 80011c0:	465f      	mov	r7, fp
 80011c2:	4333      	orrs	r3, r6
 80011c4:	4699      	mov	r9, r3
 80011c6:	408f      	lsls	r7, r1
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <__aeabi_ddiv+0x298>)
 80011ca:	2600      	movs	r6, #0
 80011cc:	1a1b      	subs	r3, r3, r0
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	e752      	b.n	800107c <__aeabi_ddiv+0x4c>
 80011d6:	4641      	mov	r1, r8
 80011d8:	4653      	mov	r3, sl
 80011da:	430b      	orrs	r3, r1
 80011dc:	493b      	ldr	r1, [pc, #236]	; (80012cc <__aeabi_ddiv+0x29c>)
 80011de:	469b      	mov	fp, r3
 80011e0:	468c      	mov	ip, r1
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	4463      	add	r3, ip
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	465b      	mov	r3, fp
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d13b      	bne.n	8001266 <__aeabi_ddiv+0x236>
 80011ee:	2302      	movs	r3, #2
 80011f0:	2200      	movs	r2, #0
 80011f2:	431e      	orrs	r6, r3
 80011f4:	2102      	movs	r1, #2
 80011f6:	e761      	b.n	80010bc <__aeabi_ddiv+0x8c>
 80011f8:	4643      	mov	r3, r8
 80011fa:	4313      	orrs	r3, r2
 80011fc:	469b      	mov	fp, r3
 80011fe:	d037      	beq.n	8001270 <__aeabi_ddiv+0x240>
 8001200:	4643      	mov	r3, r8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_ddiv+0x1d8>
 8001206:	e162      	b.n	80014ce <__aeabi_ddiv+0x49e>
 8001208:	4640      	mov	r0, r8
 800120a:	f001 fa69 	bl	80026e0 <__clzsi2>
 800120e:	0003      	movs	r3, r0
 8001210:	3b0b      	subs	r3, #11
 8001212:	2b1c      	cmp	r3, #28
 8001214:	dd00      	ble.n	8001218 <__aeabi_ddiv+0x1e8>
 8001216:	e153      	b.n	80014c0 <__aeabi_ddiv+0x490>
 8001218:	0002      	movs	r2, r0
 800121a:	4641      	mov	r1, r8
 800121c:	3a08      	subs	r2, #8
 800121e:	4091      	lsls	r1, r2
 8001220:	4688      	mov	r8, r1
 8001222:	211d      	movs	r1, #29
 8001224:	1acb      	subs	r3, r1, r3
 8001226:	4651      	mov	r1, sl
 8001228:	40d9      	lsrs	r1, r3
 800122a:	000b      	movs	r3, r1
 800122c:	4641      	mov	r1, r8
 800122e:	430b      	orrs	r3, r1
 8001230:	469b      	mov	fp, r3
 8001232:	4653      	mov	r3, sl
 8001234:	4093      	lsls	r3, r2
 8001236:	001a      	movs	r2, r3
 8001238:	9b00      	ldr	r3, [sp, #0]
 800123a:	4925      	ldr	r1, [pc, #148]	; (80012d0 <__aeabi_ddiv+0x2a0>)
 800123c:	469c      	mov	ip, r3
 800123e:	4460      	add	r0, ip
 8001240:	0003      	movs	r3, r0
 8001242:	468c      	mov	ip, r1
 8001244:	4463      	add	r3, ip
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2100      	movs	r1, #0
 800124a:	e737      	b.n	80010bc <__aeabi_ddiv+0x8c>
 800124c:	2303      	movs	r3, #3
 800124e:	46b1      	mov	r9, r6
 8001250:	9000      	str	r0, [sp, #0]
 8001252:	260c      	movs	r6, #12
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	e711      	b.n	800107c <__aeabi_ddiv+0x4c>
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	2604      	movs	r6, #4
 8001260:	2700      	movs	r7, #0
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	e70a      	b.n	800107c <__aeabi_ddiv+0x4c>
 8001266:	2303      	movs	r3, #3
 8001268:	46c3      	mov	fp, r8
 800126a:	431e      	orrs	r6, r3
 800126c:	2103      	movs	r1, #3
 800126e:	e725      	b.n	80010bc <__aeabi_ddiv+0x8c>
 8001270:	3301      	adds	r3, #1
 8001272:	431e      	orrs	r6, r3
 8001274:	2200      	movs	r2, #0
 8001276:	2101      	movs	r1, #1
 8001278:	e720      	b.n	80010bc <__aeabi_ddiv+0x8c>
 800127a:	2300      	movs	r3, #0
 800127c:	469a      	mov	sl, r3
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	2700      	movs	r7, #0
 8001282:	031b      	lsls	r3, r3, #12
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <__aeabi_ddiv+0x27c>)
 8001286:	e761      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	4649      	mov	r1, r9
 800128c:	031b      	lsls	r3, r3, #12
 800128e:	4219      	tst	r1, r3
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x264>
 8001292:	e0e2      	b.n	800145a <__aeabi_ddiv+0x42a>
 8001294:	4659      	mov	r1, fp
 8001296:	4219      	tst	r1, r3
 8001298:	d000      	beq.n	800129c <__aeabi_ddiv+0x26c>
 800129a:	e0de      	b.n	800145a <__aeabi_ddiv+0x42a>
 800129c:	430b      	orrs	r3, r1
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	0017      	movs	r7, r2
 80012a2:	0b1b      	lsrs	r3, r3, #12
 80012a4:	46a2      	mov	sl, r4
 80012a6:	4a01      	ldr	r2, [pc, #4]	; (80012ac <__aeabi_ddiv+0x27c>)
 80012a8:	e750      	b.n	800114c <__aeabi_ddiv+0x11c>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	000007ff 	.word	0x000007ff
 80012b0:	fffffc01 	.word	0xfffffc01
 80012b4:	0800c1a8 	.word	0x0800c1a8
 80012b8:	000003ff 	.word	0x000003ff
 80012bc:	feffffff 	.word	0xfeffffff
 80012c0:	000007fe 	.word	0x000007fe
 80012c4:	800fffff 	.word	0x800fffff
 80012c8:	fffffc0d 	.word	0xfffffc0d
 80012cc:	fffff801 	.word	0xfffff801
 80012d0:	000003f3 	.word	0x000003f3
 80012d4:	45d9      	cmp	r9, fp
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x2aa>
 80012d8:	e0cb      	b.n	8001472 <__aeabi_ddiv+0x442>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x2ae>
 80012dc:	e0c6      	b.n	800146c <__aeabi_ddiv+0x43c>
 80012de:	003c      	movs	r4, r7
 80012e0:	4648      	mov	r0, r9
 80012e2:	2700      	movs	r7, #0
 80012e4:	9b00      	ldr	r3, [sp, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	465b      	mov	r3, fp
 80012ec:	0e16      	lsrs	r6, r2, #24
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	431e      	orrs	r6, r3
 80012f2:	0213      	lsls	r3, r2, #8
 80012f4:	4698      	mov	r8, r3
 80012f6:	0433      	lsls	r3, r6, #16
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	4699      	mov	r9, r3
 80012fc:	0c31      	lsrs	r1, r6, #16
 80012fe:	9101      	str	r1, [sp, #4]
 8001300:	f7fe ff90 	bl	8000224 <__aeabi_uidivmod>
 8001304:	464a      	mov	r2, r9
 8001306:	4342      	muls	r2, r0
 8001308:	040b      	lsls	r3, r1, #16
 800130a:	0c21      	lsrs	r1, r4, #16
 800130c:	0005      	movs	r5, r0
 800130e:	4319      	orrs	r1, r3
 8001310:	428a      	cmp	r2, r1
 8001312:	d907      	bls.n	8001324 <__aeabi_ddiv+0x2f4>
 8001314:	1989      	adds	r1, r1, r6
 8001316:	3d01      	subs	r5, #1
 8001318:	428e      	cmp	r6, r1
 800131a:	d803      	bhi.n	8001324 <__aeabi_ddiv+0x2f4>
 800131c:	428a      	cmp	r2, r1
 800131e:	d901      	bls.n	8001324 <__aeabi_ddiv+0x2f4>
 8001320:	1e85      	subs	r5, r0, #2
 8001322:	1989      	adds	r1, r1, r6
 8001324:	1a88      	subs	r0, r1, r2
 8001326:	9901      	ldr	r1, [sp, #4]
 8001328:	f7fe ff7c 	bl	8000224 <__aeabi_uidivmod>
 800132c:	0409      	lsls	r1, r1, #16
 800132e:	468c      	mov	ip, r1
 8001330:	464a      	mov	r2, r9
 8001332:	0421      	lsls	r1, r4, #16
 8001334:	4664      	mov	r4, ip
 8001336:	4342      	muls	r2, r0
 8001338:	0c09      	lsrs	r1, r1, #16
 800133a:	0003      	movs	r3, r0
 800133c:	4321      	orrs	r1, r4
 800133e:	428a      	cmp	r2, r1
 8001340:	d904      	bls.n	800134c <__aeabi_ddiv+0x31c>
 8001342:	1989      	adds	r1, r1, r6
 8001344:	3b01      	subs	r3, #1
 8001346:	428e      	cmp	r6, r1
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x31c>
 800134a:	e0f1      	b.n	8001530 <__aeabi_ddiv+0x500>
 800134c:	042d      	lsls	r5, r5, #16
 800134e:	431d      	orrs	r5, r3
 8001350:	46ab      	mov	fp, r5
 8001352:	4643      	mov	r3, r8
 8001354:	1a89      	subs	r1, r1, r2
 8001356:	4642      	mov	r2, r8
 8001358:	0c28      	lsrs	r0, r5, #16
 800135a:	0412      	lsls	r2, r2, #16
 800135c:	0c1d      	lsrs	r5, r3, #16
 800135e:	465b      	mov	r3, fp
 8001360:	0c14      	lsrs	r4, r2, #16
 8001362:	0022      	movs	r2, r4
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	435a      	muls	r2, r3
 800136a:	9403      	str	r4, [sp, #12]
 800136c:	436b      	muls	r3, r5
 800136e:	4344      	muls	r4, r0
 8001370:	9502      	str	r5, [sp, #8]
 8001372:	4368      	muls	r0, r5
 8001374:	191b      	adds	r3, r3, r4
 8001376:	0c15      	lsrs	r5, r2, #16
 8001378:	18eb      	adds	r3, r5, r3
 800137a:	429c      	cmp	r4, r3
 800137c:	d903      	bls.n	8001386 <__aeabi_ddiv+0x356>
 800137e:	2480      	movs	r4, #128	; 0x80
 8001380:	0264      	lsls	r4, r4, #9
 8001382:	46a4      	mov	ip, r4
 8001384:	4460      	add	r0, ip
 8001386:	0c1c      	lsrs	r4, r3, #16
 8001388:	0415      	lsls	r5, r2, #16
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	0c2d      	lsrs	r5, r5, #16
 800138e:	1820      	adds	r0, r4, r0
 8001390:	195d      	adds	r5, r3, r5
 8001392:	4281      	cmp	r1, r0
 8001394:	d377      	bcc.n	8001486 <__aeabi_ddiv+0x456>
 8001396:	d073      	beq.n	8001480 <__aeabi_ddiv+0x450>
 8001398:	1a0c      	subs	r4, r1, r0
 800139a:	4aa2      	ldr	r2, [pc, #648]	; (8001624 <__aeabi_ddiv+0x5f4>)
 800139c:	1b7d      	subs	r5, r7, r5
 800139e:	42af      	cmp	r7, r5
 80013a0:	41bf      	sbcs	r7, r7
 80013a2:	4694      	mov	ip, r2
 80013a4:	9b00      	ldr	r3, [sp, #0]
 80013a6:	427f      	negs	r7, r7
 80013a8:	4463      	add	r3, ip
 80013aa:	1be0      	subs	r0, r4, r7
 80013ac:	001c      	movs	r4, r3
 80013ae:	4286      	cmp	r6, r0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_ddiv+0x384>
 80013b2:	e0db      	b.n	800156c <__aeabi_ddiv+0x53c>
 80013b4:	9901      	ldr	r1, [sp, #4]
 80013b6:	f7fe ff35 	bl	8000224 <__aeabi_uidivmod>
 80013ba:	464a      	mov	r2, r9
 80013bc:	4342      	muls	r2, r0
 80013be:	040b      	lsls	r3, r1, #16
 80013c0:	0c29      	lsrs	r1, r5, #16
 80013c2:	0007      	movs	r7, r0
 80013c4:	4319      	orrs	r1, r3
 80013c6:	428a      	cmp	r2, r1
 80013c8:	d907      	bls.n	80013da <__aeabi_ddiv+0x3aa>
 80013ca:	1989      	adds	r1, r1, r6
 80013cc:	3f01      	subs	r7, #1
 80013ce:	428e      	cmp	r6, r1
 80013d0:	d803      	bhi.n	80013da <__aeabi_ddiv+0x3aa>
 80013d2:	428a      	cmp	r2, r1
 80013d4:	d901      	bls.n	80013da <__aeabi_ddiv+0x3aa>
 80013d6:	1e87      	subs	r7, r0, #2
 80013d8:	1989      	adds	r1, r1, r6
 80013da:	1a88      	subs	r0, r1, r2
 80013dc:	9901      	ldr	r1, [sp, #4]
 80013de:	f7fe ff21 	bl	8000224 <__aeabi_uidivmod>
 80013e2:	0409      	lsls	r1, r1, #16
 80013e4:	464a      	mov	r2, r9
 80013e6:	4689      	mov	r9, r1
 80013e8:	0429      	lsls	r1, r5, #16
 80013ea:	464d      	mov	r5, r9
 80013ec:	4342      	muls	r2, r0
 80013ee:	0c09      	lsrs	r1, r1, #16
 80013f0:	0003      	movs	r3, r0
 80013f2:	4329      	orrs	r1, r5
 80013f4:	428a      	cmp	r2, r1
 80013f6:	d907      	bls.n	8001408 <__aeabi_ddiv+0x3d8>
 80013f8:	1989      	adds	r1, r1, r6
 80013fa:	3b01      	subs	r3, #1
 80013fc:	428e      	cmp	r6, r1
 80013fe:	d803      	bhi.n	8001408 <__aeabi_ddiv+0x3d8>
 8001400:	428a      	cmp	r2, r1
 8001402:	d901      	bls.n	8001408 <__aeabi_ddiv+0x3d8>
 8001404:	1e83      	subs	r3, r0, #2
 8001406:	1989      	adds	r1, r1, r6
 8001408:	043f      	lsls	r7, r7, #16
 800140a:	1a89      	subs	r1, r1, r2
 800140c:	003a      	movs	r2, r7
 800140e:	9f03      	ldr	r7, [sp, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	0038      	movs	r0, r7
 8001414:	0413      	lsls	r3, r2, #16
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	4358      	muls	r0, r3
 800141a:	4681      	mov	r9, r0
 800141c:	9802      	ldr	r0, [sp, #8]
 800141e:	0c15      	lsrs	r5, r2, #16
 8001420:	436f      	muls	r7, r5
 8001422:	4343      	muls	r3, r0
 8001424:	4345      	muls	r5, r0
 8001426:	4648      	mov	r0, r9
 8001428:	0c00      	lsrs	r0, r0, #16
 800142a:	4684      	mov	ip, r0
 800142c:	19db      	adds	r3, r3, r7
 800142e:	4463      	add	r3, ip
 8001430:	429f      	cmp	r7, r3
 8001432:	d903      	bls.n	800143c <__aeabi_ddiv+0x40c>
 8001434:	2080      	movs	r0, #128	; 0x80
 8001436:	0240      	lsls	r0, r0, #9
 8001438:	4684      	mov	ip, r0
 800143a:	4465      	add	r5, ip
 800143c:	4648      	mov	r0, r9
 800143e:	0c1f      	lsrs	r7, r3, #16
 8001440:	0400      	lsls	r0, r0, #16
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	0c00      	lsrs	r0, r0, #16
 8001446:	197d      	adds	r5, r7, r5
 8001448:	1818      	adds	r0, r3, r0
 800144a:	42a9      	cmp	r1, r5
 800144c:	d200      	bcs.n	8001450 <__aeabi_ddiv+0x420>
 800144e:	e084      	b.n	800155a <__aeabi_ddiv+0x52a>
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0x424>
 8001452:	e07f      	b.n	8001554 <__aeabi_ddiv+0x524>
 8001454:	2301      	movs	r3, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	e657      	b.n	800110a <__aeabi_ddiv+0xda>
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	464a      	mov	r2, r9
 800145e:	031b      	lsls	r3, r3, #12
 8001460:	4313      	orrs	r3, r2
 8001462:	031b      	lsls	r3, r3, #12
 8001464:	0b1b      	lsrs	r3, r3, #12
 8001466:	46aa      	mov	sl, r5
 8001468:	4a6f      	ldr	r2, [pc, #444]	; (8001628 <__aeabi_ddiv+0x5f8>)
 800146a:	e66f      	b.n	800114c <__aeabi_ddiv+0x11c>
 800146c:	42ba      	cmp	r2, r7
 800146e:	d900      	bls.n	8001472 <__aeabi_ddiv+0x442>
 8001470:	e735      	b.n	80012de <__aeabi_ddiv+0x2ae>
 8001472:	464b      	mov	r3, r9
 8001474:	07dc      	lsls	r4, r3, #31
 8001476:	0858      	lsrs	r0, r3, #1
 8001478:	087b      	lsrs	r3, r7, #1
 800147a:	431c      	orrs	r4, r3
 800147c:	07ff      	lsls	r7, r7, #31
 800147e:	e734      	b.n	80012ea <__aeabi_ddiv+0x2ba>
 8001480:	2400      	movs	r4, #0
 8001482:	42af      	cmp	r7, r5
 8001484:	d289      	bcs.n	800139a <__aeabi_ddiv+0x36a>
 8001486:	4447      	add	r7, r8
 8001488:	4547      	cmp	r7, r8
 800148a:	41a4      	sbcs	r4, r4
 800148c:	465b      	mov	r3, fp
 800148e:	4264      	negs	r4, r4
 8001490:	19a4      	adds	r4, r4, r6
 8001492:	1864      	adds	r4, r4, r1
 8001494:	3b01      	subs	r3, #1
 8001496:	42a6      	cmp	r6, r4
 8001498:	d21e      	bcs.n	80014d8 <__aeabi_ddiv+0x4a8>
 800149a:	42a0      	cmp	r0, r4
 800149c:	d86d      	bhi.n	800157a <__aeabi_ddiv+0x54a>
 800149e:	d100      	bne.n	80014a2 <__aeabi_ddiv+0x472>
 80014a0:	e0b6      	b.n	8001610 <__aeabi_ddiv+0x5e0>
 80014a2:	1a24      	subs	r4, r4, r0
 80014a4:	469b      	mov	fp, r3
 80014a6:	e778      	b.n	800139a <__aeabi_ddiv+0x36a>
 80014a8:	0003      	movs	r3, r0
 80014aa:	465a      	mov	r2, fp
 80014ac:	3b28      	subs	r3, #40	; 0x28
 80014ae:	409a      	lsls	r2, r3
 80014b0:	2700      	movs	r7, #0
 80014b2:	4691      	mov	r9, r2
 80014b4:	e688      	b.n	80011c8 <__aeabi_ddiv+0x198>
 80014b6:	4658      	mov	r0, fp
 80014b8:	f001 f912 	bl	80026e0 <__clzsi2>
 80014bc:	3020      	adds	r0, #32
 80014be:	e672      	b.n	80011a6 <__aeabi_ddiv+0x176>
 80014c0:	0003      	movs	r3, r0
 80014c2:	4652      	mov	r2, sl
 80014c4:	3b28      	subs	r3, #40	; 0x28
 80014c6:	409a      	lsls	r2, r3
 80014c8:	4693      	mov	fp, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	e6b4      	b.n	8001238 <__aeabi_ddiv+0x208>
 80014ce:	4650      	mov	r0, sl
 80014d0:	f001 f906 	bl	80026e0 <__clzsi2>
 80014d4:	3020      	adds	r0, #32
 80014d6:	e69a      	b.n	800120e <__aeabi_ddiv+0x1de>
 80014d8:	42a6      	cmp	r6, r4
 80014da:	d1e2      	bne.n	80014a2 <__aeabi_ddiv+0x472>
 80014dc:	45b8      	cmp	r8, r7
 80014de:	d9dc      	bls.n	800149a <__aeabi_ddiv+0x46a>
 80014e0:	1a34      	subs	r4, r6, r0
 80014e2:	469b      	mov	fp, r3
 80014e4:	e759      	b.n	800139a <__aeabi_ddiv+0x36a>
 80014e6:	2b1f      	cmp	r3, #31
 80014e8:	dc65      	bgt.n	80015b6 <__aeabi_ddiv+0x586>
 80014ea:	4c50      	ldr	r4, [pc, #320]	; (800162c <__aeabi_ddiv+0x5fc>)
 80014ec:	9900      	ldr	r1, [sp, #0]
 80014ee:	46a4      	mov	ip, r4
 80014f0:	465c      	mov	r4, fp
 80014f2:	4461      	add	r1, ip
 80014f4:	0008      	movs	r0, r1
 80014f6:	408c      	lsls	r4, r1
 80014f8:	0011      	movs	r1, r2
 80014fa:	4082      	lsls	r2, r0
 80014fc:	40d9      	lsrs	r1, r3
 80014fe:	1e50      	subs	r0, r2, #1
 8001500:	4182      	sbcs	r2, r0
 8001502:	430c      	orrs	r4, r1
 8001504:	4314      	orrs	r4, r2
 8001506:	465a      	mov	r2, fp
 8001508:	40da      	lsrs	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	0762      	lsls	r2, r4, #29
 800150e:	d009      	beq.n	8001524 <__aeabi_ddiv+0x4f4>
 8001510:	220f      	movs	r2, #15
 8001512:	4022      	ands	r2, r4
 8001514:	2a04      	cmp	r2, #4
 8001516:	d005      	beq.n	8001524 <__aeabi_ddiv+0x4f4>
 8001518:	0022      	movs	r2, r4
 800151a:	1d14      	adds	r4, r2, #4
 800151c:	4294      	cmp	r4, r2
 800151e:	4189      	sbcs	r1, r1
 8001520:	4249      	negs	r1, r1
 8001522:	185b      	adds	r3, r3, r1
 8001524:	021a      	lsls	r2, r3, #8
 8001526:	d562      	bpl.n	80015ee <__aeabi_ddiv+0x5be>
 8001528:	2201      	movs	r2, #1
 800152a:	2300      	movs	r3, #0
 800152c:	2700      	movs	r7, #0
 800152e:	e60d      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001530:	428a      	cmp	r2, r1
 8001532:	d800      	bhi.n	8001536 <__aeabi_ddiv+0x506>
 8001534:	e70a      	b.n	800134c <__aeabi_ddiv+0x31c>
 8001536:	1e83      	subs	r3, r0, #2
 8001538:	1989      	adds	r1, r1, r6
 800153a:	e707      	b.n	800134c <__aeabi_ddiv+0x31c>
 800153c:	230f      	movs	r3, #15
 800153e:	4013      	ands	r3, r2
 8001540:	2b04      	cmp	r3, #4
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0x516>
 8001544:	e5e6      	b.n	8001114 <__aeabi_ddiv+0xe4>
 8001546:	1d17      	adds	r7, r2, #4
 8001548:	4297      	cmp	r7, r2
 800154a:	4192      	sbcs	r2, r2
 800154c:	4253      	negs	r3, r2
 800154e:	449b      	add	fp, r3
 8001550:	08fa      	lsrs	r2, r7, #3
 8001552:	e5e0      	b.n	8001116 <__aeabi_ddiv+0xe6>
 8001554:	2800      	cmp	r0, #0
 8001556:	d100      	bne.n	800155a <__aeabi_ddiv+0x52a>
 8001558:	e5d7      	b.n	800110a <__aeabi_ddiv+0xda>
 800155a:	1871      	adds	r1, r6, r1
 800155c:	1e53      	subs	r3, r2, #1
 800155e:	42b1      	cmp	r1, r6
 8001560:	d327      	bcc.n	80015b2 <__aeabi_ddiv+0x582>
 8001562:	42a9      	cmp	r1, r5
 8001564:	d315      	bcc.n	8001592 <__aeabi_ddiv+0x562>
 8001566:	d058      	beq.n	800161a <__aeabi_ddiv+0x5ea>
 8001568:	001a      	movs	r2, r3
 800156a:	e773      	b.n	8001454 <__aeabi_ddiv+0x424>
 800156c:	2b00      	cmp	r3, #0
 800156e:	dc00      	bgt.n	8001572 <__aeabi_ddiv+0x542>
 8001570:	e604      	b.n	800117c <__aeabi_ddiv+0x14c>
 8001572:	2301      	movs	r3, #1
 8001574:	2200      	movs	r2, #0
 8001576:	449b      	add	fp, r3
 8001578:	e5cd      	b.n	8001116 <__aeabi_ddiv+0xe6>
 800157a:	2302      	movs	r3, #2
 800157c:	4447      	add	r7, r8
 800157e:	4547      	cmp	r7, r8
 8001580:	4189      	sbcs	r1, r1
 8001582:	425b      	negs	r3, r3
 8001584:	469c      	mov	ip, r3
 8001586:	4249      	negs	r1, r1
 8001588:	1989      	adds	r1, r1, r6
 800158a:	190c      	adds	r4, r1, r4
 800158c:	44e3      	add	fp, ip
 800158e:	1a24      	subs	r4, r4, r0
 8001590:	e703      	b.n	800139a <__aeabi_ddiv+0x36a>
 8001592:	4643      	mov	r3, r8
 8001594:	005f      	lsls	r7, r3, #1
 8001596:	4547      	cmp	r7, r8
 8001598:	419b      	sbcs	r3, r3
 800159a:	46b8      	mov	r8, r7
 800159c:	425b      	negs	r3, r3
 800159e:	199e      	adds	r6, r3, r6
 80015a0:	3a02      	subs	r2, #2
 80015a2:	1989      	adds	r1, r1, r6
 80015a4:	42a9      	cmp	r1, r5
 80015a6:	d000      	beq.n	80015aa <__aeabi_ddiv+0x57a>
 80015a8:	e754      	b.n	8001454 <__aeabi_ddiv+0x424>
 80015aa:	4540      	cmp	r0, r8
 80015ac:	d000      	beq.n	80015b0 <__aeabi_ddiv+0x580>
 80015ae:	e751      	b.n	8001454 <__aeabi_ddiv+0x424>
 80015b0:	e5ab      	b.n	800110a <__aeabi_ddiv+0xda>
 80015b2:	001a      	movs	r2, r3
 80015b4:	e7f6      	b.n	80015a4 <__aeabi_ddiv+0x574>
 80015b6:	211f      	movs	r1, #31
 80015b8:	465f      	mov	r7, fp
 80015ba:	4249      	negs	r1, r1
 80015bc:	1b0c      	subs	r4, r1, r4
 80015be:	40e7      	lsrs	r7, r4
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d007      	beq.n	80015d4 <__aeabi_ddiv+0x5a4>
 80015c4:	491a      	ldr	r1, [pc, #104]	; (8001630 <__aeabi_ddiv+0x600>)
 80015c6:	9b00      	ldr	r3, [sp, #0]
 80015c8:	468c      	mov	ip, r1
 80015ca:	4463      	add	r3, ip
 80015cc:	0018      	movs	r0, r3
 80015ce:	465b      	mov	r3, fp
 80015d0:	4083      	lsls	r3, r0
 80015d2:	431a      	orrs	r2, r3
 80015d4:	1e50      	subs	r0, r2, #1
 80015d6:	4182      	sbcs	r2, r0
 80015d8:	433a      	orrs	r2, r7
 80015da:	2707      	movs	r7, #7
 80015dc:	2300      	movs	r3, #0
 80015de:	4017      	ands	r7, r2
 80015e0:	d009      	beq.n	80015f6 <__aeabi_ddiv+0x5c6>
 80015e2:	210f      	movs	r1, #15
 80015e4:	2300      	movs	r3, #0
 80015e6:	4011      	ands	r1, r2
 80015e8:	0014      	movs	r4, r2
 80015ea:	2904      	cmp	r1, #4
 80015ec:	d195      	bne.n	800151a <__aeabi_ddiv+0x4ea>
 80015ee:	0022      	movs	r2, r4
 80015f0:	075f      	lsls	r7, r3, #29
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	0b1b      	lsrs	r3, r3, #12
 80015f6:	08d2      	lsrs	r2, r2, #3
 80015f8:	4317      	orrs	r7, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	e5a6      	b.n	800114c <__aeabi_ddiv+0x11c>
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	4659      	mov	r1, fp
 8001602:	031b      	lsls	r3, r3, #12
 8001604:	430b      	orrs	r3, r1
 8001606:	031b      	lsls	r3, r3, #12
 8001608:	0017      	movs	r7, r2
 800160a:	0b1b      	lsrs	r3, r3, #12
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <__aeabi_ddiv+0x5f8>)
 800160e:	e59d      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001610:	42bd      	cmp	r5, r7
 8001612:	d8b2      	bhi.n	800157a <__aeabi_ddiv+0x54a>
 8001614:	469b      	mov	fp, r3
 8001616:	2400      	movs	r4, #0
 8001618:	e6bf      	b.n	800139a <__aeabi_ddiv+0x36a>
 800161a:	4580      	cmp	r8, r0
 800161c:	d3b9      	bcc.n	8001592 <__aeabi_ddiv+0x562>
 800161e:	001a      	movs	r2, r3
 8001620:	e7c3      	b.n	80015aa <__aeabi_ddiv+0x57a>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	000003ff 	.word	0x000003ff
 8001628:	000007ff 	.word	0x000007ff
 800162c:	0000041e 	.word	0x0000041e
 8001630:	0000043e 	.word	0x0000043e

08001634 <__eqdf2>:
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	464f      	mov	r7, r9
 8001638:	4646      	mov	r6, r8
 800163a:	46d6      	mov	lr, sl
 800163c:	4684      	mov	ip, r0
 800163e:	b5c0      	push	{r6, r7, lr}
 8001640:	4680      	mov	r8, r0
 8001642:	4e19      	ldr	r6, [pc, #100]	; (80016a8 <__eqdf2+0x74>)
 8001644:	0318      	lsls	r0, r3, #12
 8001646:	030f      	lsls	r7, r1, #12
 8001648:	004d      	lsls	r5, r1, #1
 800164a:	0b00      	lsrs	r0, r0, #12
 800164c:	005c      	lsls	r4, r3, #1
 800164e:	4682      	mov	sl, r0
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d6d      	lsrs	r5, r5, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	4691      	mov	r9, r2
 8001658:	0d64      	lsrs	r4, r4, #21
 800165a:	0fdb      	lsrs	r3, r3, #31
 800165c:	2001      	movs	r0, #1
 800165e:	42b5      	cmp	r5, r6
 8001660:	d00a      	beq.n	8001678 <__eqdf2+0x44>
 8001662:	42b4      	cmp	r4, r6
 8001664:	d003      	beq.n	800166e <__eqdf2+0x3a>
 8001666:	42a5      	cmp	r5, r4
 8001668:	d101      	bne.n	800166e <__eqdf2+0x3a>
 800166a:	4557      	cmp	r7, sl
 800166c:	d00c      	beq.n	8001688 <__eqdf2+0x54>
 800166e:	bc1c      	pop	{r2, r3, r4}
 8001670:	4690      	mov	r8, r2
 8001672:	4699      	mov	r9, r3
 8001674:	46a2      	mov	sl, r4
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	4666      	mov	r6, ip
 800167a:	433e      	orrs	r6, r7
 800167c:	d1f7      	bne.n	800166e <__eqdf2+0x3a>
 800167e:	42ac      	cmp	r4, r5
 8001680:	d1f5      	bne.n	800166e <__eqdf2+0x3a>
 8001682:	4654      	mov	r4, sl
 8001684:	4314      	orrs	r4, r2
 8001686:	d1f2      	bne.n	800166e <__eqdf2+0x3a>
 8001688:	2001      	movs	r0, #1
 800168a:	45c8      	cmp	r8, r9
 800168c:	d1ef      	bne.n	800166e <__eqdf2+0x3a>
 800168e:	4299      	cmp	r1, r3
 8001690:	d007      	beq.n	80016a2 <__eqdf2+0x6e>
 8001692:	2d00      	cmp	r5, #0
 8001694:	d1eb      	bne.n	800166e <__eqdf2+0x3a>
 8001696:	4663      	mov	r3, ip
 8001698:	431f      	orrs	r7, r3
 800169a:	0038      	movs	r0, r7
 800169c:	1e47      	subs	r7, r0, #1
 800169e:	41b8      	sbcs	r0, r7
 80016a0:	e7e5      	b.n	800166e <__eqdf2+0x3a>
 80016a2:	2000      	movs	r0, #0
 80016a4:	e7e3      	b.n	800166e <__eqdf2+0x3a>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__gedf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	464f      	mov	r7, r9
 80016b0:	4646      	mov	r6, r8
 80016b2:	46d6      	mov	lr, sl
 80016b4:	004d      	lsls	r5, r1, #1
 80016b6:	b5c0      	push	{r6, r7, lr}
 80016b8:	030e      	lsls	r6, r1, #12
 80016ba:	0fc9      	lsrs	r1, r1, #31
 80016bc:	468a      	mov	sl, r1
 80016be:	492c      	ldr	r1, [pc, #176]	; (8001770 <__gedf2+0xc4>)
 80016c0:	031f      	lsls	r7, r3, #12
 80016c2:	005c      	lsls	r4, r3, #1
 80016c4:	4680      	mov	r8, r0
 80016c6:	0b36      	lsrs	r6, r6, #12
 80016c8:	0d6d      	lsrs	r5, r5, #21
 80016ca:	4691      	mov	r9, r2
 80016cc:	0b3f      	lsrs	r7, r7, #12
 80016ce:	0d64      	lsrs	r4, r4, #21
 80016d0:	0fdb      	lsrs	r3, r3, #31
 80016d2:	428d      	cmp	r5, r1
 80016d4:	d01e      	beq.n	8001714 <__gedf2+0x68>
 80016d6:	428c      	cmp	r4, r1
 80016d8:	d016      	beq.n	8001708 <__gedf2+0x5c>
 80016da:	2d00      	cmp	r5, #0
 80016dc:	d11e      	bne.n	800171c <__gedf2+0x70>
 80016de:	4330      	orrs	r0, r6
 80016e0:	4684      	mov	ip, r0
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d101      	bne.n	80016ea <__gedf2+0x3e>
 80016e6:	433a      	orrs	r2, r7
 80016e8:	d023      	beq.n	8001732 <__gedf2+0x86>
 80016ea:	4662      	mov	r2, ip
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d01a      	beq.n	8001726 <__gedf2+0x7a>
 80016f0:	459a      	cmp	sl, r3
 80016f2:	d029      	beq.n	8001748 <__gedf2+0x9c>
 80016f4:	4651      	mov	r1, sl
 80016f6:	2002      	movs	r0, #2
 80016f8:	3901      	subs	r1, #1
 80016fa:	4008      	ands	r0, r1
 80016fc:	3801      	subs	r0, #1
 80016fe:	bc1c      	pop	{r2, r3, r4}
 8001700:	4690      	mov	r8, r2
 8001702:	4699      	mov	r9, r3
 8001704:	46a2      	mov	sl, r4
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001708:	0039      	movs	r1, r7
 800170a:	4311      	orrs	r1, r2
 800170c:	d0e5      	beq.n	80016da <__gedf2+0x2e>
 800170e:	2002      	movs	r0, #2
 8001710:	4240      	negs	r0, r0
 8001712:	e7f4      	b.n	80016fe <__gedf2+0x52>
 8001714:	4330      	orrs	r0, r6
 8001716:	d1fa      	bne.n	800170e <__gedf2+0x62>
 8001718:	42ac      	cmp	r4, r5
 800171a:	d00f      	beq.n	800173c <__gedf2+0x90>
 800171c:	2c00      	cmp	r4, #0
 800171e:	d10f      	bne.n	8001740 <__gedf2+0x94>
 8001720:	433a      	orrs	r2, r7
 8001722:	d0e7      	beq.n	80016f4 <__gedf2+0x48>
 8001724:	e00c      	b.n	8001740 <__gedf2+0x94>
 8001726:	2201      	movs	r2, #1
 8001728:	3b01      	subs	r3, #1
 800172a:	4393      	bics	r3, r2
 800172c:	0018      	movs	r0, r3
 800172e:	3001      	adds	r0, #1
 8001730:	e7e5      	b.n	80016fe <__gedf2+0x52>
 8001732:	4663      	mov	r3, ip
 8001734:	2000      	movs	r0, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0e1      	beq.n	80016fe <__gedf2+0x52>
 800173a:	e7db      	b.n	80016f4 <__gedf2+0x48>
 800173c:	433a      	orrs	r2, r7
 800173e:	d1e6      	bne.n	800170e <__gedf2+0x62>
 8001740:	459a      	cmp	sl, r3
 8001742:	d1d7      	bne.n	80016f4 <__gedf2+0x48>
 8001744:	42a5      	cmp	r5, r4
 8001746:	dcd5      	bgt.n	80016f4 <__gedf2+0x48>
 8001748:	42a5      	cmp	r5, r4
 800174a:	db05      	blt.n	8001758 <__gedf2+0xac>
 800174c:	42be      	cmp	r6, r7
 800174e:	d8d1      	bhi.n	80016f4 <__gedf2+0x48>
 8001750:	d008      	beq.n	8001764 <__gedf2+0xb8>
 8001752:	2000      	movs	r0, #0
 8001754:	42be      	cmp	r6, r7
 8001756:	d2d2      	bcs.n	80016fe <__gedf2+0x52>
 8001758:	4650      	mov	r0, sl
 800175a:	2301      	movs	r3, #1
 800175c:	3801      	subs	r0, #1
 800175e:	4398      	bics	r0, r3
 8001760:	3001      	adds	r0, #1
 8001762:	e7cc      	b.n	80016fe <__gedf2+0x52>
 8001764:	45c8      	cmp	r8, r9
 8001766:	d8c5      	bhi.n	80016f4 <__gedf2+0x48>
 8001768:	2000      	movs	r0, #0
 800176a:	45c8      	cmp	r8, r9
 800176c:	d3f4      	bcc.n	8001758 <__gedf2+0xac>
 800176e:	e7c6      	b.n	80016fe <__gedf2+0x52>
 8001770:	000007ff 	.word	0x000007ff

08001774 <__ledf2>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	464f      	mov	r7, r9
 8001778:	4646      	mov	r6, r8
 800177a:	46d6      	mov	lr, sl
 800177c:	004d      	lsls	r5, r1, #1
 800177e:	b5c0      	push	{r6, r7, lr}
 8001780:	030e      	lsls	r6, r1, #12
 8001782:	0fc9      	lsrs	r1, r1, #31
 8001784:	468a      	mov	sl, r1
 8001786:	492e      	ldr	r1, [pc, #184]	; (8001840 <__ledf2+0xcc>)
 8001788:	031f      	lsls	r7, r3, #12
 800178a:	005c      	lsls	r4, r3, #1
 800178c:	4680      	mov	r8, r0
 800178e:	0b36      	lsrs	r6, r6, #12
 8001790:	0d6d      	lsrs	r5, r5, #21
 8001792:	4691      	mov	r9, r2
 8001794:	0b3f      	lsrs	r7, r7, #12
 8001796:	0d64      	lsrs	r4, r4, #21
 8001798:	0fdb      	lsrs	r3, r3, #31
 800179a:	428d      	cmp	r5, r1
 800179c:	d018      	beq.n	80017d0 <__ledf2+0x5c>
 800179e:	428c      	cmp	r4, r1
 80017a0:	d011      	beq.n	80017c6 <__ledf2+0x52>
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d118      	bne.n	80017d8 <__ledf2+0x64>
 80017a6:	4330      	orrs	r0, r6
 80017a8:	4684      	mov	ip, r0
 80017aa:	2c00      	cmp	r4, #0
 80017ac:	d11e      	bne.n	80017ec <__ledf2+0x78>
 80017ae:	433a      	orrs	r2, r7
 80017b0:	d11c      	bne.n	80017ec <__ledf2+0x78>
 80017b2:	4663      	mov	r3, ip
 80017b4:	2000      	movs	r0, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d030      	beq.n	800181c <__ledf2+0xa8>
 80017ba:	4651      	mov	r1, sl
 80017bc:	2002      	movs	r0, #2
 80017be:	3901      	subs	r1, #1
 80017c0:	4008      	ands	r0, r1
 80017c2:	3801      	subs	r0, #1
 80017c4:	e02a      	b.n	800181c <__ledf2+0xa8>
 80017c6:	0039      	movs	r1, r7
 80017c8:	4311      	orrs	r1, r2
 80017ca:	d0ea      	beq.n	80017a2 <__ledf2+0x2e>
 80017cc:	2002      	movs	r0, #2
 80017ce:	e025      	b.n	800181c <__ledf2+0xa8>
 80017d0:	4330      	orrs	r0, r6
 80017d2:	d1fb      	bne.n	80017cc <__ledf2+0x58>
 80017d4:	42ac      	cmp	r4, r5
 80017d6:	d026      	beq.n	8001826 <__ledf2+0xb2>
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d126      	bne.n	800182a <__ledf2+0xb6>
 80017dc:	433a      	orrs	r2, r7
 80017de:	d124      	bne.n	800182a <__ledf2+0xb6>
 80017e0:	4651      	mov	r1, sl
 80017e2:	2002      	movs	r0, #2
 80017e4:	3901      	subs	r1, #1
 80017e6:	4008      	ands	r0, r1
 80017e8:	3801      	subs	r0, #1
 80017ea:	e017      	b.n	800181c <__ledf2+0xa8>
 80017ec:	4662      	mov	r2, ip
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d00f      	beq.n	8001812 <__ledf2+0x9e>
 80017f2:	459a      	cmp	sl, r3
 80017f4:	d1e1      	bne.n	80017ba <__ledf2+0x46>
 80017f6:	42a5      	cmp	r5, r4
 80017f8:	db05      	blt.n	8001806 <__ledf2+0x92>
 80017fa:	42be      	cmp	r6, r7
 80017fc:	d8dd      	bhi.n	80017ba <__ledf2+0x46>
 80017fe:	d019      	beq.n	8001834 <__ledf2+0xc0>
 8001800:	2000      	movs	r0, #0
 8001802:	42be      	cmp	r6, r7
 8001804:	d20a      	bcs.n	800181c <__ledf2+0xa8>
 8001806:	4650      	mov	r0, sl
 8001808:	2301      	movs	r3, #1
 800180a:	3801      	subs	r0, #1
 800180c:	4398      	bics	r0, r3
 800180e:	3001      	adds	r0, #1
 8001810:	e004      	b.n	800181c <__ledf2+0xa8>
 8001812:	2201      	movs	r2, #1
 8001814:	3b01      	subs	r3, #1
 8001816:	4393      	bics	r3, r2
 8001818:	0018      	movs	r0, r3
 800181a:	3001      	adds	r0, #1
 800181c:	bc1c      	pop	{r2, r3, r4}
 800181e:	4690      	mov	r8, r2
 8001820:	4699      	mov	r9, r3
 8001822:	46a2      	mov	sl, r4
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001826:	433a      	orrs	r2, r7
 8001828:	d1d0      	bne.n	80017cc <__ledf2+0x58>
 800182a:	459a      	cmp	sl, r3
 800182c:	d1c5      	bne.n	80017ba <__ledf2+0x46>
 800182e:	42a5      	cmp	r5, r4
 8001830:	dcc3      	bgt.n	80017ba <__ledf2+0x46>
 8001832:	e7e0      	b.n	80017f6 <__ledf2+0x82>
 8001834:	45c8      	cmp	r8, r9
 8001836:	d8c0      	bhi.n	80017ba <__ledf2+0x46>
 8001838:	2000      	movs	r0, #0
 800183a:	45c8      	cmp	r8, r9
 800183c:	d3e3      	bcc.n	8001806 <__ledf2+0x92>
 800183e:	e7ed      	b.n	800181c <__ledf2+0xa8>
 8001840:	000007ff 	.word	0x000007ff

08001844 <__aeabi_dmul>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	4657      	mov	r7, sl
 8001848:	46de      	mov	lr, fp
 800184a:	464e      	mov	r6, r9
 800184c:	4645      	mov	r5, r8
 800184e:	b5e0      	push	{r5, r6, r7, lr}
 8001850:	4683      	mov	fp, r0
 8001852:	0006      	movs	r6, r0
 8001854:	030f      	lsls	r7, r1, #12
 8001856:	0048      	lsls	r0, r1, #1
 8001858:	b087      	sub	sp, #28
 800185a:	4692      	mov	sl, r2
 800185c:	001d      	movs	r5, r3
 800185e:	0b3f      	lsrs	r7, r7, #12
 8001860:	0d40      	lsrs	r0, r0, #21
 8001862:	0fcc      	lsrs	r4, r1, #31
 8001864:	2800      	cmp	r0, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x26>
 8001868:	e06f      	b.n	800194a <__aeabi_dmul+0x106>
 800186a:	4bde      	ldr	r3, [pc, #888]	; (8001be4 <__aeabi_dmul+0x3a0>)
 800186c:	4298      	cmp	r0, r3
 800186e:	d038      	beq.n	80018e2 <__aeabi_dmul+0x9e>
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	00ff      	lsls	r7, r7, #3
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431f      	orrs	r7, r3
 8001878:	0f73      	lsrs	r3, r6, #29
 800187a:	433b      	orrs	r3, r7
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	4bda      	ldr	r3, [pc, #872]	; (8001be8 <__aeabi_dmul+0x3a4>)
 8001880:	2700      	movs	r7, #0
 8001882:	4699      	mov	r9, r3
 8001884:	2300      	movs	r3, #0
 8001886:	469b      	mov	fp, r3
 8001888:	00f6      	lsls	r6, r6, #3
 800188a:	4481      	add	r9, r0
 800188c:	032b      	lsls	r3, r5, #12
 800188e:	0069      	lsls	r1, r5, #1
 8001890:	0b1b      	lsrs	r3, r3, #12
 8001892:	4652      	mov	r2, sl
 8001894:	4698      	mov	r8, r3
 8001896:	0d49      	lsrs	r1, r1, #21
 8001898:	0fed      	lsrs	r5, r5, #31
 800189a:	2900      	cmp	r1, #0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dmul+0x5c>
 800189e:	e085      	b.n	80019ac <__aeabi_dmul+0x168>
 80018a0:	4bd0      	ldr	r3, [pc, #832]	; (8001be4 <__aeabi_dmul+0x3a0>)
 80018a2:	4299      	cmp	r1, r3
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dmul+0x64>
 80018a6:	e073      	b.n	8001990 <__aeabi_dmul+0x14c>
 80018a8:	4643      	mov	r3, r8
 80018aa:	00da      	lsls	r2, r3, #3
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	4313      	orrs	r3, r2
 80018b2:	4652      	mov	r2, sl
 80018b4:	48cc      	ldr	r0, [pc, #816]	; (8001be8 <__aeabi_dmul+0x3a4>)
 80018b6:	0f52      	lsrs	r2, r2, #29
 80018b8:	4684      	mov	ip, r0
 80018ba:	4313      	orrs	r3, r2
 80018bc:	4652      	mov	r2, sl
 80018be:	2000      	movs	r0, #0
 80018c0:	4461      	add	r1, ip
 80018c2:	00d2      	lsls	r2, r2, #3
 80018c4:	4489      	add	r9, r1
 80018c6:	0021      	movs	r1, r4
 80018c8:	4069      	eors	r1, r5
 80018ca:	9100      	str	r1, [sp, #0]
 80018cc:	468c      	mov	ip, r1
 80018ce:	2101      	movs	r1, #1
 80018d0:	4449      	add	r1, r9
 80018d2:	468a      	mov	sl, r1
 80018d4:	2f0f      	cmp	r7, #15
 80018d6:	d900      	bls.n	80018da <__aeabi_dmul+0x96>
 80018d8:	e090      	b.n	80019fc <__aeabi_dmul+0x1b8>
 80018da:	49c4      	ldr	r1, [pc, #784]	; (8001bec <__aeabi_dmul+0x3a8>)
 80018dc:	00bf      	lsls	r7, r7, #2
 80018de:	59cf      	ldr	r7, [r1, r7]
 80018e0:	46bf      	mov	pc, r7
 80018e2:	465b      	mov	r3, fp
 80018e4:	433b      	orrs	r3, r7
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	d000      	beq.n	80018ec <__aeabi_dmul+0xa8>
 80018ea:	e16a      	b.n	8001bc2 <__aeabi_dmul+0x37e>
 80018ec:	2302      	movs	r3, #2
 80018ee:	2708      	movs	r7, #8
 80018f0:	2600      	movs	r6, #0
 80018f2:	4681      	mov	r9, r0
 80018f4:	469b      	mov	fp, r3
 80018f6:	e7c9      	b.n	800188c <__aeabi_dmul+0x48>
 80018f8:	0032      	movs	r2, r6
 80018fa:	4658      	mov	r0, fp
 80018fc:	9b01      	ldr	r3, [sp, #4]
 80018fe:	4661      	mov	r1, ip
 8001900:	9100      	str	r1, [sp, #0]
 8001902:	2802      	cmp	r0, #2
 8001904:	d100      	bne.n	8001908 <__aeabi_dmul+0xc4>
 8001906:	e075      	b.n	80019f4 <__aeabi_dmul+0x1b0>
 8001908:	2803      	cmp	r0, #3
 800190a:	d100      	bne.n	800190e <__aeabi_dmul+0xca>
 800190c:	e1fe      	b.n	8001d0c <__aeabi_dmul+0x4c8>
 800190e:	2801      	cmp	r0, #1
 8001910:	d000      	beq.n	8001914 <__aeabi_dmul+0xd0>
 8001912:	e12c      	b.n	8001b6e <__aeabi_dmul+0x32a>
 8001914:	2300      	movs	r3, #0
 8001916:	2700      	movs	r7, #0
 8001918:	2600      	movs	r6, #0
 800191a:	2500      	movs	r5, #0
 800191c:	033f      	lsls	r7, r7, #12
 800191e:	0d2a      	lsrs	r2, r5, #20
 8001920:	0b3f      	lsrs	r7, r7, #12
 8001922:	48b3      	ldr	r0, [pc, #716]	; (8001bf0 <__aeabi_dmul+0x3ac>)
 8001924:	0512      	lsls	r2, r2, #20
 8001926:	433a      	orrs	r2, r7
 8001928:	4002      	ands	r2, r0
 800192a:	051b      	lsls	r3, r3, #20
 800192c:	4313      	orrs	r3, r2
 800192e:	9a00      	ldr	r2, [sp, #0]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	07d1      	lsls	r1, r2, #31
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	430b      	orrs	r3, r1
 8001938:	0030      	movs	r0, r6
 800193a:	0019      	movs	r1, r3
 800193c:	b007      	add	sp, #28
 800193e:	bc3c      	pop	{r2, r3, r4, r5}
 8001940:	4690      	mov	r8, r2
 8001942:	4699      	mov	r9, r3
 8001944:	46a2      	mov	sl, r4
 8001946:	46ab      	mov	fp, r5
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194a:	465b      	mov	r3, fp
 800194c:	433b      	orrs	r3, r7
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	d100      	bne.n	8001954 <__aeabi_dmul+0x110>
 8001952:	e12f      	b.n	8001bb4 <__aeabi_dmul+0x370>
 8001954:	2f00      	cmp	r7, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dmul+0x116>
 8001958:	e1a5      	b.n	8001ca6 <__aeabi_dmul+0x462>
 800195a:	0038      	movs	r0, r7
 800195c:	f000 fec0 	bl	80026e0 <__clzsi2>
 8001960:	0003      	movs	r3, r0
 8001962:	3b0b      	subs	r3, #11
 8001964:	2b1c      	cmp	r3, #28
 8001966:	dd00      	ble.n	800196a <__aeabi_dmul+0x126>
 8001968:	e196      	b.n	8001c98 <__aeabi_dmul+0x454>
 800196a:	221d      	movs	r2, #29
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	465a      	mov	r2, fp
 8001970:	0001      	movs	r1, r0
 8001972:	40da      	lsrs	r2, r3
 8001974:	465e      	mov	r6, fp
 8001976:	3908      	subs	r1, #8
 8001978:	408f      	lsls	r7, r1
 800197a:	0013      	movs	r3, r2
 800197c:	408e      	lsls	r6, r1
 800197e:	433b      	orrs	r3, r7
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <__aeabi_dmul+0x3b0>)
 8001984:	2700      	movs	r7, #0
 8001986:	1a1b      	subs	r3, r3, r0
 8001988:	4699      	mov	r9, r3
 800198a:	2300      	movs	r3, #0
 800198c:	469b      	mov	fp, r3
 800198e:	e77d      	b.n	800188c <__aeabi_dmul+0x48>
 8001990:	4641      	mov	r1, r8
 8001992:	4653      	mov	r3, sl
 8001994:	430b      	orrs	r3, r1
 8001996:	4993      	ldr	r1, [pc, #588]	; (8001be4 <__aeabi_dmul+0x3a0>)
 8001998:	468c      	mov	ip, r1
 800199a:	44e1      	add	r9, ip
 800199c:	2b00      	cmp	r3, #0
 800199e:	d000      	beq.n	80019a2 <__aeabi_dmul+0x15e>
 80019a0:	e11a      	b.n	8001bd8 <__aeabi_dmul+0x394>
 80019a2:	2202      	movs	r2, #2
 80019a4:	2002      	movs	r0, #2
 80019a6:	4317      	orrs	r7, r2
 80019a8:	2200      	movs	r2, #0
 80019aa:	e78c      	b.n	80018c6 <__aeabi_dmul+0x82>
 80019ac:	4313      	orrs	r3, r2
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dmul+0x16e>
 80019b0:	e10d      	b.n	8001bce <__aeabi_dmul+0x38a>
 80019b2:	4643      	mov	r3, r8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d100      	bne.n	80019ba <__aeabi_dmul+0x176>
 80019b8:	e181      	b.n	8001cbe <__aeabi_dmul+0x47a>
 80019ba:	4640      	mov	r0, r8
 80019bc:	f000 fe90 	bl	80026e0 <__clzsi2>
 80019c0:	0002      	movs	r2, r0
 80019c2:	3a0b      	subs	r2, #11
 80019c4:	2a1c      	cmp	r2, #28
 80019c6:	dd00      	ble.n	80019ca <__aeabi_dmul+0x186>
 80019c8:	e172      	b.n	8001cb0 <__aeabi_dmul+0x46c>
 80019ca:	0001      	movs	r1, r0
 80019cc:	4643      	mov	r3, r8
 80019ce:	3908      	subs	r1, #8
 80019d0:	408b      	lsls	r3, r1
 80019d2:	4698      	mov	r8, r3
 80019d4:	231d      	movs	r3, #29
 80019d6:	1a9a      	subs	r2, r3, r2
 80019d8:	4653      	mov	r3, sl
 80019da:	40d3      	lsrs	r3, r2
 80019dc:	001a      	movs	r2, r3
 80019de:	4643      	mov	r3, r8
 80019e0:	4313      	orrs	r3, r2
 80019e2:	4652      	mov	r2, sl
 80019e4:	408a      	lsls	r2, r1
 80019e6:	4649      	mov	r1, r9
 80019e8:	1a08      	subs	r0, r1, r0
 80019ea:	4982      	ldr	r1, [pc, #520]	; (8001bf4 <__aeabi_dmul+0x3b0>)
 80019ec:	4689      	mov	r9, r1
 80019ee:	4481      	add	r9, r0
 80019f0:	2000      	movs	r0, #0
 80019f2:	e768      	b.n	80018c6 <__aeabi_dmul+0x82>
 80019f4:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <__aeabi_dmul+0x3a0>)
 80019f6:	2700      	movs	r7, #0
 80019f8:	2600      	movs	r6, #0
 80019fa:	e78e      	b.n	800191a <__aeabi_dmul+0xd6>
 80019fc:	0c14      	lsrs	r4, r2, #16
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	0c12      	lsrs	r2, r2, #16
 8001a02:	0011      	movs	r1, r2
 8001a04:	0c37      	lsrs	r7, r6, #16
 8001a06:	0436      	lsls	r6, r6, #16
 8001a08:	0c35      	lsrs	r5, r6, #16
 8001a0a:	4379      	muls	r1, r7
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	468c      	mov	ip, r1
 8001a10:	002e      	movs	r6, r5
 8001a12:	4360      	muls	r0, r4
 8001a14:	4460      	add	r0, ip
 8001a16:	4683      	mov	fp, r0
 8001a18:	4356      	muls	r6, r2
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	0c30      	lsrs	r0, r6, #16
 8001a1e:	4680      	mov	r8, r0
 8001a20:	4658      	mov	r0, fp
 8001a22:	4379      	muls	r1, r7
 8001a24:	4440      	add	r0, r8
 8001a26:	9102      	str	r1, [sp, #8]
 8001a28:	4584      	cmp	ip, r0
 8001a2a:	d906      	bls.n	8001a3a <__aeabi_dmul+0x1f6>
 8001a2c:	4688      	mov	r8, r1
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	0249      	lsls	r1, r1, #9
 8001a32:	468c      	mov	ip, r1
 8001a34:	44e0      	add	r8, ip
 8001a36:	4641      	mov	r1, r8
 8001a38:	9102      	str	r1, [sp, #8]
 8001a3a:	0436      	lsls	r6, r6, #16
 8001a3c:	0c01      	lsrs	r1, r0, #16
 8001a3e:	0c36      	lsrs	r6, r6, #16
 8001a40:	0400      	lsls	r0, r0, #16
 8001a42:	468b      	mov	fp, r1
 8001a44:	1981      	adds	r1, r0, r6
 8001a46:	0c1e      	lsrs	r6, r3, #16
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	0c1b      	lsrs	r3, r3, #16
 8001a4c:	9103      	str	r1, [sp, #12]
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4379      	muls	r1, r7
 8001a52:	468c      	mov	ip, r1
 8001a54:	0028      	movs	r0, r5
 8001a56:	4375      	muls	r5, r6
 8001a58:	4465      	add	r5, ip
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	4358      	muls	r0, r3
 8001a5e:	0c05      	lsrs	r5, r0, #16
 8001a60:	4445      	add	r5, r8
 8001a62:	4377      	muls	r7, r6
 8001a64:	42a9      	cmp	r1, r5
 8001a66:	d903      	bls.n	8001a70 <__aeabi_dmul+0x22c>
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0249      	lsls	r1, r1, #9
 8001a6c:	468c      	mov	ip, r1
 8001a6e:	4467      	add	r7, ip
 8001a70:	0c29      	lsrs	r1, r5, #16
 8001a72:	468c      	mov	ip, r1
 8001a74:	0039      	movs	r1, r7
 8001a76:	0400      	lsls	r0, r0, #16
 8001a78:	0c00      	lsrs	r0, r0, #16
 8001a7a:	042d      	lsls	r5, r5, #16
 8001a7c:	182d      	adds	r5, r5, r0
 8001a7e:	4461      	add	r1, ip
 8001a80:	44ab      	add	fp, r5
 8001a82:	9105      	str	r1, [sp, #20]
 8001a84:	4659      	mov	r1, fp
 8001a86:	9104      	str	r1, [sp, #16]
 8001a88:	9901      	ldr	r1, [sp, #4]
 8001a8a:	040f      	lsls	r7, r1, #16
 8001a8c:	0c3f      	lsrs	r7, r7, #16
 8001a8e:	0c08      	lsrs	r0, r1, #16
 8001a90:	0039      	movs	r1, r7
 8001a92:	4351      	muls	r1, r2
 8001a94:	4342      	muls	r2, r0
 8001a96:	4690      	mov	r8, r2
 8001a98:	0002      	movs	r2, r0
 8001a9a:	468c      	mov	ip, r1
 8001a9c:	0c09      	lsrs	r1, r1, #16
 8001a9e:	468b      	mov	fp, r1
 8001aa0:	4362      	muls	r2, r4
 8001aa2:	437c      	muls	r4, r7
 8001aa4:	4444      	add	r4, r8
 8001aa6:	445c      	add	r4, fp
 8001aa8:	45a0      	cmp	r8, r4
 8001aaa:	d903      	bls.n	8001ab4 <__aeabi_dmul+0x270>
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0249      	lsls	r1, r1, #9
 8001ab0:	4688      	mov	r8, r1
 8001ab2:	4442      	add	r2, r8
 8001ab4:	0c21      	lsrs	r1, r4, #16
 8001ab6:	4688      	mov	r8, r1
 8001ab8:	4661      	mov	r1, ip
 8001aba:	0409      	lsls	r1, r1, #16
 8001abc:	0c09      	lsrs	r1, r1, #16
 8001abe:	468c      	mov	ip, r1
 8001ac0:	0039      	movs	r1, r7
 8001ac2:	4359      	muls	r1, r3
 8001ac4:	4343      	muls	r3, r0
 8001ac6:	4370      	muls	r0, r6
 8001ac8:	437e      	muls	r6, r7
 8001aca:	0c0f      	lsrs	r7, r1, #16
 8001acc:	18f6      	adds	r6, r6, r3
 8001ace:	0424      	lsls	r4, r4, #16
 8001ad0:	19be      	adds	r6, r7, r6
 8001ad2:	4464      	add	r4, ip
 8001ad4:	4442      	add	r2, r8
 8001ad6:	468c      	mov	ip, r1
 8001ad8:	42b3      	cmp	r3, r6
 8001ada:	d903      	bls.n	8001ae4 <__aeabi_dmul+0x2a0>
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	4440      	add	r0, r8
 8001ae4:	9b02      	ldr	r3, [sp, #8]
 8001ae6:	4661      	mov	r1, ip
 8001ae8:	4698      	mov	r8, r3
 8001aea:	9b04      	ldr	r3, [sp, #16]
 8001aec:	0437      	lsls	r7, r6, #16
 8001aee:	4443      	add	r3, r8
 8001af0:	469b      	mov	fp, r3
 8001af2:	45ab      	cmp	fp, r5
 8001af4:	41ad      	sbcs	r5, r5
 8001af6:	426b      	negs	r3, r5
 8001af8:	040d      	lsls	r5, r1, #16
 8001afa:	9905      	ldr	r1, [sp, #20]
 8001afc:	0c2d      	lsrs	r5, r5, #16
 8001afe:	468c      	mov	ip, r1
 8001b00:	197f      	adds	r7, r7, r5
 8001b02:	4467      	add	r7, ip
 8001b04:	18fd      	adds	r5, r7, r3
 8001b06:	46a8      	mov	r8, r5
 8001b08:	465d      	mov	r5, fp
 8001b0a:	192d      	adds	r5, r5, r4
 8001b0c:	42a5      	cmp	r5, r4
 8001b0e:	41a4      	sbcs	r4, r4
 8001b10:	4693      	mov	fp, r2
 8001b12:	4264      	negs	r4, r4
 8001b14:	46a4      	mov	ip, r4
 8001b16:	44c3      	add	fp, r8
 8001b18:	44dc      	add	ip, fp
 8001b1a:	428f      	cmp	r7, r1
 8001b1c:	41bf      	sbcs	r7, r7
 8001b1e:	4598      	cmp	r8, r3
 8001b20:	419b      	sbcs	r3, r3
 8001b22:	4593      	cmp	fp, r2
 8001b24:	4192      	sbcs	r2, r2
 8001b26:	45a4      	cmp	ip, r4
 8001b28:	41a4      	sbcs	r4, r4
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	427f      	negs	r7, r7
 8001b2e:	431f      	orrs	r7, r3
 8001b30:	0c36      	lsrs	r6, r6, #16
 8001b32:	4252      	negs	r2, r2
 8001b34:	4264      	negs	r4, r4
 8001b36:	19bf      	adds	r7, r7, r6
 8001b38:	4322      	orrs	r2, r4
 8001b3a:	18bf      	adds	r7, r7, r2
 8001b3c:	4662      	mov	r2, ip
 8001b3e:	1838      	adds	r0, r7, r0
 8001b40:	0243      	lsls	r3, r0, #9
 8001b42:	0dd2      	lsrs	r2, r2, #23
 8001b44:	9903      	ldr	r1, [sp, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	026a      	lsls	r2, r5, #9
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	1e50      	subs	r0, r2, #1
 8001b4e:	4182      	sbcs	r2, r0
 8001b50:	4661      	mov	r1, ip
 8001b52:	0ded      	lsrs	r5, r5, #23
 8001b54:	432a      	orrs	r2, r5
 8001b56:	024e      	lsls	r6, r1, #9
 8001b58:	4332      	orrs	r2, r6
 8001b5a:	01d9      	lsls	r1, r3, #7
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dmul+0x31c>
 8001b5e:	e0b3      	b.n	8001cc8 <__aeabi_dmul+0x484>
 8001b60:	2601      	movs	r6, #1
 8001b62:	0850      	lsrs	r0, r2, #1
 8001b64:	4032      	ands	r2, r6
 8001b66:	4302      	orrs	r2, r0
 8001b68:	07de      	lsls	r6, r3, #31
 8001b6a:	4332      	orrs	r2, r6
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	4c22      	ldr	r4, [pc, #136]	; (8001bf8 <__aeabi_dmul+0x3b4>)
 8001b70:	4454      	add	r4, sl
 8001b72:	2c00      	cmp	r4, #0
 8001b74:	dd62      	ble.n	8001c3c <__aeabi_dmul+0x3f8>
 8001b76:	0751      	lsls	r1, r2, #29
 8001b78:	d009      	beq.n	8001b8e <__aeabi_dmul+0x34a>
 8001b7a:	200f      	movs	r0, #15
 8001b7c:	4010      	ands	r0, r2
 8001b7e:	2804      	cmp	r0, #4
 8001b80:	d005      	beq.n	8001b8e <__aeabi_dmul+0x34a>
 8001b82:	1d10      	adds	r0, r2, #4
 8001b84:	4290      	cmp	r0, r2
 8001b86:	4192      	sbcs	r2, r2
 8001b88:	4252      	negs	r2, r2
 8001b8a:	189b      	adds	r3, r3, r2
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	01d9      	lsls	r1, r3, #7
 8001b90:	d504      	bpl.n	8001b9c <__aeabi_dmul+0x358>
 8001b92:	2480      	movs	r4, #128	; 0x80
 8001b94:	4819      	ldr	r0, [pc, #100]	; (8001bfc <__aeabi_dmul+0x3b8>)
 8001b96:	00e4      	lsls	r4, r4, #3
 8001b98:	4003      	ands	r3, r0
 8001b9a:	4454      	add	r4, sl
 8001b9c:	4818      	ldr	r0, [pc, #96]	; (8001c00 <__aeabi_dmul+0x3bc>)
 8001b9e:	4284      	cmp	r4, r0
 8001ba0:	dd00      	ble.n	8001ba4 <__aeabi_dmul+0x360>
 8001ba2:	e727      	b.n	80019f4 <__aeabi_dmul+0x1b0>
 8001ba4:	075e      	lsls	r6, r3, #29
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	08d2      	lsrs	r2, r2, #3
 8001baa:	0b1f      	lsrs	r7, r3, #12
 8001bac:	0563      	lsls	r3, r4, #21
 8001bae:	4316      	orrs	r6, r2
 8001bb0:	0d5b      	lsrs	r3, r3, #21
 8001bb2:	e6b2      	b.n	800191a <__aeabi_dmul+0xd6>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4699      	mov	r9, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	2704      	movs	r7, #4
 8001bbc:	2600      	movs	r6, #0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	e664      	b.n	800188c <__aeabi_dmul+0x48>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	9701      	str	r7, [sp, #4]
 8001bc6:	4681      	mov	r9, r0
 8001bc8:	270c      	movs	r7, #12
 8001bca:	469b      	mov	fp, r3
 8001bcc:	e65e      	b.n	800188c <__aeabi_dmul+0x48>
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	4317      	orrs	r7, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	e676      	b.n	80018c6 <__aeabi_dmul+0x82>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	2003      	movs	r0, #3
 8001bdc:	431f      	orrs	r7, r3
 8001bde:	4643      	mov	r3, r8
 8001be0:	e671      	b.n	80018c6 <__aeabi_dmul+0x82>
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	000007ff 	.word	0x000007ff
 8001be8:	fffffc01 	.word	0xfffffc01
 8001bec:	0800c1e8 	.word	0x0800c1e8
 8001bf0:	800fffff 	.word	0x800fffff
 8001bf4:	fffffc0d 	.word	0xfffffc0d
 8001bf8:	000003ff 	.word	0x000003ff
 8001bfc:	feffffff 	.word	0xfeffffff
 8001c00:	000007fe 	.word	0x000007fe
 8001c04:	2300      	movs	r3, #0
 8001c06:	2780      	movs	r7, #128	; 0x80
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	033f      	lsls	r7, r7, #12
 8001c0c:	2600      	movs	r6, #0
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001c10:	e683      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	0032      	movs	r2, r6
 8001c16:	46a4      	mov	ip, r4
 8001c18:	4658      	mov	r0, fp
 8001c1a:	e670      	b.n	80018fe <__aeabi_dmul+0xba>
 8001c1c:	46ac      	mov	ip, r5
 8001c1e:	e66e      	b.n	80018fe <__aeabi_dmul+0xba>
 8001c20:	2780      	movs	r7, #128	; 0x80
 8001c22:	9901      	ldr	r1, [sp, #4]
 8001c24:	033f      	lsls	r7, r7, #12
 8001c26:	4239      	tst	r1, r7
 8001c28:	d02d      	beq.n	8001c86 <__aeabi_dmul+0x442>
 8001c2a:	423b      	tst	r3, r7
 8001c2c:	d12b      	bne.n	8001c86 <__aeabi_dmul+0x442>
 8001c2e:	431f      	orrs	r7, r3
 8001c30:	033f      	lsls	r7, r7, #12
 8001c32:	0b3f      	lsrs	r7, r7, #12
 8001c34:	9500      	str	r5, [sp, #0]
 8001c36:	0016      	movs	r6, r2
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001c3a:	e66e      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c3c:	2501      	movs	r5, #1
 8001c3e:	1b2d      	subs	r5, r5, r4
 8001c40:	2d38      	cmp	r5, #56	; 0x38
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dmul+0x402>
 8001c44:	e666      	b.n	8001914 <__aeabi_dmul+0xd0>
 8001c46:	2d1f      	cmp	r5, #31
 8001c48:	dc40      	bgt.n	8001ccc <__aeabi_dmul+0x488>
 8001c4a:	4835      	ldr	r0, [pc, #212]	; (8001d20 <__aeabi_dmul+0x4dc>)
 8001c4c:	001c      	movs	r4, r3
 8001c4e:	4450      	add	r0, sl
 8001c50:	0016      	movs	r6, r2
 8001c52:	4082      	lsls	r2, r0
 8001c54:	4084      	lsls	r4, r0
 8001c56:	40ee      	lsrs	r6, r5
 8001c58:	1e50      	subs	r0, r2, #1
 8001c5a:	4182      	sbcs	r2, r0
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	4314      	orrs	r4, r2
 8001c60:	40eb      	lsrs	r3, r5
 8001c62:	0762      	lsls	r2, r4, #29
 8001c64:	d009      	beq.n	8001c7a <__aeabi_dmul+0x436>
 8001c66:	220f      	movs	r2, #15
 8001c68:	4022      	ands	r2, r4
 8001c6a:	2a04      	cmp	r2, #4
 8001c6c:	d005      	beq.n	8001c7a <__aeabi_dmul+0x436>
 8001c6e:	0022      	movs	r2, r4
 8001c70:	1d14      	adds	r4, r2, #4
 8001c72:	4294      	cmp	r4, r2
 8001c74:	4180      	sbcs	r0, r0
 8001c76:	4240      	negs	r0, r0
 8001c78:	181b      	adds	r3, r3, r0
 8001c7a:	021a      	lsls	r2, r3, #8
 8001c7c:	d53e      	bpl.n	8001cfc <__aeabi_dmul+0x4b8>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	2700      	movs	r7, #0
 8001c82:	2600      	movs	r6, #0
 8001c84:	e649      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c86:	2780      	movs	r7, #128	; 0x80
 8001c88:	9b01      	ldr	r3, [sp, #4]
 8001c8a:	033f      	lsls	r7, r7, #12
 8001c8c:	431f      	orrs	r7, r3
 8001c8e:	033f      	lsls	r7, r7, #12
 8001c90:	0b3f      	lsrs	r7, r7, #12
 8001c92:	9400      	str	r4, [sp, #0]
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001c96:	e640      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	465a      	mov	r2, fp
 8001c9c:	3b28      	subs	r3, #40	; 0x28
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	2600      	movs	r6, #0
 8001ca2:	9201      	str	r2, [sp, #4]
 8001ca4:	e66d      	b.n	8001982 <__aeabi_dmul+0x13e>
 8001ca6:	4658      	mov	r0, fp
 8001ca8:	f000 fd1a 	bl	80026e0 <__clzsi2>
 8001cac:	3020      	adds	r0, #32
 8001cae:	e657      	b.n	8001960 <__aeabi_dmul+0x11c>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	4652      	mov	r2, sl
 8001cb4:	3b28      	subs	r3, #40	; 0x28
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	e693      	b.n	80019e6 <__aeabi_dmul+0x1a2>
 8001cbe:	4650      	mov	r0, sl
 8001cc0:	f000 fd0e 	bl	80026e0 <__clzsi2>
 8001cc4:	3020      	adds	r0, #32
 8001cc6:	e67b      	b.n	80019c0 <__aeabi_dmul+0x17c>
 8001cc8:	46ca      	mov	sl, r9
 8001cca:	e750      	b.n	8001b6e <__aeabi_dmul+0x32a>
 8001ccc:	201f      	movs	r0, #31
 8001cce:	001e      	movs	r6, r3
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	1b04      	subs	r4, r0, r4
 8001cd4:	40e6      	lsrs	r6, r4
 8001cd6:	2d20      	cmp	r5, #32
 8001cd8:	d003      	beq.n	8001ce2 <__aeabi_dmul+0x49e>
 8001cda:	4c12      	ldr	r4, [pc, #72]	; (8001d24 <__aeabi_dmul+0x4e0>)
 8001cdc:	4454      	add	r4, sl
 8001cde:	40a3      	lsls	r3, r4
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	1e50      	subs	r0, r2, #1
 8001ce4:	4182      	sbcs	r2, r0
 8001ce6:	4332      	orrs	r2, r6
 8001ce8:	2607      	movs	r6, #7
 8001cea:	2700      	movs	r7, #0
 8001cec:	4016      	ands	r6, r2
 8001cee:	d009      	beq.n	8001d04 <__aeabi_dmul+0x4c0>
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	4010      	ands	r0, r2
 8001cf6:	0014      	movs	r4, r2
 8001cf8:	2804      	cmp	r0, #4
 8001cfa:	d1b9      	bne.n	8001c70 <__aeabi_dmul+0x42c>
 8001cfc:	0022      	movs	r2, r4
 8001cfe:	075e      	lsls	r6, r3, #29
 8001d00:	025b      	lsls	r3, r3, #9
 8001d02:	0b1f      	lsrs	r7, r3, #12
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	4316      	orrs	r6, r2
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e606      	b.n	800191a <__aeabi_dmul+0xd6>
 8001d0c:	2780      	movs	r7, #128	; 0x80
 8001d0e:	033f      	lsls	r7, r7, #12
 8001d10:	431f      	orrs	r7, r3
 8001d12:	033f      	lsls	r7, r7, #12
 8001d14:	0b3f      	lsrs	r7, r7, #12
 8001d16:	0016      	movs	r6, r2
 8001d18:	4b00      	ldr	r3, [pc, #0]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001d1a:	e5fe      	b.n	800191a <__aeabi_dmul+0xd6>
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	0000041e 	.word	0x0000041e
 8001d24:	0000043e 	.word	0x0000043e

08001d28 <__aeabi_dsub>:
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	4657      	mov	r7, sl
 8001d2c:	464e      	mov	r6, r9
 8001d2e:	4645      	mov	r5, r8
 8001d30:	46de      	mov	lr, fp
 8001d32:	000c      	movs	r4, r1
 8001d34:	0309      	lsls	r1, r1, #12
 8001d36:	b5e0      	push	{r5, r6, r7, lr}
 8001d38:	0a49      	lsrs	r1, r1, #9
 8001d3a:	0f46      	lsrs	r6, r0, #29
 8001d3c:	005f      	lsls	r7, r3, #1
 8001d3e:	4331      	orrs	r1, r6
 8001d40:	031e      	lsls	r6, r3, #12
 8001d42:	0fdb      	lsrs	r3, r3, #31
 8001d44:	0a76      	lsrs	r6, r6, #9
 8001d46:	469b      	mov	fp, r3
 8001d48:	0f53      	lsrs	r3, r2, #29
 8001d4a:	4333      	orrs	r3, r6
 8001d4c:	4ec8      	ldr	r6, [pc, #800]	; (8002070 <__aeabi_dsub+0x348>)
 8001d4e:	0065      	lsls	r5, r4, #1
 8001d50:	00c0      	lsls	r0, r0, #3
 8001d52:	0fe4      	lsrs	r4, r4, #31
 8001d54:	00d2      	lsls	r2, r2, #3
 8001d56:	0d6d      	lsrs	r5, r5, #21
 8001d58:	46a2      	mov	sl, r4
 8001d5a:	4681      	mov	r9, r0
 8001d5c:	0d7f      	lsrs	r7, r7, #21
 8001d5e:	469c      	mov	ip, r3
 8001d60:	4690      	mov	r8, r2
 8001d62:	42b7      	cmp	r7, r6
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x40>
 8001d66:	e0b9      	b.n	8001edc <__aeabi_dsub+0x1b4>
 8001d68:	465b      	mov	r3, fp
 8001d6a:	2601      	movs	r6, #1
 8001d6c:	4073      	eors	r3, r6
 8001d6e:	469b      	mov	fp, r3
 8001d70:	1bee      	subs	r6, r5, r7
 8001d72:	45a3      	cmp	fp, r4
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x50>
 8001d76:	e083      	b.n	8001e80 <__aeabi_dsub+0x158>
 8001d78:	2e00      	cmp	r6, #0
 8001d7a:	dd63      	ble.n	8001e44 <__aeabi_dsub+0x11c>
 8001d7c:	2f00      	cmp	r7, #0
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x5a>
 8001d80:	e0b1      	b.n	8001ee6 <__aeabi_dsub+0x1be>
 8001d82:	4663      	mov	r3, ip
 8001d84:	4313      	orrs	r3, r2
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x62>
 8001d88:	e123      	b.n	8001fd2 <__aeabi_dsub+0x2aa>
 8001d8a:	1e73      	subs	r3, r6, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x6a>
 8001d90:	e1ba      	b.n	8002108 <__aeabi_dsub+0x3e0>
 8001d92:	1a86      	subs	r6, r0, r2
 8001d94:	4663      	mov	r3, ip
 8001d96:	42b0      	cmp	r0, r6
 8001d98:	4180      	sbcs	r0, r0
 8001d9a:	2501      	movs	r5, #1
 8001d9c:	1ac9      	subs	r1, r1, r3
 8001d9e:	4240      	negs	r0, r0
 8001da0:	1a09      	subs	r1, r1, r0
 8001da2:	020b      	lsls	r3, r1, #8
 8001da4:	d400      	bmi.n	8001da8 <__aeabi_dsub+0x80>
 8001da6:	e147      	b.n	8002038 <__aeabi_dsub+0x310>
 8001da8:	0249      	lsls	r1, r1, #9
 8001daa:	0a4b      	lsrs	r3, r1, #9
 8001dac:	4698      	mov	r8, r3
 8001dae:	4643      	mov	r3, r8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x8e>
 8001db4:	e189      	b.n	80020ca <__aeabi_dsub+0x3a2>
 8001db6:	4640      	mov	r0, r8
 8001db8:	f000 fc92 	bl	80026e0 <__clzsi2>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	2b1f      	cmp	r3, #31
 8001dc2:	dd00      	ble.n	8001dc6 <__aeabi_dsub+0x9e>
 8001dc4:	e17c      	b.n	80020c0 <__aeabi_dsub+0x398>
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	0030      	movs	r0, r6
 8001dca:	1ad2      	subs	r2, r2, r3
 8001dcc:	4641      	mov	r1, r8
 8001dce:	40d0      	lsrs	r0, r2
 8001dd0:	4099      	lsls	r1, r3
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	409e      	lsls	r6, r3
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	429d      	cmp	r5, r3
 8001dda:	dd00      	ble.n	8001dde <__aeabi_dsub+0xb6>
 8001ddc:	e16a      	b.n	80020b4 <__aeabi_dsub+0x38c>
 8001dde:	1b5d      	subs	r5, r3, r5
 8001de0:	1c6b      	adds	r3, r5, #1
 8001de2:	2b1f      	cmp	r3, #31
 8001de4:	dd00      	ble.n	8001de8 <__aeabi_dsub+0xc0>
 8001de6:	e194      	b.n	8002112 <__aeabi_dsub+0x3ea>
 8001de8:	2120      	movs	r1, #32
 8001dea:	0010      	movs	r0, r2
 8001dec:	0035      	movs	r5, r6
 8001dee:	1ac9      	subs	r1, r1, r3
 8001df0:	408e      	lsls	r6, r1
 8001df2:	40da      	lsrs	r2, r3
 8001df4:	4088      	lsls	r0, r1
 8001df6:	40dd      	lsrs	r5, r3
 8001df8:	1e71      	subs	r1, r6, #1
 8001dfa:	418e      	sbcs	r6, r1
 8001dfc:	0011      	movs	r1, r2
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4328      	orrs	r0, r5
 8001e02:	2500      	movs	r5, #0
 8001e04:	4306      	orrs	r6, r0
 8001e06:	4032      	ands	r2, r6
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d009      	beq.n	8001e20 <__aeabi_dsub+0xf8>
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	4033      	ands	r3, r6
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d005      	beq.n	8001e20 <__aeabi_dsub+0xf8>
 8001e14:	1d33      	adds	r3, r6, #4
 8001e16:	42b3      	cmp	r3, r6
 8001e18:	41b6      	sbcs	r6, r6
 8001e1a:	4276      	negs	r6, r6
 8001e1c:	1989      	adds	r1, r1, r6
 8001e1e:	001e      	movs	r6, r3
 8001e20:	020b      	lsls	r3, r1, #8
 8001e22:	d400      	bmi.n	8001e26 <__aeabi_dsub+0xfe>
 8001e24:	e23d      	b.n	80022a2 <__aeabi_dsub+0x57a>
 8001e26:	1c6a      	adds	r2, r5, #1
 8001e28:	4b91      	ldr	r3, [pc, #580]	; (8002070 <__aeabi_dsub+0x348>)
 8001e2a:	0555      	lsls	r5, r2, #21
 8001e2c:	0d6d      	lsrs	r5, r5, #21
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x10c>
 8001e32:	e119      	b.n	8002068 <__aeabi_dsub+0x340>
 8001e34:	4a8f      	ldr	r2, [pc, #572]	; (8002074 <__aeabi_dsub+0x34c>)
 8001e36:	08f6      	lsrs	r6, r6, #3
 8001e38:	400a      	ands	r2, r1
 8001e3a:	0757      	lsls	r7, r2, #29
 8001e3c:	0252      	lsls	r2, r2, #9
 8001e3e:	4337      	orrs	r7, r6
 8001e40:	0b12      	lsrs	r2, r2, #12
 8001e42:	e09b      	b.n	8001f7c <__aeabi_dsub+0x254>
 8001e44:	2e00      	cmp	r6, #0
 8001e46:	d000      	beq.n	8001e4a <__aeabi_dsub+0x122>
 8001e48:	e0c5      	b.n	8001fd6 <__aeabi_dsub+0x2ae>
 8001e4a:	1c6e      	adds	r6, r5, #1
 8001e4c:	0576      	lsls	r6, r6, #21
 8001e4e:	0d76      	lsrs	r6, r6, #21
 8001e50:	2e01      	cmp	r6, #1
 8001e52:	dc00      	bgt.n	8001e56 <__aeabi_dsub+0x12e>
 8001e54:	e148      	b.n	80020e8 <__aeabi_dsub+0x3c0>
 8001e56:	4667      	mov	r7, ip
 8001e58:	1a86      	subs	r6, r0, r2
 8001e5a:	1bcb      	subs	r3, r1, r7
 8001e5c:	42b0      	cmp	r0, r6
 8001e5e:	41bf      	sbcs	r7, r7
 8001e60:	427f      	negs	r7, r7
 8001e62:	46b8      	mov	r8, r7
 8001e64:	001f      	movs	r7, r3
 8001e66:	4643      	mov	r3, r8
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	003b      	movs	r3, r7
 8001e6c:	46b8      	mov	r8, r7
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d500      	bpl.n	8001e74 <__aeabi_dsub+0x14c>
 8001e72:	e15f      	b.n	8002134 <__aeabi_dsub+0x40c>
 8001e74:	4337      	orrs	r7, r6
 8001e76:	d19a      	bne.n	8001dae <__aeabi_dsub+0x86>
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	e079      	b.n	8001f74 <__aeabi_dsub+0x24c>
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dsub+0x15e>
 8001e84:	e0fa      	b.n	800207c <__aeabi_dsub+0x354>
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x164>
 8001e8a:	e08d      	b.n	8001fa8 <__aeabi_dsub+0x280>
 8001e8c:	4b78      	ldr	r3, [pc, #480]	; (8002070 <__aeabi_dsub+0x348>)
 8001e8e:	429d      	cmp	r5, r3
 8001e90:	d067      	beq.n	8001f62 <__aeabi_dsub+0x23a>
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	4667      	mov	r7, ip
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	431f      	orrs	r7, r3
 8001e9a:	46bc      	mov	ip, r7
 8001e9c:	2e38      	cmp	r6, #56	; 0x38
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_dsub+0x17a>
 8001ea0:	e152      	b.n	8002148 <__aeabi_dsub+0x420>
 8001ea2:	4663      	mov	r3, ip
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	4193      	sbcs	r3, r2
 8001eaa:	181e      	adds	r6, r3, r0
 8001eac:	4286      	cmp	r6, r0
 8001eae:	4180      	sbcs	r0, r0
 8001eb0:	4240      	negs	r0, r0
 8001eb2:	1809      	adds	r1, r1, r0
 8001eb4:	020b      	lsls	r3, r1, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x192>
 8001eb8:	e0be      	b.n	8002038 <__aeabi_dsub+0x310>
 8001eba:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <__aeabi_dsub+0x348>)
 8001ebc:	3501      	adds	r5, #1
 8001ebe:	429d      	cmp	r5, r3
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x19c>
 8001ec2:	e0d2      	b.n	800206a <__aeabi_dsub+0x342>
 8001ec4:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <__aeabi_dsub+0x34c>)
 8001ec6:	0873      	lsrs	r3, r6, #1
 8001ec8:	400a      	ands	r2, r1
 8001eca:	2101      	movs	r1, #1
 8001ecc:	400e      	ands	r6, r1
 8001ece:	431e      	orrs	r6, r3
 8001ed0:	0851      	lsrs	r1, r2, #1
 8001ed2:	07d3      	lsls	r3, r2, #31
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	431e      	orrs	r6, r3
 8001ed8:	4032      	ands	r2, r6
 8001eda:	e795      	b.n	8001e08 <__aeabi_dsub+0xe0>
 8001edc:	001e      	movs	r6, r3
 8001ede:	4316      	orrs	r6, r2
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x1bc>
 8001ee2:	e745      	b.n	8001d70 <__aeabi_dsub+0x48>
 8001ee4:	e740      	b.n	8001d68 <__aeabi_dsub+0x40>
 8001ee6:	4b62      	ldr	r3, [pc, #392]	; (8002070 <__aeabi_dsub+0x348>)
 8001ee8:	429d      	cmp	r5, r3
 8001eea:	d03a      	beq.n	8001f62 <__aeabi_dsub+0x23a>
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	4667      	mov	r7, ip
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	431f      	orrs	r7, r3
 8001ef4:	46bc      	mov	ip, r7
 8001ef6:	2e38      	cmp	r6, #56	; 0x38
 8001ef8:	dd00      	ble.n	8001efc <__aeabi_dsub+0x1d4>
 8001efa:	e0eb      	b.n	80020d4 <__aeabi_dsub+0x3ac>
 8001efc:	2e1f      	cmp	r6, #31
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_dsub+0x1da>
 8001f00:	e13a      	b.n	8002178 <__aeabi_dsub+0x450>
 8001f02:	0033      	movs	r3, r6
 8001f04:	4667      	mov	r7, ip
 8001f06:	3b20      	subs	r3, #32
 8001f08:	40df      	lsrs	r7, r3
 8001f0a:	003b      	movs	r3, r7
 8001f0c:	2e20      	cmp	r6, #32
 8001f0e:	d005      	beq.n	8001f1c <__aeabi_dsub+0x1f4>
 8001f10:	2740      	movs	r7, #64	; 0x40
 8001f12:	1bbf      	subs	r7, r7, r6
 8001f14:	4666      	mov	r6, ip
 8001f16:	40be      	lsls	r6, r7
 8001f18:	4332      	orrs	r2, r6
 8001f1a:	4690      	mov	r8, r2
 8001f1c:	4646      	mov	r6, r8
 8001f1e:	1e72      	subs	r2, r6, #1
 8001f20:	4196      	sbcs	r6, r2
 8001f22:	4333      	orrs	r3, r6
 8001f24:	e0da      	b.n	80020dc <__aeabi_dsub+0x3b4>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x204>
 8001f2a:	e214      	b.n	8002356 <__aeabi_dsub+0x62e>
 8001f2c:	4663      	mov	r3, ip
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x20c>
 8001f32:	e168      	b.n	8002206 <__aeabi_dsub+0x4de>
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	074e      	lsls	r6, r1, #29
 8001f38:	08c0      	lsrs	r0, r0, #3
 8001f3a:	08c9      	lsrs	r1, r1, #3
 8001f3c:	031b      	lsls	r3, r3, #12
 8001f3e:	4306      	orrs	r6, r0
 8001f40:	4219      	tst	r1, r3
 8001f42:	d008      	beq.n	8001f56 <__aeabi_dsub+0x22e>
 8001f44:	4660      	mov	r0, ip
 8001f46:	08c0      	lsrs	r0, r0, #3
 8001f48:	4218      	tst	r0, r3
 8001f4a:	d104      	bne.n	8001f56 <__aeabi_dsub+0x22e>
 8001f4c:	4663      	mov	r3, ip
 8001f4e:	0001      	movs	r1, r0
 8001f50:	08d2      	lsrs	r2, r2, #3
 8001f52:	075e      	lsls	r6, r3, #29
 8001f54:	4316      	orrs	r6, r2
 8001f56:	00f3      	lsls	r3, r6, #3
 8001f58:	4699      	mov	r9, r3
 8001f5a:	00c9      	lsls	r1, r1, #3
 8001f5c:	0f72      	lsrs	r2, r6, #29
 8001f5e:	4d44      	ldr	r5, [pc, #272]	; (8002070 <__aeabi_dsub+0x348>)
 8001f60:	4311      	orrs	r1, r2
 8001f62:	464b      	mov	r3, r9
 8001f64:	08de      	lsrs	r6, r3, #3
 8001f66:	4b42      	ldr	r3, [pc, #264]	; (8002070 <__aeabi_dsub+0x348>)
 8001f68:	074f      	lsls	r7, r1, #29
 8001f6a:	4337      	orrs	r7, r6
 8001f6c:	08ca      	lsrs	r2, r1, #3
 8001f6e:	429d      	cmp	r5, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x24c>
 8001f72:	e06e      	b.n	8002052 <__aeabi_dsub+0x32a>
 8001f74:	0312      	lsls	r2, r2, #12
 8001f76:	056d      	lsls	r5, r5, #21
 8001f78:	0b12      	lsrs	r2, r2, #12
 8001f7a:	0d6d      	lsrs	r5, r5, #21
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	0312      	lsls	r2, r2, #12
 8001f80:	0b13      	lsrs	r3, r2, #12
 8001f82:	0d0a      	lsrs	r2, r1, #20
 8001f84:	0512      	lsls	r2, r2, #20
 8001f86:	431a      	orrs	r2, r3
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <__aeabi_dsub+0x350>)
 8001f8a:	052d      	lsls	r5, r5, #20
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	432b      	orrs	r3, r5
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	07e4      	lsls	r4, r4, #31
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	4323      	orrs	r3, r4
 8001f98:	0038      	movs	r0, r7
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	bc3c      	pop	{r2, r3, r4, r5}
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	46a2      	mov	sl, r4
 8001fa4:	46ab      	mov	fp, r5
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa8:	4663      	mov	r3, ip
 8001faa:	4313      	orrs	r3, r2
 8001fac:	d011      	beq.n	8001fd2 <__aeabi_dsub+0x2aa>
 8001fae:	1e73      	subs	r3, r6, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_dsub+0x28e>
 8001fb4:	e107      	b.n	80021c6 <__aeabi_dsub+0x49e>
 8001fb6:	1886      	adds	r6, r0, r2
 8001fb8:	4286      	cmp	r6, r0
 8001fba:	4180      	sbcs	r0, r0
 8001fbc:	4461      	add	r1, ip
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	1809      	adds	r1, r1, r0
 8001fc2:	2501      	movs	r5, #1
 8001fc4:	020b      	lsls	r3, r1, #8
 8001fc6:	d537      	bpl.n	8002038 <__aeabi_dsub+0x310>
 8001fc8:	2502      	movs	r5, #2
 8001fca:	e77b      	b.n	8001ec4 <__aeabi_dsub+0x19c>
 8001fcc:	003e      	movs	r6, r7
 8001fce:	4661      	mov	r1, ip
 8001fd0:	4691      	mov	r9, r2
 8001fd2:	0035      	movs	r5, r6
 8001fd4:	e7c5      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8001fd6:	465c      	mov	r4, fp
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x2b6>
 8001fdc:	e0e1      	b.n	80021a2 <__aeabi_dsub+0x47a>
 8001fde:	000b      	movs	r3, r1
 8001fe0:	4303      	orrs	r3, r0
 8001fe2:	d0f3      	beq.n	8001fcc <__aeabi_dsub+0x2a4>
 8001fe4:	1c73      	adds	r3, r6, #1
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x2c2>
 8001fe8:	e1ac      	b.n	8002344 <__aeabi_dsub+0x61c>
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <__aeabi_dsub+0x348>)
 8001fec:	429f      	cmp	r7, r3
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x2ca>
 8001ff0:	e13a      	b.n	8002268 <__aeabi_dsub+0x540>
 8001ff2:	43f3      	mvns	r3, r6
 8001ff4:	2b38      	cmp	r3, #56	; 0x38
 8001ff6:	dd00      	ble.n	8001ffa <__aeabi_dsub+0x2d2>
 8001ff8:	e16f      	b.n	80022da <__aeabi_dsub+0x5b2>
 8001ffa:	2b1f      	cmp	r3, #31
 8001ffc:	dd00      	ble.n	8002000 <__aeabi_dsub+0x2d8>
 8001ffe:	e18c      	b.n	800231a <__aeabi_dsub+0x5f2>
 8002000:	2520      	movs	r5, #32
 8002002:	000e      	movs	r6, r1
 8002004:	1aed      	subs	r5, r5, r3
 8002006:	40ae      	lsls	r6, r5
 8002008:	46b0      	mov	r8, r6
 800200a:	0006      	movs	r6, r0
 800200c:	46aa      	mov	sl, r5
 800200e:	40de      	lsrs	r6, r3
 8002010:	4645      	mov	r5, r8
 8002012:	4335      	orrs	r5, r6
 8002014:	002e      	movs	r6, r5
 8002016:	4655      	mov	r5, sl
 8002018:	40d9      	lsrs	r1, r3
 800201a:	40a8      	lsls	r0, r5
 800201c:	4663      	mov	r3, ip
 800201e:	1e45      	subs	r5, r0, #1
 8002020:	41a8      	sbcs	r0, r5
 8002022:	1a5b      	subs	r3, r3, r1
 8002024:	469c      	mov	ip, r3
 8002026:	4330      	orrs	r0, r6
 8002028:	1a16      	subs	r6, r2, r0
 800202a:	42b2      	cmp	r2, r6
 800202c:	4192      	sbcs	r2, r2
 800202e:	4663      	mov	r3, ip
 8002030:	4252      	negs	r2, r2
 8002032:	1a99      	subs	r1, r3, r2
 8002034:	003d      	movs	r5, r7
 8002036:	e6b4      	b.n	8001da2 <__aeabi_dsub+0x7a>
 8002038:	2207      	movs	r2, #7
 800203a:	4032      	ands	r2, r6
 800203c:	2a00      	cmp	r2, #0
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x31a>
 8002040:	e6e4      	b.n	8001e0c <__aeabi_dsub+0xe4>
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <__aeabi_dsub+0x348>)
 8002044:	08f6      	lsrs	r6, r6, #3
 8002046:	074f      	lsls	r7, r1, #29
 8002048:	4337      	orrs	r7, r6
 800204a:	08ca      	lsrs	r2, r1, #3
 800204c:	429d      	cmp	r5, r3
 800204e:	d000      	beq.n	8002052 <__aeabi_dsub+0x32a>
 8002050:	e790      	b.n	8001f74 <__aeabi_dsub+0x24c>
 8002052:	003b      	movs	r3, r7
 8002054:	4313      	orrs	r3, r2
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x332>
 8002058:	e1a6      	b.n	80023a8 <__aeabi_dsub+0x680>
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	031b      	lsls	r3, r3, #12
 800205e:	431a      	orrs	r2, r3
 8002060:	0312      	lsls	r2, r2, #12
 8002062:	0b12      	lsrs	r2, r2, #12
 8002064:	4d02      	ldr	r5, [pc, #8]	; (8002070 <__aeabi_dsub+0x348>)
 8002066:	e789      	b.n	8001f7c <__aeabi_dsub+0x254>
 8002068:	0015      	movs	r5, r2
 800206a:	2200      	movs	r2, #0
 800206c:	2700      	movs	r7, #0
 800206e:	e785      	b.n	8001f7c <__aeabi_dsub+0x254>
 8002070:	000007ff 	.word	0x000007ff
 8002074:	ff7fffff 	.word	0xff7fffff
 8002078:	800fffff 	.word	0x800fffff
 800207c:	2e00      	cmp	r6, #0
 800207e:	d000      	beq.n	8002082 <__aeabi_dsub+0x35a>
 8002080:	e0c7      	b.n	8002212 <__aeabi_dsub+0x4ea>
 8002082:	1c6b      	adds	r3, r5, #1
 8002084:	055e      	lsls	r6, r3, #21
 8002086:	0d76      	lsrs	r6, r6, #21
 8002088:	2e01      	cmp	r6, #1
 800208a:	dc00      	bgt.n	800208e <__aeabi_dsub+0x366>
 800208c:	e0f0      	b.n	8002270 <__aeabi_dsub+0x548>
 800208e:	4dc8      	ldr	r5, [pc, #800]	; (80023b0 <__aeabi_dsub+0x688>)
 8002090:	42ab      	cmp	r3, r5
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x36e>
 8002094:	e0b9      	b.n	800220a <__aeabi_dsub+0x4e2>
 8002096:	1885      	adds	r5, r0, r2
 8002098:	000a      	movs	r2, r1
 800209a:	4285      	cmp	r5, r0
 800209c:	4189      	sbcs	r1, r1
 800209e:	4462      	add	r2, ip
 80020a0:	4249      	negs	r1, r1
 80020a2:	1851      	adds	r1, r2, r1
 80020a4:	2207      	movs	r2, #7
 80020a6:	07ce      	lsls	r6, r1, #31
 80020a8:	086d      	lsrs	r5, r5, #1
 80020aa:	432e      	orrs	r6, r5
 80020ac:	0849      	lsrs	r1, r1, #1
 80020ae:	4032      	ands	r2, r6
 80020b0:	001d      	movs	r5, r3
 80020b2:	e6a9      	b.n	8001e08 <__aeabi_dsub+0xe0>
 80020b4:	49bf      	ldr	r1, [pc, #764]	; (80023b4 <__aeabi_dsub+0x68c>)
 80020b6:	1aed      	subs	r5, r5, r3
 80020b8:	4011      	ands	r1, r2
 80020ba:	2207      	movs	r2, #7
 80020bc:	4032      	ands	r2, r6
 80020be:	e6a3      	b.n	8001e08 <__aeabi_dsub+0xe0>
 80020c0:	0032      	movs	r2, r6
 80020c2:	3828      	subs	r0, #40	; 0x28
 80020c4:	4082      	lsls	r2, r0
 80020c6:	2600      	movs	r6, #0
 80020c8:	e686      	b.n	8001dd8 <__aeabi_dsub+0xb0>
 80020ca:	0030      	movs	r0, r6
 80020cc:	f000 fb08 	bl	80026e0 <__clzsi2>
 80020d0:	3020      	adds	r0, #32
 80020d2:	e673      	b.n	8001dbc <__aeabi_dsub+0x94>
 80020d4:	4663      	mov	r3, ip
 80020d6:	4313      	orrs	r3, r2
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	4193      	sbcs	r3, r2
 80020dc:	1ac6      	subs	r6, r0, r3
 80020de:	42b0      	cmp	r0, r6
 80020e0:	4180      	sbcs	r0, r0
 80020e2:	4240      	negs	r0, r0
 80020e4:	1a09      	subs	r1, r1, r0
 80020e6:	e65c      	b.n	8001da2 <__aeabi_dsub+0x7a>
 80020e8:	000e      	movs	r6, r1
 80020ea:	4667      	mov	r7, ip
 80020ec:	4306      	orrs	r6, r0
 80020ee:	4317      	orrs	r7, r2
 80020f0:	2d00      	cmp	r5, #0
 80020f2:	d15e      	bne.n	80021b2 <__aeabi_dsub+0x48a>
 80020f4:	2e00      	cmp	r6, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x3d2>
 80020f8:	e0f3      	b.n	80022e2 <__aeabi_dsub+0x5ba>
 80020fa:	2f00      	cmp	r7, #0
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x3d8>
 80020fe:	e11e      	b.n	800233e <__aeabi_dsub+0x616>
 8002100:	465c      	mov	r4, fp
 8002102:	4661      	mov	r1, ip
 8002104:	4691      	mov	r9, r2
 8002106:	e72c      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8002108:	4fa9      	ldr	r7, [pc, #676]	; (80023b0 <__aeabi_dsub+0x688>)
 800210a:	42be      	cmp	r6, r7
 800210c:	d07b      	beq.n	8002206 <__aeabi_dsub+0x4de>
 800210e:	001e      	movs	r6, r3
 8002110:	e6f1      	b.n	8001ef6 <__aeabi_dsub+0x1ce>
 8002112:	0010      	movs	r0, r2
 8002114:	3d1f      	subs	r5, #31
 8002116:	40e8      	lsrs	r0, r5
 8002118:	2b20      	cmp	r3, #32
 800211a:	d003      	beq.n	8002124 <__aeabi_dsub+0x3fc>
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	1acb      	subs	r3, r1, r3
 8002120:	409a      	lsls	r2, r3
 8002122:	4316      	orrs	r6, r2
 8002124:	1e73      	subs	r3, r6, #1
 8002126:	419e      	sbcs	r6, r3
 8002128:	2207      	movs	r2, #7
 800212a:	4306      	orrs	r6, r0
 800212c:	4032      	ands	r2, r6
 800212e:	2100      	movs	r1, #0
 8002130:	2500      	movs	r5, #0
 8002132:	e783      	b.n	800203c <__aeabi_dsub+0x314>
 8002134:	1a16      	subs	r6, r2, r0
 8002136:	4663      	mov	r3, ip
 8002138:	42b2      	cmp	r2, r6
 800213a:	4180      	sbcs	r0, r0
 800213c:	1a59      	subs	r1, r3, r1
 800213e:	4240      	negs	r0, r0
 8002140:	1a0b      	subs	r3, r1, r0
 8002142:	4698      	mov	r8, r3
 8002144:	465c      	mov	r4, fp
 8002146:	e632      	b.n	8001dae <__aeabi_dsub+0x86>
 8002148:	2e1f      	cmp	r6, #31
 800214a:	dd00      	ble.n	800214e <__aeabi_dsub+0x426>
 800214c:	e0ab      	b.n	80022a6 <__aeabi_dsub+0x57e>
 800214e:	2720      	movs	r7, #32
 8002150:	1bbb      	subs	r3, r7, r6
 8002152:	469a      	mov	sl, r3
 8002154:	4663      	mov	r3, ip
 8002156:	4657      	mov	r7, sl
 8002158:	40bb      	lsls	r3, r7
 800215a:	4699      	mov	r9, r3
 800215c:	0013      	movs	r3, r2
 800215e:	464f      	mov	r7, r9
 8002160:	40f3      	lsrs	r3, r6
 8002162:	431f      	orrs	r7, r3
 8002164:	003b      	movs	r3, r7
 8002166:	4657      	mov	r7, sl
 8002168:	40ba      	lsls	r2, r7
 800216a:	1e57      	subs	r7, r2, #1
 800216c:	41ba      	sbcs	r2, r7
 800216e:	4313      	orrs	r3, r2
 8002170:	4662      	mov	r2, ip
 8002172:	40f2      	lsrs	r2, r6
 8002174:	1889      	adds	r1, r1, r2
 8002176:	e698      	b.n	8001eaa <__aeabi_dsub+0x182>
 8002178:	2720      	movs	r7, #32
 800217a:	1bbb      	subs	r3, r7, r6
 800217c:	469a      	mov	sl, r3
 800217e:	4663      	mov	r3, ip
 8002180:	4657      	mov	r7, sl
 8002182:	40bb      	lsls	r3, r7
 8002184:	4699      	mov	r9, r3
 8002186:	0013      	movs	r3, r2
 8002188:	464f      	mov	r7, r9
 800218a:	40f3      	lsrs	r3, r6
 800218c:	431f      	orrs	r7, r3
 800218e:	003b      	movs	r3, r7
 8002190:	4657      	mov	r7, sl
 8002192:	40ba      	lsls	r2, r7
 8002194:	1e57      	subs	r7, r2, #1
 8002196:	41ba      	sbcs	r2, r7
 8002198:	4313      	orrs	r3, r2
 800219a:	4662      	mov	r2, ip
 800219c:	40f2      	lsrs	r2, r6
 800219e:	1a89      	subs	r1, r1, r2
 80021a0:	e79c      	b.n	80020dc <__aeabi_dsub+0x3b4>
 80021a2:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <__aeabi_dsub+0x688>)
 80021a4:	429f      	cmp	r7, r3
 80021a6:	d05f      	beq.n	8002268 <__aeabi_dsub+0x540>
 80021a8:	2580      	movs	r5, #128	; 0x80
 80021aa:	042d      	lsls	r5, r5, #16
 80021ac:	4273      	negs	r3, r6
 80021ae:	4329      	orrs	r1, r5
 80021b0:	e720      	b.n	8001ff4 <__aeabi_dsub+0x2cc>
 80021b2:	2e00      	cmp	r6, #0
 80021b4:	d10c      	bne.n	80021d0 <__aeabi_dsub+0x4a8>
 80021b6:	2f00      	cmp	r7, #0
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x494>
 80021ba:	e0d0      	b.n	800235e <__aeabi_dsub+0x636>
 80021bc:	465c      	mov	r4, fp
 80021be:	4661      	mov	r1, ip
 80021c0:	4691      	mov	r9, r2
 80021c2:	4d7b      	ldr	r5, [pc, #492]	; (80023b0 <__aeabi_dsub+0x688>)
 80021c4:	e6cd      	b.n	8001f62 <__aeabi_dsub+0x23a>
 80021c6:	4f7a      	ldr	r7, [pc, #488]	; (80023b0 <__aeabi_dsub+0x688>)
 80021c8:	42be      	cmp	r6, r7
 80021ca:	d01c      	beq.n	8002206 <__aeabi_dsub+0x4de>
 80021cc:	001e      	movs	r6, r3
 80021ce:	e665      	b.n	8001e9c <__aeabi_dsub+0x174>
 80021d0:	2f00      	cmp	r7, #0
 80021d2:	d018      	beq.n	8002206 <__aeabi_dsub+0x4de>
 80021d4:	08c0      	lsrs	r0, r0, #3
 80021d6:	074e      	lsls	r6, r1, #29
 80021d8:	4306      	orrs	r6, r0
 80021da:	2080      	movs	r0, #128	; 0x80
 80021dc:	08c9      	lsrs	r1, r1, #3
 80021de:	0300      	lsls	r0, r0, #12
 80021e0:	4201      	tst	r1, r0
 80021e2:	d008      	beq.n	80021f6 <__aeabi_dsub+0x4ce>
 80021e4:	4663      	mov	r3, ip
 80021e6:	08dc      	lsrs	r4, r3, #3
 80021e8:	4204      	tst	r4, r0
 80021ea:	d104      	bne.n	80021f6 <__aeabi_dsub+0x4ce>
 80021ec:	0021      	movs	r1, r4
 80021ee:	46da      	mov	sl, fp
 80021f0:	08d2      	lsrs	r2, r2, #3
 80021f2:	075e      	lsls	r6, r3, #29
 80021f4:	4316      	orrs	r6, r2
 80021f6:	00f3      	lsls	r3, r6, #3
 80021f8:	4699      	mov	r9, r3
 80021fa:	2401      	movs	r4, #1
 80021fc:	4653      	mov	r3, sl
 80021fe:	00c9      	lsls	r1, r1, #3
 8002200:	0f72      	lsrs	r2, r6, #29
 8002202:	4311      	orrs	r1, r2
 8002204:	401c      	ands	r4, r3
 8002206:	4d6a      	ldr	r5, [pc, #424]	; (80023b0 <__aeabi_dsub+0x688>)
 8002208:	e6ab      	b.n	8001f62 <__aeabi_dsub+0x23a>
 800220a:	001d      	movs	r5, r3
 800220c:	2200      	movs	r2, #0
 800220e:	2700      	movs	r7, #0
 8002210:	e6b4      	b.n	8001f7c <__aeabi_dsub+0x254>
 8002212:	2d00      	cmp	r5, #0
 8002214:	d159      	bne.n	80022ca <__aeabi_dsub+0x5a2>
 8002216:	000b      	movs	r3, r1
 8002218:	4303      	orrs	r3, r0
 800221a:	d100      	bne.n	800221e <__aeabi_dsub+0x4f6>
 800221c:	e6d6      	b.n	8001fcc <__aeabi_dsub+0x2a4>
 800221e:	1c73      	adds	r3, r6, #1
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x4fc>
 8002222:	e0b2      	b.n	800238a <__aeabi_dsub+0x662>
 8002224:	4b62      	ldr	r3, [pc, #392]	; (80023b0 <__aeabi_dsub+0x688>)
 8002226:	429f      	cmp	r7, r3
 8002228:	d01e      	beq.n	8002268 <__aeabi_dsub+0x540>
 800222a:	43f3      	mvns	r3, r6
 800222c:	2b38      	cmp	r3, #56	; 0x38
 800222e:	dc6f      	bgt.n	8002310 <__aeabi_dsub+0x5e8>
 8002230:	2b1f      	cmp	r3, #31
 8002232:	dd00      	ble.n	8002236 <__aeabi_dsub+0x50e>
 8002234:	e097      	b.n	8002366 <__aeabi_dsub+0x63e>
 8002236:	2520      	movs	r5, #32
 8002238:	000e      	movs	r6, r1
 800223a:	1aed      	subs	r5, r5, r3
 800223c:	40ae      	lsls	r6, r5
 800223e:	46b0      	mov	r8, r6
 8002240:	0006      	movs	r6, r0
 8002242:	46aa      	mov	sl, r5
 8002244:	40de      	lsrs	r6, r3
 8002246:	4645      	mov	r5, r8
 8002248:	4335      	orrs	r5, r6
 800224a:	002e      	movs	r6, r5
 800224c:	4655      	mov	r5, sl
 800224e:	40a8      	lsls	r0, r5
 8002250:	40d9      	lsrs	r1, r3
 8002252:	1e45      	subs	r5, r0, #1
 8002254:	41a8      	sbcs	r0, r5
 8002256:	448c      	add	ip, r1
 8002258:	4306      	orrs	r6, r0
 800225a:	18b6      	adds	r6, r6, r2
 800225c:	4296      	cmp	r6, r2
 800225e:	4192      	sbcs	r2, r2
 8002260:	4251      	negs	r1, r2
 8002262:	4461      	add	r1, ip
 8002264:	003d      	movs	r5, r7
 8002266:	e625      	b.n	8001eb4 <__aeabi_dsub+0x18c>
 8002268:	003d      	movs	r5, r7
 800226a:	4661      	mov	r1, ip
 800226c:	4691      	mov	r9, r2
 800226e:	e678      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8002270:	000b      	movs	r3, r1
 8002272:	4303      	orrs	r3, r0
 8002274:	2d00      	cmp	r5, #0
 8002276:	d000      	beq.n	800227a <__aeabi_dsub+0x552>
 8002278:	e655      	b.n	8001f26 <__aeabi_dsub+0x1fe>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f5      	beq.n	800226a <__aeabi_dsub+0x542>
 800227e:	4663      	mov	r3, ip
 8002280:	4313      	orrs	r3, r2
 8002282:	d100      	bne.n	8002286 <__aeabi_dsub+0x55e>
 8002284:	e66d      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8002286:	1886      	adds	r6, r0, r2
 8002288:	4286      	cmp	r6, r0
 800228a:	4180      	sbcs	r0, r0
 800228c:	4461      	add	r1, ip
 800228e:	4240      	negs	r0, r0
 8002290:	1809      	adds	r1, r1, r0
 8002292:	2200      	movs	r2, #0
 8002294:	020b      	lsls	r3, r1, #8
 8002296:	d400      	bmi.n	800229a <__aeabi_dsub+0x572>
 8002298:	e6d0      	b.n	800203c <__aeabi_dsub+0x314>
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <__aeabi_dsub+0x68c>)
 800229c:	3501      	adds	r5, #1
 800229e:	4019      	ands	r1, r3
 80022a0:	e5b2      	b.n	8001e08 <__aeabi_dsub+0xe0>
 80022a2:	46b1      	mov	r9, r6
 80022a4:	e65d      	b.n	8001f62 <__aeabi_dsub+0x23a>
 80022a6:	0033      	movs	r3, r6
 80022a8:	4667      	mov	r7, ip
 80022aa:	3b20      	subs	r3, #32
 80022ac:	40df      	lsrs	r7, r3
 80022ae:	003b      	movs	r3, r7
 80022b0:	2e20      	cmp	r6, #32
 80022b2:	d005      	beq.n	80022c0 <__aeabi_dsub+0x598>
 80022b4:	2740      	movs	r7, #64	; 0x40
 80022b6:	1bbf      	subs	r7, r7, r6
 80022b8:	4666      	mov	r6, ip
 80022ba:	40be      	lsls	r6, r7
 80022bc:	4332      	orrs	r2, r6
 80022be:	4690      	mov	r8, r2
 80022c0:	4646      	mov	r6, r8
 80022c2:	1e72      	subs	r2, r6, #1
 80022c4:	4196      	sbcs	r6, r2
 80022c6:	4333      	orrs	r3, r6
 80022c8:	e5ef      	b.n	8001eaa <__aeabi_dsub+0x182>
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <__aeabi_dsub+0x688>)
 80022cc:	429f      	cmp	r7, r3
 80022ce:	d0cb      	beq.n	8002268 <__aeabi_dsub+0x540>
 80022d0:	2580      	movs	r5, #128	; 0x80
 80022d2:	042d      	lsls	r5, r5, #16
 80022d4:	4273      	negs	r3, r6
 80022d6:	4329      	orrs	r1, r5
 80022d8:	e7a8      	b.n	800222c <__aeabi_dsub+0x504>
 80022da:	4308      	orrs	r0, r1
 80022dc:	1e41      	subs	r1, r0, #1
 80022de:	4188      	sbcs	r0, r1
 80022e0:	e6a2      	b.n	8002028 <__aeabi_dsub+0x300>
 80022e2:	2f00      	cmp	r7, #0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x5c0>
 80022e6:	e63c      	b.n	8001f62 <__aeabi_dsub+0x23a>
 80022e8:	4663      	mov	r3, ip
 80022ea:	1a86      	subs	r6, r0, r2
 80022ec:	1acf      	subs	r7, r1, r3
 80022ee:	42b0      	cmp	r0, r6
 80022f0:	419b      	sbcs	r3, r3
 80022f2:	425b      	negs	r3, r3
 80022f4:	1afb      	subs	r3, r7, r3
 80022f6:	4698      	mov	r8, r3
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	d54e      	bpl.n	800239a <__aeabi_dsub+0x672>
 80022fc:	1a16      	subs	r6, r2, r0
 80022fe:	4663      	mov	r3, ip
 8002300:	42b2      	cmp	r2, r6
 8002302:	4192      	sbcs	r2, r2
 8002304:	1a59      	subs	r1, r3, r1
 8002306:	4252      	negs	r2, r2
 8002308:	1a89      	subs	r1, r1, r2
 800230a:	465c      	mov	r4, fp
 800230c:	2200      	movs	r2, #0
 800230e:	e57b      	b.n	8001e08 <__aeabi_dsub+0xe0>
 8002310:	4301      	orrs	r1, r0
 8002312:	000e      	movs	r6, r1
 8002314:	1e71      	subs	r1, r6, #1
 8002316:	418e      	sbcs	r6, r1
 8002318:	e79f      	b.n	800225a <__aeabi_dsub+0x532>
 800231a:	001d      	movs	r5, r3
 800231c:	000e      	movs	r6, r1
 800231e:	3d20      	subs	r5, #32
 8002320:	40ee      	lsrs	r6, r5
 8002322:	46b0      	mov	r8, r6
 8002324:	2b20      	cmp	r3, #32
 8002326:	d004      	beq.n	8002332 <__aeabi_dsub+0x60a>
 8002328:	2540      	movs	r5, #64	; 0x40
 800232a:	1aeb      	subs	r3, r5, r3
 800232c:	4099      	lsls	r1, r3
 800232e:	4308      	orrs	r0, r1
 8002330:	4681      	mov	r9, r0
 8002332:	4648      	mov	r0, r9
 8002334:	4643      	mov	r3, r8
 8002336:	1e41      	subs	r1, r0, #1
 8002338:	4188      	sbcs	r0, r1
 800233a:	4318      	orrs	r0, r3
 800233c:	e674      	b.n	8002028 <__aeabi_dsub+0x300>
 800233e:	2200      	movs	r2, #0
 8002340:	2400      	movs	r4, #0
 8002342:	e617      	b.n	8001f74 <__aeabi_dsub+0x24c>
 8002344:	1a16      	subs	r6, r2, r0
 8002346:	4663      	mov	r3, ip
 8002348:	42b2      	cmp	r2, r6
 800234a:	4192      	sbcs	r2, r2
 800234c:	1a59      	subs	r1, r3, r1
 800234e:	4252      	negs	r2, r2
 8002350:	1a89      	subs	r1, r1, r2
 8002352:	003d      	movs	r5, r7
 8002354:	e525      	b.n	8001da2 <__aeabi_dsub+0x7a>
 8002356:	4661      	mov	r1, ip
 8002358:	4691      	mov	r9, r2
 800235a:	4d15      	ldr	r5, [pc, #84]	; (80023b0 <__aeabi_dsub+0x688>)
 800235c:	e601      	b.n	8001f62 <__aeabi_dsub+0x23a>
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	2400      	movs	r4, #0
 8002362:	0312      	lsls	r2, r2, #12
 8002364:	e679      	b.n	800205a <__aeabi_dsub+0x332>
 8002366:	001d      	movs	r5, r3
 8002368:	000e      	movs	r6, r1
 800236a:	3d20      	subs	r5, #32
 800236c:	40ee      	lsrs	r6, r5
 800236e:	46b0      	mov	r8, r6
 8002370:	2b20      	cmp	r3, #32
 8002372:	d004      	beq.n	800237e <__aeabi_dsub+0x656>
 8002374:	2540      	movs	r5, #64	; 0x40
 8002376:	1aeb      	subs	r3, r5, r3
 8002378:	4099      	lsls	r1, r3
 800237a:	4308      	orrs	r0, r1
 800237c:	4681      	mov	r9, r0
 800237e:	464e      	mov	r6, r9
 8002380:	4643      	mov	r3, r8
 8002382:	1e71      	subs	r1, r6, #1
 8002384:	418e      	sbcs	r6, r1
 8002386:	431e      	orrs	r6, r3
 8002388:	e767      	b.n	800225a <__aeabi_dsub+0x532>
 800238a:	1886      	adds	r6, r0, r2
 800238c:	4296      	cmp	r6, r2
 800238e:	419b      	sbcs	r3, r3
 8002390:	4461      	add	r1, ip
 8002392:	425b      	negs	r3, r3
 8002394:	18c9      	adds	r1, r1, r3
 8002396:	003d      	movs	r5, r7
 8002398:	e58c      	b.n	8001eb4 <__aeabi_dsub+0x18c>
 800239a:	4647      	mov	r7, r8
 800239c:	4337      	orrs	r7, r6
 800239e:	d0ce      	beq.n	800233e <__aeabi_dsub+0x616>
 80023a0:	2207      	movs	r2, #7
 80023a2:	4641      	mov	r1, r8
 80023a4:	4032      	ands	r2, r6
 80023a6:	e649      	b.n	800203c <__aeabi_dsub+0x314>
 80023a8:	2700      	movs	r7, #0
 80023aa:	003a      	movs	r2, r7
 80023ac:	e5e6      	b.n	8001f7c <__aeabi_dsub+0x254>
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	000007ff 	.word	0x000007ff
 80023b4:	ff7fffff 	.word	0xff7fffff

080023b8 <__aeabi_dcmpun>:
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	4e0c      	ldr	r6, [pc, #48]	; (80023ec <__aeabi_dcmpun+0x34>)
 80023bc:	030d      	lsls	r5, r1, #12
 80023be:	031c      	lsls	r4, r3, #12
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	0b2d      	lsrs	r5, r5, #12
 80023c6:	0d49      	lsrs	r1, r1, #21
 80023c8:	0b24      	lsrs	r4, r4, #12
 80023ca:	0d5b      	lsrs	r3, r3, #21
 80023cc:	42b1      	cmp	r1, r6
 80023ce:	d008      	beq.n	80023e2 <__aeabi_dcmpun+0x2a>
 80023d0:	4906      	ldr	r1, [pc, #24]	; (80023ec <__aeabi_dcmpun+0x34>)
 80023d2:	2000      	movs	r0, #0
 80023d4:	428b      	cmp	r3, r1
 80023d6:	d103      	bne.n	80023e0 <__aeabi_dcmpun+0x28>
 80023d8:	4314      	orrs	r4, r2
 80023da:	0020      	movs	r0, r4
 80023dc:	1e44      	subs	r4, r0, #1
 80023de:	41a0      	sbcs	r0, r4
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
 80023e2:	4305      	orrs	r5, r0
 80023e4:	2001      	movs	r0, #1
 80023e6:	2d00      	cmp	r5, #0
 80023e8:	d1fa      	bne.n	80023e0 <__aeabi_dcmpun+0x28>
 80023ea:	e7f1      	b.n	80023d0 <__aeabi_dcmpun+0x18>
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__aeabi_d2iz>:
 80023f0:	b530      	push	{r4, r5, lr}
 80023f2:	4d14      	ldr	r5, [pc, #80]	; (8002444 <__aeabi_d2iz+0x54>)
 80023f4:	030a      	lsls	r2, r1, #12
 80023f6:	004b      	lsls	r3, r1, #1
 80023f8:	0b12      	lsrs	r2, r2, #12
 80023fa:	0d5b      	lsrs	r3, r3, #21
 80023fc:	0fc9      	lsrs	r1, r1, #31
 80023fe:	2400      	movs	r4, #0
 8002400:	42ab      	cmp	r3, r5
 8002402:	dd11      	ble.n	8002428 <__aeabi_d2iz+0x38>
 8002404:	4c10      	ldr	r4, [pc, #64]	; (8002448 <__aeabi_d2iz+0x58>)
 8002406:	42a3      	cmp	r3, r4
 8002408:	dc10      	bgt.n	800242c <__aeabi_d2iz+0x3c>
 800240a:	2480      	movs	r4, #128	; 0x80
 800240c:	0364      	lsls	r4, r4, #13
 800240e:	4322      	orrs	r2, r4
 8002410:	4c0e      	ldr	r4, [pc, #56]	; (800244c <__aeabi_d2iz+0x5c>)
 8002412:	1ae4      	subs	r4, r4, r3
 8002414:	2c1f      	cmp	r4, #31
 8002416:	dd0c      	ble.n	8002432 <__aeabi_d2iz+0x42>
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <__aeabi_d2iz+0x60>)
 800241a:	1ac3      	subs	r3, r0, r3
 800241c:	40da      	lsrs	r2, r3
 800241e:	0013      	movs	r3, r2
 8002420:	425c      	negs	r4, r3
 8002422:	2900      	cmp	r1, #0
 8002424:	d100      	bne.n	8002428 <__aeabi_d2iz+0x38>
 8002426:	001c      	movs	r4, r3
 8002428:	0020      	movs	r0, r4
 800242a:	bd30      	pop	{r4, r5, pc}
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <__aeabi_d2iz+0x64>)
 800242e:	18cc      	adds	r4, r1, r3
 8002430:	e7fa      	b.n	8002428 <__aeabi_d2iz+0x38>
 8002432:	4d09      	ldr	r5, [pc, #36]	; (8002458 <__aeabi_d2iz+0x68>)
 8002434:	40e0      	lsrs	r0, r4
 8002436:	46ac      	mov	ip, r5
 8002438:	4463      	add	r3, ip
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	4303      	orrs	r3, r0
 8002440:	e7ee      	b.n	8002420 <__aeabi_d2iz+0x30>
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	000003fe 	.word	0x000003fe
 8002448:	0000041d 	.word	0x0000041d
 800244c:	00000433 	.word	0x00000433
 8002450:	00000413 	.word	0x00000413
 8002454:	7fffffff 	.word	0x7fffffff
 8002458:	fffffbed 	.word	0xfffffbed

0800245c <__aeabi_i2d>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	2800      	cmp	r0, #0
 8002460:	d02d      	beq.n	80024be <__aeabi_i2d+0x62>
 8002462:	17c3      	asrs	r3, r0, #31
 8002464:	18c5      	adds	r5, r0, r3
 8002466:	405d      	eors	r5, r3
 8002468:	0fc4      	lsrs	r4, r0, #31
 800246a:	0028      	movs	r0, r5
 800246c:	f000 f938 	bl	80026e0 <__clzsi2>
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <__aeabi_i2d+0x6c>)
 8002472:	1a1b      	subs	r3, r3, r0
 8002474:	055b      	lsls	r3, r3, #21
 8002476:	0d5b      	lsrs	r3, r3, #21
 8002478:	280a      	cmp	r0, #10
 800247a:	dd15      	ble.n	80024a8 <__aeabi_i2d+0x4c>
 800247c:	380b      	subs	r0, #11
 800247e:	4085      	lsls	r5, r0
 8002480:	2200      	movs	r2, #0
 8002482:	032d      	lsls	r5, r5, #12
 8002484:	0b2d      	lsrs	r5, r5, #12
 8002486:	2100      	movs	r1, #0
 8002488:	0010      	movs	r0, r2
 800248a:	032d      	lsls	r5, r5, #12
 800248c:	0d0a      	lsrs	r2, r1, #20
 800248e:	0b2d      	lsrs	r5, r5, #12
 8002490:	0512      	lsls	r2, r2, #20
 8002492:	432a      	orrs	r2, r5
 8002494:	4d0d      	ldr	r5, [pc, #52]	; (80024cc <__aeabi_i2d+0x70>)
 8002496:	051b      	lsls	r3, r3, #20
 8002498:	402a      	ands	r2, r5
 800249a:	4313      	orrs	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	07e4      	lsls	r4, r4, #31
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	4323      	orrs	r3, r4
 80024a4:	0019      	movs	r1, r3
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	0002      	movs	r2, r0
 80024aa:	0029      	movs	r1, r5
 80024ac:	3215      	adds	r2, #21
 80024ae:	4091      	lsls	r1, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	210b      	movs	r1, #11
 80024b4:	1a08      	subs	r0, r1, r0
 80024b6:	40c5      	lsrs	r5, r0
 80024b8:	032d      	lsls	r5, r5, #12
 80024ba:	0b2d      	lsrs	r5, r5, #12
 80024bc:	e7e3      	b.n	8002486 <__aeabi_i2d+0x2a>
 80024be:	2400      	movs	r4, #0
 80024c0:	2300      	movs	r3, #0
 80024c2:	2500      	movs	r5, #0
 80024c4:	2200      	movs	r2, #0
 80024c6:	e7de      	b.n	8002486 <__aeabi_i2d+0x2a>
 80024c8:	0000041e 	.word	0x0000041e
 80024cc:	800fffff 	.word	0x800fffff

080024d0 <__aeabi_ui2d>:
 80024d0:	b510      	push	{r4, lr}
 80024d2:	1e04      	subs	r4, r0, #0
 80024d4:	d025      	beq.n	8002522 <__aeabi_ui2d+0x52>
 80024d6:	f000 f903 	bl	80026e0 <__clzsi2>
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <__aeabi_ui2d+0x5c>)
 80024dc:	1a1b      	subs	r3, r3, r0
 80024de:	055b      	lsls	r3, r3, #21
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	280a      	cmp	r0, #10
 80024e4:	dd12      	ble.n	800250c <__aeabi_ui2d+0x3c>
 80024e6:	380b      	subs	r0, #11
 80024e8:	4084      	lsls	r4, r0
 80024ea:	2200      	movs	r2, #0
 80024ec:	0324      	lsls	r4, r4, #12
 80024ee:	0b24      	lsrs	r4, r4, #12
 80024f0:	2100      	movs	r1, #0
 80024f2:	0010      	movs	r0, r2
 80024f4:	0324      	lsls	r4, r4, #12
 80024f6:	0d0a      	lsrs	r2, r1, #20
 80024f8:	0b24      	lsrs	r4, r4, #12
 80024fa:	0512      	lsls	r2, r2, #20
 80024fc:	4322      	orrs	r2, r4
 80024fe:	4c0c      	ldr	r4, [pc, #48]	; (8002530 <__aeabi_ui2d+0x60>)
 8002500:	051b      	lsls	r3, r3, #20
 8002502:	4022      	ands	r2, r4
 8002504:	4313      	orrs	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	0859      	lsrs	r1, r3, #1
 800250a:	bd10      	pop	{r4, pc}
 800250c:	0002      	movs	r2, r0
 800250e:	0021      	movs	r1, r4
 8002510:	3215      	adds	r2, #21
 8002512:	4091      	lsls	r1, r2
 8002514:	000a      	movs	r2, r1
 8002516:	210b      	movs	r1, #11
 8002518:	1a08      	subs	r0, r1, r0
 800251a:	40c4      	lsrs	r4, r0
 800251c:	0324      	lsls	r4, r4, #12
 800251e:	0b24      	lsrs	r4, r4, #12
 8002520:	e7e6      	b.n	80024f0 <__aeabi_ui2d+0x20>
 8002522:	2300      	movs	r3, #0
 8002524:	2400      	movs	r4, #0
 8002526:	2200      	movs	r2, #0
 8002528:	e7e2      	b.n	80024f0 <__aeabi_ui2d+0x20>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	0000041e 	.word	0x0000041e
 8002530:	800fffff 	.word	0x800fffff

08002534 <__aeabi_f2d>:
 8002534:	0041      	lsls	r1, r0, #1
 8002536:	0e09      	lsrs	r1, r1, #24
 8002538:	1c4b      	adds	r3, r1, #1
 800253a:	b570      	push	{r4, r5, r6, lr}
 800253c:	b2db      	uxtb	r3, r3
 800253e:	0246      	lsls	r6, r0, #9
 8002540:	0a75      	lsrs	r5, r6, #9
 8002542:	0fc4      	lsrs	r4, r0, #31
 8002544:	2b01      	cmp	r3, #1
 8002546:	dd14      	ble.n	8002572 <__aeabi_f2d+0x3e>
 8002548:	23e0      	movs	r3, #224	; 0xe0
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	076d      	lsls	r5, r5, #29
 800254e:	0b36      	lsrs	r6, r6, #12
 8002550:	18cb      	adds	r3, r1, r3
 8002552:	2100      	movs	r1, #0
 8002554:	0d0a      	lsrs	r2, r1, #20
 8002556:	0028      	movs	r0, r5
 8002558:	0512      	lsls	r2, r2, #20
 800255a:	4d1c      	ldr	r5, [pc, #112]	; (80025cc <__aeabi_f2d+0x98>)
 800255c:	4332      	orrs	r2, r6
 800255e:	055b      	lsls	r3, r3, #21
 8002560:	402a      	ands	r2, r5
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	4313      	orrs	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	07e4      	lsls	r4, r4, #31
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	4323      	orrs	r3, r4
 800256e:	0019      	movs	r1, r3
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	2900      	cmp	r1, #0
 8002574:	d114      	bne.n	80025a0 <__aeabi_f2d+0x6c>
 8002576:	2d00      	cmp	r5, #0
 8002578:	d01e      	beq.n	80025b8 <__aeabi_f2d+0x84>
 800257a:	0028      	movs	r0, r5
 800257c:	f000 f8b0 	bl	80026e0 <__clzsi2>
 8002580:	280a      	cmp	r0, #10
 8002582:	dc1c      	bgt.n	80025be <__aeabi_f2d+0x8a>
 8002584:	230b      	movs	r3, #11
 8002586:	002a      	movs	r2, r5
 8002588:	1a1b      	subs	r3, r3, r0
 800258a:	40da      	lsrs	r2, r3
 800258c:	0003      	movs	r3, r0
 800258e:	3315      	adds	r3, #21
 8002590:	409d      	lsls	r5, r3
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <__aeabi_f2d+0x9c>)
 8002594:	0312      	lsls	r2, r2, #12
 8002596:	1a1b      	subs	r3, r3, r0
 8002598:	055b      	lsls	r3, r3, #21
 800259a:	0b16      	lsrs	r6, r2, #12
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	e7d8      	b.n	8002552 <__aeabi_f2d+0x1e>
 80025a0:	2d00      	cmp	r5, #0
 80025a2:	d006      	beq.n	80025b2 <__aeabi_f2d+0x7e>
 80025a4:	0b32      	lsrs	r2, r6, #12
 80025a6:	2680      	movs	r6, #128	; 0x80
 80025a8:	0336      	lsls	r6, r6, #12
 80025aa:	076d      	lsls	r5, r5, #29
 80025ac:	4316      	orrs	r6, r2
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <__aeabi_f2d+0xa0>)
 80025b0:	e7cf      	b.n	8002552 <__aeabi_f2d+0x1e>
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <__aeabi_f2d+0xa0>)
 80025b4:	2600      	movs	r6, #0
 80025b6:	e7cc      	b.n	8002552 <__aeabi_f2d+0x1e>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2600      	movs	r6, #0
 80025bc:	e7c9      	b.n	8002552 <__aeabi_f2d+0x1e>
 80025be:	0003      	movs	r3, r0
 80025c0:	002a      	movs	r2, r5
 80025c2:	3b0b      	subs	r3, #11
 80025c4:	409a      	lsls	r2, r3
 80025c6:	2500      	movs	r5, #0
 80025c8:	e7e3      	b.n	8002592 <__aeabi_f2d+0x5e>
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	800fffff 	.word	0x800fffff
 80025d0:	00000389 	.word	0x00000389
 80025d4:	000007ff 	.word	0x000007ff

080025d8 <__aeabi_d2f>:
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	004c      	lsls	r4, r1, #1
 80025dc:	0d64      	lsrs	r4, r4, #21
 80025de:	030b      	lsls	r3, r1, #12
 80025e0:	1c62      	adds	r2, r4, #1
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	0f46      	lsrs	r6, r0, #29
 80025e6:	0552      	lsls	r2, r2, #21
 80025e8:	0fc9      	lsrs	r1, r1, #31
 80025ea:	431e      	orrs	r6, r3
 80025ec:	00c5      	lsls	r5, r0, #3
 80025ee:	0d52      	lsrs	r2, r2, #21
 80025f0:	2a01      	cmp	r2, #1
 80025f2:	dd29      	ble.n	8002648 <__aeabi_d2f+0x70>
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <__aeabi_d2f+0xfc>)
 80025f6:	18e7      	adds	r7, r4, r3
 80025f8:	2ffe      	cmp	r7, #254	; 0xfe
 80025fa:	dc1c      	bgt.n	8002636 <__aeabi_d2f+0x5e>
 80025fc:	2f00      	cmp	r7, #0
 80025fe:	dd3b      	ble.n	8002678 <__aeabi_d2f+0xa0>
 8002600:	0180      	lsls	r0, r0, #6
 8002602:	1e43      	subs	r3, r0, #1
 8002604:	4198      	sbcs	r0, r3
 8002606:	2207      	movs	r2, #7
 8002608:	00f3      	lsls	r3, r6, #3
 800260a:	0f6d      	lsrs	r5, r5, #29
 800260c:	4303      	orrs	r3, r0
 800260e:	432b      	orrs	r3, r5
 8002610:	401a      	ands	r2, r3
 8002612:	2a00      	cmp	r2, #0
 8002614:	d004      	beq.n	8002620 <__aeabi_d2f+0x48>
 8002616:	220f      	movs	r2, #15
 8002618:	401a      	ands	r2, r3
 800261a:	2a04      	cmp	r2, #4
 800261c:	d000      	beq.n	8002620 <__aeabi_d2f+0x48>
 800261e:	3304      	adds	r3, #4
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	04d2      	lsls	r2, r2, #19
 8002624:	401a      	ands	r2, r3
 8002626:	d024      	beq.n	8002672 <__aeabi_d2f+0x9a>
 8002628:	3701      	adds	r7, #1
 800262a:	b2fa      	uxtb	r2, r7
 800262c:	2fff      	cmp	r7, #255	; 0xff
 800262e:	d002      	beq.n	8002636 <__aeabi_d2f+0x5e>
 8002630:	019b      	lsls	r3, r3, #6
 8002632:	0a58      	lsrs	r0, r3, #9
 8002634:	e001      	b.n	800263a <__aeabi_d2f+0x62>
 8002636:	22ff      	movs	r2, #255	; 0xff
 8002638:	2000      	movs	r0, #0
 800263a:	0240      	lsls	r0, r0, #9
 800263c:	05d2      	lsls	r2, r2, #23
 800263e:	0a40      	lsrs	r0, r0, #9
 8002640:	07c9      	lsls	r1, r1, #31
 8002642:	4310      	orrs	r0, r2
 8002644:	4308      	orrs	r0, r1
 8002646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002648:	4335      	orrs	r5, r6
 800264a:	2c00      	cmp	r4, #0
 800264c:	d104      	bne.n	8002658 <__aeabi_d2f+0x80>
 800264e:	2d00      	cmp	r5, #0
 8002650:	d10a      	bne.n	8002668 <__aeabi_d2f+0x90>
 8002652:	2200      	movs	r2, #0
 8002654:	2000      	movs	r0, #0
 8002656:	e7f0      	b.n	800263a <__aeabi_d2f+0x62>
 8002658:	2d00      	cmp	r5, #0
 800265a:	d0ec      	beq.n	8002636 <__aeabi_d2f+0x5e>
 800265c:	2080      	movs	r0, #128	; 0x80
 800265e:	03c0      	lsls	r0, r0, #15
 8002660:	4330      	orrs	r0, r6
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	e7e9      	b.n	800263a <__aeabi_d2f+0x62>
 8002666:	2400      	movs	r4, #0
 8002668:	2300      	movs	r3, #0
 800266a:	025b      	lsls	r3, r3, #9
 800266c:	0a58      	lsrs	r0, r3, #9
 800266e:	b2e2      	uxtb	r2, r4
 8002670:	e7e3      	b.n	800263a <__aeabi_d2f+0x62>
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	003c      	movs	r4, r7
 8002676:	e7f8      	b.n	800266a <__aeabi_d2f+0x92>
 8002678:	003b      	movs	r3, r7
 800267a:	3317      	adds	r3, #23
 800267c:	dbf3      	blt.n	8002666 <__aeabi_d2f+0x8e>
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	4333      	orrs	r3, r6
 8002684:	261e      	movs	r6, #30
 8002686:	1bf6      	subs	r6, r6, r7
 8002688:	2e1f      	cmp	r6, #31
 800268a:	dd14      	ble.n	80026b6 <__aeabi_d2f+0xde>
 800268c:	2202      	movs	r2, #2
 800268e:	4252      	negs	r2, r2
 8002690:	1bd7      	subs	r7, r2, r7
 8002692:	001a      	movs	r2, r3
 8002694:	40fa      	lsrs	r2, r7
 8002696:	0017      	movs	r7, r2
 8002698:	2e20      	cmp	r6, #32
 800269a:	d004      	beq.n	80026a6 <__aeabi_d2f+0xce>
 800269c:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <__aeabi_d2f+0x100>)
 800269e:	4694      	mov	ip, r2
 80026a0:	4464      	add	r4, ip
 80026a2:	40a3      	lsls	r3, r4
 80026a4:	431d      	orrs	r5, r3
 80026a6:	002b      	movs	r3, r5
 80026a8:	1e5d      	subs	r5, r3, #1
 80026aa:	41ab      	sbcs	r3, r5
 80026ac:	2207      	movs	r2, #7
 80026ae:	433b      	orrs	r3, r7
 80026b0:	401a      	ands	r2, r3
 80026b2:	2700      	movs	r7, #0
 80026b4:	e7ad      	b.n	8002612 <__aeabi_d2f+0x3a>
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <__aeabi_d2f+0x104>)
 80026b8:	0028      	movs	r0, r5
 80026ba:	18a2      	adds	r2, r4, r2
 80026bc:	4095      	lsls	r5, r2
 80026be:	4093      	lsls	r3, r2
 80026c0:	1e6c      	subs	r4, r5, #1
 80026c2:	41a5      	sbcs	r5, r4
 80026c4:	40f0      	lsrs	r0, r6
 80026c6:	2207      	movs	r2, #7
 80026c8:	432b      	orrs	r3, r5
 80026ca:	4303      	orrs	r3, r0
 80026cc:	401a      	ands	r2, r3
 80026ce:	2700      	movs	r7, #0
 80026d0:	e79f      	b.n	8002612 <__aeabi_d2f+0x3a>
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	fffffc80 	.word	0xfffffc80
 80026d8:	fffffca2 	.word	0xfffffca2
 80026dc:	fffffc82 	.word	0xfffffc82

080026e0 <__clzsi2>:
 80026e0:	211c      	movs	r1, #28
 80026e2:	2301      	movs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	4298      	cmp	r0, r3
 80026e8:	d301      	bcc.n	80026ee <__clzsi2+0xe>
 80026ea:	0c00      	lsrs	r0, r0, #16
 80026ec:	3910      	subs	r1, #16
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	4298      	cmp	r0, r3
 80026f2:	d301      	bcc.n	80026f8 <__clzsi2+0x18>
 80026f4:	0a00      	lsrs	r0, r0, #8
 80026f6:	3908      	subs	r1, #8
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	4298      	cmp	r0, r3
 80026fc:	d301      	bcc.n	8002702 <__clzsi2+0x22>
 80026fe:	0900      	lsrs	r0, r0, #4
 8002700:	3904      	subs	r1, #4
 8002702:	a202      	add	r2, pc, #8	; (adr r2, 800270c <__clzsi2+0x2c>)
 8002704:	5c10      	ldrb	r0, [r2, r0]
 8002706:	1840      	adds	r0, r0, r1
 8002708:	4770      	bx	lr
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	02020304 	.word	0x02020304
 8002710:	01010101 	.word	0x01010101
	...

0800271c <__clzdi2>:
 800271c:	b510      	push	{r4, lr}
 800271e:	2900      	cmp	r1, #0
 8002720:	d103      	bne.n	800272a <__clzdi2+0xe>
 8002722:	f7ff ffdd 	bl	80026e0 <__clzsi2>
 8002726:	3020      	adds	r0, #32
 8002728:	e002      	b.n	8002730 <__clzdi2+0x14>
 800272a:	1c08      	adds	r0, r1, #0
 800272c:	f7ff ffd8 	bl	80026e0 <__clzsi2>
 8002730:	bd10      	pop	{r4, pc}
 8002732:	46c0      	nop			; (mov r8, r8)

08002734 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <cJSON_strdup+0x1c>
    {
        return NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	e019      	b.n	8002784 <cJSON_strdup+0x50>
    }

    length = strlen((const char*)string) + sizeof("");
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	0018      	movs	r0, r3
 8002754:	f7fd fcd8 	bl	8000108 <strlen>
 8002758:	0003      	movs	r3, r0
 800275a:	3301      	adds	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	0010      	movs	r0, r2
 8002766:	4798      	blx	r3
 8002768:	0003      	movs	r3, r0
 800276a:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <cJSON_strdup+0x42>
    {
        return NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	e006      	b.n	8002784 <cJSON_strdup+0x50>
    }
    memcpy(copy, string, length);
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0018      	movs	r0, r3
 800277e:	f007 fb23 	bl	8009dc8 <memcpy>

    return copy;
 8002782:	68bb      	ldr	r3, [r7, #8]
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}

0800278c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2028      	movs	r0, #40	; 0x28
 800279a:	4798      	blx	r3
 800279c:	0003      	movs	r3, r0
 800279e:	60fb      	str	r3, [r7, #12]
    if (node)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <cJSON_New_Item+0x26>
    {
        memset(node, '\0', sizeof(cJSON));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2228      	movs	r2, #40	; 0x28
 80027aa:	2100      	movs	r1, #0
 80027ac:	0018      	movs	r0, r3
 80027ae:	f007 fb14 	bl	8009dda <memset>
    }

    return node;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}

080027bc <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80027c8:	e038      	b.n	800283c <cJSON_Delete+0x80>
    {
        next = item->next;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	d108      	bne.n	80027ee <cJSON_Delete+0x32>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff ffe7 	bl	80027bc <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d109      	bne.n	800280e <cJSON_Delete+0x52>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <cJSON_Delete+0x90>)
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	0018      	movs	r0, r3
 800280c:	4790      	blx	r2
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4013      	ands	r3, r2
 8002818:	d109      	bne.n	800282e <cJSON_Delete+0x72>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <cJSON_Delete+0x90>)
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	0018      	movs	r0, r3
 800282c:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <cJSON_Delete+0x90>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	0010      	movs	r0, r2
 8002836:	4798      	blx	r3
        item = next;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1c3      	bne.n	80027ca <cJSON_Delete+0xe>
    }
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	20000000 	.word	0x20000000

08002850 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8002854:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <ensure+0x20>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <ensure+0x24>
    {
        return NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	e088      	b.n	8002992 <ensure+0x136>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <ensure+0x3c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	d301      	bcc.n	8002898 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	e07c      	b.n	8002992 <ensure+0x136>
    }

    if (needed > INT_MAX)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	da01      	bge.n	80028a2 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	e077      	b.n	8002992 <ensure+0x136>
    }

    needed += p->offset + 1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	18d3      	adds	r3, r2, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d805      	bhi.n	80028c4 <ensure+0x68>
    {
        return p->buffer + p->offset;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	18d3      	adds	r3, r2, r3
 80028c2:	e066      	b.n	8002992 <ensure+0x136>
    }

    if (p->noalloc) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <ensure+0x74>
        return NULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e060      	b.n	8002992 <ensure+0x136>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4a32      	ldr	r2, [pc, #200]	; (800299c <ensure+0x140>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d907      	bls.n	80028e8 <ensure+0x8c>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	db02      	blt.n	80028e4 <ensure+0x88>
        {
            newsize = INT_MAX;
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <ensure+0x144>)
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	e004      	b.n	80028ee <ensure+0x92>
        }
        else
        {
            return NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e054      	b.n	8002992 <ensure+0x136>
        }
    }
    else
    {
        newsize = needed * 2;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	0018      	movs	r0, r3
 8002902:	4790      	blx	r2
 8002904:	0003      	movs	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]
        if (newbuffer == NULL)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d137      	bne.n	800297e <ensure+0x122>
        {
            p->hooks.deallocate(p->buffer);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0018      	movs	r0, r3
 8002918:	4790      	blx	r2
            p->length = 0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

            return NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	e033      	b.n	8002992 <ensure+0x136>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	0010      	movs	r0, r2
 8002932:	4798      	blx	r3
 8002934:	0003      	movs	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]
        if (!newbuffer)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <ensure+0xfe>
        {
            p->hooks.deallocate(p->buffer);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0018      	movs	r0, r3
 8002948:	4790      	blx	r2
            p->length = 0;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

            return NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	e01b      	b.n	8002992 <ensure+0x136>
        }
        if (newbuffer)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <ensure+0x116>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0018      	movs	r0, r3
 800296e:	f007 fa2b 	bl	8009dc8 <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0018      	movs	r0, r3
 800297c:	4790      	blx	r2
    }
    p->length = newsize;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	18d3      	adds	r3, r2, r3
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	3fffffff 	.word	0x3fffffff
 80029a0:	7fffffff 	.word	0x7fffffff

080029a4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <update_offset+0x3c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	18d3      	adds	r3, r2, r3
 80029c8:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689c      	ldr	r4, [r3, #8]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fd fb99 	bl	8000108 <strlen>
 80029d6:	0003      	movs	r3, r0
 80029d8:	18e2      	adds	r2, r4, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	e000      	b.n	80029e2 <update_offset+0x3e>
        return;
 80029e0:	46c0      	nop			; (mov r8, r8)
}
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b005      	add	sp, #20
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b092      	sub	sp, #72	; 0x48
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69dc      	ldr	r4, [r3, #28]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
 80029fe:	637c      	str	r4, [r7, #52]	; 0x34
    int length = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8002a08:	2314      	movs	r3, #20
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	231a      	movs	r3, #26
 8002a10:	001a      	movs	r2, r3
 8002a12:	2100      	movs	r1, #0
 8002a14:	f007 f9e1 	bl	8009dda <memset>
    unsigned char decimal_point = get_decimal_point();
 8002a18:	232f      	movs	r3, #47	; 0x2f
 8002a1a:	18fc      	adds	r4, r7, r3
 8002a1c:	f7ff ff18 	bl	8002850 <get_decimal_point>
 8002a20:	0003      	movs	r3, r0
 8002a22:	7023      	strb	r3, [r4, #0]
    double test = 0.0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	2400      	movs	r4, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	60fc      	str	r4, [r7, #12]

    if (output_buffer == NULL)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <print_number+0x4e>
    {
        return false;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e088      	b.n	8002b48 <print_number+0x160>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 8002a36:	2200      	movs	r2, #0
 8002a38:	2300      	movs	r3, #0
 8002a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a3e:	f7fe ff01 	bl	8001844 <__aeabi_dmul>
 8002a42:	0003      	movs	r3, r0
 8002a44:	000c      	movs	r4, r1
 8002a46:	0018      	movs	r0, r3
 8002a48:	0021      	movs	r1, r4
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f7fd fbff 	bl	8000250 <__aeabi_dcmpeq>
 8002a52:	1e03      	subs	r3, r0, #0
 8002a54:	d109      	bne.n	8002a6a <print_number+0x82>
    {
        length = sprintf((char*)number_buffer, "null");
 8002a56:	2314      	movs	r3, #20
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	; (8002b50 <print_number+0x168>)
 8002a5c:	6811      	ldr	r1, [r2, #0]
 8002a5e:	6019      	str	r1, [r3, #0]
 8002a60:	7912      	ldrb	r2, [r2, #4]
 8002a62:	711a      	strb	r2, [r3, #4]
 8002a64:	2304      	movs	r3, #4
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
 8002a68:	e029      	b.n	8002abe <print_number+0xd6>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002a6e:	4939      	ldr	r1, [pc, #228]	; (8002b54 <print_number+0x16c>)
 8002a70:	2514      	movs	r5, #20
 8002a72:	1978      	adds	r0, r7, r5
 8002a74:	001a      	movs	r2, r3
 8002a76:	0023      	movs	r3, r4
 8002a78:	f007 fa7c 	bl	8009f74 <siprintf>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
 8002a80:	2308      	movs	r3, #8
 8002a82:	18fa      	adds	r2, r7, r3
 8002a84:	4934      	ldr	r1, [pc, #208]	; (8002b58 <print_number+0x170>)
 8002a86:	197b      	adds	r3, r7, r5
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f007 fa93 	bl	8009fb4 <siscanf>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d109      	bne.n	8002aa8 <print_number+0xc0>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	68fc      	ldr	r4, [r7, #12]
 8002a98:	001a      	movs	r2, r3
 8002a9a:	0023      	movs	r3, r4
 8002a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aa0:	f7fd fbd6 	bl	8000250 <__aeabi_dcmpeq>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d10a      	bne.n	8002abe <print_number+0xd6>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002aac:	492b      	ldr	r1, [pc, #172]	; (8002b5c <print_number+0x174>)
 8002aae:	2214      	movs	r2, #20
 8002ab0:	18b8      	adds	r0, r7, r2
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	0023      	movs	r3, r4
 8002ab6:	f007 fa5d 	bl	8009f74 <siprintf>
 8002aba:	0003      	movs	r3, r0
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8002abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db02      	blt.n	8002aca <print_number+0xe2>
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	2b19      	cmp	r3, #25
 8002ac8:	dd01      	ble.n	8002ace <print_number+0xe6>
    {
        return false;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e03c      	b.n	8002b48 <print_number+0x160>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8002ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7ff fec0 	bl	800285c <ensure>
 8002adc:	0003      	movs	r3, r0
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <print_number+0x102>
    {
        return false;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e02e      	b.n	8002b48 <print_number+0x160>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	643b      	str	r3, [r7, #64]	; 0x40
 8002aee:	e01b      	b.n	8002b28 <print_number+0x140>
    {
        if (number_buffer[i] == decimal_point)
 8002af0:	2314      	movs	r3, #20
 8002af2:	18fa      	adds	r2, r7, r3
 8002af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af6:	18d3      	adds	r3, r2, r3
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	222f      	movs	r2, #47	; 0x2f
 8002afc:	18ba      	adds	r2, r7, r2
 8002afe:	7812      	ldrb	r2, [r2, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d105      	bne.n	8002b10 <print_number+0x128>
        {
            output_pointer[i] = '.';
 8002b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b08:	18d3      	adds	r3, r2, r3
 8002b0a:	222e      	movs	r2, #46	; 0x2e
 8002b0c:	701a      	strb	r2, [r3, #0]
            continue;
 8002b0e:	e008      	b.n	8002b22 <print_number+0x13a>
        }

        output_pointer[i] = number_buffer[i];
 8002b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b14:	18d3      	adds	r3, r2, r3
 8002b16:	2214      	movs	r2, #20
 8002b18:	18b9      	adds	r1, r7, r2
 8002b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b1c:	188a      	adds	r2, r1, r2
 8002b1e:	7812      	ldrb	r2, [r2, #0]
 8002b20:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8002b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b24:	3301      	adds	r3, #1
 8002b26:	643b      	str	r3, [r7, #64]	; 0x40
 8002b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3df      	bcc.n	8002af0 <print_number+0x108>
    }
    output_pointer[i] = '\0';
 8002b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b34:	18d3      	adds	r3, r2, r3
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b40:	18d2      	adds	r2, r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	609a      	str	r2, [r3, #8]

    return true;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b012      	add	sp, #72	; 0x48
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b50:	0800c0b4 	.word	0x0800c0b4
 8002b54:	0800c0bc 	.word	0x0800c0bc
 8002b58:	0800c0c4 	.word	0x0800c0c4
 8002b5c:	0800c0c8 	.word	0x0800c0c8

08002b60 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <print_string_ptr+0x28>
    {
        return false;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e0dd      	b.n	8002d44 <print_string_ptr+0x1e4>
    }

    /* empty string */
    if (input == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d115      	bne.n	8002bba <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2103      	movs	r1, #3
 8002b92:	0018      	movs	r0, r3
 8002b94:	f7ff fe62 	bl	800285c <ensure>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <print_string_ptr+0x46>
        {
            return false;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e0ce      	b.n	8002d44 <print_string_ptr+0x1e4>
        }
        strcpy((char*)output, "\"\"");
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <print_string_ptr+0x1ec>)
 8002baa:	0010      	movs	r0, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	2303      	movs	r3, #3
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	f007 f909 	bl	8009dc8 <memcpy>

        return true;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0c4      	b.n	8002d44 <print_string_ptr+0x1e4>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e01c      	b.n	8002bfa <print_string_ptr+0x9a>
    {
        switch (*input_pointer)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b0d      	cmp	r3, #13
 8002bc6:	dc05      	bgt.n	8002bd4 <print_string_ptr+0x74>
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	da07      	bge.n	8002bdc <print_string_ptr+0x7c>
 8002bcc:	3b08      	subs	r3, #8
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d808      	bhi.n	8002be4 <print_string_ptr+0x84>
 8002bd2:	e003      	b.n	8002bdc <print_string_ptr+0x7c>
 8002bd4:	2b22      	cmp	r3, #34	; 0x22
 8002bd6:	d001      	beq.n	8002bdc <print_string_ptr+0x7c>
 8002bd8:	2b5c      	cmp	r3, #92	; 0x5c
 8002bda:	d103      	bne.n	8002be4 <print_string_ptr+0x84>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
                break;
 8002be2:	e007      	b.n	8002bf4 <print_string_ptr+0x94>
            default:
                if (*input_pointer < 32)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b1f      	cmp	r3, #31
 8002bea:	d802      	bhi.n	8002bf2 <print_string_ptr+0x92>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3305      	adds	r3, #5
 8002bf0:	617b      	str	r3, [r7, #20]
                }
                break;
 8002bf2:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1de      	bne.n	8002bc0 <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	001a      	movs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1cda      	adds	r2, r3, #3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	0011      	movs	r1, r2
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff fe1f 	bl	800285c <ensure>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <print_string_ptr+0xcc>
    {
        return false;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e08b      	b.n	8002d44 <print_string_ptr+0x1e4>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d117      	bne.n	8002c62 <print_string_ptr+0x102>
    {
        output[0] = '\"';
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2222      	movs	r2, #34	; 0x22
 8002c36:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f007 f8c1 	bl	8009dc8 <memcpy>
        output[output_length + 1] = '\"';
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	18d3      	adds	r3, r2, r3
 8002c4e:	2222      	movs	r2, #34	; 0x22
 8002c50:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3302      	adds	r3, #2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	18d3      	adds	r3, r2, r3
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]

        return true;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e070      	b.n	8002d44 <print_string_ptr+0x1e4>
    }

    output[0] = '\"';
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2222      	movs	r2, #34	; 0x22
 8002c66:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e056      	b.n	8002d22 <print_string_ptr+0x1c2>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b1f      	cmp	r3, #31
 8002c7a:	d90c      	bls.n	8002c96 <print_string_ptr+0x136>
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b22      	cmp	r3, #34	; 0x22
 8002c82:	d008      	beq.n	8002c96 <print_string_ptr+0x136>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b5c      	cmp	r3, #92	; 0x5c
 8002c8a:	d004      	beq.n	8002c96 <print_string_ptr+0x136>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e03f      	b.n	8002d16 <print_string_ptr+0x1b6>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	61ba      	str	r2, [r7, #24]
 8002c9c:	225c      	movs	r2, #92	; 0x5c
 8002c9e:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d01a      	beq.n	8002cde <print_string_ptr+0x17e>
 8002ca8:	dc06      	bgt.n	8002cb8 <print_string_ptr+0x158>
 8002caa:	2b09      	cmp	r3, #9
 8002cac:	d023      	beq.n	8002cf6 <print_string_ptr+0x196>
 8002cae:	2b0a      	cmp	r3, #10
 8002cb0:	d019      	beq.n	8002ce6 <print_string_ptr+0x186>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d00f      	beq.n	8002cd6 <print_string_ptr+0x176>
 8002cb6:	e022      	b.n	8002cfe <print_string_ptr+0x19e>
 8002cb8:	2b22      	cmp	r3, #34	; 0x22
 8002cba:	d008      	beq.n	8002cce <print_string_ptr+0x16e>
 8002cbc:	2b5c      	cmp	r3, #92	; 0x5c
 8002cbe:	d002      	beq.n	8002cc6 <print_string_ptr+0x166>
 8002cc0:	2b0d      	cmp	r3, #13
 8002cc2:	d014      	beq.n	8002cee <print_string_ptr+0x18e>
 8002cc4:	e01b      	b.n	8002cfe <print_string_ptr+0x19e>
            {
                case '\\':
                    *output_pointer = '\\';
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	225c      	movs	r2, #92	; 0x5c
 8002cca:	701a      	strb	r2, [r3, #0]
                    break;
 8002ccc:	e023      	b.n	8002d16 <print_string_ptr+0x1b6>
                case '\"':
                    *output_pointer = '\"';
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2222      	movs	r2, #34	; 0x22
 8002cd2:	701a      	strb	r2, [r3, #0]
                    break;
 8002cd4:	e01f      	b.n	8002d16 <print_string_ptr+0x1b6>
                case '\b':
                    *output_pointer = 'b';
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2262      	movs	r2, #98	; 0x62
 8002cda:	701a      	strb	r2, [r3, #0]
                    break;
 8002cdc:	e01b      	b.n	8002d16 <print_string_ptr+0x1b6>
                case '\f':
                    *output_pointer = 'f';
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2266      	movs	r2, #102	; 0x66
 8002ce2:	701a      	strb	r2, [r3, #0]
                    break;
 8002ce4:	e017      	b.n	8002d16 <print_string_ptr+0x1b6>
                case '\n':
                    *output_pointer = 'n';
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	226e      	movs	r2, #110	; 0x6e
 8002cea:	701a      	strb	r2, [r3, #0]
                    break;
 8002cec:	e013      	b.n	8002d16 <print_string_ptr+0x1b6>
                case '\r':
                    *output_pointer = 'r';
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2272      	movs	r2, #114	; 0x72
 8002cf2:	701a      	strb	r2, [r3, #0]
                    break;
 8002cf4:	e00f      	b.n	8002d16 <print_string_ptr+0x1b6>
                case '\t':
                    *output_pointer = 't';
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2274      	movs	r2, #116	; 0x74
 8002cfa:	701a      	strb	r2, [r3, #0]
                    break;
 8002cfc:	e00b      	b.n	8002d16 <print_string_ptr+0x1b6>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	001a      	movs	r2, r3
 8002d04:	4912      	ldr	r1, [pc, #72]	; (8002d50 <print_string_ptr+0x1f0>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f007 f933 	bl	8009f74 <siprintf>
                    output_pointer += 4;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	3304      	adds	r3, #4
 8002d12:	61bb      	str	r3, [r7, #24]
                    break;
 8002d14:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1a4      	bne.n	8002c74 <print_string_ptr+0x114>
            }
        }
    }
    output[output_length + 1] = '\"';
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	18d3      	adds	r3, r2, r3
 8002d32:	2222      	movs	r2, #34	; 0x22
 8002d34:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]

    return true;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b008      	add	sp, #32
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	0800c0d0 	.word	0x0800c0d0
 8002d50:	0800c0d4 	.word	0x0800c0d4

08002d54 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	0011      	movs	r1, r2
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fefa 	bl	8002b60 <print_string_ptr>
 8002d6c:	0003      	movs	r3, r0
}
 8002d6e:	0018      	movs	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <print>:
}

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8002d88:	2410      	movs	r4, #16
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	2224      	movs	r2, #36	; 0x24
 8002d8e:	2100      	movs	r1, #0
 8002d90:	0018      	movs	r0, r3
 8002d92:	f007 f822 	bl	8009dda <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b44      	ldr	r3, [pc, #272]	; (8002eac <print+0x134>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	4790      	blx	r2
 8002da2:	0002      	movs	r2, r0
 8002da4:	0021      	movs	r1, r4
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 8002daa:	4b40      	ldr	r3, [pc, #256]	; (8002eac <print+0x134>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	615a      	str	r2, [r3, #20]
    buffer->hooks = *hooks;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002dc0:	c331      	stmia	r3!, {r0, r4, r5}
    if (buffer->buffer == NULL)
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d050      	beq.n	8002e6c <print+0xf4>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8002dca:	2310      	movs	r3, #16
 8002dcc:	18fa      	adds	r2, r7, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f87e 	bl	8002ed4 <print_value>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d049      	beq.n	8002e70 <print+0xf8>
    {
        goto fail;
    }
    update_offset(buffer);
 8002ddc:	2310      	movs	r3, #16
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff fddf 	bl	80029a4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d013      	beq.n	8002e16 <print+0x9e>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	2110      	movs	r1, #16
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	0019      	movs	r1, r3
 8002e00:	4790      	blx	r2
 8002e02:	0003      	movs	r3, r0
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL) {
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d033      	beq.n	8002e74 <print+0xfc>
            goto fail;
        }
        buffer->buffer = NULL;
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e028      	b.n	8002e68 <print+0xf0>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	3301      	adds	r3, #1
 8002e22:	0018      	movs	r0, r3
 8002e24:	4790      	blx	r2
 8002e26:	0003      	movs	r3, r0
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL)
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d023      	beq.n	8002e78 <print+0x100>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002e30:	2010      	movs	r0, #16
 8002e32:	183b      	adds	r3, r7, r0
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	183b      	adds	r3, r7, r0
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	183b      	adds	r3, r7, r0
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d900      	bls.n	8002e46 <print+0xce>
 8002e44:	001a      	movs	r2, r3
 8002e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f006 ffbd 	bl	8009dc8 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002e4e:	2110      	movs	r1, #16
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e56:	18d3      	adds	r3, r2, r3
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0018      	movs	r0, r3
 8002e66:	4790      	blx	r2
    }

    return printed;
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	e01b      	b.n	8002ea4 <print+0x12c>
        goto fail;
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	e004      	b.n	8002e7a <print+0x102>
        goto fail;
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	e002      	b.n	8002e7a <print+0x102>
            goto fail;
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	e000      	b.n	8002e7a <print+0x102>
            goto fail;
 8002e78:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <print+0x11a>
    {
        hooks->deallocate(buffer->buffer);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	2310      	movs	r3, #16
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	4790      	blx	r2
    }

    if (printed != NULL)
 8002e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <print+0x12a>
    {
        hooks->deallocate(printed);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e9e:	0010      	movs	r0, r2
 8002ea0:	4798      	blx	r3
    }

    return NULL;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b00e      	add	sp, #56	; 0x38
 8002eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8002eac:	0800c228 	.word	0x0800c228

08002eb0 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8002eb8:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <cJSON_Print+0x20>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff ff5a 	bl	8002d78 <print>
 8002ec4:	0003      	movs	r3, r0
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b002      	add	sp, #8
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <print_value+0x1a>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <print_value+0x1e>
    {
        return false;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e0a4      	b.n	800303c <print_value+0x168>
    }

    switch ((item->type) & 0xFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d057      	beq.n	8002fae <print_value+0xda>
 8002efe:	dc06      	bgt.n	8002f0e <print_value+0x3a>
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d03e      	beq.n	8002f82 <print_value+0xae>
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d010      	beq.n	8002f2a <print_value+0x56>
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d024      	beq.n	8002f56 <print_value+0x82>
 8002f0c:	e095      	b.n	800303a <print_value+0x166>
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d100      	bne.n	8002f14 <print_value+0x40>
 8002f12:	e082      	b.n	800301a <print_value+0x146>
 8002f14:	dc03      	bgt.n	8002f1e <print_value+0x4a>
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d100      	bne.n	8002f1c <print_value+0x48>
 8002f1a:	e076      	b.n	800300a <print_value+0x136>
 8002f1c:	e08d      	b.n	800303a <print_value+0x166>
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d100      	bne.n	8002f24 <print_value+0x50>
 8002f22:	e082      	b.n	800302a <print_value+0x156>
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d04a      	beq.n	8002fbe <print_value+0xea>
 8002f28:	e087      	b.n	800303a <print_value+0x166>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2105      	movs	r1, #5
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff fc94 	bl	800285c <ensure>
 8002f34:	0003      	movs	r3, r0
 8002f36:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <print_value+0x6e>
            {
                return false;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e07c      	b.n	800303c <print_value+0x168>
            }
            strcpy((char*)output, "null");
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <print_value+0x170>)
 8002f46:	0010      	movs	r0, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	f006 ff3b 	bl	8009dc8 <memcpy>
            return true;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e072      	b.n	800303c <print_value+0x168>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2106      	movs	r1, #6
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff fc7e 	bl	800285c <ensure>
 8002f60:	0003      	movs	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <print_value+0x9a>
            {
                return false;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e066      	b.n	800303c <print_value+0x168>
            }
            strcpy((char*)output, "false");
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <print_value+0x174>)
 8002f72:	0010      	movs	r0, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	2306      	movs	r3, #6
 8002f78:	001a      	movs	r2, r3
 8002f7a:	f006 ff25 	bl	8009dc8 <memcpy>
            return true;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e05c      	b.n	800303c <print_value+0x168>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2105      	movs	r1, #5
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7ff fc68 	bl	800285c <ensure>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <print_value+0xc6>
            {
                return false;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e050      	b.n	800303c <print_value+0x168>
            }
            strcpy((char*)output, "true");
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <print_value+0x178>)
 8002f9e:	0010      	movs	r0, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	f006 ff0f 	bl	8009dc8 <memcpy>
            return true;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e046      	b.n	800303c <print_value+0x168>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff fd17 	bl	80029e8 <print_number>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	e03e      	b.n	800303c <print_value+0x168>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <print_value+0xfa>
            {
                return false;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e036      	b.n	800303c <print_value+0x168>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7fd f898 	bl	8000108 <strlen>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff fc39 	bl	800285c <ensure>
 8002fea:	0003      	movs	r3, r0
 8002fec:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <print_value+0x124>
            {
                return false;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e021      	b.n	800303c <print_value+0x168>
            }
            memcpy(output, item->valuestring, raw_length);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6919      	ldr	r1, [r3, #16]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0018      	movs	r0, r3
 8003002:	f006 fee1 	bl	8009dc8 <memcpy>
            return true;
 8003006:	2301      	movs	r3, #1
 8003008:	e018      	b.n	800303c <print_value+0x168>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	0011      	movs	r1, r2
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff fe9f 	bl	8002d54 <print_string>
 8003016:	0003      	movs	r3, r0
 8003018:	e010      	b.n	800303c <print_value+0x168>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f815 	bl	8003050 <print_array>
 8003026:	0003      	movs	r3, r0
 8003028:	e008      	b.n	800303c <print_value+0x168>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0011      	movs	r1, r2
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f89b 	bl	800316c <print_object>
 8003036:	0003      	movs	r3, r0
 8003038:	e000      	b.n	800303c <print_value+0x168>

        default:
            return false;
 800303a:	2300      	movs	r3, #0
    }
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	0800c0b4 	.word	0x0800c0b4
 8003048:	0800c0e0 	.word	0x0800c0e0
 800304c:	0800c0e8 	.word	0x0800c0e8

08003050 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <print_array+0x22>
    {
        return false;
 800306e:	2300      	movs	r3, #0
 8003070:	e078      	b.n	8003164 <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	0018      	movs	r0, r3
 8003078:	f7ff fbf0 	bl	800285c <ensure>
 800307c:	0003      	movs	r3, r0
 800307e:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <print_array+0x3a>
    {
        return false;
 8003086:	2300      	movs	r3, #0
 8003088:	e06c      	b.n	8003164 <print_array+0x114>
    }

    *output_pointer = '[';
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	225b      	movs	r2, #91	; 0x5b
 800308e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80030a4:	e041      	b.n	800312a <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7ff ff11 	bl	8002ed4 <print_value>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d101      	bne.n	80030ba <print_array+0x6a>
        {
            return false;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e054      	b.n	8003164 <print_array+0x114>
        }
        update_offset(output_buffer);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	0018      	movs	r0, r3
 80030be:	f7ff fc71 	bl	80029a4 <update_offset>
        if (current_element->next)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02c      	beq.n	8003124 <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <print_array+0x86>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e000      	b.n	80030d8 <print_array+0x88>
 80030d6:	2301      	movs	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff fbba 	bl	800285c <ensure>
 80030e8:	0003      	movs	r3, r0
 80030ea:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <print_array+0xa6>
            {
                return false;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e036      	b.n	8003164 <print_array+0x114>
            }
            *output_pointer++ = ',';
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	617a      	str	r2, [r7, #20]
 80030fc:	222c      	movs	r2, #44	; 0x2c
 80030fe:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	617a      	str	r2, [r7, #20]
 800310e:	2220      	movs	r2, #32
 8003110:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	18d2      	adds	r2, r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ba      	bne.n	80030a6 <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2102      	movs	r1, #2
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff fb91 	bl	800285c <ensure>
 800313a:	0003      	movs	r3, r0
 800313c:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <print_array+0xf8>
    {
        return false;
 8003144:	2300      	movs	r3, #0
 8003146:	e00d      	b.n	8003164 <print_array+0x114>
    }
    *output_pointer++ = ']';
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	617a      	str	r2, [r7, #20]
 800314e:	225d      	movs	r2, #93	; 0x5d
 8003150:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	1e5a      	subs	r2, r3, #1
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	60da      	str	r2, [r3, #12]

    return true;
 8003162:	2301      	movs	r3, #1
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	b006      	add	sp, #24
 800316a:	bd80      	pop	{r7, pc}

0800316c <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <print_object+0x22>
    {
        return false;
 800318a:	2300      	movs	r3, #0
 800318c:	e116      	b.n	80033bc <print_object+0x250>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <print_object+0x2e>
 8003196:	2302      	movs	r3, #2
 8003198:	e000      	b.n	800319c <print_object+0x30>
 800319a:	2301      	movs	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	0011      	movs	r1, r2
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff fb58 	bl	800285c <ensure>
 80031ac:	0003      	movs	r3, r0
 80031ae:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <print_object+0x4e>
    {
        return false;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e100      	b.n	80033bc <print_object+0x250>
    }

    *output_pointer++ = '{';
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	61fa      	str	r2, [r7, #28]
 80031c0:	227b      	movs	r2, #123	; 0x7b
 80031c2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <print_object+0x74>
    {
        *output_pointer++ = '\n';
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	61fa      	str	r2, [r7, #28]
 80031dc:	220a      	movs	r2, #10
 80031de:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	18d2      	adds	r2, r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	609a      	str	r2, [r3, #8]

    while (current_item)
 80031ec:	e0aa      	b.n	8003344 <print_object+0x1d8>
    {
        if (output_buffer->format)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d024      	beq.n	8003240 <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	0011      	movs	r1, r2
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff fb2c 	bl	800285c <ensure>
 8003204:	0003      	movs	r3, r0
 8003206:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <print_object+0xa6>
            {
                return false;
 800320e:	2300      	movs	r3, #0
 8003210:	e0d4      	b.n	80033bc <print_object+0x250>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e007      	b.n	8003228 <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	61fa      	str	r2, [r7, #28]
 800321e:	2209      	movs	r2, #9
 8003220:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3301      	adds	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3f2      	bcc.n	8003218 <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	18d2      	adds	r2, r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	0011      	movs	r1, r2
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff fc89 	bl	8002b60 <print_string_ptr>
 800324e:	1e03      	subs	r3, r0, #0
 8003250:	d101      	bne.n	8003256 <print_object+0xea>
        {
            return false;
 8003252:	2300      	movs	r3, #0
 8003254:	e0b2      	b.n	80033bc <print_object+0x250>
        }
        update_offset(output_buffer);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff fba3 	bl	80029a4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <print_object+0xfe>
 8003266:	2302      	movs	r3, #2
 8003268:	e000      	b.n	800326c <print_object+0x100>
 800326a:	2301      	movs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	0011      	movs	r1, r2
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff faf1 	bl	800285c <ensure>
 800327a:	0003      	movs	r3, r0
 800327c:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <print_object+0x11c>
        {
            return false;
 8003284:	2300      	movs	r3, #0
 8003286:	e099      	b.n	80033bc <print_object+0x250>
        }
        *output_pointer++ = ':';
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	61fa      	str	r2, [r7, #28]
 800328e:	223a      	movs	r2, #58	; 0x3a
 8003290:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	61fa      	str	r2, [r7, #28]
 80032a0:	2209      	movs	r2, #9
 80032a2:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	18d2      	adds	r2, r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	0011      	movs	r1, r2
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff fe0c 	bl	8002ed4 <print_value>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d101      	bne.n	80032c4 <print_object+0x158>
        {
            return false;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e07b      	b.n	80033bc <print_object+0x250>
        }
        update_offset(output_buffer);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff fb6c 	bl	80029a4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <print_object+0x16c>
 80032d4:	2201      	movs	r2, #1
 80032d6:	e000      	b.n	80032da <print_object+0x16e>
 80032d8:	2200      	movs	r2, #0
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <print_object+0x17a>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <print_object+0x17c>
 80032e6:	2300      	movs	r3, #0
 80032e8:	18d3      	adds	r3, r2, r3
 80032ea:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	0011      	movs	r1, r2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff fab1 	bl	800285c <ensure>
 80032fa:	0003      	movs	r3, r0
 80032fc:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <print_object+0x19c>
        {
            return false;
 8003304:	2300      	movs	r3, #0
 8003306:	e059      	b.n	80033bc <print_object+0x250>
        }
        if (current_item->next)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <print_object+0x1ae>
        {
            *output_pointer++ = ',';
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	61fa      	str	r2, [r7, #28]
 8003316:	222c      	movs	r2, #44	; 0x2c
 8003318:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <print_object+0x1c0>
        {
            *output_pointer++ = '\n';
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	61fa      	str	r2, [r7, #28]
 8003328:	220a      	movs	r2, #10
 800332a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	18d2      	adds	r2, r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d000      	beq.n	800334c <print_object+0x1e0>
 800334a:	e750      	b.n	80031ee <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <print_object+0x1f0>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	3301      	adds	r3, #1
 800335a:	e000      	b.n	800335e <print_object+0x1f2>
 800335c:	2302      	movs	r3, #2
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	0019      	movs	r1, r3
 8003362:	0010      	movs	r0, r2
 8003364:	f7ff fa7a 	bl	800285c <ensure>
 8003368:	0003      	movs	r3, r0
 800336a:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <print_object+0x20a>
    {
        return false;
 8003372:	2300      	movs	r3, #0
 8003374:	e022      	b.n	80033bc <print_object+0x250>
    }
    if (output_buffer->format)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <print_object+0x234>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	e007      	b.n	8003394 <print_object+0x228>
        {
            *output_pointer++ = '\t';
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	61fa      	str	r2, [r7, #28]
 800338a:	2209      	movs	r2, #9
 800338c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3301      	adds	r3, #1
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	3b01      	subs	r3, #1
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	429a      	cmp	r2, r3
 800339e:	d3f1      	bcc.n	8003384 <print_object+0x218>
        }
    }
    *output_pointer++ = '}';
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	61fa      	str	r2, [r7, #28]
 80033a6:	227d      	movs	r2, #125	; 0x7d
 80033a8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	60da      	str	r2, [r3, #12]

    return true;
 80033ba:	2301      	movs	r3, #1
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b008      	add	sp, #32
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	605a      	str	r2, [r3, #4]
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b002      	add	sp, #8
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <add_item_to_array+0x1a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <add_item_to_array+0x1e>
    {
        return false;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e017      	b.n	8003430 <add_item_to_array+0x4e>
    }

    child = array->child;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e00c      	b.n	800342e <add_item_to_array+0x4c>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
        while (child->next)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f8      	bne.n	8003414 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	0011      	movs	r1, r2
 8003428:	0018      	movs	r0, r3
 800342a:	f7ff ffcb 	bl	80033c4 <suffix_object>
    }

    return true;
 800342e:	2301      	movs	r3, #1
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}

08003438 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8003440:	687b      	ldr	r3, [r7, #4]
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <add_item_to_object+0x28>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <add_item_to_object+0x28>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <add_item_to_object+0x2c>
    {
        return false;
 8003474:	2300      	movs	r3, #0
 8003476:	e03e      	b.n	80034f6 <add_item_to_object+0xaa>
    }

    if (constant_key)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <add_item_to_object+0x4c>
    {
        new_key = (char*)cast_away_const(string);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	0018      	movs	r0, r3
 8003482:	f7ff ffd9 	bl	8003438 <cast_away_const>
 8003486:	0003      	movs	r3, r0
 8003488:	617b      	str	r3, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	e011      	b.n	80034bc <add_item_to_object+0x70>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	0011      	movs	r1, r2
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff f948 	bl	8002734 <cJSON_strdup>
 80034a4:	0003      	movs	r3, r0
 80034a6:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <add_item_to_object+0x66>
        {
            return false;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e021      	b.n	80034f6 <add_item_to_object+0xaa>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <add_item_to_object+0xb4>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4013      	ands	r3, r2
 80034c6:	d109      	bne.n	80034dc <add_item_to_object+0x90>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <add_item_to_object+0x90>
    {
        hooks->deallocate(item->string);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	0018      	movs	r0, r3
 80034da:	4790      	blx	r2
    }

    item->string = new_key;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	0011      	movs	r1, r2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff ff77 	bl	80033e2 <add_item_to_array>
 80034f4:	0003      	movs	r3, r0
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b006      	add	sp, #24
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	fffffdff 	.word	0xfffffdff

08003504 <cJSON_AddItemToObject>:

CJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b087      	sub	sp, #28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, &global_hooks, false);
 8003510:	4c06      	ldr	r4, [pc, #24]	; (800352c <cJSON_AddItemToObject+0x28>)
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	2300      	movs	r3, #0
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	0023      	movs	r3, r4
 800351e:	f7ff ff95 	bl	800344c <add_item_to_object>
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b005      	add	sp, #20
 8003528:	bd90      	pop	{r4, r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	20000000 	.word	0x20000000

08003530 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6038      	str	r0, [r7, #0]
 8003538:	6079      	str	r1, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <cJSON_CreateNumber+0x78>)
 800353c:	0018      	movs	r0, r3
 800353e:	f7ff f925 	bl	800278c <cJSON_New_Item>
 8003542:	0003      	movs	r3, r0
 8003544:	60fb      	str	r3, [r7, #12]
    if(item)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d027      	beq.n	800359c <cJSON_CreateNumber+0x6c>
    {
        item->type = cJSON_Number;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2208      	movs	r2, #8
 8003550:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	687c      	ldr	r4, [r7, #4]
 8003558:	6193      	str	r3, [r2, #24]
 800355a:	61d4      	str	r4, [r2, #28]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <cJSON_CreateNumber+0x7c>)
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <cJSON_CreateNumber+0x80>)
 8003560:	6838      	ldr	r0, [r7, #0]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	f7fc fe98 	bl	8000298 <__aeabi_dcmpge>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d003      	beq.n	8003574 <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a11      	ldr	r2, [pc, #68]	; (80035b4 <cJSON_CreateNumber+0x84>)
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	e013      	b.n	800359c <cJSON_CreateNumber+0x6c>
        }
        else if (num <= (double)INT_MIN)
 8003574:	2200      	movs	r2, #0
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <cJSON_CreateNumber+0x88>)
 8003578:	6838      	ldr	r0, [r7, #0]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	f7fc fe78 	bl	8000270 <__aeabi_dcmple>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d004      	beq.n	800358e <cJSON_CreateNumber+0x5e>
        {
            item->valueint = INT_MIN;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	0612      	lsls	r2, r2, #24
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	e006      	b.n	800359c <cJSON_CreateNumber+0x6c>
        }
        else
        {
            item->valueint = (int)num;
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	f7fe ff2d 	bl	80023f0 <__aeabi_d2iz>
 8003596:	0002      	movs	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800359c:	68fb      	ldr	r3, [r7, #12]
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b005      	add	sp, #20
 80035a4:	bd90      	pop	{r4, r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20000000 	.word	0x20000000
 80035ac:	ffc00000 	.word	0xffc00000
 80035b0:	41dfffff 	.word	0x41dfffff
 80035b4:	7fffffff 	.word	0x7fffffff
 80035b8:	c1e00000 	.word	0xc1e00000

080035bc <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <cJSON_CreateObject+0x28>)
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7ff f8e1 	bl	800278c <cJSON_New_Item>
 80035ca:	0003      	movs	r3, r0
 80035cc:	607b      	str	r3, [r7, #4]
    if (item)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <cJSON_CreateObject+0x1e>
    {
        item->type = cJSON_Object;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	60da      	str	r2, [r3, #12]
    }

    return item;
 80035da:	687b      	ldr	r3, [r7, #4]
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000000 	.word	0x20000000

080035e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035ec:	f002 fb3c 	bl	8005c68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035f0:	f000 f82a 	bl	8003648 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035f4:	f000 f9be 	bl	8003974 <MX_GPIO_Init>
  MX_SPI1_Init();
 80035f8:	f000 f8e4 	bl	80037c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80035fc:	f000 f91a 	bl	8003834 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003600:	f000 f89e 	bl	8003740 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003604:	f000 f986 	bl	8003914 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003608:	f000 f88c 	bl	8003724 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  wifiRST();
 800360c:	f000 fb8e 	bl	8003d2c <wifiRST>
  HAL_Delay(1000);
 8003610:	23fa      	movs	r3, #250	; 0xfa
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	0018      	movs	r0, r3
 8003616:	f002 fb87 	bl	8005d28 <HAL_Delay>
  wifiInit();
 800361a:	f000 fba5 	bl	8003d68 <wifiInit>
  HAL_Delay(1000);
 800361e:	23fa      	movs	r3, #250	; 0xfa
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	0018      	movs	r0, r3
 8003624:	f002 fb80 	bl	8005d28 <HAL_Delay>
  BME280_INIT();
 8003628:	f000 fa66 	bl	8003af8 <BME280_INIT>
  bme280_init_complete = 1;
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <main+0x58>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <main+0x5c>)
 8003634:	0018      	movs	r0, r3
 8003636:	f005 f9fa 	bl	8008a2e <HAL_TIM_Base_Start_IT>
  connectWifi();
 800363a:	f000 fbb3 	bl	8003da4 <connectWifi>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800363e:	e7fe      	b.n	800363e <main+0x56>
 8003640:	20000208 	.word	0x20000208
 8003644:	2000038c 	.word	0x2000038c

08003648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b09f      	sub	sp, #124	; 0x7c
 800364c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800364e:	2440      	movs	r4, #64	; 0x40
 8003650:	193b      	adds	r3, r7, r4
 8003652:	0018      	movs	r0, r3
 8003654:	2338      	movs	r3, #56	; 0x38
 8003656:	001a      	movs	r2, r3
 8003658:	2100      	movs	r1, #0
 800365a:	f006 fbbe 	bl	8009dda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800365e:	232c      	movs	r3, #44	; 0x2c
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	0018      	movs	r0, r3
 8003664:	2314      	movs	r3, #20
 8003666:	001a      	movs	r2, r3
 8003668:	2100      	movs	r1, #0
 800366a:	f006 fbb6 	bl	8009dda <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	0018      	movs	r0, r3
 8003672:	2328      	movs	r3, #40	; 0x28
 8003674:	001a      	movs	r2, r3
 8003676:	2100      	movs	r1, #0
 8003678:	f006 fbaf 	bl	8009dda <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <SystemClock_Config+0xd4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <SystemClock_Config+0xd8>)
 8003682:	401a      	ands	r2, r3
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <SystemClock_Config+0xd4>)
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	0109      	lsls	r1, r1, #4
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800368e:	0021      	movs	r1, r4
 8003690:	187b      	adds	r3, r7, r1
 8003692:	2210      	movs	r2, #16
 8003694:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003696:	187b      	adds	r3, r7, r1
 8003698:	2201      	movs	r2, #1
 800369a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800369c:	187b      	adds	r3, r7, r1
 800369e:	2200      	movs	r2, #0
 80036a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	22a0      	movs	r2, #160	; 0xa0
 80036a6:	0212      	lsls	r2, r2, #8
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	2200      	movs	r2, #0
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	0018      	movs	r0, r3
 80036b4:	f003 fcbe 	bl	8007034 <HAL_RCC_OscConfig>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d001      	beq.n	80036c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80036bc:	f000 fb94 	bl	8003de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	220f      	movs	r2, #15
 80036c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036da:	187b      	adds	r3, r7, r1
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	2100      	movs	r1, #0
 80036e4:	0018      	movs	r0, r3
 80036e6:	f004 f875 	bl	80077d4 <HAL_RCC_ClockConfig>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d001      	beq.n	80036f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80036ee:	f000 fb7b 	bl	8003de8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	2209      	movs	r2, #9
 80036f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	0018      	movs	r0, r3
 8003708:	f004 fa48 	bl	8007b9c <HAL_RCCEx_PeriphCLKConfig>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d001      	beq.n	8003714 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003710:	f000 fb6a 	bl	8003de8 <Error_Handler>
  }
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b01f      	add	sp, #124	; 0x7c
 800371a:	bd90      	pop	{r4, r7, pc}
 800371c:	40007000 	.word	0x40007000
 8003720:	ffffe7ff 	.word	0xffffe7ff

08003724 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	200f      	movs	r0, #15
 800372e:	f002 fbc1 	bl	8005eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003732:	200f      	movs	r0, #15
 8003734:	f002 fbd3 	bl	8005ede <HAL_NVIC_EnableIRQ>
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <MX_I2C1_Init+0x78>)
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <MX_I2C1_Init+0x7c>)
 8003748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000609;
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <MX_I2C1_Init+0x78>)
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <MX_I2C1_Init+0x80>)
 800374e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <MX_I2C1_Init+0x78>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <MX_I2C1_Init+0x78>)
 8003758:	2201      	movs	r2, #1
 800375a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <MX_I2C1_Init+0x78>)
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <MX_I2C1_Init+0x78>)
 8003764:	2200      	movs	r2, #0
 8003766:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <MX_I2C1_Init+0x78>)
 800376a:	2200      	movs	r2, #0
 800376c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <MX_I2C1_Init+0x78>)
 8003770:	2200      	movs	r2, #0
 8003772:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <MX_I2C1_Init+0x78>)
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <MX_I2C1_Init+0x78>)
 800377c:	0018      	movs	r0, r3
 800377e:	f002 fe5b 	bl	8006438 <HAL_I2C_Init>
 8003782:	1e03      	subs	r3, r0, #0
 8003784:	d001      	beq.n	800378a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003786:	f000 fb2f 	bl	8003de8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <MX_I2C1_Init+0x78>)
 8003790:	0011      	movs	r1, r2
 8003792:	0018      	movs	r0, r3
 8003794:	f003 fbb6 	bl	8006f04 <HAL_I2CEx_ConfigAnalogFilter>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d001      	beq.n	80037a0 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800379c:	f000 fb24 	bl	8003de8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <MX_I2C1_Init+0x78>)
 80037a2:	2100      	movs	r1, #0
 80037a4:	0018      	movs	r0, r3
 80037a6:	f003 fbf9 	bl	8006f9c <HAL_I2CEx_ConfigDigitalFilter>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d001      	beq.n	80037b2 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80037ae:	f000 fb1b 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	2000021c 	.word	0x2000021c
 80037bc:	40005400 	.word	0x40005400
 80037c0:	00000609 	.word	0x00000609

080037c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037c8:	4b18      	ldr	r3, [pc, #96]	; (800382c <MX_SPI1_Init+0x68>)
 80037ca:	4a19      	ldr	r2, [pc, #100]	; (8003830 <MX_SPI1_Init+0x6c>)
 80037cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <MX_SPI1_Init+0x68>)
 80037d0:	2282      	movs	r2, #130	; 0x82
 80037d2:	0052      	lsls	r2, r2, #1
 80037d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <MX_SPI1_Init+0x68>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <MX_SPI1_Init+0x68>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <MX_SPI1_Init+0x68>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <MX_SPI1_Init+0x68>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MX_SPI1_Init+0x68>)
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	02d2      	lsls	r2, r2, #11
 80037f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <MX_SPI1_Init+0x68>)
 80037f8:	2238      	movs	r2, #56	; 0x38
 80037fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <MX_SPI1_Init+0x68>)
 80037fe:	2200      	movs	r2, #0
 8003800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <MX_SPI1_Init+0x68>)
 8003804:	2200      	movs	r2, #0
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <MX_SPI1_Init+0x68>)
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <MX_SPI1_Init+0x68>)
 8003810:	2207      	movs	r2, #7
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <MX_SPI1_Init+0x68>)
 8003816:	0018      	movs	r0, r3
 8003818:	f004 fb34 	bl	8007e84 <HAL_SPI_Init>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d001      	beq.n	8003824 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003820:	f000 fae2 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	20000334 	.word	0x20000334
 8003830:	40013000 	.word	0x40013000

08003834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	; 0x30
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383a:	2320      	movs	r3, #32
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	0018      	movs	r0, r3
 8003840:	2310      	movs	r3, #16
 8003842:	001a      	movs	r2, r3
 8003844:	2100      	movs	r1, #0
 8003846:	f006 fac8 	bl	8009dda <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800384a:	230c      	movs	r3, #12
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	0018      	movs	r0, r3
 8003850:	2314      	movs	r3, #20
 8003852:	001a      	movs	r2, r3
 8003854:	2100      	movs	r1, #0
 8003856:	f006 fac0 	bl	8009dda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	0018      	movs	r0, r3
 800385e:	2308      	movs	r3, #8
 8003860:	001a      	movs	r2, r3
 8003862:	2100      	movs	r1, #0
 8003864:	f006 fab9 	bl	8009dda <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003868:	4b27      	ldr	r3, [pc, #156]	; (8003908 <MX_TIM2_Init+0xd4>)
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	05d2      	lsls	r2, r2, #23
 800386e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 8003870:	4b25      	ldr	r3, [pc, #148]	; (8003908 <MX_TIM2_Init+0xd4>)
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <MX_TIM2_Init+0xd8>)
 8003874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <MX_TIM2_Init+0xd4>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 800387c:	4b22      	ldr	r3, [pc, #136]	; (8003908 <MX_TIM2_Init+0xd4>)
 800387e:	4a24      	ldr	r2, [pc, #144]	; (8003910 <MX_TIM2_Init+0xdc>)
 8003880:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003882:	4b21      	ldr	r3, [pc, #132]	; (8003908 <MX_TIM2_Init+0xd4>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <MX_TIM2_Init+0xd4>)
 800388a:	2200      	movs	r2, #0
 800388c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800388e:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <MX_TIM2_Init+0xd4>)
 8003890:	0018      	movs	r0, r3
 8003892:	f005 f8a0 	bl	80089d6 <HAL_TIM_Base_Init>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d001      	beq.n	800389e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800389a:	f000 faa5 	bl	8003de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800389e:	2120      	movs	r1, #32
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	0152      	lsls	r2, r2, #5
 80038a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038a8:	187a      	adds	r2, r7, r1
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <MX_TIM2_Init+0xd4>)
 80038ac:	0011      	movs	r1, r2
 80038ae:	0018      	movs	r0, r3
 80038b0:	f005 f9c8 	bl	8008c44 <HAL_TIM_ConfigClockSource>
 80038b4:	1e03      	subs	r3, r0, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80038b8:	f000 fa96 	bl	8003de8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80038bc:	210c      	movs	r1, #12
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	2200      	movs	r2, #0
 80038c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80038ca:	187a      	adds	r2, r7, r1
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <MX_TIM2_Init+0xd4>)
 80038ce:	0011      	movs	r1, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f005 fa75 	bl	8008dc0 <HAL_TIM_SlaveConfigSynchro>
 80038d6:	1e03      	subs	r3, r0, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80038da:	f000 fa85 	bl	8003de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038e4:	1d3b      	adds	r3, r7, #4
 80038e6:	2200      	movs	r2, #0
 80038e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038ea:	1d3a      	adds	r2, r7, #4
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <MX_TIM2_Init+0xd4>)
 80038ee:	0011      	movs	r1, r2
 80038f0:	0018      	movs	r0, r3
 80038f2:	f005 fc4f 	bl	8009194 <HAL_TIMEx_MasterConfigSynchronization>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80038fa:	f000 fa75 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b00c      	add	sp, #48	; 0x30
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	2000038c 	.word	0x2000038c
 800390c:	00001b58 	.word	0x00001b58
 8003910:	00000bb8 	.word	0x00000bb8

08003914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <MX_USART1_UART_Init+0x58>)
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <MX_USART1_UART_Init+0x5c>)
 800391c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <MX_USART1_UART_Init+0x58>)
 8003920:	22e1      	movs	r2, #225	; 0xe1
 8003922:	0252      	lsls	r2, r2, #9
 8003924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <MX_USART1_UART_Init+0x58>)
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <MX_USART1_UART_Init+0x58>)
 800392e:	2200      	movs	r2, #0
 8003930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <MX_USART1_UART_Init+0x58>)
 8003934:	2200      	movs	r2, #0
 8003936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <MX_USART1_UART_Init+0x58>)
 800393a:	220c      	movs	r2, #12
 800393c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <MX_USART1_UART_Init+0x58>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <MX_USART1_UART_Init+0x58>)
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <MX_USART1_UART_Init+0x58>)
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <MX_USART1_UART_Init+0x58>)
 8003952:	2200      	movs	r2, #0
 8003954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <MX_USART1_UART_Init+0x58>)
 8003958:	0018      	movs	r0, r3
 800395a:	f005 fc5f 	bl	800921c <HAL_UART_Init>
 800395e:	1e03      	subs	r3, r0, #0
 8003960:	d001      	beq.n	8003966 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003962:	f000 fa41 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200002b4 	.word	0x200002b4
 8003970:	40013800 	.word	0x40013800

08003974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b08b      	sub	sp, #44	; 0x2c
 8003978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397a:	2414      	movs	r4, #20
 800397c:	193b      	adds	r3, r7, r4
 800397e:	0018      	movs	r0, r3
 8003980:	2314      	movs	r3, #20
 8003982:	001a      	movs	r2, r3
 8003984:	2100      	movs	r1, #0
 8003986:	f006 fa28 	bl	8009dda <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800398a:	4b56      	ldr	r3, [pc, #344]	; (8003ae4 <MX_GPIO_Init+0x170>)
 800398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398e:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <MX_GPIO_Init+0x170>)
 8003990:	2104      	movs	r1, #4
 8003992:	430a      	orrs	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
 8003996:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <MX_GPIO_Init+0x170>)
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	2204      	movs	r2, #4
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039a2:	4b50      	ldr	r3, [pc, #320]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	430a      	orrs	r2, r1
 80039ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ae:	4b4d      	ldr	r3, [pc, #308]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	4013      	ands	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039c0:	2101      	movs	r1, #1
 80039c2:	430a      	orrs	r2, r1
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	2201      	movs	r2, #1
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d2:	4b44      	ldr	r3, [pc, #272]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	4b43      	ldr	r3, [pc, #268]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039d8:	2102      	movs	r1, #2
 80039da:	430a      	orrs	r2, r1
 80039dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <MX_GPIO_Init+0x170>)
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 80039ea:	23a0      	movs	r3, #160	; 0xa0
 80039ec:	05db      	lsls	r3, r3, #23
 80039ee:	2200      	movs	r2, #0
 80039f0:	2120      	movs	r1, #32
 80039f2:	0018      	movs	r0, r3
 80039f4:	f002 fcf0 	bl	80063d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <MX_GPIO_Init+0x174>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	2110      	movs	r1, #16
 80039fe:	0018      	movs	r0, r3
 8003a00:	f002 fcea 	bl	80063d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 8003a04:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <MX_GPIO_Init+0x174>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	2120      	movs	r1, #32
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f002 fce4 	bl	80063d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8003a10:	4936      	ldr	r1, [pc, #216]	; (8003aec <MX_GPIO_Init+0x178>)
 8003a12:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <MX_GPIO_Init+0x17c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	0018      	movs	r0, r3
 8003a18:	f002 fcde 	bl	80063d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	0192      	lsls	r2, r2, #6
 8003a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a24:	193b      	adds	r3, r7, r4
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <MX_GPIO_Init+0x180>)
 8003a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	4a2d      	ldr	r2, [pc, #180]	; (8003ae8 <MX_GPIO_Init+0x174>)
 8003a34:	0019      	movs	r1, r3
 8003a36:	0010      	movs	r0, r2
 8003a38:	f002 fa6e 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	220c      	movs	r2, #12
 8003a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	2202      	movs	r2, #2
 8003a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	2203      	movs	r2, #3
 8003a52:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003a54:	193b      	adds	r3, r7, r4
 8003a56:	2204      	movs	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	193a      	adds	r2, r7, r4
 8003a5c:	23a0      	movs	r3, #160	; 0xa0
 8003a5e:	05db      	lsls	r3, r3, #23
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f002 fa58 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2201      	movs	r2, #1
 8003a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8003a80:	193a      	adds	r2, r7, r4
 8003a82:	23a0      	movs	r3, #160	; 0xa0
 8003a84:	05db      	lsls	r3, r3, #23
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f002 fa45 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8003a8e:	0021      	movs	r1, r4
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	2230      	movs	r2, #48	; 0x30
 8003a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	2201      	movs	r2, #1
 8003a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa8:	000c      	movs	r4, r1
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <MX_GPIO_Init+0x174>)
 8003aae:	0019      	movs	r1, r3
 8003ab0:	0010      	movs	r0, r2
 8003ab2:	f002 fa31 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 8003ab6:	0021      	movs	r1, r4
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <MX_GPIO_Init+0x178>)
 8003abc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2200      	movs	r2, #0
 8003ace:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <MX_GPIO_Init+0x17c>)
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	0010      	movs	r0, r2
 8003ad8:	f002 fa1e 	bl	8005f18 <HAL_GPIO_Init>

}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b00b      	add	sp, #44	; 0x2c
 8003ae2:	bd90      	pop	{r4, r7, pc}
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	50000800 	.word	0x50000800
 8003aec:	00002001 	.word	0x00002001
 8003af0:	50000400 	.word	0x50000400
 8003af4:	10210000 	.word	0x10210000

08003af8 <BME280_INIT>:
/* USER CODE BEGIN 4 */
/**
 * Initializes Bosch BME280 Temperature, Pressure, and Humidity Sensor
 */
static void BME280_INIT(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	/* Device Sampling, Filter, and Standby Time Settings */
	/* Recommended mode of operation: Indoor navigation */
	bme280_device_settings.osr_p = BME280_OVERSAMPLING_16X;		// Pressure
 8003afc:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <BME280_INIT+0xac>)
 8003afe:	2205      	movs	r2, #5
 8003b00:	701a      	strb	r2, [r3, #0]
	bme280_device_settings.osr_t = BME280_OVERSAMPLING_2X;		// Temperature
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <BME280_INIT+0xac>)
 8003b04:	2202      	movs	r2, #2
 8003b06:	705a      	strb	r2, [r3, #1]
	bme280_device_settings.osr_h = BME280_OVERSAMPLING_1X;		// Humidity
 8003b08:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <BME280_INIT+0xac>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	709a      	strb	r2, [r3, #2]
	bme280_device_settings.filter = BME280_FILTER_COEFF_16;		// Filter
 8003b0e:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <BME280_INIT+0xac>)
 8003b10:	2204      	movs	r2, #4
 8003b12:	70da      	strb	r2, [r3, #3]
	bme280_device_settings.standby_time = 0;					// Standby Time
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <BME280_INIT+0xac>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	711a      	strb	r2, [r3, #4]
	bme280_device.dev_id = BME280_I2C_ADDR_SEC;					// I2C Address
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b1c:	2277      	movs	r2, #119	; 0x77
 8003b1e:	705a      	strb	r2, [r3, #1]
	bme280_device.intf = BME280_I2C_INTF;						// I2C Mode
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	709a      	strb	r2, [r3, #2]
	bme280_device.read = user_i2c_read;							// Read Function Ptr
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <BME280_INIT+0xb4>)
 8003b2a:	605a      	str	r2, [r3, #4]
	bme280_device.write = user_i2c_write;						// Write Function Ptr
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b2e:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <BME280_INIT+0xb8>)
 8003b30:	609a      	str	r2, [r3, #8]
	bme280_device.delay_ms = user_delay_ms;						// Delay Function Ptr
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <BME280_INIT+0xbc>)
 8003b36:	60da      	str	r2, [r3, #12]
	bme280_device.settings = bme280_device_settings;			// Device Settings set above
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <BME280_INIT+0xac>)
 8003b3c:	3338      	adds	r3, #56	; 0x38
 8003b3e:	0011      	movs	r1, r2
 8003b40:	2205      	movs	r2, #5
 8003b42:	0018      	movs	r0, r3
 8003b44:	f006 f940 	bl	8009dc8 <memcpy>
	bme280_init_rslt |= bme280_init(&bme280_device);					// Initizialize Device
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 feaf 	bl	80048ae <bme280_init>
 8003b50:	0003      	movs	r3, r0
 8003b52:	001a      	movs	r2, r3
 8003b54:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <BME280_INIT+0xc0>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b25a      	sxtb	r2, r3
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <BME280_INIT+0xc0>)
 8003b60:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_settings(bme280_settings_sel, &bme280_device); // Apply Settings
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <BME280_INIT+0xc4>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 ffeb 	bl	8004b46 <bme280_set_sensor_settings>
 8003b70:	0003      	movs	r3, r0
 8003b72:	001a      	movs	r2, r3
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <BME280_INIT+0xc0>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	b25a      	sxtb	r2, r3
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <BME280_INIT+0xc0>)
 8003b80:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, &bme280_device); // Set to sleep mode
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <BME280_INIT+0xb0>)
 8003b84:	0019      	movs	r1, r3
 8003b86:	2000      	movs	r0, #0
 8003b88:	f001 f84c 	bl	8004c24 <bme280_set_sensor_mode>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	001a      	movs	r2, r3
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <BME280_INIT+0xc0>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b25a      	sxtb	r2, r3
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <BME280_INIT+0xc0>)
 8003b9c:	701a      	strb	r2, [r3, #0]
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200003c8 	.word	0x200003c8
 8003ba8:	20000274 	.word	0x20000274
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003c89 	.word	0x08003c89
 8003bb4:	08003bc1 	.word	0x08003bc1
 8003bb8:	2000020c 	.word	0x2000020c
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <user_delay_ms>:
 *	After a number of milliseconds have passed, we
 *	return control.
 * 	@param[in] milliseconds : How much to delay by in milliseconds.
 */
void user_delay_ms(uint32_t milliseconds)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f002 f8ac 	bl	8005d28 <HAL_Delay>
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <user_i2c_read>:
 *	0xFD - Humidity_MSB - 8 bits - Bits[15:8]
 *	0xFE - Humidity_LSB - 8 bits - Bits[7:0]
 *	See BME280 Datasheet Page 27 for more info
 */
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af04      	add	r7, sp, #16
 8003bde:	0004      	movs	r4, r0
 8003be0:	0008      	movs	r0, r1
 8003be2:	603a      	str	r2, [r7, #0]
 8003be4:	0019      	movs	r1, r3
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	1c22      	adds	r2, r4, #0
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	1dbb      	adds	r3, r7, #6
 8003bee:	1c02      	adds	r2, r0, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	1c0a      	adds	r2, r1, #0
 8003bf6:	801a      	strh	r2, [r3, #0]
	 * | Read       | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003bf8:	230d      	movs	r3, #13
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
	uint16_t read_mode = dev_id;
 8003c00:	230e      	movs	r3, #14
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	1dfa      	adds	r2, r7, #7
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a read bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b76      	cmp	r3, #118	; 0x76
 8003c10:	d003      	beq.n	8003c1a <user_i2c_read+0x42>
 8003c12:	1dfb      	adds	r3, r7, #7
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b77      	cmp	r3, #119	; 0x77
 8003c18:	d109      	bne.n	8003c2e <user_i2c_read+0x56>
	{
		read_mode = (dev_id << 1) | 1;
 8003c1a:	1dfb      	adds	r3, r7, #7
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	2201      	movs	r2, #1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b21a      	sxth	r2, r3
 8003c28:	230e      	movs	r3, #14
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	801a      	strh	r2, [r3, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <user_i2c_read+0xac>)
 8003c30:	0018      	movs	r0, r3
 8003c32:	f002 fc01 	bl	8006438 <HAL_I2C_Init>
	rslt |= HAL_I2C_Mem_Read(&hi2c1, read_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	23fa      	movs	r3, #250	; 0xfa
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	001c      	movs	r4, r3
 8003c42:	230e      	movs	r3, #14
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	8819      	ldrh	r1, [r3, #0]
 8003c48:	480e      	ldr	r0, [pc, #56]	; (8003c84 <user_i2c_read+0xac>)
 8003c4a:	9402      	str	r4, [sp, #8]
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2301      	movs	r3, #1
 8003c58:	f002 fde2 	bl	8006820 <HAL_I2C_Mem_Read>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	b259      	sxtb	r1, r3
 8003c60:	240d      	movs	r4, #13
 8003c62:	193b      	adds	r3, r7, r4
 8003c64:	193a      	adds	r2, r7, r4
 8003c66:	7812      	ldrb	r2, [r2, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <user_i2c_read+0xac>)
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f002 fc78 	bl	8006564 <HAL_I2C_DeInit>
	return rslt;
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b25b      	sxtb	r3, r3
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b005      	add	sp, #20
 8003c80:	bd90      	pop	{r4, r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	2000021c 	.word	0x2000021c

08003c88 <user_i2c_write>:
 * 	@param[in] reg_addr : Register address of what we want to read in from the BME280.
 * 	@param[in] reg_data : Data we're writing to the register
 * 	@param[in] len : Amount of registers to write to
 */
int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af04      	add	r7, sp, #16
 8003c8e:	0004      	movs	r4, r0
 8003c90:	0008      	movs	r0, r1
 8003c92:	603a      	str	r2, [r7, #0]
 8003c94:	0019      	movs	r1, r3
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	1c22      	adds	r2, r4, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	1dbb      	adds	r3, r7, #6
 8003c9e:	1c02      	adds	r2, r0, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	1c0a      	adds	r2, r1, #0
 8003ca6:	801a      	strh	r2, [r3, #0]
	 * | Write      | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8003ca8:	230d      	movs	r3, #13
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
	uint16_t write_mode = dev_id;
 8003cb0:	230e      	movs	r3, #14
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	1dfa      	adds	r2, r7, #7
 8003cb6:	7812      	ldrb	r2, [r2, #0]
 8003cb8:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a write bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b76      	cmp	r3, #118	; 0x76
 8003cc0:	d003      	beq.n	8003cca <user_i2c_write+0x42>
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b77      	cmp	r3, #119	; 0x77
 8003cc8:	d106      	bne.n	8003cd8 <user_i2c_write+0x50>
	{
		write_mode = (dev_id << 1) | 0;
 8003cca:	1dfb      	adds	r3, r7, #7
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	220e      	movs	r2, #14
 8003cd2:	18ba      	adds	r2, r7, r2
 8003cd4:	18db      	adds	r3, r3, r3
 8003cd6:	8013      	strh	r3, [r2, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <user_i2c_write+0xa0>)
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f002 fbac 	bl	8006438 <HAL_I2C_Init>
	rslt = HAL_I2C_Mem_Write(&hi2c1, write_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 8003ce0:	1dbb      	adds	r3, r7, #6
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	23fa      	movs	r3, #250	; 0xfa
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	001c      	movs	r4, r3
 8003cec:	230e      	movs	r3, #14
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	8819      	ldrh	r1, [r3, #0]
 8003cf2:	480d      	ldr	r0, [pc, #52]	; (8003d28 <user_i2c_write+0xa0>)
 8003cf4:	9402      	str	r4, [sp, #8]
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2301      	movs	r3, #1
 8003d02:	f002 fc5f 	bl	80065c4 <HAL_I2C_Mem_Write>
 8003d06:	0003      	movs	r3, r0
 8003d08:	001a      	movs	r2, r3
 8003d0a:	240d      	movs	r4, #13
 8003d0c:	193b      	adds	r3, r7, r4
 8003d0e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <user_i2c_write+0xa0>)
 8003d12:	0018      	movs	r0, r3
 8003d14:	f002 fc26 	bl	8006564 <HAL_I2C_DeInit>
	return rslt;
 8003d18:	193b      	adds	r3, r7, r4
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b25b      	sxtb	r3, r3
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b005      	add	sp, #20
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	2000021c 	.word	0x2000021c

08003d2c <wifiRST>:
void wifiRST()
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
	char rst[] = "AT+RST\r\n";
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <wifiRST+0x34>)
 8003d36:	ca03      	ldmia	r2!, {r0, r1}
 8003d38:	c303      	stmia	r3!, {r0, r1}
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)rst, strlen(rst), 500);
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fc f9e1 	bl	8000108 <strlen>
 8003d46:	0003      	movs	r3, r0
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	23fa      	movs	r3, #250	; 0xfa
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	1d39      	adds	r1, r7, #4
 8003d50:	4804      	ldr	r0, [pc, #16]	; (8003d64 <wifiRST+0x38>)
 8003d52:	f005 fab7 	bl	80092c4 <HAL_UART_Transmit>
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	0800c0f0 	.word	0x0800c0f0
 8003d64:	200002b4 	.word	0x200002b4

08003d68 <wifiInit>:

void wifiInit()
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
	char set[] = "AT+CWMODE=1\r\n";
 8003d6e:	003b      	movs	r3, r7
 8003d70:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <wifiInit+0x34>)
 8003d72:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d74:	c313      	stmia	r3!, {r0, r1, r4}
 8003d76:	8812      	ldrh	r2, [r2, #0]
 8003d78:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) set, strlen(set), 500);
 8003d7a:	003b      	movs	r3, r7
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fc f9c3 	bl	8000108 <strlen>
 8003d82:	0003      	movs	r3, r0
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	23fa      	movs	r3, #250	; 0xfa
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	0039      	movs	r1, r7
 8003d8c:	4804      	ldr	r0, [pc, #16]	; (8003da0 <wifiInit+0x38>)
 8003d8e:	f005 fa99 	bl	80092c4 <HAL_UART_Transmit>
}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b005      	add	sp, #20
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	0800c0fc 	.word	0x0800c0fc
 8003da0:	200002b4 	.word	0x200002b4

08003da4 <connectWifi>:

void connectWifi()
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b08b      	sub	sp, #44	; 0x2c
 8003da8:	af00      	add	r7, sp, #0
	char connect[] = "AT+CWJAP=\"WeatherBox\",\"WinDrone807\"\r\n";
 8003daa:	003b      	movs	r3, r7
 8003dac:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <connectWifi+0x3c>)
 8003dae:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003db0:	c313      	stmia	r3!, {r0, r1, r4}
 8003db2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003db4:	c313      	stmia	r3!, {r0, r1, r4}
 8003db6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003db8:	c313      	stmia	r3!, {r0, r1, r4}
 8003dba:	8812      	ldrh	r2, [r2, #0]
 8003dbc:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) connect, strlen(connect), 500);
 8003dbe:	003b      	movs	r3, r7
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7fc f9a1 	bl	8000108 <strlen>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	23fa      	movs	r3, #250	; 0xfa
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	0039      	movs	r1, r7
 8003dd0:	4804      	ldr	r0, [pc, #16]	; (8003de4 <connectWifi+0x40>)
 8003dd2:	f005 fa77 	bl	80092c4 <HAL_UART_Transmit>
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b00b      	add	sp, #44	; 0x2c
 8003ddc:	bd90      	pop	{r4, r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	0800c10c 	.word	0x0800c10c
 8003de4:	200002b4 	.word	0x200002b4

08003de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_MspInit+0x40>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <HAL_MspInit+0x40>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_MspInit+0x40>)
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_MspInit+0x40>)
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0549      	lsls	r1, r1, #21
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8003e12:	2305      	movs	r3, #5
 8003e14:	425b      	negs	r3, r3
 8003e16:	2200      	movs	r2, #0
 8003e18:	2101      	movs	r1, #1
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f002 f84a 	bl	8005eb4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8003e20:	2302      	movs	r3, #2
 8003e22:	425b      	negs	r3, r3
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f002 f843 	bl	8005eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000

08003e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e40:	230c      	movs	r3, #12
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	0018      	movs	r0, r3
 8003e46:	2314      	movs	r3, #20
 8003e48:	001a      	movs	r2, r3
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	f005 ffc5 	bl	8009dda <memset>
  if(hi2c->Instance==I2C1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_I2C_MspInit+0x80>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d12a      	bne.n	8003eb0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_I2C_MspInit+0x84>)
 8003e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5e:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <HAL_I2C_MspInit+0x84>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	430a      	orrs	r2, r1
 8003e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_I2C_MspInit+0x84>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e72:	210c      	movs	r1, #12
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	22c0      	movs	r2, #192	; 0xc0
 8003e78:	00d2      	lsls	r2, r2, #3
 8003e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e7c:	187b      	adds	r3, r7, r1
 8003e7e:	2212      	movs	r2, #18
 8003e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	2201      	movs	r2, #1
 8003e86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	2206      	movs	r2, #6
 8003e92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e94:	187a      	adds	r2, r7, r1
 8003e96:	23a0      	movs	r3, #160	; 0xa0
 8003e98:	05db      	lsls	r3, r3, #23
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f002 f83b 	bl	8005f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_I2C_MspInit+0x84>)
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_I2C_MspInit+0x84>)
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	0389      	lsls	r1, r1, #14
 8003eac:	430a      	orrs	r2, r1
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b008      	add	sp, #32
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40005400 	.word	0x40005400
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_I2C_MspDeInit+0x38>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10d      	bne.n	8003eee <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <HAL_I2C_MspDeInit+0x3c>)
 8003ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_I2C_MspDeInit+0x3c>)
 8003ed8:	4909      	ldr	r1, [pc, #36]	; (8003f00 <HAL_I2C_MspDeInit+0x40>)
 8003eda:	400a      	ands	r2, r1
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003ede:	23c0      	movs	r3, #192	; 0xc0
 8003ee0:	00da      	lsls	r2, r3, #3
 8003ee2:	23a0      	movs	r3, #160	; 0xa0
 8003ee4:	05db      	lsls	r3, r3, #23
 8003ee6:	0011      	movs	r1, r2
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f002 f993 	bl	8006214 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40005400 	.word	0x40005400
 8003efc:	40021000 	.word	0x40021000
 8003f00:	ffdfffff 	.word	0xffdfffff

08003f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b08b      	sub	sp, #44	; 0x2c
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	2314      	movs	r3, #20
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	0018      	movs	r0, r3
 8003f12:	2314      	movs	r3, #20
 8003f14:	001a      	movs	r2, r3
 8003f16:	2100      	movs	r1, #0
 8003f18:	f005 ff5f 	bl	8009dda <memset>
  if(hspi->Instance==SPI1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <HAL_SPI_MspInit+0xc4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d14b      	bne.n	8003fbe <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f26:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2a:	4b28      	ldr	r3, [pc, #160]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	0149      	lsls	r1, r1, #5
 8003f30:	430a      	orrs	r2, r1
 8003f32:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f34:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f40:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	2201      	movs	r2, #1
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4c:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f52:	2102      	movs	r1, #2
 8003f54:	430a      	orrs	r2, r1
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f58:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003f64:	2414      	movs	r4, #20
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	22d0      	movs	r2, #208	; 0xd0
 8003f6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	193b      	adds	r3, r7, r4
 8003f6e:	2202      	movs	r2, #2
 8003f70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	193b      	adds	r3, r7, r4
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f78:	193b      	adds	r3, r7, r4
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003f7e:	193b      	adds	r3, r7, r4
 8003f80:	2200      	movs	r2, #0
 8003f82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	193a      	adds	r2, r7, r4
 8003f86:	23a0      	movs	r3, #160	; 0xa0
 8003f88:	05db      	lsls	r3, r3, #23
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f001 ffc3 	bl	8005f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8003f92:	0021      	movs	r1, r4
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	2208      	movs	r2, #8
 8003f98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	4a06      	ldr	r2, [pc, #24]	; (8003fd0 <HAL_SPI_MspInit+0xcc>)
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	0010      	movs	r0, r2
 8003fba:	f001 ffad 	bl	8005f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b00b      	add	sp, #44	; 0x2c
 8003fc4:	bd90      	pop	{r4, r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	40013000 	.word	0x40013000
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	50000400 	.word	0x50000400

08003fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	05db      	lsls	r3, r3, #23
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d105      	bne.n	8003ff4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <HAL_TIM_Base_MspInit+0x28>)
 8003fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_TIM_Base_MspInit+0x28>)
 8003fee:	2101      	movs	r1, #1
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000

08004000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	230c      	movs	r3, #12
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	0018      	movs	r0, r3
 800400e:	2314      	movs	r3, #20
 8004010:	001a      	movs	r2, r3
 8004012:	2100      	movs	r1, #0
 8004014:	f005 fee1 	bl	8009dda <memset>
  if(huart->Instance==USART1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a17      	ldr	r2, [pc, #92]	; (800407c <HAL_UART_MspInit+0x7c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d128      	bne.n	8004074 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_UART_MspInit+0x80>)
 8004024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <HAL_UART_MspInit+0x80>)
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	01c9      	lsls	r1, r1, #7
 800402c:	430a      	orrs	r2, r1
 800402e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_UART_MspInit+0x80>)
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_UART_MspInit+0x80>)
 8004036:	2102      	movs	r1, #2
 8004038:	430a      	orrs	r2, r1
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_UART_MspInit+0x80>)
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	2202      	movs	r2, #2
 8004042:	4013      	ands	r3, r2
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004048:	210c      	movs	r1, #12
 800404a:	187b      	adds	r3, r7, r1
 800404c:	22c0      	movs	r2, #192	; 0xc0
 800404e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	187b      	adds	r3, r7, r1
 8004052:	2202      	movs	r2, #2
 8004054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	187b      	adds	r3, r7, r1
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2203      	movs	r2, #3
 8004060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004062:	187b      	adds	r3, r7, r1
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004068:	187b      	adds	r3, r7, r1
 800406a:	4a06      	ldr	r2, [pc, #24]	; (8004084 <HAL_UART_MspInit+0x84>)
 800406c:	0019      	movs	r1, r3
 800406e:	0010      	movs	r0, r2
 8004070:	f001 ff52 	bl	8005f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b008      	add	sp, #32
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40013800 	.word	0x40013800
 8004080:	40021000 	.word	0x40021000
 8004084:	50000400 	.word	0x50000400

08004088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004096:	e7fe      	b.n	8004096 <HardFault_Handler+0x4>

08004098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 80040b0:	f001 fe24 	bl	8005cfc <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	b09c      	sub	sp, #112	; 0x70
 80040c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed_digital = 0;
 80040c2:	2362      	movs	r3, #98	; 0x62
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	2200      	movs	r2, #0
 80040c8:	801a      	strh	r2, [r3, #0]
  uint16_t wind_temp_digital = 0;
 80040ca:	2360      	movs	r3, #96	; 0x60
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	2200      	movs	r2, #0
 80040d0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch2 = 0;
 80040d2:	235e      	movs	r3, #94	; 0x5e
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch3 = 0;
 80040da:	235c      	movs	r3, #92	; 0x5c
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	2200      	movs	r2, #0
 80040e0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch4 = 0;
 80040e2:	235a      	movs	r3, #90	; 0x5a
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	2200      	movs	r2, #0
 80040e8:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch5 = 0;
 80040ea:	2358      	movs	r3, #88	; 0x58
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	2200      	movs	r2, #0
 80040f0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch6 = 0;
 80040f2:	2356      	movs	r3, #86	; 0x56
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	2200      	movs	r2, #0
 80040f8:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch7 = 0;
 80040fa:	2354      	movs	r3, #84	; 0x54
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	2200      	movs	r2, #0
 8004100:	801a      	strh	r2, [r3, #0]
  char wifi_data1[2];
  float bme280_pressure = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	66fb      	str	r3, [r7, #108]	; 0x6c
  float bme280_temperature = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	66bb      	str	r3, [r7, #104]	; 0x68
  float bme280_humidity = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	667b      	str	r3, [r7, #100]	; 0x64
  float md_wind_speed = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	64fb      	str	r3, [r7, #76]	; 0x4c
  float md_temp = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
  char data[70];

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004116:	4b4b      	ldr	r3, [pc, #300]	; (8004244 <TIM2_IRQHandler+0x188>)
 8004118:	0018      	movs	r0, r3
 800411a:	f004 fcaa 	bl	8008a72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Toggle_User_LED();
 800411e:	f000 f8a1 	bl	8004264 <Toggle_User_LED>
  if (bme280_init_complete == 0)
 8004122:	4b49      	ldr	r3, [pc, #292]	; (8004248 <TIM2_IRQHandler+0x18c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d100      	bne.n	800412c <TIM2_IRQHandler+0x70>
 800412a:	e086      	b.n	800423a <TIM2_IRQHandler+0x17e>
  {
	  return;
  }

  /* Read ADC Wind Speed Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_SPEED_CH, &wind_speed_digital);
 800412c:	2462      	movs	r4, #98	; 0x62
 800412e:	193b      	adds	r3, r7, r4
 8004130:	0019      	movs	r1, r3
 8004132:	2080      	movs	r0, #128	; 0x80
 8004134:	f000 f8c4 	bl	80042c0 <Read_ADC>

  /* Read ADC Wind Temp Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_TEMP_CH, &wind_temp_digital);
 8004138:	2560      	movs	r5, #96	; 0x60
 800413a:	197b      	adds	r3, r7, r5
 800413c:	0019      	movs	r1, r3
 800413e:	2090      	movs	r0, #144	; 0x90
 8004140:	f000 f8be 	bl	80042c0 <Read_ADC>

  Read_ADC((uint8_t) ADC_DIN_CH2, &din_ch2);
 8004144:	235e      	movs	r3, #94	; 0x5e
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	0019      	movs	r1, r3
 800414a:	20a0      	movs	r0, #160	; 0xa0
 800414c:	f000 f8b8 	bl	80042c0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH3, &din_ch3);
 8004150:	235c      	movs	r3, #92	; 0x5c
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	0019      	movs	r1, r3
 8004156:	20b0      	movs	r0, #176	; 0xb0
 8004158:	f000 f8b2 	bl	80042c0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH4, &din_ch4);
 800415c:	235a      	movs	r3, #90	; 0x5a
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	0019      	movs	r1, r3
 8004162:	20c0      	movs	r0, #192	; 0xc0
 8004164:	f000 f8ac 	bl	80042c0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH5, &din_ch5);
 8004168:	2358      	movs	r3, #88	; 0x58
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	0019      	movs	r1, r3
 800416e:	20d0      	movs	r0, #208	; 0xd0
 8004170:	f000 f8a6 	bl	80042c0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH6, &din_ch6);
 8004174:	2356      	movs	r3, #86	; 0x56
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	0019      	movs	r1, r3
 800417a:	20e0      	movs	r0, #224	; 0xe0
 800417c:	f000 f8a0 	bl	80042c0 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH7, &din_ch7);
 8004180:	2354      	movs	r3, #84	; 0x54
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	0019      	movs	r1, r3
 8004186:	20f0      	movs	r0, #240	; 0xf0
 8004188:	f000 f89a 	bl	80042c0 <Read_ADC>

  /* Data is output to comp_data */
  bme280_read_data_forced_mode(&bme280_device);
 800418c:	4b2f      	ldr	r3, [pc, #188]	; (800424c <TIM2_IRQHandler+0x190>)
 800418e:	0018      	movs	r0, r3
 8004190:	f000 faba 	bl	8004708 <bme280_read_data_forced_mode>

  /* Calculations Done Here */
  // TODO: Double check later if this is properly compensated
  calculate_wind_speed(wind_speed_digital, wind_temp_digital, &md_wind_speed, &md_temp);
 8004194:	193b      	adds	r3, r7, r4
 8004196:	8818      	ldrh	r0, [r3, #0]
 8004198:	197b      	adds	r3, r7, r5
 800419a:	8819      	ldrh	r1, [r3, #0]
 800419c:	2348      	movs	r3, #72	; 0x48
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	224c      	movs	r2, #76	; 0x4c
 80041a2:	18ba      	adds	r2, r7, r2
 80041a4:	f000 fa00 	bl	80045a8 <calculate_wind_speed>
  bme280_temperature = comp_data.temperature * 0.01; // Celsius
 80041a8:	4b29      	ldr	r3, [pc, #164]	; (8004250 <TIM2_IRQHandler+0x194>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7fe f955 	bl	800245c <__aeabi_i2d>
 80041b2:	4a28      	ldr	r2, [pc, #160]	; (8004254 <TIM2_IRQHandler+0x198>)
 80041b4:	4b28      	ldr	r3, [pc, #160]	; (8004258 <TIM2_IRQHandler+0x19c>)
 80041b6:	f7fd fb45 	bl	8001844 <__aeabi_dmul>
 80041ba:	0003      	movs	r3, r0
 80041bc:	000c      	movs	r4, r1
 80041be:	0018      	movs	r0, r3
 80041c0:	0021      	movs	r1, r4
 80041c2:	f7fe fa09 	bl	80025d8 <__aeabi_d2f>
 80041c6:	1c03      	adds	r3, r0, #0
 80041c8:	66bb      	str	r3, [r7, #104]	; 0x68
  bme280_humidity = comp_data.humidity / 1024.0; // Output is in percentage... so 43.33 is 43.33 %rH
 80041ca:	4b21      	ldr	r3, [pc, #132]	; (8004250 <TIM2_IRQHandler+0x194>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7fe f97e 	bl	80024d0 <__aeabi_ui2d>
 80041d4:	2200      	movs	r2, #0
 80041d6:	4b21      	ldr	r3, [pc, #132]	; (800425c <TIM2_IRQHandler+0x1a0>)
 80041d8:	f7fc ff2a 	bl	8001030 <__aeabi_ddiv>
 80041dc:	0003      	movs	r3, r0
 80041de:	000c      	movs	r4, r1
 80041e0:	0018      	movs	r0, r3
 80041e2:	0021      	movs	r1, r4
 80041e4:	f7fe f9f8 	bl	80025d8 <__aeabi_d2f>
 80041e8:	1c03      	adds	r3, r0, #0
 80041ea:	667b      	str	r3, [r7, #100]	; 0x64
  bme280_pressure = comp_data.pressure * 0.01; // hPa Pressure Units... for Debug Purposes
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <TIM2_IRQHandler+0x194>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fe f96d 	bl	80024d0 <__aeabi_ui2d>
 80041f6:	4a17      	ldr	r2, [pc, #92]	; (8004254 <TIM2_IRQHandler+0x198>)
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <TIM2_IRQHandler+0x19c>)
 80041fa:	f7fd fb23 	bl	8001844 <__aeabi_dmul>
 80041fe:	0003      	movs	r3, r0
 8004200:	000c      	movs	r4, r1
 8004202:	0018      	movs	r0, r3
 8004204:	0021      	movs	r1, r4
 8004206:	f7fe f9e7 	bl	80025d8 <__aeabi_d2f>
 800420a:	1c03      	adds	r3, r0, #0
 800420c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Transmit over WiFi */
  strcpy(data,createJSON(md_wind_speed, bme280_temperature));
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004212:	1c11      	adds	r1, r2, #0
 8004214:	1c18      	adds	r0, r3, #0
 8004216:	f000 f91b 	bl	8004450 <createJSON>
 800421a:	0002      	movs	r2, r0
 800421c:	003b      	movs	r3, r7
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f005 fef1 	bl	800a008 <strcpy>

  transmitWifi(data);
 8004226:	003b      	movs	r3, r7
 8004228:	0018      	movs	r0, r3
 800422a:	f000 f889 	bl	8004340 <transmitWifi>
//  /* Toggle SS1 Pin Low to select sensor */
    HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <TIM2_IRQHandler+0x1a4>)
 8004230:	2120      	movs	r1, #32
 8004232:	0018      	movs	r0, r3
 8004234:	f002 f8ed 	bl	8006412 <HAL_GPIO_TogglePin>
 8004238:	e000      	b.n	800423c <TIM2_IRQHandler+0x180>
	  return;
 800423a:	46c0      	nop			; (mov r8, r8)
//  // TODO: Read from Sensor
//  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
//  /* Toggle SS2 High to un-select sensor */

  /* USER CODE END TIM2_IRQn 1 */
}
 800423c:	46bd      	mov	sp, r7
 800423e:	b01c      	add	sp, #112	; 0x70
 8004240:	bdb0      	pop	{r4, r5, r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	2000038c 	.word	0x2000038c
 8004248:	20000208 	.word	0x20000208
 800424c:	20000274 	.word	0x20000274
 8004250:	20000268 	.word	0x20000268
 8004254:	47ae147b 	.word	0x47ae147b
 8004258:	3f847ae1 	.word	0x3f847ae1
 800425c:	40900000 	.word	0x40900000
 8004260:	50000800 	.word	0x50000800

08004264 <Toggle_User_LED>:
/* USER CODE BEGIN 1 */
/**
 * 	@brief Toggle LED
 */
void Toggle_User_LED()
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8004268:	23a0      	movs	r3, #160	; 0xa0
 800426a:	05db      	lsls	r3, r3, #23
 800426c:	2120      	movs	r1, #32
 800426e:	0018      	movs	r0, r3
 8004270:	f002 f8cf 	bl	8006412 <HAL_GPIO_TogglePin>
}
 8004274:	46c0      	nop			; (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <Toggle_ADC_Chip_Select>:

/**
 * 	@brief Toggle ADC Chip Select Pin
 */
void Toggle_ADC_Chip_Select()
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ADC_CS_GPIO_Port, ADC_CS_PIN);
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <Toggle_ADC_Chip_Select+0x14>)
 8004282:	2110      	movs	r1, #16
 8004284:	0018      	movs	r0, r3
 8004286:	f002 f8c4 	bl	8006412 <HAL_GPIO_TogglePin>
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	50000800 	.word	0x50000800

08004294 <HAL_SPI_Transmit_Start>:

/**
 * 	@brief Transmit Start Bit in HAL SPI
 */
void HAL_SPI_Transmit_Start()
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
	uint8_t adc_start = (uint8_t) ADC_START_BIT;
 800429a:	1dfb      	adds	r3, r7, #7
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &adc_start, sizeof(adc_start), SPI_TIMEOUT);
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_SPI_Transmit_Start+0x24>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	1df9      	adds	r1, r7, #7
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <HAL_SPI_Transmit_Start+0x28>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	f003 fe55 	bl	8007f58 <HAL_SPI_Transmit>
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b002      	add	sp, #8
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	0800c22c 	.word	0x0800c22c
 80042bc:	20000334 	.word	0x20000334

080042c0 <Read_ADC>:
 * 	@brief Read MCP3008 ADC based on given channel enum.
 *	Output is set to the pointer of a uint16_t set in the parameters.
 *	Output will be set to 0 before setting the ADC Value to it.
 */
void Read_ADC(uint8_t adc_ch_select, uint16_t *output)
{
 80042c0:	b5b0      	push	{r4, r5, r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	0002      	movs	r2, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	1dfb      	adds	r3, r7, #7
 80042cc:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_1 = 0;
 80042ce:	240f      	movs	r4, #15
 80042d0:	193b      	adds	r3, r7, r4
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_2 = 0;
 80042d6:	250e      	movs	r5, #14
 80042d8:	197b      	adds	r3, r7, r5
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
	/* Set output to 0 */
	*output = 0;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	801a      	strh	r2, [r3, #0]

	/* Toggle SS0 Pin (CS) Low to use ADC */
	Toggle_ADC_Chip_Select();
 80042e4:	f7ff ffca 	bl	800427c <Toggle_ADC_Chip_Select>
	/* Send to DIN CH0 Select */
	HAL_SPI_Transmit_Start();
 80042e8:	f7ff ffd4 	bl	8004294 <HAL_SPI_Transmit_Start>
	HAL_SPI_TransmitReceive(&hspi1, &adc_ch_select, &adc_byte_1, sizeof(adc_ch_select), SPI_TIMEOUT);
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <Read_ADC+0x78>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	193a      	adds	r2, r7, r4
 80042f2:	1df9      	adds	r1, r7, #7
 80042f4:	4811      	ldr	r0, [pc, #68]	; (800433c <Read_ADC+0x7c>)
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2301      	movs	r3, #1
 80042fa:	f004 f899 	bl	8008430 <HAL_SPI_TransmitReceive>
	/* Read from Dout of ADC */
	HAL_SPI_Receive(&hspi1, &adc_byte_2, sizeof(adc_byte_2), SPI_TIMEOUT);
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <Read_ADC+0x78>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	1979      	adds	r1, r7, r5
 8004304:	480d      	ldr	r0, [pc, #52]	; (800433c <Read_ADC+0x7c>)
 8004306:	2201      	movs	r2, #1
 8004308:	f003 ff74 	bl	80081f4 <HAL_SPI_Receive>
	/* Toggle SS0 High (CS) to signify we're done with a round of the ADC */
	Toggle_ADC_Chip_Select();
 800430c:	f7ff ffb6 	bl	800427c <Toggle_ADC_Chip_Select>
	/* Set Output to adc_value */
	*output = ADC_16_TO_10_BIT(adc_byte_1, adc_byte_2);
 8004310:	193b      	adds	r3, r7, r4
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	b21a      	sxth	r2, r3
 8004318:	197b      	adds	r3, r7, r5
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b21b      	sxth	r3, r3
 800431e:	4313      	orrs	r3, r2
 8004320:	b21b      	sxth	r3, r3
 8004322:	b29b      	uxth	r3, r3
 8004324:	059b      	lsls	r3, r3, #22
 8004326:	0d9b      	lsrs	r3, r3, #22
 8004328:	b29a      	uxth	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	801a      	strh	r2, [r3, #0]
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b004      	add	sp, #16
 8004334:	bdb0      	pop	{r4, r5, r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	0800c22c 	.word	0x0800c22c
 800433c:	20000334 	.word	0x20000334

08004340 <transmitWifi>:

/**
 * TODO: Write function to write data to WiFi module
 */
void transmitWifi(char* info)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b090      	sub	sp, #64	; 0x40
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

	char start[] = "AT+CIPSTART=\"TCP\",\"40.71.11.134\",80\r\n";
 8004348:	2118      	movs	r1, #24
 800434a:	187b      	adds	r3, r7, r1
 800434c:	4a3c      	ldr	r2, [pc, #240]	; (8004440 <transmitWifi+0x100>)
 800434e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004350:	c331      	stmia	r3!, {r0, r4, r5}
 8004352:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004354:	c331      	stmia	r3!, {r0, r4, r5}
 8004356:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004358:	c331      	stmia	r3!, {r0, r4, r5}
 800435a:	8812      	ldrh	r2, [r2, #0]
 800435c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) start, strlen(start), 500);
 800435e:	000c      	movs	r4, r1
 8004360:	187b      	adds	r3, r7, r1
 8004362:	0018      	movs	r0, r3
 8004364:	f7fb fed0 	bl	8000108 <strlen>
 8004368:	0003      	movs	r3, r0
 800436a:	b29a      	uxth	r2, r3
 800436c:	23fa      	movs	r3, #250	; 0xfa
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	0021      	movs	r1, r4
 8004372:	1879      	adds	r1, r7, r1
 8004374:	4833      	ldr	r0, [pc, #204]	; (8004444 <transmitWifi+0x104>)
 8004376:	f004 ffa5 	bl	80092c4 <HAL_UART_Transmit>
	HAL_Delay(2000);
 800437a:	23fa      	movs	r3, #250	; 0xfa
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	0018      	movs	r0, r3
 8004380:	f001 fcd2 	bl	8005d28 <HAL_Delay>
	char send[] = "AT+CIPSEND=";
 8004384:	200c      	movs	r0, #12
 8004386:	183b      	adds	r3, r7, r0
 8004388:	4a2f      	ldr	r2, [pc, #188]	; (8004448 <transmitWifi+0x108>)
 800438a:	ca32      	ldmia	r2!, {r1, r4, r5}
 800438c:	c332      	stmia	r3!, {r1, r4, r5}
	char ret[] = "\r\n";
 800438e:	2408      	movs	r4, #8
 8004390:	193b      	adds	r3, r7, r4
 8004392:	4a2e      	ldr	r2, [pc, #184]	; (800444c <transmitWifi+0x10c>)
 8004394:	8811      	ldrh	r1, [r2, #0]
 8004396:	8019      	strh	r1, [r3, #0]
 8004398:	7892      	ldrb	r2, [r2, #2]
 800439a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *) send, strlen(send), 500);
 800439c:	0005      	movs	r5, r0
 800439e:	183b      	adds	r3, r7, r0
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fb feb1 	bl	8000108 <strlen>
 80043a6:	0003      	movs	r3, r0
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	23fa      	movs	r3, #250	; 0xfa
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	0028      	movs	r0, r5
 80043b0:	1839      	adds	r1, r7, r0
 80043b2:	4824      	ldr	r0, [pc, #144]	; (8004444 <transmitWifi+0x104>)
 80043b4:	f004 ff86 	bl	80092c4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80043b8:	23fa      	movs	r3, #250	; 0xfa
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	0018      	movs	r0, r3
 80043be:	f001 fcb3 	bl	8005d28 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)sizeof(info), sizeof(uint16_t), 500);
 80043c2:	23fa      	movs	r3, #250	; 0xfa
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	481f      	ldr	r0, [pc, #124]	; (8004444 <transmitWifi+0x104>)
 80043c8:	2202      	movs	r2, #2
 80043ca:	2104      	movs	r1, #4
 80043cc:	f004 ff7a 	bl	80092c4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80043d0:	23fa      	movs	r3, #250	; 0xfa
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	0018      	movs	r0, r3
 80043d6:	f001 fca7 	bl	8005d28 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	0018      	movs	r0, r3
 80043de:	f7fb fe93 	bl	8000108 <strlen>
 80043e2:	0003      	movs	r3, r0
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	23fa      	movs	r3, #250	; 0xfa
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	1939      	adds	r1, r7, r4
 80043ec:	4815      	ldr	r0, [pc, #84]	; (8004444 <transmitWifi+0x104>)
 80043ee:	f004 ff69 	bl	80092c4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80043f2:	23fa      	movs	r3, #250	; 0xfa
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f001 fc96 	bl	8005d28 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) info, strlen(info), 500);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f7fb fe82 	bl	8000108 <strlen>
 8004404:	0003      	movs	r3, r0
 8004406:	b29a      	uxth	r2, r3
 8004408:	23fa      	movs	r3, #250	; 0xfa
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	480d      	ldr	r0, [pc, #52]	; (8004444 <transmitWifi+0x104>)
 8004410:	f004 ff58 	bl	80092c4 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8004414:	23fa      	movs	r3, #250	; 0xfa
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	0018      	movs	r0, r3
 800441a:	f001 fc85 	bl	8005d28 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *) ret, strlen(ret), 500);
 800441e:	193b      	adds	r3, r7, r4
 8004420:	0018      	movs	r0, r3
 8004422:	f7fb fe71 	bl	8000108 <strlen>
 8004426:	0003      	movs	r3, r0
 8004428:	b29a      	uxth	r2, r3
 800442a:	23fa      	movs	r3, #250	; 0xfa
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	1939      	adds	r1, r7, r4
 8004430:	4804      	ldr	r0, [pc, #16]	; (8004444 <transmitWifi+0x104>)
 8004432:	f004 ff47 	bl	80092c4 <HAL_UART_Transmit>
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b010      	add	sp, #64	; 0x40
 800443c:	bdb0      	pop	{r4, r5, r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	0800c134 	.word	0x0800c134
 8004444:	200002b4 	.word	0x200002b4
 8004448:	0800c15c 	.word	0x0800c15c
 800444c:	0800c168 	.word	0x0800c168

08004450 <createJSON>:

char *createJSON(float wind_speed, float temperature)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
	cJSON *id = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
	cJSON *timestamp = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
	cJSON *speed = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
	cJSON *temp = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
	char *string = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]

	cJSON *data = cJSON_CreateObject();
 800446e:	f7ff f8a5 	bl	80035bc <cJSON_CreateObject>
 8004472:	0003      	movs	r3, r0
 8004474:	60bb      	str	r3, [r7, #8]
	if (data == NULL)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d052      	beq.n	8004522 <createJSON+0xd2>
	{
		goto end;
	}
	id = cJSON_CreateNumber(1);
 800447c:	2300      	movs	r3, #0
 800447e:	4c32      	ldr	r4, [pc, #200]	; (8004548 <createJSON+0xf8>)
 8004480:	0018      	movs	r0, r3
 8004482:	0021      	movs	r1, r4
 8004484:	f7ff f854 	bl	8003530 <cJSON_CreateNumber>
 8004488:	0003      	movs	r3, r0
 800448a:	61bb      	str	r3, [r7, #24]
	if (id == NULL)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d049      	beq.n	8004526 <createJSON+0xd6>
	{
		goto end;
	}
	cJSON_AddItemToObject(data, "system_id", id);
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	492d      	ldr	r1, [pc, #180]	; (800454c <createJSON+0xfc>)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	0018      	movs	r0, r3
 800449a:	f7ff f833 	bl	8003504 <cJSON_AddItemToObject>
	timestamp = cJSON_CreateNumber(1);
 800449e:	2300      	movs	r3, #0
 80044a0:	4c29      	ldr	r4, [pc, #164]	; (8004548 <createJSON+0xf8>)
 80044a2:	0018      	movs	r0, r3
 80044a4:	0021      	movs	r1, r4
 80044a6:	f7ff f843 	bl	8003530 <cJSON_CreateNumber>
 80044aa:	0003      	movs	r3, r0
 80044ac:	617b      	str	r3, [r7, #20]
	cJSON_AddItemToObject(data, "timestamp", timestamp);
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4927      	ldr	r1, [pc, #156]	; (8004550 <createJSON+0x100>)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff f825 	bl	8003504 <cJSON_AddItemToObject>
	temp = cJSON_CreateNumber(temperature);
 80044ba:	6838      	ldr	r0, [r7, #0]
 80044bc:	f7fe f83a 	bl	8002534 <__aeabi_f2d>
 80044c0:	0003      	movs	r3, r0
 80044c2:	000c      	movs	r4, r1
 80044c4:	0018      	movs	r0, r3
 80044c6:	0021      	movs	r1, r4
 80044c8:	f7ff f832 	bl	8003530 <cJSON_CreateNumber>
 80044cc:	0003      	movs	r3, r0
 80044ce:	60fb      	str	r3, [r7, #12]
	if (temp == NULL)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d029      	beq.n	800452a <createJSON+0xda>
	{
		goto end;
	}
	cJSON_AddItemToObject(data, "temperature", temp);
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	491e      	ldr	r1, [pc, #120]	; (8004554 <createJSON+0x104>)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	0018      	movs	r0, r3
 80044de:	f7ff f811 	bl	8003504 <cJSON_AddItemToObject>
	speed = cJSON_CreateNumber(wind_speed);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fe f826 	bl	8002534 <__aeabi_f2d>
 80044e8:	0003      	movs	r3, r0
 80044ea:	000c      	movs	r4, r1
 80044ec:	0018      	movs	r0, r3
 80044ee:	0021      	movs	r1, r4
 80044f0:	f7ff f81e 	bl	8003530 <cJSON_CreateNumber>
 80044f4:	0003      	movs	r3, r0
 80044f6:	613b      	str	r3, [r7, #16]
	if (speed == NULL)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d017      	beq.n	800452e <createJSON+0xde>
	{
		goto end;
	}
	cJSON_AddItemToObject(data, "wind_speed", speed);
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4915      	ldr	r1, [pc, #84]	; (8004558 <createJSON+0x108>)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fe fffd 	bl	8003504 <cJSON_AddItemToObject>

	string = cJSON_Print(data);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	0018      	movs	r0, r3
 800450e:	f7fe fccf 	bl	8002eb0 <cJSON_Print>
 8004512:	0003      	movs	r3, r0
 8004514:	61fb      	str	r3, [r7, #28]
	if (string == NULL)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <createJSON+0xe2>
	{
		return -1;
 800451c:	2301      	movs	r3, #1
 800451e:	425b      	negs	r3, r3
 8004520:	e00d      	b.n	800453e <createJSON+0xee>
		goto end;
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	e006      	b.n	8004534 <createJSON+0xe4>
		goto end;
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	e004      	b.n	8004534 <createJSON+0xe4>
		goto end;
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	e002      	b.n	8004534 <createJSON+0xe4>
		goto end;
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	e000      	b.n	8004534 <createJSON+0xe4>
	}

	end:
 8004532:	46c0      	nop			; (mov r8, r8)
	cJSON_Delete(data);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	0018      	movs	r0, r3
 8004538:	f7fe f940 	bl	80027bc <cJSON_Delete>
	return string;
 800453c:	69fb      	ldr	r3, [r7, #28]
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b009      	add	sp, #36	; 0x24
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	3ff00000 	.word	0x3ff00000
 800454c:	0800c16c 	.word	0x0800c16c
 8004550:	0800c178 	.word	0x0800c178
 8004554:	0800c184 	.word	0x0800c184
 8004558:	0800c190 	.word	0x0800c190

0800455c <adc_to_voltage>:
/**
 * 	@brief Function handles converting adc value to a voltage.
 * 	Call reverse_and_shift_adc_value before hand.
 */
static float adc_to_voltage(uint16_t adc_value)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	0002      	movs	r2, r0
 8004564:	1dbb      	adds	r3, r7, #6
 8004566:	801a      	strh	r2, [r3, #0]
	return 5.0 * adc_value / 1024;;
 8004568:	1dbb      	adds	r3, r7, #6
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	0018      	movs	r0, r3
 800456e:	f7fd ff75 	bl	800245c <__aeabi_i2d>
 8004572:	2200      	movs	r2, #0
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <adc_to_voltage+0x44>)
 8004576:	f7fd f965 	bl	8001844 <__aeabi_dmul>
 800457a:	0003      	movs	r3, r0
 800457c:	000c      	movs	r4, r1
 800457e:	0018      	movs	r0, r3
 8004580:	0021      	movs	r1, r4
 8004582:	2200      	movs	r2, #0
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <adc_to_voltage+0x48>)
 8004586:	f7fc fd53 	bl	8001030 <__aeabi_ddiv>
 800458a:	0003      	movs	r3, r0
 800458c:	000c      	movs	r4, r1
 800458e:	0018      	movs	r0, r3
 8004590:	0021      	movs	r1, r4
 8004592:	f7fe f821 	bl	80025d8 <__aeabi_d2f>
 8004596:	1c03      	adds	r3, r0, #0
}
 8004598:	1c18      	adds	r0, r3, #0
 800459a:	46bd      	mov	sp, r7
 800459c:	b003      	add	sp, #12
 800459e:	bd90      	pop	{r4, r7, pc}
 80045a0:	40140000 	.word	0x40140000
 80045a4:	40900000 	.word	0x40900000

080045a8 <calculate_wind_speed>:
 *	TODO: Wait 40 seconds until we do the first measurement to let the wind sensor stabilize
 *	TODO: Use the Bosch sensor for ambiant temperature instead of the onboard Modern Device Sensor
 * 	https://moderndevice.com/uncategorized/calibrating-rev-p-wind-sensor-new-regression/?preview=true
 */
static void calculate_wind_speed(uint16_t wind_speed_adc, uint16_t wind_temp_adc, float *wind_speed, float *temp_amb)
{
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60ba      	str	r2, [r7, #8]
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	240e      	movs	r4, #14
 80045b4:	193b      	adds	r3, r7, r4
 80045b6:	1c02      	adds	r2, r0, #0
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	250c      	movs	r5, #12
 80045bc:	197b      	adds	r3, r7, r5
 80045be:	1c0a      	adds	r2, r1, #0
 80045c0:	801a      	strh	r2, [r3, #0]
	// Calculate Vin from ADC
	float wind_speed_vout = adc_to_voltage(wind_speed_adc);
 80045c2:	193b      	adds	r3, r7, r4
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7ff ffc8 	bl	800455c <adc_to_voltage>
 80045cc:	1c03      	adds	r3, r0, #0
 80045ce:	617b      	str	r3, [r7, #20]
	float wind_temp_vout = adc_to_voltage(wind_temp_adc);
 80045d0:	197b      	adds	r3, r7, r5
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7ff ffc1 	bl	800455c <adc_to_voltage>
 80045da:	1c03      	adds	r3, r0, #0
 80045dc:	613b      	str	r3, [r7, #16]

	// Zero Voltage not set, set here
	// TODO: Check if 40 seconds of operation have passed before we decided to set the zero voltage.
	if (zero_voltage == -1) {
 80045de:	4b3c      	ldr	r3, [pc, #240]	; (80046d0 <calculate_wind_speed+0x128>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	493c      	ldr	r1, [pc, #240]	; (80046d4 <calculate_wind_speed+0x12c>)
 80045e4:	1c18      	adds	r0, r3, #0
 80045e6:	f7fb fe6d 	bl	80002c4 <__aeabi_fcmpeq>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d002      	beq.n	80045f4 <calculate_wind_speed+0x4c>
		zero_voltage = wind_speed_vout;
 80045ee:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <calculate_wind_speed+0x128>)
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	601a      	str	r2, [r3, #0]
	}

	// Calculate Ambient Temperature in Celsius
	*temp_amb = (wind_temp_vout - 0.400) / 0.0195;
 80045f4:	6938      	ldr	r0, [r7, #16]
 80045f6:	f7fd ff9d 	bl	8002534 <__aeabi_f2d>
 80045fa:	4a37      	ldr	r2, [pc, #220]	; (80046d8 <calculate_wind_speed+0x130>)
 80045fc:	4b37      	ldr	r3, [pc, #220]	; (80046dc <calculate_wind_speed+0x134>)
 80045fe:	f7fd fb93 	bl	8001d28 <__aeabi_dsub>
 8004602:	0003      	movs	r3, r0
 8004604:	000c      	movs	r4, r1
 8004606:	0018      	movs	r0, r3
 8004608:	0021      	movs	r1, r4
 800460a:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <calculate_wind_speed+0x138>)
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <calculate_wind_speed+0x13c>)
 800460e:	f7fc fd0f 	bl	8001030 <__aeabi_ddiv>
 8004612:	0003      	movs	r3, r0
 8004614:	000c      	movs	r4, r1
 8004616:	0018      	movs	r0, r3
 8004618:	0021      	movs	r1, r4
 800461a:	f7fd ffdd 	bl	80025d8 <__aeabi_d2f>
 800461e:	1c02      	adds	r2, r0, #0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	601a      	str	r2, [r3, #0]

	// Calculate the Wind Speed in MPH
	*wind_speed = (wind_speed_vout - zero_voltage) / (3.038517 * pow(*temp_amb, 0.115157));
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <calculate_wind_speed+0x128>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1c19      	adds	r1, r3, #0
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	f7fc f820 	bl	8000670 <__aeabi_fsub>
 8004630:	1c03      	adds	r3, r0, #0
 8004632:	1c18      	adds	r0, r3, #0
 8004634:	f7fd ff7e 	bl	8002534 <__aeabi_f2d>
 8004638:	0005      	movs	r5, r0
 800463a:	000e      	movs	r6, r1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	1c18      	adds	r0, r3, #0
 8004642:	f7fd ff77 	bl	8002534 <__aeabi_f2d>
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <calculate_wind_speed+0x140>)
 8004648:	4c28      	ldr	r4, [pc, #160]	; (80046ec <calculate_wind_speed+0x144>)
 800464a:	001a      	movs	r2, r3
 800464c:	0023      	movs	r3, r4
 800464e:	f006 fcd9 	bl	800b004 <pow>
 8004652:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <calculate_wind_speed+0x148>)
 8004654:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <calculate_wind_speed+0x14c>)
 8004656:	f7fd f8f5 	bl	8001844 <__aeabi_dmul>
 800465a:	0003      	movs	r3, r0
 800465c:	000c      	movs	r4, r1
 800465e:	001a      	movs	r2, r3
 8004660:	0023      	movs	r3, r4
 8004662:	0028      	movs	r0, r5
 8004664:	0031      	movs	r1, r6
 8004666:	f7fc fce3 	bl	8001030 <__aeabi_ddiv>
 800466a:	0003      	movs	r3, r0
 800466c:	000c      	movs	r4, r1
 800466e:	0018      	movs	r0, r3
 8004670:	0021      	movs	r1, r4
 8004672:	f7fd ffb1 	bl	80025d8 <__aeabi_d2f>
 8004676:	1c02      	adds	r2, r0, #0
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	601a      	str	r2, [r3, #0]
	*wind_speed /= 0.087288;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	1c18      	adds	r0, r3, #0
 8004682:	f7fd ff57 	bl	8002534 <__aeabi_f2d>
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <calculate_wind_speed+0x150>)
 8004688:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <calculate_wind_speed+0x154>)
 800468a:	f7fc fcd1 	bl	8001030 <__aeabi_ddiv>
 800468e:	0003      	movs	r3, r0
 8004690:	000c      	movs	r4, r1
 8004692:	0018      	movs	r0, r3
 8004694:	0021      	movs	r1, r4
 8004696:	f7fd ff9f 	bl	80025d8 <__aeabi_d2f>
 800469a:	1c02      	adds	r2, r0, #0
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	601a      	str	r2, [r3, #0]
	*wind_speed = pow(*wind_speed, 3.009364);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1c18      	adds	r0, r3, #0
 80046a6:	f7fd ff45 	bl	8002534 <__aeabi_f2d>
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <calculate_wind_speed+0x158>)
 80046ac:	4c15      	ldr	r4, [pc, #84]	; (8004704 <calculate_wind_speed+0x15c>)
 80046ae:	001a      	movs	r2, r3
 80046b0:	0023      	movs	r3, r4
 80046b2:	f006 fca7 	bl	800b004 <pow>
 80046b6:	0003      	movs	r3, r0
 80046b8:	000c      	movs	r4, r1
 80046ba:	0018      	movs	r0, r3
 80046bc:	0021      	movs	r1, r4
 80046be:	f7fd ff8b 	bl	80025d8 <__aeabi_d2f>
 80046c2:	1c02      	adds	r2, r0, #0
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	601a      	str	r2, [r3, #0]
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b007      	add	sp, #28
 80046ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d0:	20000010 	.word	0x20000010
 80046d4:	bf800000 	.word	0xbf800000
 80046d8:	9999999a 	.word	0x9999999a
 80046dc:	3fd99999 	.word	0x3fd99999
 80046e0:	d916872b 	.word	0xd916872b
 80046e4:	3f93f7ce 	.word	0x3f93f7ce
 80046e8:	dce7cd03 	.word	0xdce7cd03
 80046ec:	3fbd7aed 	.word	0x3fbd7aed
 80046f0:	003ab863 	.word	0x003ab863
 80046f4:	40084ee2 	.word	0x40084ee2
 80046f8:	a1554fbe 	.word	0xa1554fbe
 80046fc:	3fb65881 	.word	0x3fb65881
 8004700:	6ece13f5 	.word	0x6ece13f5
 8004704:	4008132d 	.word	0x4008132d

08004708 <bme280_read_data_forced_mode>:

void bme280_read_data_forced_mode(struct bme280_dev *dev)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	bme280_rslt = 0;
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <bme280_read_data_forced_mode+0x78>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
	/* Set measurement mode to Forced */
	bme280_rslt |= bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	0019      	movs	r1, r3
 800471a:	2001      	movs	r0, #1
 800471c:	f000 fa82 	bl	8004c24 <bme280_set_sensor_mode>
 8004720:	0003      	movs	r3, r0
 8004722:	001a      	movs	r2, r3
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <bme280_read_data_forced_mode+0x78>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b25b      	sxtb	r3, r3
 800472a:	4313      	orrs	r3, r2
 800472c:	b25a      	sxtb	r2, r3
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <bme280_read_data_forced_mode+0x78>)
 8004730:	701a      	strb	r2, [r3, #0]
	/* Wait for the measurement to complete */
	dev->delay_ms(500);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	22fa      	movs	r2, #250	; 0xfa
 8004738:	0052      	lsls	r2, r2, #1
 800473a:	0010      	movs	r0, r2
 800473c:	4798      	blx	r3
	/* Output data to comp_data */
	bme280_rslt |= bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <bme280_read_data_forced_mode+0x7c>)
 8004742:	0019      	movs	r1, r3
 8004744:	2007      	movs	r0, #7
 8004746:	f000 fb4a 	bl	8004dde <bme280_get_sensor_data>
 800474a:	0003      	movs	r3, r0
 800474c:	001a      	movs	r2, r3
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <bme280_read_data_forced_mode+0x78>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	b25b      	sxtb	r3, r3
 8004754:	4313      	orrs	r3, r2
 8004756:	b25a      	sxtb	r2, r3
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <bme280_read_data_forced_mode+0x78>)
 800475a:	701a      	strb	r2, [r3, #0]
	/* Set sensor to Sleep */
	bme280_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, dev);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0019      	movs	r1, r3
 8004760:	2000      	movs	r0, #0
 8004762:	f000 fa5f 	bl	8004c24 <bme280_set_sensor_mode>
 8004766:	0003      	movs	r3, r0
 8004768:	001a      	movs	r2, r3
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <bme280_read_data_forced_mode+0x78>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b25b      	sxtb	r3, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	b25a      	sxtb	r2, r3
 8004774:	4b02      	ldr	r3, [pc, #8]	; (8004780 <bme280_read_data_forced_mode+0x78>)
 8004776:	701a      	strb	r2, [r3, #0]
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}
 8004780:	2000020d 	.word	0x2000020d
 8004784:	20000268 	.word	0x20000268

08004788 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <_sbrk+0x50>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <_sbrk+0x16>
		heap_end = &end;
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <_sbrk+0x50>)
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <_sbrk+0x54>)
 800479c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <_sbrk+0x50>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <_sbrk+0x50>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	18d3      	adds	r3, r2, r3
 80047ac:	466a      	mov	r2, sp
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d907      	bls.n	80047c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047b2:	f005 faa7 	bl	8009d04 <__errno>
 80047b6:	0003      	movs	r3, r0
 80047b8:	220c      	movs	r2, #12
 80047ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80047bc:	2301      	movs	r3, #1
 80047be:	425b      	negs	r3, r3
 80047c0:	e006      	b.n	80047d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <_sbrk+0x50>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	18d2      	adds	r2, r2, r3
 80047ca:	4b03      	ldr	r3, [pc, #12]	; (80047d8 <_sbrk+0x50>)
 80047cc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80047ce:	68fb      	ldr	r3, [r7, #12]
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b004      	add	sp, #16
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000210 	.word	0x20000210
 80047dc:	200003d8 	.word	0x200003d8

080047e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <SystemInit+0x64>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b16      	ldr	r3, [pc, #88]	; (8004844 <SystemInit+0x64>)
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	0049      	lsls	r1, r1, #1
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <SystemInit+0x64>)
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	4b13      	ldr	r3, [pc, #76]	; (8004844 <SystemInit+0x64>)
 80047f8:	4913      	ldr	r1, [pc, #76]	; (8004848 <SystemInit+0x68>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <SystemInit+0x64>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <SystemInit+0x64>)
 8004804:	4911      	ldr	r1, [pc, #68]	; (800484c <SystemInit+0x6c>)
 8004806:	400a      	ands	r2, r1
 8004808:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <SystemInit+0x64>)
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <SystemInit+0x64>)
 8004810:	2101      	movs	r1, #1
 8004812:	438a      	bics	r2, r1
 8004814:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <SystemInit+0x64>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <SystemInit+0x64>)
 800481c:	490c      	ldr	r1, [pc, #48]	; (8004850 <SystemInit+0x70>)
 800481e:	400a      	ands	r2, r1
 8004820:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
 RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <SystemInit+0x64>)
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <SystemInit+0x64>)
 8004828:	490a      	ldr	r1, [pc, #40]	; (8004854 <SystemInit+0x74>)
 800482a:	400a      	ands	r2, r1
 800482c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <SystemInit+0x64>)
 8004830:	2200      	movs	r2, #0
 8004832:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <SystemInit+0x78>)
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	0512      	lsls	r2, r2, #20
 800483a:	609a      	str	r2, [r3, #8]
#endif
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	40021000 	.word	0x40021000
 8004848:	88ff400c 	.word	0x88ff400c
 800484c:	fef6fff6 	.word	0xfef6fff6
 8004850:	fffbffff 	.word	0xfffbffff
 8004854:	ff02ffff 	.word	0xff02ffff
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800485c:	480d      	ldr	r0, [pc, #52]	; (8004894 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800485e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004862:	e003      	b.n	800486c <LoopCopyDataInit>

08004864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800486a:	3104      	adds	r1, #4

0800486c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800486c:	480b      	ldr	r0, [pc, #44]	; (800489c <LoopForever+0xa>)
  ldr  r3, =_edata
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004874:	d3f6      	bcc.n	8004864 <CopyDataInit>
  ldr  r2, =_sbss
 8004876:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004878:	e002      	b.n	8004880 <LoopFillZerobss>

0800487a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800487a:	2300      	movs	r3, #0
  str  r3, [r2]
 800487c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800487e:	3204      	adds	r2, #4

08004880 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <LoopForever+0x16>)
  cmp  r2, r3
 8004882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004884:	d3f9      	bcc.n	800487a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004886:	f7ff ffab 	bl	80047e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800488a:	f005 fa41 	bl	8009d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800488e:	f7fe feab 	bl	80035e8 <main>

08004892 <LoopForever>:

LoopForever:
    b LoopForever
 8004892:	e7fe      	b.n	8004892 <LoopForever>
   ldr   r0, =_estack
 8004894:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004898:	0800c4b0 	.word	0x0800c4b0
  ldr  r0, =_sdata
 800489c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048a0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80048a4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80048a8:	200003d8 	.word	0x200003d8

080048ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048ac:	e7fe      	b.n	80048ac <ADC1_COMP_IRQHandler>

080048ae <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80048ae:	b5b0      	push	{r4, r5, r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 80048b6:	230e      	movs	r3, #14
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	2205      	movs	r2, #5
 80048bc:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 80048be:	230d      	movs	r3, #13
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80048c6:	250f      	movs	r5, #15
 80048c8:	197c      	adds	r4, r7, r5
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f001 f9a7 	bl	8005c20 <null_ptr_check>
 80048d2:	0003      	movs	r3, r0
 80048d4:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80048d6:	197b      	adds	r3, r7, r5
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d14a      	bne.n	8004976 <bme280_init+0xc8>
    {
        while (try_count)
 80048e0:	e039      	b.n	8004956 <bme280_init+0xa8>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80048e2:	250f      	movs	r5, #15
 80048e4:	197c      	adds	r4, r7, r5
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	220d      	movs	r2, #13
 80048ea:	18b9      	adds	r1, r7, r2
 80048ec:	2201      	movs	r2, #1
 80048ee:	20d0      	movs	r0, #208	; 0xd0
 80048f0:	f000 f849 	bl	8004986 <bme280_get_regs>
 80048f4:	0003      	movs	r3, r0
 80048f6:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 80048f8:	197b      	adds	r3, r7, r5
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11f      	bne.n	8004942 <bme280_init+0x94>
 8004902:	230d      	movs	r3, #13
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b60      	cmp	r3, #96	; 0x60
 800490a:	d11a      	bne.n	8004942 <bme280_init+0x94>
            {
                dev->chip_id = chip_id;
 800490c:	230d      	movs	r3, #13
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8004916:	250f      	movs	r5, #15
 8004918:	197c      	adds	r4, r7, r5
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f000 f9f6 	bl	8004d0e <bme280_soft_reset>
 8004922:	0003      	movs	r3, r0
 8004924:	7023      	strb	r3, [r4, #0]
                if (rslt == BME280_OK)
 8004926:	197b      	adds	r3, r7, r5
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b25b      	sxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d118      	bne.n	8004962 <bme280_init+0xb4>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8004930:	230f      	movs	r3, #15
 8004932:	18fc      	adds	r4, r7, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 ffc4 	bl	80058c4 <get_calib_data>
 800493c:	0003      	movs	r3, r0
 800493e:	7023      	strb	r3, [r4, #0]
                }
                break;
 8004940:	e00f      	b.n	8004962 <bme280_init+0xb4>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2001      	movs	r0, #1
 8004948:	4798      	blx	r3
            --try_count;
 800494a:	220e      	movs	r2, #14
 800494c:	18bb      	adds	r3, r7, r2
 800494e:	18ba      	adds	r2, r7, r2
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	3a01      	subs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8004956:	230e      	movs	r3, #14
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1c0      	bne.n	80048e2 <bme280_init+0x34>
 8004960:	e000      	b.n	8004964 <bme280_init+0xb6>
                break;
 8004962:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8004964:	230e      	movs	r3, #14
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <bme280_init+0xc8>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 800496e:	230f      	movs	r3, #15
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	22fe      	movs	r2, #254	; 0xfe
 8004974:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8004976:	230f      	movs	r3, #15
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b25b      	sxtb	r3, r3
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b004      	add	sp, #16
 8004984:	bdb0      	pop	{r4, r5, r7, pc}

08004986 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8004986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	0011      	movs	r1, r2
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	230f      	movs	r3, #15
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	1c02      	adds	r2, r0, #0
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	230c      	movs	r3, #12
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	1c0a      	adds	r2, r1, #0
 80049a0:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80049a2:	2517      	movs	r5, #23
 80049a4:	197c      	adds	r4, r7, r5
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f001 f939 	bl	8005c20 <null_ptr_check>
 80049ae:	0003      	movs	r3, r0
 80049b0:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80049b2:	197b      	adds	r3, r7, r5
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b25b      	sxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d126      	bne.n	8004a0a <bme280_get_regs+0x84>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	789b      	ldrb	r3, [r3, #2]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d007      	beq.n	80049d4 <bme280_get_regs+0x4e>
        {
            reg_addr = reg_addr | 0x80;
 80049c4:	220f      	movs	r2, #15
 80049c6:	18bb      	adds	r3, r7, r2
 80049c8:	18ba      	adds	r2, r7, r2
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	4249      	negs	r1, r1
 80049d0:	430a      	orrs	r2, r1
 80049d2:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685d      	ldr	r5, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7858      	ldrb	r0, [r3, #1]
 80049dc:	2317      	movs	r3, #23
 80049de:	18fc      	adds	r4, r7, r3
 80049e0:	220c      	movs	r2, #12
 80049e2:	18bb      	adds	r3, r7, r2
 80049e4:	881e      	ldrh	r6, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	210f      	movs	r1, #15
 80049ea:	187b      	adds	r3, r7, r1
 80049ec:	7819      	ldrb	r1, [r3, #0]
 80049ee:	0033      	movs	r3, r6
 80049f0:	47a8      	blx	r5
 80049f2:	0003      	movs	r3, r0
 80049f4:	7023      	strb	r3, [r4, #0]

        /* Check for communication error */
        if (rslt != BME280_OK)
 80049f6:	2317      	movs	r3, #23
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <bme280_get_regs+0x84>
        {
            rslt = BME280_E_COMM_FAIL;
 8004a02:	2317      	movs	r3, #23
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	22fc      	movs	r2, #252	; 0xfc
 8004a08:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8004a0a:	2317      	movs	r3, #23
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b25b      	sxtb	r3, r3
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b007      	add	sp, #28
 8004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a1a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8004a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1c:	b08d      	sub	sp, #52	; 0x34
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	1dfb      	adds	r3, r7, #7
 8004a28:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8004a2a:	1dfb      	adds	r3, r7, #7
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b0a      	cmp	r3, #10
 8004a30:	d902      	bls.n	8004a38 <bme280_set_regs+0x1e>
    {
        len = 10;
 8004a32:	1dfb      	adds	r3, r7, #7
 8004a34:	220a      	movs	r2, #10
 8004a36:	701a      	strb	r2, [r3, #0]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004a38:	252f      	movs	r5, #47	; 0x2f
 8004a3a:	197c      	adds	r4, r7, r5
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f001 f8ee 	bl	8005c20 <null_ptr_check>
 8004a44:	0003      	movs	r3, r0
 8004a46:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8004a48:	197b      	adds	r3, r7, r5
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b25b      	sxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d16b      	bne.n	8004b2a <bme280_set_regs+0x110>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d068      	beq.n	8004b2a <bme280_set_regs+0x110>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d065      	beq.n	8004b2a <bme280_set_regs+0x110>
    {
        if (len != 0)
 8004a5e:	1dfb      	adds	r3, r7, #7
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d05c      	beq.n	8004b20 <bme280_set_regs+0x106>
        {
            temp_buff[0] = reg_data[0];
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	2314      	movs	r3, #20
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	789b      	ldrb	r3, [r3, #2]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d01e      	beq.n	8004ab6 <bme280_set_regs+0x9c>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004a78:	232b      	movs	r3, #43	; 0x2b
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e012      	b.n	8004aa8 <bme280_set_regs+0x8e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004a82:	202b      	movs	r0, #43	; 0x2b
 8004a84:	183b      	adds	r3, r7, r0
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	183b      	adds	r3, r7, r0
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	18cb      	adds	r3, r1, r3
 8004a96:	217f      	movs	r1, #127	; 0x7f
 8004a98:	400a      	ands	r2, r1
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004a9e:	183b      	adds	r3, r7, r0
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	183b      	adds	r3, r7, r0
 8004aa4:	3201      	adds	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	232b      	movs	r3, #43	; 0x2b
 8004aaa:	18fa      	adds	r2, r7, r3
 8004aac:	1dfb      	adds	r3, r7, #7
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3e5      	bcc.n	8004a82 <bme280_set_regs+0x68>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d911      	bls.n	8004ae2 <bme280_set_regs+0xc8>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8004abe:	1dfb      	adds	r3, r7, #7
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	2114      	movs	r1, #20
 8004ac6:	1879      	adds	r1, r7, r1
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 ff48 	bl	800595e <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8004ace:	1dfb      	adds	r3, r7, #7
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	18db      	adds	r3, r3, r3
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	232c      	movs	r3, #44	; 0x2c
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	3a01      	subs	r2, #1
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	e004      	b.n	8004aec <bme280_set_regs+0xd2>
            }
            else
            {
                temp_len = len;
 8004ae2:	232c      	movs	r3, #44	; 0x2c
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	1dfa      	adds	r2, r7, #7
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	801a      	strh	r2, [r3, #0]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689d      	ldr	r5, [r3, #8]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	7858      	ldrb	r0, [r3, #1]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	7819      	ldrb	r1, [r3, #0]
 8004af8:	262f      	movs	r6, #47	; 0x2f
 8004afa:	19bc      	adds	r4, r7, r6
 8004afc:	232c      	movs	r3, #44	; 0x2c
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	2214      	movs	r2, #20
 8004b04:	18ba      	adds	r2, r7, r2
 8004b06:	47a8      	blx	r5
 8004b08:	0003      	movs	r3, r0
 8004b0a:	7023      	strb	r3, [r4, #0]

            /* Check for communication error */
            if (rslt != BME280_OK)
 8004b0c:	19bb      	adds	r3, r7, r6
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00e      	beq.n	8004b34 <bme280_set_regs+0x11a>
            {
                rslt = BME280_E_COMM_FAIL;
 8004b16:	232f      	movs	r3, #47	; 0x2f
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	22fc      	movs	r2, #252	; 0xfc
 8004b1c:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8004b1e:	e009      	b.n	8004b34 <bme280_set_regs+0x11a>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8004b20:	232f      	movs	r3, #47	; 0x2f
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	22fd      	movs	r2, #253	; 0xfd
 8004b26:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8004b28:	e004      	b.n	8004b34 <bme280_set_regs+0x11a>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004b2a:	232f      	movs	r3, #47	; 0x2f
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	22ff      	movs	r2, #255	; 0xff
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e000      	b.n	8004b36 <bme280_set_regs+0x11c>
        if (len != 0)
 8004b34:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8004b36:	232f      	movs	r3, #47	; 0x2f
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b25b      	sxtb	r3, r3
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b00d      	add	sp, #52	; 0x34
 8004b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b46 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8004b46:	b5b0      	push	{r4, r5, r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	6039      	str	r1, [r7, #0]
 8004b50:	1dfb      	adds	r3, r7, #7
 8004b52:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004b54:	250f      	movs	r5, #15
 8004b56:	197c      	adds	r4, r7, r5
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f001 f860 	bl	8005c20 <null_ptr_check>
 8004b60:	0003      	movs	r3, r0
 8004b62:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004b64:	197b      	adds	r3, r7, r5
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d152      	bne.n	8004c14 <bme280_set_sensor_settings+0xce>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8004b6e:	250f      	movs	r5, #15
 8004b70:	197c      	adds	r4, r7, r5
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	230e      	movs	r3, #14
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	0011      	movs	r1, r2
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f000 f89c 	bl	8004cb8 <bme280_get_sensor_mode>
 8004b80:	0003      	movs	r3, r0
 8004b82:	7023      	strb	r3, [r4, #0]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8004b84:	197b      	adds	r3, r7, r5
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <bme280_set_sensor_settings+0x62>
 8004b8e:	230e      	movs	r3, #14
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <bme280_set_sensor_settings+0x62>
        {
            rslt = put_device_to_sleep(dev);
 8004b98:	230f      	movs	r3, #15
 8004b9a:	18fc      	adds	r4, r7, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f000 fc08 	bl	80053b4 <put_device_to_sleep>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	7023      	strb	r3, [r4, #0]
        }
        if (rslt == BME280_OK)
 8004ba8:	230f      	movs	r3, #15
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b25b      	sxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d12f      	bne.n	8004c14 <bme280_set_sensor_settings+0xce>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8004bb4:	1dfb      	adds	r3, r7, #7
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	0019      	movs	r1, r3
 8004bba:	2007      	movs	r0, #7
 8004bbc:	f001 f80b 	bl	8005bd6 <are_settings_changed>
 8004bc0:	1e03      	subs	r3, r0, #0
 8004bc2:	d00c      	beq.n	8004bde <bme280_set_sensor_settings+0x98>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	3338      	adds	r3, #56	; 0x38
 8004bc8:	0019      	movs	r1, r3
 8004bca:	230f      	movs	r3, #15
 8004bcc:	18fc      	adds	r4, r7, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	1dfb      	adds	r3, r7, #7
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 f9fd 	bl	8004fd4 <set_osr_settings>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8004bde:	230f      	movs	r3, #15
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	b25b      	sxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d114      	bne.n	8004c14 <bme280_set_sensor_settings+0xce>
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	0019      	movs	r1, r3
 8004bf0:	2018      	movs	r0, #24
 8004bf2:	f000 fff0 	bl	8005bd6 <are_settings_changed>
 8004bf6:	1e03      	subs	r3, r0, #0
 8004bf8:	d00c      	beq.n	8004c14 <bme280_set_sensor_settings+0xce>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	3338      	adds	r3, #56	; 0x38
 8004bfe:	0019      	movs	r1, r3
 8004c00:	230f      	movs	r3, #15
 8004c02:	18fc      	adds	r4, r7, r3
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	1dfb      	adds	r3, r7, #7
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 faad 	bl	800516a <set_filter_standby_settings>
 8004c10:	0003      	movs	r3, r0
 8004c12:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8004c14:	230f      	movs	r3, #15
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	b25b      	sxtb	r3, r3
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b004      	add	sp, #16
 8004c22:	bdb0      	pop	{r4, r5, r7, pc}

08004c24 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004c32:	250f      	movs	r5, #15
 8004c34:	197c      	adds	r4, r7, r5
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 fff1 	bl	8005c20 <null_ptr_check>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004c42:	197b      	adds	r3, r7, r5
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d12d      	bne.n	8004ca8 <bme280_set_sensor_mode+0x84>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004c4c:	250f      	movs	r5, #15
 8004c4e:	197c      	adds	r4, r7, r5
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	230e      	movs	r3, #14
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	0011      	movs	r1, r2
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f000 f82d 	bl	8004cb8 <bme280_get_sensor_mode>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004c62:	197b      	adds	r3, r7, r5
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10c      	bne.n	8004c86 <bme280_set_sensor_mode+0x62>
 8004c6c:	230e      	movs	r3, #14
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <bme280_set_sensor_mode+0x62>
        {
            rslt = put_device_to_sleep(dev);
 8004c76:	230f      	movs	r3, #15
 8004c78:	18fc      	adds	r4, r7, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 fb99 	bl	80053b4 <put_device_to_sleep>
 8004c82:	0003      	movs	r3, r0
 8004c84:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8004c86:	230f      	movs	r3, #15
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <bme280_set_sensor_mode+0x84>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8004c92:	230f      	movs	r3, #15
 8004c94:	18fc      	adds	r4, r7, r3
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	1dfb      	adds	r3, r7, #7
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	0011      	movs	r1, r2
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 fb47 	bl	8005332 <write_power_mode>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b25b      	sxtb	r3, r3
}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b004      	add	sp, #16
 8004cb6:	bdb0      	pop	{r4, r5, r7, pc}

08004cb8 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8004cb8:	b5b0      	push	{r4, r5, r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004cc2:	250f      	movs	r5, #15
 8004cc4:	197c      	adds	r4, r7, r5
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 ffa9 	bl	8005c20 <null_ptr_check>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004cd2:	197b      	adds	r3, r7, r5
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d110      	bne.n	8004cfe <bme280_get_sensor_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004cdc:	230f      	movs	r3, #15
 8004cde:	18fc      	adds	r4, r7, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	20f4      	movs	r0, #244	; 0xf4
 8004ce8:	f7ff fe4d 	bl	8004986 <bme280_get_regs>
 8004cec:	0003      	movs	r3, r0
 8004cee:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	b25b      	sxtb	r3, r3
}
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b004      	add	sp, #16
 8004d0c:	bdb0      	pop	{r4, r5, r7, pc}

08004d0e <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004d0e:	b5b0      	push	{r4, r5, r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8004d16:	230d      	movs	r3, #13
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	22e0      	movs	r2, #224	; 0xe0
 8004d1c:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8004d1e:	230c      	movs	r3, #12
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8004d26:	230e      	movs	r3, #14
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8004d2e:	230b      	movs	r3, #11
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	22b6      	movs	r2, #182	; 0xb6
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004d36:	250f      	movs	r5, #15
 8004d38:	197c      	adds	r4, r7, r5
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 ff6f 	bl	8005c20 <null_ptr_check>
 8004d42:	0003      	movs	r3, r0
 8004d44:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8004d46:	197b      	adds	r3, r7, r5
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d13e      	bne.n	8004dce <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8004d50:	250f      	movs	r5, #15
 8004d52:	197c      	adds	r4, r7, r5
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	220b      	movs	r2, #11
 8004d58:	18b9      	adds	r1, r7, r2
 8004d5a:	220d      	movs	r2, #13
 8004d5c:	18b8      	adds	r0, r7, r2
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f7ff fe5b 	bl	8004a1a <bme280_set_regs>
 8004d64:	0003      	movs	r3, r0
 8004d66:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8004d68:	197b      	adds	r3, r7, r5
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d12d      	bne.n	8004dce <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2002      	movs	r0, #2
 8004d78:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8004d7a:	250f      	movs	r5, #15
 8004d7c:	197c      	adds	r4, r7, r5
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	220c      	movs	r2, #12
 8004d82:	18b9      	adds	r1, r7, r2
 8004d84:	2201      	movs	r2, #1
 8004d86:	20f3      	movs	r0, #243	; 0xf3
 8004d88:	f7ff fdfd 	bl	8004986 <bme280_get_regs>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	7023      	strb	r3, [r4, #0]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8004d90:	197b      	adds	r3, r7, r5
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10e      	bne.n	8004db8 <bme280_soft_reset+0xaa>
 8004d9a:	220e      	movs	r2, #14
 8004d9c:	18bb      	adds	r3, r7, r2
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	18ba      	adds	r2, r7, r2
 8004da2:	1e59      	subs	r1, r3, #1
 8004da4:	7011      	strb	r1, [r2, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <bme280_soft_reset+0xaa>
 8004daa:	230c      	movs	r3, #12
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	001a      	movs	r2, r3
 8004db2:	2301      	movs	r3, #1
 8004db4:	4013      	ands	r3, r2
 8004db6:	d1dc      	bne.n	8004d72 <bme280_soft_reset+0x64>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8004db8:	230c      	movs	r3, #12
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	001a      	movs	r2, r3
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d003      	beq.n	8004dce <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8004dc6:	230f      	movs	r3, #15
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	22fa      	movs	r2, #250	; 0xfa
 8004dcc:	701a      	strb	r2, [r3, #0]
            }

        }
    }

    return rslt;
 8004dce:	230f      	movs	r3, #15
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b25b      	sxtb	r3, r3
}
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b004      	add	sp, #16
 8004ddc:	bdb0      	pop	{r4, r5, r7, pc}

08004dde <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8004dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de0:	b08b      	sub	sp, #44	; 0x2c
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	230f      	movs	r3, #15
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	1c02      	adds	r2, r0, #0
 8004dee:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8004df0:	231c      	movs	r3, #28
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	0018      	movs	r0, r3
 8004df6:	2308      	movs	r3, #8
 8004df8:	001a      	movs	r2, r3
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	f004 ffed 	bl	8009dda <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 8004e00:	2310      	movs	r3, #16
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	0018      	movs	r0, r3
 8004e06:	230c      	movs	r3, #12
 8004e08:	001a      	movs	r2, r3
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	f004 ffe5 	bl	8009dda <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8004e10:	2527      	movs	r5, #39	; 0x27
 8004e12:	197c      	adds	r4, r7, r5
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 ff02 	bl	8005c20 <null_ptr_check>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8004e20:	197b      	adds	r3, r7, r5
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b25b      	sxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d12a      	bne.n	8004e80 <bme280_get_sensor_data+0xa2>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d027      	beq.n	8004e80 <bme280_get_sensor_data+0xa2>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8004e30:	2527      	movs	r5, #39	; 0x27
 8004e32:	197c      	adds	r4, r7, r5
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	221c      	movs	r2, #28
 8004e38:	18b9      	adds	r1, r7, r2
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	20f7      	movs	r0, #247	; 0xf7
 8004e3e:	f7ff fda2 	bl	8004986 <bme280_get_regs>
 8004e42:	0003      	movs	r3, r0
 8004e44:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004e46:	197b      	adds	r3, r7, r5
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11b      	bne.n	8004e88 <bme280_get_sensor_data+0xaa>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004e50:	2610      	movs	r6, #16
 8004e52:	19ba      	adds	r2, r7, r6
 8004e54:	231c      	movs	r3, #28
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	0011      	movs	r1, r2
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f000 f81c 	bl	8004e98 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3310      	adds	r3, #16
 8004e64:	001d      	movs	r5, r3
 8004e66:	2327      	movs	r3, #39	; 0x27
 8004e68:	18fc      	adds	r4, r7, r3
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	19b9      	adds	r1, r7, r6
 8004e6e:	230f      	movs	r3, #15
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	7818      	ldrb	r0, [r3, #0]
 8004e74:	002b      	movs	r3, r5
 8004e76:	f000 f853 	bl	8004f20 <bme280_compensate_data>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004e7e:	e003      	b.n	8004e88 <bme280_get_sensor_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004e80:	2327      	movs	r3, #39	; 0x27
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004e88:	2327      	movs	r3, #39	; 0x27
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b25b      	sxtb	r3, r3
}
 8004e90:	0018      	movs	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b00b      	add	sp, #44	; 0x2c
 8004e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e98 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	031b      	lsls	r3, r3, #12
 8004ea8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3301      	adds	r3, #1
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3302      	adds	r3, #2
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3303      	adds	r3, #3
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	031b      	lsls	r3, r3, #12
 8004ed6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3305      	adds	r3, #5
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3306      	adds	r3, #6
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3307      	adds	r3, #7
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b006      	add	sp, #24
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	230f      	movs	r3, #15
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	1c02      	adds	r2, r0, #0
 8004f32:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 8004f34:	2317      	movs	r3, #23
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d03c      	beq.n	8004fbc <bme280_compensate_data+0x9c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d039      	beq.n	8004fbc <bme280_compensate_data+0x9c>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d036      	beq.n	8004fbc <bme280_compensate_data+0x9c>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8004f60:	230f      	movs	r3, #15
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2207      	movs	r2, #7
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d008      	beq.n	8004f7e <bme280_compensate_data+0x5e>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	0011      	movs	r1, r2
 8004f72:	0018      	movs	r0, r3
 8004f74:	f000 fa80 	bl	8005478 <compensate_temperature>
 8004f78:	0002      	movs	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]
        }
        if (sensor_comp & BME280_PRESS)
 8004f7e:	230f      	movs	r3, #15
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d008      	beq.n	8004f9c <bme280_compensate_data+0x7c>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	0011      	movs	r1, r2
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 fad7 	bl	8005544 <compensate_pressure>
 8004f96:	0002      	movs	r2, r0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]
        }
        if (sensor_comp & BME280_HUM)
 8004f9c:	230f      	movs	r3, #15
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d00d      	beq.n	8004fc4 <bme280_compensate_data+0xa4>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	0011      	movs	r1, r2
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 fbca 	bl	8005748 <compensate_humidity>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 8004fba:	e003      	b.n	8004fc4 <bme280_compensate_data+0xa4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8004fbc:	2317      	movs	r3, #23
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	22ff      	movs	r2, #255	; 0xff
 8004fc2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004fc4:	2317      	movs	r3, #23
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b25b      	sxtb	r3, r3
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b006      	add	sp, #24
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	210f      	movs	r1, #15
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	1c02      	adds	r2, r0, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004fe6:	2317      	movs	r3, #23
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	2201      	movs	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8004fee:	187b      	adds	r3, r7, r1
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d009      	beq.n	800500c <set_osr_settings+0x38>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8004ff8:	2317      	movs	r3, #23
 8004ffa:	18fc      	adds	r4, r7, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	0011      	movs	r1, r2
 8005002:	0018      	movs	r0, r3
 8005004:	f000 f81c 	bl	8005040 <set_osr_humidity_settings>
 8005008:	0003      	movs	r3, r0
 800500a:	7023      	strb	r3, [r4, #0]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800500c:	230f      	movs	r3, #15
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2203      	movs	r2, #3
 8005014:	4013      	ands	r3, r2
 8005016:	d00b      	beq.n	8005030 <set_osr_settings+0x5c>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8005018:	2317      	movs	r3, #23
 800501a:	18fc      	adds	r4, r7, r3
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	230f      	movs	r3, #15
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 f853 	bl	80050d2 <set_osr_press_temp_settings>
 800502c:	0003      	movs	r3, r0
 800502e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8005030:	2317      	movs	r3, #23
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b25b      	sxtb	r3, r3
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b007      	add	sp, #28
 800503e:	bd90      	pop	{r4, r7, pc}

08005040 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8005040:	b5b0      	push	{r4, r5, r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800504a:	200c      	movs	r0, #12
 800504c:	183b      	adds	r3, r7, r0
 800504e:	22f2      	movs	r2, #242	; 0xf2
 8005050:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	789b      	ldrb	r3, [r3, #2]
 8005056:	2207      	movs	r2, #7
 8005058:	4013      	ands	r3, r2
 800505a:	b2da      	uxtb	r2, r3
 800505c:	210e      	movs	r1, #14
 800505e:	187b      	adds	r3, r7, r1
 8005060:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8005062:	250f      	movs	r5, #15
 8005064:	197c      	adds	r4, r7, r5
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	1879      	adds	r1, r7, r1
 800506a:	1838      	adds	r0, r7, r0
 800506c:	2201      	movs	r2, #1
 800506e:	f7ff fcd4 	bl	8004a1a <bme280_set_regs>
 8005072:	0003      	movs	r3, r0
 8005074:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8005076:	197b      	adds	r3, r7, r5
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b25b      	sxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d120      	bne.n	80050c2 <set_osr_humidity_settings+0x82>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8005080:	210c      	movs	r1, #12
 8005082:	187b      	adds	r3, r7, r1
 8005084:	22f4      	movs	r2, #244	; 0xf4
 8005086:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8005088:	187b      	adds	r3, r7, r1
 800508a:	7818      	ldrb	r0, [r3, #0]
 800508c:	250f      	movs	r5, #15
 800508e:	197c      	adds	r4, r7, r5
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	220d      	movs	r2, #13
 8005094:	18b9      	adds	r1, r7, r2
 8005096:	2201      	movs	r2, #1
 8005098:	f7ff fc75 	bl	8004986 <bme280_get_regs>
 800509c:	0003      	movs	r3, r0
 800509e:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80050a0:	197b      	adds	r3, r7, r5
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b25b      	sxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <set_osr_humidity_settings+0x82>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80050aa:	230f      	movs	r3, #15
 80050ac:	18fc      	adds	r4, r7, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	220d      	movs	r2, #13
 80050b2:	18b9      	adds	r1, r7, r2
 80050b4:	220c      	movs	r2, #12
 80050b6:	18b8      	adds	r0, r7, r2
 80050b8:	2201      	movs	r2, #1
 80050ba:	f7ff fcae 	bl	8004a1a <bme280_set_regs>
 80050be:	0003      	movs	r3, r0
 80050c0:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 80050c2:	230f      	movs	r3, #15
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	b25b      	sxtb	r3, r3
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bdb0      	pop	{r4, r5, r7, pc}

080050d2 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80050d2:	b5b0      	push	{r4, r5, r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	230f      	movs	r3, #15
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	1c02      	adds	r2, r0, #0
 80050e2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80050e4:	2116      	movs	r1, #22
 80050e6:	187b      	adds	r3, r7, r1
 80050e8:	22f4      	movs	r2, #244	; 0xf4
 80050ea:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	7818      	ldrb	r0, [r3, #0]
 80050f0:	2517      	movs	r5, #23
 80050f2:	197c      	adds	r4, r7, r5
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2215      	movs	r2, #21
 80050f8:	18b9      	adds	r1, r7, r2
 80050fa:	2201      	movs	r2, #1
 80050fc:	f7ff fc43 	bl	8004986 <bme280_get_regs>
 8005100:	0003      	movs	r3, r0
 8005102:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8005104:	197b      	adds	r3, r7, r5
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b25b      	sxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d125      	bne.n	800515a <set_osr_press_temp_settings+0x88>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800510e:	230f      	movs	r3, #15
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2201      	movs	r2, #1
 8005116:	4013      	ands	r3, r2
 8005118:	d006      	beq.n	8005128 <set_osr_press_temp_settings+0x56>
        {
            fill_osr_press_settings(&reg_data, settings);
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	2315      	movs	r3, #21
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	0011      	movs	r1, r2
 8005122:	0018      	movs	r0, r3
 8005124:	f000 f8a0 	bl	8005268 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8005128:	230f      	movs	r3, #15
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2202      	movs	r2, #2
 8005130:	4013      	ands	r3, r2
 8005132:	d006      	beq.n	8005142 <set_osr_press_temp_settings+0x70>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	2315      	movs	r3, #21
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	0011      	movs	r1, r2
 800513c:	0018      	movs	r0, r3
 800513e:	f000 f8ae 	bl	800529e <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8005142:	2317      	movs	r3, #23
 8005144:	18fc      	adds	r4, r7, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2215      	movs	r2, #21
 800514a:	18b9      	adds	r1, r7, r2
 800514c:	2216      	movs	r2, #22
 800514e:	18b8      	adds	r0, r7, r2
 8005150:	2201      	movs	r2, #1
 8005152:	f7ff fc62 	bl	8004a1a <bme280_set_regs>
 8005156:	0003      	movs	r3, r0
 8005158:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800515a:	2317      	movs	r3, #23
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	b25b      	sxtb	r3, r3
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	b006      	add	sp, #24
 8005168:	bdb0      	pop	{r4, r5, r7, pc}

0800516a <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 800516a:	b5b0      	push	{r4, r5, r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	230f      	movs	r3, #15
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	1c02      	adds	r2, r0, #0
 800517a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800517c:	2116      	movs	r1, #22
 800517e:	187b      	adds	r3, r7, r1
 8005180:	22f5      	movs	r2, #245	; 0xf5
 8005182:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8005184:	187b      	adds	r3, r7, r1
 8005186:	7818      	ldrb	r0, [r3, #0]
 8005188:	2517      	movs	r5, #23
 800518a:	197c      	adds	r4, r7, r5
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2215      	movs	r2, #21
 8005190:	18b9      	adds	r1, r7, r2
 8005192:	2201      	movs	r2, #1
 8005194:	f7ff fbf7 	bl	8004986 <bme280_get_regs>
 8005198:	0003      	movs	r3, r0
 800519a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800519c:	197b      	adds	r3, r7, r5
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d125      	bne.n	80051f2 <set_filter_standby_settings+0x88>
    {
        if (desired_settings & BME280_FILTER_SEL)
 80051a6:	230f      	movs	r3, #15
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2208      	movs	r2, #8
 80051ae:	4013      	ands	r3, r2
 80051b0:	d006      	beq.n	80051c0 <set_filter_standby_settings+0x56>
        {
            fill_filter_settings(&reg_data, settings);
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	2315      	movs	r3, #21
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	0011      	movs	r1, r2
 80051ba:	0018      	movs	r0, r3
 80051bc:	f000 f821 	bl	8005202 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 80051c0:	230f      	movs	r3, #15
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	4013      	ands	r3, r2
 80051ca:	d006      	beq.n	80051da <set_filter_standby_settings+0x70>
        {
            fill_standby_settings(&reg_data, settings);
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	2315      	movs	r3, #21
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	0011      	movs	r1, r2
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 f82f 	bl	8005238 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80051da:	2317      	movs	r3, #23
 80051dc:	18fc      	adds	r4, r7, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2215      	movs	r2, #21
 80051e2:	18b9      	adds	r1, r7, r2
 80051e4:	2216      	movs	r2, #22
 80051e6:	18b8      	adds	r0, r7, r2
 80051e8:	2201      	movs	r2, #1
 80051ea:	f7ff fc16 	bl	8004a1a <bme280_set_regs>
 80051ee:	0003      	movs	r3, r0
 80051f0:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80051f2:	2317      	movs	r3, #23
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b25b      	sxtb	r3, r3
}
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b006      	add	sp, #24
 8005200:	bdb0      	pop	{r4, r5, r7, pc}

08005202 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	b25b      	sxtb	r3, r3
 8005212:	221c      	movs	r2, #28
 8005214:	4393      	bics	r3, r2
 8005216:	b25a      	sxtb	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	b25b      	sxtb	r3, r3
 8005220:	211c      	movs	r1, #28
 8005222:	400b      	ands	r3, r1
 8005224:	b25b      	sxtb	r3, r3
 8005226:	4313      	orrs	r3, r2
 8005228:	b25b      	sxtb	r3, r3
 800522a:	b2da      	uxtb	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	701a      	strb	r2, [r3, #0]
}
 8005230:	46c0      	nop			; (mov r8, r8)
 8005232:	46bd      	mov	sp, r7
 8005234:	b002      	add	sp, #8
 8005236:	bd80      	pop	{r7, pc}

08005238 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	b25b      	sxtb	r3, r3
 8005248:	221f      	movs	r2, #31
 800524a:	4013      	ands	r3, r2
 800524c:	b25a      	sxtb	r2, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	791b      	ldrb	r3, [r3, #4]
 8005252:	015b      	lsls	r3, r3, #5
 8005254:	b25b      	sxtb	r3, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	b25b      	sxtb	r3, r3
 800525a:	b2da      	uxtb	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	701a      	strb	r2, [r3, #0]
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b002      	add	sp, #8
 8005266:	bd80      	pop	{r7, pc}

08005268 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b25b      	sxtb	r3, r3
 8005278:	221c      	movs	r2, #28
 800527a:	4393      	bics	r3, r2
 800527c:	b25a      	sxtb	r2, r3
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	b25b      	sxtb	r3, r3
 8005286:	211c      	movs	r1, #28
 8005288:	400b      	ands	r3, r1
 800528a:	b25b      	sxtb	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b25b      	sxtb	r3, r3
 8005290:	b2da      	uxtb	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	701a      	strb	r2, [r3, #0]
}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b002      	add	sp, #8
 800529c:	bd80      	pop	{r7, pc}

0800529e <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	221f      	movs	r2, #31
 80052b0:	4013      	ands	r3, r2
 80052b2:	b25a      	sxtb	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	015b      	lsls	r3, r3, #5
 80052ba:	b25b      	sxtb	r3, r3
 80052bc:	4313      	orrs	r3, r2
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	701a      	strb	r2, [r3, #0]
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b002      	add	sp, #8
 80052cc:	bd80      	pop	{r7, pc}

080052ce <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2207      	movs	r2, #7
 80052de:	4013      	ands	r3, r2
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3302      	adds	r3, #2
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	109b      	asrs	r3, r3, #2
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2207      	movs	r2, #7
 80052f2:	4013      	ands	r3, r2
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3302      	adds	r3, #2
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	b2da      	uxtb	r2, r3
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3303      	adds	r3, #3
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	109b      	asrs	r3, r3, #2
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2207      	movs	r2, #7
 8005314:	4013      	ands	r3, r2
 8005316:	b2da      	uxtb	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3303      	adds	r3, #3
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	b2da      	uxtb	r2, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	711a      	strb	r2, [r3, #4]
}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	46bd      	mov	sp, r7
 800532e:	b002      	add	sp, #8
 8005330:	bd80      	pop	{r7, pc}

08005332 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8005332:	b5b0      	push	{r4, r5, r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	0002      	movs	r2, r0
 800533a:	6039      	str	r1, [r7, #0]
 800533c:	1dfb      	adds	r3, r7, #7
 800533e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8005340:	210e      	movs	r1, #14
 8005342:	187b      	adds	r3, r7, r1
 8005344:	22f4      	movs	r2, #244	; 0xf4
 8005346:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8005348:	187b      	adds	r3, r7, r1
 800534a:	7818      	ldrb	r0, [r3, #0]
 800534c:	250f      	movs	r5, #15
 800534e:	197c      	adds	r4, r7, r5
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	220d      	movs	r2, #13
 8005354:	18b9      	adds	r1, r7, r2
 8005356:	2201      	movs	r2, #1
 8005358:	f7ff fb15 	bl	8004986 <bme280_get_regs>
 800535c:	0003      	movs	r3, r0
 800535e:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8005360:	197b      	adds	r3, r7, r5
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	b25b      	sxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d11c      	bne.n	80053a4 <write_power_mode+0x72>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800536a:	200d      	movs	r0, #13
 800536c:	183b      	adds	r3, r7, r0
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b25b      	sxtb	r3, r3
 8005372:	2203      	movs	r2, #3
 8005374:	4393      	bics	r3, r2
 8005376:	b25a      	sxtb	r2, r3
 8005378:	1dfb      	adds	r3, r7, #7
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	b25b      	sxtb	r3, r3
 800537e:	2103      	movs	r1, #3
 8005380:	400b      	ands	r3, r1
 8005382:	b25b      	sxtb	r3, r3
 8005384:	4313      	orrs	r3, r2
 8005386:	b25b      	sxtb	r3, r3
 8005388:	b2da      	uxtb	r2, r3
 800538a:	183b      	adds	r3, r7, r0
 800538c:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800538e:	230f      	movs	r3, #15
 8005390:	18fc      	adds	r4, r7, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	1839      	adds	r1, r7, r0
 8005396:	220e      	movs	r2, #14
 8005398:	18b8      	adds	r0, r7, r2
 800539a:	2201      	movs	r2, #1
 800539c:	f7ff fb3d 	bl	8004a1a <bme280_set_regs>
 80053a0:	0003      	movs	r3, r0
 80053a2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80053a4:	230f      	movs	r3, #15
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b25b      	sxtb	r3, r3
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b004      	add	sp, #16
 80053b2:	bdb0      	pop	{r4, r5, r7, pc}

080053b4 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80053b4:	b5b0      	push	{r4, r5, r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80053bc:	2517      	movs	r5, #23
 80053be:	197c      	adds	r4, r7, r5
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2210      	movs	r2, #16
 80053c4:	18b9      	adds	r1, r7, r2
 80053c6:	2204      	movs	r2, #4
 80053c8:	20f2      	movs	r0, #242	; 0xf2
 80053ca:	f7ff fadc 	bl	8004986 <bme280_get_regs>
 80053ce:	0003      	movs	r3, r0
 80053d0:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 80053d2:	197b      	adds	r3, r7, r5
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11f      	bne.n	800541c <put_device_to_sleep+0x68>
    {
        parse_device_settings(reg_data, &settings);
 80053dc:	2308      	movs	r3, #8
 80053de:	18fa      	adds	r2, r7, r3
 80053e0:	2310      	movs	r3, #16
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	0011      	movs	r1, r2
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7ff ff71 	bl	80052ce <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 80053ec:	2517      	movs	r5, #23
 80053ee:	197c      	adds	r4, r7, r5
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f7ff fc8b 	bl	8004d0e <bme280_soft_reset>
 80053f8:	0003      	movs	r3, r0
 80053fa:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80053fc:	197b      	adds	r3, r7, r5
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	b25b      	sxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <put_device_to_sleep+0x68>
        {
            rslt = reload_device_settings(&settings, dev);
 8005406:	2317      	movs	r3, #23
 8005408:	18fc      	adds	r4, r7, r3
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	2308      	movs	r3, #8
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	0011      	movs	r1, r2
 8005412:	0018      	movs	r0, r3
 8005414:	f000 f80a 	bl	800542c <reload_device_settings>
 8005418:	0003      	movs	r3, r0
 800541a:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800541c:	2317      	movs	r3, #23
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	b25b      	sxtb	r3, r3
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b006      	add	sp, #24
 800542a:	bdb0      	pop	{r4, r5, r7, pc}

0800542c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8005436:	250f      	movs	r5, #15
 8005438:	197c      	adds	r4, r7, r5
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0019      	movs	r1, r3
 8005440:	201f      	movs	r0, #31
 8005442:	f7ff fdc7 	bl	8004fd4 <set_osr_settings>
 8005446:	0003      	movs	r3, r0
 8005448:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 800544a:	197b      	adds	r3, r7, r5
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	b25b      	sxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <reload_device_settings+0x3c>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8005454:	230f      	movs	r3, #15
 8005456:	18fc      	adds	r4, r7, r3
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	0019      	movs	r1, r3
 800545e:	201f      	movs	r0, #31
 8005460:	f7ff fe83 	bl	800516a <set_filter_standby_settings>
 8005464:	0003      	movs	r3, r0
 8005466:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8005468:	230f      	movs	r3, #15
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b25b      	sxtb	r3, r3
}
 8005470:	0018      	movs	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	b004      	add	sp, #16
 8005476:	bdb0      	pop	{r4, r5, r7, pc}

08005478 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 8005482:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <compensate_temperature+0xb8>)
 8005484:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 8005486:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <compensate_temperature+0xbc>)
 8005488:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	0052      	lsls	r2, r2, #1
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2202      	movs	r2, #2
 800549e:	5e9b      	ldrsh	r3, [r3, r2]
 80054a0:	001a      	movs	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4353      	muls	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da02      	bge.n	80054b0 <compensate_temperature+0x38>
 80054aa:	4a23      	ldr	r2, [pc, #140]	; (8005538 <compensate_temperature+0xc0>)
 80054ac:	4694      	mov	ip, r2
 80054ae:	4463      	add	r3, ip
 80054b0:	12db      	asrs	r3, r3, #11
 80054b2:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	8812      	ldrh	r2, [r2, #0]
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4353      	muls	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da02      	bge.n	80054d2 <compensate_temperature+0x5a>
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <compensate_temperature+0xc4>)
 80054ce:	4694      	mov	ip, r2
 80054d0:	4463      	add	r3, ip
 80054d2:	131b      	asrs	r3, r3, #12
 80054d4:	001a      	movs	r2, r3
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2104      	movs	r1, #4
 80054da:	5e5b      	ldrsh	r3, [r3, r1]
 80054dc:	4353      	muls	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da02      	bge.n	80054e8 <compensate_temperature+0x70>
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <compensate_temperature+0xc8>)
 80054e4:	4694      	mov	ip, r2
 80054e6:	4463      	add	r3, ip
 80054e8:	139b      	asrs	r3, r3, #14
 80054ea:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	18d2      	adds	r2, r2, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fa:	0013      	movs	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	3380      	adds	r3, #128	; 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	da00      	bge.n	8005508 <compensate_temperature+0x90>
 8005506:	33ff      	adds	r3, #255	; 0xff
 8005508:	121b      	asrs	r3, r3, #8
 800550a:	61fb      	str	r3, [r7, #28]
    if (temperature < temperature_min)
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	da02      	bge.n	800551a <compensate_temperature+0xa2>
    {
        temperature = temperature_min;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e005      	b.n	8005526 <compensate_temperature+0xae>
    }
    else if (temperature > temperature_max)
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	429a      	cmp	r2, r3
 8005520:	dd01      	ble.n	8005526 <compensate_temperature+0xae>
    {
        temperature = temperature_max;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	61fb      	str	r3, [r7, #28]
    }

    return temperature;
 8005526:	69fb      	ldr	r3, [r7, #28]
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b008      	add	sp, #32
 800552e:	bd80      	pop	{r7, pc}
 8005530:	fffff060 	.word	0xfffff060
 8005534:	00002134 	.word	0x00002134
 8005538:	000007ff 	.word	0x000007ff
 800553c:	00000fff 	.word	0x00000fff
 8005540:	00003fff 	.word	0x00003fff

08005544 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 800554e:	4b75      	ldr	r3, [pc, #468]	; (8005724 <compensate_pressure+0x1e0>)
 8005550:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 8005552:	4b75      	ldr	r3, [pc, #468]	; (8005728 <compensate_pressure+0x1e4>)
 8005554:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	da00      	bge.n	8005560 <compensate_pressure+0x1c>
 800555e:	3301      	adds	r3, #1
 8005560:	105b      	asrs	r3, r3, #1
 8005562:	4a72      	ldr	r2, [pc, #456]	; (800572c <compensate_pressure+0x1e8>)
 8005564:	4694      	mov	ip, r2
 8005566:	4463      	add	r3, ip
 8005568:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	da00      	bge.n	8005572 <compensate_pressure+0x2e>
 8005570:	3303      	adds	r3, #3
 8005572:	109b      	asrs	r3, r3, #2
 8005574:	001a      	movs	r2, r3
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	da00      	bge.n	800557e <compensate_pressure+0x3a>
 800557c:	3303      	adds	r3, #3
 800557e:	109b      	asrs	r3, r3, #2
 8005580:	4353      	muls	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	da02      	bge.n	800558c <compensate_pressure+0x48>
 8005586:	4a6a      	ldr	r2, [pc, #424]	; (8005730 <compensate_pressure+0x1ec>)
 8005588:	4694      	mov	ip, r2
 800558a:	4463      	add	r3, ip
 800558c:	12db      	asrs	r3, r3, #11
 800558e:	001a      	movs	r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2110      	movs	r1, #16
 8005594:	5e5b      	ldrsh	r3, [r3, r1]
 8005596:	4353      	muls	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	220e      	movs	r2, #14
 800559e:	5e9b      	ldrsh	r3, [r3, r2]
 80055a0:	001a      	movs	r2, r3
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	4353      	muls	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	18d3      	adds	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da00      	bge.n	80055b6 <compensate_pressure+0x72>
 80055b4:	3303      	adds	r3, #3
 80055b6:	109b      	asrs	r3, r3, #2
 80055b8:	001a      	movs	r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	210c      	movs	r1, #12
 80055be:	5e5b      	ldrsh	r3, [r3, r1]
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	220a      	movs	r2, #10
 80055ca:	5e9b      	ldrsh	r3, [r3, r2]
 80055cc:	001a      	movs	r2, r3
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da00      	bge.n	80055d6 <compensate_pressure+0x92>
 80055d4:	3303      	adds	r3, #3
 80055d6:	109b      	asrs	r3, r3, #2
 80055d8:	0019      	movs	r1, r3
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	da00      	bge.n	80055e2 <compensate_pressure+0x9e>
 80055e0:	3303      	adds	r3, #3
 80055e2:	109b      	asrs	r3, r3, #2
 80055e4:	434b      	muls	r3, r1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da02      	bge.n	80055f0 <compensate_pressure+0xac>
 80055ea:	4952      	ldr	r1, [pc, #328]	; (8005734 <compensate_pressure+0x1f0>)
 80055ec:	468c      	mov	ip, r1
 80055ee:	4463      	add	r3, ip
 80055f0:	135b      	asrs	r3, r3, #13
 80055f2:	4353      	muls	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da00      	bge.n	80055fa <compensate_pressure+0xb6>
 80055f8:	3307      	adds	r3, #7
 80055fa:	10db      	asrs	r3, r3, #3
 80055fc:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2208      	movs	r2, #8
 8005602:	5e9b      	ldrsh	r3, [r3, r2]
 8005604:	001a      	movs	r2, r3
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	4353      	muls	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	da00      	bge.n	8005610 <compensate_pressure+0xcc>
 800560e:	3301      	adds	r3, #1
 8005610:	105b      	asrs	r3, r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	18d3      	adds	r3, r2, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	da02      	bge.n	8005624 <compensate_pressure+0xe0>
 800561e:	4a46      	ldr	r2, [pc, #280]	; (8005738 <compensate_pressure+0x1f4>)
 8005620:	4694      	mov	ip, r2
 8005622:	4463      	add	r3, ip
 8005624:	149b      	asrs	r3, r3, #18
 8005626:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	0212      	lsls	r2, r2, #8
 800562e:	4694      	mov	ip, r2
 8005630:	4463      	add	r3, ip
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	88d2      	ldrh	r2, [r2, #6]
 8005636:	4353      	muls	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	da02      	bge.n	8005642 <compensate_pressure+0xfe>
 800563c:	4a3f      	ldr	r2, [pc, #252]	; (800573c <compensate_pressure+0x1f8>)
 800563e:	4694      	mov	ip, r2
 8005640:	4463      	add	r3, ip
 8005642:	13db      	asrs	r3, r3, #15
 8005644:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d064      	beq.n	8005716 <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	0352      	lsls	r2, r2, #13
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da02      	bge.n	8005664 <compensate_pressure+0x120>
 800565e:	4a38      	ldr	r2, [pc, #224]	; (8005740 <compensate_pressure+0x1fc>)
 8005660:	4694      	mov	ip, r2
 8005662:	4463      	add	r3, ip
 8005664:	131b      	asrs	r3, r3, #12
 8005666:	001a      	movs	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	4a35      	ldr	r2, [pc, #212]	; (8005744 <compensate_pressure+0x200>)
 800566e:	4353      	muls	r3, r2
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < 0x80000000)
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	db09      	blt.n	800568c <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	0011      	movs	r1, r2
 8005680:	0018      	movs	r0, r3
 8005682:	f7fa fd49 	bl	8000118 <__udivsi3>
 8005686:	0003      	movs	r3, r0
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
 800568a:	e007      	b.n	800569c <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	0019      	movs	r1, r3
 8005690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005692:	f7fa fd41 	bl	8000118 <__udivsi3>
 8005696:	0003      	movs	r3, r0
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2216      	movs	r2, #22
 80056a0:	5e9b      	ldrsh	r3, [r3, r2]
 80056a2:	0019      	movs	r1, r3
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	08db      	lsrs	r3, r3, #3
 80056a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056aa:	08d2      	lsrs	r2, r2, #3
 80056ac:	4353      	muls	r3, r2
 80056ae:	0b5b      	lsrs	r3, r3, #13
 80056b0:	434b      	muls	r3, r1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da02      	bge.n	80056bc <compensate_pressure+0x178>
 80056b6:	4a22      	ldr	r2, [pc, #136]	; (8005740 <compensate_pressure+0x1fc>)
 80056b8:	4694      	mov	ip, r2
 80056ba:	4463      	add	r3, ip
 80056bc:	131b      	asrs	r3, r3, #12
 80056be:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	001a      	movs	r2, r3
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2114      	movs	r1, #20
 80056ca:	5e5b      	ldrsh	r3, [r3, r1]
 80056cc:	4353      	muls	r3, r2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da02      	bge.n	80056d8 <compensate_pressure+0x194>
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <compensate_pressure+0x1f0>)
 80056d4:	4694      	mov	ip, r2
 80056d6:	4463      	add	r3, ip
 80056d8:	135b      	asrs	r3, r3, #13
 80056da:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	18d3      	adds	r3, r2, r3
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	2112      	movs	r1, #18
 80056e6:	5e52      	ldrsh	r2, [r2, r1]
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da00      	bge.n	80056f0 <compensate_pressure+0x1ac>
 80056ee:	330f      	adds	r3, #15
 80056f0:	111b      	asrs	r3, r3, #4
 80056f2:	001a      	movs	r2, r3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	18d3      	adds	r3, r2, r3
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < pressure_min)
 80056fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d202      	bcs.n	8005708 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e008      	b.n	800571a <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	429a      	cmp	r2, r3
 800570e:	d904      	bls.n	800571a <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	e001      	b.n	800571a <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return pressure;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800571c:	0018      	movs	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	b00a      	add	sp, #40	; 0x28
 8005722:	bd80      	pop	{r7, pc}
 8005724:	00007530 	.word	0x00007530
 8005728:	0001adb0 	.word	0x0001adb0
 800572c:	ffff0600 	.word	0xffff0600
 8005730:	000007ff 	.word	0x000007ff
 8005734:	00001fff 	.word	0x00001fff
 8005738:	0003ffff 	.word	0x0003ffff
 800573c:	00007fff 	.word	0x00007fff
 8005740:	00000fff 	.word	0x00000fff
 8005744:	00000c35 	.word	0x00000c35

08005748 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 8005752:	23c8      	movs	r3, #200	; 0xc8
 8005754:	025b      	lsls	r3, r3, #9
 8005756:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	4a53      	ldr	r2, [pc, #332]	; (80058ac <compensate_humidity+0x164>)
 800575e:	4694      	mov	ip, r2
 8005760:	4463      	add	r3, ip
 8005762:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	039b      	lsls	r3, r3, #14
 800576a:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	221e      	movs	r2, #30
 8005770:	5e9b      	ldrsh	r3, [r3, r2]
 8005772:	051b      	lsls	r3, r3, #20
 8005774:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_H5) * var1;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2220      	movs	r2, #32
 800577a:	5e9b      	ldrsh	r3, [r3, r2]
 800577c:	001a      	movs	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4353      	muls	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	01d2      	lsls	r2, r2, #7
 8005792:	4694      	mov	ip, r2
 8005794:	4463      	add	r3, ip
 8005796:	2b00      	cmp	r3, #0
 8005798:	da02      	bge.n	80057a0 <compensate_humidity+0x58>
 800579a:	4a45      	ldr	r2, [pc, #276]	; (80058b0 <compensate_humidity+0x168>)
 800579c:	4694      	mov	ip, r2
 800579e:	4463      	add	r3, ip
 80057a0:	13db      	asrs	r3, r3, #15
 80057a2:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2222      	movs	r2, #34	; 0x22
 80057a8:	569b      	ldrsb	r3, [r3, r2]
 80057aa:	001a      	movs	r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4353      	muls	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	da02      	bge.n	80057ba <compensate_humidity+0x72>
 80057b4:	4a3f      	ldr	r2, [pc, #252]	; (80058b4 <compensate_humidity+0x16c>)
 80057b6:	4694      	mov	ip, r2
 80057b8:	4463      	add	r3, ip
 80057ba:	129b      	asrs	r3, r3, #10
 80057bc:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	7f1b      	ldrb	r3, [r3, #28]
 80057c2:	001a      	movs	r2, r3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4353      	muls	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	da02      	bge.n	80057d2 <compensate_humidity+0x8a>
 80057cc:	4a3a      	ldr	r2, [pc, #232]	; (80058b8 <compensate_humidity+0x170>)
 80057ce:	4694      	mov	ip, r2
 80057d0:	4463      	add	r3, ip
 80057d2:	12db      	asrs	r3, r3, #11
 80057d4:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	0212      	lsls	r2, r2, #8
 80057dc:	4694      	mov	ip, r2
 80057de:	4463      	add	r3, ip
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4353      	muls	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da02      	bge.n	80057ee <compensate_humidity+0xa6>
 80057e8:	4a32      	ldr	r2, [pc, #200]	; (80058b4 <compensate_humidity+0x16c>)
 80057ea:	4694      	mov	ip, r2
 80057ec:	4463      	add	r3, ip
 80057ee:	129b      	asrs	r3, r3, #10
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	0392      	lsls	r2, r2, #14
 80057f4:	4694      	mov	ip, r2
 80057f6:	4463      	add	r3, ip
 80057f8:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	221a      	movs	r2, #26
 80057fe:	5e9b      	ldrsh	r3, [r3, r2]
 8005800:	001a      	movs	r2, r3
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4353      	muls	r3, r2
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	0192      	lsls	r2, r2, #6
 800580a:	4694      	mov	ip, r2
 800580c:	4463      	add	r3, ip
 800580e:	2b00      	cmp	r3, #0
 8005810:	da02      	bge.n	8005818 <compensate_humidity+0xd0>
 8005812:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <compensate_humidity+0x174>)
 8005814:	4694      	mov	ip, r2
 8005816:	4463      	add	r3, ip
 8005818:	139b      	asrs	r3, r3, #14
 800581a:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4353      	muls	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da02      	bge.n	8005830 <compensate_humidity+0xe8>
 800582a:	4a21      	ldr	r2, [pc, #132]	; (80058b0 <compensate_humidity+0x168>)
 800582c:	4694      	mov	ip, r2
 800582e:	4463      	add	r3, ip
 8005830:	13db      	asrs	r3, r3, #15
 8005832:	001a      	movs	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	da02      	bge.n	8005840 <compensate_humidity+0xf8>
 800583a:	491d      	ldr	r1, [pc, #116]	; (80058b0 <compensate_humidity+0x168>)
 800583c:	468c      	mov	ip, r1
 800583e:	4463      	add	r3, ip
 8005840:	13db      	asrs	r3, r3, #15
 8005842:	4353      	muls	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	da00      	bge.n	800584a <compensate_humidity+0x102>
 8005848:	337f      	adds	r3, #127	; 0x7f
 800584a:	11db      	asrs	r3, r3, #7
 800584c:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	7e1b      	ldrb	r3, [r3, #24]
 8005852:	001a      	movs	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4353      	muls	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	da00      	bge.n	800585e <compensate_humidity+0x116>
 800585c:	330f      	adds	r3, #15
 800585e:	111b      	asrs	r3, r3, #4
 8005860:	425b      	negs	r3, r3
 8005862:	001a      	movs	r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	189b      	adds	r3, r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	da00      	bge.n	8005872 <compensate_humidity+0x12a>
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	22c8      	movs	r2, #200	; 0xc8
 8005878:	0552      	lsls	r2, r2, #21
 800587a:	4293      	cmp	r3, r2
 800587c:	dd01      	ble.n	8005882 <compensate_humidity+0x13a>
 800587e:	23c8      	movs	r3, #200	; 0xc8
 8005880:	055b      	lsls	r3, r3, #21
 8005882:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da02      	bge.n	8005890 <compensate_humidity+0x148>
 800588a:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <compensate_humidity+0x178>)
 800588c:	4694      	mov	ip, r2
 800588e:	4463      	add	r3, ip
 8005890:	131b      	asrs	r3, r3, #12
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
    if (humidity > humidity_max)
 8005894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	429a      	cmp	r2, r3
 800589a:	d901      	bls.n	80058a0 <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return humidity;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058a2:	0018      	movs	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b00a      	add	sp, #40	; 0x28
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	fffed400 	.word	0xfffed400
 80058b0:	00007fff 	.word	0x00007fff
 80058b4:	000003ff 	.word	0x000003ff
 80058b8:	000007ff 	.word	0x000007ff
 80058bc:	00003fff 	.word	0x00003fff
 80058c0:	00000fff 	.word	0x00000fff

080058c4 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80058c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c6:	b08b      	sub	sp, #44	; 0x2c
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80058cc:	2526      	movs	r5, #38	; 0x26
 80058ce:	197b      	adds	r3, r7, r5
 80058d0:	2288      	movs	r2, #136	; 0x88
 80058d2:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80058d4:	260c      	movs	r6, #12
 80058d6:	19bb      	adds	r3, r7, r6
 80058d8:	0018      	movs	r0, r3
 80058da:	231a      	movs	r3, #26
 80058dc:	001a      	movs	r2, r3
 80058de:	2100      	movs	r1, #0
 80058e0:	f004 fa7b 	bl	8009dda <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80058e4:	2327      	movs	r3, #39	; 0x27
 80058e6:	18fc      	adds	r4, r7, r3
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	19b9      	adds	r1, r7, r6
 80058ec:	197b      	adds	r3, r7, r5
 80058ee:	7818      	ldrb	r0, [r3, #0]
 80058f0:	0013      	movs	r3, r2
 80058f2:	221a      	movs	r2, #26
 80058f4:	f7ff f847 	bl	8004986 <bme280_get_regs>
 80058f8:	0003      	movs	r3, r0
 80058fa:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 80058fc:	2327      	movs	r3, #39	; 0x27
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b25b      	sxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d122      	bne.n	800594e <get_calib_data+0x8a>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	250c      	movs	r5, #12
 800590c:	197b      	adds	r3, r7, r5
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f000 f85b 	bl	80059cc <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8005916:	2026      	movs	r0, #38	; 0x26
 8005918:	183b      	adds	r3, r7, r0
 800591a:	22e1      	movs	r2, #225	; 0xe1
 800591c:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800591e:	2627      	movs	r6, #39	; 0x27
 8005920:	19bc      	adds	r4, r7, r6
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	1979      	adds	r1, r7, r5
 8005926:	183b      	adds	r3, r7, r0
 8005928:	7818      	ldrb	r0, [r3, #0]
 800592a:	0013      	movs	r3, r2
 800592c:	2207      	movs	r2, #7
 800592e:	f7ff f82a 	bl	8004986 <bme280_get_regs>
 8005932:	0003      	movs	r3, r0
 8005934:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8005936:	19bb      	adds	r3, r7, r6
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	b25b      	sxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <get_calib_data+0x8a>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	230c      	movs	r3, #12
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	0011      	movs	r1, r2
 8005948:	0018      	movs	r0, r3
 800594a:	f000 f8ec 	bl	8005b26 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800594e:	2327      	movs	r3, #39	; 0x27
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	b25b      	sxtb	r3, r3
}
 8005956:	0018      	movs	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	b00b      	add	sp, #44	; 0x2c
 800595c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800595e <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	001a      	movs	r2, r3
 800596c:	1cfb      	adds	r3, r7, #3
 800596e:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8005970:	2317      	movs	r3, #23
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e01d      	b.n	80059b6 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800597a:	2017      	movs	r0, #23
 800597c:	183b      	adds	r3, r7, r0
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	18d2      	adds	r2, r2, r3
 8005984:	183b      	adds	r3, r7, r0
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	3b01      	subs	r3, #1
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	18cb      	adds	r3, r1, r3
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8005994:	183b      	adds	r3, r7, r0
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	18d2      	adds	r2, r2, r3
 800599c:	183b      	adds	r3, r7, r0
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	0019      	movs	r1, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	185b      	adds	r3, r3, r1
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80059ac:	183b      	adds	r3, r7, r0
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	183b      	adds	r3, r7, r0
 80059b2:	3201      	adds	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	2317      	movs	r3, #23
 80059b8:	18fa      	adds	r2, r7, r3
 80059ba:	1cfb      	adds	r3, r7, #3
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3da      	bcc.n	800597a <interleave_reg_addr+0x1c>
    }
}
 80059c4:	46c0      	nop			; (mov r8, r8)
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b006      	add	sp, #24
 80059ca:	bd80      	pop	{r7, pc}

080059cc <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	3310      	adds	r3, #16
 80059da:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3301      	adds	r3, #1
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	b21a      	sxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3303      	adds	r3, #3
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	b21a      	sxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3302      	adds	r3, #2
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	b21a      	sxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3305      	adds	r3, #5
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	b21a      	sxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	b21b      	sxth	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b21a      	sxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	b21a      	sxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3306      	adds	r3, #6
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	b21b      	sxth	r3, r3
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3309      	adds	r3, #9
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	b21a      	sxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3308      	adds	r3, #8
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	b21b      	sxth	r3, r3
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	b21a      	sxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	330b      	adds	r3, #11
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	b21a      	sxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	330a      	adds	r3, #10
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b21b      	sxth	r3, r3
 8005a72:	4313      	orrs	r3, r2
 8005a74:	b21a      	sxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	330d      	adds	r3, #13
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	b21a      	sxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	330c      	adds	r3, #12
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b21a      	sxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	330f      	adds	r3, #15
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	b21a      	sxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	330e      	adds	r3, #14
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	b21b      	sxth	r3, r3
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	b21a      	sxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3311      	adds	r3, #17
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	b21a      	sxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3310      	adds	r3, #16
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b21b      	sxth	r3, r3
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b21a      	sxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3313      	adds	r3, #19
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	b21a      	sxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3312      	adds	r3, #18
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b21b      	sxth	r3, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b21a      	sxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3315      	adds	r3, #21
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	b21a      	sxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3314      	adds	r3, #20
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b21b      	sxth	r3, r3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	b21a      	sxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3317      	adds	r3, #23
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	b21a      	sxth	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3316      	adds	r3, #22
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b21b      	sxth	r3, r3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b21a      	sxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7e5a      	ldrb	r2, [r3, #25]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	761a      	strb	r2, [r3, #24]
}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	46bd      	mov	sp, r7
 8005b22:	b004      	add	sp, #16
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005b26:	b590      	push	{r4, r7, lr}
 8005b28:	b087      	sub	sp, #28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	3310      	adds	r3, #16
 8005b34:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	b21a      	sxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	4313      	orrs	r3, r2
 8005b48:	b21a      	sxth	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	789a      	ldrb	r2, [r3, #2]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3303      	adds	r3, #3
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b25b      	sxtb	r3, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	2012      	movs	r0, #18
 8005b66:	183b      	adds	r3, r7, r0
 8005b68:	801a      	strh	r2, [r3, #0]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	b21a      	sxth	r2, r3
 8005b72:	2410      	movs	r4, #16
 8005b74:	193b      	adds	r3, r7, r4
 8005b76:	210f      	movs	r1, #15
 8005b78:	400a      	ands	r2, r1
 8005b7a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8005b7c:	183a      	adds	r2, r7, r0
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	8812      	ldrh	r2, [r2, #0]
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	b21a      	sxth	r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3305      	adds	r3, #5
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	210e      	movs	r1, #14
 8005b9c:	187b      	adds	r3, r7, r1
 8005b9e:	801a      	strh	r2, [r3, #0]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	200c      	movs	r0, #12
 8005bac:	183b      	adds	r3, r7, r0
 8005bae:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8005bb0:	187a      	adds	r2, r7, r1
 8005bb2:	183b      	adds	r3, r7, r0
 8005bb4:	8812      	ldrh	r2, [r2, #0]
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	b21a      	sxth	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3306      	adds	r3, #6
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	b259      	sxtb	r1, r3
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2222      	movs	r2, #34	; 0x22
 8005bcc:	5499      	strb	r1, [r3, r2]
}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b007      	add	sp, #28
 8005bd4:	bd90      	pop	{r4, r7, pc}

08005bd6 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	0002      	movs	r2, r0
 8005bde:	1dfb      	adds	r3, r7, #7
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	1dbb      	adds	r3, r7, #6
 8005be4:	1c0a      	adds	r2, r1, #0
 8005be6:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 8005be8:	230f      	movs	r3, #15
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	2200      	movs	r2, #0
 8005bee:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8005bf0:	1dfb      	adds	r3, r7, #7
 8005bf2:	1dba      	adds	r2, r7, #6
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <are_settings_changed+0x34>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8005c00:	230f      	movs	r3, #15
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e003      	b.n	8005c12 <are_settings_changed+0x3c>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8005c0a:	230f      	movs	r3, #15
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8005c12:	230f      	movs	r3, #15
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	781b      	ldrb	r3, [r3, #0]
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b004      	add	sp, #16
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <null_ptr_check+0x26>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <null_ptr_check+0x26>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <null_ptr_check+0x26>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8005c46:	230f      	movs	r3, #15
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	22ff      	movs	r2, #255	; 0xff
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e003      	b.n	8005c58 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8005c50:	230f      	movs	r3, #15
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005c58:	230f      	movs	r3, #15
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	b25b      	sxtb	r3, r3
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b004      	add	sp, #16
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c6e:	1dfb      	adds	r3, r7, #7
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_Init+0x3c>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <HAL_Init+0x3c>)
 8005c7a:	2140      	movs	r1, #64	; 0x40
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c80:	2000      	movs	r0, #0
 8005c82:	f000 f811 	bl	8005ca8 <HAL_InitTick>
 8005c86:	1e03      	subs	r3, r0, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005c8a:	1dfb      	adds	r3, r7, #7
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	e001      	b.n	8005c96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c92:	f7fe f8af 	bl	8003df4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c96:	1dfb      	adds	r3, r7, #7
 8005c98:	781b      	ldrb	r3, [r3, #0]
}
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b002      	add	sp, #8
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	40022000 	.word	0x40022000

08005ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005cb0:	230f      	movs	r3, #15
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <HAL_InitTick+0x50>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	23fa      	movs	r3, #250	; 0xfa
 8005cbe:	0099      	lsls	r1, r3, #2
 8005cc0:	0010      	movs	r0, r2
 8005cc2:	f7fa fa29 	bl	8000118 <__udivsi3>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 f918 	bl	8005efe <HAL_SYSTICK_Config>
 8005cce:	1e03      	subs	r3, r0, #0
 8005cd0:	d004      	beq.n	8005cdc <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8005cd2:	230f      	movs	r3, #15
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e006      	b.n	8005cea <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	425b      	negs	r3, r3
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 f8e5 	bl	8005eb4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8005cea:	230f      	movs	r3, #15
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	781b      	ldrb	r3, [r3, #0]
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b004      	add	sp, #16
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000014 	.word	0x20000014

08005cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  uwTick++;
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <HAL_IncTick+0x14>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <HAL_IncTick+0x14>)
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200003d0 	.word	0x200003d0

08005d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  return uwTick;
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <HAL_GetTick+0x10>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	200003d0 	.word	0x200003d0

08005d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d30:	f7ff fff0 	bl	8005d14 <HAL_GetTick>
 8005d34:	0003      	movs	r3, r0
 8005d36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	d002      	beq.n	8005d48 <HAL_Delay+0x20>
  {
    wait++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	f7ff ffe3 	bl	8005d14 <HAL_GetTick>
 8005d4e:	0002      	movs	r2, r0
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d8f7      	bhi.n	8005d4a <HAL_Delay+0x22>
  {
  }
}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b004      	add	sp, #16
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	1dfb      	adds	r3, r7, #7
 8005d6e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005d70:	1dfb      	adds	r3, r7, #7
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	001a      	movs	r2, r3
 8005d76:	231f      	movs	r3, #31
 8005d78:	401a      	ands	r2, r3
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <NVIC_EnableIRQ+0x28>)
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	4091      	lsls	r1, r2
 8005d80:	000a      	movs	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	e000e100 	.word	0xe000e100

08005d90 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	0002      	movs	r2, r0
 8005d98:	6039      	str	r1, [r7, #0]
 8005d9a:	1dfb      	adds	r3, r7, #7
 8005d9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8005d9e:	1dfb      	adds	r3, r7, #7
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b7f      	cmp	r3, #127	; 0x7f
 8005da4:	d932      	bls.n	8005e0c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005da6:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <NVIC_SetPriority+0xd4>)
 8005da8:	1dfb      	adds	r3, r7, #7
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	0019      	movs	r1, r3
 8005dae:	230f      	movs	r3, #15
 8005db0:	400b      	ands	r3, r1
 8005db2:	3b08      	subs	r3, #8
 8005db4:	089b      	lsrs	r3, r3, #2
 8005db6:	3306      	adds	r3, #6
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	18d3      	adds	r3, r2, r3
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	1dfa      	adds	r2, r7, #7
 8005dc2:	7812      	ldrb	r2, [r2, #0]
 8005dc4:	0011      	movs	r1, r2
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	400a      	ands	r2, r1
 8005dca:	00d2      	lsls	r2, r2, #3
 8005dcc:	21ff      	movs	r1, #255	; 0xff
 8005dce:	4091      	lsls	r1, r2
 8005dd0:	000a      	movs	r2, r1
 8005dd2:	43d2      	mvns	r2, r2
 8005dd4:	401a      	ands	r2, r3
 8005dd6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	019b      	lsls	r3, r3, #6
 8005ddc:	22ff      	movs	r2, #255	; 0xff
 8005dde:	401a      	ands	r2, r3
 8005de0:	1dfb      	adds	r3, r7, #7
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	0018      	movs	r0, r3
 8005de6:	2303      	movs	r3, #3
 8005de8:	4003      	ands	r3, r0
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005dee:	481d      	ldr	r0, [pc, #116]	; (8005e64 <NVIC_SetPriority+0xd4>)
 8005df0:	1dfb      	adds	r3, r7, #7
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	001c      	movs	r4, r3
 8005df6:	230f      	movs	r3, #15
 8005df8:	4023      	ands	r3, r4
 8005dfa:	3b08      	subs	r3, #8
 8005dfc:	089b      	lsrs	r3, r3, #2
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	3306      	adds	r3, #6
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	18c3      	adds	r3, r0, r3
 8005e06:	3304      	adds	r3, #4
 8005e08:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005e0a:	e027      	b.n	8005e5c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e0c:	4a16      	ldr	r2, [pc, #88]	; (8005e68 <NVIC_SetPriority+0xd8>)
 8005e0e:	1dfb      	adds	r3, r7, #7
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	089b      	lsrs	r3, r3, #2
 8005e16:	33c0      	adds	r3, #192	; 0xc0
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	589b      	ldr	r3, [r3, r2]
 8005e1c:	1dfa      	adds	r2, r7, #7
 8005e1e:	7812      	ldrb	r2, [r2, #0]
 8005e20:	0011      	movs	r1, r2
 8005e22:	2203      	movs	r2, #3
 8005e24:	400a      	ands	r2, r1
 8005e26:	00d2      	lsls	r2, r2, #3
 8005e28:	21ff      	movs	r1, #255	; 0xff
 8005e2a:	4091      	lsls	r1, r2
 8005e2c:	000a      	movs	r2, r1
 8005e2e:	43d2      	mvns	r2, r2
 8005e30:	401a      	ands	r2, r3
 8005e32:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	019b      	lsls	r3, r3, #6
 8005e38:	22ff      	movs	r2, #255	; 0xff
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	1dfb      	adds	r3, r7, #7
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	0018      	movs	r0, r3
 8005e42:	2303      	movs	r3, #3
 8005e44:	4003      	ands	r3, r0
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e4a:	4807      	ldr	r0, [pc, #28]	; (8005e68 <NVIC_SetPriority+0xd8>)
 8005e4c:	1dfb      	adds	r3, r7, #7
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	089b      	lsrs	r3, r3, #2
 8005e54:	430a      	orrs	r2, r1
 8005e56:	33c0      	adds	r3, #192	; 0xc0
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	501a      	str	r2, [r3, r0]
}
 8005e5c:	46c0      	nop			; (mov r8, r8)
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b003      	add	sp, #12
 8005e62:	bd90      	pop	{r4, r7, pc}
 8005e64:	e000ed00 	.word	0xe000ed00
 8005e68:	e000e100 	.word	0xe000e100

08005e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <SysTick_Config+0x40>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e010      	b.n	8005ea4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <SysTick_Config+0x44>)
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	3a01      	subs	r2, #1
 8005e88:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	2103      	movs	r1, #3
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7ff ff7d 	bl	8005d90 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <SysTick_Config+0x44>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <SysTick_Config+0x44>)
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	00ffffff 	.word	0x00ffffff
 8005eb0:	e000e010 	.word	0xe000e010

08005eb4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	210f      	movs	r1, #15
 8005ec0:	187b      	adds	r3, r7, r1
 8005ec2:	1c02      	adds	r2, r0, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	187b      	adds	r3, r7, r1
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	0011      	movs	r1, r2
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7ff ff5d 	bl	8005d90 <NVIC_SetPriority>
}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b004      	add	sp, #16
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	0002      	movs	r2, r0
 8005ee6:	1dfb      	adds	r3, r7, #7
 8005ee8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eea:	1dfb      	adds	r3, r7, #7
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7ff ff37 	bl	8005d64 <NVIC_EnableIRQ>
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b002      	add	sp, #8
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7ff ffaf 	bl	8005e6c <SysTick_Config>
 8005f0e:	0003      	movs	r3, r0
}
 8005f10:	0018      	movs	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b002      	add	sp, #8
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005f2e:	e155      	b.n	80061dc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2101      	movs	r1, #1
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4091      	lsls	r1, r2
 8005f3a:	000a      	movs	r2, r1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d100      	bne.n	8005f48 <HAL_GPIO_Init+0x30>
 8005f46:	e146      	b.n	80061d6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d003      	beq.n	8005f58 <HAL_GPIO_Init+0x40>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b12      	cmp	r3, #18
 8005f56:	d123      	bne.n	8005fa0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	08da      	lsrs	r2, r3, #3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3208      	adds	r2, #8
 8005f60:	0092      	lsls	r2, r2, #2
 8005f62:	58d3      	ldr	r3, [r2, r3]
 8005f64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2207      	movs	r2, #7
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	220f      	movs	r2, #15
 8005f70:	409a      	lsls	r2, r3
 8005f72:	0013      	movs	r3, r2
 8005f74:	43da      	mvns	r2, r3
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2107      	movs	r1, #7
 8005f84:	400b      	ands	r3, r1
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	0013      	movs	r3, r2
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	08da      	lsrs	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3208      	adds	r2, #8
 8005f9a:	0092      	lsls	r2, r2, #2
 8005f9c:	6939      	ldr	r1, [r7, #16]
 8005f9e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_GPIO_Init+0xa8>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d007      	beq.n	8005fc0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fb4:	2b11      	cmp	r3, #17
 8005fb6:	d003      	beq.n	8005fc0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b12      	cmp	r3, #18
 8005fbe:	d130      	bne.n	8006022 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	2203      	movs	r2, #3
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	0013      	movs	r3, r2
 8005fd0:	43da      	mvns	r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	0013      	movs	r3, r2
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	0013      	movs	r3, r2
 8005ffe:	43da      	mvns	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4013      	ands	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	091b      	lsrs	r3, r3, #4
 800600c:	2201      	movs	r2, #1
 800600e:	401a      	ands	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	409a      	lsls	r2, r3
 8006014:	0013      	movs	r3, r2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	2203      	movs	r2, #3
 800602e:	409a      	lsls	r2, r3
 8006030:	0013      	movs	r3, r2
 8006032:	43da      	mvns	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4013      	ands	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2203      	movs	r2, #3
 8006040:	401a      	ands	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	409a      	lsls	r2, r3
 8006048:	0013      	movs	r3, r2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	2203      	movs	r2, #3
 8006062:	409a      	lsls	r2, r3
 8006064:	0013      	movs	r3, r2
 8006066:	43da      	mvns	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4013      	ands	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	409a      	lsls	r2, r3
 8006078:	0013      	movs	r3, r2
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	055b      	lsls	r3, r3, #21
 800608e:	4013      	ands	r3, r2
 8006090:	d100      	bne.n	8006094 <HAL_GPIO_Init+0x17c>
 8006092:	e0a0      	b.n	80061d6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006094:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 8006096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006098:	4b56      	ldr	r3, [pc, #344]	; (80061f4 <HAL_GPIO_Init+0x2dc>)
 800609a:	2101      	movs	r1, #1
 800609c:	430a      	orrs	r2, r1
 800609e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80060a0:	4a55      	ldr	r2, [pc, #340]	; (80061f8 <HAL_GPIO_Init+0x2e0>)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	089b      	lsrs	r3, r3, #2
 80060a6:	3302      	adds	r3, #2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	589b      	ldr	r3, [r3, r2]
 80060ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2203      	movs	r2, #3
 80060b2:	4013      	ands	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	220f      	movs	r2, #15
 80060b8:	409a      	lsls	r2, r3
 80060ba:	0013      	movs	r3, r2
 80060bc:	43da      	mvns	r2, r3
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	23a0      	movs	r3, #160	; 0xa0
 80060c8:	05db      	lsls	r3, r3, #23
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d01f      	beq.n	800610e <HAL_GPIO_Init+0x1f6>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <HAL_GPIO_Init+0x2e4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d019      	beq.n	800610a <HAL_GPIO_Init+0x1f2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a49      	ldr	r2, [pc, #292]	; (8006200 <HAL_GPIO_Init+0x2e8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_GPIO_Init+0x1ee>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a48      	ldr	r2, [pc, #288]	; (8006204 <HAL_GPIO_Init+0x2ec>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00d      	beq.n	8006102 <HAL_GPIO_Init+0x1ea>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a47      	ldr	r2, [pc, #284]	; (8006208 <HAL_GPIO_Init+0x2f0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <HAL_GPIO_Init+0x1e6>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a46      	ldr	r2, [pc, #280]	; (800620c <HAL_GPIO_Init+0x2f4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_GPIO_Init+0x1e2>
 80060f6:	2305      	movs	r3, #5
 80060f8:	e00a      	b.n	8006110 <HAL_GPIO_Init+0x1f8>
 80060fa:	2306      	movs	r3, #6
 80060fc:	e008      	b.n	8006110 <HAL_GPIO_Init+0x1f8>
 80060fe:	2304      	movs	r3, #4
 8006100:	e006      	b.n	8006110 <HAL_GPIO_Init+0x1f8>
 8006102:	2303      	movs	r3, #3
 8006104:	e004      	b.n	8006110 <HAL_GPIO_Init+0x1f8>
 8006106:	2302      	movs	r3, #2
 8006108:	e002      	b.n	8006110 <HAL_GPIO_Init+0x1f8>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <HAL_GPIO_Init+0x1f8>
 800610e:	2300      	movs	r3, #0
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	2103      	movs	r1, #3
 8006114:	400a      	ands	r2, r1
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	4093      	lsls	r3, r2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006120:	4935      	ldr	r1, [pc, #212]	; (80061f8 <HAL_GPIO_Init+0x2e0>)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	089b      	lsrs	r3, r3, #2
 8006126:	3302      	adds	r3, #2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800612e:	4b38      	ldr	r3, [pc, #224]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	43da      	mvns	r2, r3
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4013      	ands	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	025b      	lsls	r3, r3, #9
 8006146:	4013      	ands	r3, r2
 8006148:	d003      	beq.n	8006152 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006152:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006158:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	43da      	mvns	r2, r3
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4013      	ands	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	029b      	lsls	r3, r3, #10
 8006170:	4013      	ands	r3, r2
 8006172:	d003      	beq.n	800617c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800617c:	4b24      	ldr	r3, [pc, #144]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006182:	4b23      	ldr	r3, [pc, #140]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	43da      	mvns	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4013      	ands	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	035b      	lsls	r3, r3, #13
 800619a:	4013      	ands	r3, r2
 800619c:	d003      	beq.n	80061a6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80061a6:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80061ac:	4b18      	ldr	r3, [pc, #96]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	43da      	mvns	r2, r3
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4013      	ands	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	2380      	movs	r3, #128	; 0x80
 80061c2:	039b      	lsls	r3, r3, #14
 80061c4:	4013      	ands	r3, r2
 80061c6:	d003      	beq.n	80061d0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061d0:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <HAL_GPIO_Init+0x2f8>)
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	3301      	adds	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	40da      	lsrs	r2, r3
 80061e4:	1e13      	subs	r3, r2, #0
 80061e6:	d000      	beq.n	80061ea <HAL_GPIO_Init+0x2d2>
 80061e8:	e6a2      	b.n	8005f30 <HAL_GPIO_Init+0x18>
  }
}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b006      	add	sp, #24
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	40021000 	.word	0x40021000
 80061f8:	40010000 	.word	0x40010000
 80061fc:	50000400 	.word	0x50000400
 8006200:	50000800 	.word	0x50000800
 8006204:	50000c00 	.word	0x50000c00
 8006208:	50001000 	.word	0x50001000
 800620c:	50001c00 	.word	0x50001c00
 8006210:	40010400 	.word	0x40010400

08006214 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800622a:	e0bc      	b.n	80063a6 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800622c:	2201      	movs	r2, #1
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	409a      	lsls	r2, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	4013      	ands	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d100      	bne.n	8006240 <HAL_GPIO_DeInit+0x2c>
 800623e:	e0af      	b.n	80063a0 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	2103      	movs	r1, #3
 800624a:	4099      	lsls	r1, r3
 800624c:	000b      	movs	r3, r1
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	08da      	lsrs	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3208      	adds	r2, #8
 800625c:	0092      	lsls	r2, r2, #2
 800625e:	58d3      	ldr	r3, [r2, r3]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	2107      	movs	r1, #7
 8006264:	400a      	ands	r2, r1
 8006266:	0092      	lsls	r2, r2, #2
 8006268:	210f      	movs	r1, #15
 800626a:	4091      	lsls	r1, r2
 800626c:	000a      	movs	r2, r1
 800626e:	43d1      	mvns	r1, r2
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	08d2      	lsrs	r2, r2, #3
 8006274:	4019      	ands	r1, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3208      	adds	r2, #8
 800627a:	0092      	lsls	r2, r2, #2
 800627c:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	0052      	lsls	r2, r2, #1
 8006286:	2103      	movs	r1, #3
 8006288:	4091      	lsls	r1, r2
 800628a:	000a      	movs	r2, r1
 800628c:	43d2      	mvns	r2, r2
 800628e:	401a      	ands	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2101      	movs	r1, #1
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4091      	lsls	r1, r2
 800629e:	000a      	movs	r2, r1
 80062a0:	43d2      	mvns	r2, r2
 80062a2:	401a      	ands	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	0052      	lsls	r2, r2, #1
 80062b0:	2103      	movs	r1, #3
 80062b2:	4091      	lsls	r1, r2
 80062b4:	000a      	movs	r2, r1
 80062b6:	43d2      	mvns	r2, r2
 80062b8:	401a      	ands	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 80062be:	4a3f      	ldr	r2, [pc, #252]	; (80063bc <HAL_GPIO_DeInit+0x1a8>)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	3302      	adds	r3, #2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	589b      	ldr	r3, [r3, r2]
 80062ca:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2203      	movs	r2, #3
 80062d0:	4013      	ands	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	220f      	movs	r2, #15
 80062d6:	409a      	lsls	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4013      	ands	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	23a0      	movs	r3, #160	; 0xa0
 80062e2:	05db      	lsls	r3, r3, #23
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d01f      	beq.n	8006328 <HAL_GPIO_DeInit+0x114>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a35      	ldr	r2, [pc, #212]	; (80063c0 <HAL_GPIO_DeInit+0x1ac>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d019      	beq.n	8006324 <HAL_GPIO_DeInit+0x110>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a34      	ldr	r2, [pc, #208]	; (80063c4 <HAL_GPIO_DeInit+0x1b0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_GPIO_DeInit+0x10c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a33      	ldr	r2, [pc, #204]	; (80063c8 <HAL_GPIO_DeInit+0x1b4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00d      	beq.n	800631c <HAL_GPIO_DeInit+0x108>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a32      	ldr	r2, [pc, #200]	; (80063cc <HAL_GPIO_DeInit+0x1b8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <HAL_GPIO_DeInit+0x104>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a31      	ldr	r2, [pc, #196]	; (80063d0 <HAL_GPIO_DeInit+0x1bc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_GPIO_DeInit+0x100>
 8006310:	2305      	movs	r3, #5
 8006312:	e00a      	b.n	800632a <HAL_GPIO_DeInit+0x116>
 8006314:	2306      	movs	r3, #6
 8006316:	e008      	b.n	800632a <HAL_GPIO_DeInit+0x116>
 8006318:	2304      	movs	r3, #4
 800631a:	e006      	b.n	800632a <HAL_GPIO_DeInit+0x116>
 800631c:	2303      	movs	r3, #3
 800631e:	e004      	b.n	800632a <HAL_GPIO_DeInit+0x116>
 8006320:	2302      	movs	r3, #2
 8006322:	e002      	b.n	800632a <HAL_GPIO_DeInit+0x116>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <HAL_GPIO_DeInit+0x116>
 8006328:	2300      	movs	r3, #0
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	2103      	movs	r1, #3
 800632e:	400a      	ands	r2, r1
 8006330:	0092      	lsls	r2, r2, #2
 8006332:	4093      	lsls	r3, r2
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	429a      	cmp	r2, r3
 8006338:	d132      	bne.n	80063a0 <HAL_GPIO_DeInit+0x18c>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2203      	movs	r2, #3
 800633e:	4013      	ands	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	220f      	movs	r2, #15
 8006344:	409a      	lsls	r2, r3
 8006346:	0013      	movs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <HAL_GPIO_DeInit+0x1a8>)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	089b      	lsrs	r3, r3, #2
 8006350:	3302      	adds	r3, #2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	589a      	ldr	r2, [r3, r2]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	43d9      	mvns	r1, r3
 800635a:	4818      	ldr	r0, [pc, #96]	; (80063bc <HAL_GPIO_DeInit+0x1a8>)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	400a      	ands	r2, r1
 8006362:	3302      	adds	r3, #2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006368:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	43d9      	mvns	r1, r3
 8006370:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 8006372:	400a      	ands	r2, r1
 8006374:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006376:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	43d9      	mvns	r1, r3
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 8006380:	400a      	ands	r2, r1
 8006382:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006384:	4b13      	ldr	r3, [pc, #76]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	43d9      	mvns	r1, r3
 800638c:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 800638e:	400a      	ands	r2, r1
 8006390:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006392:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	43d9      	mvns	r1, r3
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <HAL_GPIO_DeInit+0x1c0>)
 800639c:	400a      	ands	r2, r1
 800639e:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	3301      	adds	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	40da      	lsrs	r2, r3
 80063ac:	1e13      	subs	r3, r2, #0
 80063ae:	d000      	beq.n	80063b2 <HAL_GPIO_DeInit+0x19e>
 80063b0:	e73c      	b.n	800622c <HAL_GPIO_DeInit+0x18>
  }
}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b006      	add	sp, #24
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	40010000 	.word	0x40010000
 80063c0:	50000400 	.word	0x50000400
 80063c4:	50000800 	.word	0x50000800
 80063c8:	50000c00 	.word	0x50000c00
 80063cc:	50001000 	.word	0x50001000
 80063d0:	50001c00 	.word	0x50001c00
 80063d4:	40010400 	.word	0x40010400

080063d8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	0008      	movs	r0, r1
 80063e2:	0011      	movs	r1, r2
 80063e4:	1cbb      	adds	r3, r7, #2
 80063e6:	1c02      	adds	r2, r0, #0
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	1c7b      	adds	r3, r7, #1
 80063ec:	1c0a      	adds	r2, r1, #0
 80063ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80063f0:	1c7b      	adds	r3, r7, #1
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063f8:	1cbb      	adds	r3, r7, #2
 80063fa:	881a      	ldrh	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006400:	e003      	b.n	800640a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006402:	1cbb      	adds	r3, r7, #2
 8006404:	881a      	ldrh	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	629a      	str	r2, [r3, #40]	; 0x28
}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	46bd      	mov	sp, r7
 800640e:	b002      	add	sp, #8
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	000a      	movs	r2, r1
 800641c:	1cbb      	adds	r3, r7, #2
 800641e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	1cbb      	adds	r3, r7, #2
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	405a      	eors	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	615a      	str	r2, [r3, #20]
}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	46bd      	mov	sp, r7
 8006432:	b002      	add	sp, #8
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e082      	b.n	8006550 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2241      	movs	r2, #65	; 0x41
 800644e:	5c9b      	ldrb	r3, [r3, r2]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	2100      	movs	r1, #0
 800645c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0018      	movs	r0, r3
 8006462:	f7fd fce9 	bl	8003e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2241      	movs	r2, #65	; 0x41
 800646a:	2124      	movs	r1, #36	; 0x24
 800646c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2101      	movs	r1, #1
 800647a:	438a      	bics	r2, r1
 800647c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4934      	ldr	r1, [pc, #208]	; (8006558 <HAL_I2C_Init+0x120>)
 8006488:	400a      	ands	r2, r1
 800648a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4931      	ldr	r1, [pc, #196]	; (800655c <HAL_I2C_Init+0x124>)
 8006498:	400a      	ands	r2, r1
 800649a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d108      	bne.n	80064b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2180      	movs	r1, #128	; 0x80
 80064ae:	0209      	lsls	r1, r1, #8
 80064b0:	430a      	orrs	r2, r1
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	e007      	b.n	80064c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2184      	movs	r1, #132	; 0x84
 80064c0:	0209      	lsls	r1, r1, #8
 80064c2:	430a      	orrs	r2, r1
 80064c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d104      	bne.n	80064d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	0112      	lsls	r2, r2, #4
 80064d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	491f      	ldr	r1, [pc, #124]	; (8006560 <HAL_I2C_Init+0x128>)
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	491a      	ldr	r1, [pc, #104]	; (800655c <HAL_I2C_Init+0x124>)
 80064f4:	400a      	ands	r2, r1
 80064f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	431a      	orrs	r2, r3
 8006502:	0011      	movs	r1, r2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	021a      	lsls	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69d9      	ldr	r1, [r3, #28]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1a      	ldr	r2, [r3, #32]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2101      	movs	r1, #1
 800652e:	430a      	orrs	r2, r1
 8006530:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2241      	movs	r2, #65	; 0x41
 800653c:	2120      	movs	r1, #32
 800653e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2242      	movs	r2, #66	; 0x42
 800654a:	2100      	movs	r1, #0
 800654c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	0018      	movs	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}
 8006558:	f0ffffff 	.word	0xf0ffffff
 800655c:	ffff7fff 	.word	0xffff7fff
 8006560:	02008000 	.word	0x02008000

08006564 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e022      	b.n	80065bc <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2241      	movs	r2, #65	; 0x41
 800657a:	2124      	movs	r1, #36	; 0x24
 800657c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2101      	movs	r1, #1
 800658a:	438a      	bics	r2, r1
 800658c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	0018      	movs	r0, r3
 8006592:	f7fd fc95 	bl	8003ec0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2241      	movs	r2, #65	; 0x41
 80065a0:	2100      	movs	r1, #0
 80065a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2242      	movs	r2, #66	; 0x42
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2240      	movs	r2, #64	; 0x40
 80065b6:	2100      	movs	r1, #0
 80065b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	0018      	movs	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	b002      	add	sp, #8
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b089      	sub	sp, #36	; 0x24
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	000c      	movs	r4, r1
 80065ce:	0010      	movs	r0, r2
 80065d0:	0019      	movs	r1, r3
 80065d2:	230a      	movs	r3, #10
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	1c22      	adds	r2, r4, #0
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	2308      	movs	r3, #8
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	1c02      	adds	r2, r0, #0
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	1dbb      	adds	r3, r7, #6
 80065e4:	1c0a      	adds	r2, r1, #0
 80065e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2241      	movs	r2, #65	; 0x41
 80065ec:	5c9b      	ldrb	r3, [r3, r2]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d000      	beq.n	80065f6 <HAL_I2C_Mem_Write+0x32>
 80065f4:	e10c      	b.n	8006810 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <HAL_I2C_Mem_Write+0x42>
 80065fc:	232c      	movs	r3, #44	; 0x2c
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d105      	bne.n	8006612 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2280      	movs	r2, #128	; 0x80
 800660a:	0092      	lsls	r2, r2, #2
 800660c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e0ff      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2240      	movs	r2, #64	; 0x40
 8006616:	5c9b      	ldrb	r3, [r3, r2]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_I2C_Mem_Write+0x5c>
 800661c:	2302      	movs	r3, #2
 800661e:	e0f8      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2240      	movs	r2, #64	; 0x40
 8006624:	2101      	movs	r1, #1
 8006626:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006628:	f7ff fb74 	bl	8005d14 <HAL_GetTick>
 800662c:	0003      	movs	r3, r0
 800662e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	0219      	lsls	r1, r3, #8
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	2319      	movs	r3, #25
 800663c:	2201      	movs	r2, #1
 800663e:	f000 fb0b 	bl	8006c58 <I2C_WaitOnFlagUntilTimeout>
 8006642:	1e03      	subs	r3, r0, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e0e3      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2241      	movs	r2, #65	; 0x41
 800664e:	2121      	movs	r1, #33	; 0x21
 8006650:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2242      	movs	r2, #66	; 0x42
 8006656:	2140      	movs	r1, #64	; 0x40
 8006658:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	222c      	movs	r2, #44	; 0x2c
 800666a:	18ba      	adds	r2, r7, r2
 800666c:	8812      	ldrh	r2, [r2, #0]
 800666e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006676:	1dbb      	adds	r3, r7, #6
 8006678:	881c      	ldrh	r4, [r3, #0]
 800667a:	2308      	movs	r3, #8
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	881a      	ldrh	r2, [r3, #0]
 8006680:	230a      	movs	r3, #10
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	8819      	ldrh	r1, [r3, #0]
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	0023      	movs	r3, r4
 8006692:	f000 f9f9 	bl	8006a88 <I2C_RequestMemoryWrite>
 8006696:	1e03      	subs	r3, r0, #0
 8006698:	d005      	beq.n	80066a6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2240      	movs	r2, #64	; 0x40
 800669e:	2100      	movs	r1, #0
 80066a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0b5      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2bff      	cmp	r3, #255	; 0xff
 80066ae:	d911      	bls.n	80066d4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	22ff      	movs	r2, #255	; 0xff
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	045c      	lsls	r4, r3, #17
 80066c0:	230a      	movs	r3, #10
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	8819      	ldrh	r1, [r3, #0]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	2300      	movs	r3, #0
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	0023      	movs	r3, r4
 80066ce:	f000 fbe3 	bl	8006e98 <I2C_TransferConfig>
 80066d2:	e012      	b.n	80066fa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	049c      	lsls	r4, r3, #18
 80066e8:	230a      	movs	r3, #10
 80066ea:	18fb      	adds	r3, r7, r3
 80066ec:	8819      	ldrh	r1, [r3, #0]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	2300      	movs	r3, #0
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	0023      	movs	r3, r4
 80066f6:	f000 fbcf 	bl	8006e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	0018      	movs	r0, r3
 8006702:	f000 fae8 	bl	8006cd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006706:	1e03      	subs	r3, r0, #0
 8006708:	d001      	beq.n	800670e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e081      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d03a      	beq.n	80067be <HAL_I2C_Mem_Write+0x1fa>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674c:	2b00      	cmp	r3, #0
 800674e:	d136      	bne.n	80067be <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	0013      	movs	r3, r2
 800675a:	2200      	movs	r2, #0
 800675c:	2180      	movs	r1, #128	; 0x80
 800675e:	f000 fa7b 	bl	8006c58 <I2C_WaitOnFlagUntilTimeout>
 8006762:	1e03      	subs	r3, r0, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e053      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	2bff      	cmp	r3, #255	; 0xff
 8006772:	d911      	bls.n	8006798 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	22ff      	movs	r2, #255	; 0xff
 8006778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677e:	b2da      	uxtb	r2, r3
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	045c      	lsls	r4, r3, #17
 8006784:	230a      	movs	r3, #10
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	8819      	ldrh	r1, [r3, #0]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	2300      	movs	r3, #0
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	0023      	movs	r3, r4
 8006792:	f000 fb81 	bl	8006e98 <I2C_TransferConfig>
 8006796:	e012      	b.n	80067be <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	049c      	lsls	r4, r3, #18
 80067ac:	230a      	movs	r3, #10
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	8819      	ldrh	r1, [r3, #0]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	2300      	movs	r3, #0
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	0023      	movs	r3, r4
 80067ba:	f000 fb6d 	bl	8006e98 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d198      	bne.n	80066fa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 fac0 	bl	8006d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067d4:	1e03      	subs	r3, r0, #0
 80067d6:	d001      	beq.n	80067dc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e01a      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2220      	movs	r2, #32
 80067e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	490b      	ldr	r1, [pc, #44]	; (800681c <HAL_I2C_Mem_Write+0x258>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2241      	movs	r2, #65	; 0x41
 80067f8:	2120      	movs	r1, #32
 80067fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2242      	movs	r2, #66	; 0x42
 8006800:	2100      	movs	r1, #0
 8006802:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2240      	movs	r2, #64	; 0x40
 8006808:	2100      	movs	r1, #0
 800680a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e000      	b.n	8006812 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006810:	2302      	movs	r3, #2
  }
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b007      	add	sp, #28
 8006818:	bd90      	pop	{r4, r7, pc}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	fe00e800 	.word	0xfe00e800

08006820 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	000c      	movs	r4, r1
 800682a:	0010      	movs	r0, r2
 800682c:	0019      	movs	r1, r3
 800682e:	230a      	movs	r3, #10
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	1c22      	adds	r2, r4, #0
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	2308      	movs	r3, #8
 8006838:	18fb      	adds	r3, r7, r3
 800683a:	1c02      	adds	r2, r0, #0
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	1dbb      	adds	r3, r7, #6
 8006840:	1c0a      	adds	r2, r1, #0
 8006842:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2241      	movs	r2, #65	; 0x41
 8006848:	5c9b      	ldrb	r3, [r3, r2]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b20      	cmp	r3, #32
 800684e:	d000      	beq.n	8006852 <HAL_I2C_Mem_Read+0x32>
 8006850:	e110      	b.n	8006a74 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <HAL_I2C_Mem_Read+0x42>
 8006858:	232c      	movs	r3, #44	; 0x2c
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2280      	movs	r2, #128	; 0x80
 8006866:	0092      	lsls	r2, r2, #2
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e103      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	5c9b      	ldrb	r3, [r3, r2]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_I2C_Mem_Read+0x5c>
 8006878:	2302      	movs	r3, #2
 800687a:	e0fc      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2240      	movs	r2, #64	; 0x40
 8006880:	2101      	movs	r1, #1
 8006882:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006884:	f7ff fa46 	bl	8005d14 <HAL_GetTick>
 8006888:	0003      	movs	r3, r0
 800688a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800688c:	2380      	movs	r3, #128	; 0x80
 800688e:	0219      	lsls	r1, r3, #8
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2319      	movs	r3, #25
 8006898:	2201      	movs	r2, #1
 800689a:	f000 f9dd 	bl	8006c58 <I2C_WaitOnFlagUntilTimeout>
 800689e:	1e03      	subs	r3, r0, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e0e7      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2241      	movs	r2, #65	; 0x41
 80068aa:	2122      	movs	r1, #34	; 0x22
 80068ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2242      	movs	r2, #66	; 0x42
 80068b2:	2140      	movs	r1, #64	; 0x40
 80068b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	222c      	movs	r2, #44	; 0x2c
 80068c6:	18ba      	adds	r2, r7, r2
 80068c8:	8812      	ldrh	r2, [r2, #0]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068d2:	1dbb      	adds	r3, r7, #6
 80068d4:	881c      	ldrh	r4, [r3, #0]
 80068d6:	2308      	movs	r3, #8
 80068d8:	18fb      	adds	r3, r7, r3
 80068da:	881a      	ldrh	r2, [r3, #0]
 80068dc:	230a      	movs	r3, #10
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	8819      	ldrh	r1, [r3, #0]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	0023      	movs	r3, r4
 80068ee:	f000 f92f 	bl	8006b50 <I2C_RequestMemoryRead>
 80068f2:	1e03      	subs	r3, r0, #0
 80068f4:	d005      	beq.n	8006902 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2240      	movs	r2, #64	; 0x40
 80068fa:	2100      	movs	r1, #0
 80068fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e0b9      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	2bff      	cmp	r3, #255	; 0xff
 800690a:	d911      	bls.n	8006930 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	22ff      	movs	r2, #255	; 0xff
 8006910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006916:	b2da      	uxtb	r2, r3
 8006918:	2380      	movs	r3, #128	; 0x80
 800691a:	045c      	lsls	r4, r3, #17
 800691c:	230a      	movs	r3, #10
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	8819      	ldrh	r1, [r3, #0]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	4b56      	ldr	r3, [pc, #344]	; (8006a80 <HAL_I2C_Mem_Read+0x260>)
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	0023      	movs	r3, r4
 800692a:	f000 fab5 	bl	8006e98 <I2C_TransferConfig>
 800692e:	e012      	b.n	8006956 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693e:	b2da      	uxtb	r2, r3
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	049c      	lsls	r4, r3, #18
 8006944:	230a      	movs	r3, #10
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	8819      	ldrh	r1, [r3, #0]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	4b4c      	ldr	r3, [pc, #304]	; (8006a80 <HAL_I2C_Mem_Read+0x260>)
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	0023      	movs	r3, r4
 8006952:	f000 faa1 	bl	8006e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	0013      	movs	r3, r2
 8006960:	2200      	movs	r2, #0
 8006962:	2104      	movs	r1, #4
 8006964:	f000 f978 	bl	8006c58 <I2C_WaitOnFlagUntilTimeout>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d001      	beq.n	8006970 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e082      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d03a      	beq.n	8006a22 <HAL_I2C_Mem_Read+0x202>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d136      	bne.n	8006a22 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	0013      	movs	r3, r2
 80069be:	2200      	movs	r2, #0
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	f000 f949 	bl	8006c58 <I2C_WaitOnFlagUntilTimeout>
 80069c6:	1e03      	subs	r3, r0, #0
 80069c8:	d001      	beq.n	80069ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e053      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2bff      	cmp	r3, #255	; 0xff
 80069d6:	d911      	bls.n	80069fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	22ff      	movs	r2, #255	; 0xff
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	2380      	movs	r3, #128	; 0x80
 80069e6:	045c      	lsls	r4, r3, #17
 80069e8:	230a      	movs	r3, #10
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	8819      	ldrh	r1, [r3, #0]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	0023      	movs	r3, r4
 80069f6:	f000 fa4f 	bl	8006e98 <I2C_TransferConfig>
 80069fa:	e012      	b.n	8006a22 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	2380      	movs	r3, #128	; 0x80
 8006a0e:	049c      	lsls	r4, r3, #18
 8006a10:	230a      	movs	r3, #10
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	8819      	ldrh	r1, [r3, #0]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	0023      	movs	r3, r4
 8006a1e:	f000 fa3b 	bl	8006e98 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d194      	bne.n	8006956 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 f98e 	bl	8006d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a38:	1e03      	subs	r3, r0, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e01a      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2220      	movs	r2, #32
 8006a46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	490c      	ldr	r1, [pc, #48]	; (8006a84 <HAL_I2C_Mem_Read+0x264>)
 8006a54:	400a      	ands	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2241      	movs	r2, #65	; 0x41
 8006a5c:	2120      	movs	r1, #32
 8006a5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2242      	movs	r2, #66	; 0x42
 8006a64:	2100      	movs	r1, #0
 8006a66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2240      	movs	r2, #64	; 0x40
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	e000      	b.n	8006a76 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8006a74:	2302      	movs	r3, #2
  }
}
 8006a76:	0018      	movs	r0, r3
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b007      	add	sp, #28
 8006a7c:	bd90      	pop	{r4, r7, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	80002400 	.word	0x80002400
 8006a84:	fe00e800 	.word	0xfe00e800

08006a88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b5b0      	push	{r4, r5, r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	000c      	movs	r4, r1
 8006a92:	0010      	movs	r0, r2
 8006a94:	0019      	movs	r1, r3
 8006a96:	250a      	movs	r5, #10
 8006a98:	197b      	adds	r3, r7, r5
 8006a9a:	1c22      	adds	r2, r4, #0
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	2308      	movs	r3, #8
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	1c02      	adds	r2, r0, #0
 8006aa4:	801a      	strh	r2, [r3, #0]
 8006aa6:	1dbb      	adds	r3, r7, #6
 8006aa8:	1c0a      	adds	r2, r1, #0
 8006aaa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aac:	1dbb      	adds	r3, r7, #6
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	2380      	movs	r3, #128	; 0x80
 8006ab4:	045c      	lsls	r4, r3, #17
 8006ab6:	197b      	adds	r3, r7, r5
 8006ab8:	8819      	ldrh	r1, [r3, #0]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <I2C_RequestMemoryWrite+0xc4>)
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	0023      	movs	r3, r4
 8006ac2:	f000 f9e9 	bl	8006e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac8:	6a39      	ldr	r1, [r7, #32]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	0018      	movs	r0, r3
 8006ace:	f000 f902 	bl	8006cd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ad2:	1e03      	subs	r3, r0, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e033      	b.n	8006b42 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ada:	1dbb      	adds	r3, r7, #6
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d107      	bne.n	8006af2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28
 8006af0:	e019      	b.n	8006b26 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006af2:	2308      	movs	r3, #8
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b06:	6a39      	ldr	r1, [r7, #32]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f000 f8e3 	bl	8006cd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b10:	1e03      	subs	r3, r0, #0
 8006b12:	d001      	beq.n	8006b18 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e014      	b.n	8006b42 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b18:	2308      	movs	r3, #8
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	0013      	movs	r3, r2
 8006b30:	2200      	movs	r2, #0
 8006b32:	2180      	movs	r1, #128	; 0x80
 8006b34:	f000 f890 	bl	8006c58 <I2C_WaitOnFlagUntilTimeout>
 8006b38:	1e03      	subs	r3, r0, #0
 8006b3a:	d001      	beq.n	8006b40 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	0018      	movs	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bdb0      	pop	{r4, r5, r7, pc}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	80002000 	.word	0x80002000

08006b50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b50:	b5b0      	push	{r4, r5, r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	000c      	movs	r4, r1
 8006b5a:	0010      	movs	r0, r2
 8006b5c:	0019      	movs	r1, r3
 8006b5e:	250a      	movs	r5, #10
 8006b60:	197b      	adds	r3, r7, r5
 8006b62:	1c22      	adds	r2, r4, #0
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	2308      	movs	r3, #8
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	1c02      	adds	r2, r0, #0
 8006b6c:	801a      	strh	r2, [r3, #0]
 8006b6e:	1dbb      	adds	r3, r7, #6
 8006b70:	1c0a      	adds	r2, r1, #0
 8006b72:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b74:	1dbb      	adds	r3, r7, #6
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	197b      	adds	r3, r7, r5
 8006b7c:	8819      	ldrh	r1, [r3, #0]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	4b23      	ldr	r3, [pc, #140]	; (8006c10 <I2C_RequestMemoryRead+0xc0>)
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	f000 f987 	bl	8006e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8c:	6a39      	ldr	r1, [r7, #32]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 f8a0 	bl	8006cd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b96:	1e03      	subs	r3, r0, #0
 8006b98:	d001      	beq.n	8006b9e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e033      	b.n	8006c06 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b9e:	1dbb      	adds	r3, r7, #6
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d107      	bne.n	8006bb6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	18fb      	adds	r3, r7, r3
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb4:	e019      	b.n	8006bea <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	0a1b      	lsrs	r3, r3, #8
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	6a39      	ldr	r1, [r7, #32]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 f881 	bl	8006cd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bd4:	1e03      	subs	r3, r0, #0
 8006bd6:	d001      	beq.n	8006bdc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e014      	b.n	8006c06 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bdc:	2308      	movs	r3, #8
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	0013      	movs	r3, r2
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2140      	movs	r1, #64	; 0x40
 8006bf8:	f000 f82e 	bl	8006c58 <I2C_WaitOnFlagUntilTimeout>
 8006bfc:	1e03      	subs	r3, r0, #0
 8006bfe:	d001      	beq.n	8006c04 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	0018      	movs	r0, r3
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b004      	add	sp, #16
 8006c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	80002000 	.word	0x80002000

08006c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	2202      	movs	r2, #2
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d103      	bne.n	8006c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d007      	beq.n	8006c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	619a      	str	r2, [r3, #24]
  }
}
 8006c50:	46c0      	nop			; (mov r8, r8)
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b002      	add	sp, #8
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	1dfb      	adds	r3, r7, #7
 8006c66:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c68:	e021      	b.n	8006cae <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	d01e      	beq.n	8006cae <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c70:	f7ff f850 	bl	8005d14 <HAL_GetTick>
 8006c74:	0002      	movs	r2, r0
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d113      	bne.n	8006cae <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2241      	movs	r2, #65	; 0x41
 8006c96:	2120      	movs	r1, #32
 8006c98:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2242      	movs	r2, #66	; 0x42
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e00f      	b.n	8006cce <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	425a      	negs	r2, r3
 8006cbe:	4153      	adcs	r3, r2
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	1dfb      	adds	r3, r7, #7
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d0ce      	beq.n	8006c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	0018      	movs	r0, r3
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b004      	add	sp, #16
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ce2:	e02b      	b.n	8006d3c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 f86e 	bl	8006dcc <I2C_IsAcknowledgeFailed>
 8006cf0:	1e03      	subs	r3, r0, #0
 8006cf2:	d001      	beq.n	8006cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e029      	b.n	8006d4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	d01e      	beq.n	8006d3c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfe:	f7ff f809 	bl	8005d14 <HAL_GetTick>
 8006d02:	0002      	movs	r2, r0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d302      	bcc.n	8006d14 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d113      	bne.n	8006d3c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	2220      	movs	r2, #32
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2241      	movs	r2, #65	; 0x41
 8006d24:	2120      	movs	r1, #32
 8006d26:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2242      	movs	r2, #66	; 0x42
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2240      	movs	r2, #64	; 0x40
 8006d34:	2100      	movs	r1, #0
 8006d36:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e007      	b.n	8006d4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	2202      	movs	r2, #2
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d1cc      	bne.n	8006ce4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b004      	add	sp, #16
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d60:	e028      	b.n	8006db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f000 f82f 	bl	8006dcc <I2C_IsAcknowledgeFailed>
 8006d6e:	1e03      	subs	r3, r0, #0
 8006d70:	d001      	beq.n	8006d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e026      	b.n	8006dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fe ffcd 	bl	8005d14 <HAL_GetTick>
 8006d7a:	0002      	movs	r2, r0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d113      	bne.n	8006db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	2220      	movs	r2, #32
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2241      	movs	r2, #65	; 0x41
 8006d9c:	2120      	movs	r1, #32
 8006d9e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2242      	movs	r2, #66	; 0x42
 8006da4:	2100      	movs	r1, #0
 8006da6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2240      	movs	r2, #64	; 0x40
 8006dac:	2100      	movs	r1, #0
 8006dae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e007      	b.n	8006dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d1cf      	bne.n	8006d62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b004      	add	sp, #16
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2210      	movs	r2, #16
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b10      	cmp	r3, #16
 8006de4:	d151      	bne.n	8006e8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006de6:	e021      	b.n	8006e2c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	3301      	adds	r3, #1
 8006dec:	d01e      	beq.n	8006e2c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fe ff91 	bl	8005d14 <HAL_GetTick>
 8006df2:	0002      	movs	r2, r0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <I2C_IsAcknowledgeFailed+0x38>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d113      	bne.n	8006e2c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	2220      	movs	r2, #32
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2241      	movs	r2, #65	; 0x41
 8006e14:	2120      	movs	r1, #32
 8006e16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2242      	movs	r2, #66	; 0x42
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2240      	movs	r2, #64	; 0x40
 8006e24:	2100      	movs	r1, #0
 8006e26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e02f      	b.n	8006e8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2220      	movs	r2, #32
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d1d6      	bne.n	8006de8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2210      	movs	r2, #16
 8006e40:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2220      	movs	r2, #32
 8006e48:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f7ff fee1 	bl	8006c14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	490d      	ldr	r1, [pc, #52]	; (8006e94 <I2C_IsAcknowledgeFailed+0xc8>)
 8006e5e:	400a      	ands	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	2204      	movs	r2, #4
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2241      	movs	r2, #65	; 0x41
 8006e72:	2120      	movs	r1, #32
 8006e74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2242      	movs	r2, #66	; 0x42
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2240      	movs	r2, #64	; 0x40
 8006e82:	2100      	movs	r1, #0
 8006e84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b004      	add	sp, #16
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	fe00e800 	.word	0xfe00e800

08006e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006e98:	b590      	push	{r4, r7, lr}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	0008      	movs	r0, r1
 8006ea2:	0011      	movs	r1, r2
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	240a      	movs	r4, #10
 8006ea8:	193b      	adds	r3, r7, r4
 8006eaa:	1c02      	adds	r2, r0, #0
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	2009      	movs	r0, #9
 8006eb0:	183b      	adds	r3, r7, r0
 8006eb2:	1c0a      	adds	r2, r1, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	6a3a      	ldr	r2, [r7, #32]
 8006ebe:	0d51      	lsrs	r1, r2, #21
 8006ec0:	2280      	movs	r2, #128	; 0x80
 8006ec2:	00d2      	lsls	r2, r2, #3
 8006ec4:	400a      	ands	r2, r1
 8006ec6:	490e      	ldr	r1, [pc, #56]	; (8006f00 <I2C_TransferConfig+0x68>)
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	43d2      	mvns	r2, r2
 8006ecc:	401a      	ands	r2, r3
 8006ece:	0011      	movs	r1, r2
 8006ed0:	193b      	adds	r3, r7, r4
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	059b      	lsls	r3, r3, #22
 8006ed6:	0d9a      	lsrs	r2, r3, #22
 8006ed8:	183b      	adds	r3, r7, r0
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	0418      	lsls	r0, r3, #16
 8006ede:	23ff      	movs	r3, #255	; 0xff
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	4003      	ands	r3, r0
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b005      	add	sp, #20
 8006efc:	bd90      	pop	{r4, r7, pc}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	03ff63ff 	.word	0x03ff63ff

08006f04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2241      	movs	r2, #65	; 0x41
 8006f12:	5c9b      	ldrb	r3, [r3, r2]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d138      	bne.n	8006f8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2240      	movs	r2, #64	; 0x40
 8006f1e:	5c9b      	ldrb	r3, [r3, r2]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e032      	b.n	8006f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2240      	movs	r2, #64	; 0x40
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2241      	movs	r2, #65	; 0x41
 8006f34:	2124      	movs	r1, #36	; 0x24
 8006f36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2101      	movs	r1, #1
 8006f44:	438a      	bics	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4911      	ldr	r1, [pc, #68]	; (8006f98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006f54:	400a      	ands	r2, r1
 8006f56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6819      	ldr	r1, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2101      	movs	r1, #1
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2241      	movs	r2, #65	; 0x41
 8006f7c:	2120      	movs	r1, #32
 8006f7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2240      	movs	r2, #64	; 0x40
 8006f84:	2100      	movs	r1, #0
 8006f86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e000      	b.n	8006f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f8c:	2302      	movs	r3, #2
  }
}
 8006f8e:	0018      	movs	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b002      	add	sp, #8
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	ffffefff 	.word	0xffffefff

08006f9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2241      	movs	r2, #65	; 0x41
 8006faa:	5c9b      	ldrb	r3, [r3, r2]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d139      	bne.n	8007026 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2240      	movs	r2, #64	; 0x40
 8006fb6:	5c9b      	ldrb	r3, [r3, r2]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e033      	b.n	8007028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2240      	movs	r2, #64	; 0x40
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2241      	movs	r2, #65	; 0x41
 8006fcc:	2124      	movs	r1, #36	; 0x24
 8006fce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2101      	movs	r1, #1
 8006fdc:	438a      	bics	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a11      	ldr	r2, [pc, #68]	; (8007030 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2101      	movs	r1, #1
 800700e:	430a      	orrs	r2, r1
 8007010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2241      	movs	r2, #65	; 0x41
 8007016:	2120      	movs	r1, #32
 8007018:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2240      	movs	r2, #64	; 0x40
 800701e:	2100      	movs	r1, #0
 8007020:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	0018      	movs	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	b004      	add	sp, #16
 800702e:	bd80      	pop	{r7, pc}
 8007030:	fffff0ff 	.word	0xfffff0ff

08007034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007034:	b5b0      	push	{r4, r5, r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f000 fbbc 	bl	80077c0 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007048:	4bc8      	ldr	r3, [pc, #800]	; (800736c <HAL_RCC_OscConfig+0x338>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	220c      	movs	r2, #12
 800704e:	4013      	ands	r3, r2
 8007050:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007052:	4bc6      	ldr	r3, [pc, #792]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	025b      	lsls	r3, r3, #9
 800705a:	4013      	ands	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2201      	movs	r2, #1
 8007064:	4013      	ands	r3, r2
 8007066:	d100      	bne.n	800706a <HAL_RCC_OscConfig+0x36>
 8007068:	e07e      	b.n	8007168 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d007      	beq.n	8007080 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2b0c      	cmp	r3, #12
 8007074:	d112      	bne.n	800709c <HAL_RCC_OscConfig+0x68>
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	2380      	movs	r3, #128	; 0x80
 800707a:	025b      	lsls	r3, r3, #9
 800707c:	429a      	cmp	r2, r3
 800707e:	d10d      	bne.n	800709c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007080:	4bba      	ldr	r3, [pc, #744]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	2380      	movs	r3, #128	; 0x80
 8007086:	029b      	lsls	r3, r3, #10
 8007088:	4013      	ands	r3, r2
 800708a:	d100      	bne.n	800708e <HAL_RCC_OscConfig+0x5a>
 800708c:	e06b      	b.n	8007166 <HAL_RCC_OscConfig+0x132>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d167      	bne.n	8007166 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	f000 fb92 	bl	80077c0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	025b      	lsls	r3, r3, #9
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d107      	bne.n	80070b8 <HAL_RCC_OscConfig+0x84>
 80070a8:	4bb0      	ldr	r3, [pc, #704]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4baf      	ldr	r3, [pc, #700]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070ae:	2180      	movs	r1, #128	; 0x80
 80070b0:	0249      	lsls	r1, r1, #9
 80070b2:	430a      	orrs	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	e027      	b.n	8007108 <HAL_RCC_OscConfig+0xd4>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	23a0      	movs	r3, #160	; 0xa0
 80070be:	02db      	lsls	r3, r3, #11
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d10e      	bne.n	80070e2 <HAL_RCC_OscConfig+0xae>
 80070c4:	4ba9      	ldr	r3, [pc, #676]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4ba8      	ldr	r3, [pc, #672]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070ca:	2180      	movs	r1, #128	; 0x80
 80070cc:	02c9      	lsls	r1, r1, #11
 80070ce:	430a      	orrs	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	4ba6      	ldr	r3, [pc, #664]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4ba5      	ldr	r3, [pc, #660]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070d8:	2180      	movs	r1, #128	; 0x80
 80070da:	0249      	lsls	r1, r1, #9
 80070dc:	430a      	orrs	r2, r1
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e012      	b.n	8007108 <HAL_RCC_OscConfig+0xd4>
 80070e2:	4ba2      	ldr	r3, [pc, #648]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4ba1      	ldr	r3, [pc, #644]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070e8:	49a1      	ldr	r1, [pc, #644]	; (8007370 <HAL_RCC_OscConfig+0x33c>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	4b9f      	ldr	r3, [pc, #636]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	2380      	movs	r3, #128	; 0x80
 80070f4:	025b      	lsls	r3, r3, #9
 80070f6:	4013      	ands	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4b9b      	ldr	r3, [pc, #620]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4b9a      	ldr	r3, [pc, #616]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007102:	499c      	ldr	r1, [pc, #624]	; (8007374 <HAL_RCC_OscConfig+0x340>)
 8007104:	400a      	ands	r2, r1
 8007106:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d015      	beq.n	800713c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007110:	f7fe fe00 	bl	8005d14 <HAL_GetTick>
 8007114:	0003      	movs	r3, r0
 8007116:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007118:	e009      	b.n	800712e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800711a:	f7fe fdfb 	bl	8005d14 <HAL_GetTick>
 800711e:	0002      	movs	r2, r0
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b64      	cmp	r3, #100	; 0x64
 8007126:	d902      	bls.n	800712e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	f000 fb49 	bl	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800712e:	4b8f      	ldr	r3, [pc, #572]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	2380      	movs	r3, #128	; 0x80
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	4013      	ands	r3, r2
 8007138:	d0ef      	beq.n	800711a <HAL_RCC_OscConfig+0xe6>
 800713a:	e015      	b.n	8007168 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800713c:	f7fe fdea 	bl	8005d14 <HAL_GetTick>
 8007140:	0003      	movs	r3, r0
 8007142:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007146:	f7fe fde5 	bl	8005d14 <HAL_GetTick>
 800714a:	0002      	movs	r2, r0
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b64      	cmp	r3, #100	; 0x64
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e333      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007158:	4b84      	ldr	r3, [pc, #528]	; (800736c <HAL_RCC_OscConfig+0x338>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	029b      	lsls	r3, r3, #10
 8007160:	4013      	ands	r3, r2
 8007162:	d1f0      	bne.n	8007146 <HAL_RCC_OscConfig+0x112>
 8007164:	e000      	b.n	8007168 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007166:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2202      	movs	r2, #2
 800716e:	4013      	ands	r3, r2
 8007170:	d100      	bne.n	8007174 <HAL_RCC_OscConfig+0x140>
 8007172:	e098      	b.n	80072a6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	2220      	movs	r2, #32
 800717e:	4013      	ands	r3, r2
 8007180:	d009      	beq.n	8007196 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007182:	4b7a      	ldr	r3, [pc, #488]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4b79      	ldr	r3, [pc, #484]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007188:	2120      	movs	r1, #32
 800718a:	430a      	orrs	r2, r1
 800718c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	2220      	movs	r2, #32
 8007192:	4393      	bics	r3, r2
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d13d      	bne.n	800721e <HAL_RCC_OscConfig+0x1ea>
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d13a      	bne.n	800721e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80071a8:	4b70      	ldr	r3, [pc, #448]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2204      	movs	r2, #4
 80071ae:	4013      	ands	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_RCC_OscConfig+0x188>
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e301      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071bc:	4b6b      	ldr	r3, [pc, #428]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4a6d      	ldr	r2, [pc, #436]	; (8007378 <HAL_RCC_OscConfig+0x344>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	0019      	movs	r1, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	021a      	lsls	r2, r3, #8
 80071cc:	4b67      	ldr	r3, [pc, #412]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80071d2:	4b66      	ldr	r3, [pc, #408]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2209      	movs	r2, #9
 80071d8:	4393      	bics	r3, r2
 80071da:	0019      	movs	r1, r3
 80071dc:	4b63      	ldr	r3, [pc, #396]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	430a      	orrs	r2, r1
 80071e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071e4:	f000 fc20 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 80071e8:	0001      	movs	r1, r0
 80071ea:	4b60      	ldr	r3, [pc, #384]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	091b      	lsrs	r3, r3, #4
 80071f0:	220f      	movs	r2, #15
 80071f2:	4013      	ands	r3, r2
 80071f4:	4a61      	ldr	r2, [pc, #388]	; (800737c <HAL_RCC_OscConfig+0x348>)
 80071f6:	5cd3      	ldrb	r3, [r2, r3]
 80071f8:	000a      	movs	r2, r1
 80071fa:	40da      	lsrs	r2, r3
 80071fc:	4b60      	ldr	r3, [pc, #384]	; (8007380 <HAL_RCC_OscConfig+0x34c>)
 80071fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8007200:	2513      	movs	r5, #19
 8007202:	197c      	adds	r4, r7, r5
 8007204:	2000      	movs	r0, #0
 8007206:	f7fe fd4f 	bl	8005ca8 <HAL_InitTick>
 800720a:	0003      	movs	r3, r0
 800720c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800720e:	197b      	adds	r3, r7, r5
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d047      	beq.n	80072a6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8007216:	2313      	movs	r3, #19
 8007218:	18fb      	adds	r3, r7, r3
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	e2d0      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d027      	beq.n	8007274 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007224:	4b51      	ldr	r3, [pc, #324]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2209      	movs	r2, #9
 800722a:	4393      	bics	r3, r2
 800722c:	0019      	movs	r1, r3
 800722e:	4b4f      	ldr	r3, [pc, #316]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007232:	430a      	orrs	r2, r1
 8007234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007236:	f7fe fd6d 	bl	8005d14 <HAL_GetTick>
 800723a:	0003      	movs	r3, r0
 800723c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007240:	f7fe fd68 	bl	8005d14 <HAL_GetTick>
 8007244:	0002      	movs	r2, r0
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e2b6      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007252:	4b46      	ldr	r3, [pc, #280]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2204      	movs	r2, #4
 8007258:	4013      	ands	r3, r2
 800725a:	d0f1      	beq.n	8007240 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725c:	4b43      	ldr	r3, [pc, #268]	; (800736c <HAL_RCC_OscConfig+0x338>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4a45      	ldr	r2, [pc, #276]	; (8007378 <HAL_RCC_OscConfig+0x344>)
 8007262:	4013      	ands	r3, r2
 8007264:	0019      	movs	r1, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	021a      	lsls	r2, r3, #8
 800726c:	4b3f      	ldr	r3, [pc, #252]	; (800736c <HAL_RCC_OscConfig+0x338>)
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	e018      	b.n	80072a6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007274:	4b3d      	ldr	r3, [pc, #244]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b3c      	ldr	r3, [pc, #240]	; (800736c <HAL_RCC_OscConfig+0x338>)
 800727a:	2101      	movs	r1, #1
 800727c:	438a      	bics	r2, r1
 800727e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007280:	f7fe fd48 	bl	8005d14 <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800728a:	f7fe fd43 	bl	8005d14 <HAL_GetTick>
 800728e:	0002      	movs	r2, r0
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e291      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800729c:	4b33      	ldr	r3, [pc, #204]	; (800736c <HAL_RCC_OscConfig+0x338>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2204      	movs	r2, #4
 80072a2:	4013      	ands	r3, r2
 80072a4:	d1f1      	bne.n	800728a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2210      	movs	r2, #16
 80072ac:	4013      	ands	r3, r2
 80072ae:	d100      	bne.n	80072b2 <HAL_RCC_OscConfig+0x27e>
 80072b0:	e09f      	b.n	80073f2 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d13f      	bne.n	8007338 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072b8:	4b2c      	ldr	r3, [pc, #176]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	2380      	movs	r3, #128	; 0x80
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4013      	ands	r3, r2
 80072c2:	d005      	beq.n	80072d0 <HAL_RCC_OscConfig+0x29c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e277      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072d0:	4b26      	ldr	r3, [pc, #152]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	4a2b      	ldr	r2, [pc, #172]	; (8007384 <HAL_RCC_OscConfig+0x350>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	0019      	movs	r1, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072de:	4b23      	ldr	r3, [pc, #140]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072e4:	4b21      	ldr	r3, [pc, #132]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	0a19      	lsrs	r1, r3, #8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	061a      	lsls	r2, r3, #24
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <HAL_RCC_OscConfig+0x338>)
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	0b5b      	lsrs	r3, r3, #13
 80072fe:	3301      	adds	r3, #1
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	0212      	lsls	r2, r2, #8
 8007304:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007306:	4b19      	ldr	r3, [pc, #100]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	091b      	lsrs	r3, r3, #4
 800730c:	210f      	movs	r1, #15
 800730e:	400b      	ands	r3, r1
 8007310:	491a      	ldr	r1, [pc, #104]	; (800737c <HAL_RCC_OscConfig+0x348>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007316:	4b1a      	ldr	r3, [pc, #104]	; (8007380 <HAL_RCC_OscConfig+0x34c>)
 8007318:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800731a:	2513      	movs	r5, #19
 800731c:	197c      	adds	r4, r7, r5
 800731e:	2000      	movs	r0, #0
 8007320:	f7fe fcc2 	bl	8005ca8 <HAL_InitTick>
 8007324:	0003      	movs	r3, r0
 8007326:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007328:	197b      	adds	r3, r7, r5
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d060      	beq.n	80073f2 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8007330:	2313      	movs	r3, #19
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	e243      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d03e      	beq.n	80073be <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4b09      	ldr	r3, [pc, #36]	; (800736c <HAL_RCC_OscConfig+0x338>)
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	0049      	lsls	r1, r1, #1
 800734a:	430a      	orrs	r2, r1
 800734c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800734e:	f7fe fce1 	bl	8005d14 <HAL_GetTick>
 8007352:	0003      	movs	r3, r0
 8007354:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007356:	e017      	b.n	8007388 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007358:	f7fe fcdc 	bl	8005d14 <HAL_GetTick>
 800735c:	0002      	movs	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d910      	bls.n	8007388 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e22a      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	40021000 	.word	0x40021000
 8007370:	fffeffff 	.word	0xfffeffff
 8007374:	fffbffff 	.word	0xfffbffff
 8007378:	ffffe0ff 	.word	0xffffe0ff
 800737c:	0800c230 	.word	0x0800c230
 8007380:	20000014 	.word	0x20000014
 8007384:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007388:	4bc6      	ldr	r3, [pc, #792]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	2380      	movs	r3, #128	; 0x80
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4013      	ands	r3, r2
 8007392:	d0e1      	beq.n	8007358 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007394:	4bc3      	ldr	r3, [pc, #780]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4ac3      	ldr	r2, [pc, #780]	; (80076a8 <HAL_RCC_OscConfig+0x674>)
 800739a:	4013      	ands	r3, r2
 800739c:	0019      	movs	r1, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073a2:	4bc0      	ldr	r3, [pc, #768]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073a8:	4bbe      	ldr	r3, [pc, #760]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	0a19      	lsrs	r1, r3, #8
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	061a      	lsls	r2, r3, #24
 80073b6:	4bbb      	ldr	r3, [pc, #748]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
 80073bc:	e019      	b.n	80073f2 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073be:	4bb9      	ldr	r3, [pc, #740]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4bb8      	ldr	r3, [pc, #736]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80073c4:	49b9      	ldr	r1, [pc, #740]	; (80076ac <HAL_RCC_OscConfig+0x678>)
 80073c6:	400a      	ands	r2, r1
 80073c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ca:	f7fe fca3 	bl	8005d14 <HAL_GetTick>
 80073ce:	0003      	movs	r3, r0
 80073d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073d4:	f7fe fc9e 	bl	8005d14 <HAL_GetTick>
 80073d8:	0002      	movs	r2, r0
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e1ec      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80073e6:	4baf      	ldr	r3, [pc, #700]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	2380      	movs	r3, #128	; 0x80
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4013      	ands	r3, r2
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2208      	movs	r2, #8
 80073f8:	4013      	ands	r3, r2
 80073fa:	d036      	beq.n	800746a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d019      	beq.n	8007438 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007404:	4ba7      	ldr	r3, [pc, #668]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007408:	4ba6      	ldr	r3, [pc, #664]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800740a:	2101      	movs	r1, #1
 800740c:	430a      	orrs	r2, r1
 800740e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007410:	f7fe fc80 	bl	8005d14 <HAL_GetTick>
 8007414:	0003      	movs	r3, r0
 8007416:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800741a:	f7fe fc7b 	bl	8005d14 <HAL_GetTick>
 800741e:	0002      	movs	r2, r0
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e1c9      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800742c:	4b9d      	ldr	r3, [pc, #628]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800742e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007430:	2202      	movs	r2, #2
 8007432:	4013      	ands	r3, r2
 8007434:	d0f1      	beq.n	800741a <HAL_RCC_OscConfig+0x3e6>
 8007436:	e018      	b.n	800746a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007438:	4b9a      	ldr	r3, [pc, #616]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800743a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800743c:	4b99      	ldr	r3, [pc, #612]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800743e:	2101      	movs	r1, #1
 8007440:	438a      	bics	r2, r1
 8007442:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007444:	f7fe fc66 	bl	8005d14 <HAL_GetTick>
 8007448:	0003      	movs	r3, r0
 800744a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800744e:	f7fe fc61 	bl	8005d14 <HAL_GetTick>
 8007452:	0002      	movs	r2, r0
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e1af      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007460:	4b90      	ldr	r3, [pc, #576]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	2202      	movs	r2, #2
 8007466:	4013      	ands	r3, r2
 8007468:	d1f1      	bne.n	800744e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2204      	movs	r2, #4
 8007470:	4013      	ands	r3, r2
 8007472:	d100      	bne.n	8007476 <HAL_RCC_OscConfig+0x442>
 8007474:	e0af      	b.n	80075d6 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007476:	2323      	movs	r3, #35	; 0x23
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800747e:	4b89      	ldr	r3, [pc, #548]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007482:	2380      	movs	r3, #128	; 0x80
 8007484:	055b      	lsls	r3, r3, #21
 8007486:	4013      	ands	r3, r2
 8007488:	d10a      	bne.n	80074a0 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800748a:	4b86      	ldr	r3, [pc, #536]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800748c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748e:	4b85      	ldr	r3, [pc, #532]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007490:	2180      	movs	r1, #128	; 0x80
 8007492:	0549      	lsls	r1, r1, #21
 8007494:	430a      	orrs	r2, r1
 8007496:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007498:	2323      	movs	r3, #35	; 0x23
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	2201      	movs	r2, #1
 800749e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a0:	4b83      	ldr	r3, [pc, #524]	; (80076b0 <HAL_RCC_OscConfig+0x67c>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	2380      	movs	r3, #128	; 0x80
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	4013      	ands	r3, r2
 80074aa:	d11a      	bne.n	80074e2 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074ac:	4b80      	ldr	r3, [pc, #512]	; (80076b0 <HAL_RCC_OscConfig+0x67c>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4b7f      	ldr	r3, [pc, #508]	; (80076b0 <HAL_RCC_OscConfig+0x67c>)
 80074b2:	2180      	movs	r1, #128	; 0x80
 80074b4:	0049      	lsls	r1, r1, #1
 80074b6:	430a      	orrs	r2, r1
 80074b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ba:	f7fe fc2b 	bl	8005d14 <HAL_GetTick>
 80074be:	0003      	movs	r3, r0
 80074c0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c4:	f7fe fc26 	bl	8005d14 <HAL_GetTick>
 80074c8:	0002      	movs	r2, r0
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b64      	cmp	r3, #100	; 0x64
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e174      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074d6:	4b76      	ldr	r3, [pc, #472]	; (80076b0 <HAL_RCC_OscConfig+0x67c>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4013      	ands	r3, r2
 80074e0:	d0f0      	beq.n	80074c4 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d107      	bne.n	80074fe <HAL_RCC_OscConfig+0x4ca>
 80074ee:	4b6d      	ldr	r3, [pc, #436]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80074f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074f2:	4b6c      	ldr	r3, [pc, #432]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80074f4:	2180      	movs	r1, #128	; 0x80
 80074f6:	0049      	lsls	r1, r1, #1
 80074f8:	430a      	orrs	r2, r1
 80074fa:	651a      	str	r2, [r3, #80]	; 0x50
 80074fc:	e031      	b.n	8007562 <HAL_RCC_OscConfig+0x52e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10c      	bne.n	8007520 <HAL_RCC_OscConfig+0x4ec>
 8007506:	4b67      	ldr	r3, [pc, #412]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800750a:	4b66      	ldr	r3, [pc, #408]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800750c:	4967      	ldr	r1, [pc, #412]	; (80076ac <HAL_RCC_OscConfig+0x678>)
 800750e:	400a      	ands	r2, r1
 8007510:	651a      	str	r2, [r3, #80]	; 0x50
 8007512:	4b64      	ldr	r3, [pc, #400]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007516:	4b63      	ldr	r3, [pc, #396]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007518:	4966      	ldr	r1, [pc, #408]	; (80076b4 <HAL_RCC_OscConfig+0x680>)
 800751a:	400a      	ands	r2, r1
 800751c:	651a      	str	r2, [r3, #80]	; 0x50
 800751e:	e020      	b.n	8007562 <HAL_RCC_OscConfig+0x52e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	23a0      	movs	r3, #160	; 0xa0
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	429a      	cmp	r2, r3
 800752a:	d10e      	bne.n	800754a <HAL_RCC_OscConfig+0x516>
 800752c:	4b5d      	ldr	r3, [pc, #372]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800752e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007530:	4b5c      	ldr	r3, [pc, #368]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	00c9      	lsls	r1, r1, #3
 8007536:	430a      	orrs	r2, r1
 8007538:	651a      	str	r2, [r3, #80]	; 0x50
 800753a:	4b5a      	ldr	r3, [pc, #360]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800753c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007540:	2180      	movs	r1, #128	; 0x80
 8007542:	0049      	lsls	r1, r1, #1
 8007544:	430a      	orrs	r2, r1
 8007546:	651a      	str	r2, [r3, #80]	; 0x50
 8007548:	e00b      	b.n	8007562 <HAL_RCC_OscConfig+0x52e>
 800754a:	4b56      	ldr	r3, [pc, #344]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800754c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800754e:	4b55      	ldr	r3, [pc, #340]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007550:	4956      	ldr	r1, [pc, #344]	; (80076ac <HAL_RCC_OscConfig+0x678>)
 8007552:	400a      	ands	r2, r1
 8007554:	651a      	str	r2, [r3, #80]	; 0x50
 8007556:	4b53      	ldr	r3, [pc, #332]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800755a:	4b52      	ldr	r3, [pc, #328]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800755c:	4955      	ldr	r1, [pc, #340]	; (80076b4 <HAL_RCC_OscConfig+0x680>)
 800755e:	400a      	ands	r2, r1
 8007560:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d015      	beq.n	8007596 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800756a:	f7fe fbd3 	bl	8005d14 <HAL_GetTick>
 800756e:	0003      	movs	r3, r0
 8007570:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007572:	e009      	b.n	8007588 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007574:	f7fe fbce 	bl	8005d14 <HAL_GetTick>
 8007578:	0002      	movs	r2, r0
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	4a4e      	ldr	r2, [pc, #312]	; (80076b8 <HAL_RCC_OscConfig+0x684>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e11b      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007588:	4b46      	ldr	r3, [pc, #280]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800758a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4013      	ands	r3, r2
 8007592:	d0ef      	beq.n	8007574 <HAL_RCC_OscConfig+0x540>
 8007594:	e014      	b.n	80075c0 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007596:	f7fe fbbd 	bl	8005d14 <HAL_GetTick>
 800759a:	0003      	movs	r3, r0
 800759c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800759e:	e009      	b.n	80075b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075a0:	f7fe fbb8 	bl	8005d14 <HAL_GetTick>
 80075a4:	0002      	movs	r2, r0
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	4a43      	ldr	r2, [pc, #268]	; (80076b8 <HAL_RCC_OscConfig+0x684>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e105      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075b4:	4b3b      	ldr	r3, [pc, #236]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80075b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4013      	ands	r3, r2
 80075be:	d1ef      	bne.n	80075a0 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80075c0:	2323      	movs	r3, #35	; 0x23
 80075c2:	18fb      	adds	r3, r7, r3
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d105      	bne.n	80075d6 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ca:	4b36      	ldr	r3, [pc, #216]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80075cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ce:	4b35      	ldr	r3, [pc, #212]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80075d0:	493a      	ldr	r1, [pc, #232]	; (80076bc <HAL_RCC_OscConfig+0x688>)
 80075d2:	400a      	ands	r2, r1
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2220      	movs	r2, #32
 80075dc:	4013      	ands	r3, r2
 80075de:	d049      	beq.n	8007674 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d026      	beq.n	8007636 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80075e8:	4b2e      	ldr	r3, [pc, #184]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80075ee:	2101      	movs	r1, #1
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	4b2b      	ldr	r3, [pc, #172]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80075f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 80075fa:	2101      	movs	r1, #1
 80075fc:	430a      	orrs	r2, r1
 80075fe:	635a      	str	r2, [r3, #52]	; 0x34
 8007600:	4b2f      	ldr	r3, [pc, #188]	; (80076c0 <HAL_RCC_OscConfig+0x68c>)
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <HAL_RCC_OscConfig+0x68c>)
 8007606:	2180      	movs	r1, #128	; 0x80
 8007608:	0189      	lsls	r1, r1, #6
 800760a:	430a      	orrs	r2, r1
 800760c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760e:	f7fe fb81 	bl	8005d14 <HAL_GetTick>
 8007612:	0003      	movs	r3, r0
 8007614:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007618:	f7fe fb7c 	bl	8005d14 <HAL_GetTick>
 800761c:	0002      	movs	r2, r0
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e0ca      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800762a:	4b1e      	ldr	r3, [pc, #120]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2202      	movs	r2, #2
 8007630:	4013      	ands	r3, r2
 8007632:	d0f1      	beq.n	8007618 <HAL_RCC_OscConfig+0x5e4>
 8007634:	e01e      	b.n	8007674 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007636:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	4b1a      	ldr	r3, [pc, #104]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800763c:	2101      	movs	r1, #1
 800763e:	438a      	bics	r2, r1
 8007640:	609a      	str	r2, [r3, #8]
 8007642:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <HAL_RCC_OscConfig+0x68c>)
 8007644:	6a1a      	ldr	r2, [r3, #32]
 8007646:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <HAL_RCC_OscConfig+0x68c>)
 8007648:	491e      	ldr	r1, [pc, #120]	; (80076c4 <HAL_RCC_OscConfig+0x690>)
 800764a:	400a      	ands	r2, r1
 800764c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764e:	f7fe fb61 	bl	8005d14 <HAL_GetTick>
 8007652:	0003      	movs	r3, r0
 8007654:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007658:	f7fe fb5c 	bl	8005d14 <HAL_GetTick>
 800765c:	0002      	movs	r2, r0
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e0aa      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800766a:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2202      	movs	r2, #2
 8007670:	4013      	ands	r3, r2
 8007672:	d1f1      	bne.n	8007658 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	2b00      	cmp	r3, #0
 800767a:	d100      	bne.n	800767e <HAL_RCC_OscConfig+0x64a>
 800767c:	e09f      	b.n	80077be <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2b0c      	cmp	r3, #12
 8007682:	d100      	bne.n	8007686 <HAL_RCC_OscConfig+0x652>
 8007684:	e078      	b.n	8007778 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	2b02      	cmp	r3, #2
 800768c:	d159      	bne.n	8007742 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <HAL_RCC_OscConfig+0x670>)
 8007694:	490c      	ldr	r1, [pc, #48]	; (80076c8 <HAL_RCC_OscConfig+0x694>)
 8007696:	400a      	ands	r2, r1
 8007698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769a:	f7fe fb3b 	bl	8005d14 <HAL_GetTick>
 800769e:	0003      	movs	r3, r0
 80076a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80076a2:	e01c      	b.n	80076de <HAL_RCC_OscConfig+0x6aa>
 80076a4:	40021000 	.word	0x40021000
 80076a8:	ffff1fff 	.word	0xffff1fff
 80076ac:	fffffeff 	.word	0xfffffeff
 80076b0:	40007000 	.word	0x40007000
 80076b4:	fffffbff 	.word	0xfffffbff
 80076b8:	00001388 	.word	0x00001388
 80076bc:	efffffff 	.word	0xefffffff
 80076c0:	40010000 	.word	0x40010000
 80076c4:	ffffdfff 	.word	0xffffdfff
 80076c8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076cc:	f7fe fb22 	bl	8005d14 <HAL_GetTick>
 80076d0:	0002      	movs	r2, r0
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e070      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80076de:	4b3a      	ldr	r3, [pc, #232]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	2380      	movs	r3, #128	; 0x80
 80076e4:	049b      	lsls	r3, r3, #18
 80076e6:	4013      	ands	r3, r2
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ea:	4b37      	ldr	r3, [pc, #220]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	4a37      	ldr	r2, [pc, #220]	; (80077cc <HAL_RCC_OscConfig+0x798>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	0019      	movs	r1, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	431a      	orrs	r2, r3
 8007704:	4b30      	ldr	r3, [pc, #192]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 8007706:	430a      	orrs	r2, r1
 8007708:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800770a:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4b2e      	ldr	r3, [pc, #184]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 8007710:	2180      	movs	r1, #128	; 0x80
 8007712:	0449      	lsls	r1, r1, #17
 8007714:	430a      	orrs	r2, r1
 8007716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007718:	f7fe fafc 	bl	8005d14 <HAL_GetTick>
 800771c:	0003      	movs	r3, r0
 800771e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007720:	e008      	b.n	8007734 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007722:	f7fe faf7 	bl	8005d14 <HAL_GetTick>
 8007726:	0002      	movs	r2, r0
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e045      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	2380      	movs	r3, #128	; 0x80
 800773a:	049b      	lsls	r3, r3, #18
 800773c:	4013      	ands	r3, r2
 800773e:	d0f0      	beq.n	8007722 <HAL_RCC_OscConfig+0x6ee>
 8007740:	e03d      	b.n	80077be <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007742:	4b21      	ldr	r3, [pc, #132]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 8007748:	4921      	ldr	r1, [pc, #132]	; (80077d0 <HAL_RCC_OscConfig+0x79c>)
 800774a:	400a      	ands	r2, r1
 800774c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800774e:	f7fe fae1 	bl	8005d14 <HAL_GetTick>
 8007752:	0003      	movs	r3, r0
 8007754:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007758:	f7fe fadc 	bl	8005d14 <HAL_GetTick>
 800775c:	0002      	movs	r2, r0
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e02a      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800776a:	4b17      	ldr	r3, [pc, #92]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	2380      	movs	r3, #128	; 0x80
 8007770:	049b      	lsls	r3, r3, #18
 8007772:	4013      	ands	r3, r2
 8007774:	d1f0      	bne.n	8007758 <HAL_RCC_OscConfig+0x724>
 8007776:	e022      	b.n	80077be <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e01d      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007784:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <HAL_RCC_OscConfig+0x794>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	2380      	movs	r3, #128	; 0x80
 800778e:	025b      	lsls	r3, r3, #9
 8007790:	401a      	ands	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	429a      	cmp	r2, r3
 8007798:	d10f      	bne.n	80077ba <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	23f0      	movs	r3, #240	; 0xf0
 800779e:	039b      	lsls	r3, r3, #14
 80077a0:	401a      	ands	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d107      	bne.n	80077ba <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	23c0      	movs	r3, #192	; 0xc0
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	401a      	ands	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d001      	beq.n	80077be <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	0018      	movs	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b00a      	add	sp, #40	; 0x28
 80077c6:	bdb0      	pop	{r4, r5, r7, pc}
 80077c8:	40021000 	.word	0x40021000
 80077cc:	ff02ffff 	.word	0xff02ffff
 80077d0:	feffffff 	.word	0xfeffffff

080077d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d4:	b5b0      	push	{r4, r5, r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e10d      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077e8:	4b88      	ldr	r3, [pc, #544]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2201      	movs	r2, #1
 80077ee:	4013      	ands	r3, r2
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d911      	bls.n	800781a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f6:	4b85      	ldr	r3, [pc, #532]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2201      	movs	r2, #1
 80077fc:	4393      	bics	r3, r2
 80077fe:	0019      	movs	r1, r3
 8007800:	4b82      	ldr	r3, [pc, #520]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007808:	4b80      	ldr	r3, [pc, #512]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2201      	movs	r2, #1
 800780e:	4013      	ands	r3, r2
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d001      	beq.n	800781a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e0f4      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2202      	movs	r2, #2
 8007820:	4013      	ands	r3, r2
 8007822:	d009      	beq.n	8007838 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007824:	4b7a      	ldr	r3, [pc, #488]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	22f0      	movs	r2, #240	; 0xf0
 800782a:	4393      	bics	r3, r2
 800782c:	0019      	movs	r1, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	4b77      	ldr	r3, [pc, #476]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 8007834:	430a      	orrs	r2, r1
 8007836:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2201      	movs	r2, #1
 800783e:	4013      	ands	r3, r2
 8007840:	d100      	bne.n	8007844 <HAL_RCC_ClockConfig+0x70>
 8007842:	e089      	b.n	8007958 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d107      	bne.n	800785c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800784c:	4b70      	ldr	r3, [pc, #448]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	4013      	ands	r3, r2
 8007856:	d120      	bne.n	800789a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0d3      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d107      	bne.n	8007874 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007864:	4b6a      	ldr	r3, [pc, #424]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	2380      	movs	r3, #128	; 0x80
 800786a:	049b      	lsls	r3, r3, #18
 800786c:	4013      	ands	r3, r2
 800786e:	d114      	bne.n	800789a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0c7      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d106      	bne.n	800788a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800787c:	4b64      	ldr	r3, [pc, #400]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2204      	movs	r2, #4
 8007882:	4013      	ands	r3, r2
 8007884:	d109      	bne.n	800789a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e0bc      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800788a:	4b61      	ldr	r3, [pc, #388]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	2380      	movs	r3, #128	; 0x80
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4013      	ands	r3, r2
 8007894:	d101      	bne.n	800789a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e0b4      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800789a:	4b5d      	ldr	r3, [pc, #372]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2203      	movs	r2, #3
 80078a0:	4393      	bics	r3, r2
 80078a2:	0019      	movs	r1, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	4b59      	ldr	r3, [pc, #356]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 80078aa:	430a      	orrs	r2, r1
 80078ac:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078ae:	f7fe fa31 	bl	8005d14 <HAL_GetTick>
 80078b2:	0003      	movs	r3, r0
 80078b4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d111      	bne.n	80078e2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80078be:	e009      	b.n	80078d4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c0:	f7fe fa28 	bl	8005d14 <HAL_GetTick>
 80078c4:	0002      	movs	r2, r0
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	4a52      	ldr	r2, [pc, #328]	; (8007a14 <HAL_RCC_ClockConfig+0x240>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e097      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80078d4:	4b4e      	ldr	r3, [pc, #312]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	220c      	movs	r2, #12
 80078da:	4013      	ands	r3, r2
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d1ef      	bne.n	80078c0 <HAL_RCC_ClockConfig+0xec>
 80078e0:	e03a      	b.n	8007958 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d111      	bne.n	800790e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078ea:	e009      	b.n	8007900 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078ec:	f7fe fa12 	bl	8005d14 <HAL_GetTick>
 80078f0:	0002      	movs	r2, r0
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	4a47      	ldr	r2, [pc, #284]	; (8007a14 <HAL_RCC_ClockConfig+0x240>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e081      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007900:	4b43      	ldr	r3, [pc, #268]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	220c      	movs	r2, #12
 8007906:	4013      	ands	r3, r2
 8007908:	2b0c      	cmp	r3, #12
 800790a:	d1ef      	bne.n	80078ec <HAL_RCC_ClockConfig+0x118>
 800790c:	e024      	b.n	8007958 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d11b      	bne.n	800794e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007916:	e009      	b.n	800792c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007918:	f7fe f9fc 	bl	8005d14 <HAL_GetTick>
 800791c:	0002      	movs	r2, r0
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	4a3c      	ldr	r2, [pc, #240]	; (8007a14 <HAL_RCC_ClockConfig+0x240>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e06b      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800792c:	4b38      	ldr	r3, [pc, #224]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	220c      	movs	r2, #12
 8007932:	4013      	ands	r3, r2
 8007934:	2b04      	cmp	r3, #4
 8007936:	d1ef      	bne.n	8007918 <HAL_RCC_ClockConfig+0x144>
 8007938:	e00e      	b.n	8007958 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800793a:	f7fe f9eb 	bl	8005d14 <HAL_GetTick>
 800793e:	0002      	movs	r2, r0
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	4a33      	ldr	r2, [pc, #204]	; (8007a14 <HAL_RCC_ClockConfig+0x240>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e05a      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800794e:	4b30      	ldr	r3, [pc, #192]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	220c      	movs	r2, #12
 8007954:	4013      	ands	r3, r2
 8007956:	d1f0      	bne.n	800793a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007958:	4b2c      	ldr	r3, [pc, #176]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2201      	movs	r2, #1
 800795e:	4013      	ands	r3, r2
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d211      	bcs.n	800798a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007966:	4b29      	ldr	r3, [pc, #164]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2201      	movs	r2, #1
 800796c:	4393      	bics	r3, r2
 800796e:	0019      	movs	r1, r3
 8007970:	4b26      	ldr	r3, [pc, #152]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007978:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <HAL_RCC_ClockConfig+0x238>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2201      	movs	r2, #1
 800797e:	4013      	ands	r3, r2
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d001      	beq.n	800798a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e03c      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2204      	movs	r2, #4
 8007990:	4013      	ands	r3, r2
 8007992:	d009      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007994:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <HAL_RCC_ClockConfig+0x244>)
 800799a:	4013      	ands	r3, r2
 800799c:	0019      	movs	r1, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	4b1b      	ldr	r3, [pc, #108]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 80079a4:	430a      	orrs	r2, r1
 80079a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2208      	movs	r2, #8
 80079ae:	4013      	ands	r3, r2
 80079b0:	d00a      	beq.n	80079c8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079b2:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <HAL_RCC_ClockConfig+0x248>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	0019      	movs	r1, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	00da      	lsls	r2, r3, #3
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 80079c4:	430a      	orrs	r2, r1
 80079c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079c8:	f000 f82e 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 80079cc:	0001      	movs	r1, r0
 80079ce:	4b10      	ldr	r3, [pc, #64]	; (8007a10 <HAL_RCC_ClockConfig+0x23c>)
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	091b      	lsrs	r3, r3, #4
 80079d4:	220f      	movs	r2, #15
 80079d6:	4013      	ands	r3, r2
 80079d8:	4a11      	ldr	r2, [pc, #68]	; (8007a20 <HAL_RCC_ClockConfig+0x24c>)
 80079da:	5cd3      	ldrb	r3, [r2, r3]
 80079dc:	000a      	movs	r2, r1
 80079de:	40da      	lsrs	r2, r3
 80079e0:	4b10      	ldr	r3, [pc, #64]	; (8007a24 <HAL_RCC_ClockConfig+0x250>)
 80079e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80079e4:	250b      	movs	r5, #11
 80079e6:	197c      	adds	r4, r7, r5
 80079e8:	2000      	movs	r0, #0
 80079ea:	f7fe f95d 	bl	8005ca8 <HAL_InitTick>
 80079ee:	0003      	movs	r3, r0
 80079f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80079f2:	197b      	adds	r3, r7, r5
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80079fa:	230b      	movs	r3, #11
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	e000      	b.n	8007a04 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	0018      	movs	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b004      	add	sp, #16
 8007a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a0c:	40022000 	.word	0x40022000
 8007a10:	40021000 	.word	0x40021000
 8007a14:	00001388 	.word	0x00001388
 8007a18:	fffff8ff 	.word	0xfffff8ff
 8007a1c:	ffffc7ff 	.word	0xffffc7ff
 8007a20:	0800c230 	.word	0x0800c230
 8007a24:	20000014 	.word	0x20000014

08007a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8007a2e:	4b3b      	ldr	r3, [pc, #236]	; (8007b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	220c      	movs	r2, #12
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d00e      	beq.n	8007a5c <HAL_RCC_GetSysClockFreq+0x34>
 8007a3e:	2b0c      	cmp	r3, #12
 8007a40:	d00f      	beq.n	8007a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d157      	bne.n	8007af6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007a46:	4b35      	ldr	r3, [pc, #212]	; (8007b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2210      	movs	r2, #16
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	d002      	beq.n	8007a56 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007a50:	4b33      	ldr	r3, [pc, #204]	; (8007b20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007a52:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007a54:	e05d      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8007a56:	4b33      	ldr	r3, [pc, #204]	; (8007b24 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007a58:	613b      	str	r3, [r7, #16]
      break;
 8007a5a:	e05a      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a5c:	4b32      	ldr	r3, [pc, #200]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x100>)
 8007a5e:	613b      	str	r3, [r7, #16]
      break;
 8007a60:	e057      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	0c9b      	lsrs	r3, r3, #18
 8007a66:	220f      	movs	r2, #15
 8007a68:	4013      	ands	r3, r2
 8007a6a:	4a30      	ldr	r2, [pc, #192]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8007a6c:	5cd3      	ldrb	r3, [r2, r3]
 8007a6e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	0d9b      	lsrs	r3, r3, #22
 8007a74:	2203      	movs	r2, #3
 8007a76:	4013      	ands	r3, r2
 8007a78:	3301      	adds	r3, #1
 8007a7a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a7c:	4b27      	ldr	r3, [pc, #156]	; (8007b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	025b      	lsls	r3, r3, #9
 8007a84:	4013      	ands	r3, r2
 8007a86:	d00f      	beq.n	8007aa8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	000a      	movs	r2, r1
 8007a8c:	0152      	lsls	r2, r2, #5
 8007a8e:	1a52      	subs	r2, r2, r1
 8007a90:	0193      	lsls	r3, r2, #6
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	185b      	adds	r3, r3, r1
 8007a98:	025b      	lsls	r3, r3, #9
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f7f8 fb3b 	bl	8000118 <__udivsi3>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	e023      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	; (8007b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2210      	movs	r2, #16
 8007aae:	4013      	ands	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	000a      	movs	r2, r1
 8007ab6:	0152      	lsls	r2, r2, #5
 8007ab8:	1a52      	subs	r2, r2, r1
 8007aba:	0193      	lsls	r3, r2, #6
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	185b      	adds	r3, r3, r1
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f7f8 fb26 	bl	8000118 <__udivsi3>
 8007acc:	0003      	movs	r3, r0
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	e00e      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	000a      	movs	r2, r1
 8007ad6:	0152      	lsls	r2, r2, #5
 8007ad8:	1a52      	subs	r2, r2, r1
 8007ada:	0193      	lsls	r3, r2, #6
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	185b      	adds	r3, r3, r1
 8007ae2:	029b      	lsls	r3, r3, #10
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f7f8 fb16 	bl	8000118 <__udivsi3>
 8007aec:	0003      	movs	r3, r0
 8007aee:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	613b      	str	r3, [r7, #16]
      break;
 8007af4:	e00d      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007af6:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	0b5b      	lsrs	r3, r3, #13
 8007afc:	2207      	movs	r2, #7
 8007afe:	4013      	ands	r3, r2
 8007b00:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	2280      	movs	r2, #128	; 0x80
 8007b08:	0212      	lsls	r2, r2, #8
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	0013      	movs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
      break;
 8007b10:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007b12:	693b      	ldr	r3, [r7, #16]
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b006      	add	sp, #24
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	003d0900 	.word	0x003d0900
 8007b24:	00f42400 	.word	0x00f42400
 8007b28:	007a1200 	.word	0x007a1200
 8007b2c:	0800c248 	.word	0x0800c248

08007b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8007b36:	681b      	ldr	r3, [r3, #0]
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	20000014 	.word	0x20000014

08007b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b48:	f7ff fff2 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b4c:	0001      	movs	r1, r0
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	2207      	movs	r2, #7
 8007b56:	4013      	ands	r3, r2
 8007b58:	4a04      	ldr	r2, [pc, #16]	; (8007b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b5a:	5cd3      	ldrb	r3, [r2, r3]
 8007b5c:	40d9      	lsrs	r1, r3
 8007b5e:	000b      	movs	r3, r1
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	40021000 	.word	0x40021000
 8007b6c:	0800c240 	.word	0x0800c240

08007b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b74:	f7ff ffdc 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b78:	0001      	movs	r1, r0
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	0adb      	lsrs	r3, r3, #11
 8007b80:	2207      	movs	r2, #7
 8007b82:	4013      	ands	r3, r2
 8007b84:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b86:	5cd3      	ldrb	r3, [r2, r3]
 8007b88:	40d9      	lsrs	r1, r3
 8007b8a:	000b      	movs	r3, r1
}
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	40021000 	.word	0x40021000
 8007b98:	0800c240 	.word	0x0800c240

08007b9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	4013      	ands	r3, r2
 8007bac:	d106      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	d100      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007bba:	e0dd      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8007bbc:	2317      	movs	r3, #23
 8007bbe:	18fb      	adds	r3, r7, r3
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bc4:	4ba4      	ldr	r3, [pc, #656]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bc8:	2380      	movs	r3, #128	; 0x80
 8007bca:	055b      	lsls	r3, r3, #21
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d10a      	bne.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bd0:	4ba1      	ldr	r3, [pc, #644]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd4:	4ba0      	ldr	r3, [pc, #640]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bd6:	2180      	movs	r1, #128	; 0x80
 8007bd8:	0549      	lsls	r1, r1, #21
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007bde:	2317      	movs	r3, #23
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007be6:	4b9d      	ldr	r3, [pc, #628]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	2380      	movs	r3, #128	; 0x80
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d11a      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bf2:	4b9a      	ldr	r3, [pc, #616]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b99      	ldr	r3, [pc, #612]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007bf8:	2180      	movs	r1, #128	; 0x80
 8007bfa:	0049      	lsls	r1, r1, #1
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c00:	f7fe f888 	bl	8005d14 <HAL_GetTick>
 8007c04:	0003      	movs	r3, r0
 8007c06:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c08:	e008      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c0a:	f7fe f883 	bl	8005d14 <HAL_GetTick>
 8007c0e:	0002      	movs	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b64      	cmp	r3, #100	; 0x64
 8007c16:	d901      	bls.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e118      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c1c:	4b8f      	ldr	r3, [pc, #572]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	2380      	movs	r3, #128	; 0x80
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	4013      	ands	r3, r2
 8007c26:	d0f0      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007c28:	4b8b      	ldr	r3, [pc, #556]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	23c0      	movs	r3, #192	; 0xc0
 8007c2e:	039b      	lsls	r3, r3, #14
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	23c0      	movs	r3, #192	; 0xc0
 8007c3a:	039b      	lsls	r3, r3, #14
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d107      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	23c0      	movs	r3, #192	; 0xc0
 8007c4a:	039b      	lsls	r3, r3, #14
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d013      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	23c0      	movs	r3, #192	; 0xc0
 8007c5a:	029b      	lsls	r3, r3, #10
 8007c5c:	401a      	ands	r2, r3
 8007c5e:	23c0      	movs	r3, #192	; 0xc0
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d10a      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c66:	4b7c      	ldr	r3, [pc, #496]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	2380      	movs	r3, #128	; 0x80
 8007c6c:	029b      	lsls	r3, r3, #10
 8007c6e:	401a      	ands	r2, r3
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	029b      	lsls	r3, r3, #10
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d101      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0e8      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007c7c:	4b76      	ldr	r3, [pc, #472]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c80:	23c0      	movs	r3, #192	; 0xc0
 8007c82:	029b      	lsls	r3, r3, #10
 8007c84:	4013      	ands	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d049      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	23c0      	movs	r3, #192	; 0xc0
 8007c94:	029b      	lsls	r3, r3, #10
 8007c96:	4013      	ands	r3, r2
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d004      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	d10d      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	23c0      	movs	r3, #192	; 0xc0
 8007cae:	029b      	lsls	r3, r3, #10
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d034      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	d02e      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007cc4:	4b64      	ldr	r3, [pc, #400]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	4a65      	ldr	r2, [pc, #404]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cca:	4013      	ands	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cce:	4b62      	ldr	r3, [pc, #392]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007cd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cd2:	4b61      	ldr	r3, [pc, #388]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	0309      	lsls	r1, r1, #12
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cdc:	4b5e      	ldr	r3, [pc, #376]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ce0:	4b5d      	ldr	r3, [pc, #372]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007ce2:	4960      	ldr	r1, [pc, #384]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007ce4:	400a      	ands	r2, r1
 8007ce6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007ce8:	4b5b      	ldr	r3, [pc, #364]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	2380      	movs	r3, #128	; 0x80
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d014      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf8:	f7fe f80c 	bl	8005d14 <HAL_GetTick>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d00:	e009      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d02:	f7fe f807 	bl	8005d14 <HAL_GetTick>
 8007d06:	0002      	movs	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a56      	ldr	r2, [pc, #344]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e09b      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d16:	4b50      	ldr	r3, [pc, #320]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d0ef      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	23c0      	movs	r3, #192	; 0xc0
 8007d28:	029b      	lsls	r3, r3, #10
 8007d2a:	401a      	ands	r2, r3
 8007d2c:	23c0      	movs	r3, #192	; 0xc0
 8007d2e:	029b      	lsls	r3, r3, #10
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d10c      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007d34:	4b48      	ldr	r3, [pc, #288]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a4c      	ldr	r2, [pc, #304]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	0019      	movs	r1, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	23c0      	movs	r3, #192	; 0xc0
 8007d44:	039b      	lsls	r3, r3, #14
 8007d46:	401a      	ands	r2, r3
 8007d48:	4b43      	ldr	r3, [pc, #268]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	4b42      	ldr	r3, [pc, #264]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	23c0      	movs	r3, #192	; 0xc0
 8007d58:	029b      	lsls	r3, r3, #10
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	4b3e      	ldr	r3, [pc, #248]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d62:	2317      	movs	r3, #23
 8007d64:	18fb      	adds	r3, r7, r3
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d105      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d6c:	4b3a      	ldr	r3, [pc, #232]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d70:	4b39      	ldr	r3, [pc, #228]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d72:	493f      	ldr	r1, [pc, #252]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4013      	ands	r3, r2
 8007d80:	d009      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d82:	4b35      	ldr	r3, [pc, #212]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d86:	2203      	movs	r2, #3
 8007d88:	4393      	bics	r3, r2
 8007d8a:	0019      	movs	r1, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	4b31      	ldr	r3, [pc, #196]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007d92:	430a      	orrs	r2, r1
 8007d94:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	d009      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007da0:	4b2d      	ldr	r3, [pc, #180]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da4:	220c      	movs	r2, #12
 8007da6:	4393      	bics	r3, r2
 8007da8:	0019      	movs	r1, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	4b2a      	ldr	r3, [pc, #168]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007db0:	430a      	orrs	r2, r1
 8007db2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2204      	movs	r2, #4
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d009      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dbe:	4b26      	ldr	r3, [pc, #152]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc2:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	0019      	movs	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	4b22      	ldr	r3, [pc, #136]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2208      	movs	r2, #8
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d009      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de0:	4a25      	ldr	r2, [pc, #148]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	0019      	movs	r1, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007dec:	430a      	orrs	r2, r1
 8007dee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	4013      	ands	r3, r2
 8007dfa:	d009      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dfc:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e00:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	0019      	movs	r1, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69da      	ldr	r2, [r3, #28]
 8007e0a:	4b13      	ldr	r3, [pc, #76]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2240      	movs	r2, #64	; 0x40
 8007e16:	4013      	ands	r3, r2
 8007e18:	d009      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e1a:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	0019      	movs	r1, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2280      	movs	r2, #128	; 0x80
 8007e34:	4013      	ands	r3, r2
 8007e36:	d009      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3c:	4a10      	ldr	r2, [pc, #64]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	0019      	movs	r1, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	0018      	movs	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b006      	add	sp, #24
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	46c0      	nop			; (mov r8, r8)
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40007000 	.word	0x40007000
 8007e60:	fffcffff 	.word	0xfffcffff
 8007e64:	fff7ffff 	.word	0xfff7ffff
 8007e68:	00001388 	.word	0x00001388
 8007e6c:	ffcfffff 	.word	0xffcfffff
 8007e70:	efffffff 	.word	0xefffffff
 8007e74:	fffff3ff 	.word	0xfffff3ff
 8007e78:	ffffcfff 	.word	0xffffcfff
 8007e7c:	fbffffff 	.word	0xfbffffff
 8007e80:	fff3ffff 	.word	0xfff3ffff

08007e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e059      	b.n	8007f4a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2251      	movs	r2, #81	; 0x51
 8007ea0:	5c9b      	ldrb	r3, [r3, r2]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d107      	bne.n	8007eb8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2250      	movs	r2, #80	; 0x50
 8007eac:	2100      	movs	r1, #0
 8007eae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f7fc f826 	bl	8003f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2251      	movs	r2, #81	; 0x51
 8007ebc:	2102      	movs	r1, #2
 8007ebe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2140      	movs	r1, #64	; 0x40
 8007ecc:	438a      	bics	r2, r1
 8007ece:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6999      	ldr	r1, [r3, #24]
 8007ef0:	2380      	movs	r3, #128	; 0x80
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	400b      	ands	r3, r1
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	0011      	movs	r1, r2
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	2204      	movs	r2, #4
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	0019      	movs	r1, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4907      	ldr	r1, [pc, #28]	; (8007f54 <HAL_SPI_Init+0xd0>)
 8007f36:	400a      	ands	r2, r1
 8007f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2251      	movs	r2, #81	; 0x51
 8007f44:	2101      	movs	r1, #1
 8007f46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b002      	add	sp, #8
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	fffff7ff 	.word	0xfffff7ff

08007f58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	1dbb      	adds	r3, r7, #6
 8007f66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f68:	231f      	movs	r3, #31
 8007f6a:	18fb      	adds	r3, r7, r3
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2250      	movs	r2, #80	; 0x50
 8007f74:	5c9b      	ldrb	r3, [r3, r2]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_SPI_Transmit+0x26>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e136      	b.n	80081ec <HAL_SPI_Transmit+0x294>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2250      	movs	r2, #80	; 0x50
 8007f82:	2101      	movs	r1, #1
 8007f84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f86:	f7fd fec5 	bl	8005d14 <HAL_GetTick>
 8007f8a:	0003      	movs	r3, r0
 8007f8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007f8e:	2316      	movs	r3, #22
 8007f90:	18fb      	adds	r3, r7, r3
 8007f92:	1dba      	adds	r2, r7, #6
 8007f94:	8812      	ldrh	r2, [r2, #0]
 8007f96:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2251      	movs	r2, #81	; 0x51
 8007f9c:	5c9b      	ldrb	r3, [r3, r2]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d004      	beq.n	8007fae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007fa4:	231f      	movs	r3, #31
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	2202      	movs	r2, #2
 8007faa:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fac:	e113      	b.n	80081d6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_SPI_Transmit+0x64>
 8007fb4:	1dbb      	adds	r3, r7, #6
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007fbc:	231f      	movs	r3, #31
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fc4:	e107      	b.n	80081d6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2251      	movs	r2, #81	; 0x51
 8007fca:	2103      	movs	r1, #3
 8007fcc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	1dba      	adds	r2, r7, #6
 8007fde:	8812      	ldrh	r2, [r2, #0]
 8007fe0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1dba      	adds	r2, r7, #6
 8007fe6:	8812      	ldrh	r2, [r2, #0]
 8007fe8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	429a      	cmp	r2, r3
 8008012:	d108      	bne.n	8008026 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	01c9      	lsls	r1, r1, #7
 8008022:	430a      	orrs	r2, r1
 8008024:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2240      	movs	r2, #64	; 0x40
 800802e:	4013      	ands	r3, r2
 8008030:	2b40      	cmp	r3, #64	; 0x40
 8008032:	d007      	beq.n	8008044 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2140      	movs	r1, #64	; 0x40
 8008040:	430a      	orrs	r2, r1
 8008042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	2380      	movs	r3, #128	; 0x80
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	429a      	cmp	r2, r3
 800804e:	d14e      	bne.n	80080ee <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <HAL_SPI_Transmit+0x10a>
 8008058:	2316      	movs	r3, #22
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d13f      	bne.n	80080e2 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	881a      	ldrh	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	1c9a      	adds	r2, r3, #2
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008086:	e02c      	b.n	80080e2 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	2202      	movs	r2, #2
 8008090:	4013      	ands	r3, r2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d112      	bne.n	80080bc <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	881a      	ldrh	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a6:	1c9a      	adds	r2, r3, #2
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80080ba:	e012      	b.n	80080e2 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080bc:	f7fd fe2a 	bl	8005d14 <HAL_GetTick>
 80080c0:	0002      	movs	r2, r0
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d802      	bhi.n	80080d2 <HAL_SPI_Transmit+0x17a>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	3301      	adds	r3, #1
 80080d0:	d102      	bne.n	80080d8 <HAL_SPI_Transmit+0x180>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 80080d8:	231f      	movs	r3, #31
 80080da:	18fb      	adds	r3, r7, r3
 80080dc:	2203      	movs	r2, #3
 80080de:	701a      	strb	r2, [r3, #0]
          goto error;
 80080e0:	e079      	b.n	80081d6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1cd      	bne.n	8008088 <HAL_SPI_Transmit+0x130>
 80080ec:	e04f      	b.n	800818e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d004      	beq.n	8008100 <HAL_SPI_Transmit+0x1a8>
 80080f6:	2316      	movs	r3, #22
 80080f8:	18fb      	adds	r3, r7, r3
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d141      	bne.n	8008184 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	7812      	ldrb	r2, [r2, #0]
 800810c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29a      	uxth	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008126:	e02d      	b.n	8008184 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	2202      	movs	r2, #2
 8008130:	4013      	ands	r3, r2
 8008132:	2b02      	cmp	r3, #2
 8008134:	d113      	bne.n	800815e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	330c      	adds	r3, #12
 8008140:	7812      	ldrb	r2, [r2, #0]
 8008142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	86da      	strh	r2, [r3, #54]	; 0x36
 800815c:	e012      	b.n	8008184 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800815e:	f7fd fdd9 	bl	8005d14 <HAL_GetTick>
 8008162:	0002      	movs	r2, r0
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d802      	bhi.n	8008174 <HAL_SPI_Transmit+0x21c>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	3301      	adds	r3, #1
 8008172:	d102      	bne.n	800817a <HAL_SPI_Transmit+0x222>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800817a:	231f      	movs	r3, #31
 800817c:	18fb      	adds	r3, r7, r3
 800817e:	2203      	movs	r2, #3
 8008180:	701a      	strb	r2, [r3, #0]
          goto error;
 8008182:	e028      	b.n	80081d6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008188:	b29b      	uxth	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1cc      	bne.n	8008128 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	0018      	movs	r0, r3
 8008196:	f000 fbe1 	bl	800895c <SPI_EndRxTxTransaction>
 800819a:	1e03      	subs	r3, r0, #0
 800819c:	d002      	beq.n	80081a4 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2220      	movs	r2, #32
 80081a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081ac:	2300      	movs	r3, #0
 80081ae:	613b      	str	r3, [r7, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80081ca:	231f      	movs	r3, #31
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	2201      	movs	r2, #1
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e000      	b.n	80081d6 <HAL_SPI_Transmit+0x27e>
  }

error:
 80081d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2251      	movs	r2, #81	; 0x51
 80081da:	2101      	movs	r1, #1
 80081dc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2250      	movs	r2, #80	; 0x50
 80081e2:	2100      	movs	r1, #0
 80081e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80081e6:	231f      	movs	r3, #31
 80081e8:	18fb      	adds	r3, r7, r3
 80081ea:	781b      	ldrb	r3, [r3, #0]
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b008      	add	sp, #32
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081f4:	b590      	push	{r4, r7, lr}
 80081f6:	b089      	sub	sp, #36	; 0x24
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	1dbb      	adds	r3, r7, #6
 8008202:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008204:	2317      	movs	r3, #23
 8008206:	18fb      	adds	r3, r7, r3
 8008208:	2200      	movs	r2, #0
 800820a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	2382      	movs	r3, #130	; 0x82
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	429a      	cmp	r2, r3
 8008216:	d113      	bne.n	8008240 <HAL_SPI_Receive+0x4c>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10f      	bne.n	8008240 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2251      	movs	r2, #81	; 0x51
 8008224:	2104      	movs	r1, #4
 8008226:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008228:	1dbb      	adds	r3, r7, #6
 800822a:	881c      	ldrh	r4, [r3, #0]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	0023      	movs	r3, r4
 8008238:	f000 f8fa 	bl	8008430 <HAL_SPI_TransmitReceive>
 800823c:	0003      	movs	r3, r0
 800823e:	e0f1      	b.n	8008424 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2250      	movs	r2, #80	; 0x50
 8008244:	5c9b      	ldrb	r3, [r3, r2]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_SPI_Receive+0x5a>
 800824a:	2302      	movs	r3, #2
 800824c:	e0ea      	b.n	8008424 <HAL_SPI_Receive+0x230>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2250      	movs	r2, #80	; 0x50
 8008252:	2101      	movs	r1, #1
 8008254:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008256:	f7fd fd5d 	bl	8005d14 <HAL_GetTick>
 800825a:	0003      	movs	r3, r0
 800825c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2251      	movs	r2, #81	; 0x51
 8008262:	5c9b      	ldrb	r3, [r3, r2]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b01      	cmp	r3, #1
 8008268:	d004      	beq.n	8008274 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800826a:	2317      	movs	r3, #23
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	2202      	movs	r2, #2
 8008270:	701a      	strb	r2, [r3, #0]
    goto error;
 8008272:	e0cc      	b.n	800840e <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_SPI_Receive+0x8e>
 800827a:	1dbb      	adds	r3, r7, #6
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8008282:	2317      	movs	r3, #23
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	2201      	movs	r2, #1
 8008288:	701a      	strb	r2, [r3, #0]
    goto error;
 800828a:	e0c0      	b.n	800840e <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2251      	movs	r2, #81	; 0x51
 8008290:	2104      	movs	r1, #4
 8008292:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	1dba      	adds	r2, r7, #6
 80082a4:	8812      	ldrh	r2, [r2, #0]
 80082a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	1dba      	adds	r2, r7, #6
 80082ac:	8812      	ldrh	r2, [r2, #0]
 80082ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	2380      	movs	r3, #128	; 0x80
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d107      	bne.n	80082ea <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4951      	ldr	r1, [pc, #324]	; (800842c <HAL_SPI_Receive+0x238>)
 80082e6:	400a      	ands	r2, r1
 80082e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2240      	movs	r2, #64	; 0x40
 80082f2:	4013      	ands	r3, r2
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d007      	beq.n	8008308 <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2140      	movs	r1, #64	; 0x40
 8008304:	430a      	orrs	r2, r1
 8008306:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d164      	bne.n	80083da <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008310:	e02f      	b.n	8008372 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2201      	movs	r2, #1
 800831a:	4013      	ands	r3, r2
 800831c:	2b01      	cmp	r3, #1
 800831e:	d115      	bne.n	800834c <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	330c      	adds	r3, #12
 8008326:	001a      	movs	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008340:	b29b      	uxth	r3, r3
 8008342:	3b01      	subs	r3, #1
 8008344:	b29a      	uxth	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800834a:	e012      	b.n	8008372 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800834c:	f7fd fce2 	bl	8005d14 <HAL_GetTick>
 8008350:	0002      	movs	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d802      	bhi.n	8008362 <HAL_SPI_Receive+0x16e>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	d102      	bne.n	8008368 <HAL_SPI_Receive+0x174>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 8008368:	2317      	movs	r3, #23
 800836a:	18fb      	adds	r3, r7, r3
 800836c:	2203      	movs	r2, #3
 800836e:	701a      	strb	r2, [r3, #0]
          goto error;
 8008370:	e04d      	b.n	800840e <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1ca      	bne.n	8008312 <HAL_SPI_Receive+0x11e>
 800837c:	e032      	b.n	80083e4 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2201      	movs	r2, #1
 8008386:	4013      	ands	r3, r2
 8008388:	2b01      	cmp	r3, #1
 800838a:	d113      	bne.n	80083b4 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	b292      	uxth	r2, r2
 8008398:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	1c9a      	adds	r2, r3, #2
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083b2:	e012      	b.n	80083da <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083b4:	f7fd fcae 	bl	8005d14 <HAL_GetTick>
 80083b8:	0002      	movs	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d802      	bhi.n	80083ca <HAL_SPI_Receive+0x1d6>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	d102      	bne.n	80083d0 <HAL_SPI_Receive+0x1dc>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 80083d0:	2317      	movs	r3, #23
 80083d2:	18fb      	adds	r3, r7, r3
 80083d4:	2203      	movs	r2, #3
 80083d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80083d8:	e019      	b.n	800840e <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1cc      	bne.n	800837e <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	0018      	movs	r0, r3
 80083ec:	f000 fa4c 	bl	8008888 <SPI_EndRxTransaction>
 80083f0:	1e03      	subs	r3, r0, #0
 80083f2:	d002      	beq.n	80083fa <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2220      	movs	r2, #32
 80083f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8008402:	2317      	movs	r3, #23
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	2201      	movs	r2, #1
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	e000      	b.n	800840e <HAL_SPI_Receive+0x21a>
  }

error :
 800840c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2251      	movs	r2, #81	; 0x51
 8008412:	2101      	movs	r1, #1
 8008414:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2250      	movs	r2, #80	; 0x50
 800841a:	2100      	movs	r1, #0
 800841c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800841e:	2317      	movs	r3, #23
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	781b      	ldrb	r3, [r3, #0]
}
 8008424:	0018      	movs	r0, r3
 8008426:	46bd      	mov	sp, r7
 8008428:	b007      	add	sp, #28
 800842a:	bd90      	pop	{r4, r7, pc}
 800842c:	ffffbfff 	.word	0xffffbfff

08008430 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08c      	sub	sp, #48	; 0x30
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	001a      	movs	r2, r3
 800843e:	1cbb      	adds	r3, r7, #2
 8008440:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008442:	2301      	movs	r3, #1
 8008444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008446:	232b      	movs	r3, #43	; 0x2b
 8008448:	18fb      	adds	r3, r7, r3
 800844a:	2200      	movs	r2, #0
 800844c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2250      	movs	r2, #80	; 0x50
 8008452:	5c9b      	ldrb	r3, [r3, r2]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <HAL_SPI_TransmitReceive+0x2c>
 8008458:	2302      	movs	r3, #2
 800845a:	e1a1      	b.n	80087a0 <HAL_SPI_TransmitReceive+0x370>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2250      	movs	r2, #80	; 0x50
 8008460:	2101      	movs	r1, #1
 8008462:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008464:	f7fd fc56 	bl	8005d14 <HAL_GetTick>
 8008468:	0003      	movs	r3, r0
 800846a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800846c:	2023      	movs	r0, #35	; 0x23
 800846e:	183b      	adds	r3, r7, r0
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	2151      	movs	r1, #81	; 0x51
 8008474:	5c52      	ldrb	r2, [r2, r1]
 8008476:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800847e:	231a      	movs	r3, #26
 8008480:	18fb      	adds	r3, r7, r3
 8008482:	1cba      	adds	r2, r7, #2
 8008484:	8812      	ldrh	r2, [r2, #0]
 8008486:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008488:	183b      	adds	r3, r7, r0
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d012      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0x86>
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	2382      	movs	r3, #130	; 0x82
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	429a      	cmp	r2, r3
 8008498:	d108      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x7c>
 80084a2:	2323      	movs	r3, #35	; 0x23
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d004      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80084ac:	232b      	movs	r3, #43	; 0x2b
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	2202      	movs	r2, #2
 80084b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80084b4:	e169      	b.n	800878a <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d006      	beq.n	80084ca <HAL_SPI_TransmitReceive+0x9a>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_SPI_TransmitReceive+0x9a>
 80084c2:	1cbb      	adds	r3, r7, #2
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d104      	bne.n	80084d4 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80084ca:	232b      	movs	r3, #43	; 0x2b
 80084cc:	18fb      	adds	r3, r7, r3
 80084ce:	2201      	movs	r2, #1
 80084d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80084d2:	e15a      	b.n	800878a <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2251      	movs	r2, #81	; 0x51
 80084d8:	5c9b      	ldrb	r3, [r3, r2]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d003      	beq.n	80084e8 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2251      	movs	r2, #81	; 0x51
 80084e4:	2105      	movs	r1, #5
 80084e6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	1cba      	adds	r2, r7, #2
 80084f8:	8812      	ldrh	r2, [r2, #0]
 80084fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	1cba      	adds	r2, r7, #2
 8008500:	8812      	ldrh	r2, [r2, #0]
 8008502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1cba      	adds	r2, r7, #2
 800850e:	8812      	ldrh	r2, [r2, #0]
 8008510:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1cba      	adds	r2, r7, #2
 8008516:	8812      	ldrh	r2, [r2, #0]
 8008518:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2240      	movs	r2, #64	; 0x40
 800852e:	4013      	ands	r3, r2
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	d007      	beq.n	8008544 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2140      	movs	r1, #64	; 0x40
 8008540:	430a      	orrs	r2, r1
 8008542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	429a      	cmp	r2, r3
 800854e:	d000      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x122>
 8008550:	e07a      	b.n	8008648 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x134>
 800855a:	231a      	movs	r3, #26
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d166      	bne.n	8008632 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	881a      	ldrh	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008574:	1c9a      	adds	r2, r3, #2
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800857e:	b29b      	uxth	r3, r3
 8008580:	3b01      	subs	r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008588:	e053      	b.n	8008632 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	2202      	movs	r2, #2
 8008592:	4013      	ands	r3, r2
 8008594:	2b02      	cmp	r3, #2
 8008596:	d11b      	bne.n	80085d0 <HAL_SPI_TransmitReceive+0x1a0>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_SPI_TransmitReceive+0x1a0>
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d113      	bne.n	80085d0 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	881a      	ldrh	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	1c9a      	adds	r2, r3, #2
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	3b01      	subs	r3, #1
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2201      	movs	r2, #1
 80085d8:	4013      	ands	r3, r2
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d119      	bne.n	8008612 <HAL_SPI_TransmitReceive+0x1e2>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d014      	beq.n	8008612 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	b292      	uxth	r2, r2
 80085f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fa:	1c9a      	adds	r2, r3, #2
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800860e:	2301      	movs	r3, #1
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008612:	f7fd fb7f 	bl	8005d14 <HAL_GetTick>
 8008616:	0002      	movs	r2, r0
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800861e:	429a      	cmp	r2, r3
 8008620:	d807      	bhi.n	8008632 <HAL_SPI_TransmitReceive+0x202>
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	3301      	adds	r3, #1
 8008626:	d004      	beq.n	8008632 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8008628:	232b      	movs	r3, #43	; 0x2b
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	2203      	movs	r2, #3
 800862e:	701a      	strb	r2, [r3, #0]
        goto error;
 8008630:	e0ab      	b.n	800878a <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1a6      	bne.n	800858a <HAL_SPI_TransmitReceive+0x15a>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1a1      	bne.n	800858a <HAL_SPI_TransmitReceive+0x15a>
 8008646:	e07f      	b.n	8008748 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <HAL_SPI_TransmitReceive+0x22c>
 8008650:	231a      	movs	r3, #26
 8008652:	18fb      	adds	r3, r7, r3
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d000      	beq.n	800865c <HAL_SPI_TransmitReceive+0x22c>
 800865a:	e06b      	b.n	8008734 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	7812      	ldrb	r2, [r2, #0]
 8008668:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008682:	e057      	b.n	8008734 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	2202      	movs	r2, #2
 800868c:	4013      	ands	r3, r2
 800868e:	2b02      	cmp	r3, #2
 8008690:	d11c      	bne.n	80086cc <HAL_SPI_TransmitReceive+0x29c>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d017      	beq.n	80086cc <HAL_SPI_TransmitReceive+0x29c>
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d114      	bne.n	80086cc <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	330c      	adds	r3, #12
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	2201      	movs	r2, #1
 80086d4:	4013      	ands	r3, r2
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d119      	bne.n	800870e <HAL_SPI_TransmitReceive+0x2de>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086de:	b29b      	uxth	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d014      	beq.n	800870e <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800870a:	2301      	movs	r3, #1
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800870e:	f7fd fb01 	bl	8005d14 <HAL_GetTick>
 8008712:	0002      	movs	r2, r0
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800871a:	429a      	cmp	r2, r3
 800871c:	d802      	bhi.n	8008724 <HAL_SPI_TransmitReceive+0x2f4>
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	3301      	adds	r3, #1
 8008722:	d102      	bne.n	800872a <HAL_SPI_TransmitReceive+0x2fa>
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	d104      	bne.n	8008734 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800872a:	232b      	movs	r3, #43	; 0x2b
 800872c:	18fb      	adds	r3, r7, r3
 800872e:	2203      	movs	r2, #3
 8008730:	701a      	strb	r2, [r3, #0]
        goto error;
 8008732:	e02a      	b.n	800878a <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1a2      	bne.n	8008684 <HAL_SPI_TransmitReceive+0x254>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008742:	b29b      	uxth	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d19d      	bne.n	8008684 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	0018      	movs	r0, r3
 8008750:	f000 f904 	bl	800895c <SPI_EndRxTxTransaction>
 8008754:	1e03      	subs	r3, r0, #0
 8008756:	d007      	beq.n	8008768 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8008758:	232b      	movs	r3, #43	; 0x2b
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	2201      	movs	r2, #1
 800875e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2220      	movs	r2, #32
 8008764:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008766:	e010      	b.n	800878a <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10b      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	e000      	b.n	800878a <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8008788:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2251      	movs	r2, #81	; 0x51
 800878e:	2101      	movs	r1, #1
 8008790:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2250      	movs	r2, #80	; 0x50
 8008796:	2100      	movs	r1, #0
 8008798:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800879a:	232b      	movs	r3, #43	; 0x2b
 800879c:	18fb      	adds	r3, r7, r3
 800879e:	781b      	ldrb	r3, [r3, #0]
}
 80087a0:	0018      	movs	r0, r3
 80087a2:	46bd      	mov	sp, r7
 80087a4:	b00c      	add	sp, #48	; 0x30
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	1dfb      	adds	r3, r7, #7
 80087b6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087b8:	e050      	b.n	800885c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	3301      	adds	r3, #1
 80087be:	d04d      	beq.n	800885c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80087c0:	f7fd faa8 	bl	8005d14 <HAL_GetTick>
 80087c4:	0002      	movs	r2, r0
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d902      	bls.n	80087d6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d142      	bne.n	800885c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	21e0      	movs	r1, #224	; 0xe0
 80087e2:	438a      	bics	r2, r1
 80087e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	2382      	movs	r3, #130	; 0x82
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d113      	bne.n	800881a <SPI_WaitFlagStateUntilTimeout+0x72>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	2380      	movs	r3, #128	; 0x80
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d005      	beq.n	800880a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	429a      	cmp	r2, r3
 8008808:	d107      	bne.n	800881a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2140      	movs	r1, #64	; 0x40
 8008816:	438a      	bics	r2, r1
 8008818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800881e:	2380      	movs	r3, #128	; 0x80
 8008820:	019b      	lsls	r3, r3, #6
 8008822:	429a      	cmp	r2, r3
 8008824:	d110      	bne.n	8008848 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4914      	ldr	r1, [pc, #80]	; (8008884 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8008832:	400a      	ands	r2, r1
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2180      	movs	r1, #128	; 0x80
 8008842:	0189      	lsls	r1, r1, #6
 8008844:	430a      	orrs	r2, r1
 8008846:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2251      	movs	r2, #81	; 0x51
 800884c:	2101      	movs	r1, #1
 800884e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2250      	movs	r2, #80	; 0x50
 8008854:	2100      	movs	r1, #0
 8008856:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e00f      	b.n	800887c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	4013      	ands	r3, r2
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	425a      	negs	r2, r3
 800886c:	4153      	adcs	r3, r2
 800886e:	b2db      	uxtb	r3, r3
 8008870:	001a      	movs	r2, r3
 8008872:	1dfb      	adds	r3, r7, #7
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d19f      	bne.n	80087ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	0018      	movs	r0, r3
 800887e:	46bd      	mov	sp, r7
 8008880:	b004      	add	sp, #16
 8008882:	bd80      	pop	{r7, pc}
 8008884:	ffffdfff 	.word	0xffffdfff

08008888 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	2382      	movs	r3, #130	; 0x82
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	429a      	cmp	r2, r3
 800889e:	d113      	bne.n	80088c8 <SPI_EndRxTransaction+0x40>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d005      	beq.n	80088b8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	2380      	movs	r3, #128	; 0x80
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d107      	bne.n	80088c8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2140      	movs	r1, #64	; 0x40
 80088c4:	438a      	bics	r2, r1
 80088c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	2382      	movs	r3, #130	; 0x82
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d12b      	bne.n	800892c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	429a      	cmp	r2, r3
 80088de:	d012      	beq.n	8008906 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	0013      	movs	r3, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	2180      	movs	r1, #128	; 0x80
 80088ee:	f7ff ff5b 	bl	80087a8 <SPI_WaitFlagStateUntilTimeout>
 80088f2:	1e03      	subs	r3, r0, #0
 80088f4:	d02d      	beq.n	8008952 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	2220      	movs	r2, #32
 80088fc:	431a      	orrs	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e026      	b.n	8008954 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	0013      	movs	r3, r2
 8008910:	2200      	movs	r2, #0
 8008912:	2101      	movs	r1, #1
 8008914:	f7ff ff48 	bl	80087a8 <SPI_WaitFlagStateUntilTimeout>
 8008918:	1e03      	subs	r3, r0, #0
 800891a:	d01a      	beq.n	8008952 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	2220      	movs	r2, #32
 8008922:	431a      	orrs	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e013      	b.n	8008954 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	0013      	movs	r3, r2
 8008936:	2200      	movs	r2, #0
 8008938:	2101      	movs	r1, #1
 800893a:	f7ff ff35 	bl	80087a8 <SPI_WaitFlagStateUntilTimeout>
 800893e:	1e03      	subs	r3, r0, #0
 8008940:	d007      	beq.n	8008952 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	2220      	movs	r2, #32
 8008948:	431a      	orrs	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e000      	b.n	8008954 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	0018      	movs	r0, r3
 8008956:	46bd      	mov	sp, r7
 8008958:	b004      	add	sp, #16
 800895a:	bd80      	pop	{r7, pc}

0800895c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af02      	add	r7, sp, #8
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	2382      	movs	r3, #130	; 0x82
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	429a      	cmp	r2, r3
 8008972:	d112      	bne.n	800899a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	0013      	movs	r3, r2
 800897e:	2200      	movs	r2, #0
 8008980:	2180      	movs	r1, #128	; 0x80
 8008982:	f7ff ff11 	bl	80087a8 <SPI_WaitFlagStateUntilTimeout>
 8008986:	1e03      	subs	r3, r0, #0
 8008988:	d020      	beq.n	80089cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898e:	2220      	movs	r2, #32
 8008990:	431a      	orrs	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e019      	b.n	80089ce <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2251      	movs	r2, #81	; 0x51
 800899e:	5c9b      	ldrb	r3, [r3, r2]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	d112      	bne.n	80089cc <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	0013      	movs	r3, r2
 80089b0:	2200      	movs	r2, #0
 80089b2:	2101      	movs	r1, #1
 80089b4:	f7ff fef8 	bl	80087a8 <SPI_WaitFlagStateUntilTimeout>
 80089b8:	1e03      	subs	r3, r0, #0
 80089ba:	d007      	beq.n	80089cc <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c0:	2220      	movs	r2, #32
 80089c2:	431a      	orrs	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e000      	b.n	80089ce <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	0018      	movs	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b004      	add	sp, #16
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e01e      	b.n	8008a26 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2239      	movs	r2, #57	; 0x39
 80089ec:	5c9b      	ldrb	r3, [r3, r2]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d107      	bne.n	8008a04 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2238      	movs	r2, #56	; 0x38
 80089f8:	2100      	movs	r1, #0
 80089fa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	0018      	movs	r0, r3
 8008a00:	f7fb fae8 	bl	8003fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2239      	movs	r2, #57	; 0x39
 8008a08:	2102      	movs	r1, #2
 8008a0a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3304      	adds	r3, #4
 8008a14:	0019      	movs	r1, r3
 8008a16:	0010      	movs	r0, r2
 8008a18:	f000 fa40 	bl	8008e9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2239      	movs	r2, #57	; 0x39
 8008a20:	2101      	movs	r1, #1
 8008a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	0018      	movs	r0, r3
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b002      	add	sp, #8
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2101      	movs	r1, #1
 8008a42:	430a      	orrs	r2, r1
 8008a44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	4013      	ands	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b06      	cmp	r3, #6
 8008a56:	d007      	beq.n	8008a68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2101      	movs	r1, #1
 8008a64:	430a      	orrs	r2, r1
 8008a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	b004      	add	sp, #16
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2202      	movs	r2, #2
 8008a82:	4013      	ands	r3, r2
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d124      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d11d      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2203      	movs	r2, #3
 8008a9c:	4252      	negs	r2, r2
 8008a9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	2203      	movs	r2, #3
 8008aae:	4013      	ands	r3, r2
 8008ab0:	d004      	beq.n	8008abc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f000 f9d9 	bl	8008e6c <HAL_TIM_IC_CaptureCallback>
 8008aba:	e007      	b.n	8008acc <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f000 f9cc 	bl	8008e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f000 f9d8 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	2204      	movs	r2, #4
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d125      	bne.n	8008b2c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	4013      	ands	r3, r2
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d11e      	bne.n	8008b2c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2205      	movs	r2, #5
 8008af4:	4252      	negs	r2, r2
 8008af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	23c0      	movs	r3, #192	; 0xc0
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4013      	ands	r3, r2
 8008b0a:	d004      	beq.n	8008b16 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f000 f9ac 	bl	8008e6c <HAL_TIM_IC_CaptureCallback>
 8008b14:	e007      	b.n	8008b26 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f000 f99f 	bl	8008e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	0018      	movs	r0, r3
 8008b22:	f000 f9ab 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2208      	movs	r2, #8
 8008b34:	4013      	ands	r3, r2
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	d124      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2208      	movs	r2, #8
 8008b42:	4013      	ands	r3, r2
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d11d      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2209      	movs	r2, #9
 8008b4e:	4252      	negs	r2, r2
 8008b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2204      	movs	r2, #4
 8008b56:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	2203      	movs	r2, #3
 8008b60:	4013      	ands	r3, r2
 8008b62:	d004      	beq.n	8008b6e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	0018      	movs	r0, r3
 8008b68:	f000 f980 	bl	8008e6c <HAL_TIM_IC_CaptureCallback>
 8008b6c:	e007      	b.n	8008b7e <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0018      	movs	r0, r3
 8008b72:	f000 f973 	bl	8008e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f000 f97f 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2210      	movs	r2, #16
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	2b10      	cmp	r3, #16
 8008b90:	d125      	bne.n	8008bde <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	2210      	movs	r2, #16
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d11e      	bne.n	8008bde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2211      	movs	r2, #17
 8008ba6:	4252      	negs	r2, r2
 8008ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2208      	movs	r2, #8
 8008bae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69da      	ldr	r2, [r3, #28]
 8008bb6:	23c0      	movs	r3, #192	; 0xc0
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4013      	ands	r3, r2
 8008bbc:	d004      	beq.n	8008bc8 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f000 f953 	bl	8008e6c <HAL_TIM_IC_CaptureCallback>
 8008bc6:	e007      	b.n	8008bd8 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f000 f946 	bl	8008e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f000 f952 	bl	8008e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2201      	movs	r2, #1
 8008be6:	4013      	ands	r3, r2
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d10f      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d108      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	4252      	negs	r2, r2
 8008c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	0018      	movs	r0, r3
 8008c08:	f000 f920 	bl	8008e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2240      	movs	r2, #64	; 0x40
 8008c14:	4013      	ands	r3, r2
 8008c16:	2b40      	cmp	r3, #64	; 0x40
 8008c18:	d10f      	bne.n	8008c3a <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	2240      	movs	r2, #64	; 0x40
 8008c22:	4013      	ands	r3, r2
 8008c24:	2b40      	cmp	r3, #64	; 0x40
 8008c26:	d108      	bne.n	8008c3a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2241      	movs	r2, #65	; 0x41
 8008c2e:	4252      	negs	r2, r2
 8008c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	0018      	movs	r0, r3
 8008c36:	f000 f929 	bl	8008e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c3a:	46c0      	nop			; (mov r8, r8)
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	b002      	add	sp, #8
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2238      	movs	r2, #56	; 0x38
 8008c52:	5c9b      	ldrb	r3, [r3, r2]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_TIM_ConfigClockSource+0x18>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e0ab      	b.n	8008db4 <HAL_TIM_ConfigClockSource+0x170>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2238      	movs	r2, #56	; 0x38
 8008c60:	2101      	movs	r1, #1
 8008c62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2239      	movs	r2, #57	; 0x39
 8008c68:	2102      	movs	r1, #2
 8008c6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2277      	movs	r2, #119	; 0x77
 8008c78:	4393      	bics	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4a4f      	ldr	r2, [pc, #316]	; (8008dbc <HAL_TIM_ConfigClockSource+0x178>)
 8008c80:	4013      	ands	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b40      	cmp	r3, #64	; 0x40
 8008c92:	d100      	bne.n	8008c96 <HAL_TIM_ConfigClockSource+0x52>
 8008c94:	e06b      	b.n	8008d6e <HAL_TIM_ConfigClockSource+0x12a>
 8008c96:	d80e      	bhi.n	8008cb6 <HAL_TIM_ConfigClockSource+0x72>
 8008c98:	2b10      	cmp	r3, #16
 8008c9a:	d100      	bne.n	8008c9e <HAL_TIM_ConfigClockSource+0x5a>
 8008c9c:	e077      	b.n	8008d8e <HAL_TIM_ConfigClockSource+0x14a>
 8008c9e:	d803      	bhi.n	8008ca8 <HAL_TIM_ConfigClockSource+0x64>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d100      	bne.n	8008ca6 <HAL_TIM_ConfigClockSource+0x62>
 8008ca4:	e073      	b.n	8008d8e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008ca6:	e07c      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d100      	bne.n	8008cae <HAL_TIM_ConfigClockSource+0x6a>
 8008cac:	e06f      	b.n	8008d8e <HAL_TIM_ConfigClockSource+0x14a>
 8008cae:	2b30      	cmp	r3, #48	; 0x30
 8008cb0:	d100      	bne.n	8008cb4 <HAL_TIM_ConfigClockSource+0x70>
 8008cb2:	e06c      	b.n	8008d8e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8008cb4:	e075      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008cb6:	2b70      	cmp	r3, #112	; 0x70
 8008cb8:	d00e      	beq.n	8008cd8 <HAL_TIM_ConfigClockSource+0x94>
 8008cba:	d804      	bhi.n	8008cc6 <HAL_TIM_ConfigClockSource+0x82>
 8008cbc:	2b50      	cmp	r3, #80	; 0x50
 8008cbe:	d036      	beq.n	8008d2e <HAL_TIM_ConfigClockSource+0xea>
 8008cc0:	2b60      	cmp	r3, #96	; 0x60
 8008cc2:	d044      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8008cc4:	e06d      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008cc6:	2280      	movs	r2, #128	; 0x80
 8008cc8:	0152      	lsls	r2, r2, #5
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d068      	beq.n	8008da0 <HAL_TIM_ConfigClockSource+0x15c>
 8008cce:	2280      	movs	r2, #128	; 0x80
 8008cd0:	0192      	lsls	r2, r2, #6
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d017      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8008cd6:	e064      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	6899      	ldr	r1, [r3, #8]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f000 fa34 	bl	8009154 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2277      	movs	r2, #119	; 0x77
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	609a      	str	r2, [r3, #8]
      break;
 8008d04:	e04d      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	6899      	ldr	r1, [r3, #8]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f000 fa1d 	bl	8009154 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2180      	movs	r1, #128	; 0x80
 8008d26:	01c9      	lsls	r1, r1, #7
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	609a      	str	r2, [r3, #8]
      break;
 8008d2c:	e039      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6859      	ldr	r1, [r3, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	001a      	movs	r2, r3
 8008d3c:	f000 f990 	bl	8009060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2150      	movs	r1, #80	; 0x50
 8008d46:	0018      	movs	r0, r3
 8008d48:	f000 f9ea 	bl	8009120 <TIM_ITRx_SetConfig>
      break;
 8008d4c:	e029      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6859      	ldr	r1, [r3, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	001a      	movs	r2, r3
 8008d5c:	f000 f9ae 	bl	80090bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2160      	movs	r1, #96	; 0x60
 8008d66:	0018      	movs	r0, r3
 8008d68:	f000 f9da 	bl	8009120 <TIM_ITRx_SetConfig>
      break;
 8008d6c:	e019      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	6859      	ldr	r1, [r3, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	001a      	movs	r2, r3
 8008d7c:	f000 f970 	bl	8009060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2140      	movs	r1, #64	; 0x40
 8008d86:	0018      	movs	r0, r3
 8008d88:	f000 f9ca 	bl	8009120 <TIM_ITRx_SetConfig>
      break;
 8008d8c:	e009      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	0019      	movs	r1, r3
 8008d98:	0010      	movs	r0, r2
 8008d9a:	f000 f9c1 	bl	8009120 <TIM_ITRx_SetConfig>
      break;
 8008d9e:	e000      	b.n	8008da2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8008da0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2239      	movs	r2, #57	; 0x39
 8008da6:	2101      	movs	r1, #1
 8008da8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2238      	movs	r2, #56	; 0x38
 8008dae:	2100      	movs	r1, #0
 8008db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	0018      	movs	r0, r3
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b004      	add	sp, #16
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	ffff00ff 	.word	0xffff00ff

08008dc0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2238      	movs	r2, #56	; 0x38
 8008dce:	5c9b      	ldrb	r3, [r3, r2]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e032      	b.n	8008e3e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2238      	movs	r2, #56	; 0x38
 8008ddc:	2101      	movs	r1, #1
 8008dde:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2239      	movs	r2, #57	; 0x39
 8008de4:	2102      	movs	r1, #2
 8008de6:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	0011      	movs	r1, r2
 8008dee:	0018      	movs	r0, r3
 8008df0:	f000 f8b2 	bl	8008f58 <TIM_SlaveTimer_SetConfig>
 8008df4:	1e03      	subs	r3, r0, #0
 8008df6:	d009      	beq.n	8008e0c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2239      	movs	r2, #57	; 0x39
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2238      	movs	r2, #56	; 0x38
 8008e04:	2100      	movs	r1, #0
 8008e06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e018      	b.n	8008e3e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2140      	movs	r1, #64	; 0x40
 8008e18:	438a      	bics	r2, r1
 8008e1a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4908      	ldr	r1, [pc, #32]	; (8008e48 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8008e28:	400a      	ands	r2, r1
 8008e2a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2239      	movs	r2, #57	; 0x39
 8008e30:	2101      	movs	r1, #1
 8008e32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2238      	movs	r2, #56	; 0x38
 8008e38:	2100      	movs	r1, #0
 8008e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	0018      	movs	r0, r3
 8008e40:	46bd      	mov	sp, r7
 8008e42:	b002      	add	sp, #8
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	ffffbfff 	.word	0xffffbfff

08008e4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e54:	46c0      	nop			; (mov r8, r8)
 8008e56:	46bd      	mov	sp, r7
 8008e58:	b002      	add	sp, #8
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e64:	46c0      	nop			; (mov r8, r8)
 8008e66:	46bd      	mov	sp, r7
 8008e68:	b002      	add	sp, #8
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e74:	46c0      	nop			; (mov r8, r8)
 8008e76:	46bd      	mov	sp, r7
 8008e78:	b002      	add	sp, #8
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e84:	46c0      	nop			; (mov r8, r8)
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b002      	add	sp, #8
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e94:	46c0      	nop			; (mov r8, r8)
 8008e96:	46bd      	mov	sp, r7
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	2380      	movs	r3, #128	; 0x80
 8008eb0:	05db      	lsls	r3, r3, #23
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d00b      	beq.n	8008ece <TIM_Base_SetConfig+0x32>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a23      	ldr	r2, [pc, #140]	; (8008f48 <TIM_Base_SetConfig+0xac>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d007      	beq.n	8008ece <TIM_Base_SetConfig+0x32>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a22      	ldr	r2, [pc, #136]	; (8008f4c <TIM_Base_SetConfig+0xb0>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d003      	beq.n	8008ece <TIM_Base_SetConfig+0x32>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a21      	ldr	r2, [pc, #132]	; (8008f50 <TIM_Base_SetConfig+0xb4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d108      	bne.n	8008ee0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2270      	movs	r2, #112	; 0x70
 8008ed2:	4393      	bics	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	2380      	movs	r3, #128	; 0x80
 8008ee4:	05db      	lsls	r3, r3, #23
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d00b      	beq.n	8008f02 <TIM_Base_SetConfig+0x66>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a16      	ldr	r2, [pc, #88]	; (8008f48 <TIM_Base_SetConfig+0xac>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d007      	beq.n	8008f02 <TIM_Base_SetConfig+0x66>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <TIM_Base_SetConfig+0xb0>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d003      	beq.n	8008f02 <TIM_Base_SetConfig+0x66>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a14      	ldr	r2, [pc, #80]	; (8008f50 <TIM_Base_SetConfig+0xb4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d108      	bne.n	8008f14 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4a13      	ldr	r2, [pc, #76]	; (8008f54 <TIM_Base_SetConfig+0xb8>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2280      	movs	r2, #128	; 0x80
 8008f18:	4393      	bics	r3, r2
 8008f1a:	001a      	movs	r2, r3
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	615a      	str	r2, [r3, #20]
}
 8008f40:	46c0      	nop			; (mov r8, r8)
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b004      	add	sp, #16
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40000400 	.word	0x40000400
 8008f4c:	40010800 	.word	0x40010800
 8008f50:	40011400 	.word	0x40011400
 8008f54:	fffffcff 	.word	0xfffffcff

08008f58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2270      	movs	r2, #112	; 0x70
 8008f6e:	4393      	bics	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2207      	movs	r2, #7
 8008f80:	4393      	bics	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2b30      	cmp	r3, #48	; 0x30
 8008f9c:	d05a      	beq.n	8009054 <TIM_SlaveTimer_SetConfig+0xfc>
 8008f9e:	d806      	bhi.n	8008fae <TIM_SlaveTimer_SetConfig+0x56>
 8008fa0:	2b10      	cmp	r3, #16
 8008fa2:	d057      	beq.n	8009054 <TIM_SlaveTimer_SetConfig+0xfc>
 8008fa4:	2b20      	cmp	r3, #32
 8008fa6:	d055      	beq.n	8009054 <TIM_SlaveTimer_SetConfig+0xfc>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d053      	beq.n	8009054 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008fac:	e053      	b.n	8009056 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8008fae:	2b50      	cmp	r3, #80	; 0x50
 8008fb0:	d03c      	beq.n	800902c <TIM_SlaveTimer_SetConfig+0xd4>
 8008fb2:	d802      	bhi.n	8008fba <TIM_SlaveTimer_SetConfig+0x62>
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d010      	beq.n	8008fda <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8008fb8:	e04d      	b.n	8009056 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8008fba:	2b60      	cmp	r3, #96	; 0x60
 8008fbc:	d040      	beq.n	8009040 <TIM_SlaveTimer_SetConfig+0xe8>
 8008fbe:	2b70      	cmp	r3, #112	; 0x70
 8008fc0:	d000      	beq.n	8008fc4 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8008fc2:	e048      	b.n	8009056 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68d9      	ldr	r1, [r3, #12]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f000 f8be 	bl	8009154 <TIM_ETR_SetConfig>
      break;
 8008fd8:	e03d      	b.n	8009056 <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b05      	cmp	r3, #5
 8008fe0:	d101      	bne.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e038      	b.n	8009058 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6a1a      	ldr	r2, [r3, #32]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	438a      	bics	r2, r1
 8008ffc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	22f0      	movs	r2, #240	; 0xf0
 800900a:	4393      	bics	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	621a      	str	r2, [r3, #32]
      break;
 800902a:	e014      	b.n	8009056 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	6899      	ldr	r1, [r3, #8]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	001a      	movs	r2, r3
 800903a:	f000 f811 	bl	8009060 <TIM_TI1_ConfigInputStage>
      break;
 800903e:	e00a      	b.n	8009056 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	6899      	ldr	r1, [r3, #8]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	001a      	movs	r2, r3
 800904e:	f000 f835 	bl	80090bc <TIM_TI2_ConfigInputStage>
      break;
 8009052:	e000      	b.n	8009056 <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8009054:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	0018      	movs	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	b006      	add	sp, #24
 800905e:	bd80      	pop	{r7, pc}

08009060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	2201      	movs	r2, #1
 8009078:	4393      	bics	r3, r2
 800907a:	001a      	movs	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	22f0      	movs	r2, #240	; 0xf0
 800908a:	4393      	bics	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	011b      	lsls	r3, r3, #4
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	4313      	orrs	r3, r2
 8009096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	220a      	movs	r2, #10
 800909c:	4393      	bics	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	621a      	str	r2, [r3, #32]
}
 80090b4:	46c0      	nop			; (mov r8, r8)
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b006      	add	sp, #24
 80090ba:	bd80      	pop	{r7, pc}

080090bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	2210      	movs	r2, #16
 80090ce:	4393      	bics	r3, r2
 80090d0:	001a      	movs	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	4a0d      	ldr	r2, [pc, #52]	; (800911c <TIM_TI2_ConfigInputStage+0x60>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	031b      	lsls	r3, r3, #12
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	22a0      	movs	r2, #160	; 0xa0
 80090f8:	4393      	bics	r3, r2
 80090fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	621a      	str	r2, [r3, #32]
}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	46bd      	mov	sp, r7
 8009116:	b006      	add	sp, #24
 8009118:	bd80      	pop	{r7, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	ffff0fff 	.word	0xffff0fff

08009120 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2270      	movs	r2, #112	; 0x70
 8009134:	4393      	bics	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	2207      	movs	r2, #7
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	609a      	str	r2, [r3, #8]
}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	46bd      	mov	sp, r7
 800914e:	b004      	add	sp, #16
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <TIM_ETR_SetConfig+0x3c>)
 800916c:	4013      	ands	r3, r2
 800916e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	021a      	lsls	r2, r3, #8
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	431a      	orrs	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4313      	orrs	r3, r2
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	609a      	str	r2, [r3, #8]
}
 8009188:	46c0      	nop			; (mov r8, r8)
 800918a:	46bd      	mov	sp, r7
 800918c:	b006      	add	sp, #24
 800918e:	bd80      	pop	{r7, pc}
 8009190:	ffff00ff 	.word	0xffff00ff

08009194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2238      	movs	r2, #56	; 0x38
 80091a2:	5c9b      	ldrb	r3, [r3, r2]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e032      	b.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2238      	movs	r2, #56	; 0x38
 80091b0:	2101      	movs	r1, #1
 80091b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2239      	movs	r2, #57	; 0x39
 80091b8:	2102      	movs	r1, #2
 80091ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2270      	movs	r2, #112	; 0x70
 80091d0:	4393      	bics	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2280      	movs	r2, #128	; 0x80
 80091e2:	4393      	bics	r3, r2
 80091e4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2239      	movs	r2, #57	; 0x39
 8009204:	2101      	movs	r1, #1
 8009206:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2238      	movs	r2, #56	; 0x38
 800920c:	2100      	movs	r1, #0
 800920e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	0018      	movs	r0, r3
 8009214:	46bd      	mov	sp, r7
 8009216:	b004      	add	sp, #16
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e044      	b.n	80092b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009232:	2b00      	cmp	r3, #0
 8009234:	d107      	bne.n	8009246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2270      	movs	r2, #112	; 0x70
 800923a:	2100      	movs	r1, #0
 800923c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	0018      	movs	r0, r3
 8009242:	f7fa fedd 	bl	8004000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2224      	movs	r2, #36	; 0x24
 800924a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2101      	movs	r1, #1
 8009258:	438a      	bics	r2, r1
 800925a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	0018      	movs	r0, r3
 8009260:	f000 f8d8 	bl	8009414 <UART_SetConfig>
 8009264:	0003      	movs	r3, r0
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e024      	b.n	80092b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	0018      	movs	r0, r3
 800927a:	f000 fbff 	bl	8009a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	490d      	ldr	r1, [pc, #52]	; (80092c0 <HAL_UART_Init+0xa4>)
 800928a:	400a      	ands	r2, r1
 800928c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	212a      	movs	r1, #42	; 0x2a
 800929a:	438a      	bics	r2, r1
 800929c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2101      	movs	r1, #1
 80092aa:	430a      	orrs	r2, r1
 80092ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	0018      	movs	r0, r3
 80092b2:	f000 fc97 	bl	8009be4 <UART_CheckIdleState>
 80092b6:	0003      	movs	r3, r0
}
 80092b8:	0018      	movs	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	b002      	add	sp, #8
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	ffffb7ff 	.word	0xffffb7ff

080092c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	; 0x28
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	1dbb      	adds	r3, r7, #6
 80092d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d000      	beq.n	80092de <HAL_UART_Transmit+0x1a>
 80092dc:	e094      	b.n	8009408 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <HAL_UART_Transmit+0x28>
 80092e4:	1dbb      	adds	r3, r7, #6
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e08c      	b.n	800940a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	2380      	movs	r3, #128	; 0x80
 80092f6:	015b      	lsls	r3, r3, #5
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d109      	bne.n	8009310 <HAL_UART_Transmit+0x4c>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d105      	bne.n	8009310 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2201      	movs	r2, #1
 8009308:	4013      	ands	r3, r2
 800930a:	d001      	beq.n	8009310 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e07c      	b.n	800940a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2270      	movs	r2, #112	; 0x70
 8009314:	5c9b      	ldrb	r3, [r3, r2]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d101      	bne.n	800931e <HAL_UART_Transmit+0x5a>
 800931a:	2302      	movs	r3, #2
 800931c:	e075      	b.n	800940a <HAL_UART_Transmit+0x146>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2270      	movs	r2, #112	; 0x70
 8009322:	2101      	movs	r1, #1
 8009324:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2221      	movs	r2, #33	; 0x21
 8009330:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009332:	f7fc fcef 	bl	8005d14 <HAL_GetTick>
 8009336:	0003      	movs	r3, r0
 8009338:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	1dba      	adds	r2, r7, #6
 800933e:	2150      	movs	r1, #80	; 0x50
 8009340:	8812      	ldrh	r2, [r2, #0]
 8009342:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	1dba      	adds	r2, r7, #6
 8009348:	2152      	movs	r1, #82	; 0x52
 800934a:	8812      	ldrh	r2, [r2, #0]
 800934c:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	2380      	movs	r3, #128	; 0x80
 8009354:	015b      	lsls	r3, r3, #5
 8009356:	429a      	cmp	r2, r3
 8009358:	d108      	bne.n	800936c <HAL_UART_Transmit+0xa8>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d104      	bne.n	800936c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	61bb      	str	r3, [r7, #24]
 800936a:	e003      	b.n	8009374 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009370:	2300      	movs	r3, #0
 8009372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009374:	e02c      	b.n	80093d0 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	0013      	movs	r3, r2
 8009380:	2200      	movs	r2, #0
 8009382:	2180      	movs	r1, #128	; 0x80
 8009384:	f000 fc74 	bl	8009c70 <UART_WaitOnFlagUntilTimeout>
 8009388:	1e03      	subs	r3, r0, #0
 800938a:	d001      	beq.n	8009390 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e03c      	b.n	800940a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	001a      	movs	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	05d2      	lsls	r2, r2, #23
 80093a2:	0dd2      	lsrs	r2, r2, #23
 80093a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	3302      	adds	r3, #2
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	e007      	b.n	80093be <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	3301      	adds	r3, #1
 80093bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2252      	movs	r2, #82	; 0x52
 80093c2:	5a9b      	ldrh	r3, [r3, r2]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b299      	uxth	r1, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2252      	movs	r2, #82	; 0x52
 80093ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2252      	movs	r2, #82	; 0x52
 80093d4:	5a9b      	ldrh	r3, [r3, r2]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1cc      	bne.n	8009376 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	0013      	movs	r3, r2
 80093e6:	2200      	movs	r2, #0
 80093e8:	2140      	movs	r1, #64	; 0x40
 80093ea:	f000 fc41 	bl	8009c70 <UART_WaitOnFlagUntilTimeout>
 80093ee:	1e03      	subs	r3, r0, #0
 80093f0:	d001      	beq.n	80093f6 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e009      	b.n	800940a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2270      	movs	r2, #112	; 0x70
 8009400:	2100      	movs	r1, #0
 8009402:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	e000      	b.n	800940a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8009408:	2302      	movs	r3, #2
  }
}
 800940a:	0018      	movs	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	b008      	add	sp, #32
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009414:	b5b0      	push	{r4, r5, r7, lr}
 8009416:	b08e      	sub	sp, #56	; 0x38
 8009418:	af00      	add	r7, sp, #0
 800941a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800941c:	231b      	movs	r3, #27
 800941e:	2218      	movs	r2, #24
 8009420:	4694      	mov	ip, r2
 8009422:	44bc      	add	ip, r7
 8009424:	4463      	add	r3, ip
 8009426:	2210      	movs	r2, #16
 8009428:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800942a:	2300      	movs	r3, #0
 800942c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800942e:	2313      	movs	r3, #19
 8009430:	2218      	movs	r2, #24
 8009432:	4694      	mov	ip, r2
 8009434:	44bc      	add	ip, r7
 8009436:	4463      	add	r3, ip
 8009438:	2200      	movs	r2, #0
 800943a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800943c:	2300      	movs	r3, #0
 800943e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	431a      	orrs	r2, r3
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	431a      	orrs	r2, r3
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	4313      	orrs	r3, r2
 8009456:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4aca      	ldr	r2, [pc, #808]	; (8009788 <UART_SetConfig+0x374>)
 8009460:	4013      	ands	r3, r2
 8009462:	0019      	movs	r1, r3
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800946a:	430a      	orrs	r2, r1
 800946c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4ac5      	ldr	r2, [pc, #788]	; (800978c <UART_SetConfig+0x378>)
 8009476:	4013      	ands	r3, r2
 8009478:	0019      	movs	r1, r3
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4abf      	ldr	r2, [pc, #764]	; (8009790 <UART_SetConfig+0x37c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800949c:	4313      	orrs	r3, r2
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	4abb      	ldr	r2, [pc, #748]	; (8009794 <UART_SetConfig+0x380>)
 80094a8:	4013      	ands	r3, r2
 80094aa:	0019      	movs	r1, r3
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b2:	430a      	orrs	r2, r1
 80094b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4ab7      	ldr	r2, [pc, #732]	; (8009798 <UART_SetConfig+0x384>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d134      	bne.n	800952a <UART_SetConfig+0x116>
 80094c0:	4bb6      	ldr	r3, [pc, #728]	; (800979c <UART_SetConfig+0x388>)
 80094c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094c4:	2203      	movs	r2, #3
 80094c6:	4013      	ands	r3, r2
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d015      	beq.n	80094f8 <UART_SetConfig+0xe4>
 80094cc:	d304      	bcc.n	80094d8 <UART_SetConfig+0xc4>
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d00a      	beq.n	80094e8 <UART_SetConfig+0xd4>
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d018      	beq.n	8009508 <UART_SetConfig+0xf4>
 80094d6:	e01f      	b.n	8009518 <UART_SetConfig+0x104>
 80094d8:	231b      	movs	r3, #27
 80094da:	2218      	movs	r2, #24
 80094dc:	4694      	mov	ip, r2
 80094de:	44bc      	add	ip, r7
 80094e0:	4463      	add	r3, ip
 80094e2:	2201      	movs	r2, #1
 80094e4:	701a      	strb	r2, [r3, #0]
 80094e6:	e0c5      	b.n	8009674 <UART_SetConfig+0x260>
 80094e8:	231b      	movs	r3, #27
 80094ea:	2218      	movs	r2, #24
 80094ec:	4694      	mov	ip, r2
 80094ee:	44bc      	add	ip, r7
 80094f0:	4463      	add	r3, ip
 80094f2:	2202      	movs	r2, #2
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	e0bd      	b.n	8009674 <UART_SetConfig+0x260>
 80094f8:	231b      	movs	r3, #27
 80094fa:	2218      	movs	r2, #24
 80094fc:	4694      	mov	ip, r2
 80094fe:	44bc      	add	ip, r7
 8009500:	4463      	add	r3, ip
 8009502:	2204      	movs	r2, #4
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	e0b5      	b.n	8009674 <UART_SetConfig+0x260>
 8009508:	231b      	movs	r3, #27
 800950a:	2218      	movs	r2, #24
 800950c:	4694      	mov	ip, r2
 800950e:	44bc      	add	ip, r7
 8009510:	4463      	add	r3, ip
 8009512:	2208      	movs	r2, #8
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	e0ad      	b.n	8009674 <UART_SetConfig+0x260>
 8009518:	231b      	movs	r3, #27
 800951a:	2218      	movs	r2, #24
 800951c:	4694      	mov	ip, r2
 800951e:	44bc      	add	ip, r7
 8009520:	4463      	add	r3, ip
 8009522:	2210      	movs	r2, #16
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	e0a4      	b.n	8009674 <UART_SetConfig+0x260>
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a9c      	ldr	r2, [pc, #624]	; (80097a0 <UART_SetConfig+0x38c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d137      	bne.n	80095a4 <UART_SetConfig+0x190>
 8009534:	4b99      	ldr	r3, [pc, #612]	; (800979c <UART_SetConfig+0x388>)
 8009536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009538:	220c      	movs	r2, #12
 800953a:	4013      	ands	r3, r2
 800953c:	2b04      	cmp	r3, #4
 800953e:	d018      	beq.n	8009572 <UART_SetConfig+0x15e>
 8009540:	d802      	bhi.n	8009548 <UART_SetConfig+0x134>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <UART_SetConfig+0x13e>
 8009546:	e024      	b.n	8009592 <UART_SetConfig+0x17e>
 8009548:	2b08      	cmp	r3, #8
 800954a:	d00a      	beq.n	8009562 <UART_SetConfig+0x14e>
 800954c:	2b0c      	cmp	r3, #12
 800954e:	d018      	beq.n	8009582 <UART_SetConfig+0x16e>
 8009550:	e01f      	b.n	8009592 <UART_SetConfig+0x17e>
 8009552:	231b      	movs	r3, #27
 8009554:	2218      	movs	r2, #24
 8009556:	4694      	mov	ip, r2
 8009558:	44bc      	add	ip, r7
 800955a:	4463      	add	r3, ip
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	e088      	b.n	8009674 <UART_SetConfig+0x260>
 8009562:	231b      	movs	r3, #27
 8009564:	2218      	movs	r2, #24
 8009566:	4694      	mov	ip, r2
 8009568:	44bc      	add	ip, r7
 800956a:	4463      	add	r3, ip
 800956c:	2202      	movs	r2, #2
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e080      	b.n	8009674 <UART_SetConfig+0x260>
 8009572:	231b      	movs	r3, #27
 8009574:	2218      	movs	r2, #24
 8009576:	4694      	mov	ip, r2
 8009578:	44bc      	add	ip, r7
 800957a:	4463      	add	r3, ip
 800957c:	2204      	movs	r2, #4
 800957e:	701a      	strb	r2, [r3, #0]
 8009580:	e078      	b.n	8009674 <UART_SetConfig+0x260>
 8009582:	231b      	movs	r3, #27
 8009584:	2218      	movs	r2, #24
 8009586:	4694      	mov	ip, r2
 8009588:	44bc      	add	ip, r7
 800958a:	4463      	add	r3, ip
 800958c:	2208      	movs	r2, #8
 800958e:	701a      	strb	r2, [r3, #0]
 8009590:	e070      	b.n	8009674 <UART_SetConfig+0x260>
 8009592:	231b      	movs	r3, #27
 8009594:	2218      	movs	r2, #24
 8009596:	4694      	mov	ip, r2
 8009598:	44bc      	add	ip, r7
 800959a:	4463      	add	r3, ip
 800959c:	2210      	movs	r2, #16
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	46c0      	nop			; (mov r8, r8)
 80095a2:	e067      	b.n	8009674 <UART_SetConfig+0x260>
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a7e      	ldr	r2, [pc, #504]	; (80097a4 <UART_SetConfig+0x390>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d107      	bne.n	80095be <UART_SetConfig+0x1aa>
 80095ae:	231b      	movs	r3, #27
 80095b0:	2218      	movs	r2, #24
 80095b2:	4694      	mov	ip, r2
 80095b4:	44bc      	add	ip, r7
 80095b6:	4463      	add	r3, ip
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
 80095bc:	e05a      	b.n	8009674 <UART_SetConfig+0x260>
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a79      	ldr	r2, [pc, #484]	; (80097a8 <UART_SetConfig+0x394>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d107      	bne.n	80095d8 <UART_SetConfig+0x1c4>
 80095c8:	231b      	movs	r3, #27
 80095ca:	2218      	movs	r2, #24
 80095cc:	4694      	mov	ip, r2
 80095ce:	44bc      	add	ip, r7
 80095d0:	4463      	add	r3, ip
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	e04d      	b.n	8009674 <UART_SetConfig+0x260>
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a6c      	ldr	r2, [pc, #432]	; (8009790 <UART_SetConfig+0x37c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d141      	bne.n	8009666 <UART_SetConfig+0x252>
 80095e2:	4b6e      	ldr	r3, [pc, #440]	; (800979c <UART_SetConfig+0x388>)
 80095e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095e6:	23c0      	movs	r3, #192	; 0xc0
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	4013      	ands	r3, r2
 80095ec:	2280      	movs	r2, #128	; 0x80
 80095ee:	00d2      	lsls	r2, r2, #3
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d01f      	beq.n	8009634 <UART_SetConfig+0x220>
 80095f4:	2280      	movs	r2, #128	; 0x80
 80095f6:	00d2      	lsls	r2, r2, #3
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d802      	bhi.n	8009602 <UART_SetConfig+0x1ee>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d009      	beq.n	8009614 <UART_SetConfig+0x200>
 8009600:	e028      	b.n	8009654 <UART_SetConfig+0x240>
 8009602:	2280      	movs	r2, #128	; 0x80
 8009604:	0112      	lsls	r2, r2, #4
 8009606:	4293      	cmp	r3, r2
 8009608:	d00c      	beq.n	8009624 <UART_SetConfig+0x210>
 800960a:	22c0      	movs	r2, #192	; 0xc0
 800960c:	0112      	lsls	r2, r2, #4
 800960e:	4293      	cmp	r3, r2
 8009610:	d018      	beq.n	8009644 <UART_SetConfig+0x230>
 8009612:	e01f      	b.n	8009654 <UART_SetConfig+0x240>
 8009614:	231b      	movs	r3, #27
 8009616:	2218      	movs	r2, #24
 8009618:	4694      	mov	ip, r2
 800961a:	44bc      	add	ip, r7
 800961c:	4463      	add	r3, ip
 800961e:	2200      	movs	r2, #0
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	e027      	b.n	8009674 <UART_SetConfig+0x260>
 8009624:	231b      	movs	r3, #27
 8009626:	2218      	movs	r2, #24
 8009628:	4694      	mov	ip, r2
 800962a:	44bc      	add	ip, r7
 800962c:	4463      	add	r3, ip
 800962e:	2202      	movs	r2, #2
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e01f      	b.n	8009674 <UART_SetConfig+0x260>
 8009634:	231b      	movs	r3, #27
 8009636:	2218      	movs	r2, #24
 8009638:	4694      	mov	ip, r2
 800963a:	44bc      	add	ip, r7
 800963c:	4463      	add	r3, ip
 800963e:	2204      	movs	r2, #4
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	e017      	b.n	8009674 <UART_SetConfig+0x260>
 8009644:	231b      	movs	r3, #27
 8009646:	2218      	movs	r2, #24
 8009648:	4694      	mov	ip, r2
 800964a:	44bc      	add	ip, r7
 800964c:	4463      	add	r3, ip
 800964e:	2208      	movs	r2, #8
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	e00f      	b.n	8009674 <UART_SetConfig+0x260>
 8009654:	231b      	movs	r3, #27
 8009656:	2218      	movs	r2, #24
 8009658:	4694      	mov	ip, r2
 800965a:	44bc      	add	ip, r7
 800965c:	4463      	add	r3, ip
 800965e:	2210      	movs	r2, #16
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	e006      	b.n	8009674 <UART_SetConfig+0x260>
 8009666:	231b      	movs	r3, #27
 8009668:	2218      	movs	r2, #24
 800966a:	4694      	mov	ip, r2
 800966c:	44bc      	add	ip, r7
 800966e:	4463      	add	r3, ip
 8009670:	2210      	movs	r2, #16
 8009672:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a45      	ldr	r2, [pc, #276]	; (8009790 <UART_SetConfig+0x37c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d000      	beq.n	8009680 <UART_SetConfig+0x26c>
 800967e:	e09d      	b.n	80097bc <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009680:	231b      	movs	r3, #27
 8009682:	2218      	movs	r2, #24
 8009684:	4694      	mov	ip, r2
 8009686:	44bc      	add	ip, r7
 8009688:	4463      	add	r3, ip
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d00d      	beq.n	80096ac <UART_SetConfig+0x298>
 8009690:	dc02      	bgt.n	8009698 <UART_SetConfig+0x284>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <UART_SetConfig+0x28e>
 8009696:	e01d      	b.n	80096d4 <UART_SetConfig+0x2c0>
 8009698:	2b04      	cmp	r3, #4
 800969a:	d012      	beq.n	80096c2 <UART_SetConfig+0x2ae>
 800969c:	2b08      	cmp	r3, #8
 800969e:	d015      	beq.n	80096cc <UART_SetConfig+0x2b8>
 80096a0:	e018      	b.n	80096d4 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80096a2:	f7fe fa4f 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 80096a6:	0003      	movs	r3, r0
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096aa:	e01b      	b.n	80096e4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096ac:	4b3b      	ldr	r3, [pc, #236]	; (800979c <UART_SetConfig+0x388>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2210      	movs	r2, #16
 80096b2:	4013      	ands	r3, r2
 80096b4:	d002      	beq.n	80096bc <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80096b6:	4b3d      	ldr	r3, [pc, #244]	; (80097ac <UART_SetConfig+0x398>)
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80096ba:	e013      	b.n	80096e4 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80096bc:	4b3c      	ldr	r3, [pc, #240]	; (80097b0 <UART_SetConfig+0x39c>)
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096c0:	e010      	b.n	80096e4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80096c2:	f7fe f9b1 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 80096c6:	0003      	movs	r3, r0
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096ca:	e00b      	b.n	80096e4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096d2:	e007      	b.n	80096e4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80096d4:	2313      	movs	r3, #19
 80096d6:	2218      	movs	r2, #24
 80096d8:	4694      	mov	ip, r2
 80096da:	44bc      	add	ip, r7
 80096dc:	4463      	add	r3, ip
 80096de:	2201      	movs	r2, #1
 80096e0:	701a      	strb	r2, [r3, #0]
        break;
 80096e2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d100      	bne.n	80096ec <UART_SetConfig+0x2d8>
 80096ea:	e1a6      	b.n	8009a3a <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	0013      	movs	r3, r2
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	189b      	adds	r3, r3, r2
 80096f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d305      	bcc.n	8009708 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009704:	429a      	cmp	r2, r3
 8009706:	d907      	bls.n	8009718 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8009708:	2313      	movs	r3, #19
 800970a:	2218      	movs	r2, #24
 800970c:	4694      	mov	ip, r2
 800970e:	44bc      	add	ip, r7
 8009710:	4463      	add	r3, ip
 8009712:	2201      	movs	r2, #1
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	e190      	b.n	8009a3a <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	2300      	movs	r3, #0
 800971e:	617b      	str	r3, [r7, #20]
 8009720:	6939      	ldr	r1, [r7, #16]
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	000b      	movs	r3, r1
 8009726:	0e1b      	lsrs	r3, r3, #24
 8009728:	0010      	movs	r0, r2
 800972a:	0205      	lsls	r5, r0, #8
 800972c:	431d      	orrs	r5, r3
 800972e:	000b      	movs	r3, r1
 8009730:	021c      	lsls	r4, r3, #8
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	085b      	lsrs	r3, r3, #1
 8009738:	60bb      	str	r3, [r7, #8]
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	68b8      	ldr	r0, [r7, #8]
 8009740:	68f9      	ldr	r1, [r7, #12]
 8009742:	1900      	adds	r0, r0, r4
 8009744:	4169      	adcs	r1, r5
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	2300      	movs	r3, #0
 800974e:	607b      	str	r3, [r7, #4]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f7f6 fde4 	bl	8000320 <__aeabi_uldivmod>
 8009758:	0003      	movs	r3, r0
 800975a:	000c      	movs	r4, r1
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	4a14      	ldr	r2, [pc, #80]	; (80097b4 <UART_SetConfig+0x3a0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d908      	bls.n	8009778 <UART_SetConfig+0x364>
 8009766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009768:	4a13      	ldr	r2, [pc, #76]	; (80097b8 <UART_SetConfig+0x3a4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d804      	bhi.n	8009778 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009774:	60da      	str	r2, [r3, #12]
 8009776:	e160      	b.n	8009a3a <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8009778:	2313      	movs	r3, #19
 800977a:	2218      	movs	r2, #24
 800977c:	4694      	mov	ip, r2
 800977e:	44bc      	add	ip, r7
 8009780:	4463      	add	r3, ip
 8009782:	2201      	movs	r2, #1
 8009784:	701a      	strb	r2, [r3, #0]
 8009786:	e158      	b.n	8009a3a <UART_SetConfig+0x626>
 8009788:	efff69f3 	.word	0xefff69f3
 800978c:	ffffcfff 	.word	0xffffcfff
 8009790:	40004800 	.word	0x40004800
 8009794:	fffff4ff 	.word	0xfffff4ff
 8009798:	40013800 	.word	0x40013800
 800979c:	40021000 	.word	0x40021000
 80097a0:	40004400 	.word	0x40004400
 80097a4:	40004c00 	.word	0x40004c00
 80097a8:	40005000 	.word	0x40005000
 80097ac:	003d0900 	.word	0x003d0900
 80097b0:	00f42400 	.word	0x00f42400
 80097b4:	000002ff 	.word	0x000002ff
 80097b8:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	69da      	ldr	r2, [r3, #28]
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	021b      	lsls	r3, r3, #8
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d000      	beq.n	80097ca <UART_SetConfig+0x3b6>
 80097c8:	e0a9      	b.n	800991e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 80097ca:	231b      	movs	r3, #27
 80097cc:	2218      	movs	r2, #24
 80097ce:	4694      	mov	ip, r2
 80097d0:	44bc      	add	ip, r7
 80097d2:	4463      	add	r3, ip
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d86d      	bhi.n	80098b6 <UART_SetConfig+0x4a2>
 80097da:	009a      	lsls	r2, r3, #2
 80097dc:	4b9f      	ldr	r3, [pc, #636]	; (8009a5c <UART_SetConfig+0x648>)
 80097de:	18d3      	adds	r3, r2, r3
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80097e4:	f7fe f9ae 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 80097e8:	0003      	movs	r3, r0
 80097ea:	005a      	lsls	r2, r3, #1
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	085b      	lsrs	r3, r3, #1
 80097f2:	18d2      	adds	r2, r2, r3
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	0019      	movs	r1, r3
 80097fa:	0010      	movs	r0, r2
 80097fc:	f7f6 fc8c 	bl	8000118 <__udivsi3>
 8009800:	0003      	movs	r3, r0
 8009802:	b29b      	uxth	r3, r3
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009806:	e05e      	b.n	80098c6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009808:	f7fe f9b2 	bl	8007b70 <HAL_RCC_GetPCLK2Freq>
 800980c:	0003      	movs	r3, r0
 800980e:	005a      	lsls	r2, r3, #1
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	085b      	lsrs	r3, r3, #1
 8009816:	18d2      	adds	r2, r2, r3
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	0019      	movs	r1, r3
 800981e:	0010      	movs	r0, r2
 8009820:	f7f6 fc7a 	bl	8000118 <__udivsi3>
 8009824:	0003      	movs	r3, r0
 8009826:	b29b      	uxth	r3, r3
 8009828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800982a:	e04c      	b.n	80098c6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800982c:	4b8c      	ldr	r3, [pc, #560]	; (8009a60 <UART_SetConfig+0x64c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2210      	movs	r2, #16
 8009832:	4013      	ands	r3, r2
 8009834:	d00e      	beq.n	8009854 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	085b      	lsrs	r3, r3, #1
 800983c:	4a89      	ldr	r2, [pc, #548]	; (8009a64 <UART_SetConfig+0x650>)
 800983e:	189a      	adds	r2, r3, r2
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	0019      	movs	r1, r3
 8009846:	0010      	movs	r0, r2
 8009848:	f7f6 fc66 	bl	8000118 <__udivsi3>
 800984c:	0003      	movs	r3, r0
 800984e:	b29b      	uxth	r3, r3
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8009852:	e038      	b.n	80098c6 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	4a83      	ldr	r2, [pc, #524]	; (8009a68 <UART_SetConfig+0x654>)
 800985c:	189a      	adds	r2, r3, r2
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	0019      	movs	r1, r3
 8009864:	0010      	movs	r0, r2
 8009866:	f7f6 fc57 	bl	8000118 <__udivsi3>
 800986a:	0003      	movs	r3, r0
 800986c:	b29b      	uxth	r3, r3
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009870:	e029      	b.n	80098c6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009872:	f7fe f8d9 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 8009876:	0003      	movs	r3, r0
 8009878:	005a      	lsls	r2, r3, #1
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	085b      	lsrs	r3, r3, #1
 8009880:	18d2      	adds	r2, r2, r3
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	0019      	movs	r1, r3
 8009888:	0010      	movs	r0, r2
 800988a:	f7f6 fc45 	bl	8000118 <__udivsi3>
 800988e:	0003      	movs	r3, r0
 8009890:	b29b      	uxth	r3, r3
 8009892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009894:	e017      	b.n	80098c6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	085b      	lsrs	r3, r3, #1
 800989c:	2280      	movs	r2, #128	; 0x80
 800989e:	0252      	lsls	r2, r2, #9
 80098a0:	189a      	adds	r2, r3, r2
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	0019      	movs	r1, r3
 80098a8:	0010      	movs	r0, r2
 80098aa:	f7f6 fc35 	bl	8000118 <__udivsi3>
 80098ae:	0003      	movs	r3, r0
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098b4:	e007      	b.n	80098c6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80098b6:	2313      	movs	r3, #19
 80098b8:	2218      	movs	r2, #24
 80098ba:	4694      	mov	ip, r2
 80098bc:	44bc      	add	ip, r7
 80098be:	4463      	add	r3, ip
 80098c0:	2201      	movs	r2, #1
 80098c2:	701a      	strb	r2, [r3, #0]
        break;
 80098c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c8:	2b0f      	cmp	r3, #15
 80098ca:	d920      	bls.n	800990e <UART_SetConfig+0x4fa>
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	4a67      	ldr	r2, [pc, #412]	; (8009a6c <UART_SetConfig+0x658>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d81c      	bhi.n	800990e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	200a      	movs	r0, #10
 80098da:	2418      	movs	r4, #24
 80098dc:	193b      	adds	r3, r7, r4
 80098de:	181b      	adds	r3, r3, r0
 80098e0:	210f      	movs	r1, #15
 80098e2:	438a      	bics	r2, r1
 80098e4:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	085b      	lsrs	r3, r3, #1
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2207      	movs	r2, #7
 80098ee:	4013      	ands	r3, r2
 80098f0:	b299      	uxth	r1, r3
 80098f2:	193b      	adds	r3, r7, r4
 80098f4:	181b      	adds	r3, r3, r0
 80098f6:	193a      	adds	r2, r7, r4
 80098f8:	1812      	adds	r2, r2, r0
 80098fa:	8812      	ldrh	r2, [r2, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	193a      	adds	r2, r7, r4
 8009906:	1812      	adds	r2, r2, r0
 8009908:	8812      	ldrh	r2, [r2, #0]
 800990a:	60da      	str	r2, [r3, #12]
 800990c:	e095      	b.n	8009a3a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800990e:	2313      	movs	r3, #19
 8009910:	2218      	movs	r2, #24
 8009912:	4694      	mov	ip, r2
 8009914:	44bc      	add	ip, r7
 8009916:	4463      	add	r3, ip
 8009918:	2201      	movs	r2, #1
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	e08d      	b.n	8009a3a <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800991e:	231b      	movs	r3, #27
 8009920:	2218      	movs	r2, #24
 8009922:	4694      	mov	ip, r2
 8009924:	44bc      	add	ip, r7
 8009926:	4463      	add	r3, ip
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b08      	cmp	r3, #8
 800992c:	d86a      	bhi.n	8009a04 <UART_SetConfig+0x5f0>
 800992e:	009a      	lsls	r2, r3, #2
 8009930:	4b4f      	ldr	r3, [pc, #316]	; (8009a70 <UART_SetConfig+0x65c>)
 8009932:	18d3      	adds	r3, r2, r3
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009938:	f7fe f904 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800993c:	0002      	movs	r2, r0
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	085b      	lsrs	r3, r3, #1
 8009944:	18d2      	adds	r2, r2, r3
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	0019      	movs	r1, r3
 800994c:	0010      	movs	r0, r2
 800994e:	f7f6 fbe3 	bl	8000118 <__udivsi3>
 8009952:	0003      	movs	r3, r0
 8009954:	b29b      	uxth	r3, r3
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009958:	e05c      	b.n	8009a14 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800995a:	f7fe f909 	bl	8007b70 <HAL_RCC_GetPCLK2Freq>
 800995e:	0002      	movs	r2, r0
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	085b      	lsrs	r3, r3, #1
 8009966:	18d2      	adds	r2, r2, r3
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	0019      	movs	r1, r3
 800996e:	0010      	movs	r0, r2
 8009970:	f7f6 fbd2 	bl	8000118 <__udivsi3>
 8009974:	0003      	movs	r3, r0
 8009976:	b29b      	uxth	r3, r3
 8009978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800997a:	e04b      	b.n	8009a14 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800997c:	4b38      	ldr	r3, [pc, #224]	; (8009a60 <UART_SetConfig+0x64c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2210      	movs	r2, #16
 8009982:	4013      	ands	r3, r2
 8009984:	d00e      	beq.n	80099a4 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	4a39      	ldr	r2, [pc, #228]	; (8009a74 <UART_SetConfig+0x660>)
 800998e:	189a      	adds	r2, r3, r2
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	0019      	movs	r1, r3
 8009996:	0010      	movs	r0, r2
 8009998:	f7f6 fbbe 	bl	8000118 <__udivsi3>
 800999c:	0003      	movs	r3, r0
 800999e:	b29b      	uxth	r3, r3
 80099a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80099a2:	e037      	b.n	8009a14 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	085b      	lsrs	r3, r3, #1
 80099aa:	4a33      	ldr	r2, [pc, #204]	; (8009a78 <UART_SetConfig+0x664>)
 80099ac:	189a      	adds	r2, r3, r2
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	0019      	movs	r1, r3
 80099b4:	0010      	movs	r0, r2
 80099b6:	f7f6 fbaf 	bl	8000118 <__udivsi3>
 80099ba:	0003      	movs	r3, r0
 80099bc:	b29b      	uxth	r3, r3
 80099be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099c0:	e028      	b.n	8009a14 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80099c2:	f7fe f831 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 80099c6:	0002      	movs	r2, r0
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	085b      	lsrs	r3, r3, #1
 80099ce:	18d2      	adds	r2, r2, r3
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	0019      	movs	r1, r3
 80099d6:	0010      	movs	r0, r2
 80099d8:	f7f6 fb9e 	bl	8000118 <__udivsi3>
 80099dc:	0003      	movs	r3, r0
 80099de:	b29b      	uxth	r3, r3
 80099e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099e2:	e017      	b.n	8009a14 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	085b      	lsrs	r3, r3, #1
 80099ea:	2280      	movs	r2, #128	; 0x80
 80099ec:	0212      	lsls	r2, r2, #8
 80099ee:	189a      	adds	r2, r3, r2
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	0019      	movs	r1, r3
 80099f6:	0010      	movs	r0, r2
 80099f8:	f7f6 fb8e 	bl	8000118 <__udivsi3>
 80099fc:	0003      	movs	r3, r0
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a02:	e007      	b.n	8009a14 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009a04:	2313      	movs	r3, #19
 8009a06:	2218      	movs	r2, #24
 8009a08:	4694      	mov	ip, r2
 8009a0a:	44bc      	add	ip, r7
 8009a0c:	4463      	add	r3, ip
 8009a0e:	2201      	movs	r2, #1
 8009a10:	701a      	strb	r2, [r3, #0]
        break;
 8009a12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	d908      	bls.n	8009a2c <UART_SetConfig+0x618>
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	4a13      	ldr	r2, [pc, #76]	; (8009a6c <UART_SetConfig+0x658>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d804      	bhi.n	8009a2c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a28:	60da      	str	r2, [r3, #12]
 8009a2a:	e006      	b.n	8009a3a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8009a2c:	2313      	movs	r3, #19
 8009a2e:	2218      	movs	r2, #24
 8009a30:	4694      	mov	ip, r2
 8009a32:	44bc      	add	ip, r7
 8009a34:	4463      	add	r3, ip
 8009a36:	2201      	movs	r2, #1
 8009a38:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	2200      	movs	r2, #0
 8009a44:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009a46:	2313      	movs	r3, #19
 8009a48:	2218      	movs	r2, #24
 8009a4a:	4694      	mov	ip, r2
 8009a4c:	44bc      	add	ip, r7
 8009a4e:	4463      	add	r3, ip
 8009a50:	781b      	ldrb	r3, [r3, #0]
}
 8009a52:	0018      	movs	r0, r3
 8009a54:	46bd      	mov	sp, r7
 8009a56:	b00e      	add	sp, #56	; 0x38
 8009a58:	bdb0      	pop	{r4, r5, r7, pc}
 8009a5a:	46c0      	nop			; (mov r8, r8)
 8009a5c:	0800c254 	.word	0x0800c254
 8009a60:	40021000 	.word	0x40021000
 8009a64:	007a1200 	.word	0x007a1200
 8009a68:	01e84800 	.word	0x01e84800
 8009a6c:	0000ffff 	.word	0x0000ffff
 8009a70:	0800c278 	.word	0x0800c278
 8009a74:	003d0900 	.word	0x003d0900
 8009a78:	00f42400 	.word	0x00f42400

08009a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2201      	movs	r2, #1
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	d00b      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	4a4a      	ldr	r2, [pc, #296]	; (8009bc0 <UART_AdvFeatureConfig+0x144>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	0019      	movs	r1, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	2202      	movs	r2, #2
 8009aac:	4013      	ands	r3, r2
 8009aae:	d00b      	beq.n	8009ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4a43      	ldr	r2, [pc, #268]	; (8009bc4 <UART_AdvFeatureConfig+0x148>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	0019      	movs	r1, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2204      	movs	r2, #4
 8009ace:	4013      	ands	r3, r2
 8009ad0:	d00b      	beq.n	8009aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	4a3b      	ldr	r2, [pc, #236]	; (8009bc8 <UART_AdvFeatureConfig+0x14c>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	0019      	movs	r1, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	2208      	movs	r2, #8
 8009af0:	4013      	ands	r3, r2
 8009af2:	d00b      	beq.n	8009b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	4a34      	ldr	r2, [pc, #208]	; (8009bcc <UART_AdvFeatureConfig+0x150>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	0019      	movs	r1, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b10:	2210      	movs	r2, #16
 8009b12:	4013      	ands	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	4a2c      	ldr	r2, [pc, #176]	; (8009bd0 <UART_AdvFeatureConfig+0x154>)
 8009b1e:	4013      	ands	r3, r2
 8009b20:	0019      	movs	r1, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2220      	movs	r2, #32
 8009b34:	4013      	ands	r3, r2
 8009b36:	d00b      	beq.n	8009b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	4a25      	ldr	r2, [pc, #148]	; (8009bd4 <UART_AdvFeatureConfig+0x158>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	0019      	movs	r1, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2240      	movs	r2, #64	; 0x40
 8009b56:	4013      	ands	r3, r2
 8009b58:	d01d      	beq.n	8009b96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	4a1d      	ldr	r2, [pc, #116]	; (8009bd8 <UART_AdvFeatureConfig+0x15c>)
 8009b62:	4013      	ands	r3, r2
 8009b64:	0019      	movs	r1, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b76:	2380      	movs	r3, #128	; 0x80
 8009b78:	035b      	lsls	r3, r3, #13
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d10b      	bne.n	8009b96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	4a15      	ldr	r2, [pc, #84]	; (8009bdc <UART_AdvFeatureConfig+0x160>)
 8009b86:	4013      	ands	r3, r2
 8009b88:	0019      	movs	r1, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2280      	movs	r2, #128	; 0x80
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	d00b      	beq.n	8009bb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4a0e      	ldr	r2, [pc, #56]	; (8009be0 <UART_AdvFeatureConfig+0x164>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	0019      	movs	r1, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	605a      	str	r2, [r3, #4]
  }
}
 8009bb8:	46c0      	nop			; (mov r8, r8)
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	b002      	add	sp, #8
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	fffdffff 	.word	0xfffdffff
 8009bc4:	fffeffff 	.word	0xfffeffff
 8009bc8:	fffbffff 	.word	0xfffbffff
 8009bcc:	ffff7fff 	.word	0xffff7fff
 8009bd0:	ffffefff 	.word	0xffffefff
 8009bd4:	ffffdfff 	.word	0xffffdfff
 8009bd8:	ffefffff 	.word	0xffefffff
 8009bdc:	ff9fffff 	.word	0xff9fffff
 8009be0:	fff7ffff 	.word	0xfff7ffff

08009be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009bf2:	f7fc f88f 	bl	8005d14 <HAL_GetTick>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2208      	movs	r2, #8
 8009c02:	4013      	ands	r3, r2
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d10d      	bne.n	8009c24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	2380      	movs	r3, #128	; 0x80
 8009c0c:	0399      	lsls	r1, r3, #14
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	4b16      	ldr	r3, [pc, #88]	; (8009c6c <UART_CheckIdleState+0x88>)
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	0013      	movs	r3, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	f000 f82a 	bl	8009c70 <UART_WaitOnFlagUntilTimeout>
 8009c1c:	1e03      	subs	r3, r0, #0
 8009c1e:	d001      	beq.n	8009c24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e01f      	b.n	8009c64 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d10d      	bne.n	8009c4e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	2380      	movs	r3, #128	; 0x80
 8009c36:	03d9      	lsls	r1, r3, #15
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <UART_CheckIdleState+0x88>)
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	0013      	movs	r3, r2
 8009c40:	2200      	movs	r2, #0
 8009c42:	f000 f815 	bl	8009c70 <UART_WaitOnFlagUntilTimeout>
 8009c46:	1e03      	subs	r3, r0, #0
 8009c48:	d001      	beq.n	8009c4e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e00a      	b.n	8009c64 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2270      	movs	r2, #112	; 0x70
 8009c5e:	2100      	movs	r1, #0
 8009c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	0018      	movs	r0, r3
 8009c66:	46bd      	mov	sp, r7
 8009c68:	b004      	add	sp, #16
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	01ffffff 	.word	0x01ffffff

08009c70 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	603b      	str	r3, [r7, #0]
 8009c7c:	1dfb      	adds	r3, r7, #7
 8009c7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c80:	e029      	b.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	3301      	adds	r3, #1
 8009c86:	d026      	beq.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c88:	f7fc f844 	bl	8005d14 <HAL_GetTick>
 8009c8c:	0002      	movs	r2, r0
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d302      	bcc.n	8009c9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d11b      	bne.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4915      	ldr	r1, [pc, #84]	; (8009d00 <UART_WaitOnFlagUntilTimeout+0x90>)
 8009caa:	400a      	ands	r2, r1
 8009cac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2101      	movs	r1, #1
 8009cba:	438a      	bics	r2, r1
 8009cbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2270      	movs	r2, #112	; 0x70
 8009cce:	2100      	movs	r1, #0
 8009cd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e00f      	b.n	8009cf6 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	425a      	negs	r2, r3
 8009ce6:	4153      	adcs	r3, r2
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	001a      	movs	r2, r3
 8009cec:	1dfb      	adds	r3, r7, #7
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d0c6      	beq.n	8009c82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	b004      	add	sp, #16
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	46c0      	nop			; (mov r8, r8)
 8009d00:	fffffe5f 	.word	0xfffffe5f

08009d04 <__errno>:
 8009d04:	4b01      	ldr	r3, [pc, #4]	; (8009d0c <__errno+0x8>)
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	4770      	bx	lr
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	20000018 	.word	0x20000018

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	2600      	movs	r6, #0
 8009d14:	4d0c      	ldr	r5, [pc, #48]	; (8009d48 <__libc_init_array+0x38>)
 8009d16:	4c0d      	ldr	r4, [pc, #52]	; (8009d4c <__libc_init_array+0x3c>)
 8009d18:	1b64      	subs	r4, r4, r5
 8009d1a:	10a4      	asrs	r4, r4, #2
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	2600      	movs	r6, #0
 8009d22:	f002 f9b5 	bl	800c090 <_init>
 8009d26:	4d0a      	ldr	r5, [pc, #40]	; (8009d50 <__libc_init_array+0x40>)
 8009d28:	4c0a      	ldr	r4, [pc, #40]	; (8009d54 <__libc_init_array+0x44>)
 8009d2a:	1b64      	subs	r4, r4, r5
 8009d2c:	10a4      	asrs	r4, r4, #2
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	00b3      	lsls	r3, r6, #2
 8009d36:	58eb      	ldr	r3, [r5, r3]
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	00b3      	lsls	r3, r6, #2
 8009d40:	58eb      	ldr	r3, [r5, r3]
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	0800c4a8 	.word	0x0800c4a8
 8009d4c:	0800c4a8 	.word	0x0800c4a8
 8009d50:	0800c4a8 	.word	0x0800c4a8
 8009d54:	0800c4ac 	.word	0x0800c4ac

08009d58 <__locale_ctype_ptr_l>:
 8009d58:	30ec      	adds	r0, #236	; 0xec
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	4770      	bx	lr
	...

08009d60 <__locale_ctype_ptr>:
 8009d60:	4b04      	ldr	r3, [pc, #16]	; (8009d74 <__locale_ctype_ptr+0x14>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d100      	bne.n	8009d6c <__locale_ctype_ptr+0xc>
 8009d6a:	4b03      	ldr	r3, [pc, #12]	; (8009d78 <__locale_ctype_ptr+0x18>)
 8009d6c:	33ec      	adds	r3, #236	; 0xec
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	4770      	bx	lr
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	20000018 	.word	0x20000018
 8009d78:	2000007c 	.word	0x2000007c

08009d7c <malloc>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <malloc+0x10>)
 8009d80:	0001      	movs	r1, r0
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	f000 f87c 	bl	8009e80 <_malloc_r>
 8009d88:	bd10      	pop	{r4, pc}
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	20000018 	.word	0x20000018

08009d90 <free>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <free+0x10>)
 8009d94:	0001      	movs	r1, r0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	f000 f828 	bl	8009dec <_free_r>
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	20000018 	.word	0x20000018

08009da4 <__ascii_mbtowc>:
 8009da4:	b082      	sub	sp, #8
 8009da6:	2900      	cmp	r1, #0
 8009da8:	d100      	bne.n	8009dac <__ascii_mbtowc+0x8>
 8009daa:	a901      	add	r1, sp, #4
 8009dac:	1e10      	subs	r0, r2, #0
 8009dae:	d006      	beq.n	8009dbe <__ascii_mbtowc+0x1a>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <__ascii_mbtowc+0x1e>
 8009db4:	7813      	ldrb	r3, [r2, #0]
 8009db6:	600b      	str	r3, [r1, #0]
 8009db8:	7810      	ldrb	r0, [r2, #0]
 8009dba:	1e43      	subs	r3, r0, #1
 8009dbc:	4198      	sbcs	r0, r3
 8009dbe:	b002      	add	sp, #8
 8009dc0:	4770      	bx	lr
 8009dc2:	2002      	movs	r0, #2
 8009dc4:	4240      	negs	r0, r0
 8009dc6:	e7fa      	b.n	8009dbe <__ascii_mbtowc+0x1a>

08009dc8 <memcpy>:
 8009dc8:	2300      	movs	r3, #0
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d100      	bne.n	8009dd2 <memcpy+0xa>
 8009dd0:	bd10      	pop	{r4, pc}
 8009dd2:	5ccc      	ldrb	r4, [r1, r3]
 8009dd4:	54c4      	strb	r4, [r0, r3]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	e7f8      	b.n	8009dcc <memcpy+0x4>

08009dda <memset>:
 8009dda:	0003      	movs	r3, r0
 8009ddc:	1812      	adds	r2, r2, r0
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d100      	bne.n	8009de4 <memset+0xa>
 8009de2:	4770      	bx	lr
 8009de4:	7019      	strb	r1, [r3, #0]
 8009de6:	3301      	adds	r3, #1
 8009de8:	e7f9      	b.n	8009dde <memset+0x4>
	...

08009dec <_free_r>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	0005      	movs	r5, r0
 8009df0:	2900      	cmp	r1, #0
 8009df2:	d010      	beq.n	8009e16 <_free_r+0x2a>
 8009df4:	1f0c      	subs	r4, r1, #4
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da00      	bge.n	8009dfe <_free_r+0x12>
 8009dfc:	18e4      	adds	r4, r4, r3
 8009dfe:	0028      	movs	r0, r5
 8009e00:	f000 f916 	bl	800a030 <__malloc_lock>
 8009e04:	4a1d      	ldr	r2, [pc, #116]	; (8009e7c <_free_r+0x90>)
 8009e06:	6813      	ldr	r3, [r2, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d105      	bne.n	8009e18 <_free_r+0x2c>
 8009e0c:	6063      	str	r3, [r4, #4]
 8009e0e:	6014      	str	r4, [r2, #0]
 8009e10:	0028      	movs	r0, r5
 8009e12:	f000 f90e 	bl	800a032 <__malloc_unlock>
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	d909      	bls.n	8009e30 <_free_r+0x44>
 8009e1c:	6821      	ldr	r1, [r4, #0]
 8009e1e:	1860      	adds	r0, r4, r1
 8009e20:	4283      	cmp	r3, r0
 8009e22:	d1f3      	bne.n	8009e0c <_free_r+0x20>
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	1841      	adds	r1, r0, r1
 8009e2a:	6021      	str	r1, [r4, #0]
 8009e2c:	e7ee      	b.n	8009e0c <_free_r+0x20>
 8009e2e:	0013      	movs	r3, r2
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	d001      	beq.n	8009e3a <_free_r+0x4e>
 8009e36:	42a2      	cmp	r2, r4
 8009e38:	d9f9      	bls.n	8009e2e <_free_r+0x42>
 8009e3a:	6819      	ldr	r1, [r3, #0]
 8009e3c:	1858      	adds	r0, r3, r1
 8009e3e:	42a0      	cmp	r0, r4
 8009e40:	d10b      	bne.n	8009e5a <_free_r+0x6e>
 8009e42:	6820      	ldr	r0, [r4, #0]
 8009e44:	1809      	adds	r1, r1, r0
 8009e46:	1858      	adds	r0, r3, r1
 8009e48:	6019      	str	r1, [r3, #0]
 8009e4a:	4282      	cmp	r2, r0
 8009e4c:	d1e0      	bne.n	8009e10 <_free_r+0x24>
 8009e4e:	6810      	ldr	r0, [r2, #0]
 8009e50:	6852      	ldr	r2, [r2, #4]
 8009e52:	1841      	adds	r1, r0, r1
 8009e54:	6019      	str	r1, [r3, #0]
 8009e56:	605a      	str	r2, [r3, #4]
 8009e58:	e7da      	b.n	8009e10 <_free_r+0x24>
 8009e5a:	42a0      	cmp	r0, r4
 8009e5c:	d902      	bls.n	8009e64 <_free_r+0x78>
 8009e5e:	230c      	movs	r3, #12
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	e7d5      	b.n	8009e10 <_free_r+0x24>
 8009e64:	6821      	ldr	r1, [r4, #0]
 8009e66:	1860      	adds	r0, r4, r1
 8009e68:	4282      	cmp	r2, r0
 8009e6a:	d103      	bne.n	8009e74 <_free_r+0x88>
 8009e6c:	6810      	ldr	r0, [r2, #0]
 8009e6e:	6852      	ldr	r2, [r2, #4]
 8009e70:	1841      	adds	r1, r0, r1
 8009e72:	6021      	str	r1, [r4, #0]
 8009e74:	6062      	str	r2, [r4, #4]
 8009e76:	605c      	str	r4, [r3, #4]
 8009e78:	e7ca      	b.n	8009e10 <_free_r+0x24>
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	20000214 	.word	0x20000214

08009e80 <_malloc_r>:
 8009e80:	2303      	movs	r3, #3
 8009e82:	b570      	push	{r4, r5, r6, lr}
 8009e84:	1ccd      	adds	r5, r1, #3
 8009e86:	439d      	bics	r5, r3
 8009e88:	3508      	adds	r5, #8
 8009e8a:	0006      	movs	r6, r0
 8009e8c:	2d0c      	cmp	r5, #12
 8009e8e:	d21e      	bcs.n	8009ece <_malloc_r+0x4e>
 8009e90:	250c      	movs	r5, #12
 8009e92:	42a9      	cmp	r1, r5
 8009e94:	d81d      	bhi.n	8009ed2 <_malloc_r+0x52>
 8009e96:	0030      	movs	r0, r6
 8009e98:	f000 f8ca 	bl	800a030 <__malloc_lock>
 8009e9c:	4a25      	ldr	r2, [pc, #148]	; (8009f34 <_malloc_r+0xb4>)
 8009e9e:	6814      	ldr	r4, [r2, #0]
 8009ea0:	0021      	movs	r1, r4
 8009ea2:	2900      	cmp	r1, #0
 8009ea4:	d119      	bne.n	8009eda <_malloc_r+0x5a>
 8009ea6:	4c24      	ldr	r4, [pc, #144]	; (8009f38 <_malloc_r+0xb8>)
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d103      	bne.n	8009eb6 <_malloc_r+0x36>
 8009eae:	0030      	movs	r0, r6
 8009eb0:	f000 f84e 	bl	8009f50 <_sbrk_r>
 8009eb4:	6020      	str	r0, [r4, #0]
 8009eb6:	0029      	movs	r1, r5
 8009eb8:	0030      	movs	r0, r6
 8009eba:	f000 f849 	bl	8009f50 <_sbrk_r>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d12b      	bne.n	8009f1a <_malloc_r+0x9a>
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	6033      	str	r3, [r6, #0]
 8009ec8:	f000 f8b3 	bl	800a032 <__malloc_unlock>
 8009ecc:	e003      	b.n	8009ed6 <_malloc_r+0x56>
 8009ece:	2d00      	cmp	r5, #0
 8009ed0:	dadf      	bge.n	8009e92 <_malloc_r+0x12>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	6033      	str	r3, [r6, #0]
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	bd70      	pop	{r4, r5, r6, pc}
 8009eda:	680b      	ldr	r3, [r1, #0]
 8009edc:	1b5b      	subs	r3, r3, r5
 8009ede:	d419      	bmi.n	8009f14 <_malloc_r+0x94>
 8009ee0:	2b0b      	cmp	r3, #11
 8009ee2:	d903      	bls.n	8009eec <_malloc_r+0x6c>
 8009ee4:	600b      	str	r3, [r1, #0]
 8009ee6:	18cc      	adds	r4, r1, r3
 8009ee8:	6025      	str	r5, [r4, #0]
 8009eea:	e003      	b.n	8009ef4 <_malloc_r+0x74>
 8009eec:	684b      	ldr	r3, [r1, #4]
 8009eee:	428c      	cmp	r4, r1
 8009ef0:	d10d      	bne.n	8009f0e <_malloc_r+0x8e>
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	0030      	movs	r0, r6
 8009ef6:	f000 f89c 	bl	800a032 <__malloc_unlock>
 8009efa:	0020      	movs	r0, r4
 8009efc:	2207      	movs	r2, #7
 8009efe:	300b      	adds	r0, #11
 8009f00:	1d23      	adds	r3, r4, #4
 8009f02:	4390      	bics	r0, r2
 8009f04:	1ac3      	subs	r3, r0, r3
 8009f06:	d0e7      	beq.n	8009ed8 <_malloc_r+0x58>
 8009f08:	425a      	negs	r2, r3
 8009f0a:	50e2      	str	r2, [r4, r3]
 8009f0c:	e7e4      	b.n	8009ed8 <_malloc_r+0x58>
 8009f0e:	6063      	str	r3, [r4, #4]
 8009f10:	000c      	movs	r4, r1
 8009f12:	e7ef      	b.n	8009ef4 <_malloc_r+0x74>
 8009f14:	000c      	movs	r4, r1
 8009f16:	6849      	ldr	r1, [r1, #4]
 8009f18:	e7c3      	b.n	8009ea2 <_malloc_r+0x22>
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	1cc4      	adds	r4, r0, #3
 8009f1e:	439c      	bics	r4, r3
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	d0e1      	beq.n	8009ee8 <_malloc_r+0x68>
 8009f24:	1a21      	subs	r1, r4, r0
 8009f26:	0030      	movs	r0, r6
 8009f28:	f000 f812 	bl	8009f50 <_sbrk_r>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d1db      	bne.n	8009ee8 <_malloc_r+0x68>
 8009f30:	e7c7      	b.n	8009ec2 <_malloc_r+0x42>
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	20000214 	.word	0x20000214
 8009f38:	20000218 	.word	0x20000218

08009f3c <realloc>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	4b03      	ldr	r3, [pc, #12]	; (8009f4c <realloc+0x10>)
 8009f40:	000a      	movs	r2, r1
 8009f42:	0001      	movs	r1, r0
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	f000 f875 	bl	800a034 <_realloc_r>
 8009f4a:	bd10      	pop	{r4, pc}
 8009f4c:	20000018 	.word	0x20000018

08009f50 <_sbrk_r>:
 8009f50:	2300      	movs	r3, #0
 8009f52:	b570      	push	{r4, r5, r6, lr}
 8009f54:	4c06      	ldr	r4, [pc, #24]	; (8009f70 <_sbrk_r+0x20>)
 8009f56:	0005      	movs	r5, r0
 8009f58:	0008      	movs	r0, r1
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	f7fa fc14 	bl	8004788 <_sbrk>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d103      	bne.n	8009f6c <_sbrk_r+0x1c>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d000      	beq.n	8009f6c <_sbrk_r+0x1c>
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	200003d4 	.word	0x200003d4

08009f74 <siprintf>:
 8009f74:	b40e      	push	{r1, r2, r3}
 8009f76:	b500      	push	{lr}
 8009f78:	490b      	ldr	r1, [pc, #44]	; (8009fa8 <siprintf+0x34>)
 8009f7a:	b09c      	sub	sp, #112	; 0x70
 8009f7c:	ab1d      	add	r3, sp, #116	; 0x74
 8009f7e:	9002      	str	r0, [sp, #8]
 8009f80:	9006      	str	r0, [sp, #24]
 8009f82:	9107      	str	r1, [sp, #28]
 8009f84:	9104      	str	r1, [sp, #16]
 8009f86:	4809      	ldr	r0, [pc, #36]	; (8009fac <siprintf+0x38>)
 8009f88:	4909      	ldr	r1, [pc, #36]	; (8009fb0 <siprintf+0x3c>)
 8009f8a:	cb04      	ldmia	r3!, {r2}
 8009f8c:	9105      	str	r1, [sp, #20]
 8009f8e:	6800      	ldr	r0, [r0, #0]
 8009f90:	a902      	add	r1, sp, #8
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	f000 f8d6 	bl	800a144 <_svfiprintf_r>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9a02      	ldr	r2, [sp, #8]
 8009f9c:	7013      	strb	r3, [r2, #0]
 8009f9e:	b01c      	add	sp, #112	; 0x70
 8009fa0:	bc08      	pop	{r3}
 8009fa2:	b003      	add	sp, #12
 8009fa4:	4718      	bx	r3
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	7fffffff 	.word	0x7fffffff
 8009fac:	20000018 	.word	0x20000018
 8009fb0:	ffff0208 	.word	0xffff0208

08009fb4 <siscanf>:
 8009fb4:	b40e      	push	{r1, r2, r3}
 8009fb6:	2381      	movs	r3, #129	; 0x81
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	b09d      	sub	sp, #116	; 0x74
 8009fbc:	ac02      	add	r4, sp, #8
 8009fbe:	ad21      	add	r5, sp, #132	; 0x84
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	cd40      	ldmia	r5!, {r6}
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	9002      	str	r0, [sp, #8]
 8009fc8:	9006      	str	r0, [sp, #24]
 8009fca:	f7f6 f89d 	bl	8000108 <strlen>
 8009fce:	4b0b      	ldr	r3, [pc, #44]	; (8009ffc <siscanf+0x48>)
 8009fd0:	6060      	str	r0, [r4, #4]
 8009fd2:	6263      	str	r3, [r4, #36]	; 0x24
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	6160      	str	r0, [r4, #20]
 8009fd8:	4809      	ldr	r0, [pc, #36]	; (800a000 <siscanf+0x4c>)
 8009fda:	6363      	str	r3, [r4, #52]	; 0x34
 8009fdc:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	81e3      	strh	r3, [r4, #14]
 8009fe2:	0032      	movs	r2, r6
 8009fe4:	002b      	movs	r3, r5
 8009fe6:	0021      	movs	r1, r4
 8009fe8:	6800      	ldr	r0, [r0, #0]
 8009fea:	9501      	str	r5, [sp, #4]
 8009fec:	f000 fa04 	bl	800a3f8 <__ssvfiscanf_r>
 8009ff0:	b01d      	add	sp, #116	; 0x74
 8009ff2:	bc70      	pop	{r4, r5, r6}
 8009ff4:	bc08      	pop	{r3}
 8009ff6:	b003      	add	sp, #12
 8009ff8:	4718      	bx	r3
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	0800a005 	.word	0x0800a005
 800a000:	20000018 	.word	0x20000018

0800a004 <__seofread>:
 800a004:	2000      	movs	r0, #0
 800a006:	4770      	bx	lr

0800a008 <strcpy>:
 800a008:	0003      	movs	r3, r0
 800a00a:	780a      	ldrb	r2, [r1, #0]
 800a00c:	3101      	adds	r1, #1
 800a00e:	701a      	strb	r2, [r3, #0]
 800a010:	3301      	adds	r3, #1
 800a012:	2a00      	cmp	r2, #0
 800a014:	d1f9      	bne.n	800a00a <strcpy+0x2>
 800a016:	4770      	bx	lr

0800a018 <__ascii_wctomb>:
 800a018:	1e0b      	subs	r3, r1, #0
 800a01a:	d004      	beq.n	800a026 <__ascii_wctomb+0xe>
 800a01c:	2aff      	cmp	r2, #255	; 0xff
 800a01e:	d904      	bls.n	800a02a <__ascii_wctomb+0x12>
 800a020:	238a      	movs	r3, #138	; 0x8a
 800a022:	6003      	str	r3, [r0, #0]
 800a024:	3b8b      	subs	r3, #139	; 0x8b
 800a026:	0018      	movs	r0, r3
 800a028:	4770      	bx	lr
 800a02a:	700a      	strb	r2, [r1, #0]
 800a02c:	2301      	movs	r3, #1
 800a02e:	e7fa      	b.n	800a026 <__ascii_wctomb+0xe>

0800a030 <__malloc_lock>:
 800a030:	4770      	bx	lr

0800a032 <__malloc_unlock>:
 800a032:	4770      	bx	lr

0800a034 <_realloc_r>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	0007      	movs	r7, r0
 800a038:	000d      	movs	r5, r1
 800a03a:	0016      	movs	r6, r2
 800a03c:	2900      	cmp	r1, #0
 800a03e:	d105      	bne.n	800a04c <_realloc_r+0x18>
 800a040:	0011      	movs	r1, r2
 800a042:	f7ff ff1d 	bl	8009e80 <_malloc_r>
 800a046:	0004      	movs	r4, r0
 800a048:	0020      	movs	r0, r4
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	d103      	bne.n	800a058 <_realloc_r+0x24>
 800a050:	f7ff fecc 	bl	8009dec <_free_r>
 800a054:	0034      	movs	r4, r6
 800a056:	e7f7      	b.n	800a048 <_realloc_r+0x14>
 800a058:	f000 ffcc 	bl	800aff4 <_malloc_usable_size_r>
 800a05c:	002c      	movs	r4, r5
 800a05e:	42b0      	cmp	r0, r6
 800a060:	d2f2      	bcs.n	800a048 <_realloc_r+0x14>
 800a062:	0031      	movs	r1, r6
 800a064:	0038      	movs	r0, r7
 800a066:	f7ff ff0b 	bl	8009e80 <_malloc_r>
 800a06a:	1e04      	subs	r4, r0, #0
 800a06c:	d0ec      	beq.n	800a048 <_realloc_r+0x14>
 800a06e:	0029      	movs	r1, r5
 800a070:	0032      	movs	r2, r6
 800a072:	f7ff fea9 	bl	8009dc8 <memcpy>
 800a076:	0029      	movs	r1, r5
 800a078:	0038      	movs	r0, r7
 800a07a:	f7ff feb7 	bl	8009dec <_free_r>
 800a07e:	e7e3      	b.n	800a048 <_realloc_r+0x14>

0800a080 <__ssputs_r>:
 800a080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a082:	688e      	ldr	r6, [r1, #8]
 800a084:	b085      	sub	sp, #20
 800a086:	0007      	movs	r7, r0
 800a088:	000c      	movs	r4, r1
 800a08a:	9203      	str	r2, [sp, #12]
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	429e      	cmp	r6, r3
 800a090:	d83c      	bhi.n	800a10c <__ssputs_r+0x8c>
 800a092:	2390      	movs	r3, #144	; 0x90
 800a094:	898a      	ldrh	r2, [r1, #12]
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	421a      	tst	r2, r3
 800a09a:	d034      	beq.n	800a106 <__ssputs_r+0x86>
 800a09c:	2503      	movs	r5, #3
 800a09e:	6909      	ldr	r1, [r1, #16]
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	1a5b      	subs	r3, r3, r1
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	6963      	ldr	r3, [r4, #20]
 800a0a8:	9802      	ldr	r0, [sp, #8]
 800a0aa:	435d      	muls	r5, r3
 800a0ac:	0feb      	lsrs	r3, r5, #31
 800a0ae:	195d      	adds	r5, r3, r5
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	106d      	asrs	r5, r5, #1
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	181b      	adds	r3, r3, r0
 800a0b8:	42ab      	cmp	r3, r5
 800a0ba:	d900      	bls.n	800a0be <__ssputs_r+0x3e>
 800a0bc:	001d      	movs	r5, r3
 800a0be:	0553      	lsls	r3, r2, #21
 800a0c0:	d532      	bpl.n	800a128 <__ssputs_r+0xa8>
 800a0c2:	0029      	movs	r1, r5
 800a0c4:	0038      	movs	r0, r7
 800a0c6:	f7ff fedb 	bl	8009e80 <_malloc_r>
 800a0ca:	1e06      	subs	r6, r0, #0
 800a0cc:	d109      	bne.n	800a0e2 <__ssputs_r+0x62>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	603b      	str	r3, [r7, #0]
 800a0d2:	2340      	movs	r3, #64	; 0x40
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	89a2      	ldrh	r2, [r4, #12]
 800a0d8:	4240      	negs	r0, r0
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	b005      	add	sp, #20
 800a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e2:	9a02      	ldr	r2, [sp, #8]
 800a0e4:	6921      	ldr	r1, [r4, #16]
 800a0e6:	f7ff fe6f 	bl	8009dc8 <memcpy>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	4a14      	ldr	r2, [pc, #80]	; (800a140 <__ssputs_r+0xc0>)
 800a0ee:	401a      	ands	r2, r3
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	9b02      	ldr	r3, [sp, #8]
 800a0f8:	6126      	str	r6, [r4, #16]
 800a0fa:	18f6      	adds	r6, r6, r3
 800a0fc:	6026      	str	r6, [r4, #0]
 800a0fe:	6165      	str	r5, [r4, #20]
 800a100:	9e01      	ldr	r6, [sp, #4]
 800a102:	1aed      	subs	r5, r5, r3
 800a104:	60a5      	str	r5, [r4, #8]
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	429e      	cmp	r6, r3
 800a10a:	d900      	bls.n	800a10e <__ssputs_r+0x8e>
 800a10c:	9e01      	ldr	r6, [sp, #4]
 800a10e:	0032      	movs	r2, r6
 800a110:	9903      	ldr	r1, [sp, #12]
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	f000 ff5b 	bl	800afce <memmove>
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	2000      	movs	r0, #0
 800a11c:	1b9b      	subs	r3, r3, r6
 800a11e:	60a3      	str	r3, [r4, #8]
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	199e      	adds	r6, r3, r6
 800a124:	6026      	str	r6, [r4, #0]
 800a126:	e7da      	b.n	800a0de <__ssputs_r+0x5e>
 800a128:	002a      	movs	r2, r5
 800a12a:	0038      	movs	r0, r7
 800a12c:	f7ff ff82 	bl	800a034 <_realloc_r>
 800a130:	1e06      	subs	r6, r0, #0
 800a132:	d1e0      	bne.n	800a0f6 <__ssputs_r+0x76>
 800a134:	6921      	ldr	r1, [r4, #16]
 800a136:	0038      	movs	r0, r7
 800a138:	f7ff fe58 	bl	8009dec <_free_r>
 800a13c:	e7c7      	b.n	800a0ce <__ssputs_r+0x4e>
 800a13e:	46c0      	nop			; (mov r8, r8)
 800a140:	fffffb7f 	.word	0xfffffb7f

0800a144 <_svfiprintf_r>:
 800a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a146:	b0a1      	sub	sp, #132	; 0x84
 800a148:	9003      	str	r0, [sp, #12]
 800a14a:	001d      	movs	r5, r3
 800a14c:	898b      	ldrh	r3, [r1, #12]
 800a14e:	000f      	movs	r7, r1
 800a150:	0016      	movs	r6, r2
 800a152:	061b      	lsls	r3, r3, #24
 800a154:	d511      	bpl.n	800a17a <_svfiprintf_r+0x36>
 800a156:	690b      	ldr	r3, [r1, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10e      	bne.n	800a17a <_svfiprintf_r+0x36>
 800a15c:	2140      	movs	r1, #64	; 0x40
 800a15e:	f7ff fe8f 	bl	8009e80 <_malloc_r>
 800a162:	6038      	str	r0, [r7, #0]
 800a164:	6138      	str	r0, [r7, #16]
 800a166:	2800      	cmp	r0, #0
 800a168:	d105      	bne.n	800a176 <_svfiprintf_r+0x32>
 800a16a:	230c      	movs	r3, #12
 800a16c:	9a03      	ldr	r2, [sp, #12]
 800a16e:	3801      	subs	r0, #1
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	b021      	add	sp, #132	; 0x84
 800a174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a176:	2340      	movs	r3, #64	; 0x40
 800a178:	617b      	str	r3, [r7, #20]
 800a17a:	2300      	movs	r3, #0
 800a17c:	ac08      	add	r4, sp, #32
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	3320      	adds	r3, #32
 800a182:	7663      	strb	r3, [r4, #25]
 800a184:	3310      	adds	r3, #16
 800a186:	76a3      	strb	r3, [r4, #26]
 800a188:	9507      	str	r5, [sp, #28]
 800a18a:	0035      	movs	r5, r6
 800a18c:	782b      	ldrb	r3, [r5, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <_svfiprintf_r+0x52>
 800a192:	2b25      	cmp	r3, #37	; 0x25
 800a194:	d146      	bne.n	800a224 <_svfiprintf_r+0xe0>
 800a196:	1bab      	subs	r3, r5, r6
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	d00c      	beq.n	800a1b6 <_svfiprintf_r+0x72>
 800a19c:	0032      	movs	r2, r6
 800a19e:	0039      	movs	r1, r7
 800a1a0:	9803      	ldr	r0, [sp, #12]
 800a1a2:	f7ff ff6d 	bl	800a080 <__ssputs_r>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d100      	bne.n	800a1ac <_svfiprintf_r+0x68>
 800a1aa:	e0ae      	b.n	800a30a <_svfiprintf_r+0x1c6>
 800a1ac:	6962      	ldr	r2, [r4, #20]
 800a1ae:	9b05      	ldr	r3, [sp, #20]
 800a1b0:	4694      	mov	ip, r2
 800a1b2:	4463      	add	r3, ip
 800a1b4:	6163      	str	r3, [r4, #20]
 800a1b6:	782b      	ldrb	r3, [r5, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d100      	bne.n	800a1be <_svfiprintf_r+0x7a>
 800a1bc:	e0a5      	b.n	800a30a <_svfiprintf_r+0x1c6>
 800a1be:	2201      	movs	r2, #1
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4252      	negs	r2, r2
 800a1c4:	6062      	str	r2, [r4, #4]
 800a1c6:	a904      	add	r1, sp, #16
 800a1c8:	3254      	adds	r2, #84	; 0x54
 800a1ca:	1852      	adds	r2, r2, r1
 800a1cc:	1c6e      	adds	r6, r5, #1
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	60e3      	str	r3, [r4, #12]
 800a1d2:	60a3      	str	r3, [r4, #8]
 800a1d4:	7013      	strb	r3, [r2, #0]
 800a1d6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1d8:	7831      	ldrb	r1, [r6, #0]
 800a1da:	2205      	movs	r2, #5
 800a1dc:	4853      	ldr	r0, [pc, #332]	; (800a32c <_svfiprintf_r+0x1e8>)
 800a1de:	f000 feeb 	bl	800afb8 <memchr>
 800a1e2:	1c75      	adds	r5, r6, #1
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d11f      	bne.n	800a228 <_svfiprintf_r+0xe4>
 800a1e8:	6822      	ldr	r2, [r4, #0]
 800a1ea:	06d3      	lsls	r3, r2, #27
 800a1ec:	d504      	bpl.n	800a1f8 <_svfiprintf_r+0xb4>
 800a1ee:	2353      	movs	r3, #83	; 0x53
 800a1f0:	a904      	add	r1, sp, #16
 800a1f2:	185b      	adds	r3, r3, r1
 800a1f4:	2120      	movs	r1, #32
 800a1f6:	7019      	strb	r1, [r3, #0]
 800a1f8:	0713      	lsls	r3, r2, #28
 800a1fa:	d504      	bpl.n	800a206 <_svfiprintf_r+0xc2>
 800a1fc:	2353      	movs	r3, #83	; 0x53
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	185b      	adds	r3, r3, r1
 800a202:	212b      	movs	r1, #43	; 0x2b
 800a204:	7019      	strb	r1, [r3, #0]
 800a206:	7833      	ldrb	r3, [r6, #0]
 800a208:	2b2a      	cmp	r3, #42	; 0x2a
 800a20a:	d016      	beq.n	800a23a <_svfiprintf_r+0xf6>
 800a20c:	0035      	movs	r5, r6
 800a20e:	2100      	movs	r1, #0
 800a210:	200a      	movs	r0, #10
 800a212:	68e3      	ldr	r3, [r4, #12]
 800a214:	782a      	ldrb	r2, [r5, #0]
 800a216:	1c6e      	adds	r6, r5, #1
 800a218:	3a30      	subs	r2, #48	; 0x30
 800a21a:	2a09      	cmp	r2, #9
 800a21c:	d94e      	bls.n	800a2bc <_svfiprintf_r+0x178>
 800a21e:	2900      	cmp	r1, #0
 800a220:	d018      	beq.n	800a254 <_svfiprintf_r+0x110>
 800a222:	e010      	b.n	800a246 <_svfiprintf_r+0x102>
 800a224:	3501      	adds	r5, #1
 800a226:	e7b1      	b.n	800a18c <_svfiprintf_r+0x48>
 800a228:	4b40      	ldr	r3, [pc, #256]	; (800a32c <_svfiprintf_r+0x1e8>)
 800a22a:	6822      	ldr	r2, [r4, #0]
 800a22c:	1ac0      	subs	r0, r0, r3
 800a22e:	2301      	movs	r3, #1
 800a230:	4083      	lsls	r3, r0
 800a232:	4313      	orrs	r3, r2
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	002e      	movs	r6, r5
 800a238:	e7ce      	b.n	800a1d8 <_svfiprintf_r+0x94>
 800a23a:	9b07      	ldr	r3, [sp, #28]
 800a23c:	1d19      	adds	r1, r3, #4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	9107      	str	r1, [sp, #28]
 800a242:	2b00      	cmp	r3, #0
 800a244:	db01      	blt.n	800a24a <_svfiprintf_r+0x106>
 800a246:	930b      	str	r3, [sp, #44]	; 0x2c
 800a248:	e004      	b.n	800a254 <_svfiprintf_r+0x110>
 800a24a:	425b      	negs	r3, r3
 800a24c:	60e3      	str	r3, [r4, #12]
 800a24e:	2302      	movs	r3, #2
 800a250:	4313      	orrs	r3, r2
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	782b      	ldrb	r3, [r5, #0]
 800a256:	2b2e      	cmp	r3, #46	; 0x2e
 800a258:	d10a      	bne.n	800a270 <_svfiprintf_r+0x12c>
 800a25a:	786b      	ldrb	r3, [r5, #1]
 800a25c:	2b2a      	cmp	r3, #42	; 0x2a
 800a25e:	d135      	bne.n	800a2cc <_svfiprintf_r+0x188>
 800a260:	9b07      	ldr	r3, [sp, #28]
 800a262:	3502      	adds	r5, #2
 800a264:	1d1a      	adds	r2, r3, #4
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	9207      	str	r2, [sp, #28]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	db2b      	blt.n	800a2c6 <_svfiprintf_r+0x182>
 800a26e:	9309      	str	r3, [sp, #36]	; 0x24
 800a270:	4e2f      	ldr	r6, [pc, #188]	; (800a330 <_svfiprintf_r+0x1ec>)
 800a272:	7829      	ldrb	r1, [r5, #0]
 800a274:	2203      	movs	r2, #3
 800a276:	0030      	movs	r0, r6
 800a278:	f000 fe9e 	bl	800afb8 <memchr>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d006      	beq.n	800a28e <_svfiprintf_r+0x14a>
 800a280:	2340      	movs	r3, #64	; 0x40
 800a282:	1b80      	subs	r0, r0, r6
 800a284:	4083      	lsls	r3, r0
 800a286:	6822      	ldr	r2, [r4, #0]
 800a288:	3501      	adds	r5, #1
 800a28a:	4313      	orrs	r3, r2
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	7829      	ldrb	r1, [r5, #0]
 800a290:	2206      	movs	r2, #6
 800a292:	4828      	ldr	r0, [pc, #160]	; (800a334 <_svfiprintf_r+0x1f0>)
 800a294:	1c6e      	adds	r6, r5, #1
 800a296:	7621      	strb	r1, [r4, #24]
 800a298:	f000 fe8e 	bl	800afb8 <memchr>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d03c      	beq.n	800a31a <_svfiprintf_r+0x1d6>
 800a2a0:	4b25      	ldr	r3, [pc, #148]	; (800a338 <_svfiprintf_r+0x1f4>)
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d125      	bne.n	800a2f2 <_svfiprintf_r+0x1ae>
 800a2a6:	2207      	movs	r2, #7
 800a2a8:	9b07      	ldr	r3, [sp, #28]
 800a2aa:	3307      	adds	r3, #7
 800a2ac:	4393      	bics	r3, r2
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	9307      	str	r3, [sp, #28]
 800a2b2:	6963      	ldr	r3, [r4, #20]
 800a2b4:	9a04      	ldr	r2, [sp, #16]
 800a2b6:	189b      	adds	r3, r3, r2
 800a2b8:	6163      	str	r3, [r4, #20]
 800a2ba:	e766      	b.n	800a18a <_svfiprintf_r+0x46>
 800a2bc:	4343      	muls	r3, r0
 800a2be:	2101      	movs	r1, #1
 800a2c0:	189b      	adds	r3, r3, r2
 800a2c2:	0035      	movs	r5, r6
 800a2c4:	e7a6      	b.n	800a214 <_svfiprintf_r+0xd0>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	425b      	negs	r3, r3
 800a2ca:	e7d0      	b.n	800a26e <_svfiprintf_r+0x12a>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	200a      	movs	r0, #10
 800a2d0:	001a      	movs	r2, r3
 800a2d2:	3501      	adds	r5, #1
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	7829      	ldrb	r1, [r5, #0]
 800a2d8:	1c6e      	adds	r6, r5, #1
 800a2da:	3930      	subs	r1, #48	; 0x30
 800a2dc:	2909      	cmp	r1, #9
 800a2de:	d903      	bls.n	800a2e8 <_svfiprintf_r+0x1a4>
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0c5      	beq.n	800a270 <_svfiprintf_r+0x12c>
 800a2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e6:	e7c3      	b.n	800a270 <_svfiprintf_r+0x12c>
 800a2e8:	4342      	muls	r2, r0
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	1852      	adds	r2, r2, r1
 800a2ee:	0035      	movs	r5, r6
 800a2f0:	e7f1      	b.n	800a2d6 <_svfiprintf_r+0x192>
 800a2f2:	ab07      	add	r3, sp, #28
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	003a      	movs	r2, r7
 800a2f8:	4b10      	ldr	r3, [pc, #64]	; (800a33c <_svfiprintf_r+0x1f8>)
 800a2fa:	0021      	movs	r1, r4
 800a2fc:	9803      	ldr	r0, [sp, #12]
 800a2fe:	e000      	b.n	800a302 <_svfiprintf_r+0x1be>
 800a300:	bf00      	nop
 800a302:	9004      	str	r0, [sp, #16]
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	3301      	adds	r3, #1
 800a308:	d1d3      	bne.n	800a2b2 <_svfiprintf_r+0x16e>
 800a30a:	89bb      	ldrh	r3, [r7, #12]
 800a30c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a30e:	065b      	lsls	r3, r3, #25
 800a310:	d400      	bmi.n	800a314 <_svfiprintf_r+0x1d0>
 800a312:	e72e      	b.n	800a172 <_svfiprintf_r+0x2e>
 800a314:	2001      	movs	r0, #1
 800a316:	4240      	negs	r0, r0
 800a318:	e72b      	b.n	800a172 <_svfiprintf_r+0x2e>
 800a31a:	ab07      	add	r3, sp, #28
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	003a      	movs	r2, r7
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <_svfiprintf_r+0x1f8>)
 800a322:	0021      	movs	r1, r4
 800a324:	9803      	ldr	r0, [sp, #12]
 800a326:	f000 fa43 	bl	800a7b0 <_printf_i>
 800a32a:	e7ea      	b.n	800a302 <_svfiprintf_r+0x1be>
 800a32c:	0800c3a7 	.word	0x0800c3a7
 800a330:	0800c3ad 	.word	0x0800c3ad
 800a334:	0800c3b1 	.word	0x0800c3b1
 800a338:	00000000 	.word	0x00000000
 800a33c:	0800a081 	.word	0x0800a081

0800a340 <_sungetc_r>:
 800a340:	b570      	push	{r4, r5, r6, lr}
 800a342:	0014      	movs	r4, r2
 800a344:	1c4b      	adds	r3, r1, #1
 800a346:	d103      	bne.n	800a350 <_sungetc_r+0x10>
 800a348:	2501      	movs	r5, #1
 800a34a:	426d      	negs	r5, r5
 800a34c:	0028      	movs	r0, r5
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	8993      	ldrh	r3, [r2, #12]
 800a352:	2220      	movs	r2, #32
 800a354:	4393      	bics	r3, r2
 800a356:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	b2ce      	uxtb	r6, r1
 800a35c:	b2cd      	uxtb	r5, r1
 800a35e:	6863      	ldr	r3, [r4, #4]
 800a360:	2a00      	cmp	r2, #0
 800a362:	d010      	beq.n	800a386 <_sungetc_r+0x46>
 800a364:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a366:	429a      	cmp	r2, r3
 800a368:	dd07      	ble.n	800a37a <_sungetc_r+0x3a>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	701e      	strb	r6, [r3, #0]
 800a372:	6863      	ldr	r3, [r4, #4]
 800a374:	3301      	adds	r3, #1
 800a376:	6063      	str	r3, [r4, #4]
 800a378:	e7e8      	b.n	800a34c <_sungetc_r+0xc>
 800a37a:	0021      	movs	r1, r4
 800a37c:	f000 fdde 	bl	800af3c <__submore>
 800a380:	2800      	cmp	r0, #0
 800a382:	d0f2      	beq.n	800a36a <_sungetc_r+0x2a>
 800a384:	e7e0      	b.n	800a348 <_sungetc_r+0x8>
 800a386:	6921      	ldr	r1, [r4, #16]
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d007      	beq.n	800a39e <_sungetc_r+0x5e>
 800a38e:	4291      	cmp	r1, r2
 800a390:	d205      	bcs.n	800a39e <_sungetc_r+0x5e>
 800a392:	1e51      	subs	r1, r2, #1
 800a394:	7808      	ldrb	r0, [r1, #0]
 800a396:	42a8      	cmp	r0, r5
 800a398:	d101      	bne.n	800a39e <_sungetc_r+0x5e>
 800a39a:	6021      	str	r1, [r4, #0]
 800a39c:	e7ea      	b.n	800a374 <_sungetc_r+0x34>
 800a39e:	6423      	str	r3, [r4, #64]	; 0x40
 800a3a0:	0023      	movs	r3, r4
 800a3a2:	3344      	adds	r3, #68	; 0x44
 800a3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3aa:	0023      	movs	r3, r4
 800a3ac:	3346      	adds	r3, #70	; 0x46
 800a3ae:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a3b0:	701e      	strb	r6, [r3, #0]
 800a3b2:	6023      	str	r3, [r4, #0]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e7de      	b.n	800a376 <_sungetc_r+0x36>

0800a3b8 <__ssrefill_r>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	000c      	movs	r4, r1
 800a3bc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	d00e      	beq.n	800a3e0 <__ssrefill_r+0x28>
 800a3c2:	0023      	movs	r3, r4
 800a3c4:	3344      	adds	r3, #68	; 0x44
 800a3c6:	4299      	cmp	r1, r3
 800a3c8:	d001      	beq.n	800a3ce <__ssrefill_r+0x16>
 800a3ca:	f7ff fd0f 	bl	8009dec <_free_r>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3d2:	6360      	str	r0, [r4, #52]	; 0x34
 800a3d4:	6063      	str	r3, [r4, #4]
 800a3d6:	4283      	cmp	r3, r0
 800a3d8:	d002      	beq.n	800a3e0 <__ssrefill_r+0x28>
 800a3da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd10      	pop	{r4, pc}
 800a3e0:	6923      	ldr	r3, [r4, #16]
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	89a2      	ldrh	r2, [r4, #12]
 800a3ea:	6063      	str	r3, [r4, #4]
 800a3ec:	3320      	adds	r3, #32
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	4240      	negs	r0, r0
 800a3f4:	e7f3      	b.n	800a3de <__ssrefill_r+0x26>
	...

0800a3f8 <__ssvfiscanf_r>:
 800a3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fa:	0017      	movs	r7, r2
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4cb0      	ldr	r4, [pc, #704]	; (800a6c0 <__ssvfiscanf_r+0x2c8>)
 800a400:	25c0      	movs	r5, #192	; 0xc0
 800a402:	44a5      	add	sp, r4
 800a404:	9248      	str	r2, [sp, #288]	; 0x120
 800a406:	9249      	str	r2, [sp, #292]	; 0x124
 800a408:	aa05      	add	r2, sp, #20
 800a40a:	924a      	str	r2, [sp, #296]	; 0x128
 800a40c:	22be      	movs	r2, #190	; 0xbe
 800a40e:	000c      	movs	r4, r1
 800a410:	49ac      	ldr	r1, [pc, #688]	; (800a6c4 <__ssvfiscanf_r+0x2cc>)
 800a412:	9000      	str	r0, [sp, #0]
 800a414:	0052      	lsls	r2, r2, #1
 800a416:	a845      	add	r0, sp, #276	; 0x114
 800a418:	5081      	str	r1, [r0, r2]
 800a41a:	49ab      	ldr	r1, [pc, #684]	; (800a6c8 <__ssvfiscanf_r+0x2d0>)
 800a41c:	006d      	lsls	r5, r5, #1
 800a41e:	5141      	str	r1, [r0, r5]
 800a420:	9304      	str	r3, [sp, #16]
 800a422:	783b      	ldrb	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d100      	bne.n	800a42a <__ssvfiscanf_r+0x32>
 800a428:	e148      	b.n	800a6bc <__ssvfiscanf_r+0x2c4>
 800a42a:	f7ff fc99 	bl	8009d60 <__locale_ctype_ptr>
 800a42e:	2208      	movs	r2, #8
 800a430:	783b      	ldrb	r3, [r7, #0]
 800a432:	1c7e      	adds	r6, r7, #1
 800a434:	18c0      	adds	r0, r0, r3
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	7843      	ldrb	r3, [r0, #1]
 800a43a:	4013      	ands	r3, r2
 800a43c:	d020      	beq.n	800a480 <__ssvfiscanf_r+0x88>
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	dd14      	ble.n	800a46e <__ssvfiscanf_r+0x76>
 800a444:	f7ff fc8c 	bl	8009d60 <__locale_ctype_ptr>
 800a448:	2108      	movs	r1, #8
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	781a      	ldrb	r2, [r3, #0]
 800a44e:	1880      	adds	r0, r0, r2
 800a450:	7842      	ldrb	r2, [r0, #1]
 800a452:	420a      	tst	r2, r1
 800a454:	d101      	bne.n	800a45a <__ssvfiscanf_r+0x62>
 800a456:	0037      	movs	r7, r6
 800a458:	e7e3      	b.n	800a422 <__ssvfiscanf_r+0x2a>
 800a45a:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a45c:	3301      	adds	r3, #1
 800a45e:	9201      	str	r2, [sp, #4]
 800a460:	3201      	adds	r2, #1
 800a462:	9249      	str	r2, [sp, #292]	; 0x124
 800a464:	6862      	ldr	r2, [r4, #4]
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	3a01      	subs	r2, #1
 800a46a:	6062      	str	r2, [r4, #4]
 800a46c:	e7e7      	b.n	800a43e <__ssvfiscanf_r+0x46>
 800a46e:	ab45      	add	r3, sp, #276	; 0x114
 800a470:	595b      	ldr	r3, [r3, r5]
 800a472:	0021      	movs	r1, r4
 800a474:	9800      	ldr	r0, [sp, #0]
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	4798      	blx	r3
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d0e2      	beq.n	800a444 <__ssvfiscanf_r+0x4c>
 800a47e:	e7ea      	b.n	800a456 <__ssvfiscanf_r+0x5e>
 800a480:	9a01      	ldr	r2, [sp, #4]
 800a482:	2a25      	cmp	r2, #37	; 0x25
 800a484:	d16d      	bne.n	800a562 <__ssvfiscanf_r+0x16a>
 800a486:	9347      	str	r3, [sp, #284]	; 0x11c
 800a488:	9345      	str	r3, [sp, #276]	; 0x114
 800a48a:	787b      	ldrb	r3, [r7, #1]
 800a48c:	2b2a      	cmp	r3, #42	; 0x2a
 800a48e:	d102      	bne.n	800a496 <__ssvfiscanf_r+0x9e>
 800a490:	3b1a      	subs	r3, #26
 800a492:	9345      	str	r3, [sp, #276]	; 0x114
 800a494:	1cbe      	adds	r6, r7, #2
 800a496:	0037      	movs	r7, r6
 800a498:	220a      	movs	r2, #10
 800a49a:	7839      	ldrb	r1, [r7, #0]
 800a49c:	1c7b      	adds	r3, r7, #1
 800a49e:	9302      	str	r3, [sp, #8]
 800a4a0:	000b      	movs	r3, r1
 800a4a2:	3b30      	subs	r3, #48	; 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d924      	bls.n	800a4f2 <__ssvfiscanf_r+0xfa>
 800a4a8:	4e88      	ldr	r6, [pc, #544]	; (800a6cc <__ssvfiscanf_r+0x2d4>)
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	0030      	movs	r0, r6
 800a4ae:	f000 fd83 	bl	800afb8 <memchr>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d007      	beq.n	800a4c6 <__ssvfiscanf_r+0xce>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	1b80      	subs	r0, r0, r6
 800a4ba:	4083      	lsls	r3, r0
 800a4bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a4be:	9f02      	ldr	r7, [sp, #8]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	9203      	str	r2, [sp, #12]
 800a4c4:	9345      	str	r3, [sp, #276]	; 0x114
 800a4c6:	783b      	ldrb	r3, [r7, #0]
 800a4c8:	1c7e      	adds	r6, r7, #1
 800a4ca:	2b67      	cmp	r3, #103	; 0x67
 800a4cc:	d835      	bhi.n	800a53a <__ssvfiscanf_r+0x142>
 800a4ce:	2b65      	cmp	r3, #101	; 0x65
 800a4d0:	d300      	bcc.n	800a4d4 <__ssvfiscanf_r+0xdc>
 800a4d2:	e0b8      	b.n	800a646 <__ssvfiscanf_r+0x24e>
 800a4d4:	2b47      	cmp	r3, #71	; 0x47
 800a4d6:	d814      	bhi.n	800a502 <__ssvfiscanf_r+0x10a>
 800a4d8:	2b45      	cmp	r3, #69	; 0x45
 800a4da:	d300      	bcc.n	800a4de <__ssvfiscanf_r+0xe6>
 800a4dc:	e0b3      	b.n	800a646 <__ssvfiscanf_r+0x24e>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d100      	bne.n	800a4e4 <__ssvfiscanf_r+0xec>
 800a4e2:	e0e8      	b.n	800a6b6 <__ssvfiscanf_r+0x2be>
 800a4e4:	2b25      	cmp	r3, #37	; 0x25
 800a4e6:	d03c      	beq.n	800a562 <__ssvfiscanf_r+0x16a>
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	934b      	str	r3, [sp, #300]	; 0x12c
 800a4ec:	3307      	adds	r3, #7
 800a4ee:	9346      	str	r3, [sp, #280]	; 0x118
 800a4f0:	e066      	b.n	800a5c0 <__ssvfiscanf_r+0x1c8>
 800a4f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a4f4:	9f02      	ldr	r7, [sp, #8]
 800a4f6:	9303      	str	r3, [sp, #12]
 800a4f8:	4353      	muls	r3, r2
 800a4fa:	3b30      	subs	r3, #48	; 0x30
 800a4fc:	1859      	adds	r1, r3, r1
 800a4fe:	9147      	str	r1, [sp, #284]	; 0x11c
 800a500:	e7cb      	b.n	800a49a <__ssvfiscanf_r+0xa2>
 800a502:	2b5b      	cmp	r3, #91	; 0x5b
 800a504:	d100      	bne.n	800a508 <__ssvfiscanf_r+0x110>
 800a506:	e07a      	b.n	800a5fe <__ssvfiscanf_r+0x206>
 800a508:	d810      	bhi.n	800a52c <__ssvfiscanf_r+0x134>
 800a50a:	2b58      	cmp	r3, #88	; 0x58
 800a50c:	d1ec      	bne.n	800a4e8 <__ssvfiscanf_r+0xf0>
 800a50e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a510:	9201      	str	r2, [sp, #4]
 800a512:	2280      	movs	r2, #128	; 0x80
 800a514:	9901      	ldr	r1, [sp, #4]
 800a516:	0092      	lsls	r2, r2, #2
 800a518:	430a      	orrs	r2, r1
 800a51a:	9245      	str	r2, [sp, #276]	; 0x114
 800a51c:	2210      	movs	r2, #16
 800a51e:	9246      	str	r2, [sp, #280]	; 0x118
 800a520:	226e      	movs	r2, #110	; 0x6e
 800a522:	429a      	cmp	r2, r3
 800a524:	419b      	sbcs	r3, r3
 800a526:	425b      	negs	r3, r3
 800a528:	3303      	adds	r3, #3
 800a52a:	e048      	b.n	800a5be <__ssvfiscanf_r+0x1c6>
 800a52c:	2b63      	cmp	r3, #99	; 0x63
 800a52e:	d100      	bne.n	800a532 <__ssvfiscanf_r+0x13a>
 800a530:	e072      	b.n	800a618 <__ssvfiscanf_r+0x220>
 800a532:	2b64      	cmp	r3, #100	; 0x64
 800a534:	d1d8      	bne.n	800a4e8 <__ssvfiscanf_r+0xf0>
 800a536:	220a      	movs	r2, #10
 800a538:	e7f1      	b.n	800a51e <__ssvfiscanf_r+0x126>
 800a53a:	2b70      	cmp	r3, #112	; 0x70
 800a53c:	d035      	beq.n	800a5aa <__ssvfiscanf_r+0x1b2>
 800a53e:	d808      	bhi.n	800a552 <__ssvfiscanf_r+0x15a>
 800a540:	2b6e      	cmp	r3, #110	; 0x6e
 800a542:	d100      	bne.n	800a546 <__ssvfiscanf_r+0x14e>
 800a544:	e070      	b.n	800a628 <__ssvfiscanf_r+0x230>
 800a546:	d837      	bhi.n	800a5b8 <__ssvfiscanf_r+0x1c0>
 800a548:	2b69      	cmp	r3, #105	; 0x69
 800a54a:	d1cd      	bne.n	800a4e8 <__ssvfiscanf_r+0xf0>
 800a54c:	2300      	movs	r3, #0
 800a54e:	9346      	str	r3, [sp, #280]	; 0x118
 800a550:	e7ea      	b.n	800a528 <__ssvfiscanf_r+0x130>
 800a552:	2b75      	cmp	r3, #117	; 0x75
 800a554:	d0ef      	beq.n	800a536 <__ssvfiscanf_r+0x13e>
 800a556:	2b78      	cmp	r3, #120	; 0x78
 800a558:	d0d9      	beq.n	800a50e <__ssvfiscanf_r+0x116>
 800a55a:	2b73      	cmp	r3, #115	; 0x73
 800a55c:	d1c4      	bne.n	800a4e8 <__ssvfiscanf_r+0xf0>
 800a55e:	2302      	movs	r3, #2
 800a560:	e02d      	b.n	800a5be <__ssvfiscanf_r+0x1c6>
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	dd0f      	ble.n	800a588 <__ssvfiscanf_r+0x190>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	9901      	ldr	r1, [sp, #4]
 800a56c:	781a      	ldrb	r2, [r3, #0]
 800a56e:	428a      	cmp	r2, r1
 800a570:	d000      	beq.n	800a574 <__ssvfiscanf_r+0x17c>
 800a572:	e0a3      	b.n	800a6bc <__ssvfiscanf_r+0x2c4>
 800a574:	3301      	adds	r3, #1
 800a576:	6862      	ldr	r2, [r4, #4]
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a57c:	3a01      	subs	r2, #1
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	3301      	adds	r3, #1
 800a582:	6062      	str	r2, [r4, #4]
 800a584:	9349      	str	r3, [sp, #292]	; 0x124
 800a586:	e766      	b.n	800a456 <__ssvfiscanf_r+0x5e>
 800a588:	ab45      	add	r3, sp, #276	; 0x114
 800a58a:	595b      	ldr	r3, [r3, r5]
 800a58c:	0021      	movs	r1, r4
 800a58e:	9800      	ldr	r0, [sp, #0]
 800a590:	9302      	str	r3, [sp, #8]
 800a592:	4798      	blx	r3
 800a594:	2800      	cmp	r0, #0
 800a596:	d0e7      	beq.n	800a568 <__ssvfiscanf_r+0x170>
 800a598:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d000      	beq.n	800a5a0 <__ssvfiscanf_r+0x1a8>
 800a59e:	e086      	b.n	800a6ae <__ssvfiscanf_r+0x2b6>
 800a5a0:	3801      	subs	r0, #1
 800a5a2:	23a7      	movs	r3, #167	; 0xa7
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	449d      	add	sp, r3
 800a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a5ac:	9201      	str	r2, [sp, #4]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	9901      	ldr	r1, [sp, #4]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	9245      	str	r2, [sp, #276]	; 0x114
 800a5b6:	e7aa      	b.n	800a50e <__ssvfiscanf_r+0x116>
 800a5b8:	2308      	movs	r3, #8
 800a5ba:	9346      	str	r3, [sp, #280]	; 0x118
 800a5bc:	3b04      	subs	r3, #4
 800a5be:	934b      	str	r3, [sp, #300]	; 0x12c
 800a5c0:	6863      	ldr	r3, [r4, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	dd41      	ble.n	800a64a <__ssvfiscanf_r+0x252>
 800a5c6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	065b      	lsls	r3, r3, #25
 800a5cc:	d408      	bmi.n	800a5e0 <__ssvfiscanf_r+0x1e8>
 800a5ce:	f7ff fbc7 	bl	8009d60 <__locale_ctype_ptr>
 800a5d2:	2108      	movs	r1, #8
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	1880      	adds	r0, r0, r2
 800a5da:	7842      	ldrb	r2, [r0, #1]
 800a5dc:	420a      	tst	r2, r1
 800a5de:	d13d      	bne.n	800a65c <__ssvfiscanf_r+0x264>
 800a5e0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	dc4f      	bgt.n	800a686 <__ssvfiscanf_r+0x28e>
 800a5e6:	ab04      	add	r3, sp, #16
 800a5e8:	0022      	movs	r2, r4
 800a5ea:	a945      	add	r1, sp, #276	; 0x114
 800a5ec:	9800      	ldr	r0, [sp, #0]
 800a5ee:	f000 f9e7 	bl	800a9c0 <_scanf_chars>
 800a5f2:	2801      	cmp	r0, #1
 800a5f4:	d062      	beq.n	800a6bc <__ssvfiscanf_r+0x2c4>
 800a5f6:	2802      	cmp	r0, #2
 800a5f8:	d000      	beq.n	800a5fc <__ssvfiscanf_r+0x204>
 800a5fa:	e72c      	b.n	800a456 <__ssvfiscanf_r+0x5e>
 800a5fc:	e7cc      	b.n	800a598 <__ssvfiscanf_r+0x1a0>
 800a5fe:	0031      	movs	r1, r6
 800a600:	a805      	add	r0, sp, #20
 800a602:	f000 fb45 	bl	800ac90 <__sccl>
 800a606:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a608:	0006      	movs	r6, r0
 800a60a:	9301      	str	r3, [sp, #4]
 800a60c:	2340      	movs	r3, #64	; 0x40
 800a60e:	9a01      	ldr	r2, [sp, #4]
 800a610:	4313      	orrs	r3, r2
 800a612:	9345      	str	r3, [sp, #276]	; 0x114
 800a614:	2301      	movs	r3, #1
 800a616:	e7d2      	b.n	800a5be <__ssvfiscanf_r+0x1c6>
 800a618:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	9a01      	ldr	r2, [sp, #4]
 800a620:	4313      	orrs	r3, r2
 800a622:	9345      	str	r3, [sp, #276]	; 0x114
 800a624:	2300      	movs	r3, #0
 800a626:	e7ca      	b.n	800a5be <__ssvfiscanf_r+0x1c6>
 800a628:	9845      	ldr	r0, [sp, #276]	; 0x114
 800a62a:	06c3      	lsls	r3, r0, #27
 800a62c:	d500      	bpl.n	800a630 <__ssvfiscanf_r+0x238>
 800a62e:	e712      	b.n	800a456 <__ssvfiscanf_r+0x5e>
 800a630:	9b04      	ldr	r3, [sp, #16]
 800a632:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a634:	1d19      	adds	r1, r3, #4
 800a636:	9104      	str	r1, [sp, #16]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	07c7      	lsls	r7, r0, #31
 800a63c:	d501      	bpl.n	800a642 <__ssvfiscanf_r+0x24a>
 800a63e:	801a      	strh	r2, [r3, #0]
 800a640:	e709      	b.n	800a456 <__ssvfiscanf_r+0x5e>
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	e707      	b.n	800a456 <__ssvfiscanf_r+0x5e>
 800a646:	2305      	movs	r3, #5
 800a648:	e7b9      	b.n	800a5be <__ssvfiscanf_r+0x1c6>
 800a64a:	ab45      	add	r3, sp, #276	; 0x114
 800a64c:	595b      	ldr	r3, [r3, r5]
 800a64e:	0021      	movs	r1, r4
 800a650:	9800      	ldr	r0, [sp, #0]
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	4798      	blx	r3
 800a656:	2800      	cmp	r0, #0
 800a658:	d0b5      	beq.n	800a5c6 <__ssvfiscanf_r+0x1ce>
 800a65a:	e79d      	b.n	800a598 <__ssvfiscanf_r+0x1a0>
 800a65c:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a65e:	9201      	str	r2, [sp, #4]
 800a660:	3201      	adds	r2, #1
 800a662:	9249      	str	r2, [sp, #292]	; 0x124
 800a664:	6862      	ldr	r2, [r4, #4]
 800a666:	3a01      	subs	r2, #1
 800a668:	6062      	str	r2, [r4, #4]
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	dd02      	ble.n	800a674 <__ssvfiscanf_r+0x27c>
 800a66e:	3301      	adds	r3, #1
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	e7ac      	b.n	800a5ce <__ssvfiscanf_r+0x1d6>
 800a674:	ab45      	add	r3, sp, #276	; 0x114
 800a676:	595b      	ldr	r3, [r3, r5]
 800a678:	0021      	movs	r1, r4
 800a67a:	9800      	ldr	r0, [sp, #0]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	4798      	blx	r3
 800a680:	2800      	cmp	r0, #0
 800a682:	d0a4      	beq.n	800a5ce <__ssvfiscanf_r+0x1d6>
 800a684:	e788      	b.n	800a598 <__ssvfiscanf_r+0x1a0>
 800a686:	2b04      	cmp	r3, #4
 800a688:	dc06      	bgt.n	800a698 <__ssvfiscanf_r+0x2a0>
 800a68a:	ab04      	add	r3, sp, #16
 800a68c:	0022      	movs	r2, r4
 800a68e:	a945      	add	r1, sp, #276	; 0x114
 800a690:	9800      	ldr	r0, [sp, #0]
 800a692:	f000 f9fb 	bl	800aa8c <_scanf_i>
 800a696:	e7ac      	b.n	800a5f2 <__ssvfiscanf_r+0x1fa>
 800a698:	4b0d      	ldr	r3, [pc, #52]	; (800a6d0 <__ssvfiscanf_r+0x2d8>)
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d100      	bne.n	800a6a0 <__ssvfiscanf_r+0x2a8>
 800a69e:	e6da      	b.n	800a456 <__ssvfiscanf_r+0x5e>
 800a6a0:	ab04      	add	r3, sp, #16
 800a6a2:	0022      	movs	r2, r4
 800a6a4:	a945      	add	r1, sp, #276	; 0x114
 800a6a6:	9800      	ldr	r0, [sp, #0]
 800a6a8:	e000      	b.n	800a6ac <__ssvfiscanf_r+0x2b4>
 800a6aa:	bf00      	nop
 800a6ac:	e7a1      	b.n	800a5f2 <__ssvfiscanf_r+0x1fa>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	065b      	lsls	r3, r3, #25
 800a6b2:	d400      	bmi.n	800a6b6 <__ssvfiscanf_r+0x2be>
 800a6b4:	e775      	b.n	800a5a2 <__ssvfiscanf_r+0x1aa>
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	4240      	negs	r0, r0
 800a6ba:	e772      	b.n	800a5a2 <__ssvfiscanf_r+0x1aa>
 800a6bc:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a6be:	e770      	b.n	800a5a2 <__ssvfiscanf_r+0x1aa>
 800a6c0:	fffffd64 	.word	0xfffffd64
 800a6c4:	0800a341 	.word	0x0800a341
 800a6c8:	0800a3b9 	.word	0x0800a3b9
 800a6cc:	0800c3ad 	.word	0x0800c3ad
 800a6d0:	00000000 	.word	0x00000000

0800a6d4 <_printf_common>:
 800a6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d6:	0015      	movs	r5, r2
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	688a      	ldr	r2, [r1, #8]
 800a6dc:	690b      	ldr	r3, [r1, #16]
 800a6de:	9000      	str	r0, [sp, #0]
 800a6e0:	000c      	movs	r4, r1
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	da00      	bge.n	800a6e8 <_printf_common+0x14>
 800a6e6:	0013      	movs	r3, r2
 800a6e8:	0022      	movs	r2, r4
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	3243      	adds	r2, #67	; 0x43
 800a6ee:	7812      	ldrb	r2, [r2, #0]
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	d001      	beq.n	800a6f8 <_printf_common+0x24>
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	069b      	lsls	r3, r3, #26
 800a6fc:	d502      	bpl.n	800a704 <_printf_common+0x30>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	3302      	adds	r3, #2
 800a702:	602b      	str	r3, [r5, #0]
 800a704:	2706      	movs	r7, #6
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	401f      	ands	r7, r3
 800a70a:	d027      	beq.n	800a75c <_printf_common+0x88>
 800a70c:	0023      	movs	r3, r4
 800a70e:	3343      	adds	r3, #67	; 0x43
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	1e5a      	subs	r2, r3, #1
 800a714:	4193      	sbcs	r3, r2
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	0692      	lsls	r2, r2, #26
 800a71a:	d430      	bmi.n	800a77e <_printf_common+0xaa>
 800a71c:	0022      	movs	r2, r4
 800a71e:	9901      	ldr	r1, [sp, #4]
 800a720:	3243      	adds	r2, #67	; 0x43
 800a722:	9800      	ldr	r0, [sp, #0]
 800a724:	9e08      	ldr	r6, [sp, #32]
 800a726:	47b0      	blx	r6
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d025      	beq.n	800a778 <_printf_common+0xa4>
 800a72c:	2306      	movs	r3, #6
 800a72e:	6820      	ldr	r0, [r4, #0]
 800a730:	682a      	ldr	r2, [r5, #0]
 800a732:	68e1      	ldr	r1, [r4, #12]
 800a734:	4003      	ands	r3, r0
 800a736:	2500      	movs	r5, #0
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d103      	bne.n	800a744 <_printf_common+0x70>
 800a73c:	1a8d      	subs	r5, r1, r2
 800a73e:	43eb      	mvns	r3, r5
 800a740:	17db      	asrs	r3, r3, #31
 800a742:	401d      	ands	r5, r3
 800a744:	68a3      	ldr	r3, [r4, #8]
 800a746:	6922      	ldr	r2, [r4, #16]
 800a748:	4293      	cmp	r3, r2
 800a74a:	dd01      	ble.n	800a750 <_printf_common+0x7c>
 800a74c:	1a9b      	subs	r3, r3, r2
 800a74e:	18ed      	adds	r5, r5, r3
 800a750:	2700      	movs	r7, #0
 800a752:	42bd      	cmp	r5, r7
 800a754:	d120      	bne.n	800a798 <_printf_common+0xc4>
 800a756:	2000      	movs	r0, #0
 800a758:	e010      	b.n	800a77c <_printf_common+0xa8>
 800a75a:	3701      	adds	r7, #1
 800a75c:	68e3      	ldr	r3, [r4, #12]
 800a75e:	682a      	ldr	r2, [r5, #0]
 800a760:	1a9b      	subs	r3, r3, r2
 800a762:	42bb      	cmp	r3, r7
 800a764:	ddd2      	ble.n	800a70c <_printf_common+0x38>
 800a766:	0022      	movs	r2, r4
 800a768:	2301      	movs	r3, #1
 800a76a:	3219      	adds	r2, #25
 800a76c:	9901      	ldr	r1, [sp, #4]
 800a76e:	9800      	ldr	r0, [sp, #0]
 800a770:	9e08      	ldr	r6, [sp, #32]
 800a772:	47b0      	blx	r6
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d1f0      	bne.n	800a75a <_printf_common+0x86>
 800a778:	2001      	movs	r0, #1
 800a77a:	4240      	negs	r0, r0
 800a77c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a77e:	2030      	movs	r0, #48	; 0x30
 800a780:	18e1      	adds	r1, r4, r3
 800a782:	3143      	adds	r1, #67	; 0x43
 800a784:	7008      	strb	r0, [r1, #0]
 800a786:	0021      	movs	r1, r4
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	3145      	adds	r1, #69	; 0x45
 800a78c:	7809      	ldrb	r1, [r1, #0]
 800a78e:	18a2      	adds	r2, r4, r2
 800a790:	3243      	adds	r2, #67	; 0x43
 800a792:	3302      	adds	r3, #2
 800a794:	7011      	strb	r1, [r2, #0]
 800a796:	e7c1      	b.n	800a71c <_printf_common+0x48>
 800a798:	0022      	movs	r2, r4
 800a79a:	2301      	movs	r3, #1
 800a79c:	321a      	adds	r2, #26
 800a79e:	9901      	ldr	r1, [sp, #4]
 800a7a0:	9800      	ldr	r0, [sp, #0]
 800a7a2:	9e08      	ldr	r6, [sp, #32]
 800a7a4:	47b0      	blx	r6
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d0e6      	beq.n	800a778 <_printf_common+0xa4>
 800a7aa:	3701      	adds	r7, #1
 800a7ac:	e7d1      	b.n	800a752 <_printf_common+0x7e>
	...

0800a7b0 <_printf_i>:
 800a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b2:	b089      	sub	sp, #36	; 0x24
 800a7b4:	9204      	str	r2, [sp, #16]
 800a7b6:	000a      	movs	r2, r1
 800a7b8:	3243      	adds	r2, #67	; 0x43
 800a7ba:	9305      	str	r3, [sp, #20]
 800a7bc:	9003      	str	r0, [sp, #12]
 800a7be:	9202      	str	r2, [sp, #8]
 800a7c0:	7e0a      	ldrb	r2, [r1, #24]
 800a7c2:	000c      	movs	r4, r1
 800a7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7c6:	2a6e      	cmp	r2, #110	; 0x6e
 800a7c8:	d100      	bne.n	800a7cc <_printf_i+0x1c>
 800a7ca:	e086      	b.n	800a8da <_printf_i+0x12a>
 800a7cc:	d81f      	bhi.n	800a80e <_printf_i+0x5e>
 800a7ce:	2a63      	cmp	r2, #99	; 0x63
 800a7d0:	d033      	beq.n	800a83a <_printf_i+0x8a>
 800a7d2:	d808      	bhi.n	800a7e6 <_printf_i+0x36>
 800a7d4:	2a00      	cmp	r2, #0
 800a7d6:	d100      	bne.n	800a7da <_printf_i+0x2a>
 800a7d8:	e08c      	b.n	800a8f4 <_printf_i+0x144>
 800a7da:	2a58      	cmp	r2, #88	; 0x58
 800a7dc:	d04d      	beq.n	800a87a <_printf_i+0xca>
 800a7de:	0025      	movs	r5, r4
 800a7e0:	3542      	adds	r5, #66	; 0x42
 800a7e2:	702a      	strb	r2, [r5, #0]
 800a7e4:	e030      	b.n	800a848 <_printf_i+0x98>
 800a7e6:	2a64      	cmp	r2, #100	; 0x64
 800a7e8:	d001      	beq.n	800a7ee <_printf_i+0x3e>
 800a7ea:	2a69      	cmp	r2, #105	; 0x69
 800a7ec:	d1f7      	bne.n	800a7de <_printf_i+0x2e>
 800a7ee:	6819      	ldr	r1, [r3, #0]
 800a7f0:	6825      	ldr	r5, [r4, #0]
 800a7f2:	1d0a      	adds	r2, r1, #4
 800a7f4:	0628      	lsls	r0, r5, #24
 800a7f6:	d529      	bpl.n	800a84c <_printf_i+0x9c>
 800a7f8:	6808      	ldr	r0, [r1, #0]
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	da03      	bge.n	800a808 <_printf_i+0x58>
 800a800:	232d      	movs	r3, #45	; 0x2d
 800a802:	9a02      	ldr	r2, [sp, #8]
 800a804:	4240      	negs	r0, r0
 800a806:	7013      	strb	r3, [r2, #0]
 800a808:	4e6b      	ldr	r6, [pc, #428]	; (800a9b8 <_printf_i+0x208>)
 800a80a:	270a      	movs	r7, #10
 800a80c:	e04f      	b.n	800a8ae <_printf_i+0xfe>
 800a80e:	2a73      	cmp	r2, #115	; 0x73
 800a810:	d074      	beq.n	800a8fc <_printf_i+0x14c>
 800a812:	d808      	bhi.n	800a826 <_printf_i+0x76>
 800a814:	2a6f      	cmp	r2, #111	; 0x6f
 800a816:	d01f      	beq.n	800a858 <_printf_i+0xa8>
 800a818:	2a70      	cmp	r2, #112	; 0x70
 800a81a:	d1e0      	bne.n	800a7de <_printf_i+0x2e>
 800a81c:	2220      	movs	r2, #32
 800a81e:	6809      	ldr	r1, [r1, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	e003      	b.n	800a82e <_printf_i+0x7e>
 800a826:	2a75      	cmp	r2, #117	; 0x75
 800a828:	d016      	beq.n	800a858 <_printf_i+0xa8>
 800a82a:	2a78      	cmp	r2, #120	; 0x78
 800a82c:	d1d7      	bne.n	800a7de <_printf_i+0x2e>
 800a82e:	0022      	movs	r2, r4
 800a830:	2178      	movs	r1, #120	; 0x78
 800a832:	3245      	adds	r2, #69	; 0x45
 800a834:	7011      	strb	r1, [r2, #0]
 800a836:	4e61      	ldr	r6, [pc, #388]	; (800a9bc <_printf_i+0x20c>)
 800a838:	e022      	b.n	800a880 <_printf_i+0xd0>
 800a83a:	0025      	movs	r5, r4
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	3542      	adds	r5, #66	; 0x42
 800a840:	1d11      	adds	r1, r2, #4
 800a842:	6019      	str	r1, [r3, #0]
 800a844:	6813      	ldr	r3, [r2, #0]
 800a846:	702b      	strb	r3, [r5, #0]
 800a848:	2301      	movs	r3, #1
 800a84a:	e065      	b.n	800a918 <_printf_i+0x168>
 800a84c:	6808      	ldr	r0, [r1, #0]
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	0669      	lsls	r1, r5, #25
 800a852:	d5d3      	bpl.n	800a7fc <_printf_i+0x4c>
 800a854:	b200      	sxth	r0, r0
 800a856:	e7d1      	b.n	800a7fc <_printf_i+0x4c>
 800a858:	6819      	ldr	r1, [r3, #0]
 800a85a:	6825      	ldr	r5, [r4, #0]
 800a85c:	1d08      	adds	r0, r1, #4
 800a85e:	6018      	str	r0, [r3, #0]
 800a860:	6808      	ldr	r0, [r1, #0]
 800a862:	062e      	lsls	r6, r5, #24
 800a864:	d505      	bpl.n	800a872 <_printf_i+0xc2>
 800a866:	4e54      	ldr	r6, [pc, #336]	; (800a9b8 <_printf_i+0x208>)
 800a868:	2708      	movs	r7, #8
 800a86a:	2a6f      	cmp	r2, #111	; 0x6f
 800a86c:	d01b      	beq.n	800a8a6 <_printf_i+0xf6>
 800a86e:	270a      	movs	r7, #10
 800a870:	e019      	b.n	800a8a6 <_printf_i+0xf6>
 800a872:	066d      	lsls	r5, r5, #25
 800a874:	d5f7      	bpl.n	800a866 <_printf_i+0xb6>
 800a876:	b280      	uxth	r0, r0
 800a878:	e7f5      	b.n	800a866 <_printf_i+0xb6>
 800a87a:	3145      	adds	r1, #69	; 0x45
 800a87c:	4e4e      	ldr	r6, [pc, #312]	; (800a9b8 <_printf_i+0x208>)
 800a87e:	700a      	strb	r2, [r1, #0]
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	6822      	ldr	r2, [r4, #0]
 800a884:	1d01      	adds	r1, r0, #4
 800a886:	6800      	ldr	r0, [r0, #0]
 800a888:	6019      	str	r1, [r3, #0]
 800a88a:	0615      	lsls	r5, r2, #24
 800a88c:	d521      	bpl.n	800a8d2 <_printf_i+0x122>
 800a88e:	07d3      	lsls	r3, r2, #31
 800a890:	d502      	bpl.n	800a898 <_printf_i+0xe8>
 800a892:	2320      	movs	r3, #32
 800a894:	431a      	orrs	r2, r3
 800a896:	6022      	str	r2, [r4, #0]
 800a898:	2710      	movs	r7, #16
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d103      	bne.n	800a8a6 <_printf_i+0xf6>
 800a89e:	2320      	movs	r3, #32
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	439a      	bics	r2, r3
 800a8a4:	6022      	str	r2, [r4, #0]
 800a8a6:	0023      	movs	r3, r4
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	3343      	adds	r3, #67	; 0x43
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	6863      	ldr	r3, [r4, #4]
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	db58      	blt.n	800a968 <_printf_i+0x1b8>
 800a8b6:	2204      	movs	r2, #4
 800a8b8:	6821      	ldr	r1, [r4, #0]
 800a8ba:	4391      	bics	r1, r2
 800a8bc:	6021      	str	r1, [r4, #0]
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d154      	bne.n	800a96c <_printf_i+0x1bc>
 800a8c2:	9d02      	ldr	r5, [sp, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d05a      	beq.n	800a97e <_printf_i+0x1ce>
 800a8c8:	0025      	movs	r5, r4
 800a8ca:	7833      	ldrb	r3, [r6, #0]
 800a8cc:	3542      	adds	r5, #66	; 0x42
 800a8ce:	702b      	strb	r3, [r5, #0]
 800a8d0:	e055      	b.n	800a97e <_printf_i+0x1ce>
 800a8d2:	0655      	lsls	r5, r2, #25
 800a8d4:	d5db      	bpl.n	800a88e <_printf_i+0xde>
 800a8d6:	b280      	uxth	r0, r0
 800a8d8:	e7d9      	b.n	800a88e <_printf_i+0xde>
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	680d      	ldr	r5, [r1, #0]
 800a8de:	1d10      	adds	r0, r2, #4
 800a8e0:	6949      	ldr	r1, [r1, #20]
 800a8e2:	6018      	str	r0, [r3, #0]
 800a8e4:	6813      	ldr	r3, [r2, #0]
 800a8e6:	062e      	lsls	r6, r5, #24
 800a8e8:	d501      	bpl.n	800a8ee <_printf_i+0x13e>
 800a8ea:	6019      	str	r1, [r3, #0]
 800a8ec:	e002      	b.n	800a8f4 <_printf_i+0x144>
 800a8ee:	066d      	lsls	r5, r5, #25
 800a8f0:	d5fb      	bpl.n	800a8ea <_printf_i+0x13a>
 800a8f2:	8019      	strh	r1, [r3, #0]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9d02      	ldr	r5, [sp, #8]
 800a8f8:	6123      	str	r3, [r4, #16]
 800a8fa:	e04f      	b.n	800a99c <_printf_i+0x1ec>
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	1d11      	adds	r1, r2, #4
 800a900:	6019      	str	r1, [r3, #0]
 800a902:	6815      	ldr	r5, [r2, #0]
 800a904:	2100      	movs	r1, #0
 800a906:	6862      	ldr	r2, [r4, #4]
 800a908:	0028      	movs	r0, r5
 800a90a:	f000 fb55 	bl	800afb8 <memchr>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d001      	beq.n	800a916 <_printf_i+0x166>
 800a912:	1b40      	subs	r0, r0, r5
 800a914:	6060      	str	r0, [r4, #4]
 800a916:	6863      	ldr	r3, [r4, #4]
 800a918:	6123      	str	r3, [r4, #16]
 800a91a:	2300      	movs	r3, #0
 800a91c:	9a02      	ldr	r2, [sp, #8]
 800a91e:	7013      	strb	r3, [r2, #0]
 800a920:	e03c      	b.n	800a99c <_printf_i+0x1ec>
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	002a      	movs	r2, r5
 800a926:	9904      	ldr	r1, [sp, #16]
 800a928:	9803      	ldr	r0, [sp, #12]
 800a92a:	9d05      	ldr	r5, [sp, #20]
 800a92c:	47a8      	blx	r5
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	d03e      	beq.n	800a9b0 <_printf_i+0x200>
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	079b      	lsls	r3, r3, #30
 800a936:	d415      	bmi.n	800a964 <_printf_i+0x1b4>
 800a938:	9b07      	ldr	r3, [sp, #28]
 800a93a:	68e0      	ldr	r0, [r4, #12]
 800a93c:	4298      	cmp	r0, r3
 800a93e:	da39      	bge.n	800a9b4 <_printf_i+0x204>
 800a940:	0018      	movs	r0, r3
 800a942:	e037      	b.n	800a9b4 <_printf_i+0x204>
 800a944:	0022      	movs	r2, r4
 800a946:	2301      	movs	r3, #1
 800a948:	3219      	adds	r2, #25
 800a94a:	9904      	ldr	r1, [sp, #16]
 800a94c:	9803      	ldr	r0, [sp, #12]
 800a94e:	9e05      	ldr	r6, [sp, #20]
 800a950:	47b0      	blx	r6
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d02c      	beq.n	800a9b0 <_printf_i+0x200>
 800a956:	3501      	adds	r5, #1
 800a958:	68e3      	ldr	r3, [r4, #12]
 800a95a:	9a07      	ldr	r2, [sp, #28]
 800a95c:	1a9b      	subs	r3, r3, r2
 800a95e:	42ab      	cmp	r3, r5
 800a960:	dcf0      	bgt.n	800a944 <_printf_i+0x194>
 800a962:	e7e9      	b.n	800a938 <_printf_i+0x188>
 800a964:	2500      	movs	r5, #0
 800a966:	e7f7      	b.n	800a958 <_printf_i+0x1a8>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0ad      	beq.n	800a8c8 <_printf_i+0x118>
 800a96c:	9d02      	ldr	r5, [sp, #8]
 800a96e:	0039      	movs	r1, r7
 800a970:	f7f5 fc58 	bl	8000224 <__aeabi_uidivmod>
 800a974:	5c73      	ldrb	r3, [r6, r1]
 800a976:	3d01      	subs	r5, #1
 800a978:	702b      	strb	r3, [r5, #0]
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d1f7      	bne.n	800a96e <_printf_i+0x1be>
 800a97e:	2f08      	cmp	r7, #8
 800a980:	d109      	bne.n	800a996 <_printf_i+0x1e6>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	07db      	lsls	r3, r3, #31
 800a986:	d506      	bpl.n	800a996 <_printf_i+0x1e6>
 800a988:	6863      	ldr	r3, [r4, #4]
 800a98a:	6922      	ldr	r2, [r4, #16]
 800a98c:	4293      	cmp	r3, r2
 800a98e:	dc02      	bgt.n	800a996 <_printf_i+0x1e6>
 800a990:	2330      	movs	r3, #48	; 0x30
 800a992:	3d01      	subs	r5, #1
 800a994:	702b      	strb	r3, [r5, #0]
 800a996:	9b02      	ldr	r3, [sp, #8]
 800a998:	1b5b      	subs	r3, r3, r5
 800a99a:	6123      	str	r3, [r4, #16]
 800a99c:	9b05      	ldr	r3, [sp, #20]
 800a99e:	aa07      	add	r2, sp, #28
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	0021      	movs	r1, r4
 800a9a4:	9b04      	ldr	r3, [sp, #16]
 800a9a6:	9803      	ldr	r0, [sp, #12]
 800a9a8:	f7ff fe94 	bl	800a6d4 <_printf_common>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d1b8      	bne.n	800a922 <_printf_i+0x172>
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	4240      	negs	r0, r0
 800a9b4:	b009      	add	sp, #36	; 0x24
 800a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b8:	0800c3b8 	.word	0x0800c3b8
 800a9bc:	0800c3c9 	.word	0x0800c3c9

0800a9c0 <_scanf_chars>:
 800a9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c2:	0015      	movs	r5, r2
 800a9c4:	688a      	ldr	r2, [r1, #8]
 800a9c6:	9001      	str	r0, [sp, #4]
 800a9c8:	000c      	movs	r4, r1
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	d104      	bne.n	800a9d8 <_scanf_chars+0x18>
 800a9ce:	698a      	ldr	r2, [r1, #24]
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d117      	bne.n	800aa04 <_scanf_chars+0x44>
 800a9d4:	3201      	adds	r2, #1
 800a9d6:	60a2      	str	r2, [r4, #8]
 800a9d8:	6822      	ldr	r2, [r4, #0]
 800a9da:	06d2      	lsls	r2, r2, #27
 800a9dc:	d403      	bmi.n	800a9e6 <_scanf_chars+0x26>
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	1d11      	adds	r1, r2, #4
 800a9e2:	6019      	str	r1, [r3, #0]
 800a9e4:	6817      	ldr	r7, [r2, #0]
 800a9e6:	2600      	movs	r6, #0
 800a9e8:	69a3      	ldr	r3, [r4, #24]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d01f      	beq.n	800aa2e <_scanf_chars+0x6e>
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d10b      	bne.n	800aa0a <_scanf_chars+0x4a>
 800a9f2:	682b      	ldr	r3, [r5, #0]
 800a9f4:	6962      	ldr	r2, [r4, #20]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	5cd3      	ldrb	r3, [r2, r3]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d117      	bne.n	800aa2e <_scanf_chars+0x6e>
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	d133      	bne.n	800aa6a <_scanf_chars+0xaa>
 800aa02:	e009      	b.n	800aa18 <_scanf_chars+0x58>
 800aa04:	2201      	movs	r2, #1
 800aa06:	4252      	negs	r2, r2
 800aa08:	e7e5      	b.n	800a9d6 <_scanf_chars+0x16>
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d006      	beq.n	800aa1c <_scanf_chars+0x5c>
 800aa0e:	2e00      	cmp	r6, #0
 800aa10:	d12b      	bne.n	800aa6a <_scanf_chars+0xaa>
 800aa12:	69a3      	ldr	r3, [r4, #24]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d128      	bne.n	800aa6a <_scanf_chars+0xaa>
 800aa18:	2001      	movs	r0, #1
 800aa1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa1c:	f7ff f9a0 	bl	8009d60 <__locale_ctype_ptr>
 800aa20:	2208      	movs	r2, #8
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	18c0      	adds	r0, r0, r3
 800aa28:	7843      	ldrb	r3, [r0, #1]
 800aa2a:	4213      	tst	r3, r2
 800aa2c:	d1ef      	bne.n	800aa0e <_scanf_chars+0x4e>
 800aa2e:	2210      	movs	r2, #16
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	3601      	adds	r6, #1
 800aa34:	4213      	tst	r3, r2
 800aa36:	d103      	bne.n	800aa40 <_scanf_chars+0x80>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	703b      	strb	r3, [r7, #0]
 800aa3e:	3701      	adds	r7, #1
 800aa40:	682a      	ldr	r2, [r5, #0]
 800aa42:	686b      	ldr	r3, [r5, #4]
 800aa44:	3201      	adds	r2, #1
 800aa46:	602a      	str	r2, [r5, #0]
 800aa48:	68a2      	ldr	r2, [r4, #8]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	3a01      	subs	r2, #1
 800aa4e:	606b      	str	r3, [r5, #4]
 800aa50:	60a2      	str	r2, [r4, #8]
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	d009      	beq.n	800aa6a <_scanf_chars+0xaa>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dcc6      	bgt.n	800a9e8 <_scanf_chars+0x28>
 800aa5a:	23c0      	movs	r3, #192	; 0xc0
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	58e3      	ldr	r3, [r4, r3]
 800aa60:	0029      	movs	r1, r5
 800aa62:	9801      	ldr	r0, [sp, #4]
 800aa64:	4798      	blx	r3
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d0be      	beq.n	800a9e8 <_scanf_chars+0x28>
 800aa6a:	2310      	movs	r3, #16
 800aa6c:	6822      	ldr	r2, [r4, #0]
 800aa6e:	4013      	ands	r3, r2
 800aa70:	d106      	bne.n	800aa80 <_scanf_chars+0xc0>
 800aa72:	68e2      	ldr	r2, [r4, #12]
 800aa74:	3201      	adds	r2, #1
 800aa76:	60e2      	str	r2, [r4, #12]
 800aa78:	69a2      	ldr	r2, [r4, #24]
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	d000      	beq.n	800aa80 <_scanf_chars+0xc0>
 800aa7e:	703b      	strb	r3, [r7, #0]
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	2000      	movs	r0, #0
 800aa84:	199e      	adds	r6, r3, r6
 800aa86:	6126      	str	r6, [r4, #16]
 800aa88:	e7c7      	b.n	800aa1a <_scanf_chars+0x5a>
	...

0800aa8c <_scanf_i>:
 800aa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa8e:	000c      	movs	r4, r1
 800aa90:	b08b      	sub	sp, #44	; 0x2c
 800aa92:	9302      	str	r3, [sp, #8]
 800aa94:	4b78      	ldr	r3, [pc, #480]	; (800ac78 <_scanf_i+0x1ec>)
 800aa96:	9004      	str	r0, [sp, #16]
 800aa98:	0016      	movs	r6, r2
 800aa9a:	aa07      	add	r2, sp, #28
 800aa9c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800aa9e:	c223      	stmia	r2!, {r0, r1, r5}
 800aaa0:	4b76      	ldr	r3, [pc, #472]	; (800ac7c <_scanf_i+0x1f0>)
 800aaa2:	9305      	str	r3, [sp, #20]
 800aaa4:	69a3      	ldr	r3, [r4, #24]
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d101      	bne.n	800aaae <_scanf_i+0x22>
 800aaaa:	4b75      	ldr	r3, [pc, #468]	; (800ac80 <_scanf_i+0x1f4>)
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	22ae      	movs	r2, #174	; 0xae
 800aab0:	2000      	movs	r0, #0
 800aab2:	68a3      	ldr	r3, [r4, #8]
 800aab4:	0052      	lsls	r2, r2, #1
 800aab6:	1e59      	subs	r1, r3, #1
 800aab8:	9003      	str	r0, [sp, #12]
 800aaba:	4291      	cmp	r1, r2
 800aabc:	d905      	bls.n	800aaca <_scanf_i+0x3e>
 800aabe:	3b5e      	subs	r3, #94	; 0x5e
 800aac0:	3bff      	subs	r3, #255	; 0xff
 800aac2:	9303      	str	r3, [sp, #12]
 800aac4:	235e      	movs	r3, #94	; 0x5e
 800aac6:	33ff      	adds	r3, #255	; 0xff
 800aac8:	60a3      	str	r3, [r4, #8]
 800aaca:	0023      	movs	r3, r4
 800aacc:	331c      	adds	r3, #28
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	23d0      	movs	r3, #208	; 0xd0
 800aad2:	2700      	movs	r7, #0
 800aad4:	6822      	ldr	r2, [r4, #0]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	4313      	orrs	r3, r2
 800aada:	6023      	str	r3, [r4, #0]
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	6833      	ldr	r3, [r6, #0]
 800aae2:	a807      	add	r0, sp, #28
 800aae4:	7819      	ldrb	r1, [r3, #0]
 800aae6:	00bb      	lsls	r3, r7, #2
 800aae8:	2202      	movs	r2, #2
 800aaea:	5818      	ldr	r0, [r3, r0]
 800aaec:	f000 fa64 	bl	800afb8 <memchr>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d02b      	beq.n	800ab4c <_scanf_i+0xc0>
 800aaf4:	2f01      	cmp	r7, #1
 800aaf6:	d162      	bne.n	800abbe <_scanf_i+0x132>
 800aaf8:	6863      	ldr	r3, [r4, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d106      	bne.n	800ab0c <_scanf_i+0x80>
 800aafe:	3308      	adds	r3, #8
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	6063      	str	r3, [r4, #4]
 800ab04:	33f9      	adds	r3, #249	; 0xf9
 800ab06:	33ff      	adds	r3, #255	; 0xff
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	6023      	str	r3, [r4, #0]
 800ab0c:	4b5d      	ldr	r3, [pc, #372]	; (800ac84 <_scanf_i+0x1f8>)
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	4013      	ands	r3, r2
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	68a3      	ldr	r3, [r4, #8]
 800ab16:	1e5a      	subs	r2, r3, #1
 800ab18:	60a2      	str	r2, [r4, #8]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d016      	beq.n	800ab4c <_scanf_i+0xc0>
 800ab1e:	6833      	ldr	r3, [r6, #0]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	6032      	str	r2, [r6, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	9a00      	ldr	r2, [sp, #0]
 800ab28:	7013      	strb	r3, [r2, #0]
 800ab2a:	6873      	ldr	r3, [r6, #4]
 800ab2c:	1c55      	adds	r5, r2, #1
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	6073      	str	r3, [r6, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dc09      	bgt.n	800ab4a <_scanf_i+0xbe>
 800ab36:	23c0      	movs	r3, #192	; 0xc0
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	58e3      	ldr	r3, [r4, r3]
 800ab3c:	0031      	movs	r1, r6
 800ab3e:	9804      	ldr	r0, [sp, #16]
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	4798      	blx	r3
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d000      	beq.n	800ab4a <_scanf_i+0xbe>
 800ab48:	e080      	b.n	800ac4c <_scanf_i+0x1c0>
 800ab4a:	9500      	str	r5, [sp, #0]
 800ab4c:	3701      	adds	r7, #1
 800ab4e:	2f03      	cmp	r7, #3
 800ab50:	d1c6      	bne.n	800aae0 <_scanf_i+0x54>
 800ab52:	6863      	ldr	r3, [r4, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <_scanf_i+0xd0>
 800ab58:	330a      	adds	r3, #10
 800ab5a:	6063      	str	r3, [r4, #4]
 800ab5c:	2110      	movs	r1, #16
 800ab5e:	2700      	movs	r7, #0
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	6960      	ldr	r0, [r4, #20]
 800ab64:	1ac9      	subs	r1, r1, r3
 800ab66:	4b48      	ldr	r3, [pc, #288]	; (800ac88 <_scanf_i+0x1fc>)
 800ab68:	18c9      	adds	r1, r1, r3
 800ab6a:	f000 f891 	bl	800ac90 <__sccl>
 800ab6e:	9d00      	ldr	r5, [sp, #0]
 800ab70:	68a3      	ldr	r3, [r4, #8]
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d041      	beq.n	800abfe <_scanf_i+0x172>
 800ab7a:	6831      	ldr	r1, [r6, #0]
 800ab7c:	6963      	ldr	r3, [r4, #20]
 800ab7e:	7808      	ldrb	r0, [r1, #0]
 800ab80:	5c1b      	ldrb	r3, [r3, r0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d03b      	beq.n	800abfe <_scanf_i+0x172>
 800ab86:	2830      	cmp	r0, #48	; 0x30
 800ab88:	d129      	bne.n	800abde <_scanf_i+0x152>
 800ab8a:	2380      	movs	r3, #128	; 0x80
 800ab8c:	011b      	lsls	r3, r3, #4
 800ab8e:	421a      	tst	r2, r3
 800ab90:	d025      	beq.n	800abde <_scanf_i+0x152>
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	3701      	adds	r7, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d005      	beq.n	800aba6 <_scanf_i+0x11a>
 800ab9a:	001a      	movs	r2, r3
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	3a01      	subs	r2, #1
 800aba0:	3301      	adds	r3, #1
 800aba2:	9203      	str	r2, [sp, #12]
 800aba4:	60a3      	str	r3, [r4, #8]
 800aba6:	6873      	ldr	r3, [r6, #4]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	6073      	str	r3, [r6, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	dd1d      	ble.n	800abec <_scanf_i+0x160>
 800abb0:	6833      	ldr	r3, [r6, #0]
 800abb2:	3301      	adds	r3, #1
 800abb4:	6033      	str	r3, [r6, #0]
 800abb6:	68a3      	ldr	r3, [r4, #8]
 800abb8:	3b01      	subs	r3, #1
 800abba:	60a3      	str	r3, [r4, #8]
 800abbc:	e7d8      	b.n	800ab70 <_scanf_i+0xe4>
 800abbe:	2f02      	cmp	r7, #2
 800abc0:	d1a8      	bne.n	800ab14 <_scanf_i+0x88>
 800abc2:	21c0      	movs	r1, #192	; 0xc0
 800abc4:	2380      	movs	r3, #128	; 0x80
 800abc6:	6822      	ldr	r2, [r4, #0]
 800abc8:	00c9      	lsls	r1, r1, #3
 800abca:	4011      	ands	r1, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4299      	cmp	r1, r3
 800abd0:	d1bf      	bne.n	800ab52 <_scanf_i+0xc6>
 800abd2:	3bf1      	subs	r3, #241	; 0xf1
 800abd4:	3bff      	subs	r3, #255	; 0xff
 800abd6:	6063      	str	r3, [r4, #4]
 800abd8:	33f0      	adds	r3, #240	; 0xf0
 800abda:	4313      	orrs	r3, r2
 800abdc:	e799      	b.n	800ab12 <_scanf_i+0x86>
 800abde:	4b2b      	ldr	r3, [pc, #172]	; (800ac8c <_scanf_i+0x200>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	780b      	ldrb	r3, [r1, #0]
 800abe6:	702b      	strb	r3, [r5, #0]
 800abe8:	3501      	adds	r5, #1
 800abea:	e7dc      	b.n	800aba6 <_scanf_i+0x11a>
 800abec:	23c0      	movs	r3, #192	; 0xc0
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	58e3      	ldr	r3, [r4, r3]
 800abf2:	0031      	movs	r1, r6
 800abf4:	9804      	ldr	r0, [sp, #16]
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	4798      	blx	r3
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d0db      	beq.n	800abb6 <_scanf_i+0x12a>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	05db      	lsls	r3, r3, #23
 800ac02:	d50e      	bpl.n	800ac22 <_scanf_i+0x196>
 800ac04:	9b01      	ldr	r3, [sp, #4]
 800ac06:	429d      	cmp	r5, r3
 800ac08:	d907      	bls.n	800ac1a <_scanf_i+0x18e>
 800ac0a:	23be      	movs	r3, #190	; 0xbe
 800ac0c:	3d01      	subs	r5, #1
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	7829      	ldrb	r1, [r5, #0]
 800ac12:	58e3      	ldr	r3, [r4, r3]
 800ac14:	0032      	movs	r2, r6
 800ac16:	9804      	ldr	r0, [sp, #16]
 800ac18:	4798      	blx	r3
 800ac1a:	9b01      	ldr	r3, [sp, #4]
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	429d      	cmp	r5, r3
 800ac20:	d027      	beq.n	800ac72 <_scanf_i+0x1e6>
 800ac22:	2210      	movs	r2, #16
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	401a      	ands	r2, r3
 800ac28:	d11c      	bne.n	800ac64 <_scanf_i+0x1d8>
 800ac2a:	702a      	strb	r2, [r5, #0]
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	9901      	ldr	r1, [sp, #4]
 800ac30:	9804      	ldr	r0, [sp, #16]
 800ac32:	9e05      	ldr	r6, [sp, #20]
 800ac34:	47b0      	blx	r6
 800ac36:	9b02      	ldr	r3, [sp, #8]
 800ac38:	6821      	ldr	r1, [r4, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	068a      	lsls	r2, r1, #26
 800ac3e:	d507      	bpl.n	800ac50 <_scanf_i+0x1c4>
 800ac40:	1d1a      	adds	r2, r3, #4
 800ac42:	9902      	ldr	r1, [sp, #8]
 800ac44:	600a      	str	r2, [r1, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6018      	str	r0, [r3, #0]
 800ac4a:	e008      	b.n	800ac5e <_scanf_i+0x1d2>
 800ac4c:	2700      	movs	r7, #0
 800ac4e:	e7d6      	b.n	800abfe <_scanf_i+0x172>
 800ac50:	1d1a      	adds	r2, r3, #4
 800ac52:	07ce      	lsls	r6, r1, #31
 800ac54:	d5f5      	bpl.n	800ac42 <_scanf_i+0x1b6>
 800ac56:	9902      	ldr	r1, [sp, #8]
 800ac58:	600a      	str	r2, [r1, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	8018      	strh	r0, [r3, #0]
 800ac5e:	68e3      	ldr	r3, [r4, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60e3      	str	r3, [r4, #12]
 800ac64:	2000      	movs	r0, #0
 800ac66:	9b01      	ldr	r3, [sp, #4]
 800ac68:	1aed      	subs	r5, r5, r3
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	19ef      	adds	r7, r5, r7
 800ac6e:	19df      	adds	r7, r3, r7
 800ac70:	6127      	str	r7, [r4, #16]
 800ac72:	b00b      	add	sp, #44	; 0x2c
 800ac74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	0800c19c 	.word	0x0800c19c
 800ac7c:	0800af1d 	.word	0x0800af1d
 800ac80:	0800adf5 	.word	0x0800adf5
 800ac84:	fffffaff 	.word	0xfffffaff
 800ac88:	0800c3da 	.word	0x0800c3da
 800ac8c:	fffff6ff 	.word	0xfffff6ff

0800ac90 <__sccl>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	780b      	ldrb	r3, [r1, #0]
 800ac94:	0005      	movs	r5, r0
 800ac96:	2b5e      	cmp	r3, #94	; 0x5e
 800ac98:	d018      	beq.n	800accc <__sccl+0x3c>
 800ac9a:	1c4a      	adds	r2, r1, #1
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	0028      	movs	r0, r5
 800aca0:	1c6c      	adds	r4, r5, #1
 800aca2:	34ff      	adds	r4, #255	; 0xff
 800aca4:	7001      	strb	r1, [r0, #0]
 800aca6:	3001      	adds	r0, #1
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d1fb      	bne.n	800aca4 <__sccl+0x14>
 800acac:	1e50      	subs	r0, r2, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00b      	beq.n	800acca <__sccl+0x3a>
 800acb2:	2001      	movs	r0, #1
 800acb4:	4041      	eors	r1, r0
 800acb6:	54e9      	strb	r1, [r5, r3]
 800acb8:	7814      	ldrb	r4, [r2, #0]
 800acba:	1c50      	adds	r0, r2, #1
 800acbc:	2c2d      	cmp	r4, #45	; 0x2d
 800acbe:	d00c      	beq.n	800acda <__sccl+0x4a>
 800acc0:	2c5d      	cmp	r4, #93	; 0x5d
 800acc2:	d002      	beq.n	800acca <__sccl+0x3a>
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	d105      	bne.n	800acd4 <__sccl+0x44>
 800acc8:	0010      	movs	r0, r2
 800acca:	bd70      	pop	{r4, r5, r6, pc}
 800accc:	1c8a      	adds	r2, r1, #2
 800acce:	784b      	ldrb	r3, [r1, #1]
 800acd0:	2101      	movs	r1, #1
 800acd2:	e7e4      	b.n	800ac9e <__sccl+0xe>
 800acd4:	0023      	movs	r3, r4
 800acd6:	0002      	movs	r2, r0
 800acd8:	e7ed      	b.n	800acb6 <__sccl+0x26>
 800acda:	7856      	ldrb	r6, [r2, #1]
 800acdc:	2e5d      	cmp	r6, #93	; 0x5d
 800acde:	d0f9      	beq.n	800acd4 <__sccl+0x44>
 800ace0:	42b3      	cmp	r3, r6
 800ace2:	dcf7      	bgt.n	800acd4 <__sccl+0x44>
 800ace4:	3202      	adds	r2, #2
 800ace6:	3301      	adds	r3, #1
 800ace8:	54e9      	strb	r1, [r5, r3]
 800acea:	429e      	cmp	r6, r3
 800acec:	dcfb      	bgt.n	800ace6 <__sccl+0x56>
 800acee:	e7e3      	b.n	800acb8 <__sccl+0x28>

0800acf0 <_strtol_l.isra.0>:
 800acf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acf2:	001f      	movs	r7, r3
 800acf4:	000e      	movs	r6, r1
 800acf6:	b087      	sub	sp, #28
 800acf8:	9005      	str	r0, [sp, #20]
 800acfa:	9101      	str	r1, [sp, #4]
 800acfc:	9202      	str	r2, [sp, #8]
 800acfe:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad00:	7834      	ldrb	r4, [r6, #0]
 800ad02:	f7ff f829 	bl	8009d58 <__locale_ctype_ptr_l>
 800ad06:	2208      	movs	r2, #8
 800ad08:	1900      	adds	r0, r0, r4
 800ad0a:	7843      	ldrb	r3, [r0, #1]
 800ad0c:	1c75      	adds	r5, r6, #1
 800ad0e:	4013      	ands	r3, r2
 800ad10:	d136      	bne.n	800ad80 <_strtol_l.isra.0+0x90>
 800ad12:	2c2d      	cmp	r4, #45	; 0x2d
 800ad14:	d136      	bne.n	800ad84 <_strtol_l.isra.0+0x94>
 800ad16:	1cb5      	adds	r5, r6, #2
 800ad18:	7874      	ldrb	r4, [r6, #1]
 800ad1a:	2601      	movs	r6, #1
 800ad1c:	2f00      	cmp	r7, #0
 800ad1e:	d062      	beq.n	800ade6 <_strtol_l.isra.0+0xf6>
 800ad20:	2f10      	cmp	r7, #16
 800ad22:	d109      	bne.n	800ad38 <_strtol_l.isra.0+0x48>
 800ad24:	2c30      	cmp	r4, #48	; 0x30
 800ad26:	d107      	bne.n	800ad38 <_strtol_l.isra.0+0x48>
 800ad28:	2220      	movs	r2, #32
 800ad2a:	782b      	ldrb	r3, [r5, #0]
 800ad2c:	4393      	bics	r3, r2
 800ad2e:	2b58      	cmp	r3, #88	; 0x58
 800ad30:	d154      	bne.n	800addc <_strtol_l.isra.0+0xec>
 800ad32:	2710      	movs	r7, #16
 800ad34:	786c      	ldrb	r4, [r5, #1]
 800ad36:	3502      	adds	r5, #2
 800ad38:	4b2d      	ldr	r3, [pc, #180]	; (800adf0 <_strtol_l.isra.0+0x100>)
 800ad3a:	0039      	movs	r1, r7
 800ad3c:	18f3      	adds	r3, r6, r3
 800ad3e:	0018      	movs	r0, r3
 800ad40:	9303      	str	r3, [sp, #12]
 800ad42:	f7f5 fa6f 	bl	8000224 <__aeabi_uidivmod>
 800ad46:	9104      	str	r1, [sp, #16]
 800ad48:	2101      	movs	r1, #1
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	4249      	negs	r1, r1
 800ad4e:	0002      	movs	r2, r0
 800ad50:	468c      	mov	ip, r1
 800ad52:	0018      	movs	r0, r3
 800ad54:	0021      	movs	r1, r4
 800ad56:	3930      	subs	r1, #48	; 0x30
 800ad58:	2909      	cmp	r1, #9
 800ad5a:	d81a      	bhi.n	800ad92 <_strtol_l.isra.0+0xa2>
 800ad5c:	000c      	movs	r4, r1
 800ad5e:	42a7      	cmp	r7, r4
 800ad60:	dd23      	ble.n	800adaa <_strtol_l.isra.0+0xba>
 800ad62:	1c59      	adds	r1, r3, #1
 800ad64:	d009      	beq.n	800ad7a <_strtol_l.isra.0+0x8a>
 800ad66:	4663      	mov	r3, ip
 800ad68:	4282      	cmp	r2, r0
 800ad6a:	d306      	bcc.n	800ad7a <_strtol_l.isra.0+0x8a>
 800ad6c:	d102      	bne.n	800ad74 <_strtol_l.isra.0+0x84>
 800ad6e:	9904      	ldr	r1, [sp, #16]
 800ad70:	42a1      	cmp	r1, r4
 800ad72:	db02      	blt.n	800ad7a <_strtol_l.isra.0+0x8a>
 800ad74:	2301      	movs	r3, #1
 800ad76:	4378      	muls	r0, r7
 800ad78:	1820      	adds	r0, r4, r0
 800ad7a:	782c      	ldrb	r4, [r5, #0]
 800ad7c:	3501      	adds	r5, #1
 800ad7e:	e7e9      	b.n	800ad54 <_strtol_l.isra.0+0x64>
 800ad80:	002e      	movs	r6, r5
 800ad82:	e7bc      	b.n	800acfe <_strtol_l.isra.0+0xe>
 800ad84:	2c2b      	cmp	r4, #43	; 0x2b
 800ad86:	d001      	beq.n	800ad8c <_strtol_l.isra.0+0x9c>
 800ad88:	001e      	movs	r6, r3
 800ad8a:	e7c7      	b.n	800ad1c <_strtol_l.isra.0+0x2c>
 800ad8c:	1cb5      	adds	r5, r6, #2
 800ad8e:	7874      	ldrb	r4, [r6, #1]
 800ad90:	e7fa      	b.n	800ad88 <_strtol_l.isra.0+0x98>
 800ad92:	0021      	movs	r1, r4
 800ad94:	3941      	subs	r1, #65	; 0x41
 800ad96:	2919      	cmp	r1, #25
 800ad98:	d801      	bhi.n	800ad9e <_strtol_l.isra.0+0xae>
 800ad9a:	3c37      	subs	r4, #55	; 0x37
 800ad9c:	e7df      	b.n	800ad5e <_strtol_l.isra.0+0x6e>
 800ad9e:	0021      	movs	r1, r4
 800ada0:	3961      	subs	r1, #97	; 0x61
 800ada2:	2919      	cmp	r1, #25
 800ada4:	d801      	bhi.n	800adaa <_strtol_l.isra.0+0xba>
 800ada6:	3c57      	subs	r4, #87	; 0x57
 800ada8:	e7d9      	b.n	800ad5e <_strtol_l.isra.0+0x6e>
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	d108      	bne.n	800adc0 <_strtol_l.isra.0+0xd0>
 800adae:	9a05      	ldr	r2, [sp, #20]
 800adb0:	3323      	adds	r3, #35	; 0x23
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	9b02      	ldr	r3, [sp, #8]
 800adb6:	9803      	ldr	r0, [sp, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d109      	bne.n	800add0 <_strtol_l.isra.0+0xe0>
 800adbc:	b007      	add	sp, #28
 800adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc0:	2e00      	cmp	r6, #0
 800adc2:	d000      	beq.n	800adc6 <_strtol_l.isra.0+0xd6>
 800adc4:	4240      	negs	r0, r0
 800adc6:	9a02      	ldr	r2, [sp, #8]
 800adc8:	2a00      	cmp	r2, #0
 800adca:	d0f7      	beq.n	800adbc <_strtol_l.isra.0+0xcc>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <_strtol_l.isra.0+0xe4>
 800add0:	1e6b      	subs	r3, r5, #1
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	9b02      	ldr	r3, [sp, #8]
 800add6:	9a01      	ldr	r2, [sp, #4]
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	e7ef      	b.n	800adbc <_strtol_l.isra.0+0xcc>
 800addc:	2430      	movs	r4, #48	; 0x30
 800adde:	2f00      	cmp	r7, #0
 800ade0:	d1aa      	bne.n	800ad38 <_strtol_l.isra.0+0x48>
 800ade2:	2708      	movs	r7, #8
 800ade4:	e7a8      	b.n	800ad38 <_strtol_l.isra.0+0x48>
 800ade6:	2c30      	cmp	r4, #48	; 0x30
 800ade8:	d09e      	beq.n	800ad28 <_strtol_l.isra.0+0x38>
 800adea:	270a      	movs	r7, #10
 800adec:	e7a4      	b.n	800ad38 <_strtol_l.isra.0+0x48>
 800adee:	46c0      	nop			; (mov r8, r8)
 800adf0:	7fffffff 	.word	0x7fffffff

0800adf4 <_strtol_r>:
 800adf4:	b513      	push	{r0, r1, r4, lr}
 800adf6:	4c05      	ldr	r4, [pc, #20]	; (800ae0c <_strtol_r+0x18>)
 800adf8:	6824      	ldr	r4, [r4, #0]
 800adfa:	6a24      	ldr	r4, [r4, #32]
 800adfc:	2c00      	cmp	r4, #0
 800adfe:	d100      	bne.n	800ae02 <_strtol_r+0xe>
 800ae00:	4c03      	ldr	r4, [pc, #12]	; (800ae10 <_strtol_r+0x1c>)
 800ae02:	9400      	str	r4, [sp, #0]
 800ae04:	f7ff ff74 	bl	800acf0 <_strtol_l.isra.0>
 800ae08:	bd16      	pop	{r1, r2, r4, pc}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	20000018 	.word	0x20000018
 800ae10:	2000007c 	.word	0x2000007c

0800ae14 <_strtoul_l.isra.0>:
 800ae14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae16:	001f      	movs	r7, r3
 800ae18:	000e      	movs	r6, r1
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	9003      	str	r0, [sp, #12]
 800ae1e:	9101      	str	r1, [sp, #4]
 800ae20:	9202      	str	r2, [sp, #8]
 800ae22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae24:	7834      	ldrb	r4, [r6, #0]
 800ae26:	f7fe ff97 	bl	8009d58 <__locale_ctype_ptr_l>
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	1900      	adds	r0, r0, r4
 800ae2e:	7843      	ldrb	r3, [r0, #1]
 800ae30:	1c75      	adds	r5, r6, #1
 800ae32:	4013      	ands	r3, r2
 800ae34:	d138      	bne.n	800aea8 <_strtoul_l.isra.0+0x94>
 800ae36:	2c2d      	cmp	r4, #45	; 0x2d
 800ae38:	d138      	bne.n	800aeac <_strtoul_l.isra.0+0x98>
 800ae3a:	7874      	ldrb	r4, [r6, #1]
 800ae3c:	1cb5      	adds	r5, r6, #2
 800ae3e:	3301      	adds	r3, #1
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	2f00      	cmp	r7, #0
 800ae44:	d065      	beq.n	800af12 <_strtoul_l.isra.0+0xfe>
 800ae46:	2f10      	cmp	r7, #16
 800ae48:	d109      	bne.n	800ae5e <_strtoul_l.isra.0+0x4a>
 800ae4a:	2c30      	cmp	r4, #48	; 0x30
 800ae4c:	d107      	bne.n	800ae5e <_strtoul_l.isra.0+0x4a>
 800ae4e:	2220      	movs	r2, #32
 800ae50:	782b      	ldrb	r3, [r5, #0]
 800ae52:	4393      	bics	r3, r2
 800ae54:	2b58      	cmp	r3, #88	; 0x58
 800ae56:	d157      	bne.n	800af08 <_strtoul_l.isra.0+0xf4>
 800ae58:	2710      	movs	r7, #16
 800ae5a:	786c      	ldrb	r4, [r5, #1]
 800ae5c:	3502      	adds	r5, #2
 800ae5e:	2001      	movs	r0, #1
 800ae60:	0039      	movs	r1, r7
 800ae62:	4240      	negs	r0, r0
 800ae64:	f7f5 f958 	bl	8000118 <__udivsi3>
 800ae68:	0006      	movs	r6, r0
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	0039      	movs	r1, r7
 800ae6e:	4240      	negs	r0, r0
 800ae70:	f7f5 f9d8 	bl	8000224 <__aeabi_uidivmod>
 800ae74:	2300      	movs	r3, #0
 800ae76:	2201      	movs	r2, #1
 800ae78:	468c      	mov	ip, r1
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	4252      	negs	r2, r2
 800ae7e:	0021      	movs	r1, r4
 800ae80:	3930      	subs	r1, #48	; 0x30
 800ae82:	2909      	cmp	r1, #9
 800ae84:	d817      	bhi.n	800aeb6 <_strtoul_l.isra.0+0xa2>
 800ae86:	000c      	movs	r4, r1
 800ae88:	42a7      	cmp	r7, r4
 800ae8a:	dd22      	ble.n	800aed2 <_strtoul_l.isra.0+0xbe>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	db1e      	blt.n	800aece <_strtoul_l.isra.0+0xba>
 800ae90:	0013      	movs	r3, r2
 800ae92:	4286      	cmp	r6, r0
 800ae94:	d305      	bcc.n	800aea2 <_strtoul_l.isra.0+0x8e>
 800ae96:	d101      	bne.n	800ae9c <_strtoul_l.isra.0+0x88>
 800ae98:	45a4      	cmp	ip, r4
 800ae9a:	db02      	blt.n	800aea2 <_strtoul_l.isra.0+0x8e>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	4378      	muls	r0, r7
 800aea0:	1820      	adds	r0, r4, r0
 800aea2:	782c      	ldrb	r4, [r5, #0]
 800aea4:	3501      	adds	r5, #1
 800aea6:	e7ea      	b.n	800ae7e <_strtoul_l.isra.0+0x6a>
 800aea8:	002e      	movs	r6, r5
 800aeaa:	e7ba      	b.n	800ae22 <_strtoul_l.isra.0+0xe>
 800aeac:	2c2b      	cmp	r4, #43	; 0x2b
 800aeae:	d1c7      	bne.n	800ae40 <_strtoul_l.isra.0+0x2c>
 800aeb0:	1cb5      	adds	r5, r6, #2
 800aeb2:	7874      	ldrb	r4, [r6, #1]
 800aeb4:	e7c4      	b.n	800ae40 <_strtoul_l.isra.0+0x2c>
 800aeb6:	0021      	movs	r1, r4
 800aeb8:	3941      	subs	r1, #65	; 0x41
 800aeba:	2919      	cmp	r1, #25
 800aebc:	d801      	bhi.n	800aec2 <_strtoul_l.isra.0+0xae>
 800aebe:	3c37      	subs	r4, #55	; 0x37
 800aec0:	e7e2      	b.n	800ae88 <_strtoul_l.isra.0+0x74>
 800aec2:	0021      	movs	r1, r4
 800aec4:	3961      	subs	r1, #97	; 0x61
 800aec6:	2919      	cmp	r1, #25
 800aec8:	d803      	bhi.n	800aed2 <_strtoul_l.isra.0+0xbe>
 800aeca:	3c57      	subs	r4, #87	; 0x57
 800aecc:	e7dc      	b.n	800ae88 <_strtoul_l.isra.0+0x74>
 800aece:	0013      	movs	r3, r2
 800aed0:	e7e7      	b.n	800aea2 <_strtoul_l.isra.0+0x8e>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da09      	bge.n	800aeea <_strtoul_l.isra.0+0xd6>
 800aed6:	2322      	movs	r3, #34	; 0x22
 800aed8:	2001      	movs	r0, #1
 800aeda:	9a03      	ldr	r2, [sp, #12]
 800aedc:	4240      	negs	r0, r0
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	9b02      	ldr	r3, [sp, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10a      	bne.n	800aefc <_strtoul_l.isra.0+0xe8>
 800aee6:	b005      	add	sp, #20
 800aee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeea:	9a00      	ldr	r2, [sp, #0]
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	d000      	beq.n	800aef2 <_strtoul_l.isra.0+0xde>
 800aef0:	4240      	negs	r0, r0
 800aef2:	9a02      	ldr	r2, [sp, #8]
 800aef4:	2a00      	cmp	r2, #0
 800aef6:	d0f6      	beq.n	800aee6 <_strtoul_l.isra.0+0xd2>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <_strtoul_l.isra.0+0xec>
 800aefc:	1e6b      	subs	r3, r5, #1
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	9b02      	ldr	r3, [sp, #8]
 800af02:	9a01      	ldr	r2, [sp, #4]
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	e7ee      	b.n	800aee6 <_strtoul_l.isra.0+0xd2>
 800af08:	2430      	movs	r4, #48	; 0x30
 800af0a:	2f00      	cmp	r7, #0
 800af0c:	d1a7      	bne.n	800ae5e <_strtoul_l.isra.0+0x4a>
 800af0e:	2708      	movs	r7, #8
 800af10:	e7a5      	b.n	800ae5e <_strtoul_l.isra.0+0x4a>
 800af12:	2c30      	cmp	r4, #48	; 0x30
 800af14:	d09b      	beq.n	800ae4e <_strtoul_l.isra.0+0x3a>
 800af16:	270a      	movs	r7, #10
 800af18:	e7a1      	b.n	800ae5e <_strtoul_l.isra.0+0x4a>
	...

0800af1c <_strtoul_r>:
 800af1c:	b513      	push	{r0, r1, r4, lr}
 800af1e:	4c05      	ldr	r4, [pc, #20]	; (800af34 <_strtoul_r+0x18>)
 800af20:	6824      	ldr	r4, [r4, #0]
 800af22:	6a24      	ldr	r4, [r4, #32]
 800af24:	2c00      	cmp	r4, #0
 800af26:	d100      	bne.n	800af2a <_strtoul_r+0xe>
 800af28:	4c03      	ldr	r4, [pc, #12]	; (800af38 <_strtoul_r+0x1c>)
 800af2a:	9400      	str	r4, [sp, #0]
 800af2c:	f7ff ff72 	bl	800ae14 <_strtoul_l.isra.0>
 800af30:	bd16      	pop	{r1, r2, r4, pc}
 800af32:	46c0      	nop			; (mov r8, r8)
 800af34:	20000018 	.word	0x20000018
 800af38:	2000007c 	.word	0x2000007c

0800af3c <__submore>:
 800af3c:	000b      	movs	r3, r1
 800af3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af40:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800af42:	3344      	adds	r3, #68	; 0x44
 800af44:	000c      	movs	r4, r1
 800af46:	429d      	cmp	r5, r3
 800af48:	d11c      	bne.n	800af84 <__submore+0x48>
 800af4a:	2680      	movs	r6, #128	; 0x80
 800af4c:	00f6      	lsls	r6, r6, #3
 800af4e:	0031      	movs	r1, r6
 800af50:	f7fe ff96 	bl	8009e80 <_malloc_r>
 800af54:	2800      	cmp	r0, #0
 800af56:	d102      	bne.n	800af5e <__submore+0x22>
 800af58:	2001      	movs	r0, #1
 800af5a:	4240      	negs	r0, r0
 800af5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af5e:	0023      	movs	r3, r4
 800af60:	6360      	str	r0, [r4, #52]	; 0x34
 800af62:	63a6      	str	r6, [r4, #56]	; 0x38
 800af64:	3346      	adds	r3, #70	; 0x46
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	4b10      	ldr	r3, [pc, #64]	; (800afac <__submore+0x70>)
 800af6a:	54c2      	strb	r2, [r0, r3]
 800af6c:	0023      	movs	r3, r4
 800af6e:	3345      	adds	r3, #69	; 0x45
 800af70:	781a      	ldrb	r2, [r3, #0]
 800af72:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <__submore+0x74>)
 800af74:	54c2      	strb	r2, [r0, r3]
 800af76:	782a      	ldrb	r2, [r5, #0]
 800af78:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <__submore+0x78>)
 800af7a:	54c2      	strb	r2, [r0, r3]
 800af7c:	18c0      	adds	r0, r0, r3
 800af7e:	6020      	str	r0, [r4, #0]
 800af80:	2000      	movs	r0, #0
 800af82:	e7eb      	b.n	800af5c <__submore+0x20>
 800af84:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800af86:	0029      	movs	r1, r5
 800af88:	0073      	lsls	r3, r6, #1
 800af8a:	001a      	movs	r2, r3
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	f7ff f851 	bl	800a034 <_realloc_r>
 800af92:	1e05      	subs	r5, r0, #0
 800af94:	d0e0      	beq.n	800af58 <__submore+0x1c>
 800af96:	1987      	adds	r7, r0, r6
 800af98:	0001      	movs	r1, r0
 800af9a:	0032      	movs	r2, r6
 800af9c:	0038      	movs	r0, r7
 800af9e:	f7fe ff13 	bl	8009dc8 <memcpy>
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	6027      	str	r7, [r4, #0]
 800afa6:	6365      	str	r5, [r4, #52]	; 0x34
 800afa8:	63a3      	str	r3, [r4, #56]	; 0x38
 800afaa:	e7e9      	b.n	800af80 <__submore+0x44>
 800afac:	000003ff 	.word	0x000003ff
 800afb0:	000003fe 	.word	0x000003fe
 800afb4:	000003fd 	.word	0x000003fd

0800afb8 <memchr>:
 800afb8:	b2c9      	uxtb	r1, r1
 800afba:	1882      	adds	r2, r0, r2
 800afbc:	4290      	cmp	r0, r2
 800afbe:	d101      	bne.n	800afc4 <memchr+0xc>
 800afc0:	2000      	movs	r0, #0
 800afc2:	4770      	bx	lr
 800afc4:	7803      	ldrb	r3, [r0, #0]
 800afc6:	428b      	cmp	r3, r1
 800afc8:	d0fb      	beq.n	800afc2 <memchr+0xa>
 800afca:	3001      	adds	r0, #1
 800afcc:	e7f6      	b.n	800afbc <memchr+0x4>

0800afce <memmove>:
 800afce:	b510      	push	{r4, lr}
 800afd0:	4288      	cmp	r0, r1
 800afd2:	d902      	bls.n	800afda <memmove+0xc>
 800afd4:	188b      	adds	r3, r1, r2
 800afd6:	4298      	cmp	r0, r3
 800afd8:	d303      	bcc.n	800afe2 <memmove+0x14>
 800afda:	2300      	movs	r3, #0
 800afdc:	e007      	b.n	800afee <memmove+0x20>
 800afde:	5c8b      	ldrb	r3, [r1, r2]
 800afe0:	5483      	strb	r3, [r0, r2]
 800afe2:	3a01      	subs	r2, #1
 800afe4:	d2fb      	bcs.n	800afde <memmove+0x10>
 800afe6:	bd10      	pop	{r4, pc}
 800afe8:	5ccc      	ldrb	r4, [r1, r3]
 800afea:	54c4      	strb	r4, [r0, r3]
 800afec:	3301      	adds	r3, #1
 800afee:	429a      	cmp	r2, r3
 800aff0:	d1fa      	bne.n	800afe8 <memmove+0x1a>
 800aff2:	e7f8      	b.n	800afe6 <memmove+0x18>

0800aff4 <_malloc_usable_size_r>:
 800aff4:	1f0b      	subs	r3, r1, #4
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	1f18      	subs	r0, r3, #4
 800affa:	2b00      	cmp	r3, #0
 800affc:	da01      	bge.n	800b002 <_malloc_usable_size_r+0xe>
 800affe:	580b      	ldr	r3, [r1, r0]
 800b000:	18c0      	adds	r0, r0, r3
 800b002:	4770      	bx	lr

0800b004 <pow>:
 800b004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b006:	2400      	movs	r4, #0
 800b008:	b091      	sub	sp, #68	; 0x44
 800b00a:	001f      	movs	r7, r3
 800b00c:	9000      	str	r0, [sp, #0]
 800b00e:	9101      	str	r1, [sp, #4]
 800b010:	0016      	movs	r6, r2
 800b012:	f000 f98d 	bl	800b330 <__ieee754_pow>
 800b016:	4bbe      	ldr	r3, [pc, #760]	; (800b310 <pow+0x30c>)
 800b018:	9002      	str	r0, [sp, #8]
 800b01a:	9103      	str	r1, [sp, #12]
 800b01c:	571c      	ldrsb	r4, [r3, r4]
 800b01e:	1c63      	adds	r3, r4, #1
 800b020:	d100      	bne.n	800b024 <pow+0x20>
 800b022:	e0d4      	b.n	800b1ce <pow+0x1ca>
 800b024:	0032      	movs	r2, r6
 800b026:	003b      	movs	r3, r7
 800b028:	0030      	movs	r0, r6
 800b02a:	0039      	movs	r1, r7
 800b02c:	f7f7 f9c4 	bl	80023b8 <__aeabi_dcmpun>
 800b030:	1e05      	subs	r5, r0, #0
 800b032:	d000      	beq.n	800b036 <pow+0x32>
 800b034:	e0cb      	b.n	800b1ce <pow+0x1ca>
 800b036:	9a00      	ldr	r2, [sp, #0]
 800b038:	9b01      	ldr	r3, [sp, #4]
 800b03a:	0010      	movs	r0, r2
 800b03c:	0019      	movs	r1, r3
 800b03e:	f7f7 f9bb 	bl	80023b8 <__aeabi_dcmpun>
 800b042:	2200      	movs	r2, #0
 800b044:	9005      	str	r0, [sp, #20]
 800b046:	2800      	cmp	r0, #0
 800b048:	d01e      	beq.n	800b088 <pow+0x84>
 800b04a:	2300      	movs	r3, #0
 800b04c:	0030      	movs	r0, r6
 800b04e:	0039      	movs	r1, r7
 800b050:	f7f5 f8fe 	bl	8000250 <__aeabi_dcmpeq>
 800b054:	2800      	cmp	r0, #0
 800b056:	d100      	bne.n	800b05a <pow+0x56>
 800b058:	e0b9      	b.n	800b1ce <pow+0x1ca>
 800b05a:	2301      	movs	r3, #1
 800b05c:	9306      	str	r3, [sp, #24]
 800b05e:	4bad      	ldr	r3, [pc, #692]	; (800b314 <pow+0x310>)
 800b060:	950e      	str	r5, [sp, #56]	; 0x38
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	9a00      	ldr	r2, [sp, #0]
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	9208      	str	r2, [sp, #32]
 800b06a:	9309      	str	r3, [sp, #36]	; 0x24
 800b06c:	2200      	movs	r2, #0
 800b06e:	4baa      	ldr	r3, [pc, #680]	; (800b318 <pow+0x314>)
 800b070:	960a      	str	r6, [sp, #40]	; 0x28
 800b072:	970b      	str	r7, [sp, #44]	; 0x2c
 800b074:	920c      	str	r2, [sp, #48]	; 0x30
 800b076:	930d      	str	r3, [sp, #52]	; 0x34
 800b078:	2c02      	cmp	r4, #2
 800b07a:	d033      	beq.n	800b0e4 <pow+0xe0>
 800b07c:	a806      	add	r0, sp, #24
 800b07e:	f000 ff0b 	bl	800be98 <matherr>
 800b082:	2800      	cmp	r0, #0
 800b084:	d125      	bne.n	800b0d2 <pow+0xce>
 800b086:	e059      	b.n	800b13c <pow+0x138>
 800b088:	2300      	movs	r3, #0
 800b08a:	9800      	ldr	r0, [sp, #0]
 800b08c:	9901      	ldr	r1, [sp, #4]
 800b08e:	f7f5 f8df 	bl	8000250 <__aeabi_dcmpeq>
 800b092:	2800      	cmp	r0, #0
 800b094:	d057      	beq.n	800b146 <pow+0x142>
 800b096:	2200      	movs	r2, #0
 800b098:	2300      	movs	r3, #0
 800b09a:	0030      	movs	r0, r6
 800b09c:	0039      	movs	r1, r7
 800b09e:	f7f5 f8d7 	bl	8000250 <__aeabi_dcmpeq>
 800b0a2:	1e05      	subs	r5, r0, #0
 800b0a4:	d021      	beq.n	800b0ea <pow+0xe6>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	9306      	str	r3, [sp, #24]
 800b0aa:	4b9a      	ldr	r3, [pc, #616]	; (800b314 <pow+0x310>)
 800b0ac:	960a      	str	r6, [sp, #40]	; 0x28
 800b0ae:	970b      	str	r7, [sp, #44]	; 0x2c
 800b0b0:	9307      	str	r3, [sp, #28]
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	930e      	str	r3, [sp, #56]	; 0x38
 800b0b6:	9a00      	ldr	r2, [sp, #0]
 800b0b8:	9b01      	ldr	r3, [sp, #4]
 800b0ba:	9208      	str	r2, [sp, #32]
 800b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	920c      	str	r2, [sp, #48]	; 0x30
 800b0c4:	930d      	str	r3, [sp, #52]	; 0x34
 800b0c6:	2c00      	cmp	r4, #0
 800b0c8:	d0d8      	beq.n	800b07c <pow+0x78>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	4b92      	ldr	r3, [pc, #584]	; (800b318 <pow+0x314>)
 800b0ce:	920c      	str	r2, [sp, #48]	; 0x30
 800b0d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d004      	beq.n	800b0e4 <pow+0xe0>
 800b0da:	f7fe fe13 	bl	8009d04 <__errno>
 800b0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	6003      	str	r3, [r0, #0]
 800b0e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b0e8:	e06f      	b.n	800b1ca <pow+0x1c6>
 800b0ea:	0030      	movs	r0, r6
 800b0ec:	0039      	movs	r1, r7
 800b0ee:	f000 fecb 	bl	800be88 <finite>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d06b      	beq.n	800b1ce <pow+0x1ca>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	0030      	movs	r0, r6
 800b0fc:	0039      	movs	r1, r7
 800b0fe:	f7f5 f8ad 	bl	800025c <__aeabi_dcmplt>
 800b102:	2800      	cmp	r0, #0
 800b104:	d063      	beq.n	800b1ce <pow+0x1ca>
 800b106:	2301      	movs	r3, #1
 800b108:	9306      	str	r3, [sp, #24]
 800b10a:	4b82      	ldr	r3, [pc, #520]	; (800b314 <pow+0x310>)
 800b10c:	950e      	str	r5, [sp, #56]	; 0x38
 800b10e:	9307      	str	r3, [sp, #28]
 800b110:	9b00      	ldr	r3, [sp, #0]
 800b112:	9c01      	ldr	r4, [sp, #4]
 800b114:	9308      	str	r3, [sp, #32]
 800b116:	9409      	str	r4, [sp, #36]	; 0x24
 800b118:	4b7d      	ldr	r3, [pc, #500]	; (800b310 <pow+0x30c>)
 800b11a:	960a      	str	r6, [sp, #40]	; 0x28
 800b11c:	970b      	str	r7, [sp, #44]	; 0x2c
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	b25b      	sxtb	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d104      	bne.n	800b130 <pow+0x12c>
 800b126:	2300      	movs	r3, #0
 800b128:	2400      	movs	r4, #0
 800b12a:	930c      	str	r3, [sp, #48]	; 0x30
 800b12c:	940d      	str	r4, [sp, #52]	; 0x34
 800b12e:	e7a5      	b.n	800b07c <pow+0x78>
 800b130:	2000      	movs	r0, #0
 800b132:	497a      	ldr	r1, [pc, #488]	; (800b31c <pow+0x318>)
 800b134:	900c      	str	r0, [sp, #48]	; 0x30
 800b136:	910d      	str	r1, [sp, #52]	; 0x34
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d19f      	bne.n	800b07c <pow+0x78>
 800b13c:	f7fe fde2 	bl	8009d04 <__errno>
 800b140:	2321      	movs	r3, #33	; 0x21
 800b142:	6003      	str	r3, [r0, #0]
 800b144:	e7c5      	b.n	800b0d2 <pow+0xce>
 800b146:	9802      	ldr	r0, [sp, #8]
 800b148:	9903      	ldr	r1, [sp, #12]
 800b14a:	f000 fe9d 	bl	800be88 <finite>
 800b14e:	9005      	str	r0, [sp, #20]
 800b150:	2800      	cmp	r0, #0
 800b152:	d000      	beq.n	800b156 <pow+0x152>
 800b154:	e0a5      	b.n	800b2a2 <pow+0x29e>
 800b156:	9800      	ldr	r0, [sp, #0]
 800b158:	9901      	ldr	r1, [sp, #4]
 800b15a:	f000 fe95 	bl	800be88 <finite>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d100      	bne.n	800b164 <pow+0x160>
 800b162:	e09e      	b.n	800b2a2 <pow+0x29e>
 800b164:	0030      	movs	r0, r6
 800b166:	0039      	movs	r1, r7
 800b168:	f000 fe8e 	bl	800be88 <finite>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d100      	bne.n	800b172 <pow+0x16e>
 800b170:	e097      	b.n	800b2a2 <pow+0x29e>
 800b172:	2500      	movs	r5, #0
 800b174:	4b66      	ldr	r3, [pc, #408]	; (800b310 <pow+0x30c>)
 800b176:	ac06      	add	r4, sp, #24
 800b178:	575d      	ldrsb	r5, [r3, r5]
 800b17a:	9a02      	ldr	r2, [sp, #8]
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	0019      	movs	r1, r3
 800b180:	0010      	movs	r0, r2
 800b182:	f7f7 f919 	bl	80023b8 <__aeabi_dcmpun>
 800b186:	4b63      	ldr	r3, [pc, #396]	; (800b314 <pow+0x310>)
 800b188:	2800      	cmp	r0, #0
 800b18a:	d031      	beq.n	800b1f0 <pow+0x1ec>
 800b18c:	2201      	movs	r2, #1
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	9b05      	ldr	r3, [sp, #20]
 800b192:	9206      	str	r2, [sp, #24]
 800b194:	6223      	str	r3, [r4, #32]
 800b196:	6126      	str	r6, [r4, #16]
 800b198:	6167      	str	r7, [r4, #20]
 800b19a:	9a00      	ldr	r2, [sp, #0]
 800b19c:	9b01      	ldr	r3, [sp, #4]
 800b19e:	60a2      	str	r2, [r4, #8]
 800b1a0:	60e3      	str	r3, [r4, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	2d00      	cmp	r5, #0
 800b1a8:	d115      	bne.n	800b1d6 <pow+0x1d2>
 800b1aa:	61a2      	str	r2, [r4, #24]
 800b1ac:	61e3      	str	r3, [r4, #28]
 800b1ae:	0020      	movs	r0, r4
 800b1b0:	f000 fe72 	bl	800be98 <matherr>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d016      	beq.n	800b1e6 <pow+0x1e2>
 800b1b8:	6a23      	ldr	r3, [r4, #32]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <pow+0x1c2>
 800b1be:	f7fe fda1 	bl	8009d04 <__errno>
 800b1c2:	6a23      	ldr	r3, [r4, #32]
 800b1c4:	6003      	str	r3, [r0, #0]
 800b1c6:	69a3      	ldr	r3, [r4, #24]
 800b1c8:	69e4      	ldr	r4, [r4, #28]
 800b1ca:	9302      	str	r3, [sp, #8]
 800b1cc:	9403      	str	r4, [sp, #12]
 800b1ce:	9802      	ldr	r0, [sp, #8]
 800b1d0:	9903      	ldr	r1, [sp, #12]
 800b1d2:	b011      	add	sp, #68	; 0x44
 800b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d6:	0010      	movs	r0, r2
 800b1d8:	0019      	movs	r1, r3
 800b1da:	f7f5 ff29 	bl	8001030 <__aeabi_ddiv>
 800b1de:	61a0      	str	r0, [r4, #24]
 800b1e0:	61e1      	str	r1, [r4, #28]
 800b1e2:	2d02      	cmp	r5, #2
 800b1e4:	d1e3      	bne.n	800b1ae <pow+0x1aa>
 800b1e6:	f7fe fd8d 	bl	8009d04 <__errno>
 800b1ea:	2321      	movs	r3, #33	; 0x21
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	e7e3      	b.n	800b1b8 <pow+0x1b4>
 800b1f0:	2203      	movs	r2, #3
 800b1f2:	6126      	str	r6, [r4, #16]
 800b1f4:	6167      	str	r7, [r4, #20]
 800b1f6:	9206      	str	r2, [sp, #24]
 800b1f8:	6063      	str	r3, [r4, #4]
 800b1fa:	6220      	str	r0, [r4, #32]
 800b1fc:	9a00      	ldr	r2, [sp, #0]
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	0030      	movs	r0, r6
 800b202:	60a2      	str	r2, [r4, #8]
 800b204:	60e3      	str	r3, [r4, #12]
 800b206:	0039      	movs	r1, r7
 800b208:	2200      	movs	r2, #0
 800b20a:	4b45      	ldr	r3, [pc, #276]	; (800b320 <pow+0x31c>)
 800b20c:	f7f6 fb1a 	bl	8001844 <__aeabi_dmul>
 800b210:	0006      	movs	r6, r0
 800b212:	000f      	movs	r7, r1
 800b214:	2d00      	cmp	r5, #0
 800b216:	d124      	bne.n	800b262 <pow+0x25e>
 800b218:	9800      	ldr	r0, [sp, #0]
 800b21a:	9901      	ldr	r1, [sp, #4]
 800b21c:	22e0      	movs	r2, #224	; 0xe0
 800b21e:	4b41      	ldr	r3, [pc, #260]	; (800b324 <pow+0x320>)
 800b220:	0612      	lsls	r2, r2, #24
 800b222:	61a2      	str	r2, [r4, #24]
 800b224:	61e3      	str	r3, [r4, #28]
 800b226:	2200      	movs	r2, #0
 800b228:	2300      	movs	r3, #0
 800b22a:	f7f5 f817 	bl	800025c <__aeabi_dcmplt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d030      	beq.n	800b294 <pow+0x290>
 800b232:	0030      	movs	r0, r6
 800b234:	0039      	movs	r1, r7
 800b236:	f000 fe37 	bl	800bea8 <rint>
 800b23a:	0032      	movs	r2, r6
 800b23c:	003b      	movs	r3, r7
 800b23e:	f7f5 f807 	bl	8000250 <__aeabi_dcmpeq>
 800b242:	2800      	cmp	r0, #0
 800b244:	d104      	bne.n	800b250 <pow+0x24c>
 800b246:	22e0      	movs	r2, #224	; 0xe0
 800b248:	4b37      	ldr	r3, [pc, #220]	; (800b328 <pow+0x324>)
 800b24a:	0612      	lsls	r2, r2, #24
 800b24c:	61a2      	str	r2, [r4, #24]
 800b24e:	61e3      	str	r3, [r4, #28]
 800b250:	4b2f      	ldr	r3, [pc, #188]	; (800b310 <pow+0x30c>)
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	b25b      	sxtb	r3, r3
 800b256:	2b02      	cmp	r3, #2
 800b258:	d11c      	bne.n	800b294 <pow+0x290>
 800b25a:	f7fe fd53 	bl	8009d04 <__errno>
 800b25e:	2322      	movs	r3, #34	; 0x22
 800b260:	e7c4      	b.n	800b1ec <pow+0x1e8>
 800b262:	2200      	movs	r2, #0
 800b264:	9800      	ldr	r0, [sp, #0]
 800b266:	9901      	ldr	r1, [sp, #4]
 800b268:	4b30      	ldr	r3, [pc, #192]	; (800b32c <pow+0x328>)
 800b26a:	61a2      	str	r2, [r4, #24]
 800b26c:	61e3      	str	r3, [r4, #28]
 800b26e:	2200      	movs	r2, #0
 800b270:	2300      	movs	r3, #0
 800b272:	f7f4 fff3 	bl	800025c <__aeabi_dcmplt>
 800b276:	2800      	cmp	r0, #0
 800b278:	d0ea      	beq.n	800b250 <pow+0x24c>
 800b27a:	0030      	movs	r0, r6
 800b27c:	0039      	movs	r1, r7
 800b27e:	f000 fe13 	bl	800bea8 <rint>
 800b282:	0032      	movs	r2, r6
 800b284:	003b      	movs	r3, r7
 800b286:	f7f4 ffe3 	bl	8000250 <__aeabi_dcmpeq>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d1e0      	bne.n	800b250 <pow+0x24c>
 800b28e:	2200      	movs	r2, #0
 800b290:	4b22      	ldr	r3, [pc, #136]	; (800b31c <pow+0x318>)
 800b292:	e7db      	b.n	800b24c <pow+0x248>
 800b294:	0020      	movs	r0, r4
 800b296:	f000 fdff 	bl	800be98 <matherr>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d000      	beq.n	800b2a0 <pow+0x29c>
 800b29e:	e78b      	b.n	800b1b8 <pow+0x1b4>
 800b2a0:	e7db      	b.n	800b25a <pow+0x256>
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	9802      	ldr	r0, [sp, #8]
 800b2a6:	9903      	ldr	r1, [sp, #12]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f7f4 ffd1 	bl	8000250 <__aeabi_dcmpeq>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d100      	bne.n	800b2b4 <pow+0x2b0>
 800b2b2:	e78c      	b.n	800b1ce <pow+0x1ca>
 800b2b4:	9800      	ldr	r0, [sp, #0]
 800b2b6:	9901      	ldr	r1, [sp, #4]
 800b2b8:	f000 fde6 	bl	800be88 <finite>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d100      	bne.n	800b2c2 <pow+0x2be>
 800b2c0:	e785      	b.n	800b1ce <pow+0x1ca>
 800b2c2:	0030      	movs	r0, r6
 800b2c4:	0039      	movs	r1, r7
 800b2c6:	f000 fddf 	bl	800be88 <finite>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d100      	bne.n	800b2d0 <pow+0x2cc>
 800b2ce:	e77e      	b.n	800b1ce <pow+0x1ca>
 800b2d0:	2304      	movs	r3, #4
 800b2d2:	9306      	str	r3, [sp, #24]
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <pow+0x310>)
 800b2d6:	960a      	str	r6, [sp, #40]	; 0x28
 800b2d8:	970b      	str	r7, [sp, #44]	; 0x2c
 800b2da:	9307      	str	r3, [sp, #28]
 800b2dc:	2300      	movs	r3, #0
 800b2de:	930e      	str	r3, [sp, #56]	; 0x38
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	9c01      	ldr	r4, [sp, #4]
 800b2e4:	9308      	str	r3, [sp, #32]
 800b2e6:	9409      	str	r4, [sp, #36]	; 0x24
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	2400      	movs	r4, #0
 800b2ec:	930c      	str	r3, [sp, #48]	; 0x30
 800b2ee:	940d      	str	r4, [sp, #52]	; 0x34
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <pow+0x30c>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	b25b      	sxtb	r3, r3
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d103      	bne.n	800b302 <pow+0x2fe>
 800b2fa:	f7fe fd03 	bl	8009d04 <__errno>
 800b2fe:	2322      	movs	r3, #34	; 0x22
 800b300:	e71f      	b.n	800b142 <pow+0x13e>
 800b302:	a806      	add	r0, sp, #24
 800b304:	f000 fdc8 	bl	800be98 <matherr>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d000      	beq.n	800b30e <pow+0x30a>
 800b30c:	e6e1      	b.n	800b0d2 <pow+0xce>
 800b30e:	e7f4      	b.n	800b2fa <pow+0x2f6>
 800b310:	200001e8 	.word	0x200001e8
 800b314:	0800c458 	.word	0x0800c458
 800b318:	3ff00000 	.word	0x3ff00000
 800b31c:	fff00000 	.word	0xfff00000
 800b320:	3fe00000 	.word	0x3fe00000
 800b324:	47efffff 	.word	0x47efffff
 800b328:	c7efffff 	.word	0xc7efffff
 800b32c:	7ff00000 	.word	0x7ff00000

0800b330 <__ieee754_pow>:
 800b330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b332:	b095      	sub	sp, #84	; 0x54
 800b334:	9202      	str	r2, [sp, #8]
 800b336:	9303      	str	r3, [sp, #12]
 800b338:	9b03      	ldr	r3, [sp, #12]
 800b33a:	000e      	movs	r6, r1
 800b33c:	9902      	ldr	r1, [sp, #8]
 800b33e:	005d      	lsls	r5, r3, #1
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	000b      	movs	r3, r1
 800b344:	086d      	lsrs	r5, r5, #1
 800b346:	0007      	movs	r7, r0
 800b348:	432b      	orrs	r3, r5
 800b34a:	d101      	bne.n	800b350 <__ieee754_pow+0x20>
 800b34c:	f000 fcad 	bl	800bcaa <__ieee754_pow+0x97a>
 800b350:	4b7e      	ldr	r3, [pc, #504]	; (800b54c <__ieee754_pow+0x21c>)
 800b352:	0074      	lsls	r4, r6, #1
 800b354:	9608      	str	r6, [sp, #32]
 800b356:	9000      	str	r0, [sp, #0]
 800b358:	0864      	lsrs	r4, r4, #1
 800b35a:	469c      	mov	ip, r3
 800b35c:	429c      	cmp	r4, r3
 800b35e:	dc0b      	bgt.n	800b378 <__ieee754_pow+0x48>
 800b360:	d104      	bne.n	800b36c <__ieee754_pow+0x3c>
 800b362:	2800      	cmp	r0, #0
 800b364:	d108      	bne.n	800b378 <__ieee754_pow+0x48>
 800b366:	42a5      	cmp	r5, r4
 800b368:	dc0c      	bgt.n	800b384 <__ieee754_pow+0x54>
 800b36a:	e001      	b.n	800b370 <__ieee754_pow+0x40>
 800b36c:	429d      	cmp	r5, r3
 800b36e:	dc03      	bgt.n	800b378 <__ieee754_pow+0x48>
 800b370:	4565      	cmp	r5, ip
 800b372:	d10d      	bne.n	800b390 <__ieee754_pow+0x60>
 800b374:	2900      	cmp	r1, #0
 800b376:	d00b      	beq.n	800b390 <__ieee754_pow+0x60>
 800b378:	4b75      	ldr	r3, [pc, #468]	; (800b550 <__ieee754_pow+0x220>)
 800b37a:	18e4      	adds	r4, r4, r3
 800b37c:	4327      	orrs	r7, r4
 800b37e:	d101      	bne.n	800b384 <__ieee754_pow+0x54>
 800b380:	f000 fc93 	bl	800bcaa <__ieee754_pow+0x97a>
 800b384:	4873      	ldr	r0, [pc, #460]	; (800b554 <__ieee754_pow+0x224>)
 800b386:	f000 fd89 	bl	800be9c <nan>
 800b38a:	9000      	str	r0, [sp, #0]
 800b38c:	9101      	str	r1, [sp, #4]
 800b38e:	e061      	b.n	800b454 <__ieee754_pow+0x124>
 800b390:	2300      	movs	r3, #0
 800b392:	9306      	str	r3, [sp, #24]
 800b394:	2e00      	cmp	r6, #0
 800b396:	da17      	bge.n	800b3c8 <__ieee754_pow+0x98>
 800b398:	4a6f      	ldr	r2, [pc, #444]	; (800b558 <__ieee754_pow+0x228>)
 800b39a:	4295      	cmp	r5, r2
 800b39c:	dc4d      	bgt.n	800b43a <__ieee754_pow+0x10a>
 800b39e:	4a6f      	ldr	r2, [pc, #444]	; (800b55c <__ieee754_pow+0x22c>)
 800b3a0:	4295      	cmp	r5, r2
 800b3a2:	dd11      	ble.n	800b3c8 <__ieee754_pow+0x98>
 800b3a4:	4b6e      	ldr	r3, [pc, #440]	; (800b560 <__ieee754_pow+0x230>)
 800b3a6:	152a      	asrs	r2, r5, #20
 800b3a8:	18d2      	adds	r2, r2, r3
 800b3aa:	2a14      	cmp	r2, #20
 800b3ac:	dd25      	ble.n	800b3fa <__ieee754_pow+0xca>
 800b3ae:	2034      	movs	r0, #52	; 0x34
 800b3b0:	1a82      	subs	r2, r0, r2
 800b3b2:	9802      	ldr	r0, [sp, #8]
 800b3b4:	40d0      	lsrs	r0, r2
 800b3b6:	0003      	movs	r3, r0
 800b3b8:	4093      	lsls	r3, r2
 800b3ba:	428b      	cmp	r3, r1
 800b3bc:	d104      	bne.n	800b3c8 <__ieee754_pow+0x98>
 800b3be:	2201      	movs	r2, #1
 800b3c0:	4010      	ands	r0, r2
 800b3c2:	1892      	adds	r2, r2, r2
 800b3c4:	1a13      	subs	r3, r2, r0
 800b3c6:	9306      	str	r3, [sp, #24]
 800b3c8:	2900      	cmp	r1, #0
 800b3ca:	d15e      	bne.n	800b48a <__ieee754_pow+0x15a>
 800b3cc:	4565      	cmp	r5, ip
 800b3ce:	d123      	bne.n	800b418 <__ieee754_pow+0xe8>
 800b3d0:	4b5f      	ldr	r3, [pc, #380]	; (800b550 <__ieee754_pow+0x220>)
 800b3d2:	18e3      	adds	r3, r4, r3
 800b3d4:	431f      	orrs	r7, r3
 800b3d6:	d101      	bne.n	800b3dc <__ieee754_pow+0xac>
 800b3d8:	f000 fc67 	bl	800bcaa <__ieee754_pow+0x97a>
 800b3dc:	4b5f      	ldr	r3, [pc, #380]	; (800b55c <__ieee754_pow+0x22c>)
 800b3de:	429c      	cmp	r4, r3
 800b3e0:	dd2d      	ble.n	800b43e <__ieee754_pow+0x10e>
 800b3e2:	9b02      	ldr	r3, [sp, #8]
 800b3e4:	9c03      	ldr	r4, [sp, #12]
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	9401      	str	r4, [sp, #4]
 800b3ea:	9b04      	ldr	r3, [sp, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	da31      	bge.n	800b454 <__ieee754_pow+0x124>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	2400      	movs	r4, #0
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	9401      	str	r4, [sp, #4]
 800b3f8:	e02c      	b.n	800b454 <__ieee754_pow+0x124>
 800b3fa:	2900      	cmp	r1, #0
 800b3fc:	d145      	bne.n	800b48a <__ieee754_pow+0x15a>
 800b3fe:	2314      	movs	r3, #20
 800b400:	1a9a      	subs	r2, r3, r2
 800b402:	002b      	movs	r3, r5
 800b404:	4113      	asrs	r3, r2
 800b406:	0019      	movs	r1, r3
 800b408:	4091      	lsls	r1, r2
 800b40a:	42a9      	cmp	r1, r5
 800b40c:	d104      	bne.n	800b418 <__ieee754_pow+0xe8>
 800b40e:	2201      	movs	r2, #1
 800b410:	4013      	ands	r3, r2
 800b412:	1892      	adds	r2, r2, r2
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	9306      	str	r3, [sp, #24]
 800b418:	4b52      	ldr	r3, [pc, #328]	; (800b564 <__ieee754_pow+0x234>)
 800b41a:	429d      	cmp	r5, r3
 800b41c:	d11e      	bne.n	800b45c <__ieee754_pow+0x12c>
 800b41e:	0038      	movs	r0, r7
 800b420:	0031      	movs	r1, r6
 800b422:	9b04      	ldr	r3, [sp, #16]
 800b424:	9000      	str	r0, [sp, #0]
 800b426:	9101      	str	r1, [sp, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	da13      	bge.n	800b454 <__ieee754_pow+0x124>
 800b42c:	003a      	movs	r2, r7
 800b42e:	0033      	movs	r3, r6
 800b430:	2000      	movs	r0, #0
 800b432:	494c      	ldr	r1, [pc, #304]	; (800b564 <__ieee754_pow+0x234>)
 800b434:	f7f5 fdfc 	bl	8001030 <__aeabi_ddiv>
 800b438:	e7a7      	b.n	800b38a <__ieee754_pow+0x5a>
 800b43a:	2302      	movs	r3, #2
 800b43c:	e7c3      	b.n	800b3c6 <__ieee754_pow+0x96>
 800b43e:	9b04      	ldr	r3, [sp, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	dad5      	bge.n	800b3f0 <__ieee754_pow+0xc0>
 800b444:	2280      	movs	r2, #128	; 0x80
 800b446:	0612      	lsls	r2, r2, #24
 800b448:	4694      	mov	ip, r2
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	4463      	add	r3, ip
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	9800      	ldr	r0, [sp, #0]
 800b456:	9901      	ldr	r1, [sp, #4]
 800b458:	b015      	add	sp, #84	; 0x54
 800b45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b45c:	2380      	movs	r3, #128	; 0x80
 800b45e:	9a04      	ldr	r2, [sp, #16]
 800b460:	05db      	lsls	r3, r3, #23
 800b462:	429a      	cmp	r2, r3
 800b464:	d106      	bne.n	800b474 <__ieee754_pow+0x144>
 800b466:	003a      	movs	r2, r7
 800b468:	0033      	movs	r3, r6
 800b46a:	0038      	movs	r0, r7
 800b46c:	0031      	movs	r1, r6
 800b46e:	f7f6 f9e9 	bl	8001844 <__aeabi_dmul>
 800b472:	e78a      	b.n	800b38a <__ieee754_pow+0x5a>
 800b474:	4b3c      	ldr	r3, [pc, #240]	; (800b568 <__ieee754_pow+0x238>)
 800b476:	9a04      	ldr	r2, [sp, #16]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d106      	bne.n	800b48a <__ieee754_pow+0x15a>
 800b47c:	2e00      	cmp	r6, #0
 800b47e:	db04      	blt.n	800b48a <__ieee754_pow+0x15a>
 800b480:	0038      	movs	r0, r7
 800b482:	0031      	movs	r1, r6
 800b484:	f000 fc4a 	bl	800bd1c <__ieee754_sqrt>
 800b488:	e77f      	b.n	800b38a <__ieee754_pow+0x5a>
 800b48a:	0038      	movs	r0, r7
 800b48c:	0031      	movs	r1, r6
 800b48e:	f000 fcf7 	bl	800be80 <fabs>
 800b492:	9000      	str	r0, [sp, #0]
 800b494:	9101      	str	r1, [sp, #4]
 800b496:	2f00      	cmp	r7, #0
 800b498:	d12e      	bne.n	800b4f8 <__ieee754_pow+0x1c8>
 800b49a:	2c00      	cmp	r4, #0
 800b49c:	d004      	beq.n	800b4a8 <__ieee754_pow+0x178>
 800b49e:	4a31      	ldr	r2, [pc, #196]	; (800b564 <__ieee754_pow+0x234>)
 800b4a0:	00b3      	lsls	r3, r6, #2
 800b4a2:	089b      	lsrs	r3, r3, #2
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d127      	bne.n	800b4f8 <__ieee754_pow+0x1c8>
 800b4a8:	9b04      	ldr	r3, [sp, #16]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da07      	bge.n	800b4be <__ieee754_pow+0x18e>
 800b4ae:	9a00      	ldr	r2, [sp, #0]
 800b4b0:	9b01      	ldr	r3, [sp, #4]
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	492b      	ldr	r1, [pc, #172]	; (800b564 <__ieee754_pow+0x234>)
 800b4b6:	f7f5 fdbb 	bl	8001030 <__aeabi_ddiv>
 800b4ba:	9000      	str	r0, [sp, #0]
 800b4bc:	9101      	str	r1, [sp, #4]
 800b4be:	9b08      	ldr	r3, [sp, #32]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dac7      	bge.n	800b454 <__ieee754_pow+0x124>
 800b4c4:	4b22      	ldr	r3, [pc, #136]	; (800b550 <__ieee754_pow+0x220>)
 800b4c6:	18e4      	adds	r4, r4, r3
 800b4c8:	9b06      	ldr	r3, [sp, #24]
 800b4ca:	431c      	orrs	r4, r3
 800b4cc:	d108      	bne.n	800b4e0 <__ieee754_pow+0x1b0>
 800b4ce:	9a00      	ldr	r2, [sp, #0]
 800b4d0:	9b01      	ldr	r3, [sp, #4]
 800b4d2:	0010      	movs	r0, r2
 800b4d4:	0019      	movs	r1, r3
 800b4d6:	f7f6 fc27 	bl	8001d28 <__aeabi_dsub>
 800b4da:	0002      	movs	r2, r0
 800b4dc:	000b      	movs	r3, r1
 800b4de:	e7a9      	b.n	800b434 <__ieee754_pow+0x104>
 800b4e0:	9b06      	ldr	r3, [sp, #24]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d1b6      	bne.n	800b454 <__ieee754_pow+0x124>
 800b4e6:	9800      	ldr	r0, [sp, #0]
 800b4e8:	2180      	movs	r1, #128	; 0x80
 800b4ea:	0002      	movs	r2, r0
 800b4ec:	9801      	ldr	r0, [sp, #4]
 800b4ee:	0609      	lsls	r1, r1, #24
 800b4f0:	1843      	adds	r3, r0, r1
 800b4f2:	9200      	str	r2, [sp, #0]
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	e7ad      	b.n	800b454 <__ieee754_pow+0x124>
 800b4f8:	0ff3      	lsrs	r3, r6, #31
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	9310      	str	r3, [sp, #64]	; 0x40
 800b4fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b500:	9b06      	ldr	r3, [sp, #24]
 800b502:	4313      	orrs	r3, r2
 800b504:	d104      	bne.n	800b510 <__ieee754_pow+0x1e0>
 800b506:	003a      	movs	r2, r7
 800b508:	0033      	movs	r3, r6
 800b50a:	0038      	movs	r0, r7
 800b50c:	0031      	movs	r1, r6
 800b50e:	e7e2      	b.n	800b4d6 <__ieee754_pow+0x1a6>
 800b510:	4b16      	ldr	r3, [pc, #88]	; (800b56c <__ieee754_pow+0x23c>)
 800b512:	429d      	cmp	r5, r3
 800b514:	dc00      	bgt.n	800b518 <__ieee754_pow+0x1e8>
 800b516:	e0f7      	b.n	800b708 <__ieee754_pow+0x3d8>
 800b518:	4b15      	ldr	r3, [pc, #84]	; (800b570 <__ieee754_pow+0x240>)
 800b51a:	429d      	cmp	r5, r3
 800b51c:	dd0b      	ble.n	800b536 <__ieee754_pow+0x206>
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <__ieee754_pow+0x22c>)
 800b520:	429c      	cmp	r4, r3
 800b522:	dc0e      	bgt.n	800b542 <__ieee754_pow+0x212>
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	db00      	blt.n	800b52c <__ieee754_pow+0x1fc>
 800b52a:	e761      	b.n	800b3f0 <__ieee754_pow+0xc0>
 800b52c:	4a11      	ldr	r2, [pc, #68]	; (800b574 <__ieee754_pow+0x244>)
 800b52e:	4b12      	ldr	r3, [pc, #72]	; (800b578 <__ieee754_pow+0x248>)
 800b530:	0010      	movs	r0, r2
 800b532:	0019      	movs	r1, r3
 800b534:	e79b      	b.n	800b46e <__ieee754_pow+0x13e>
 800b536:	4b11      	ldr	r3, [pc, #68]	; (800b57c <__ieee754_pow+0x24c>)
 800b538:	429c      	cmp	r4, r3
 800b53a:	ddf3      	ble.n	800b524 <__ieee754_pow+0x1f4>
 800b53c:	4b09      	ldr	r3, [pc, #36]	; (800b564 <__ieee754_pow+0x234>)
 800b53e:	429c      	cmp	r4, r3
 800b540:	dd1e      	ble.n	800b580 <__ieee754_pow+0x250>
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	dcf1      	bgt.n	800b52c <__ieee754_pow+0x1fc>
 800b548:	e752      	b.n	800b3f0 <__ieee754_pow+0xc0>
 800b54a:	46c0      	nop			; (mov r8, r8)
 800b54c:	7ff00000 	.word	0x7ff00000
 800b550:	c0100000 	.word	0xc0100000
 800b554:	0800c3ac 	.word	0x0800c3ac
 800b558:	433fffff 	.word	0x433fffff
 800b55c:	3fefffff 	.word	0x3fefffff
 800b560:	fffffc01 	.word	0xfffffc01
 800b564:	3ff00000 	.word	0x3ff00000
 800b568:	3fe00000 	.word	0x3fe00000
 800b56c:	41e00000 	.word	0x41e00000
 800b570:	43f00000 	.word	0x43f00000
 800b574:	8800759c 	.word	0x8800759c
 800b578:	7e37e43c 	.word	0x7e37e43c
 800b57c:	3feffffe 	.word	0x3feffffe
 800b580:	2200      	movs	r2, #0
 800b582:	9800      	ldr	r0, [sp, #0]
 800b584:	9901      	ldr	r1, [sp, #4]
 800b586:	4b52      	ldr	r3, [pc, #328]	; (800b6d0 <__ieee754_pow+0x3a0>)
 800b588:	f7f6 fbce 	bl	8001d28 <__aeabi_dsub>
 800b58c:	22c0      	movs	r2, #192	; 0xc0
 800b58e:	4b51      	ldr	r3, [pc, #324]	; (800b6d4 <__ieee754_pow+0x3a4>)
 800b590:	05d2      	lsls	r2, r2, #23
 800b592:	0006      	movs	r6, r0
 800b594:	000f      	movs	r7, r1
 800b596:	f7f6 f955 	bl	8001844 <__aeabi_dmul>
 800b59a:	4a4f      	ldr	r2, [pc, #316]	; (800b6d8 <__ieee754_pow+0x3a8>)
 800b59c:	9000      	str	r0, [sp, #0]
 800b59e:	9101      	str	r1, [sp, #4]
 800b5a0:	4b4e      	ldr	r3, [pc, #312]	; (800b6dc <__ieee754_pow+0x3ac>)
 800b5a2:	0030      	movs	r0, r6
 800b5a4:	0039      	movs	r1, r7
 800b5a6:	f7f6 f94d 	bl	8001844 <__aeabi_dmul>
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	9004      	str	r0, [sp, #16]
 800b5ae:	9105      	str	r1, [sp, #20]
 800b5b0:	4b4b      	ldr	r3, [pc, #300]	; (800b6e0 <__ieee754_pow+0x3b0>)
 800b5b2:	0030      	movs	r0, r6
 800b5b4:	0039      	movs	r1, r7
 800b5b6:	f7f6 f945 	bl	8001844 <__aeabi_dmul>
 800b5ba:	0002      	movs	r2, r0
 800b5bc:	000b      	movs	r3, r1
 800b5be:	4849      	ldr	r0, [pc, #292]	; (800b6e4 <__ieee754_pow+0x3b4>)
 800b5c0:	4949      	ldr	r1, [pc, #292]	; (800b6e8 <__ieee754_pow+0x3b8>)
 800b5c2:	f7f6 fbb1 	bl	8001d28 <__aeabi_dsub>
 800b5c6:	0032      	movs	r2, r6
 800b5c8:	003b      	movs	r3, r7
 800b5ca:	f7f6 f93b 	bl	8001844 <__aeabi_dmul>
 800b5ce:	0002      	movs	r2, r0
 800b5d0:	000b      	movs	r3, r1
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	4945      	ldr	r1, [pc, #276]	; (800b6ec <__ieee754_pow+0x3bc>)
 800b5d6:	f7f6 fba7 	bl	8001d28 <__aeabi_dsub>
 800b5da:	0032      	movs	r2, r6
 800b5dc:	0004      	movs	r4, r0
 800b5de:	000d      	movs	r5, r1
 800b5e0:	003b      	movs	r3, r7
 800b5e2:	0030      	movs	r0, r6
 800b5e4:	0039      	movs	r1, r7
 800b5e6:	f7f6 f92d 	bl	8001844 <__aeabi_dmul>
 800b5ea:	0002      	movs	r2, r0
 800b5ec:	000b      	movs	r3, r1
 800b5ee:	0020      	movs	r0, r4
 800b5f0:	0029      	movs	r1, r5
 800b5f2:	f7f6 f927 	bl	8001844 <__aeabi_dmul>
 800b5f6:	4a3e      	ldr	r2, [pc, #248]	; (800b6f0 <__ieee754_pow+0x3c0>)
 800b5f8:	4b36      	ldr	r3, [pc, #216]	; (800b6d4 <__ieee754_pow+0x3a4>)
 800b5fa:	f7f6 f923 	bl	8001844 <__aeabi_dmul>
 800b5fe:	0002      	movs	r2, r0
 800b600:	000b      	movs	r3, r1
 800b602:	9804      	ldr	r0, [sp, #16]
 800b604:	9905      	ldr	r1, [sp, #20]
 800b606:	f7f6 fb8f 	bl	8001d28 <__aeabi_dsub>
 800b60a:	0002      	movs	r2, r0
 800b60c:	000b      	movs	r3, r1
 800b60e:	0004      	movs	r4, r0
 800b610:	000d      	movs	r5, r1
 800b612:	9800      	ldr	r0, [sp, #0]
 800b614:	9901      	ldr	r1, [sp, #4]
 800b616:	f7f5 f9ef 	bl	80009f8 <__aeabi_dadd>
 800b61a:	9a00      	ldr	r2, [sp, #0]
 800b61c:	9b01      	ldr	r3, [sp, #4]
 800b61e:	2000      	movs	r0, #0
 800b620:	9004      	str	r0, [sp, #16]
 800b622:	9105      	str	r1, [sp, #20]
 800b624:	f7f6 fb80 	bl	8001d28 <__aeabi_dsub>
 800b628:	0002      	movs	r2, r0
 800b62a:	000b      	movs	r3, r1
 800b62c:	0020      	movs	r0, r4
 800b62e:	0029      	movs	r1, r5
 800b630:	f7f6 fb7a 	bl	8001d28 <__aeabi_dsub>
 800b634:	9b06      	ldr	r3, [sp, #24]
 800b636:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b638:	3b01      	subs	r3, #1
 800b63a:	0006      	movs	r6, r0
 800b63c:	000f      	movs	r7, r1
 800b63e:	4313      	orrs	r3, r2
 800b640:	d000      	beq.n	800b644 <__ieee754_pow+0x314>
 800b642:	e1de      	b.n	800ba02 <__ieee754_pow+0x6d2>
 800b644:	2300      	movs	r3, #0
 800b646:	4c2b      	ldr	r4, [pc, #172]	; (800b6f4 <__ieee754_pow+0x3c4>)
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	9401      	str	r4, [sp, #4]
 800b64c:	9c02      	ldr	r4, [sp, #8]
 800b64e:	9d03      	ldr	r5, [sp, #12]
 800b650:	9802      	ldr	r0, [sp, #8]
 800b652:	9903      	ldr	r1, [sp, #12]
 800b654:	2400      	movs	r4, #0
 800b656:	002b      	movs	r3, r5
 800b658:	0022      	movs	r2, r4
 800b65a:	f7f6 fb65 	bl	8001d28 <__aeabi_dsub>
 800b65e:	9a04      	ldr	r2, [sp, #16]
 800b660:	9b05      	ldr	r3, [sp, #20]
 800b662:	f7f6 f8ef 	bl	8001844 <__aeabi_dmul>
 800b666:	9a02      	ldr	r2, [sp, #8]
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	9006      	str	r0, [sp, #24]
 800b66c:	9107      	str	r1, [sp, #28]
 800b66e:	0030      	movs	r0, r6
 800b670:	0039      	movs	r1, r7
 800b672:	f7f6 f8e7 	bl	8001844 <__aeabi_dmul>
 800b676:	0002      	movs	r2, r0
 800b678:	000b      	movs	r3, r1
 800b67a:	9806      	ldr	r0, [sp, #24]
 800b67c:	9907      	ldr	r1, [sp, #28]
 800b67e:	f7f5 f9bb 	bl	80009f8 <__aeabi_dadd>
 800b682:	0022      	movs	r2, r4
 800b684:	002b      	movs	r3, r5
 800b686:	9006      	str	r0, [sp, #24]
 800b688:	9107      	str	r1, [sp, #28]
 800b68a:	9804      	ldr	r0, [sp, #16]
 800b68c:	9905      	ldr	r1, [sp, #20]
 800b68e:	f7f6 f8d9 	bl	8001844 <__aeabi_dmul>
 800b692:	0006      	movs	r6, r0
 800b694:	000f      	movs	r7, r1
 800b696:	000b      	movs	r3, r1
 800b698:	0002      	movs	r2, r0
 800b69a:	9806      	ldr	r0, [sp, #24]
 800b69c:	9907      	ldr	r1, [sp, #28]
 800b69e:	9604      	str	r6, [sp, #16]
 800b6a0:	9705      	str	r7, [sp, #20]
 800b6a2:	f7f5 f9a9 	bl	80009f8 <__aeabi_dadd>
 800b6a6:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <__ieee754_pow+0x3c8>)
 800b6a8:	0005      	movs	r5, r0
 800b6aa:	000c      	movs	r4, r1
 800b6ac:	9108      	str	r1, [sp, #32]
 800b6ae:	4299      	cmp	r1, r3
 800b6b0:	dc00      	bgt.n	800b6b4 <__ieee754_pow+0x384>
 800b6b2:	e2d8      	b.n	800bc66 <__ieee754_pow+0x936>
 800b6b4:	4b11      	ldr	r3, [pc, #68]	; (800b6fc <__ieee754_pow+0x3cc>)
 800b6b6:	18cb      	adds	r3, r1, r3
 800b6b8:	4303      	orrs	r3, r0
 800b6ba:	d100      	bne.n	800b6be <__ieee754_pow+0x38e>
 800b6bc:	e1da      	b.n	800ba74 <__ieee754_pow+0x744>
 800b6be:	9800      	ldr	r0, [sp, #0]
 800b6c0:	9901      	ldr	r1, [sp, #4]
 800b6c2:	4a0f      	ldr	r2, [pc, #60]	; (800b700 <__ieee754_pow+0x3d0>)
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	; (800b704 <__ieee754_pow+0x3d4>)
 800b6c6:	f7f6 f8bd 	bl	8001844 <__aeabi_dmul>
 800b6ca:	4a0d      	ldr	r2, [pc, #52]	; (800b700 <__ieee754_pow+0x3d0>)
 800b6cc:	4b0d      	ldr	r3, [pc, #52]	; (800b704 <__ieee754_pow+0x3d4>)
 800b6ce:	e6ce      	b.n	800b46e <__ieee754_pow+0x13e>
 800b6d0:	3ff00000 	.word	0x3ff00000
 800b6d4:	3ff71547 	.word	0x3ff71547
 800b6d8:	f85ddf44 	.word	0xf85ddf44
 800b6dc:	3e54ae0b 	.word	0x3e54ae0b
 800b6e0:	3fd00000 	.word	0x3fd00000
 800b6e4:	55555555 	.word	0x55555555
 800b6e8:	3fd55555 	.word	0x3fd55555
 800b6ec:	3fe00000 	.word	0x3fe00000
 800b6f0:	652b82fe 	.word	0x652b82fe
 800b6f4:	bff00000 	.word	0xbff00000
 800b6f8:	408fffff 	.word	0x408fffff
 800b6fc:	bf700000 	.word	0xbf700000
 800b700:	8800759c 	.word	0x8800759c
 800b704:	7e37e43c 	.word	0x7e37e43c
 800b708:	4bbf      	ldr	r3, [pc, #764]	; (800ba08 <__ieee754_pow+0x6d8>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	429c      	cmp	r4, r3
 800b70e:	dc0a      	bgt.n	800b726 <__ieee754_pow+0x3f6>
 800b710:	9800      	ldr	r0, [sp, #0]
 800b712:	9901      	ldr	r1, [sp, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	4bbd      	ldr	r3, [pc, #756]	; (800ba0c <__ieee754_pow+0x6dc>)
 800b718:	f7f6 f894 	bl	8001844 <__aeabi_dmul>
 800b71c:	2235      	movs	r2, #53	; 0x35
 800b71e:	9000      	str	r0, [sp, #0]
 800b720:	9101      	str	r1, [sp, #4]
 800b722:	9c01      	ldr	r4, [sp, #4]
 800b724:	4252      	negs	r2, r2
 800b726:	49ba      	ldr	r1, [pc, #744]	; (800ba10 <__ieee754_pow+0x6e0>)
 800b728:	1523      	asrs	r3, r4, #20
 800b72a:	185b      	adds	r3, r3, r1
 800b72c:	189b      	adds	r3, r3, r2
 800b72e:	0324      	lsls	r4, r4, #12
 800b730:	4db8      	ldr	r5, [pc, #736]	; (800ba14 <__ieee754_pow+0x6e4>)
 800b732:	4ab9      	ldr	r2, [pc, #740]	; (800ba18 <__ieee754_pow+0x6e8>)
 800b734:	930d      	str	r3, [sp, #52]	; 0x34
 800b736:	0b23      	lsrs	r3, r4, #12
 800b738:	431d      	orrs	r5, r3
 800b73a:	2400      	movs	r4, #0
 800b73c:	4293      	cmp	r3, r2
 800b73e:	dd09      	ble.n	800b754 <__ieee754_pow+0x424>
 800b740:	4ab6      	ldr	r2, [pc, #728]	; (800ba1c <__ieee754_pow+0x6ec>)
 800b742:	3401      	adds	r4, #1
 800b744:	4293      	cmp	r3, r2
 800b746:	dd05      	ble.n	800b754 <__ieee754_pow+0x424>
 800b748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b74a:	191b      	adds	r3, r3, r4
 800b74c:	2400      	movs	r4, #0
 800b74e:	930d      	str	r3, [sp, #52]	; 0x34
 800b750:	4bb3      	ldr	r3, [pc, #716]	; (800ba20 <__ieee754_pow+0x6f0>)
 800b752:	18ed      	adds	r5, r5, r3
 800b754:	9800      	ldr	r0, [sp, #0]
 800b756:	9901      	ldr	r1, [sp, #4]
 800b758:	0029      	movs	r1, r5
 800b75a:	00e3      	lsls	r3, r4, #3
 800b75c:	9311      	str	r3, [sp, #68]	; 0x44
 800b75e:	4bb1      	ldr	r3, [pc, #708]	; (800ba24 <__ieee754_pow+0x6f4>)
 800b760:	00e2      	lsls	r2, r4, #3
 800b762:	189b      	adds	r3, r3, r2
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	900e      	str	r0, [sp, #56]	; 0x38
 800b76a:	910f      	str	r1, [sp, #60]	; 0x3c
 800b76c:	920a      	str	r2, [sp, #40]	; 0x28
 800b76e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b770:	f7f6 fada 	bl	8001d28 <__aeabi_dsub>
 800b774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b778:	0006      	movs	r6, r0
 800b77a:	000f      	movs	r7, r1
 800b77c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b77e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b780:	f7f5 f93a 	bl	80009f8 <__aeabi_dadd>
 800b784:	0002      	movs	r2, r0
 800b786:	000b      	movs	r3, r1
 800b788:	2000      	movs	r0, #0
 800b78a:	49a2      	ldr	r1, [pc, #648]	; (800ba14 <__ieee754_pow+0x6e4>)
 800b78c:	f7f5 fc50 	bl	8001030 <__aeabi_ddiv>
 800b790:	9012      	str	r0, [sp, #72]	; 0x48
 800b792:	9113      	str	r1, [sp, #76]	; 0x4c
 800b794:	0002      	movs	r2, r0
 800b796:	000b      	movs	r3, r1
 800b798:	0030      	movs	r0, r6
 800b79a:	0039      	movs	r1, r7
 800b79c:	f7f6 f852 	bl	8001844 <__aeabi_dmul>
 800b7a0:	9008      	str	r0, [sp, #32]
 800b7a2:	9109      	str	r1, [sp, #36]	; 0x24
 800b7a4:	9a08      	ldr	r2, [sp, #32]
 800b7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a8:	2180      	movs	r1, #128	; 0x80
 800b7aa:	9204      	str	r2, [sp, #16]
 800b7ac:	9305      	str	r3, [sp, #20]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	0589      	lsls	r1, r1, #22
 800b7b2:	106d      	asrs	r5, r5, #1
 800b7b4:	430d      	orrs	r5, r1
 800b7b6:	2180      	movs	r1, #128	; 0x80
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9a04      	ldr	r2, [sp, #16]
 800b7bc:	9b05      	ldr	r3, [sp, #20]
 800b7be:	9200      	str	r2, [sp, #0]
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	0309      	lsls	r1, r1, #12
 800b7c6:	186d      	adds	r5, r5, r1
 800b7c8:	04a4      	lsls	r4, r4, #18
 800b7ca:	192b      	adds	r3, r5, r4
 800b7cc:	9800      	ldr	r0, [sp, #0]
 800b7ce:	9901      	ldr	r1, [sp, #4]
 800b7d0:	0014      	movs	r4, r2
 800b7d2:	001d      	movs	r5, r3
 800b7d4:	f7f6 f836 	bl	8001844 <__aeabi_dmul>
 800b7d8:	0002      	movs	r2, r0
 800b7da:	000b      	movs	r3, r1
 800b7dc:	0030      	movs	r0, r6
 800b7de:	0039      	movs	r1, r7
 800b7e0:	f7f6 faa2 	bl	8001d28 <__aeabi_dsub>
 800b7e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7e8:	0006      	movs	r6, r0
 800b7ea:	000f      	movs	r7, r1
 800b7ec:	0020      	movs	r0, r4
 800b7ee:	0029      	movs	r1, r5
 800b7f0:	f7f6 fa9a 	bl	8001d28 <__aeabi_dsub>
 800b7f4:	0002      	movs	r2, r0
 800b7f6:	000b      	movs	r3, r1
 800b7f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b7fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b7fc:	f7f6 fa94 	bl	8001d28 <__aeabi_dsub>
 800b800:	9a00      	ldr	r2, [sp, #0]
 800b802:	9b01      	ldr	r3, [sp, #4]
 800b804:	f7f6 f81e 	bl	8001844 <__aeabi_dmul>
 800b808:	0002      	movs	r2, r0
 800b80a:	000b      	movs	r3, r1
 800b80c:	0030      	movs	r0, r6
 800b80e:	0039      	movs	r1, r7
 800b810:	f7f6 fa8a 	bl	8001d28 <__aeabi_dsub>
 800b814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b818:	f7f6 f814 	bl	8001844 <__aeabi_dmul>
 800b81c:	9a08      	ldr	r2, [sp, #32]
 800b81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b820:	900a      	str	r0, [sp, #40]	; 0x28
 800b822:	910b      	str	r1, [sp, #44]	; 0x2c
 800b824:	0010      	movs	r0, r2
 800b826:	0019      	movs	r1, r3
 800b828:	f7f6 f80c 	bl	8001844 <__aeabi_dmul>
 800b82c:	0006      	movs	r6, r0
 800b82e:	000f      	movs	r7, r1
 800b830:	4a7d      	ldr	r2, [pc, #500]	; (800ba28 <__ieee754_pow+0x6f8>)
 800b832:	4b7e      	ldr	r3, [pc, #504]	; (800ba2c <__ieee754_pow+0x6fc>)
 800b834:	f7f6 f806 	bl	8001844 <__aeabi_dmul>
 800b838:	4a7d      	ldr	r2, [pc, #500]	; (800ba30 <__ieee754_pow+0x700>)
 800b83a:	4b7e      	ldr	r3, [pc, #504]	; (800ba34 <__ieee754_pow+0x704>)
 800b83c:	f7f5 f8dc 	bl	80009f8 <__aeabi_dadd>
 800b840:	0032      	movs	r2, r6
 800b842:	003b      	movs	r3, r7
 800b844:	f7f5 fffe 	bl	8001844 <__aeabi_dmul>
 800b848:	4a7b      	ldr	r2, [pc, #492]	; (800ba38 <__ieee754_pow+0x708>)
 800b84a:	4b7c      	ldr	r3, [pc, #496]	; (800ba3c <__ieee754_pow+0x70c>)
 800b84c:	f7f5 f8d4 	bl	80009f8 <__aeabi_dadd>
 800b850:	0032      	movs	r2, r6
 800b852:	003b      	movs	r3, r7
 800b854:	f7f5 fff6 	bl	8001844 <__aeabi_dmul>
 800b858:	4a79      	ldr	r2, [pc, #484]	; (800ba40 <__ieee754_pow+0x710>)
 800b85a:	4b7a      	ldr	r3, [pc, #488]	; (800ba44 <__ieee754_pow+0x714>)
 800b85c:	f7f5 f8cc 	bl	80009f8 <__aeabi_dadd>
 800b860:	0032      	movs	r2, r6
 800b862:	003b      	movs	r3, r7
 800b864:	f7f5 ffee 	bl	8001844 <__aeabi_dmul>
 800b868:	4a77      	ldr	r2, [pc, #476]	; (800ba48 <__ieee754_pow+0x718>)
 800b86a:	4b78      	ldr	r3, [pc, #480]	; (800ba4c <__ieee754_pow+0x71c>)
 800b86c:	f7f5 f8c4 	bl	80009f8 <__aeabi_dadd>
 800b870:	0032      	movs	r2, r6
 800b872:	003b      	movs	r3, r7
 800b874:	f7f5 ffe6 	bl	8001844 <__aeabi_dmul>
 800b878:	4a75      	ldr	r2, [pc, #468]	; (800ba50 <__ieee754_pow+0x720>)
 800b87a:	4b76      	ldr	r3, [pc, #472]	; (800ba54 <__ieee754_pow+0x724>)
 800b87c:	f7f5 f8bc 	bl	80009f8 <__aeabi_dadd>
 800b880:	0032      	movs	r2, r6
 800b882:	0004      	movs	r4, r0
 800b884:	000d      	movs	r5, r1
 800b886:	003b      	movs	r3, r7
 800b888:	0030      	movs	r0, r6
 800b88a:	0039      	movs	r1, r7
 800b88c:	f7f5 ffda 	bl	8001844 <__aeabi_dmul>
 800b890:	0002      	movs	r2, r0
 800b892:	000b      	movs	r3, r1
 800b894:	0020      	movs	r0, r4
 800b896:	0029      	movs	r1, r5
 800b898:	f7f5 ffd4 	bl	8001844 <__aeabi_dmul>
 800b89c:	9a00      	ldr	r2, [sp, #0]
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	0004      	movs	r4, r0
 800b8a2:	000d      	movs	r5, r1
 800b8a4:	9808      	ldr	r0, [sp, #32]
 800b8a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8a8:	f7f5 f8a6 	bl	80009f8 <__aeabi_dadd>
 800b8ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8b0:	f7f5 ffc8 	bl	8001844 <__aeabi_dmul>
 800b8b4:	0022      	movs	r2, r4
 800b8b6:	002b      	movs	r3, r5
 800b8b8:	f7f5 f89e 	bl	80009f8 <__aeabi_dadd>
 800b8bc:	9a00      	ldr	r2, [sp, #0]
 800b8be:	9b01      	ldr	r3, [sp, #4]
 800b8c0:	900e      	str	r0, [sp, #56]	; 0x38
 800b8c2:	910f      	str	r1, [sp, #60]	; 0x3c
 800b8c4:	0010      	movs	r0, r2
 800b8c6:	0019      	movs	r1, r3
 800b8c8:	f7f5 ffbc 	bl	8001844 <__aeabi_dmul>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4b62      	ldr	r3, [pc, #392]	; (800ba58 <__ieee754_pow+0x728>)
 800b8d0:	0004      	movs	r4, r0
 800b8d2:	000d      	movs	r5, r1
 800b8d4:	f7f5 f890 	bl	80009f8 <__aeabi_dadd>
 800b8d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8dc:	f7f5 f88c 	bl	80009f8 <__aeabi_dadd>
 800b8e0:	9e04      	ldr	r6, [sp, #16]
 800b8e2:	000f      	movs	r7, r1
 800b8e4:	0032      	movs	r2, r6
 800b8e6:	000b      	movs	r3, r1
 800b8e8:	9800      	ldr	r0, [sp, #0]
 800b8ea:	9901      	ldr	r1, [sp, #4]
 800b8ec:	f7f5 ffaa 	bl	8001844 <__aeabi_dmul>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	9000      	str	r0, [sp, #0]
 800b8f4:	9101      	str	r1, [sp, #4]
 800b8f6:	4b58      	ldr	r3, [pc, #352]	; (800ba58 <__ieee754_pow+0x728>)
 800b8f8:	0030      	movs	r0, r6
 800b8fa:	0039      	movs	r1, r7
 800b8fc:	f7f6 fa14 	bl	8001d28 <__aeabi_dsub>
 800b900:	0022      	movs	r2, r4
 800b902:	002b      	movs	r3, r5
 800b904:	f7f6 fa10 	bl	8001d28 <__aeabi_dsub>
 800b908:	0002      	movs	r2, r0
 800b90a:	000b      	movs	r3, r1
 800b90c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b90e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b910:	f7f6 fa0a 	bl	8001d28 <__aeabi_dsub>
 800b914:	9a08      	ldr	r2, [sp, #32]
 800b916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b918:	f7f5 ff94 	bl	8001844 <__aeabi_dmul>
 800b91c:	0032      	movs	r2, r6
 800b91e:	0004      	movs	r4, r0
 800b920:	000d      	movs	r5, r1
 800b922:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b926:	003b      	movs	r3, r7
 800b928:	f7f5 ff8c 	bl	8001844 <__aeabi_dmul>
 800b92c:	0002      	movs	r2, r0
 800b92e:	000b      	movs	r3, r1
 800b930:	0020      	movs	r0, r4
 800b932:	0029      	movs	r1, r5
 800b934:	f7f5 f860 	bl	80009f8 <__aeabi_dadd>
 800b938:	0004      	movs	r4, r0
 800b93a:	000d      	movs	r5, r1
 800b93c:	0002      	movs	r2, r0
 800b93e:	000b      	movs	r3, r1
 800b940:	9800      	ldr	r0, [sp, #0]
 800b942:	9901      	ldr	r1, [sp, #4]
 800b944:	f7f5 f858 	bl	80009f8 <__aeabi_dadd>
 800b948:	22e0      	movs	r2, #224	; 0xe0
 800b94a:	9e04      	ldr	r6, [sp, #16]
 800b94c:	0612      	lsls	r2, r2, #24
 800b94e:	4b43      	ldr	r3, [pc, #268]	; (800ba5c <__ieee754_pow+0x72c>)
 800b950:	0030      	movs	r0, r6
 800b952:	000f      	movs	r7, r1
 800b954:	f7f5 ff76 	bl	8001844 <__aeabi_dmul>
 800b958:	9008      	str	r0, [sp, #32]
 800b95a:	9109      	str	r1, [sp, #36]	; 0x24
 800b95c:	9a00      	ldr	r2, [sp, #0]
 800b95e:	9b01      	ldr	r3, [sp, #4]
 800b960:	0030      	movs	r0, r6
 800b962:	0039      	movs	r1, r7
 800b964:	f7f6 f9e0 	bl	8001d28 <__aeabi_dsub>
 800b968:	0002      	movs	r2, r0
 800b96a:	000b      	movs	r3, r1
 800b96c:	0020      	movs	r0, r4
 800b96e:	0029      	movs	r1, r5
 800b970:	f7f6 f9da 	bl	8001d28 <__aeabi_dsub>
 800b974:	4a3a      	ldr	r2, [pc, #232]	; (800ba60 <__ieee754_pow+0x730>)
 800b976:	4b39      	ldr	r3, [pc, #228]	; (800ba5c <__ieee754_pow+0x72c>)
 800b978:	f7f5 ff64 	bl	8001844 <__aeabi_dmul>
 800b97c:	4a39      	ldr	r2, [pc, #228]	; (800ba64 <__ieee754_pow+0x734>)
 800b97e:	0004      	movs	r4, r0
 800b980:	000d      	movs	r5, r1
 800b982:	4b39      	ldr	r3, [pc, #228]	; (800ba68 <__ieee754_pow+0x738>)
 800b984:	0030      	movs	r0, r6
 800b986:	0039      	movs	r1, r7
 800b988:	f7f5 ff5c 	bl	8001844 <__aeabi_dmul>
 800b98c:	0002      	movs	r2, r0
 800b98e:	000b      	movs	r3, r1
 800b990:	0020      	movs	r0, r4
 800b992:	0029      	movs	r1, r5
 800b994:	f7f5 f830 	bl	80009f8 <__aeabi_dadd>
 800b998:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b99a:	4b34      	ldr	r3, [pc, #208]	; (800ba6c <__ieee754_pow+0x73c>)
 800b99c:	189b      	adds	r3, r3, r2
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f7f5 f829 	bl	80009f8 <__aeabi_dadd>
 800b9a6:	9000      	str	r0, [sp, #0]
 800b9a8:	9101      	str	r1, [sp, #4]
 800b9aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b9ac:	f7f6 fd56 	bl	800245c <__aeabi_i2d>
 800b9b0:	0004      	movs	r4, r0
 800b9b2:	000d      	movs	r5, r1
 800b9b4:	9808      	ldr	r0, [sp, #32]
 800b9b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b9ba:	4b2d      	ldr	r3, [pc, #180]	; (800ba70 <__ieee754_pow+0x740>)
 800b9bc:	189b      	adds	r3, r3, r2
 800b9be:	681e      	ldr	r6, [r3, #0]
 800b9c0:	685f      	ldr	r7, [r3, #4]
 800b9c2:	9a00      	ldr	r2, [sp, #0]
 800b9c4:	9b01      	ldr	r3, [sp, #4]
 800b9c6:	f7f5 f817 	bl	80009f8 <__aeabi_dadd>
 800b9ca:	0032      	movs	r2, r6
 800b9cc:	003b      	movs	r3, r7
 800b9ce:	f7f5 f813 	bl	80009f8 <__aeabi_dadd>
 800b9d2:	0022      	movs	r2, r4
 800b9d4:	002b      	movs	r3, r5
 800b9d6:	f7f5 f80f 	bl	80009f8 <__aeabi_dadd>
 800b9da:	9804      	ldr	r0, [sp, #16]
 800b9dc:	0022      	movs	r2, r4
 800b9de:	002b      	movs	r3, r5
 800b9e0:	9004      	str	r0, [sp, #16]
 800b9e2:	9105      	str	r1, [sp, #20]
 800b9e4:	f7f6 f9a0 	bl	8001d28 <__aeabi_dsub>
 800b9e8:	0032      	movs	r2, r6
 800b9ea:	003b      	movs	r3, r7
 800b9ec:	f7f6 f99c 	bl	8001d28 <__aeabi_dsub>
 800b9f0:	9a08      	ldr	r2, [sp, #32]
 800b9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f4:	f7f6 f998 	bl	8001d28 <__aeabi_dsub>
 800b9f8:	0002      	movs	r2, r0
 800b9fa:	000b      	movs	r3, r1
 800b9fc:	9800      	ldr	r0, [sp, #0]
 800b9fe:	9901      	ldr	r1, [sp, #4]
 800ba00:	e616      	b.n	800b630 <__ieee754_pow+0x300>
 800ba02:	2300      	movs	r3, #0
 800ba04:	4c03      	ldr	r4, [pc, #12]	; (800ba14 <__ieee754_pow+0x6e4>)
 800ba06:	e61f      	b.n	800b648 <__ieee754_pow+0x318>
 800ba08:	000fffff 	.word	0x000fffff
 800ba0c:	43400000 	.word	0x43400000
 800ba10:	fffffc01 	.word	0xfffffc01
 800ba14:	3ff00000 	.word	0x3ff00000
 800ba18:	0003988e 	.word	0x0003988e
 800ba1c:	000bb679 	.word	0x000bb679
 800ba20:	fff00000 	.word	0xfff00000
 800ba24:	0800c460 	.word	0x0800c460
 800ba28:	4a454eef 	.word	0x4a454eef
 800ba2c:	3fca7e28 	.word	0x3fca7e28
 800ba30:	93c9db65 	.word	0x93c9db65
 800ba34:	3fcd864a 	.word	0x3fcd864a
 800ba38:	a91d4101 	.word	0xa91d4101
 800ba3c:	3fd17460 	.word	0x3fd17460
 800ba40:	518f264d 	.word	0x518f264d
 800ba44:	3fd55555 	.word	0x3fd55555
 800ba48:	db6fabff 	.word	0xdb6fabff
 800ba4c:	3fdb6db6 	.word	0x3fdb6db6
 800ba50:	33333303 	.word	0x33333303
 800ba54:	3fe33333 	.word	0x3fe33333
 800ba58:	40080000 	.word	0x40080000
 800ba5c:	3feec709 	.word	0x3feec709
 800ba60:	dc3a03fd 	.word	0xdc3a03fd
 800ba64:	145b01f5 	.word	0x145b01f5
 800ba68:	be3e2fe0 	.word	0xbe3e2fe0
 800ba6c:	0800c480 	.word	0x0800c480
 800ba70:	0800c470 	.word	0x0800c470
 800ba74:	4a8f      	ldr	r2, [pc, #572]	; (800bcb4 <__ieee754_pow+0x984>)
 800ba76:	4b90      	ldr	r3, [pc, #576]	; (800bcb8 <__ieee754_pow+0x988>)
 800ba78:	9806      	ldr	r0, [sp, #24]
 800ba7a:	9907      	ldr	r1, [sp, #28]
 800ba7c:	f7f4 ffbc 	bl	80009f8 <__aeabi_dadd>
 800ba80:	0032      	movs	r2, r6
 800ba82:	9002      	str	r0, [sp, #8]
 800ba84:	9103      	str	r1, [sp, #12]
 800ba86:	003b      	movs	r3, r7
 800ba88:	0028      	movs	r0, r5
 800ba8a:	0021      	movs	r1, r4
 800ba8c:	f7f6 f94c 	bl	8001d28 <__aeabi_dsub>
 800ba90:	0002      	movs	r2, r0
 800ba92:	000b      	movs	r3, r1
 800ba94:	9802      	ldr	r0, [sp, #8]
 800ba96:	9903      	ldr	r1, [sp, #12]
 800ba98:	f7f4 fbf4 	bl	8000284 <__aeabi_dcmpgt>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d000      	beq.n	800baa2 <__ieee754_pow+0x772>
 800baa0:	e60d      	b.n	800b6be <__ieee754_pow+0x38e>
 800baa2:	2100      	movs	r1, #0
 800baa4:	4a85      	ldr	r2, [pc, #532]	; (800bcbc <__ieee754_pow+0x98c>)
 800baa6:	0063      	lsls	r3, r4, #1
 800baa8:	085b      	lsrs	r3, r3, #1
 800baaa:	9102      	str	r1, [sp, #8]
 800baac:	4293      	cmp	r3, r2
 800baae:	dd25      	ble.n	800bafc <__ieee754_pow+0x7cc>
 800bab0:	4a83      	ldr	r2, [pc, #524]	; (800bcc0 <__ieee754_pow+0x990>)
 800bab2:	151b      	asrs	r3, r3, #20
 800bab4:	189b      	adds	r3, r3, r2
 800bab6:	2280      	movs	r2, #128	; 0x80
 800bab8:	0352      	lsls	r2, r2, #13
 800baba:	4694      	mov	ip, r2
 800babc:	411a      	asrs	r2, r3
 800babe:	1914      	adds	r4, r2, r4
 800bac0:	0060      	lsls	r0, r4, #1
 800bac2:	4b80      	ldr	r3, [pc, #512]	; (800bcc4 <__ieee754_pow+0x994>)
 800bac4:	0d40      	lsrs	r0, r0, #21
 800bac6:	4d80      	ldr	r5, [pc, #512]	; (800bcc8 <__ieee754_pow+0x998>)
 800bac8:	18c0      	adds	r0, r0, r3
 800baca:	4105      	asrs	r5, r0
 800bacc:	0021      	movs	r1, r4
 800bace:	43a9      	bics	r1, r5
 800bad0:	000b      	movs	r3, r1
 800bad2:	4661      	mov	r1, ip
 800bad4:	0324      	lsls	r4, r4, #12
 800bad6:	0b24      	lsrs	r4, r4, #12
 800bad8:	4321      	orrs	r1, r4
 800bada:	2414      	movs	r4, #20
 800badc:	1a20      	subs	r0, r4, r0
 800bade:	4101      	asrs	r1, r0
 800bae0:	9102      	str	r1, [sp, #8]
 800bae2:	9908      	ldr	r1, [sp, #32]
 800bae4:	2200      	movs	r2, #0
 800bae6:	2900      	cmp	r1, #0
 800bae8:	da02      	bge.n	800baf0 <__ieee754_pow+0x7c0>
 800baea:	9902      	ldr	r1, [sp, #8]
 800baec:	4249      	negs	r1, r1
 800baee:	9102      	str	r1, [sp, #8]
 800baf0:	0030      	movs	r0, r6
 800baf2:	0039      	movs	r1, r7
 800baf4:	f7f6 f918 	bl	8001d28 <__aeabi_dsub>
 800baf8:	9004      	str	r0, [sp, #16]
 800bafa:	9105      	str	r1, [sp, #20]
 800bafc:	9a06      	ldr	r2, [sp, #24]
 800bafe:	9b07      	ldr	r3, [sp, #28]
 800bb00:	9804      	ldr	r0, [sp, #16]
 800bb02:	9905      	ldr	r1, [sp, #20]
 800bb04:	2600      	movs	r6, #0
 800bb06:	f7f4 ff77 	bl	80009f8 <__aeabi_dadd>
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	4b6f      	ldr	r3, [pc, #444]	; (800bccc <__ieee754_pow+0x99c>)
 800bb0e:	0030      	movs	r0, r6
 800bb10:	000f      	movs	r7, r1
 800bb12:	f7f5 fe97 	bl	8001844 <__aeabi_dmul>
 800bb16:	9a04      	ldr	r2, [sp, #16]
 800bb18:	9b05      	ldr	r3, [sp, #20]
 800bb1a:	9008      	str	r0, [sp, #32]
 800bb1c:	9109      	str	r1, [sp, #36]	; 0x24
 800bb1e:	0030      	movs	r0, r6
 800bb20:	0039      	movs	r1, r7
 800bb22:	f7f6 f901 	bl	8001d28 <__aeabi_dsub>
 800bb26:	0002      	movs	r2, r0
 800bb28:	000b      	movs	r3, r1
 800bb2a:	9806      	ldr	r0, [sp, #24]
 800bb2c:	9907      	ldr	r1, [sp, #28]
 800bb2e:	f7f6 f8fb 	bl	8001d28 <__aeabi_dsub>
 800bb32:	4a67      	ldr	r2, [pc, #412]	; (800bcd0 <__ieee754_pow+0x9a0>)
 800bb34:	4b67      	ldr	r3, [pc, #412]	; (800bcd4 <__ieee754_pow+0x9a4>)
 800bb36:	f7f5 fe85 	bl	8001844 <__aeabi_dmul>
 800bb3a:	4a67      	ldr	r2, [pc, #412]	; (800bcd8 <__ieee754_pow+0x9a8>)
 800bb3c:	0004      	movs	r4, r0
 800bb3e:	000d      	movs	r5, r1
 800bb40:	4b66      	ldr	r3, [pc, #408]	; (800bcdc <__ieee754_pow+0x9ac>)
 800bb42:	0030      	movs	r0, r6
 800bb44:	0039      	movs	r1, r7
 800bb46:	f7f5 fe7d 	bl	8001844 <__aeabi_dmul>
 800bb4a:	0002      	movs	r2, r0
 800bb4c:	000b      	movs	r3, r1
 800bb4e:	0020      	movs	r0, r4
 800bb50:	0029      	movs	r1, r5
 800bb52:	f7f4 ff51 	bl	80009f8 <__aeabi_dadd>
 800bb56:	0004      	movs	r4, r0
 800bb58:	000d      	movs	r5, r1
 800bb5a:	0002      	movs	r2, r0
 800bb5c:	000b      	movs	r3, r1
 800bb5e:	9808      	ldr	r0, [sp, #32]
 800bb60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb62:	f7f4 ff49 	bl	80009f8 <__aeabi_dadd>
 800bb66:	9a08      	ldr	r2, [sp, #32]
 800bb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6a:	0006      	movs	r6, r0
 800bb6c:	000f      	movs	r7, r1
 800bb6e:	f7f6 f8db 	bl	8001d28 <__aeabi_dsub>
 800bb72:	0002      	movs	r2, r0
 800bb74:	000b      	movs	r3, r1
 800bb76:	0020      	movs	r0, r4
 800bb78:	0029      	movs	r1, r5
 800bb7a:	f7f6 f8d5 	bl	8001d28 <__aeabi_dsub>
 800bb7e:	0032      	movs	r2, r6
 800bb80:	9004      	str	r0, [sp, #16]
 800bb82:	9105      	str	r1, [sp, #20]
 800bb84:	003b      	movs	r3, r7
 800bb86:	0030      	movs	r0, r6
 800bb88:	0039      	movs	r1, r7
 800bb8a:	f7f5 fe5b 	bl	8001844 <__aeabi_dmul>
 800bb8e:	0004      	movs	r4, r0
 800bb90:	000d      	movs	r5, r1
 800bb92:	4a53      	ldr	r2, [pc, #332]	; (800bce0 <__ieee754_pow+0x9b0>)
 800bb94:	4b53      	ldr	r3, [pc, #332]	; (800bce4 <__ieee754_pow+0x9b4>)
 800bb96:	f7f5 fe55 	bl	8001844 <__aeabi_dmul>
 800bb9a:	4a53      	ldr	r2, [pc, #332]	; (800bce8 <__ieee754_pow+0x9b8>)
 800bb9c:	4b53      	ldr	r3, [pc, #332]	; (800bcec <__ieee754_pow+0x9bc>)
 800bb9e:	f7f6 f8c3 	bl	8001d28 <__aeabi_dsub>
 800bba2:	0022      	movs	r2, r4
 800bba4:	002b      	movs	r3, r5
 800bba6:	f7f5 fe4d 	bl	8001844 <__aeabi_dmul>
 800bbaa:	4a51      	ldr	r2, [pc, #324]	; (800bcf0 <__ieee754_pow+0x9c0>)
 800bbac:	4b51      	ldr	r3, [pc, #324]	; (800bcf4 <__ieee754_pow+0x9c4>)
 800bbae:	f7f4 ff23 	bl	80009f8 <__aeabi_dadd>
 800bbb2:	0022      	movs	r2, r4
 800bbb4:	002b      	movs	r3, r5
 800bbb6:	f7f5 fe45 	bl	8001844 <__aeabi_dmul>
 800bbba:	4a4f      	ldr	r2, [pc, #316]	; (800bcf8 <__ieee754_pow+0x9c8>)
 800bbbc:	4b4f      	ldr	r3, [pc, #316]	; (800bcfc <__ieee754_pow+0x9cc>)
 800bbbe:	f7f6 f8b3 	bl	8001d28 <__aeabi_dsub>
 800bbc2:	0022      	movs	r2, r4
 800bbc4:	002b      	movs	r3, r5
 800bbc6:	f7f5 fe3d 	bl	8001844 <__aeabi_dmul>
 800bbca:	4a4d      	ldr	r2, [pc, #308]	; (800bd00 <__ieee754_pow+0x9d0>)
 800bbcc:	4b4d      	ldr	r3, [pc, #308]	; (800bd04 <__ieee754_pow+0x9d4>)
 800bbce:	f7f4 ff13 	bl	80009f8 <__aeabi_dadd>
 800bbd2:	0022      	movs	r2, r4
 800bbd4:	002b      	movs	r3, r5
 800bbd6:	f7f5 fe35 	bl	8001844 <__aeabi_dmul>
 800bbda:	0002      	movs	r2, r0
 800bbdc:	000b      	movs	r3, r1
 800bbde:	0030      	movs	r0, r6
 800bbe0:	0039      	movs	r1, r7
 800bbe2:	f7f6 f8a1 	bl	8001d28 <__aeabi_dsub>
 800bbe6:	0004      	movs	r4, r0
 800bbe8:	000d      	movs	r5, r1
 800bbea:	0002      	movs	r2, r0
 800bbec:	000b      	movs	r3, r1
 800bbee:	0030      	movs	r0, r6
 800bbf0:	0039      	movs	r1, r7
 800bbf2:	f7f5 fe27 	bl	8001844 <__aeabi_dmul>
 800bbf6:	2380      	movs	r3, #128	; 0x80
 800bbf8:	9006      	str	r0, [sp, #24]
 800bbfa:	9107      	str	r1, [sp, #28]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	05db      	lsls	r3, r3, #23
 800bc00:	0020      	movs	r0, r4
 800bc02:	0029      	movs	r1, r5
 800bc04:	f7f6 f890 	bl	8001d28 <__aeabi_dsub>
 800bc08:	0002      	movs	r2, r0
 800bc0a:	000b      	movs	r3, r1
 800bc0c:	9806      	ldr	r0, [sp, #24]
 800bc0e:	9907      	ldr	r1, [sp, #28]
 800bc10:	f7f5 fa0e 	bl	8001030 <__aeabi_ddiv>
 800bc14:	9a04      	ldr	r2, [sp, #16]
 800bc16:	9b05      	ldr	r3, [sp, #20]
 800bc18:	0004      	movs	r4, r0
 800bc1a:	000d      	movs	r5, r1
 800bc1c:	0030      	movs	r0, r6
 800bc1e:	0039      	movs	r1, r7
 800bc20:	f7f5 fe10 	bl	8001844 <__aeabi_dmul>
 800bc24:	9a04      	ldr	r2, [sp, #16]
 800bc26:	9b05      	ldr	r3, [sp, #20]
 800bc28:	f7f4 fee6 	bl	80009f8 <__aeabi_dadd>
 800bc2c:	0002      	movs	r2, r0
 800bc2e:	000b      	movs	r3, r1
 800bc30:	0020      	movs	r0, r4
 800bc32:	0029      	movs	r1, r5
 800bc34:	f7f6 f878 	bl	8001d28 <__aeabi_dsub>
 800bc38:	0032      	movs	r2, r6
 800bc3a:	003b      	movs	r3, r7
 800bc3c:	f7f6 f874 	bl	8001d28 <__aeabi_dsub>
 800bc40:	0002      	movs	r2, r0
 800bc42:	000b      	movs	r3, r1
 800bc44:	2000      	movs	r0, #0
 800bc46:	4930      	ldr	r1, [pc, #192]	; (800bd08 <__ieee754_pow+0x9d8>)
 800bc48:	f7f6 f86e 	bl	8001d28 <__aeabi_dsub>
 800bc4c:	9b02      	ldr	r3, [sp, #8]
 800bc4e:	051b      	lsls	r3, r3, #20
 800bc50:	185b      	adds	r3, r3, r1
 800bc52:	151a      	asrs	r2, r3, #20
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	dc26      	bgt.n	800bca6 <__ieee754_pow+0x976>
 800bc58:	9a02      	ldr	r2, [sp, #8]
 800bc5a:	f000 f9ad 	bl	800bfb8 <scalbn>
 800bc5e:	9a00      	ldr	r2, [sp, #0]
 800bc60:	9b01      	ldr	r3, [sp, #4]
 800bc62:	f7ff fc04 	bl	800b46e <__ieee754_pow+0x13e>
 800bc66:	4a29      	ldr	r2, [pc, #164]	; (800bd0c <__ieee754_pow+0x9dc>)
 800bc68:	004b      	lsls	r3, r1, #1
 800bc6a:	085b      	lsrs	r3, r3, #1
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	dc00      	bgt.n	800bc72 <__ieee754_pow+0x942>
 800bc70:	e717      	b.n	800baa2 <__ieee754_pow+0x772>
 800bc72:	4b27      	ldr	r3, [pc, #156]	; (800bd10 <__ieee754_pow+0x9e0>)
 800bc74:	18cb      	adds	r3, r1, r3
 800bc76:	4303      	orrs	r3, r0
 800bc78:	d009      	beq.n	800bc8e <__ieee754_pow+0x95e>
 800bc7a:	9800      	ldr	r0, [sp, #0]
 800bc7c:	9901      	ldr	r1, [sp, #4]
 800bc7e:	4a25      	ldr	r2, [pc, #148]	; (800bd14 <__ieee754_pow+0x9e4>)
 800bc80:	4b25      	ldr	r3, [pc, #148]	; (800bd18 <__ieee754_pow+0x9e8>)
 800bc82:	f7f5 fddf 	bl	8001844 <__aeabi_dmul>
 800bc86:	4a23      	ldr	r2, [pc, #140]	; (800bd14 <__ieee754_pow+0x9e4>)
 800bc88:	4b23      	ldr	r3, [pc, #140]	; (800bd18 <__ieee754_pow+0x9e8>)
 800bc8a:	f7ff fbf0 	bl	800b46e <__ieee754_pow+0x13e>
 800bc8e:	0032      	movs	r2, r6
 800bc90:	003b      	movs	r3, r7
 800bc92:	f7f6 f849 	bl	8001d28 <__aeabi_dsub>
 800bc96:	9a06      	ldr	r2, [sp, #24]
 800bc98:	9b07      	ldr	r3, [sp, #28]
 800bc9a:	f7f4 fafd 	bl	8000298 <__aeabi_dcmpge>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d100      	bne.n	800bca4 <__ieee754_pow+0x974>
 800bca2:	e6fe      	b.n	800baa2 <__ieee754_pow+0x772>
 800bca4:	e7e9      	b.n	800bc7a <__ieee754_pow+0x94a>
 800bca6:	0019      	movs	r1, r3
 800bca8:	e7d9      	b.n	800bc5e <__ieee754_pow+0x92e>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4c16      	ldr	r4, [pc, #88]	; (800bd08 <__ieee754_pow+0x9d8>)
 800bcae:	f7ff fba1 	bl	800b3f4 <__ieee754_pow+0xc4>
 800bcb2:	46c0      	nop			; (mov r8, r8)
 800bcb4:	652b82fe 	.word	0x652b82fe
 800bcb8:	3c971547 	.word	0x3c971547
 800bcbc:	3fe00000 	.word	0x3fe00000
 800bcc0:	fffffc02 	.word	0xfffffc02
 800bcc4:	fffffc01 	.word	0xfffffc01
 800bcc8:	000fffff 	.word	0x000fffff
 800bccc:	3fe62e43 	.word	0x3fe62e43
 800bcd0:	fefa39ef 	.word	0xfefa39ef
 800bcd4:	3fe62e42 	.word	0x3fe62e42
 800bcd8:	0ca86c39 	.word	0x0ca86c39
 800bcdc:	be205c61 	.word	0xbe205c61
 800bce0:	72bea4d0 	.word	0x72bea4d0
 800bce4:	3e663769 	.word	0x3e663769
 800bce8:	c5d26bf1 	.word	0xc5d26bf1
 800bcec:	3ebbbd41 	.word	0x3ebbbd41
 800bcf0:	af25de2c 	.word	0xaf25de2c
 800bcf4:	3f11566a 	.word	0x3f11566a
 800bcf8:	16bebd93 	.word	0x16bebd93
 800bcfc:	3f66c16c 	.word	0x3f66c16c
 800bd00:	5555553e 	.word	0x5555553e
 800bd04:	3fc55555 	.word	0x3fc55555
 800bd08:	3ff00000 	.word	0x3ff00000
 800bd0c:	4090cbff 	.word	0x4090cbff
 800bd10:	3f6f3400 	.word	0x3f6f3400
 800bd14:	c2f8f359 	.word	0xc2f8f359
 800bd18:	01a56e1f 	.word	0x01a56e1f

0800bd1c <__ieee754_sqrt>:
 800bd1c:	4b55      	ldr	r3, [pc, #340]	; (800be74 <__ieee754_sqrt+0x158>)
 800bd1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd20:	001a      	movs	r2, r3
 800bd22:	0005      	movs	r5, r0
 800bd24:	000c      	movs	r4, r1
 800bd26:	400a      	ands	r2, r1
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d10f      	bne.n	800bd4c <__ieee754_sqrt+0x30>
 800bd2c:	0002      	movs	r2, r0
 800bd2e:	000b      	movs	r3, r1
 800bd30:	f7f5 fd88 	bl	8001844 <__aeabi_dmul>
 800bd34:	0002      	movs	r2, r0
 800bd36:	000b      	movs	r3, r1
 800bd38:	0028      	movs	r0, r5
 800bd3a:	0021      	movs	r1, r4
 800bd3c:	f7f4 fe5c 	bl	80009f8 <__aeabi_dadd>
 800bd40:	0005      	movs	r5, r0
 800bd42:	000c      	movs	r4, r1
 800bd44:	0028      	movs	r0, r5
 800bd46:	0021      	movs	r1, r4
 800bd48:	b003      	add	sp, #12
 800bd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4c:	0002      	movs	r2, r0
 800bd4e:	2900      	cmp	r1, #0
 800bd50:	dc10      	bgt.n	800bd74 <__ieee754_sqrt+0x58>
 800bd52:	004b      	lsls	r3, r1, #1
 800bd54:	085b      	lsrs	r3, r3, #1
 800bd56:	4303      	orrs	r3, r0
 800bd58:	d0f4      	beq.n	800bd44 <__ieee754_sqrt+0x28>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	4281      	cmp	r1, r0
 800bd5e:	d100      	bne.n	800bd62 <__ieee754_sqrt+0x46>
 800bd60:	e07f      	b.n	800be62 <__ieee754_sqrt+0x146>
 800bd62:	000b      	movs	r3, r1
 800bd64:	0028      	movs	r0, r5
 800bd66:	f7f5 ffdf 	bl	8001d28 <__aeabi_dsub>
 800bd6a:	0002      	movs	r2, r0
 800bd6c:	000b      	movs	r3, r1
 800bd6e:	f7f5 f95f 	bl	8001030 <__aeabi_ddiv>
 800bd72:	e7e5      	b.n	800bd40 <__ieee754_sqrt+0x24>
 800bd74:	1508      	asrs	r0, r1, #20
 800bd76:	d074      	beq.n	800be62 <__ieee754_sqrt+0x146>
 800bd78:	4b3f      	ldr	r3, [pc, #252]	; (800be78 <__ieee754_sqrt+0x15c>)
 800bd7a:	0309      	lsls	r1, r1, #12
 800bd7c:	18c0      	adds	r0, r0, r3
 800bd7e:	2380      	movs	r3, #128	; 0x80
 800bd80:	0b09      	lsrs	r1, r1, #12
 800bd82:	035b      	lsls	r3, r3, #13
 800bd84:	4319      	orrs	r1, r3
 800bd86:	07c3      	lsls	r3, r0, #31
 800bd88:	d503      	bpl.n	800bd92 <__ieee754_sqrt+0x76>
 800bd8a:	0fd3      	lsrs	r3, r2, #31
 800bd8c:	0049      	lsls	r1, r1, #1
 800bd8e:	18c9      	adds	r1, r1, r3
 800bd90:	0052      	lsls	r2, r2, #1
 800bd92:	2400      	movs	r4, #0
 800bd94:	1043      	asrs	r3, r0, #1
 800bd96:	0049      	lsls	r1, r1, #1
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	2580      	movs	r5, #128	; 0x80
 800bd9c:	0fd3      	lsrs	r3, r2, #31
 800bd9e:	18cb      	adds	r3, r1, r3
 800bda0:	0020      	movs	r0, r4
 800bda2:	2116      	movs	r1, #22
 800bda4:	0052      	lsls	r2, r2, #1
 800bda6:	03ad      	lsls	r5, r5, #14
 800bda8:	1946      	adds	r6, r0, r5
 800bdaa:	429e      	cmp	r6, r3
 800bdac:	dc02      	bgt.n	800bdb4 <__ieee754_sqrt+0x98>
 800bdae:	1970      	adds	r0, r6, r5
 800bdb0:	1b9b      	subs	r3, r3, r6
 800bdb2:	1964      	adds	r4, r4, r5
 800bdb4:	0fd6      	lsrs	r6, r2, #31
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	3901      	subs	r1, #1
 800bdba:	199b      	adds	r3, r3, r6
 800bdbc:	0052      	lsls	r2, r2, #1
 800bdbe:	086d      	lsrs	r5, r5, #1
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	d1f1      	bne.n	800bda8 <__ieee754_sqrt+0x8c>
 800bdc4:	2520      	movs	r5, #32
 800bdc6:	2680      	movs	r6, #128	; 0x80
 800bdc8:	46ac      	mov	ip, r5
 800bdca:	9100      	str	r1, [sp, #0]
 800bdcc:	0636      	lsls	r6, r6, #24
 800bdce:	9d00      	ldr	r5, [sp, #0]
 800bdd0:	1977      	adds	r7, r6, r5
 800bdd2:	4283      	cmp	r3, r0
 800bdd4:	dc02      	bgt.n	800bddc <__ieee754_sqrt+0xc0>
 800bdd6:	d112      	bne.n	800bdfe <__ieee754_sqrt+0xe2>
 800bdd8:	4297      	cmp	r7, r2
 800bdda:	d810      	bhi.n	800bdfe <__ieee754_sqrt+0xe2>
 800bddc:	19bd      	adds	r5, r7, r6
 800bdde:	9500      	str	r5, [sp, #0]
 800bde0:	0005      	movs	r5, r0
 800bde2:	2f00      	cmp	r7, #0
 800bde4:	da03      	bge.n	800bdee <__ieee754_sqrt+0xd2>
 800bde6:	9d00      	ldr	r5, [sp, #0]
 800bde8:	43ed      	mvns	r5, r5
 800bdea:	0fed      	lsrs	r5, r5, #31
 800bdec:	1945      	adds	r5, r0, r5
 800bdee:	1a1b      	subs	r3, r3, r0
 800bdf0:	42ba      	cmp	r2, r7
 800bdf2:	4180      	sbcs	r0, r0
 800bdf4:	4240      	negs	r0, r0
 800bdf6:	1a1b      	subs	r3, r3, r0
 800bdf8:	0028      	movs	r0, r5
 800bdfa:	1bd2      	subs	r2, r2, r7
 800bdfc:	1989      	adds	r1, r1, r6
 800bdfe:	0fd5      	lsrs	r5, r2, #31
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	18eb      	adds	r3, r5, r3
 800be04:	2501      	movs	r5, #1
 800be06:	426d      	negs	r5, r5
 800be08:	44ac      	add	ip, r5
 800be0a:	4665      	mov	r5, ip
 800be0c:	0052      	lsls	r2, r2, #1
 800be0e:	0876      	lsrs	r6, r6, #1
 800be10:	2d00      	cmp	r5, #0
 800be12:	d1dc      	bne.n	800bdce <__ieee754_sqrt+0xb2>
 800be14:	4313      	orrs	r3, r2
 800be16:	d003      	beq.n	800be20 <__ieee754_sqrt+0x104>
 800be18:	1c4b      	adds	r3, r1, #1
 800be1a:	d127      	bne.n	800be6c <__ieee754_sqrt+0x150>
 800be1c:	4661      	mov	r1, ip
 800be1e:	3401      	adds	r4, #1
 800be20:	4b16      	ldr	r3, [pc, #88]	; (800be7c <__ieee754_sqrt+0x160>)
 800be22:	1060      	asrs	r0, r4, #1
 800be24:	18c0      	adds	r0, r0, r3
 800be26:	0849      	lsrs	r1, r1, #1
 800be28:	07e3      	lsls	r3, r4, #31
 800be2a:	d502      	bpl.n	800be32 <__ieee754_sqrt+0x116>
 800be2c:	2380      	movs	r3, #128	; 0x80
 800be2e:	061b      	lsls	r3, r3, #24
 800be30:	4319      	orrs	r1, r3
 800be32:	9b01      	ldr	r3, [sp, #4]
 800be34:	000d      	movs	r5, r1
 800be36:	051c      	lsls	r4, r3, #20
 800be38:	1823      	adds	r3, r4, r0
 800be3a:	001c      	movs	r4, r3
 800be3c:	e782      	b.n	800bd44 <__ieee754_sqrt+0x28>
 800be3e:	0ad1      	lsrs	r1, r2, #11
 800be40:	3b15      	subs	r3, #21
 800be42:	0552      	lsls	r2, r2, #21
 800be44:	2900      	cmp	r1, #0
 800be46:	d0fa      	beq.n	800be3e <__ieee754_sqrt+0x122>
 800be48:	2480      	movs	r4, #128	; 0x80
 800be4a:	0364      	lsls	r4, r4, #13
 800be4c:	4221      	tst	r1, r4
 800be4e:	d00a      	beq.n	800be66 <__ieee754_sqrt+0x14a>
 800be50:	2420      	movs	r4, #32
 800be52:	0016      	movs	r6, r2
 800be54:	1a24      	subs	r4, r4, r0
 800be56:	40e6      	lsrs	r6, r4
 800be58:	1e45      	subs	r5, r0, #1
 800be5a:	4082      	lsls	r2, r0
 800be5c:	4331      	orrs	r1, r6
 800be5e:	1b58      	subs	r0, r3, r5
 800be60:	e78a      	b.n	800bd78 <__ieee754_sqrt+0x5c>
 800be62:	2300      	movs	r3, #0
 800be64:	e7ee      	b.n	800be44 <__ieee754_sqrt+0x128>
 800be66:	0049      	lsls	r1, r1, #1
 800be68:	3001      	adds	r0, #1
 800be6a:	e7ef      	b.n	800be4c <__ieee754_sqrt+0x130>
 800be6c:	2301      	movs	r3, #1
 800be6e:	3101      	adds	r1, #1
 800be70:	4399      	bics	r1, r3
 800be72:	e7d5      	b.n	800be20 <__ieee754_sqrt+0x104>
 800be74:	7ff00000 	.word	0x7ff00000
 800be78:	fffffc01 	.word	0xfffffc01
 800be7c:	3fe00000 	.word	0x3fe00000

0800be80 <fabs>:
 800be80:	0049      	lsls	r1, r1, #1
 800be82:	084b      	lsrs	r3, r1, #1
 800be84:	0019      	movs	r1, r3
 800be86:	4770      	bx	lr

0800be88 <finite>:
 800be88:	0048      	lsls	r0, r1, #1
 800be8a:	4b02      	ldr	r3, [pc, #8]	; (800be94 <finite+0xc>)
 800be8c:	0840      	lsrs	r0, r0, #1
 800be8e:	18c0      	adds	r0, r0, r3
 800be90:	0fc0      	lsrs	r0, r0, #31
 800be92:	4770      	bx	lr
 800be94:	80100000 	.word	0x80100000

0800be98 <matherr>:
 800be98:	2000      	movs	r0, #0
 800be9a:	4770      	bx	lr

0800be9c <nan>:
 800be9c:	2000      	movs	r0, #0
 800be9e:	4901      	ldr	r1, [pc, #4]	; (800bea4 <nan+0x8>)
 800bea0:	4770      	bx	lr
 800bea2:	46c0      	nop			; (mov r8, r8)
 800bea4:	7ff80000 	.word	0x7ff80000

0800bea8 <rint>:
 800bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beaa:	004a      	lsls	r2, r1, #1
 800beac:	4e3e      	ldr	r6, [pc, #248]	; (800bfa8 <rint+0x100>)
 800beae:	0d52      	lsrs	r2, r2, #21
 800beb0:	b085      	sub	sp, #20
 800beb2:	1996      	adds	r6, r2, r6
 800beb4:	000d      	movs	r5, r1
 800beb6:	9101      	str	r1, [sp, #4]
 800beb8:	0003      	movs	r3, r0
 800beba:	0fcc      	lsrs	r4, r1, #31
 800bebc:	2e13      	cmp	r6, #19
 800bebe:	dc57      	bgt.n	800bf70 <rint+0xc8>
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	da2a      	bge.n	800bf1a <rint+0x72>
 800bec4:	004a      	lsls	r2, r1, #1
 800bec6:	0852      	lsrs	r2, r2, #1
 800bec8:	4302      	orrs	r2, r0
 800beca:	d024      	beq.n	800bf16 <rint+0x6e>
 800becc:	030a      	lsls	r2, r1, #12
 800bece:	0b12      	lsrs	r2, r2, #12
 800bed0:	4302      	orrs	r2, r0
 800bed2:	4253      	negs	r3, r2
 800bed4:	4313      	orrs	r3, r2
 800bed6:	2280      	movs	r2, #128	; 0x80
 800bed8:	0c4d      	lsrs	r5, r1, #17
 800beda:	0312      	lsls	r2, r2, #12
 800bedc:	0b1b      	lsrs	r3, r3, #12
 800bede:	4013      	ands	r3, r2
 800bee0:	046d      	lsls	r5, r5, #17
 800bee2:	432b      	orrs	r3, r5
 800bee4:	0019      	movs	r1, r3
 800bee6:	4b31      	ldr	r3, [pc, #196]	; (800bfac <rint+0x104>)
 800bee8:	00e2      	lsls	r2, r4, #3
 800beea:	189b      	adds	r3, r3, r2
 800beec:	681e      	ldr	r6, [r3, #0]
 800beee:	685f      	ldr	r7, [r3, #4]
 800bef0:	0002      	movs	r2, r0
 800bef2:	000b      	movs	r3, r1
 800bef4:	0030      	movs	r0, r6
 800bef6:	0039      	movs	r1, r7
 800bef8:	f7f4 fd7e 	bl	80009f8 <__aeabi_dadd>
 800befc:	9002      	str	r0, [sp, #8]
 800befe:	9103      	str	r1, [sp, #12]
 800bf00:	9802      	ldr	r0, [sp, #8]
 800bf02:	9903      	ldr	r1, [sp, #12]
 800bf04:	003b      	movs	r3, r7
 800bf06:	0032      	movs	r2, r6
 800bf08:	f7f5 ff0e 	bl	8001d28 <__aeabi_dsub>
 800bf0c:	004b      	lsls	r3, r1, #1
 800bf0e:	085b      	lsrs	r3, r3, #1
 800bf10:	07e4      	lsls	r4, r4, #31
 800bf12:	4323      	orrs	r3, r4
 800bf14:	0019      	movs	r1, r3
 800bf16:	b005      	add	sp, #20
 800bf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf1a:	4a25      	ldr	r2, [pc, #148]	; (800bfb0 <rint+0x108>)
 800bf1c:	4132      	asrs	r2, r6
 800bf1e:	0017      	movs	r7, r2
 800bf20:	400f      	ands	r7, r1
 800bf22:	4307      	orrs	r7, r0
 800bf24:	d0f7      	beq.n	800bf16 <rint+0x6e>
 800bf26:	0852      	lsrs	r2, r2, #1
 800bf28:	0011      	movs	r1, r2
 800bf2a:	4029      	ands	r1, r5
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	d00a      	beq.n	800bf46 <rint+0x9e>
 800bf30:	2300      	movs	r3, #0
 800bf32:	2e13      	cmp	r6, #19
 800bf34:	d101      	bne.n	800bf3a <rint+0x92>
 800bf36:	2380      	movs	r3, #128	; 0x80
 800bf38:	061b      	lsls	r3, r3, #24
 800bf3a:	2780      	movs	r7, #128	; 0x80
 800bf3c:	02ff      	lsls	r7, r7, #11
 800bf3e:	4137      	asrs	r7, r6
 800bf40:	4395      	bics	r5, r2
 800bf42:	432f      	orrs	r7, r5
 800bf44:	9701      	str	r7, [sp, #4]
 800bf46:	9901      	ldr	r1, [sp, #4]
 800bf48:	001a      	movs	r2, r3
 800bf4a:	000b      	movs	r3, r1
 800bf4c:	4917      	ldr	r1, [pc, #92]	; (800bfac <rint+0x104>)
 800bf4e:	00e4      	lsls	r4, r4, #3
 800bf50:	190c      	adds	r4, r1, r4
 800bf52:	6865      	ldr	r5, [r4, #4]
 800bf54:	6824      	ldr	r4, [r4, #0]
 800bf56:	0020      	movs	r0, r4
 800bf58:	0029      	movs	r1, r5
 800bf5a:	f7f4 fd4d 	bl	80009f8 <__aeabi_dadd>
 800bf5e:	9002      	str	r0, [sp, #8]
 800bf60:	9103      	str	r1, [sp, #12]
 800bf62:	9802      	ldr	r0, [sp, #8]
 800bf64:	9903      	ldr	r1, [sp, #12]
 800bf66:	0022      	movs	r2, r4
 800bf68:	002b      	movs	r3, r5
 800bf6a:	f7f5 fedd 	bl	8001d28 <__aeabi_dsub>
 800bf6e:	e7d2      	b.n	800bf16 <rint+0x6e>
 800bf70:	2e33      	cmp	r6, #51	; 0x33
 800bf72:	dd08      	ble.n	800bf86 <rint+0xde>
 800bf74:	2380      	movs	r3, #128	; 0x80
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	429e      	cmp	r6, r3
 800bf7a:	d1cc      	bne.n	800bf16 <rint+0x6e>
 800bf7c:	0002      	movs	r2, r0
 800bf7e:	000b      	movs	r3, r1
 800bf80:	f7f4 fd3a 	bl	80009f8 <__aeabi_dadd>
 800bf84:	e7c7      	b.n	800bf16 <rint+0x6e>
 800bf86:	2601      	movs	r6, #1
 800bf88:	4d0a      	ldr	r5, [pc, #40]	; (800bfb4 <rint+0x10c>)
 800bf8a:	4276      	negs	r6, r6
 800bf8c:	1952      	adds	r2, r2, r5
 800bf8e:	40d6      	lsrs	r6, r2
 800bf90:	4206      	tst	r6, r0
 800bf92:	d0c0      	beq.n	800bf16 <rint+0x6e>
 800bf94:	0876      	lsrs	r6, r6, #1
 800bf96:	4206      	tst	r6, r0
 800bf98:	d0d5      	beq.n	800bf46 <rint+0x9e>
 800bf9a:	2180      	movs	r1, #128	; 0x80
 800bf9c:	05c9      	lsls	r1, r1, #23
 800bf9e:	4111      	asrs	r1, r2
 800bfa0:	43b3      	bics	r3, r6
 800bfa2:	430b      	orrs	r3, r1
 800bfa4:	e7cf      	b.n	800bf46 <rint+0x9e>
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	fffffc01 	.word	0xfffffc01
 800bfac:	0800c490 	.word	0x0800c490
 800bfb0:	000fffff 	.word	0x000fffff
 800bfb4:	fffffbed 	.word	0xfffffbed

0800bfb8 <scalbn>:
 800bfb8:	004b      	lsls	r3, r1, #1
 800bfba:	b570      	push	{r4, r5, r6, lr}
 800bfbc:	0d5b      	lsrs	r3, r3, #21
 800bfbe:	0014      	movs	r4, r2
 800bfc0:	000a      	movs	r2, r1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10d      	bne.n	800bfe2 <scalbn+0x2a>
 800bfc6:	004b      	lsls	r3, r1, #1
 800bfc8:	085b      	lsrs	r3, r3, #1
 800bfca:	4303      	orrs	r3, r0
 800bfcc:	d010      	beq.n	800bff0 <scalbn+0x38>
 800bfce:	4b21      	ldr	r3, [pc, #132]	; (800c054 <scalbn+0x9c>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f7f5 fc37 	bl	8001844 <__aeabi_dmul>
 800bfd6:	4b20      	ldr	r3, [pc, #128]	; (800c058 <scalbn+0xa0>)
 800bfd8:	429c      	cmp	r4, r3
 800bfda:	da0a      	bge.n	800bff2 <scalbn+0x3a>
 800bfdc:	4a1f      	ldr	r2, [pc, #124]	; (800c05c <scalbn+0xa4>)
 800bfde:	4b20      	ldr	r3, [pc, #128]	; (800c060 <scalbn+0xa8>)
 800bfe0:	e017      	b.n	800c012 <scalbn+0x5a>
 800bfe2:	4d20      	ldr	r5, [pc, #128]	; (800c064 <scalbn+0xac>)
 800bfe4:	42ab      	cmp	r3, r5
 800bfe6:	d108      	bne.n	800bffa <scalbn+0x42>
 800bfe8:	0002      	movs	r2, r0
 800bfea:	000b      	movs	r3, r1
 800bfec:	f7f4 fd04 	bl	80009f8 <__aeabi_dadd>
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
 800bff2:	000a      	movs	r2, r1
 800bff4:	004b      	lsls	r3, r1, #1
 800bff6:	0d5b      	lsrs	r3, r3, #21
 800bff8:	3b36      	subs	r3, #54	; 0x36
 800bffa:	4d1b      	ldr	r5, [pc, #108]	; (800c068 <scalbn+0xb0>)
 800bffc:	18e3      	adds	r3, r4, r3
 800bffe:	42ab      	cmp	r3, r5
 800c000:	dd0a      	ble.n	800c018 <scalbn+0x60>
 800c002:	0002      	movs	r2, r0
 800c004:	000b      	movs	r3, r1
 800c006:	4819      	ldr	r0, [pc, #100]	; (800c06c <scalbn+0xb4>)
 800c008:	4919      	ldr	r1, [pc, #100]	; (800c070 <scalbn+0xb8>)
 800c00a:	f000 f839 	bl	800c080 <copysign>
 800c00e:	4a17      	ldr	r2, [pc, #92]	; (800c06c <scalbn+0xb4>)
 800c010:	4b17      	ldr	r3, [pc, #92]	; (800c070 <scalbn+0xb8>)
 800c012:	f7f5 fc17 	bl	8001844 <__aeabi_dmul>
 800c016:	e7eb      	b.n	800bff0 <scalbn+0x38>
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dd05      	ble.n	800c028 <scalbn+0x70>
 800c01c:	4c15      	ldr	r4, [pc, #84]	; (800c074 <scalbn+0xbc>)
 800c01e:	051b      	lsls	r3, r3, #20
 800c020:	4022      	ands	r2, r4
 800c022:	431a      	orrs	r2, r3
 800c024:	0011      	movs	r1, r2
 800c026:	e7e3      	b.n	800bff0 <scalbn+0x38>
 800c028:	001d      	movs	r5, r3
 800c02a:	3535      	adds	r5, #53	; 0x35
 800c02c:	da09      	bge.n	800c042 <scalbn+0x8a>
 800c02e:	4b12      	ldr	r3, [pc, #72]	; (800c078 <scalbn+0xc0>)
 800c030:	0002      	movs	r2, r0
 800c032:	429c      	cmp	r4, r3
 800c034:	dce6      	bgt.n	800c004 <scalbn+0x4c>
 800c036:	000b      	movs	r3, r1
 800c038:	4808      	ldr	r0, [pc, #32]	; (800c05c <scalbn+0xa4>)
 800c03a:	4909      	ldr	r1, [pc, #36]	; (800c060 <scalbn+0xa8>)
 800c03c:	f000 f820 	bl	800c080 <copysign>
 800c040:	e7cc      	b.n	800bfdc <scalbn+0x24>
 800c042:	4c0c      	ldr	r4, [pc, #48]	; (800c074 <scalbn+0xbc>)
 800c044:	3336      	adds	r3, #54	; 0x36
 800c046:	4022      	ands	r2, r4
 800c048:	051b      	lsls	r3, r3, #20
 800c04a:	4313      	orrs	r3, r2
 800c04c:	0019      	movs	r1, r3
 800c04e:	2200      	movs	r2, #0
 800c050:	4b0a      	ldr	r3, [pc, #40]	; (800c07c <scalbn+0xc4>)
 800c052:	e7de      	b.n	800c012 <scalbn+0x5a>
 800c054:	43500000 	.word	0x43500000
 800c058:	ffff3cb0 	.word	0xffff3cb0
 800c05c:	c2f8f359 	.word	0xc2f8f359
 800c060:	01a56e1f 	.word	0x01a56e1f
 800c064:	000007ff 	.word	0x000007ff
 800c068:	000007fe 	.word	0x000007fe
 800c06c:	8800759c 	.word	0x8800759c
 800c070:	7e37e43c 	.word	0x7e37e43c
 800c074:	800fffff 	.word	0x800fffff
 800c078:	0000c350 	.word	0x0000c350
 800c07c:	3c900000 	.word	0x3c900000

0800c080 <copysign>:
 800c080:	b530      	push	{r4, r5, lr}
 800c082:	004a      	lsls	r2, r1, #1
 800c084:	0fdb      	lsrs	r3, r3, #31
 800c086:	07db      	lsls	r3, r3, #31
 800c088:	0852      	lsrs	r2, r2, #1
 800c08a:	431a      	orrs	r2, r3
 800c08c:	0011      	movs	r1, r2
 800c08e:	bd30      	pop	{r4, r5, pc}

0800c090 <_init>:
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	46c0      	nop			; (mov r8, r8)
 800c094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c096:	bc08      	pop	{r3}
 800c098:	469e      	mov	lr, r3
 800c09a:	4770      	bx	lr

0800c09c <_fini>:
 800c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a2:	bc08      	pop	{r3}
 800c0a4:	469e      	mov	lr, r3
 800c0a6:	4770      	bx	lr
