
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd0  08002dd0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd0  08002dd0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd0  08002dd0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000068  08002e40  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002e40  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d54  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a6  00000000  00000000  00029de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e10  00000000  00000000  0002ca28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b56  00000000  00000000  00041838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000800bf  00000000  00000000  0004938e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c944d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac4  00000000  00000000  000c94c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cf8 	.word	0x08002cf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002cf8 	.word	0x08002cf8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb5a 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f824 	bl	8000274 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  printf("Sys_Inited");
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <main+0x4c>)
 800022e:	0018      	movs	r0, r3
 8000230:	f001 fe4a 	bl	8001ec8 <iprintf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f8f6 	bl	8000424 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000238:	f000 f87e 	bl	8000338 <MX_SPI1_Init>
  MX_TIM6_Init();
 800023c:	f000 f8b4 	bl	80003a8 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000240:	f000 f86c 	bl	800031c <MX_NVIC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET) {
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <main+0x50>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	2201      	movs	r2, #1
 800024c:	4013      	ands	r3, r2
 800024e:	2b01      	cmp	r3, #1
 8000250:	d1f8      	bne.n	8000244 <main+0x24>
		  __HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <main+0x50>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2202      	movs	r2, #2
 8000258:	4252      	negs	r2, r2
 800025a:	611a      	str	r2, [r3, #16]
		  HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 800025c:	23a0      	movs	r3, #160	; 0xa0
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2120      	movs	r1, #32
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fe03 	bl	8000e6e <HAL_GPIO_TogglePin>
	  if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET) {
 8000268:	e7ec      	b.n	8000244 <main+0x24>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	08002d10 	.word	0x08002d10
 8000270:	20000090 	.word	0x20000090

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b095      	sub	sp, #84	; 0x54
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2418      	movs	r4, #24
 800027c:	193b      	adds	r3, r7, r4
 800027e:	0018      	movs	r0, r3
 8000280:	2338      	movs	r3, #56	; 0x38
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f001 fe17 	bl	8001eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	0018      	movs	r0, r3
 800028e:	2314      	movs	r3, #20
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f001 fe10 	bl	8001eb8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <SystemClock_Config+0xa0>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1e      	ldr	r2, [pc, #120]	; (8000318 <SystemClock_Config+0xa4>)
 800029e:	401a      	ands	r2, r3
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <SystemClock_Config+0xa0>)
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	0109      	lsls	r1, r1, #4
 80002a6:	430a      	orrs	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002aa:	0021      	movs	r1, r4
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2210      	movs	r2, #16
 80002b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2201      	movs	r2, #1
 80002b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	22a0      	movs	r2, #160	; 0xa0
 80002c2:	0212      	lsls	r2, r2, #8
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fde0 	bl	8000e94 <HAL_RCC_OscConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002d8:	f000 f948 	bl	800056c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	220f      	movs	r2, #15
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 f998 	bl	8001634 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000308:	f000 f930 	bl	800056c <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b015      	add	sp, #84	; 0x54
 8000312:	bd90      	pop	{r4, r7, pc}
 8000314:	40007000 	.word	0x40007000
 8000318:	ffffe7ff 	.word	0xffffe7ff

0800031c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2101      	movs	r1, #1
 8000324:	2011      	movs	r0, #17
 8000326:	f000 fbd5 	bl	8000ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800032a:	2011      	movs	r0, #17
 800032c:	f000 fbe7 	bl	8000afe <HAL_NVIC_EnableIRQ>
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_SPI1_Init+0x68>)
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <MX_SPI1_Init+0x6c>)
 8000340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000344:	2282      	movs	r2, #130	; 0x82
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_SPI1_Init+0x68>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	0112      	lsls	r2, r2, #4
 8000356:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_SPI1_Init+0x68>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	02d2      	lsls	r2, r2, #11
 800036a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_SPI1_Init+0x68>)
 800036e:	2230      	movs	r2, #48	; 0x30
 8000370:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000374:	2280      	movs	r2, #128	; 0x80
 8000376:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_SPI1_Init+0x68>)
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000380:	2200      	movs	r2, #0
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000386:	2207      	movs	r2, #7
 8000388:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <MX_SPI1_Init+0x68>)
 800038c:	0018      	movs	r0, r3
 800038e:	f001 faff 	bl	8001990 <HAL_SPI_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000396:	f000 f8e9 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200000cc 	.word	0x200000cc
 80003a4:	40013000 	.word	0x40013000

080003a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ae:	003b      	movs	r3, r7
 80003b0:	0018      	movs	r0, r3
 80003b2:	2308      	movs	r3, #8
 80003b4:	001a      	movs	r2, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	f001 fd7e 	bl	8001eb8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_TIM6_Init+0x74>)
 80003be:	4a18      	ldr	r2, [pc, #96]	; (8000420 <MX_TIM6_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 128;
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_TIM6_Init+0x74>)
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_TIM6_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_TIM6_Init+0x74>)
 80003d0:	22fa      	movs	r2, #250	; 0xfa
 80003d2:	0052      	lsls	r2, r2, #1
 80003d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_TIM6_Init+0x74>)
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_TIM6_Init+0x74>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 fb40 	bl	8001a64 <HAL_TIM_Base_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80003e8:	f000 f8c0 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f2:	003b      	movs	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003f8:	003a      	movs	r2, r7
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_TIM6_Init+0x74>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 fcec 	bl	8001ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000408:	f000 f8b0 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <MX_TIM6_Init+0x74>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 fb54 	bl	8001abc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000090 	.word	0x20000090
 8000420:	40001000 	.word	0x40001000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b08b      	sub	sp, #44	; 0x2c
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	2414      	movs	r4, #20
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f001 fd3f 	bl	8001eb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b48      	ldr	r3, [pc, #288]	; (800055c <MX_GPIO_Init+0x138>)
 800043c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800043e:	4b47      	ldr	r3, [pc, #284]	; (800055c <MX_GPIO_Init+0x138>)
 8000440:	2104      	movs	r1, #4
 8000442:	430a      	orrs	r2, r1
 8000444:	62da      	str	r2, [r3, #44]	; 0x2c
 8000446:	4b45      	ldr	r3, [pc, #276]	; (800055c <MX_GPIO_Init+0x138>)
 8000448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044a:	2204      	movs	r2, #4
 800044c:	4013      	ands	r3, r2
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000452:	4b42      	ldr	r3, [pc, #264]	; (800055c <MX_GPIO_Init+0x138>)
 8000454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000456:	4b41      	ldr	r3, [pc, #260]	; (800055c <MX_GPIO_Init+0x138>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	430a      	orrs	r2, r1
 800045c:	62da      	str	r2, [r3, #44]	; 0x2c
 800045e:	4b3f      	ldr	r3, [pc, #252]	; (800055c <MX_GPIO_Init+0x138>)
 8000460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	4013      	ands	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b3c      	ldr	r3, [pc, #240]	; (800055c <MX_GPIO_Init+0x138>)
 800046c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800046e:	4b3b      	ldr	r3, [pc, #236]	; (800055c <MX_GPIO_Init+0x138>)
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
 8000476:	4b39      	ldr	r3, [pc, #228]	; (800055c <MX_GPIO_Init+0x138>)
 8000478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047a:	2201      	movs	r2, #1
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b36      	ldr	r3, [pc, #216]	; (800055c <MX_GPIO_Init+0x138>)
 8000484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000486:	4b35      	ldr	r3, [pc, #212]	; (800055c <MX_GPIO_Init+0x138>)
 8000488:	2102      	movs	r1, #2
 800048a:	430a      	orrs	r2, r1
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c
 800048e:	4b33      	ldr	r3, [pc, #204]	; (800055c <MX_GPIO_Init+0x138>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	2202      	movs	r2, #2
 8000494:	4013      	ands	r3, r2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 800049a:	23a0      	movs	r3, #160	; 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2200      	movs	r2, #0
 80004a0:	2120      	movs	r1, #32
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fcc6 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	019b      	lsls	r3, r3, #6
 80004ac:	482c      	ldr	r0, [pc, #176]	; (8000560 <MX_GPIO_Init+0x13c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0019      	movs	r1, r3
 80004b2:	f000 fcbf 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	0192      	lsls	r2, r2, #6
 80004bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	4a28      	ldr	r2, [pc, #160]	; (8000564 <MX_GPIO_Init+0x140>)
 80004c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	4a26      	ldr	r2, [pc, #152]	; (8000568 <MX_GPIO_Init+0x144>)
 80004ce:	0019      	movs	r1, r3
 80004d0:	0010      	movs	r0, r2
 80004d2:	f000 fb31 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	220c      	movs	r2, #12
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2202      	movs	r2, #2
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2203      	movs	r2, #3
 80004ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2204      	movs	r2, #4
 80004f2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	193a      	adds	r2, r7, r4
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fb1b 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8000502:	0021      	movs	r1, r4
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2220      	movs	r2, #32
 8000508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2201      	movs	r2, #1
 800050e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 800051c:	000c      	movs	r4, r1
 800051e:	187a      	adds	r2, r7, r1
 8000520:	23a0      	movs	r3, #160	; 0xa0
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	0011      	movs	r1, r2
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fb06 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800052c:	0021      	movs	r1, r4
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	0192      	lsls	r2, r2, #6
 8000534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000548:	187b      	adds	r3, r7, r1
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <MX_GPIO_Init+0x13c>)
 800054c:	0019      	movs	r1, r3
 800054e:	0010      	movs	r0, r2
 8000550:	f000 faf2 	bl	8000b38 <HAL_GPIO_Init>

}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b00b      	add	sp, #44	; 0x2c
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	50000400 	.word	0x50000400
 8000564:	10210000 	.word	0x10210000
 8000568:	50000800 	.word	0x50000800

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <HAL_MspInit+0x24>)
 800057e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_MspInit+0x24>)
 8000582:	2101      	movs	r1, #1
 8000584:	430a      	orrs	r2, r1
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <HAL_MspInit+0x24>)
 800058a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_MspInit+0x24>)
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0549      	lsls	r1, r1, #21
 8000592:	430a      	orrs	r2, r1
 8000594:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b08b      	sub	sp, #44	; 0x2c
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	2314      	movs	r3, #20
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	0018      	movs	r0, r3
 80005ae:	2314      	movs	r3, #20
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f001 fc80 	bl	8001eb8 <memset>
  if(hspi->Instance==SPI1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a29      	ldr	r2, [pc, #164]	; (8000664 <HAL_SPI_MspInit+0xc4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d14b      	bne.n	800065a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0149      	lsls	r1, r1, #5
 80005cc:	430a      	orrs	r2, r1
 80005ce:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005d6:	2101      	movs	r1, #1
 80005d8:	430a      	orrs	r2, r1
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e0:	2201      	movs	r2, #1
 80005e2:	4013      	ands	r3, r2
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005ee:	2102      	movs	r1, #2
 80005f0:	430a      	orrs	r2, r1
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <HAL_SPI_MspInit+0xc8>)
 80005f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f8:	2202      	movs	r2, #2
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000600:	2414      	movs	r4, #20
 8000602:	193b      	adds	r3, r7, r4
 8000604:	22d0      	movs	r2, #208	; 0xd0
 8000606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2202      	movs	r2, #2
 800060c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2203      	movs	r2, #3
 8000618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	193a      	adds	r2, r7, r4
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fa85 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2208      	movs	r2, #8
 8000634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2202      	movs	r2, #2
 800063a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2203      	movs	r2, #3
 8000646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	187b      	adds	r3, r7, r1
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <HAL_SPI_MspInit+0xcc>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 fa6f 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b00b      	add	sp, #44	; 0x2c
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40013000 	.word	0x40013000
 8000668:	40021000 	.word	0x40021000
 800066c:	50000400 	.word	0x50000400

08000670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_TIM_Base_MspInit+0x28>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d105      	bne.n	800068e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_TIM_Base_MspInit+0x2c>)
 8000684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_TIM_Base_MspInit+0x2c>)
 8000688:	2110      	movs	r1, #16
 800068a:	430a      	orrs	r2, r1
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40001000 	.word	0x40001000
 800069c:	40021000 	.word	0x40021000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <TIM6_DAC_IRQHandler+0x14>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fa12 	bl	8001b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000090 	.word	0x20000090

080006e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	e00a      	b.n	8000710 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006fa:	e000      	b.n	80006fe <_read+0x16>
 80006fc:	bf00      	nop
 80006fe:	0001      	movs	r1, r0
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	60ba      	str	r2, [r7, #8]
 8000706:	b2ca      	uxtb	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf0      	blt.n	80006fa <_read+0x12>
	}

return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b006      	add	sp, #24
 8000720:	bd80      	pop	{r7, pc}

08000722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e009      	b.n	8000748 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	60ba      	str	r2, [r7, #8]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	0018      	movs	r0, r3
 800073e:	e000      	b.n	8000742 <_write+0x20>
 8000740:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf1      	blt.n	8000734 <_write+0x12>
	}
	return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	0018      	movs	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	b006      	add	sp, #24
 8000758:	bd80      	pop	{r7, pc}

0800075a <_close>:

int _close(int file)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	return -1;
 8000762:	2301      	movs	r3, #1
 8000764:	425b      	negs	r3, r3
}
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}

0800076e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	0192      	lsls	r2, r2, #6
 800077e:	605a      	str	r2, [r3, #4]
	return 0;
 8000780:	2300      	movs	r3, #0
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}

0800078a <_isatty>:

int _isatty(int file)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	return 1;
 8000792:	2301      	movs	r3, #1
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	b002      	add	sp, #8
 800079a:	bd80      	pop	{r7, pc}

0800079c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	0018      	movs	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x50>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x16>
		heap_end = &end;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <_sbrk+0x50>)
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <_sbrk+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <_sbrk+0x50>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <_sbrk+0x50>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	466a      	mov	r2, sp
 80007da:	4293      	cmp	r3, r2
 80007dc:	d907      	bls.n	80007ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007de:	f001 fb41 	bl	8001e64 <__errno>
 80007e2:	0003      	movs	r3, r0
 80007e4:	220c      	movs	r2, #12
 80007e6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	425b      	negs	r3, r3
 80007ec:	e006      	b.n	80007fc <_sbrk+0x48>
	}

	heap_end += incr;
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <_sbrk+0x50>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	18d2      	adds	r2, r2, r3
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <_sbrk+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	b004      	add	sp, #16
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000084 	.word	0x20000084
 8000808:	20000130 	.word	0x20000130

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <SystemInit+0x64>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <SystemInit+0x64>)
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	0049      	lsls	r1, r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <SystemInit+0x64>)
 8000820:	68da      	ldr	r2, [r3, #12]
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <SystemInit+0x64>)
 8000824:	4913      	ldr	r1, [pc, #76]	; (8000874 <SystemInit+0x68>)
 8000826:	400a      	ands	r2, r1
 8000828:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <SystemInit+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <SystemInit+0x64>)
 8000830:	4911      	ldr	r1, [pc, #68]	; (8000878 <SystemInit+0x6c>)
 8000832:	400a      	ands	r2, r1
 8000834:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <SystemInit+0x64>)
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <SystemInit+0x64>)
 800083c:	2101      	movs	r1, #1
 800083e:	438a      	bics	r2, r1
 8000840:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <SystemInit+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <SystemInit+0x64>)
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <SystemInit+0x70>)
 800084a:	400a      	ands	r2, r1
 800084c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <SystemInit+0x64>)
 8000850:	68da      	ldr	r2, [r3, #12]
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <SystemInit+0x64>)
 8000854:	490a      	ldr	r1, [pc, #40]	; (8000880 <SystemInit+0x74>)
 8000856:	400a      	ands	r2, r1
 8000858:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SystemInit+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <SystemInit+0x78>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	0512      	lsls	r2, r2, #20
 8000866:	609a      	str	r2, [r3, #8]
#endif
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000
 8000874:	88ff400c 	.word	0x88ff400c
 8000878:	fef6fff6 	.word	0xfef6fff6
 800087c:	fffbffff 	.word	0xfffbffff
 8000880:	ff02ffff 	.word	0xff02ffff
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800088c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
  ldr  r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80008a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80008a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008aa:	3204      	adds	r2, #4

080008ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <LoopForever+0x16>)
  cmp  r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008b2:	f7ff ffab 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f001 fadb 	bl	8001e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fcb1 	bl	8000220 <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
   ldr   r0, =_estack
 80008c0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80008c4:	08002dd8 	.word	0x08002dd8
  ldr  r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008cc:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80008d0:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80008d4:	2000012c 	.word	0x2000012c

080008d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_COMP_IRQHandler>
	...

080008dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x3c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_Init+0x3c>)
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f811 	bl	800091c <HAL_InitTick>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d003      	beq.n	8000906 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e001      	b.n	800090a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000906:	f7ff fe37 	bl	8000578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_InitTick+0x50>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	23fa      	movs	r3, #250	; 0xfa
 8000932:	0099      	lsls	r1, r3, #2
 8000934:	0010      	movs	r0, r2
 8000936:	f7ff fbe7 	bl	8000108 <__udivsi3>
 800093a:	0003      	movs	r3, r0
 800093c:	0018      	movs	r0, r3
 800093e:	f000 f8ee 	bl	8000b1e <HAL_SYSTICK_Config>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d004      	beq.n	8000950 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000946:	230f      	movs	r3, #15
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e006      	b.n	800095e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	2301      	movs	r3, #1
 8000954:	425b      	negs	r3, r3
 8000956:	2200      	movs	r2, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f000 f8bb 	bl	8000ad4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800095e:	230f      	movs	r3, #15
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	781b      	ldrb	r3, [r3, #0]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b004      	add	sp, #16
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b02      	ldr	r3, [pc, #8]	; (8000980 <HAL_GetTick+0x10>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000124 	.word	0x20000124

08000984 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	0002      	movs	r2, r0
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	001a      	movs	r2, r3
 8000996:	231f      	movs	r3, #31
 8000998:	401a      	ands	r2, r3
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <NVIC_EnableIRQ+0x28>)
 800099c:	2101      	movs	r1, #1
 800099e:	4091      	lsls	r1, r2
 80009a0:	000a      	movs	r2, r1
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	e000e100 	.word	0xe000e100

080009b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	0002      	movs	r2, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b7f      	cmp	r3, #127	; 0x7f
 80009c4:	d932      	bls.n	8000a2c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c6:	4a2f      	ldr	r2, [pc, #188]	; (8000a84 <NVIC_SetPriority+0xd4>)
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0019      	movs	r1, r3
 80009ce:	230f      	movs	r3, #15
 80009d0:	400b      	ands	r3, r1
 80009d2:	3b08      	subs	r3, #8
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3306      	adds	r3, #6
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	3304      	adds	r3, #4
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1dfa      	adds	r2, r7, #7
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	0011      	movs	r1, r2
 80009e6:	2203      	movs	r2, #3
 80009e8:	400a      	ands	r2, r1
 80009ea:	00d2      	lsls	r2, r2, #3
 80009ec:	21ff      	movs	r1, #255	; 0xff
 80009ee:	4091      	lsls	r1, r2
 80009f0:	000a      	movs	r2, r1
 80009f2:	43d2      	mvns	r2, r2
 80009f4:	401a      	ands	r2, r3
 80009f6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	019b      	lsls	r3, r3, #6
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	401a      	ands	r2, r3
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	0018      	movs	r0, r3
 8000a06:	2303      	movs	r3, #3
 8000a08:	4003      	ands	r3, r0
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0e:	481d      	ldr	r0, [pc, #116]	; (8000a84 <NVIC_SetPriority+0xd4>)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001c      	movs	r4, r3
 8000a16:	230f      	movs	r3, #15
 8000a18:	4023      	ands	r3, r4
 8000a1a:	3b08      	subs	r3, #8
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	3306      	adds	r3, #6
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	18c3      	adds	r3, r0, r3
 8000a26:	3304      	adds	r3, #4
 8000a28:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a2a:	e027      	b.n	8000a7c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	33c0      	adds	r3, #192	; 0xc0
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	589b      	ldr	r3, [r3, r2]
 8000a3c:	1dfa      	adds	r2, r7, #7
 8000a3e:	7812      	ldrb	r2, [r2, #0]
 8000a40:	0011      	movs	r1, r2
 8000a42:	2203      	movs	r2, #3
 8000a44:	400a      	ands	r2, r1
 8000a46:	00d2      	lsls	r2, r2, #3
 8000a48:	21ff      	movs	r1, #255	; 0xff
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	000a      	movs	r2, r1
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	401a      	ands	r2, r3
 8000a52:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	019b      	lsls	r3, r3, #6
 8000a58:	22ff      	movs	r2, #255	; 0xff
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	0018      	movs	r0, r3
 8000a62:	2303      	movs	r3, #3
 8000a64:	4003      	ands	r3, r0
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <NVIC_SetPriority+0xd8>)
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	430a      	orrs	r2, r1
 8000a76:	33c0      	adds	r3, #192	; 0xc0
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	501a      	str	r2, [r3, r0]
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b003      	add	sp, #12
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <SysTick_Config+0x40>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d901      	bls.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e010      	b.n	8000ac4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <SysTick_Config+0x44>)
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	3a01      	subs	r2, #1
 8000aa8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	425b      	negs	r3, r3
 8000aae:	2103      	movs	r1, #3
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ff7d 	bl	80009b0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SysTick_Config+0x44>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x44>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	00ffffff 	.word	0x00ffffff
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	210f      	movs	r1, #15
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	1c02      	adds	r2, r0, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <NVIC_SetPriority>
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	0002      	movs	r2, r0
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ff37 	bl	8000984 <NVIC_EnableIRQ>
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff ffaf 	bl	8000a8c <SysTick_Config>
 8000b2e:	0003      	movs	r3, r0
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b4e:	e155      	b.n	8000dfc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2101      	movs	r1, #1
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d100      	bne.n	8000b68 <HAL_GPIO_Init+0x30>
 8000b66:	e146      	b.n	8000df6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x40>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d123      	bne.n	8000bc0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	58d3      	ldr	r3, [r2, r3]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2207      	movs	r2, #7
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	409a      	lsls	r2, r3
 8000b92:	0013      	movs	r3, r2
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d00b      	beq.n	8000be0 <HAL_GPIO_Init+0xa8>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d007      	beq.n	8000be0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd4:	2b11      	cmp	r3, #17
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b12      	cmp	r3, #18
 8000bde:	d130      	bne.n	8000c42 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	409a      	lsls	r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	401a      	ands	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	055b      	lsls	r3, r3, #21
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d100      	bne.n	8000cb4 <HAL_GPIO_Init+0x17c>
 8000cb2:	e0a0      	b.n	8000df6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4b57      	ldr	r3, [pc, #348]	; (8000e14 <HAL_GPIO_Init+0x2dc>)
 8000cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb8:	4b56      	ldr	r3, [pc, #344]	; (8000e14 <HAL_GPIO_Init+0x2dc>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc0:	4a55      	ldr	r2, [pc, #340]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	589b      	ldr	r3, [r3, r2]
 8000ccc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	0013      	movs	r3, r2
 8000cdc:	43da      	mvns	r2, r3
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	23a0      	movs	r3, #160	; 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d01f      	beq.n	8000d2e <HAL_GPIO_Init+0x1f6>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x2e4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x1f2>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_GPIO_Init+0x2e8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2ec>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x1ea>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x1e6>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <HAL_GPIO_Init+0x2f4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d16:	2305      	movs	r3, #5
 8000d18:	e00a      	b.n	8000d30 <HAL_GPIO_Init+0x1f8>
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	e008      	b.n	8000d30 <HAL_GPIO_Init+0x1f8>
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e006      	b.n	8000d30 <HAL_GPIO_Init+0x1f8>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e004      	b.n	8000d30 <HAL_GPIO_Init+0x1f8>
 8000d26:	2302      	movs	r3, #2
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_Init+0x1f8>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <HAL_GPIO_Init+0x1f8>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	2103      	movs	r1, #3
 8000d34:	400a      	ands	r2, r1
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	4093      	lsls	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d40:	4935      	ldr	r1, [pc, #212]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	3302      	adds	r3, #2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4e:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	4013      	ands	r3, r2
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43da      	mvns	r2, r3
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	035b      	lsls	r3, r3, #13
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	039b      	lsls	r3, r3, #14
 8000de4:	4013      	ands	r3, r2
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	40da      	lsrs	r2, r3
 8000e04:	1e13      	subs	r3, r2, #0
 8000e06:	d000      	beq.n	8000e0a <HAL_GPIO_Init+0x2d2>
 8000e08:	e6a2      	b.n	8000b50 <HAL_GPIO_Init+0x18>
  }
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b006      	add	sp, #24
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	50000400 	.word	0x50000400
 8000e20:	50000800 	.word	0x50000800
 8000e24:	50000c00 	.word	0x50000c00
 8000e28:	50001000 	.word	0x50001000
 8000e2c:	50001c00 	.word	0x50001c00
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	0008      	movs	r0, r1
 8000e3e:	0011      	movs	r1, r2
 8000e40:	1cbb      	adds	r3, r7, #2
 8000e42:	1c02      	adds	r2, r0, #0
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	1c7b      	adds	r3, r7, #1
 8000e48:	1c0a      	adds	r2, r1, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000e4c:	1c7b      	adds	r3, r7, #1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	1cbb      	adds	r3, r7, #2
 8000e56:	881a      	ldrh	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e5e:	1cbb      	adds	r3, r7, #2
 8000e60:	881a      	ldrh	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	000a      	movs	r2, r1
 8000e78:	1cbb      	adds	r3, r7, #2
 8000e7a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	405a      	eors	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	615a      	str	r2, [r3, #20]
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b5b0      	push	{r4, r5, r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f000 fbbc 	bl	8001620 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea8:	4bc8      	ldr	r3, [pc, #800]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	220c      	movs	r2, #12
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb2:	4bc6      	ldr	r3, [pc, #792]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	025b      	lsls	r3, r3, #9
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d100      	bne.n	8000eca <HAL_RCC_OscConfig+0x36>
 8000ec8:	e07e      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d007      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b0c      	cmp	r3, #12
 8000ed4:	d112      	bne.n	8000efc <HAL_RCC_OscConfig+0x68>
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	025b      	lsls	r3, r3, #9
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d10d      	bne.n	8000efc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	4bba      	ldr	r3, [pc, #744]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	029b      	lsls	r3, r3, #10
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d100      	bne.n	8000eee <HAL_RCC_OscConfig+0x5a>
 8000eec:	e06b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x132>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d167      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f000 fb92 	bl	8001620 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d107      	bne.n	8000f18 <HAL_RCC_OscConfig+0x84>
 8000f08:	4bb0      	ldr	r3, [pc, #704]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4baf      	ldr	r3, [pc, #700]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e027      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	02db      	lsls	r3, r3, #11
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d10e      	bne.n	8000f42 <HAL_RCC_OscConfig+0xae>
 8000f24:	4ba9      	ldr	r3, [pc, #676]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4ba8      	ldr	r3, [pc, #672]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	02c9      	lsls	r1, r1, #11
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	4ba6      	ldr	r3, [pc, #664]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4ba5      	ldr	r3, [pc, #660]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	0249      	lsls	r1, r1, #9
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e012      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f42:	4ba2      	ldr	r3, [pc, #648]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4ba1      	ldr	r3, [pc, #644]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f48:	49a1      	ldr	r1, [pc, #644]	; (80011d0 <HAL_RCC_OscConfig+0x33c>)
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	4b9f      	ldr	r3, [pc, #636]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	025b      	lsls	r3, r3, #9
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4b9b      	ldr	r3, [pc, #620]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b9a      	ldr	r3, [pc, #616]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f62:	499c      	ldr	r1, [pc, #624]	; (80011d4 <HAL_RCC_OscConfig+0x340>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d015      	beq.n	8000f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fcfe 	bl	8000970 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f78:	e009      	b.n	8000f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fcf9 	bl	8000970 <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b64      	cmp	r3, #100	; 0x64
 8000f86:	d902      	bls.n	8000f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f000 fb49 	bl	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f8e:	4b8f      	ldr	r3, [pc, #572]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	d0ef      	beq.n	8000f7a <HAL_RCC_OscConfig+0xe6>
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fce8 	bl	8000970 <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa6:	f7ff fce3 	bl	8000970 <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	; 0x64
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e333      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fb8:	4b84      	ldr	r3, [pc, #528]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d1f0      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x112>
 8000fc4:	e000      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x140>
 8000fd2:	e098      	b.n	8001106 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	2220      	movs	r2, #32
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d009      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000fe2:	4b7a      	ldr	r3, [pc, #488]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b79      	ldr	r3, [pc, #484]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8000fe8:	2120      	movs	r1, #32
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	4393      	bics	r3, r2
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0c      	cmp	r3, #12
 8001000:	d13d      	bne.n	800107e <HAL_RCC_OscConfig+0x1ea>
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d13a      	bne.n	800107e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001008:	4b70      	ldr	r3, [pc, #448]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2204      	movs	r2, #4
 800100e:	4013      	ands	r3, r2
 8001010:	d004      	beq.n	800101c <HAL_RCC_OscConfig+0x188>
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e301      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101c:	4b6b      	ldr	r3, [pc, #428]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	4a6d      	ldr	r2, [pc, #436]	; (80011d8 <HAL_RCC_OscConfig+0x344>)
 8001022:	4013      	ands	r3, r2
 8001024:	0019      	movs	r1, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	021a      	lsls	r2, r3, #8
 800102c:	4b67      	ldr	r3, [pc, #412]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 800102e:	430a      	orrs	r2, r1
 8001030:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001032:	4b66      	ldr	r3, [pc, #408]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2209      	movs	r2, #9
 8001038:	4393      	bics	r3, r2
 800103a:	0019      	movs	r1, r3
 800103c:	4b63      	ldr	r3, [pc, #396]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 800103e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001044:	f000 fc20 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001048:	0001      	movs	r1, r0
 800104a:	4b60      	ldr	r3, [pc, #384]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	220f      	movs	r2, #15
 8001052:	4013      	ands	r3, r2
 8001054:	4a61      	ldr	r2, [pc, #388]	; (80011dc <HAL_RCC_OscConfig+0x348>)
 8001056:	5cd3      	ldrb	r3, [r2, r3]
 8001058:	000a      	movs	r2, r1
 800105a:	40da      	lsrs	r2, r3
 800105c:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_RCC_OscConfig+0x34c>)
 800105e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001060:	2513      	movs	r5, #19
 8001062:	197c      	adds	r4, r7, r5
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fc59 	bl	800091c <HAL_InitTick>
 800106a:	0003      	movs	r3, r0
 800106c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800106e:	197b      	adds	r3, r7, r5
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001076:	2313      	movs	r3, #19
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	e2d0      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	2b00      	cmp	r3, #0
 8001082:	d027      	beq.n	80010d4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2209      	movs	r2, #9
 800108a:	4393      	bics	r3, r2
 800108c:	0019      	movs	r1, r3
 800108e:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fc6b 	bl	8000970 <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fc66 	bl	8000970 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e2b6      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010b2:	4b46      	ldr	r3, [pc, #280]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2204      	movs	r2, #4
 80010b8:	4013      	ands	r3, r2
 80010ba:	d0f1      	beq.n	80010a0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <HAL_RCC_OscConfig+0x344>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	021a      	lsls	r2, r3, #8
 80010cc:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80010ce:	430a      	orrs	r2, r1
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	e018      	b.n	8001106 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80010da:	2101      	movs	r1, #1
 80010dc:	438a      	bics	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc46 	bl	8000970 <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc41 	bl	8000970 <HAL_GetTick>
 80010ee:	0002      	movs	r2, r0
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e291      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010fc:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2204      	movs	r2, #4
 8001102:	4013      	ands	r3, r2
 8001104:	d1f1      	bne.n	80010ea <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2210      	movs	r2, #16
 800110c:	4013      	ands	r3, r2
 800110e:	d100      	bne.n	8001112 <HAL_RCC_OscConfig+0x27e>
 8001110:	e09f      	b.n	8001252 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d13f      	bne.n	8001198 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d005      	beq.n	8001130 <HAL_RCC_OscConfig+0x29c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e277      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <HAL_RCC_OscConfig+0x350>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	0a19      	lsrs	r1, r3, #8
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	061a      	lsls	r2, r3, #24
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001154:	430a      	orrs	r2, r1
 8001156:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	0b5b      	lsrs	r3, r3, #13
 800115e:	3301      	adds	r3, #1
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0212      	lsls	r2, r2, #8
 8001164:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	210f      	movs	r1, #15
 800116e:	400b      	ands	r3, r1
 8001170:	491a      	ldr	r1, [pc, #104]	; (80011dc <HAL_RCC_OscConfig+0x348>)
 8001172:	5ccb      	ldrb	r3, [r1, r3]
 8001174:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_RCC_OscConfig+0x34c>)
 8001178:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800117a:	2513      	movs	r5, #19
 800117c:	197c      	adds	r4, r7, r5
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fbcc 	bl	800091c <HAL_InitTick>
 8001184:	0003      	movs	r3, r0
 8001186:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001188:	197b      	adds	r3, r7, r5
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d060      	beq.n	8001252 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001190:	2313      	movs	r3, #19
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	e243      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03e      	beq.n	800121e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_RCC_OscConfig+0x338>)
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	0049      	lsls	r1, r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fbdf 	bl	8000970 <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011b6:	e017      	b.n	80011e8 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b8:	f7ff fbda 	bl	8000970 <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d910      	bls.n	80011e8 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e22a      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	40021000 	.word	0x40021000
 80011d0:	fffeffff 	.word	0xfffeffff
 80011d4:	fffbffff 	.word	0xfffbffff
 80011d8:	ffffe0ff 	.word	0xffffe0ff
 80011dc:	08002d1c 	.word	0x08002d1c
 80011e0:	20000000 	.word	0x20000000
 80011e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011e8:	4bc6      	ldr	r3, [pc, #792]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d0e1      	beq.n	80011b8 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f4:	4bc3      	ldr	r3, [pc, #780]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4ac3      	ldr	r2, [pc, #780]	; (8001508 <HAL_RCC_OscConfig+0x674>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	0019      	movs	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001202:	4bc0      	ldr	r3, [pc, #768]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001204:	430a      	orrs	r2, r1
 8001206:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001208:	4bbe      	ldr	r3, [pc, #760]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	0a19      	lsrs	r1, r3, #8
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	061a      	lsls	r2, r3, #24
 8001216:	4bbb      	ldr	r3, [pc, #748]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	e019      	b.n	8001252 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800121e:	4bb9      	ldr	r3, [pc, #740]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4bb8      	ldr	r3, [pc, #736]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001224:	49b9      	ldr	r1, [pc, #740]	; (800150c <HAL_RCC_OscConfig+0x678>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fba1 	bl	8000970 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001234:	f7ff fb9c 	bl	8000970 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1ec      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001246:	4baf      	ldr	r3, [pc, #700]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4013      	ands	r3, r2
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2208      	movs	r2, #8
 8001258:	4013      	ands	r3, r2
 800125a:	d036      	beq.n	80012ca <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d019      	beq.n	8001298 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001264:	4ba7      	ldr	r3, [pc, #668]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001266:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001268:	4ba6      	ldr	r3, [pc, #664]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800126a:	2101      	movs	r1, #1
 800126c:	430a      	orrs	r2, r1
 800126e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001270:	f7ff fb7e 	bl	8000970 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127a:	f7ff fb79 	bl	8000970 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1c9      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800128c:	4b9d      	ldr	r3, [pc, #628]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800128e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d0f1      	beq.n	800127a <HAL_RCC_OscConfig+0x3e6>
 8001296:	e018      	b.n	80012ca <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001298:	4b9a      	ldr	r3, [pc, #616]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800129a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800129c:	4b99      	ldr	r3, [pc, #612]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800129e:	2101      	movs	r1, #1
 80012a0:	438a      	bics	r2, r1
 80012a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb64 	bl	8000970 <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb5f 	bl	8000970 <HAL_GetTick>
 80012b2:	0002      	movs	r2, r0
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1af      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012c0:	4b90      	ldr	r3, [pc, #576]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80012c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f1      	bne.n	80012ae <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2204      	movs	r2, #4
 80012d0:	4013      	ands	r3, r2
 80012d2:	d100      	bne.n	80012d6 <HAL_RCC_OscConfig+0x442>
 80012d4:	e0af      	b.n	8001436 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2323      	movs	r3, #35	; 0x23
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012de:	4b89      	ldr	r3, [pc, #548]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80012e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	055b      	lsls	r3, r3, #21
 80012e6:	4013      	ands	r3, r2
 80012e8:	d10a      	bne.n	8001300 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	4b86      	ldr	r3, [pc, #536]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80012ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ee:	4b85      	ldr	r3, [pc, #532]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	0549      	lsls	r1, r1, #21
 80012f4:	430a      	orrs	r2, r1
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012f8:	2323      	movs	r3, #35	; 0x23
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b83      	ldr	r3, [pc, #524]	; (8001510 <HAL_RCC_OscConfig+0x67c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4013      	ands	r3, r2
 800130a:	d11a      	bne.n	8001342 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130c:	4b80      	ldr	r3, [pc, #512]	; (8001510 <HAL_RCC_OscConfig+0x67c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b7f      	ldr	r3, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x67c>)
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	0049      	lsls	r1, r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb29 	bl	8000970 <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001324:	f7ff fb24 	bl	8000970 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e174      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x67c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4013      	ands	r3, r2
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	429a      	cmp	r2, r3
 800134c:	d107      	bne.n	800135e <HAL_RCC_OscConfig+0x4ca>
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001352:	4b6c      	ldr	r3, [pc, #432]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0049      	lsls	r1, r1, #1
 8001358:	430a      	orrs	r2, r1
 800135a:	651a      	str	r2, [r3, #80]	; 0x50
 800135c:	e031      	b.n	80013c2 <HAL_RCC_OscConfig+0x52e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x4ec>
 8001366:	4b67      	ldr	r3, [pc, #412]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800136a:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800136c:	4967      	ldr	r1, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x678>)
 800136e:	400a      	ands	r2, r1
 8001370:	651a      	str	r2, [r3, #80]	; 0x50
 8001372:	4b64      	ldr	r3, [pc, #400]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001378:	4966      	ldr	r1, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x680>)
 800137a:	400a      	ands	r2, r1
 800137c:	651a      	str	r2, [r3, #80]	; 0x50
 800137e:	e020      	b.n	80013c2 <HAL_RCC_OscConfig+0x52e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	429a      	cmp	r2, r3
 800138a:	d10e      	bne.n	80013aa <HAL_RCC_OscConfig+0x516>
 800138c:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800138e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001390:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	00c9      	lsls	r1, r1, #3
 8001396:	430a      	orrs	r2, r1
 8001398:	651a      	str	r2, [r3, #80]	; 0x50
 800139a:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800139c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800139e:	4b59      	ldr	r3, [pc, #356]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	0049      	lsls	r1, r1, #1
 80013a4:	430a      	orrs	r2, r1
 80013a6:	651a      	str	r2, [r3, #80]	; 0x50
 80013a8:	e00b      	b.n	80013c2 <HAL_RCC_OscConfig+0x52e>
 80013aa:	4b56      	ldr	r3, [pc, #344]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80013ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ae:	4b55      	ldr	r3, [pc, #340]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80013b0:	4956      	ldr	r1, [pc, #344]	; (800150c <HAL_RCC_OscConfig+0x678>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80013b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ba:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80013bc:	4955      	ldr	r1, [pc, #340]	; (8001514 <HAL_RCC_OscConfig+0x680>)
 80013be:	400a      	ands	r2, r1
 80013c0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d015      	beq.n	80013f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fad1 	bl	8000970 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013d2:	e009      	b.n	80013e8 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f7ff facc 	bl	8000970 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_RCC_OscConfig+0x684>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e11b      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80013ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d0ef      	beq.n	80013d4 <HAL_RCC_OscConfig+0x540>
 80013f4:	e014      	b.n	8001420 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fabb 	bl	8000970 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013fe:	e009      	b.n	8001414 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fab6 	bl	8000970 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	4a43      	ldr	r2, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x684>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e105      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d1ef      	bne.n	8001400 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001420:	2323      	movs	r3, #35	; 0x23
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800142c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001430:	493a      	ldr	r1, [pc, #232]	; (800151c <HAL_RCC_OscConfig+0x688>)
 8001432:	400a      	ands	r2, r1
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2220      	movs	r2, #32
 800143c:	4013      	ands	r3, r2
 800143e:	d049      	beq.n	80014d4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d026      	beq.n	8001496 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_RCC_OscConfig+0x68c>)
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_RCC_OscConfig+0x68c>)
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	0189      	lsls	r1, r1, #6
 800146a:	430a      	orrs	r2, r1
 800146c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fa7f 	bl	8000970 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001478:	f7ff fa7a 	bl	8000970 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0ca      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d0f1      	beq.n	8001478 <HAL_RCC_OscConfig+0x5e4>
 8001494:	e01e      	b.n	80014d4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800149c:	2101      	movs	r1, #1
 800149e:	438a      	bics	r2, r1
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_RCC_OscConfig+0x68c>)
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_RCC_OscConfig+0x68c>)
 80014a8:	491e      	ldr	r1, [pc, #120]	; (8001524 <HAL_RCC_OscConfig+0x690>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fa5f 	bl	8000970 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b8:	f7ff fa5a 	bl	8000970 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0aa      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2202      	movs	r2, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	d1f1      	bne.n	80014b8 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d100      	bne.n	80014de <HAL_RCC_OscConfig+0x64a>
 80014dc:	e09f      	b.n	800161e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0x652>
 80014e4:	e078      	b.n	80015d8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d159      	bne.n	80015a2 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x694>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fa39 	bl	8000970 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x6aa>
 8001504:	40021000 	.word	0x40021000
 8001508:	ffff1fff 	.word	0xffff1fff
 800150c:	fffffeff 	.word	0xfffffeff
 8001510:	40007000 	.word	0x40007000
 8001514:	fffffbff 	.word	0xfffffbff
 8001518:	00001388 	.word	0x00001388
 800151c:	efffffff 	.word	0xefffffff
 8001520:	40010000 	.word	0x40010000
 8001524:	ffffdfff 	.word	0xffffdfff
 8001528:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fa20 	bl	8000970 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e070      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	049b      	lsls	r3, r3, #18
 8001546:	4013      	ands	r3, r2
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4a37      	ldr	r2, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x798>)
 8001550:	4013      	ands	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	431a      	orrs	r2, r3
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 8001566:	430a      	orrs	r2, r1
 8001568:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0449      	lsls	r1, r1, #17
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff f9fa 	bl	8000970 <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff f9f5 	bl	8000970 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e045      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	049b      	lsls	r3, r3, #18
 800159c:	4013      	ands	r3, r2
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x6ee>
 80015a0:	e03d      	b.n	800161e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 80015a8:	4921      	ldr	r1, [pc, #132]	; (8001630 <HAL_RCC_OscConfig+0x79c>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff f9df 	bl	8000970 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff f9da 	bl	8000970 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e02a      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	049b      	lsls	r3, r3, #18
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x724>
 80015d6:	e022      	b.n	800161e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_RCC_OscConfig+0x794>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	401a      	ands	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d10f      	bne.n	800161a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	23f0      	movs	r3, #240	; 0xf0
 80015fe:	039b      	lsls	r3, r3, #14
 8001600:	401a      	ands	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d107      	bne.n	800161a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	23c0      	movs	r3, #192	; 0xc0
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b00a      	add	sp, #40	; 0x28
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	ff02ffff 	.word	0xff02ffff
 8001630:	feffffff 	.word	0xfeffffff

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e10d      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d911      	bls.n	800167a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b85      	ldr	r3, [pc, #532]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4393      	bics	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	4b82      	ldr	r3, [pc, #520]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001668:	4b80      	ldr	r3, [pc, #512]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d001      	beq.n	800167a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0f4      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d009      	beq.n	8001698 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001684:	4b7a      	ldr	r3, [pc, #488]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	22f0      	movs	r2, #240	; 0xf0
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	4b77      	ldr	r3, [pc, #476]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001694:	430a      	orrs	r2, r1
 8001696:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d100      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x70>
 80016a2:	e089      	b.n	80017b8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	029b      	lsls	r3, r3, #10
 80016b4:	4013      	ands	r3, r2
 80016b6:	d120      	bne.n	80016fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0d3      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	049b      	lsls	r3, r3, #18
 80016cc:	4013      	ands	r3, r2
 80016ce:	d114      	bne.n	80016fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0c7      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d106      	bne.n	80016ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016dc:	4b64      	ldr	r3, [pc, #400]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2204      	movs	r2, #4
 80016e2:	4013      	ands	r3, r2
 80016e4:	d109      	bne.n	80016fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0bc      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ea:	4b61      	ldr	r3, [pc, #388]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0b4      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fa:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2203      	movs	r2, #3
 8001700:	4393      	bics	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 800170a:	430a      	orrs	r2, r1
 800170c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800170e:	f7ff f92f 	bl	8000970 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d111      	bne.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800171e:	e009      	b.n	8001734 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f926 	bl	8000970 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e097      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	220c      	movs	r2, #12
 800173a:	4013      	ands	r3, r2
 800173c:	2b08      	cmp	r3, #8
 800173e:	d1ef      	bne.n	8001720 <HAL_RCC_ClockConfig+0xec>
 8001740:	e03a      	b.n	80017b8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d111      	bne.n	800176e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	e009      	b.n	8001760 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	f7ff f910 	bl	8000970 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a47      	ldr	r2, [pc, #284]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e081      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	220c      	movs	r2, #12
 8001766:	4013      	ands	r3, r2
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d1ef      	bne.n	800174c <HAL_RCC_ClockConfig+0x118>
 800176c:	e024      	b.n	80017b8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d11b      	bne.n	80017ae <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001776:	e009      	b.n	800178c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f8fa 	bl	8000970 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a3c      	ldr	r2, [pc, #240]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e06b      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	220c      	movs	r2, #12
 8001792:	4013      	ands	r3, r2
 8001794:	2b04      	cmp	r3, #4
 8001796:	d1ef      	bne.n	8001778 <HAL_RCC_ClockConfig+0x144>
 8001798:	e00e      	b.n	80017b8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179a:	f7ff f8e9 	bl	8000970 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a33      	ldr	r2, [pc, #204]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e05a      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	220c      	movs	r2, #12
 80017b4:	4013      	ands	r3, r2
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d211      	bcs.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4393      	bics	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_ClockConfig+0x238>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e03c      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d009      	beq.n	8001808 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001804:	430a      	orrs	r2, r1
 8001806:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2208      	movs	r2, #8
 800180e:	4013      	ands	r3, r2
 8001810:	d00a      	beq.n	8001828 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x248>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	00da      	lsls	r2, r3, #3
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001828:	f000 f82e 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 800182c:	0001      	movs	r1, r0
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_ClockConfig+0x23c>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	220f      	movs	r2, #15
 8001836:	4013      	ands	r3, r2
 8001838:	4a11      	ldr	r2, [pc, #68]	; (8001880 <HAL_RCC_ClockConfig+0x24c>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	000a      	movs	r2, r1
 800183e:	40da      	lsrs	r2, r3
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_RCC_ClockConfig+0x250>)
 8001842:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001844:	250b      	movs	r5, #11
 8001846:	197c      	adds	r4, r7, r5
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff f867 	bl	800091c <HAL_InitTick>
 800184e:	0003      	movs	r3, r0
 8001850:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001852:	197b      	adds	r3, r7, r5
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800185a:	230b      	movs	r3, #11
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	e000      	b.n	8001864 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	00001388 	.word	0x00001388
 8001878:	fffff8ff 	.word	0xfffff8ff
 800187c:	ffffc7ff 	.word	0xffffc7ff
 8001880:	08002d1c 	.word	0x08002d1c
 8001884:	20000000 	.word	0x20000000

08001888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	2b08      	cmp	r3, #8
 800189c:	d00e      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x34>
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d00f      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d157      	bne.n	8001956 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_RCC_GetSysClockFreq+0xf4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2210      	movs	r2, #16
 80018ac:	4013      	ands	r3, r2
 80018ae:	d002      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018b0:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018b4:	e05d      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80018b6:	4b33      	ldr	r3, [pc, #204]	; (8001984 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018b8:	613b      	str	r3, [r7, #16]
      break;
 80018ba:	e05a      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_RCC_GetSysClockFreq+0x100>)
 80018be:	613b      	str	r3, [r7, #16]
      break;
 80018c0:	e057      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	220f      	movs	r2, #15
 80018c8:	4013      	ands	r3, r2
 80018ca:	4a30      	ldr	r2, [pc, #192]	; (800198c <HAL_RCC_GetSysClockFreq+0x104>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	0d9b      	lsrs	r3, r3, #22
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
 80018d8:	3301      	adds	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_RCC_GetSysClockFreq+0xf4>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	025b      	lsls	r3, r3, #9
 80018e4:	4013      	ands	r3, r2
 80018e6:	d00f      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	000a      	movs	r2, r1
 80018ec:	0152      	lsls	r2, r2, #5
 80018ee:	1a52      	subs	r2, r2, r1
 80018f0:	0193      	lsls	r3, r2, #6
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	185b      	adds	r3, r3, r1
 80018f8:	025b      	lsls	r3, r3, #9
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7fe fc03 	bl	8000108 <__udivsi3>
 8001902:	0003      	movs	r3, r0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e023      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <HAL_RCC_GetSysClockFreq+0xf4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2210      	movs	r2, #16
 800190e:	4013      	ands	r3, r2
 8001910:	d00f      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	000a      	movs	r2, r1
 8001916:	0152      	lsls	r2, r2, #5
 8001918:	1a52      	subs	r2, r2, r1
 800191a:	0193      	lsls	r3, r2, #6
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	185b      	adds	r3, r3, r1
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f7fe fbee 	bl	8000108 <__udivsi3>
 800192c:	0003      	movs	r3, r0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e00e      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	000a      	movs	r2, r1
 8001936:	0152      	lsls	r2, r2, #5
 8001938:	1a52      	subs	r2, r2, r1
 800193a:	0193      	lsls	r3, r2, #6
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	185b      	adds	r3, r3, r1
 8001942:	029b      	lsls	r3, r3, #10
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f7fe fbde 	bl	8000108 <__udivsi3>
 800194c:	0003      	movs	r3, r0
 800194e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
      break;
 8001954:	e00d      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	0b5b      	lsrs	r3, r3, #13
 800195c:	2207      	movs	r2, #7
 800195e:	4013      	ands	r3, r2
 8001960:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	0212      	lsls	r2, r2, #8
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
      break;
 8001970:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001972:	693b      	ldr	r3, [r7, #16]
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b006      	add	sp, #24
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	003d0900 	.word	0x003d0900
 8001984:	00f42400 	.word	0x00f42400
 8001988:	007a1200 	.word	0x007a1200
 800198c:	08002d2c 	.word	0x08002d2c

08001990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e059      	b.n	8001a56 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2251      	movs	r2, #81	; 0x51
 80019ac:	5c9b      	ldrb	r3, [r3, r2]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2250      	movs	r2, #80	; 0x50
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe fdee 	bl	80005a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2251      	movs	r2, #81	; 0x51
 80019c8:	2102      	movs	r1, #2
 80019ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2140      	movs	r1, #64	; 0x40
 80019d8:	438a      	bics	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6999      	ldr	r1, [r3, #24]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	400b      	ands	r3, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	0011      	movs	r1, r2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	2204      	movs	r2, #4
 8001a26:	4013      	ands	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <HAL_SPI_Init+0xd0>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2251      	movs	r2, #81	; 0x51
 8001a50:	2101      	movs	r1, #1
 8001a52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	fffff7ff 	.word	0xfffff7ff

08001a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e01e      	b.n	8001ab4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2239      	movs	r2, #57	; 0x39
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d107      	bne.n	8001a92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2238      	movs	r2, #56	; 0x38
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7fe fdef 	bl	8000670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2239      	movs	r2, #57	; 0x39
 8001a96:	2102      	movs	r1, #2
 8001a98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	0010      	movs	r0, r2
 8001aa6:	f000 f93b 	bl	8001d20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2239      	movs	r2, #57	; 0x39
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2207      	movs	r2, #7
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d007      	beq.n	8001af6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d124      	bne.n	8001b60 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d11d      	bne.n	8001b60 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f8d4 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001b48:	e007      	b.n	8001b5a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 f8c7 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 f8d3 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2204      	movs	r2, #4
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d125      	bne.n	8001bba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2204      	movs	r2, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d11e      	bne.n	8001bba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2205      	movs	r2, #5
 8001b82:	4252      	negs	r2, r2
 8001b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f8a7 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001ba2:	e007      	b.n	8001bb4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 f89a 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 f8a6 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d124      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11d      	bne.n	8001c12 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2209      	movs	r2, #9
 8001bdc:	4252      	negs	r2, r2
 8001bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2204      	movs	r2, #4
 8001be4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2203      	movs	r2, #3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f000 f87b 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001bfa:	e007      	b.n	8001c0c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 f86e 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f87a 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2210      	movs	r2, #16
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d125      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2210      	movs	r2, #16
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d11e      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2211      	movs	r2, #17
 8001c34:	4252      	negs	r2, r2
 8001c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	23c0      	movs	r3, #192	; 0xc0
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d004      	beq.n	8001c56 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f84e 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001c54:	e007      	b.n	8001c66 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f841 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 f84d 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10f      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4252      	negs	r2, r2
 8001c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 f81b 	bl	8001cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2240      	movs	r2, #64	; 0x40
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d108      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2241      	movs	r2, #65	; 0x41
 8001cbc:	4252      	negs	r2, r2
 8001cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 f824 	bl	8001d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	05db      	lsls	r3, r3, #23
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d00b      	beq.n	8001d52 <TIM_Base_SetConfig+0x32>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <TIM_Base_SetConfig+0xac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <TIM_Base_SetConfig+0x32>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <TIM_Base_SetConfig+0xb0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d003      	beq.n	8001d52 <TIM_Base_SetConfig+0x32>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <TIM_Base_SetConfig+0xb4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d108      	bne.n	8001d64 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2270      	movs	r2, #112	; 0x70
 8001d56:	4393      	bics	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	05db      	lsls	r3, r3, #23
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d00b      	beq.n	8001d86 <TIM_Base_SetConfig+0x66>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <TIM_Base_SetConfig+0xac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x66>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <TIM_Base_SetConfig+0xb0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x66>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <TIM_Base_SetConfig+0xb4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <TIM_Base_SetConfig+0xb8>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	001a      	movs	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	615a      	str	r2, [r3, #20]
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40010800 	.word	0x40010800
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	fffffcff 	.word	0xfffffcff

08001ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2238      	movs	r2, #56	; 0x38
 8001dea:	5c9b      	ldrb	r3, [r3, r2]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e032      	b.n	8001e5a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2238      	movs	r2, #56	; 0x38
 8001df8:	2101      	movs	r1, #1
 8001dfa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2239      	movs	r2, #57	; 0x39
 8001e00:	2102      	movs	r1, #2
 8001e02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2270      	movs	r2, #112	; 0x70
 8001e18:	4393      	bics	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2239      	movs	r2, #57	; 0x39
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2238      	movs	r2, #56	; 0x38
 8001e54:	2100      	movs	r1, #0
 8001e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <__errno>:
 8001e64:	4b01      	ldr	r3, [pc, #4]	; (8001e6c <__errno+0x8>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	4770      	bx	lr
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	20000004 	.word	0x20000004

08001e70 <__libc_init_array>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	2600      	movs	r6, #0
 8001e74:	4d0c      	ldr	r5, [pc, #48]	; (8001ea8 <__libc_init_array+0x38>)
 8001e76:	4c0d      	ldr	r4, [pc, #52]	; (8001eac <__libc_init_array+0x3c>)
 8001e78:	1b64      	subs	r4, r4, r5
 8001e7a:	10a4      	asrs	r4, r4, #2
 8001e7c:	42a6      	cmp	r6, r4
 8001e7e:	d109      	bne.n	8001e94 <__libc_init_array+0x24>
 8001e80:	2600      	movs	r6, #0
 8001e82:	f000 ff39 	bl	8002cf8 <_init>
 8001e86:	4d0a      	ldr	r5, [pc, #40]	; (8001eb0 <__libc_init_array+0x40>)
 8001e88:	4c0a      	ldr	r4, [pc, #40]	; (8001eb4 <__libc_init_array+0x44>)
 8001e8a:	1b64      	subs	r4, r4, r5
 8001e8c:	10a4      	asrs	r4, r4, #2
 8001e8e:	42a6      	cmp	r6, r4
 8001e90:	d105      	bne.n	8001e9e <__libc_init_array+0x2e>
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	00b3      	lsls	r3, r6, #2
 8001e96:	58eb      	ldr	r3, [r5, r3]
 8001e98:	4798      	blx	r3
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	e7ee      	b.n	8001e7c <__libc_init_array+0xc>
 8001e9e:	00b3      	lsls	r3, r6, #2
 8001ea0:	58eb      	ldr	r3, [r5, r3]
 8001ea2:	4798      	blx	r3
 8001ea4:	3601      	adds	r6, #1
 8001ea6:	e7f2      	b.n	8001e8e <__libc_init_array+0x1e>
 8001ea8:	08002dd0 	.word	0x08002dd0
 8001eac:	08002dd0 	.word	0x08002dd0
 8001eb0:	08002dd0 	.word	0x08002dd0
 8001eb4:	08002dd4 	.word	0x08002dd4

08001eb8 <memset>:
 8001eb8:	0003      	movs	r3, r0
 8001eba:	1812      	adds	r2, r2, r0
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d100      	bne.n	8001ec2 <memset+0xa>
 8001ec0:	4770      	bx	lr
 8001ec2:	7019      	strb	r1, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	e7f9      	b.n	8001ebc <memset+0x4>

08001ec8 <iprintf>:
 8001ec8:	b40f      	push	{r0, r1, r2, r3}
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <iprintf+0x30>)
 8001ecc:	b513      	push	{r0, r1, r4, lr}
 8001ece:	681c      	ldr	r4, [r3, #0]
 8001ed0:	2c00      	cmp	r4, #0
 8001ed2:	d005      	beq.n	8001ee0 <iprintf+0x18>
 8001ed4:	69a3      	ldr	r3, [r4, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <iprintf+0x18>
 8001eda:	0020      	movs	r0, r4
 8001edc:	f000 f850 	bl	8001f80 <__sinit>
 8001ee0:	ab05      	add	r3, sp, #20
 8001ee2:	9a04      	ldr	r2, [sp, #16]
 8001ee4:	68a1      	ldr	r1, [r4, #8]
 8001ee6:	0020      	movs	r0, r4
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	f000 f963 	bl	80021b4 <_vfiprintf_r>
 8001eee:	bc16      	pop	{r1, r2, r4}
 8001ef0:	bc08      	pop	{r3}
 8001ef2:	b004      	add	sp, #16
 8001ef4:	4718      	bx	r3
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	20000004 	.word	0x20000004

08001efc <std>:
 8001efc:	2300      	movs	r3, #0
 8001efe:	b510      	push	{r4, lr}
 8001f00:	0004      	movs	r4, r0
 8001f02:	6003      	str	r3, [r0, #0]
 8001f04:	6043      	str	r3, [r0, #4]
 8001f06:	6083      	str	r3, [r0, #8]
 8001f08:	8181      	strh	r1, [r0, #12]
 8001f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8001f0c:	81c2      	strh	r2, [r0, #14]
 8001f0e:	6103      	str	r3, [r0, #16]
 8001f10:	6143      	str	r3, [r0, #20]
 8001f12:	6183      	str	r3, [r0, #24]
 8001f14:	0019      	movs	r1, r3
 8001f16:	2208      	movs	r2, #8
 8001f18:	305c      	adds	r0, #92	; 0x5c
 8001f1a:	f7ff ffcd 	bl	8001eb8 <memset>
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <std+0x38>)
 8001f20:	6224      	str	r4, [r4, #32]
 8001f22:	6263      	str	r3, [r4, #36]	; 0x24
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <std+0x3c>)
 8001f26:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <std+0x40>)
 8001f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <std+0x44>)
 8001f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8001f30:	bd10      	pop	{r4, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	080026f1 	.word	0x080026f1
 8001f38:	08002719 	.word	0x08002719
 8001f3c:	08002751 	.word	0x08002751
 8001f40:	0800277d 	.word	0x0800277d

08001f44 <_cleanup_r>:
 8001f44:	b510      	push	{r4, lr}
 8001f46:	4902      	ldr	r1, [pc, #8]	; (8001f50 <_cleanup_r+0xc>)
 8001f48:	f000 f88c 	bl	8002064 <_fwalk_reent>
 8001f4c:	bd10      	pop	{r4, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	08002a81 	.word	0x08002a81

08001f54 <__sfmoreglue>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	2568      	movs	r5, #104	; 0x68
 8001f58:	1e4a      	subs	r2, r1, #1
 8001f5a:	4355      	muls	r5, r2
 8001f5c:	000e      	movs	r6, r1
 8001f5e:	0029      	movs	r1, r5
 8001f60:	3174      	adds	r1, #116	; 0x74
 8001f62:	f000 f8a1 	bl	80020a8 <_malloc_r>
 8001f66:	1e04      	subs	r4, r0, #0
 8001f68:	d008      	beq.n	8001f7c <__sfmoreglue+0x28>
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	002a      	movs	r2, r5
 8001f6e:	6001      	str	r1, [r0, #0]
 8001f70:	6046      	str	r6, [r0, #4]
 8001f72:	300c      	adds	r0, #12
 8001f74:	60a0      	str	r0, [r4, #8]
 8001f76:	3268      	adds	r2, #104	; 0x68
 8001f78:	f7ff ff9e 	bl	8001eb8 <memset>
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}

08001f80 <__sinit>:
 8001f80:	6983      	ldr	r3, [r0, #24]
 8001f82:	b513      	push	{r0, r1, r4, lr}
 8001f84:	0004      	movs	r4, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d128      	bne.n	8001fdc <__sinit+0x5c>
 8001f8a:	6483      	str	r3, [r0, #72]	; 0x48
 8001f8c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001f8e:	6503      	str	r3, [r0, #80]	; 0x50
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <__sinit+0x60>)
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <__sinit+0x64>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6282      	str	r2, [r0, #40]	; 0x28
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	4298      	cmp	r0, r3
 8001f9c:	d101      	bne.n	8001fa2 <__sinit+0x22>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	6183      	str	r3, [r0, #24]
 8001fa2:	0020      	movs	r0, r4
 8001fa4:	f000 f820 	bl	8001fe8 <__sfp>
 8001fa8:	6060      	str	r0, [r4, #4]
 8001faa:	0020      	movs	r0, r4
 8001fac:	f000 f81c 	bl	8001fe8 <__sfp>
 8001fb0:	60a0      	str	r0, [r4, #8]
 8001fb2:	0020      	movs	r0, r4
 8001fb4:	f000 f818 	bl	8001fe8 <__sfp>
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60e0      	str	r0, [r4, #12]
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	6860      	ldr	r0, [r4, #4]
 8001fc0:	f7ff ff9c 	bl	8001efc <std>
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2109      	movs	r1, #9
 8001fc8:	68a0      	ldr	r0, [r4, #8]
 8001fca:	f7ff ff97 	bl	8001efc <std>
 8001fce:	2202      	movs	r2, #2
 8001fd0:	2112      	movs	r1, #18
 8001fd2:	68e0      	ldr	r0, [r4, #12]
 8001fd4:	f7ff ff92 	bl	8001efc <std>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	61a3      	str	r3, [r4, #24]
 8001fdc:	bd13      	pop	{r0, r1, r4, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	08002d38 	.word	0x08002d38
 8001fe4:	08001f45 	.word	0x08001f45

08001fe8 <__sfp>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <__sfp+0x74>)
 8001fec:	0007      	movs	r7, r0
 8001fee:	681e      	ldr	r6, [r3, #0]
 8001ff0:	69b3      	ldr	r3, [r6, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <__sfp+0x14>
 8001ff6:	0030      	movs	r0, r6
 8001ff8:	f7ff ffc2 	bl	8001f80 <__sinit>
 8001ffc:	3648      	adds	r6, #72	; 0x48
 8001ffe:	68b4      	ldr	r4, [r6, #8]
 8002000:	6873      	ldr	r3, [r6, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	d504      	bpl.n	8002010 <__sfp+0x28>
 8002006:	6833      	ldr	r3, [r6, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <__sfp+0x34>
 800200c:	6836      	ldr	r6, [r6, #0]
 800200e:	e7f6      	b.n	8001ffe <__sfp+0x16>
 8002010:	220c      	movs	r2, #12
 8002012:	5ea5      	ldrsh	r5, [r4, r2]
 8002014:	2d00      	cmp	r5, #0
 8002016:	d00d      	beq.n	8002034 <__sfp+0x4c>
 8002018:	3468      	adds	r4, #104	; 0x68
 800201a:	e7f2      	b.n	8002002 <__sfp+0x1a>
 800201c:	2104      	movs	r1, #4
 800201e:	0038      	movs	r0, r7
 8002020:	f7ff ff98 	bl	8001f54 <__sfmoreglue>
 8002024:	6030      	str	r0, [r6, #0]
 8002026:	2800      	cmp	r0, #0
 8002028:	d1f0      	bne.n	800200c <__sfp+0x24>
 800202a:	230c      	movs	r3, #12
 800202c:	0004      	movs	r4, r0
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	0020      	movs	r0, r4
 8002032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002034:	0020      	movs	r0, r4
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <__sfp+0x78>)
 8002038:	6665      	str	r5, [r4, #100]	; 0x64
 800203a:	6025      	str	r5, [r4, #0]
 800203c:	6065      	str	r5, [r4, #4]
 800203e:	60a5      	str	r5, [r4, #8]
 8002040:	60e3      	str	r3, [r4, #12]
 8002042:	6125      	str	r5, [r4, #16]
 8002044:	6165      	str	r5, [r4, #20]
 8002046:	61a5      	str	r5, [r4, #24]
 8002048:	2208      	movs	r2, #8
 800204a:	0029      	movs	r1, r5
 800204c:	305c      	adds	r0, #92	; 0x5c
 800204e:	f7ff ff33 	bl	8001eb8 <memset>
 8002052:	6365      	str	r5, [r4, #52]	; 0x34
 8002054:	63a5      	str	r5, [r4, #56]	; 0x38
 8002056:	64a5      	str	r5, [r4, #72]	; 0x48
 8002058:	64e5      	str	r5, [r4, #76]	; 0x4c
 800205a:	e7e9      	b.n	8002030 <__sfp+0x48>
 800205c:	08002d38 	.word	0x08002d38
 8002060:	ffff0001 	.word	0xffff0001

08002064 <_fwalk_reent>:
 8002064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002066:	0004      	movs	r4, r0
 8002068:	0007      	movs	r7, r0
 800206a:	2600      	movs	r6, #0
 800206c:	9101      	str	r1, [sp, #4]
 800206e:	3448      	adds	r4, #72	; 0x48
 8002070:	2c00      	cmp	r4, #0
 8002072:	d101      	bne.n	8002078 <_fwalk_reent+0x14>
 8002074:	0030      	movs	r0, r6
 8002076:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002078:	6863      	ldr	r3, [r4, #4]
 800207a:	68a5      	ldr	r5, [r4, #8]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	9b00      	ldr	r3, [sp, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	d501      	bpl.n	800208a <_fwalk_reent+0x26>
 8002086:	6824      	ldr	r4, [r4, #0]
 8002088:	e7f2      	b.n	8002070 <_fwalk_reent+0xc>
 800208a:	89ab      	ldrh	r3, [r5, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d908      	bls.n	80020a2 <_fwalk_reent+0x3e>
 8002090:	220e      	movs	r2, #14
 8002092:	5eab      	ldrsh	r3, [r5, r2]
 8002094:	3301      	adds	r3, #1
 8002096:	d004      	beq.n	80020a2 <_fwalk_reent+0x3e>
 8002098:	0029      	movs	r1, r5
 800209a:	0038      	movs	r0, r7
 800209c:	9b01      	ldr	r3, [sp, #4]
 800209e:	4798      	blx	r3
 80020a0:	4306      	orrs	r6, r0
 80020a2:	3568      	adds	r5, #104	; 0x68
 80020a4:	e7eb      	b.n	800207e <_fwalk_reent+0x1a>
	...

080020a8 <_malloc_r>:
 80020a8:	2303      	movs	r3, #3
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	1ccd      	adds	r5, r1, #3
 80020ae:	439d      	bics	r5, r3
 80020b0:	3508      	adds	r5, #8
 80020b2:	0006      	movs	r6, r0
 80020b4:	2d0c      	cmp	r5, #12
 80020b6:	d21e      	bcs.n	80020f6 <_malloc_r+0x4e>
 80020b8:	250c      	movs	r5, #12
 80020ba:	42a9      	cmp	r1, r5
 80020bc:	d81d      	bhi.n	80020fa <_malloc_r+0x52>
 80020be:	0030      	movs	r0, r6
 80020c0:	f000 fd95 	bl	8002bee <__malloc_lock>
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <_malloc_r+0xb4>)
 80020c6:	6814      	ldr	r4, [r2, #0]
 80020c8:	0021      	movs	r1, r4
 80020ca:	2900      	cmp	r1, #0
 80020cc:	d119      	bne.n	8002102 <_malloc_r+0x5a>
 80020ce:	4c24      	ldr	r4, [pc, #144]	; (8002160 <_malloc_r+0xb8>)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <_malloc_r+0x36>
 80020d6:	0030      	movs	r0, r6
 80020d8:	f000 faf8 	bl	80026cc <_sbrk_r>
 80020dc:	6020      	str	r0, [r4, #0]
 80020de:	0029      	movs	r1, r5
 80020e0:	0030      	movs	r0, r6
 80020e2:	f000 faf3 	bl	80026cc <_sbrk_r>
 80020e6:	1c43      	adds	r3, r0, #1
 80020e8:	d12b      	bne.n	8002142 <_malloc_r+0x9a>
 80020ea:	230c      	movs	r3, #12
 80020ec:	0030      	movs	r0, r6
 80020ee:	6033      	str	r3, [r6, #0]
 80020f0:	f000 fd7e 	bl	8002bf0 <__malloc_unlock>
 80020f4:	e003      	b.n	80020fe <_malloc_r+0x56>
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	dadf      	bge.n	80020ba <_malloc_r+0x12>
 80020fa:	230c      	movs	r3, #12
 80020fc:	6033      	str	r3, [r6, #0]
 80020fe:	2000      	movs	r0, #0
 8002100:	bd70      	pop	{r4, r5, r6, pc}
 8002102:	680b      	ldr	r3, [r1, #0]
 8002104:	1b5b      	subs	r3, r3, r5
 8002106:	d419      	bmi.n	800213c <_malloc_r+0x94>
 8002108:	2b0b      	cmp	r3, #11
 800210a:	d903      	bls.n	8002114 <_malloc_r+0x6c>
 800210c:	600b      	str	r3, [r1, #0]
 800210e:	18cc      	adds	r4, r1, r3
 8002110:	6025      	str	r5, [r4, #0]
 8002112:	e003      	b.n	800211c <_malloc_r+0x74>
 8002114:	684b      	ldr	r3, [r1, #4]
 8002116:	428c      	cmp	r4, r1
 8002118:	d10d      	bne.n	8002136 <_malloc_r+0x8e>
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	0030      	movs	r0, r6
 800211e:	f000 fd67 	bl	8002bf0 <__malloc_unlock>
 8002122:	0020      	movs	r0, r4
 8002124:	2207      	movs	r2, #7
 8002126:	300b      	adds	r0, #11
 8002128:	1d23      	adds	r3, r4, #4
 800212a:	4390      	bics	r0, r2
 800212c:	1ac3      	subs	r3, r0, r3
 800212e:	d0e7      	beq.n	8002100 <_malloc_r+0x58>
 8002130:	425a      	negs	r2, r3
 8002132:	50e2      	str	r2, [r4, r3]
 8002134:	e7e4      	b.n	8002100 <_malloc_r+0x58>
 8002136:	6063      	str	r3, [r4, #4]
 8002138:	000c      	movs	r4, r1
 800213a:	e7ef      	b.n	800211c <_malloc_r+0x74>
 800213c:	000c      	movs	r4, r1
 800213e:	6849      	ldr	r1, [r1, #4]
 8002140:	e7c3      	b.n	80020ca <_malloc_r+0x22>
 8002142:	2303      	movs	r3, #3
 8002144:	1cc4      	adds	r4, r0, #3
 8002146:	439c      	bics	r4, r3
 8002148:	42a0      	cmp	r0, r4
 800214a:	d0e1      	beq.n	8002110 <_malloc_r+0x68>
 800214c:	1a21      	subs	r1, r4, r0
 800214e:	0030      	movs	r0, r6
 8002150:	f000 fabc 	bl	80026cc <_sbrk_r>
 8002154:	1c43      	adds	r3, r0, #1
 8002156:	d1db      	bne.n	8002110 <_malloc_r+0x68>
 8002158:	e7c7      	b.n	80020ea <_malloc_r+0x42>
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	20000088 	.word	0x20000088
 8002160:	2000008c 	.word	0x2000008c

08002164 <__sfputc_r>:
 8002164:	6893      	ldr	r3, [r2, #8]
 8002166:	b510      	push	{r4, lr}
 8002168:	3b01      	subs	r3, #1
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da04      	bge.n	800217a <__sfputc_r+0x16>
 8002170:	6994      	ldr	r4, [r2, #24]
 8002172:	42a3      	cmp	r3, r4
 8002174:	db07      	blt.n	8002186 <__sfputc_r+0x22>
 8002176:	290a      	cmp	r1, #10
 8002178:	d005      	beq.n	8002186 <__sfputc_r+0x22>
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	1c58      	adds	r0, r3, #1
 800217e:	6010      	str	r0, [r2, #0]
 8002180:	7019      	strb	r1, [r3, #0]
 8002182:	0008      	movs	r0, r1
 8002184:	bd10      	pop	{r4, pc}
 8002186:	f000 faff 	bl	8002788 <__swbuf_r>
 800218a:	0001      	movs	r1, r0
 800218c:	e7f9      	b.n	8002182 <__sfputc_r+0x1e>

0800218e <__sfputs_r>:
 800218e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002190:	0006      	movs	r6, r0
 8002192:	000f      	movs	r7, r1
 8002194:	0014      	movs	r4, r2
 8002196:	18d5      	adds	r5, r2, r3
 8002198:	42ac      	cmp	r4, r5
 800219a:	d101      	bne.n	80021a0 <__sfputs_r+0x12>
 800219c:	2000      	movs	r0, #0
 800219e:	e007      	b.n	80021b0 <__sfputs_r+0x22>
 80021a0:	7821      	ldrb	r1, [r4, #0]
 80021a2:	003a      	movs	r2, r7
 80021a4:	0030      	movs	r0, r6
 80021a6:	f7ff ffdd 	bl	8002164 <__sfputc_r>
 80021aa:	3401      	adds	r4, #1
 80021ac:	1c43      	adds	r3, r0, #1
 80021ae:	d1f3      	bne.n	8002198 <__sfputs_r+0xa>
 80021b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021b4 <_vfiprintf_r>:
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b0a1      	sub	sp, #132	; 0x84
 80021b8:	9003      	str	r0, [sp, #12]
 80021ba:	000f      	movs	r7, r1
 80021bc:	0016      	movs	r6, r2
 80021be:	001d      	movs	r5, r3
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d005      	beq.n	80021d0 <_vfiprintf_r+0x1c>
 80021c4:	6983      	ldr	r3, [r0, #24]
 80021c6:	9305      	str	r3, [sp, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <_vfiprintf_r+0x1c>
 80021cc:	f7ff fed8 	bl	8001f80 <__sinit>
 80021d0:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <_vfiprintf_r+0x20c>)
 80021d2:	429f      	cmp	r7, r3
 80021d4:	d15c      	bne.n	8002290 <_vfiprintf_r+0xdc>
 80021d6:	9b03      	ldr	r3, [sp, #12]
 80021d8:	685f      	ldr	r7, [r3, #4]
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	071b      	lsls	r3, r3, #28
 80021de:	d563      	bpl.n	80022a8 <_vfiprintf_r+0xf4>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d060      	beq.n	80022a8 <_vfiprintf_r+0xf4>
 80021e6:	2300      	movs	r3, #0
 80021e8:	ac08      	add	r4, sp, #32
 80021ea:	6163      	str	r3, [r4, #20]
 80021ec:	3320      	adds	r3, #32
 80021ee:	7663      	strb	r3, [r4, #25]
 80021f0:	3310      	adds	r3, #16
 80021f2:	76a3      	strb	r3, [r4, #26]
 80021f4:	9507      	str	r5, [sp, #28]
 80021f6:	0035      	movs	r5, r6
 80021f8:	782b      	ldrb	r3, [r5, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <_vfiprintf_r+0x4e>
 80021fe:	2b25      	cmp	r3, #37	; 0x25
 8002200:	d15c      	bne.n	80022bc <_vfiprintf_r+0x108>
 8002202:	1bab      	subs	r3, r5, r6
 8002204:	9305      	str	r3, [sp, #20]
 8002206:	d00c      	beq.n	8002222 <_vfiprintf_r+0x6e>
 8002208:	0032      	movs	r2, r6
 800220a:	0039      	movs	r1, r7
 800220c:	9803      	ldr	r0, [sp, #12]
 800220e:	f7ff ffbe 	bl	800218e <__sfputs_r>
 8002212:	1c43      	adds	r3, r0, #1
 8002214:	d100      	bne.n	8002218 <_vfiprintf_r+0x64>
 8002216:	e0c4      	b.n	80023a2 <_vfiprintf_r+0x1ee>
 8002218:	6962      	ldr	r2, [r4, #20]
 800221a:	9b05      	ldr	r3, [sp, #20]
 800221c:	4694      	mov	ip, r2
 800221e:	4463      	add	r3, ip
 8002220:	6163      	str	r3, [r4, #20]
 8002222:	782b      	ldrb	r3, [r5, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <_vfiprintf_r+0x76>
 8002228:	e0bb      	b.n	80023a2 <_vfiprintf_r+0x1ee>
 800222a:	2201      	movs	r2, #1
 800222c:	2300      	movs	r3, #0
 800222e:	4252      	negs	r2, r2
 8002230:	6062      	str	r2, [r4, #4]
 8002232:	a904      	add	r1, sp, #16
 8002234:	3254      	adds	r2, #84	; 0x54
 8002236:	1852      	adds	r2, r2, r1
 8002238:	1c6e      	adds	r6, r5, #1
 800223a:	6023      	str	r3, [r4, #0]
 800223c:	60e3      	str	r3, [r4, #12]
 800223e:	60a3      	str	r3, [r4, #8]
 8002240:	7013      	strb	r3, [r2, #0]
 8002242:	65a3      	str	r3, [r4, #88]	; 0x58
 8002244:	7831      	ldrb	r1, [r6, #0]
 8002246:	2205      	movs	r2, #5
 8002248:	485e      	ldr	r0, [pc, #376]	; (80023c4 <_vfiprintf_r+0x210>)
 800224a:	f000 fcc5 	bl	8002bd8 <memchr>
 800224e:	1c75      	adds	r5, r6, #1
 8002250:	2800      	cmp	r0, #0
 8002252:	d135      	bne.n	80022c0 <_vfiprintf_r+0x10c>
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	06d3      	lsls	r3, r2, #27
 8002258:	d504      	bpl.n	8002264 <_vfiprintf_r+0xb0>
 800225a:	2353      	movs	r3, #83	; 0x53
 800225c:	a904      	add	r1, sp, #16
 800225e:	185b      	adds	r3, r3, r1
 8002260:	2120      	movs	r1, #32
 8002262:	7019      	strb	r1, [r3, #0]
 8002264:	0713      	lsls	r3, r2, #28
 8002266:	d504      	bpl.n	8002272 <_vfiprintf_r+0xbe>
 8002268:	2353      	movs	r3, #83	; 0x53
 800226a:	a904      	add	r1, sp, #16
 800226c:	185b      	adds	r3, r3, r1
 800226e:	212b      	movs	r1, #43	; 0x2b
 8002270:	7019      	strb	r1, [r3, #0]
 8002272:	7833      	ldrb	r3, [r6, #0]
 8002274:	2b2a      	cmp	r3, #42	; 0x2a
 8002276:	d02c      	beq.n	80022d2 <_vfiprintf_r+0x11e>
 8002278:	0035      	movs	r5, r6
 800227a:	2100      	movs	r1, #0
 800227c:	200a      	movs	r0, #10
 800227e:	68e3      	ldr	r3, [r4, #12]
 8002280:	782a      	ldrb	r2, [r5, #0]
 8002282:	1c6e      	adds	r6, r5, #1
 8002284:	3a30      	subs	r2, #48	; 0x30
 8002286:	2a09      	cmp	r2, #9
 8002288:	d964      	bls.n	8002354 <_vfiprintf_r+0x1a0>
 800228a:	2900      	cmp	r1, #0
 800228c:	d02e      	beq.n	80022ec <_vfiprintf_r+0x138>
 800228e:	e026      	b.n	80022de <_vfiprintf_r+0x12a>
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <_vfiprintf_r+0x214>)
 8002292:	429f      	cmp	r7, r3
 8002294:	d102      	bne.n	800229c <_vfiprintf_r+0xe8>
 8002296:	9b03      	ldr	r3, [sp, #12]
 8002298:	689f      	ldr	r7, [r3, #8]
 800229a:	e79e      	b.n	80021da <_vfiprintf_r+0x26>
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <_vfiprintf_r+0x218>)
 800229e:	429f      	cmp	r7, r3
 80022a0:	d19b      	bne.n	80021da <_vfiprintf_r+0x26>
 80022a2:	9b03      	ldr	r3, [sp, #12]
 80022a4:	68df      	ldr	r7, [r3, #12]
 80022a6:	e798      	b.n	80021da <_vfiprintf_r+0x26>
 80022a8:	0039      	movs	r1, r7
 80022aa:	9803      	ldr	r0, [sp, #12]
 80022ac:	f000 fad6 	bl	800285c <__swsetup_r>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d098      	beq.n	80021e6 <_vfiprintf_r+0x32>
 80022b4:	2001      	movs	r0, #1
 80022b6:	4240      	negs	r0, r0
 80022b8:	b021      	add	sp, #132	; 0x84
 80022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022bc:	3501      	adds	r5, #1
 80022be:	e79b      	b.n	80021f8 <_vfiprintf_r+0x44>
 80022c0:	4b40      	ldr	r3, [pc, #256]	; (80023c4 <_vfiprintf_r+0x210>)
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	1ac0      	subs	r0, r0, r3
 80022c6:	2301      	movs	r3, #1
 80022c8:	4083      	lsls	r3, r0
 80022ca:	4313      	orrs	r3, r2
 80022cc:	6023      	str	r3, [r4, #0]
 80022ce:	002e      	movs	r6, r5
 80022d0:	e7b8      	b.n	8002244 <_vfiprintf_r+0x90>
 80022d2:	9b07      	ldr	r3, [sp, #28]
 80022d4:	1d19      	adds	r1, r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	9107      	str	r1, [sp, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db01      	blt.n	80022e2 <_vfiprintf_r+0x12e>
 80022de:	930b      	str	r3, [sp, #44]	; 0x2c
 80022e0:	e004      	b.n	80022ec <_vfiprintf_r+0x138>
 80022e2:	425b      	negs	r3, r3
 80022e4:	60e3      	str	r3, [r4, #12]
 80022e6:	2302      	movs	r3, #2
 80022e8:	4313      	orrs	r3, r2
 80022ea:	6023      	str	r3, [r4, #0]
 80022ec:	782b      	ldrb	r3, [r5, #0]
 80022ee:	2b2e      	cmp	r3, #46	; 0x2e
 80022f0:	d10a      	bne.n	8002308 <_vfiprintf_r+0x154>
 80022f2:	786b      	ldrb	r3, [r5, #1]
 80022f4:	2b2a      	cmp	r3, #42	; 0x2a
 80022f6:	d135      	bne.n	8002364 <_vfiprintf_r+0x1b0>
 80022f8:	9b07      	ldr	r3, [sp, #28]
 80022fa:	3502      	adds	r5, #2
 80022fc:	1d1a      	adds	r2, r3, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	9207      	str	r2, [sp, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db2b      	blt.n	800235e <_vfiprintf_r+0x1aa>
 8002306:	9309      	str	r3, [sp, #36]	; 0x24
 8002308:	4e31      	ldr	r6, [pc, #196]	; (80023d0 <_vfiprintf_r+0x21c>)
 800230a:	7829      	ldrb	r1, [r5, #0]
 800230c:	2203      	movs	r2, #3
 800230e:	0030      	movs	r0, r6
 8002310:	f000 fc62 	bl	8002bd8 <memchr>
 8002314:	2800      	cmp	r0, #0
 8002316:	d006      	beq.n	8002326 <_vfiprintf_r+0x172>
 8002318:	2340      	movs	r3, #64	; 0x40
 800231a:	1b80      	subs	r0, r0, r6
 800231c:	4083      	lsls	r3, r0
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	3501      	adds	r5, #1
 8002322:	4313      	orrs	r3, r2
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	7829      	ldrb	r1, [r5, #0]
 8002328:	2206      	movs	r2, #6
 800232a:	482a      	ldr	r0, [pc, #168]	; (80023d4 <_vfiprintf_r+0x220>)
 800232c:	1c6e      	adds	r6, r5, #1
 800232e:	7621      	strb	r1, [r4, #24]
 8002330:	f000 fc52 	bl	8002bd8 <memchr>
 8002334:	2800      	cmp	r0, #0
 8002336:	d03a      	beq.n	80023ae <_vfiprintf_r+0x1fa>
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <_vfiprintf_r+0x224>)
 800233a:	2b00      	cmp	r3, #0
 800233c:	d125      	bne.n	800238a <_vfiprintf_r+0x1d6>
 800233e:	2207      	movs	r2, #7
 8002340:	9b07      	ldr	r3, [sp, #28]
 8002342:	3307      	adds	r3, #7
 8002344:	4393      	bics	r3, r2
 8002346:	3308      	adds	r3, #8
 8002348:	9307      	str	r3, [sp, #28]
 800234a:	6963      	ldr	r3, [r4, #20]
 800234c:	9a04      	ldr	r2, [sp, #16]
 800234e:	189b      	adds	r3, r3, r2
 8002350:	6163      	str	r3, [r4, #20]
 8002352:	e750      	b.n	80021f6 <_vfiprintf_r+0x42>
 8002354:	4343      	muls	r3, r0
 8002356:	2101      	movs	r1, #1
 8002358:	189b      	adds	r3, r3, r2
 800235a:	0035      	movs	r5, r6
 800235c:	e790      	b.n	8002280 <_vfiprintf_r+0xcc>
 800235e:	2301      	movs	r3, #1
 8002360:	425b      	negs	r3, r3
 8002362:	e7d0      	b.n	8002306 <_vfiprintf_r+0x152>
 8002364:	2300      	movs	r3, #0
 8002366:	200a      	movs	r0, #10
 8002368:	001a      	movs	r2, r3
 800236a:	3501      	adds	r5, #1
 800236c:	6063      	str	r3, [r4, #4]
 800236e:	7829      	ldrb	r1, [r5, #0]
 8002370:	1c6e      	adds	r6, r5, #1
 8002372:	3930      	subs	r1, #48	; 0x30
 8002374:	2909      	cmp	r1, #9
 8002376:	d903      	bls.n	8002380 <_vfiprintf_r+0x1cc>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0c5      	beq.n	8002308 <_vfiprintf_r+0x154>
 800237c:	9209      	str	r2, [sp, #36]	; 0x24
 800237e:	e7c3      	b.n	8002308 <_vfiprintf_r+0x154>
 8002380:	4342      	muls	r2, r0
 8002382:	2301      	movs	r3, #1
 8002384:	1852      	adds	r2, r2, r1
 8002386:	0035      	movs	r5, r6
 8002388:	e7f1      	b.n	800236e <_vfiprintf_r+0x1ba>
 800238a:	ab07      	add	r3, sp, #28
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	003a      	movs	r2, r7
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <_vfiprintf_r+0x228>)
 8002392:	0021      	movs	r1, r4
 8002394:	9803      	ldr	r0, [sp, #12]
 8002396:	e000      	b.n	800239a <_vfiprintf_r+0x1e6>
 8002398:	bf00      	nop
 800239a:	9004      	str	r0, [sp, #16]
 800239c:	9b04      	ldr	r3, [sp, #16]
 800239e:	3301      	adds	r3, #1
 80023a0:	d1d3      	bne.n	800234a <_vfiprintf_r+0x196>
 80023a2:	89bb      	ldrh	r3, [r7, #12]
 80023a4:	065b      	lsls	r3, r3, #25
 80023a6:	d500      	bpl.n	80023aa <_vfiprintf_r+0x1f6>
 80023a8:	e784      	b.n	80022b4 <_vfiprintf_r+0x100>
 80023aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80023ac:	e784      	b.n	80022b8 <_vfiprintf_r+0x104>
 80023ae:	ab07      	add	r3, sp, #28
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	003a      	movs	r2, r7
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <_vfiprintf_r+0x228>)
 80023b6:	0021      	movs	r1, r4
 80023b8:	9803      	ldr	r0, [sp, #12]
 80023ba:	f000 f87f 	bl	80024bc <_printf_i>
 80023be:	e7ec      	b.n	800239a <_vfiprintf_r+0x1e6>
 80023c0:	08002d5c 	.word	0x08002d5c
 80023c4:	08002d9c 	.word	0x08002d9c
 80023c8:	08002d7c 	.word	0x08002d7c
 80023cc:	08002d3c 	.word	0x08002d3c
 80023d0:	08002da2 	.word	0x08002da2
 80023d4:	08002da6 	.word	0x08002da6
 80023d8:	00000000 	.word	0x00000000
 80023dc:	0800218f 	.word	0x0800218f

080023e0 <_printf_common>:
 80023e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023e2:	0015      	movs	r5, r2
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	688a      	ldr	r2, [r1, #8]
 80023e8:	690b      	ldr	r3, [r1, #16]
 80023ea:	9000      	str	r0, [sp, #0]
 80023ec:	000c      	movs	r4, r1
 80023ee:	4293      	cmp	r3, r2
 80023f0:	da00      	bge.n	80023f4 <_printf_common+0x14>
 80023f2:	0013      	movs	r3, r2
 80023f4:	0022      	movs	r2, r4
 80023f6:	602b      	str	r3, [r5, #0]
 80023f8:	3243      	adds	r2, #67	; 0x43
 80023fa:	7812      	ldrb	r2, [r2, #0]
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d001      	beq.n	8002404 <_printf_common+0x24>
 8002400:	3301      	adds	r3, #1
 8002402:	602b      	str	r3, [r5, #0]
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	d502      	bpl.n	8002410 <_printf_common+0x30>
 800240a:	682b      	ldr	r3, [r5, #0]
 800240c:	3302      	adds	r3, #2
 800240e:	602b      	str	r3, [r5, #0]
 8002410:	2706      	movs	r7, #6
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	401f      	ands	r7, r3
 8002416:	d027      	beq.n	8002468 <_printf_common+0x88>
 8002418:	0023      	movs	r3, r4
 800241a:	3343      	adds	r3, #67	; 0x43
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	1e5a      	subs	r2, r3, #1
 8002420:	4193      	sbcs	r3, r2
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	0692      	lsls	r2, r2, #26
 8002426:	d430      	bmi.n	800248a <_printf_common+0xaa>
 8002428:	0022      	movs	r2, r4
 800242a:	9901      	ldr	r1, [sp, #4]
 800242c:	3243      	adds	r2, #67	; 0x43
 800242e:	9800      	ldr	r0, [sp, #0]
 8002430:	9e08      	ldr	r6, [sp, #32]
 8002432:	47b0      	blx	r6
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	d025      	beq.n	8002484 <_printf_common+0xa4>
 8002438:	2306      	movs	r3, #6
 800243a:	6820      	ldr	r0, [r4, #0]
 800243c:	682a      	ldr	r2, [r5, #0]
 800243e:	68e1      	ldr	r1, [r4, #12]
 8002440:	4003      	ands	r3, r0
 8002442:	2500      	movs	r5, #0
 8002444:	2b04      	cmp	r3, #4
 8002446:	d103      	bne.n	8002450 <_printf_common+0x70>
 8002448:	1a8d      	subs	r5, r1, r2
 800244a:	43eb      	mvns	r3, r5
 800244c:	17db      	asrs	r3, r3, #31
 800244e:	401d      	ands	r5, r3
 8002450:	68a3      	ldr	r3, [r4, #8]
 8002452:	6922      	ldr	r2, [r4, #16]
 8002454:	4293      	cmp	r3, r2
 8002456:	dd01      	ble.n	800245c <_printf_common+0x7c>
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	18ed      	adds	r5, r5, r3
 800245c:	2700      	movs	r7, #0
 800245e:	42bd      	cmp	r5, r7
 8002460:	d120      	bne.n	80024a4 <_printf_common+0xc4>
 8002462:	2000      	movs	r0, #0
 8002464:	e010      	b.n	8002488 <_printf_common+0xa8>
 8002466:	3701      	adds	r7, #1
 8002468:	68e3      	ldr	r3, [r4, #12]
 800246a:	682a      	ldr	r2, [r5, #0]
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	42bb      	cmp	r3, r7
 8002470:	ddd2      	ble.n	8002418 <_printf_common+0x38>
 8002472:	0022      	movs	r2, r4
 8002474:	2301      	movs	r3, #1
 8002476:	3219      	adds	r2, #25
 8002478:	9901      	ldr	r1, [sp, #4]
 800247a:	9800      	ldr	r0, [sp, #0]
 800247c:	9e08      	ldr	r6, [sp, #32]
 800247e:	47b0      	blx	r6
 8002480:	1c43      	adds	r3, r0, #1
 8002482:	d1f0      	bne.n	8002466 <_printf_common+0x86>
 8002484:	2001      	movs	r0, #1
 8002486:	4240      	negs	r0, r0
 8002488:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800248a:	2030      	movs	r0, #48	; 0x30
 800248c:	18e1      	adds	r1, r4, r3
 800248e:	3143      	adds	r1, #67	; 0x43
 8002490:	7008      	strb	r0, [r1, #0]
 8002492:	0021      	movs	r1, r4
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	3145      	adds	r1, #69	; 0x45
 8002498:	7809      	ldrb	r1, [r1, #0]
 800249a:	18a2      	adds	r2, r4, r2
 800249c:	3243      	adds	r2, #67	; 0x43
 800249e:	3302      	adds	r3, #2
 80024a0:	7011      	strb	r1, [r2, #0]
 80024a2:	e7c1      	b.n	8002428 <_printf_common+0x48>
 80024a4:	0022      	movs	r2, r4
 80024a6:	2301      	movs	r3, #1
 80024a8:	321a      	adds	r2, #26
 80024aa:	9901      	ldr	r1, [sp, #4]
 80024ac:	9800      	ldr	r0, [sp, #0]
 80024ae:	9e08      	ldr	r6, [sp, #32]
 80024b0:	47b0      	blx	r6
 80024b2:	1c43      	adds	r3, r0, #1
 80024b4:	d0e6      	beq.n	8002484 <_printf_common+0xa4>
 80024b6:	3701      	adds	r7, #1
 80024b8:	e7d1      	b.n	800245e <_printf_common+0x7e>
	...

080024bc <_printf_i>:
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	9204      	str	r2, [sp, #16]
 80024c2:	000a      	movs	r2, r1
 80024c4:	3243      	adds	r2, #67	; 0x43
 80024c6:	9305      	str	r3, [sp, #20]
 80024c8:	9003      	str	r0, [sp, #12]
 80024ca:	9202      	str	r2, [sp, #8]
 80024cc:	7e0a      	ldrb	r2, [r1, #24]
 80024ce:	000c      	movs	r4, r1
 80024d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024d2:	2a6e      	cmp	r2, #110	; 0x6e
 80024d4:	d100      	bne.n	80024d8 <_printf_i+0x1c>
 80024d6:	e086      	b.n	80025e6 <_printf_i+0x12a>
 80024d8:	d81f      	bhi.n	800251a <_printf_i+0x5e>
 80024da:	2a63      	cmp	r2, #99	; 0x63
 80024dc:	d033      	beq.n	8002546 <_printf_i+0x8a>
 80024de:	d808      	bhi.n	80024f2 <_printf_i+0x36>
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d100      	bne.n	80024e6 <_printf_i+0x2a>
 80024e4:	e08c      	b.n	8002600 <_printf_i+0x144>
 80024e6:	2a58      	cmp	r2, #88	; 0x58
 80024e8:	d04d      	beq.n	8002586 <_printf_i+0xca>
 80024ea:	0025      	movs	r5, r4
 80024ec:	3542      	adds	r5, #66	; 0x42
 80024ee:	702a      	strb	r2, [r5, #0]
 80024f0:	e030      	b.n	8002554 <_printf_i+0x98>
 80024f2:	2a64      	cmp	r2, #100	; 0x64
 80024f4:	d001      	beq.n	80024fa <_printf_i+0x3e>
 80024f6:	2a69      	cmp	r2, #105	; 0x69
 80024f8:	d1f7      	bne.n	80024ea <_printf_i+0x2e>
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	6825      	ldr	r5, [r4, #0]
 80024fe:	1d0a      	adds	r2, r1, #4
 8002500:	0628      	lsls	r0, r5, #24
 8002502:	d529      	bpl.n	8002558 <_printf_i+0x9c>
 8002504:	6808      	ldr	r0, [r1, #0]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	2800      	cmp	r0, #0
 800250a:	da03      	bge.n	8002514 <_printf_i+0x58>
 800250c:	232d      	movs	r3, #45	; 0x2d
 800250e:	9a02      	ldr	r2, [sp, #8]
 8002510:	4240      	negs	r0, r0
 8002512:	7013      	strb	r3, [r2, #0]
 8002514:	4e6b      	ldr	r6, [pc, #428]	; (80026c4 <_printf_i+0x208>)
 8002516:	270a      	movs	r7, #10
 8002518:	e04f      	b.n	80025ba <_printf_i+0xfe>
 800251a:	2a73      	cmp	r2, #115	; 0x73
 800251c:	d074      	beq.n	8002608 <_printf_i+0x14c>
 800251e:	d808      	bhi.n	8002532 <_printf_i+0x76>
 8002520:	2a6f      	cmp	r2, #111	; 0x6f
 8002522:	d01f      	beq.n	8002564 <_printf_i+0xa8>
 8002524:	2a70      	cmp	r2, #112	; 0x70
 8002526:	d1e0      	bne.n	80024ea <_printf_i+0x2e>
 8002528:	2220      	movs	r2, #32
 800252a:	6809      	ldr	r1, [r1, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	6022      	str	r2, [r4, #0]
 8002530:	e003      	b.n	800253a <_printf_i+0x7e>
 8002532:	2a75      	cmp	r2, #117	; 0x75
 8002534:	d016      	beq.n	8002564 <_printf_i+0xa8>
 8002536:	2a78      	cmp	r2, #120	; 0x78
 8002538:	d1d7      	bne.n	80024ea <_printf_i+0x2e>
 800253a:	0022      	movs	r2, r4
 800253c:	2178      	movs	r1, #120	; 0x78
 800253e:	3245      	adds	r2, #69	; 0x45
 8002540:	7011      	strb	r1, [r2, #0]
 8002542:	4e61      	ldr	r6, [pc, #388]	; (80026c8 <_printf_i+0x20c>)
 8002544:	e022      	b.n	800258c <_printf_i+0xd0>
 8002546:	0025      	movs	r5, r4
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	3542      	adds	r5, #66	; 0x42
 800254c:	1d11      	adds	r1, r2, #4
 800254e:	6019      	str	r1, [r3, #0]
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	702b      	strb	r3, [r5, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	e065      	b.n	8002624 <_printf_i+0x168>
 8002558:	6808      	ldr	r0, [r1, #0]
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	0669      	lsls	r1, r5, #25
 800255e:	d5d3      	bpl.n	8002508 <_printf_i+0x4c>
 8002560:	b200      	sxth	r0, r0
 8002562:	e7d1      	b.n	8002508 <_printf_i+0x4c>
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	6825      	ldr	r5, [r4, #0]
 8002568:	1d08      	adds	r0, r1, #4
 800256a:	6018      	str	r0, [r3, #0]
 800256c:	6808      	ldr	r0, [r1, #0]
 800256e:	062e      	lsls	r6, r5, #24
 8002570:	d505      	bpl.n	800257e <_printf_i+0xc2>
 8002572:	4e54      	ldr	r6, [pc, #336]	; (80026c4 <_printf_i+0x208>)
 8002574:	2708      	movs	r7, #8
 8002576:	2a6f      	cmp	r2, #111	; 0x6f
 8002578:	d01b      	beq.n	80025b2 <_printf_i+0xf6>
 800257a:	270a      	movs	r7, #10
 800257c:	e019      	b.n	80025b2 <_printf_i+0xf6>
 800257e:	066d      	lsls	r5, r5, #25
 8002580:	d5f7      	bpl.n	8002572 <_printf_i+0xb6>
 8002582:	b280      	uxth	r0, r0
 8002584:	e7f5      	b.n	8002572 <_printf_i+0xb6>
 8002586:	3145      	adds	r1, #69	; 0x45
 8002588:	4e4e      	ldr	r6, [pc, #312]	; (80026c4 <_printf_i+0x208>)
 800258a:	700a      	strb	r2, [r1, #0]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	1d01      	adds	r1, r0, #4
 8002592:	6800      	ldr	r0, [r0, #0]
 8002594:	6019      	str	r1, [r3, #0]
 8002596:	0615      	lsls	r5, r2, #24
 8002598:	d521      	bpl.n	80025de <_printf_i+0x122>
 800259a:	07d3      	lsls	r3, r2, #31
 800259c:	d502      	bpl.n	80025a4 <_printf_i+0xe8>
 800259e:	2320      	movs	r3, #32
 80025a0:	431a      	orrs	r2, r3
 80025a2:	6022      	str	r2, [r4, #0]
 80025a4:	2710      	movs	r7, #16
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d103      	bne.n	80025b2 <_printf_i+0xf6>
 80025aa:	2320      	movs	r3, #32
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	439a      	bics	r2, r3
 80025b0:	6022      	str	r2, [r4, #0]
 80025b2:	0023      	movs	r3, r4
 80025b4:	2200      	movs	r2, #0
 80025b6:	3343      	adds	r3, #67	; 0x43
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	6863      	ldr	r3, [r4, #4]
 80025bc:	60a3      	str	r3, [r4, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db58      	blt.n	8002674 <_printf_i+0x1b8>
 80025c2:	2204      	movs	r2, #4
 80025c4:	6821      	ldr	r1, [r4, #0]
 80025c6:	4391      	bics	r1, r2
 80025c8:	6021      	str	r1, [r4, #0]
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d154      	bne.n	8002678 <_printf_i+0x1bc>
 80025ce:	9d02      	ldr	r5, [sp, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d05a      	beq.n	800268a <_printf_i+0x1ce>
 80025d4:	0025      	movs	r5, r4
 80025d6:	7833      	ldrb	r3, [r6, #0]
 80025d8:	3542      	adds	r5, #66	; 0x42
 80025da:	702b      	strb	r3, [r5, #0]
 80025dc:	e055      	b.n	800268a <_printf_i+0x1ce>
 80025de:	0655      	lsls	r5, r2, #25
 80025e0:	d5db      	bpl.n	800259a <_printf_i+0xde>
 80025e2:	b280      	uxth	r0, r0
 80025e4:	e7d9      	b.n	800259a <_printf_i+0xde>
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	680d      	ldr	r5, [r1, #0]
 80025ea:	1d10      	adds	r0, r2, #4
 80025ec:	6949      	ldr	r1, [r1, #20]
 80025ee:	6018      	str	r0, [r3, #0]
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	062e      	lsls	r6, r5, #24
 80025f4:	d501      	bpl.n	80025fa <_printf_i+0x13e>
 80025f6:	6019      	str	r1, [r3, #0]
 80025f8:	e002      	b.n	8002600 <_printf_i+0x144>
 80025fa:	066d      	lsls	r5, r5, #25
 80025fc:	d5fb      	bpl.n	80025f6 <_printf_i+0x13a>
 80025fe:	8019      	strh	r1, [r3, #0]
 8002600:	2300      	movs	r3, #0
 8002602:	9d02      	ldr	r5, [sp, #8]
 8002604:	6123      	str	r3, [r4, #16]
 8002606:	e04f      	b.n	80026a8 <_printf_i+0x1ec>
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	1d11      	adds	r1, r2, #4
 800260c:	6019      	str	r1, [r3, #0]
 800260e:	6815      	ldr	r5, [r2, #0]
 8002610:	2100      	movs	r1, #0
 8002612:	6862      	ldr	r2, [r4, #4]
 8002614:	0028      	movs	r0, r5
 8002616:	f000 fadf 	bl	8002bd8 <memchr>
 800261a:	2800      	cmp	r0, #0
 800261c:	d001      	beq.n	8002622 <_printf_i+0x166>
 800261e:	1b40      	subs	r0, r0, r5
 8002620:	6060      	str	r0, [r4, #4]
 8002622:	6863      	ldr	r3, [r4, #4]
 8002624:	6123      	str	r3, [r4, #16]
 8002626:	2300      	movs	r3, #0
 8002628:	9a02      	ldr	r2, [sp, #8]
 800262a:	7013      	strb	r3, [r2, #0]
 800262c:	e03c      	b.n	80026a8 <_printf_i+0x1ec>
 800262e:	6923      	ldr	r3, [r4, #16]
 8002630:	002a      	movs	r2, r5
 8002632:	9904      	ldr	r1, [sp, #16]
 8002634:	9803      	ldr	r0, [sp, #12]
 8002636:	9d05      	ldr	r5, [sp, #20]
 8002638:	47a8      	blx	r5
 800263a:	1c43      	adds	r3, r0, #1
 800263c:	d03e      	beq.n	80026bc <_printf_i+0x200>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	079b      	lsls	r3, r3, #30
 8002642:	d415      	bmi.n	8002670 <_printf_i+0x1b4>
 8002644:	9b07      	ldr	r3, [sp, #28]
 8002646:	68e0      	ldr	r0, [r4, #12]
 8002648:	4298      	cmp	r0, r3
 800264a:	da39      	bge.n	80026c0 <_printf_i+0x204>
 800264c:	0018      	movs	r0, r3
 800264e:	e037      	b.n	80026c0 <_printf_i+0x204>
 8002650:	0022      	movs	r2, r4
 8002652:	2301      	movs	r3, #1
 8002654:	3219      	adds	r2, #25
 8002656:	9904      	ldr	r1, [sp, #16]
 8002658:	9803      	ldr	r0, [sp, #12]
 800265a:	9e05      	ldr	r6, [sp, #20]
 800265c:	47b0      	blx	r6
 800265e:	1c43      	adds	r3, r0, #1
 8002660:	d02c      	beq.n	80026bc <_printf_i+0x200>
 8002662:	3501      	adds	r5, #1
 8002664:	68e3      	ldr	r3, [r4, #12]
 8002666:	9a07      	ldr	r2, [sp, #28]
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	42ab      	cmp	r3, r5
 800266c:	dcf0      	bgt.n	8002650 <_printf_i+0x194>
 800266e:	e7e9      	b.n	8002644 <_printf_i+0x188>
 8002670:	2500      	movs	r5, #0
 8002672:	e7f7      	b.n	8002664 <_printf_i+0x1a8>
 8002674:	2800      	cmp	r0, #0
 8002676:	d0ad      	beq.n	80025d4 <_printf_i+0x118>
 8002678:	9d02      	ldr	r5, [sp, #8]
 800267a:	0039      	movs	r1, r7
 800267c:	f7fd fdca 	bl	8000214 <__aeabi_uidivmod>
 8002680:	5c73      	ldrb	r3, [r6, r1]
 8002682:	3d01      	subs	r5, #1
 8002684:	702b      	strb	r3, [r5, #0]
 8002686:	2800      	cmp	r0, #0
 8002688:	d1f7      	bne.n	800267a <_printf_i+0x1be>
 800268a:	2f08      	cmp	r7, #8
 800268c:	d109      	bne.n	80026a2 <_printf_i+0x1e6>
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	07db      	lsls	r3, r3, #31
 8002692:	d506      	bpl.n	80026a2 <_printf_i+0x1e6>
 8002694:	6863      	ldr	r3, [r4, #4]
 8002696:	6922      	ldr	r2, [r4, #16]
 8002698:	4293      	cmp	r3, r2
 800269a:	dc02      	bgt.n	80026a2 <_printf_i+0x1e6>
 800269c:	2330      	movs	r3, #48	; 0x30
 800269e:	3d01      	subs	r5, #1
 80026a0:	702b      	strb	r3, [r5, #0]
 80026a2:	9b02      	ldr	r3, [sp, #8]
 80026a4:	1b5b      	subs	r3, r3, r5
 80026a6:	6123      	str	r3, [r4, #16]
 80026a8:	9b05      	ldr	r3, [sp, #20]
 80026aa:	aa07      	add	r2, sp, #28
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	0021      	movs	r1, r4
 80026b0:	9b04      	ldr	r3, [sp, #16]
 80026b2:	9803      	ldr	r0, [sp, #12]
 80026b4:	f7ff fe94 	bl	80023e0 <_printf_common>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d1b8      	bne.n	800262e <_printf_i+0x172>
 80026bc:	2001      	movs	r0, #1
 80026be:	4240      	negs	r0, r0
 80026c0:	b009      	add	sp, #36	; 0x24
 80026c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c4:	08002dad 	.word	0x08002dad
 80026c8:	08002dbe 	.word	0x08002dbe

080026cc <_sbrk_r>:
 80026cc:	2300      	movs	r3, #0
 80026ce:	b570      	push	{r4, r5, r6, lr}
 80026d0:	4c06      	ldr	r4, [pc, #24]	; (80026ec <_sbrk_r+0x20>)
 80026d2:	0005      	movs	r5, r0
 80026d4:	0008      	movs	r0, r1
 80026d6:	6023      	str	r3, [r4, #0]
 80026d8:	f7fe f86c 	bl	80007b4 <_sbrk>
 80026dc:	1c43      	adds	r3, r0, #1
 80026de:	d103      	bne.n	80026e8 <_sbrk_r+0x1c>
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d000      	beq.n	80026e8 <_sbrk_r+0x1c>
 80026e6:	602b      	str	r3, [r5, #0]
 80026e8:	bd70      	pop	{r4, r5, r6, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000128 	.word	0x20000128

080026f0 <__sread>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	000c      	movs	r4, r1
 80026f4:	250e      	movs	r5, #14
 80026f6:	5f49      	ldrsh	r1, [r1, r5]
 80026f8:	f000 fac6 	bl	8002c88 <_read_r>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	db03      	blt.n	8002708 <__sread+0x18>
 8002700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002702:	181b      	adds	r3, r3, r0
 8002704:	6563      	str	r3, [r4, #84]	; 0x54
 8002706:	bd70      	pop	{r4, r5, r6, pc}
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	4a02      	ldr	r2, [pc, #8]	; (8002714 <__sread+0x24>)
 800270c:	4013      	ands	r3, r2
 800270e:	81a3      	strh	r3, [r4, #12]
 8002710:	e7f9      	b.n	8002706 <__sread+0x16>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	ffffefff 	.word	0xffffefff

08002718 <__swrite>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	001f      	movs	r7, r3
 800271c:	898b      	ldrh	r3, [r1, #12]
 800271e:	0005      	movs	r5, r0
 8002720:	000c      	movs	r4, r1
 8002722:	0016      	movs	r6, r2
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	d505      	bpl.n	8002734 <__swrite+0x1c>
 8002728:	230e      	movs	r3, #14
 800272a:	5ec9      	ldrsh	r1, [r1, r3]
 800272c:	2200      	movs	r2, #0
 800272e:	2302      	movs	r3, #2
 8002730:	f000 f9d2 	bl	8002ad8 <_lseek_r>
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <__swrite+0x34>)
 8002738:	0028      	movs	r0, r5
 800273a:	4013      	ands	r3, r2
 800273c:	81a3      	strh	r3, [r4, #12]
 800273e:	0032      	movs	r2, r6
 8002740:	230e      	movs	r3, #14
 8002742:	5ee1      	ldrsh	r1, [r4, r3]
 8002744:	003b      	movs	r3, r7
 8002746:	f000 f875 	bl	8002834 <_write_r>
 800274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800274c:	ffffefff 	.word	0xffffefff

08002750 <__sseek>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	000c      	movs	r4, r1
 8002754:	250e      	movs	r5, #14
 8002756:	5f49      	ldrsh	r1, [r1, r5]
 8002758:	f000 f9be 	bl	8002ad8 <_lseek_r>
 800275c:	89a3      	ldrh	r3, [r4, #12]
 800275e:	1c42      	adds	r2, r0, #1
 8002760:	d103      	bne.n	800276a <__sseek+0x1a>
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <__sseek+0x28>)
 8002764:	4013      	ands	r3, r2
 8002766:	81a3      	strh	r3, [r4, #12]
 8002768:	bd70      	pop	{r4, r5, r6, pc}
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	0152      	lsls	r2, r2, #5
 800276e:	4313      	orrs	r3, r2
 8002770:	81a3      	strh	r3, [r4, #12]
 8002772:	6560      	str	r0, [r4, #84]	; 0x54
 8002774:	e7f8      	b.n	8002768 <__sseek+0x18>
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	ffffefff 	.word	0xffffefff

0800277c <__sclose>:
 800277c:	b510      	push	{r4, lr}
 800277e:	230e      	movs	r3, #14
 8002780:	5ec9      	ldrsh	r1, [r1, r3]
 8002782:	f000 f8e1 	bl	8002948 <_close_r>
 8002786:	bd10      	pop	{r4, pc}

08002788 <__swbuf_r>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	0005      	movs	r5, r0
 800278c:	000e      	movs	r6, r1
 800278e:	0014      	movs	r4, r2
 8002790:	2800      	cmp	r0, #0
 8002792:	d004      	beq.n	800279e <__swbuf_r+0x16>
 8002794:	6983      	ldr	r3, [r0, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <__swbuf_r+0x16>
 800279a:	f7ff fbf1 	bl	8001f80 <__sinit>
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <__swbuf_r+0xa0>)
 80027a0:	429c      	cmp	r4, r3
 80027a2:	d12d      	bne.n	8002800 <__swbuf_r+0x78>
 80027a4:	686c      	ldr	r4, [r5, #4]
 80027a6:	69a3      	ldr	r3, [r4, #24]
 80027a8:	60a3      	str	r3, [r4, #8]
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	071b      	lsls	r3, r3, #28
 80027ae:	d531      	bpl.n	8002814 <__swbuf_r+0x8c>
 80027b0:	6923      	ldr	r3, [r4, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02e      	beq.n	8002814 <__swbuf_r+0x8c>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	6922      	ldr	r2, [r4, #16]
 80027ba:	b2f7      	uxtb	r7, r6
 80027bc:	1a98      	subs	r0, r3, r2
 80027be:	6963      	ldr	r3, [r4, #20]
 80027c0:	b2f6      	uxtb	r6, r6
 80027c2:	4283      	cmp	r3, r0
 80027c4:	dc05      	bgt.n	80027d2 <__swbuf_r+0x4a>
 80027c6:	0021      	movs	r1, r4
 80027c8:	0028      	movs	r0, r5
 80027ca:	f000 f959 	bl	8002a80 <_fflush_r>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d126      	bne.n	8002820 <__swbuf_r+0x98>
 80027d2:	68a3      	ldr	r3, [r4, #8]
 80027d4:	3001      	adds	r0, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60a3      	str	r3, [r4, #8]
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	6022      	str	r2, [r4, #0]
 80027e0:	701f      	strb	r7, [r3, #0]
 80027e2:	6963      	ldr	r3, [r4, #20]
 80027e4:	4283      	cmp	r3, r0
 80027e6:	d004      	beq.n	80027f2 <__swbuf_r+0x6a>
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	07db      	lsls	r3, r3, #31
 80027ec:	d51a      	bpl.n	8002824 <__swbuf_r+0x9c>
 80027ee:	2e0a      	cmp	r6, #10
 80027f0:	d118      	bne.n	8002824 <__swbuf_r+0x9c>
 80027f2:	0021      	movs	r1, r4
 80027f4:	0028      	movs	r0, r5
 80027f6:	f000 f943 	bl	8002a80 <_fflush_r>
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d012      	beq.n	8002824 <__swbuf_r+0x9c>
 80027fe:	e00f      	b.n	8002820 <__swbuf_r+0x98>
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <__swbuf_r+0xa4>)
 8002802:	429c      	cmp	r4, r3
 8002804:	d101      	bne.n	800280a <__swbuf_r+0x82>
 8002806:	68ac      	ldr	r4, [r5, #8]
 8002808:	e7cd      	b.n	80027a6 <__swbuf_r+0x1e>
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <__swbuf_r+0xa8>)
 800280c:	429c      	cmp	r4, r3
 800280e:	d1ca      	bne.n	80027a6 <__swbuf_r+0x1e>
 8002810:	68ec      	ldr	r4, [r5, #12]
 8002812:	e7c8      	b.n	80027a6 <__swbuf_r+0x1e>
 8002814:	0021      	movs	r1, r4
 8002816:	0028      	movs	r0, r5
 8002818:	f000 f820 	bl	800285c <__swsetup_r>
 800281c:	2800      	cmp	r0, #0
 800281e:	d0ca      	beq.n	80027b6 <__swbuf_r+0x2e>
 8002820:	2601      	movs	r6, #1
 8002822:	4276      	negs	r6, r6
 8002824:	0030      	movs	r0, r6
 8002826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002828:	08002d5c 	.word	0x08002d5c
 800282c:	08002d7c 	.word	0x08002d7c
 8002830:	08002d3c 	.word	0x08002d3c

08002834 <_write_r>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	0005      	movs	r5, r0
 8002838:	0008      	movs	r0, r1
 800283a:	0011      	movs	r1, r2
 800283c:	2200      	movs	r2, #0
 800283e:	4c06      	ldr	r4, [pc, #24]	; (8002858 <_write_r+0x24>)
 8002840:	6022      	str	r2, [r4, #0]
 8002842:	001a      	movs	r2, r3
 8002844:	f7fd ff6d 	bl	8000722 <_write>
 8002848:	1c43      	adds	r3, r0, #1
 800284a:	d103      	bne.n	8002854 <_write_r+0x20>
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d000      	beq.n	8002854 <_write_r+0x20>
 8002852:	602b      	str	r3, [r5, #0]
 8002854:	bd70      	pop	{r4, r5, r6, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	20000128 	.word	0x20000128

0800285c <__swsetup_r>:
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <__swsetup_r+0xdc>)
 800285e:	b570      	push	{r4, r5, r6, lr}
 8002860:	681d      	ldr	r5, [r3, #0]
 8002862:	0006      	movs	r6, r0
 8002864:	000c      	movs	r4, r1
 8002866:	2d00      	cmp	r5, #0
 8002868:	d005      	beq.n	8002876 <__swsetup_r+0x1a>
 800286a:	69ab      	ldr	r3, [r5, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <__swsetup_r+0x1a>
 8002870:	0028      	movs	r0, r5
 8002872:	f7ff fb85 	bl	8001f80 <__sinit>
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <__swsetup_r+0xe0>)
 8002878:	429c      	cmp	r4, r3
 800287a:	d10f      	bne.n	800289c <__swsetup_r+0x40>
 800287c:	686c      	ldr	r4, [r5, #4]
 800287e:	230c      	movs	r3, #12
 8002880:	5ee2      	ldrsh	r2, [r4, r3]
 8002882:	b293      	uxth	r3, r2
 8002884:	0719      	lsls	r1, r3, #28
 8002886:	d42d      	bmi.n	80028e4 <__swsetup_r+0x88>
 8002888:	06d9      	lsls	r1, r3, #27
 800288a:	d411      	bmi.n	80028b0 <__swsetup_r+0x54>
 800288c:	2309      	movs	r3, #9
 800288e:	2001      	movs	r0, #1
 8002890:	6033      	str	r3, [r6, #0]
 8002892:	3337      	adds	r3, #55	; 0x37
 8002894:	4313      	orrs	r3, r2
 8002896:	81a3      	strh	r3, [r4, #12]
 8002898:	4240      	negs	r0, r0
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <__swsetup_r+0xe4>)
 800289e:	429c      	cmp	r4, r3
 80028a0:	d101      	bne.n	80028a6 <__swsetup_r+0x4a>
 80028a2:	68ac      	ldr	r4, [r5, #8]
 80028a4:	e7eb      	b.n	800287e <__swsetup_r+0x22>
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <__swsetup_r+0xe8>)
 80028a8:	429c      	cmp	r4, r3
 80028aa:	d1e8      	bne.n	800287e <__swsetup_r+0x22>
 80028ac:	68ec      	ldr	r4, [r5, #12]
 80028ae:	e7e6      	b.n	800287e <__swsetup_r+0x22>
 80028b0:	075b      	lsls	r3, r3, #29
 80028b2:	d513      	bpl.n	80028dc <__swsetup_r+0x80>
 80028b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028b6:	2900      	cmp	r1, #0
 80028b8:	d008      	beq.n	80028cc <__swsetup_r+0x70>
 80028ba:	0023      	movs	r3, r4
 80028bc:	3344      	adds	r3, #68	; 0x44
 80028be:	4299      	cmp	r1, r3
 80028c0:	d002      	beq.n	80028c8 <__swsetup_r+0x6c>
 80028c2:	0030      	movs	r0, r6
 80028c4:	f000 f996 	bl	8002bf4 <_free_r>
 80028c8:	2300      	movs	r3, #0
 80028ca:	6363      	str	r3, [r4, #52]	; 0x34
 80028cc:	2224      	movs	r2, #36	; 0x24
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	4393      	bics	r3, r2
 80028d2:	81a3      	strh	r3, [r4, #12]
 80028d4:	2300      	movs	r3, #0
 80028d6:	6063      	str	r3, [r4, #4]
 80028d8:	6923      	ldr	r3, [r4, #16]
 80028da:	6023      	str	r3, [r4, #0]
 80028dc:	2308      	movs	r3, #8
 80028de:	89a2      	ldrh	r2, [r4, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	81a3      	strh	r3, [r4, #12]
 80028e4:	6923      	ldr	r3, [r4, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <__swsetup_r+0xa6>
 80028ea:	21a0      	movs	r1, #160	; 0xa0
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	0089      	lsls	r1, r1, #2
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	400b      	ands	r3, r1
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <__swsetup_r+0xa6>
 80028fa:	0021      	movs	r1, r4
 80028fc:	0030      	movs	r0, r6
 80028fe:	f000 f927 	bl	8002b50 <__smakebuf_r>
 8002902:	2301      	movs	r3, #1
 8002904:	89a2      	ldrh	r2, [r4, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	d011      	beq.n	800292e <__swsetup_r+0xd2>
 800290a:	2300      	movs	r3, #0
 800290c:	60a3      	str	r3, [r4, #8]
 800290e:	6963      	ldr	r3, [r4, #20]
 8002910:	425b      	negs	r3, r3
 8002912:	61a3      	str	r3, [r4, #24]
 8002914:	2000      	movs	r0, #0
 8002916:	6923      	ldr	r3, [r4, #16]
 8002918:	4283      	cmp	r3, r0
 800291a:	d1be      	bne.n	800289a <__swsetup_r+0x3e>
 800291c:	230c      	movs	r3, #12
 800291e:	5ee2      	ldrsh	r2, [r4, r3]
 8002920:	0613      	lsls	r3, r2, #24
 8002922:	d5ba      	bpl.n	800289a <__swsetup_r+0x3e>
 8002924:	2340      	movs	r3, #64	; 0x40
 8002926:	4313      	orrs	r3, r2
 8002928:	81a3      	strh	r3, [r4, #12]
 800292a:	3801      	subs	r0, #1
 800292c:	e7b5      	b.n	800289a <__swsetup_r+0x3e>
 800292e:	0792      	lsls	r2, r2, #30
 8002930:	d400      	bmi.n	8002934 <__swsetup_r+0xd8>
 8002932:	6963      	ldr	r3, [r4, #20]
 8002934:	60a3      	str	r3, [r4, #8]
 8002936:	e7ed      	b.n	8002914 <__swsetup_r+0xb8>
 8002938:	20000004 	.word	0x20000004
 800293c:	08002d5c 	.word	0x08002d5c
 8002940:	08002d7c 	.word	0x08002d7c
 8002944:	08002d3c 	.word	0x08002d3c

08002948 <_close_r>:
 8002948:	2300      	movs	r3, #0
 800294a:	b570      	push	{r4, r5, r6, lr}
 800294c:	4c06      	ldr	r4, [pc, #24]	; (8002968 <_close_r+0x20>)
 800294e:	0005      	movs	r5, r0
 8002950:	0008      	movs	r0, r1
 8002952:	6023      	str	r3, [r4, #0]
 8002954:	f7fd ff01 	bl	800075a <_close>
 8002958:	1c43      	adds	r3, r0, #1
 800295a:	d103      	bne.n	8002964 <_close_r+0x1c>
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d000      	beq.n	8002964 <_close_r+0x1c>
 8002962:	602b      	str	r3, [r5, #0]
 8002964:	bd70      	pop	{r4, r5, r6, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	20000128 	.word	0x20000128

0800296c <__sflush_r>:
 800296c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800296e:	898a      	ldrh	r2, [r1, #12]
 8002970:	0005      	movs	r5, r0
 8002972:	000c      	movs	r4, r1
 8002974:	0713      	lsls	r3, r2, #28
 8002976:	d460      	bmi.n	8002a3a <__sflush_r+0xce>
 8002978:	684b      	ldr	r3, [r1, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	dc04      	bgt.n	8002988 <__sflush_r+0x1c>
 800297e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc01      	bgt.n	8002988 <__sflush_r+0x1c>
 8002984:	2000      	movs	r0, #0
 8002986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002988:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800298a:	2f00      	cmp	r7, #0
 800298c:	d0fa      	beq.n	8002984 <__sflush_r+0x18>
 800298e:	2300      	movs	r3, #0
 8002990:	682e      	ldr	r6, [r5, #0]
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	6a21      	ldr	r1, [r4, #32]
 800299a:	401a      	ands	r2, r3
 800299c:	d034      	beq.n	8002a08 <__sflush_r+0x9c>
 800299e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	075b      	lsls	r3, r3, #29
 80029a4:	d506      	bpl.n	80029b4 <__sflush_r+0x48>
 80029a6:	6863      	ldr	r3, [r4, #4]
 80029a8:	1ac0      	subs	r0, r0, r3
 80029aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <__sflush_r+0x48>
 80029b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029b2:	1ac0      	subs	r0, r0, r3
 80029b4:	0002      	movs	r2, r0
 80029b6:	6a21      	ldr	r1, [r4, #32]
 80029b8:	2300      	movs	r3, #0
 80029ba:	0028      	movs	r0, r5
 80029bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80029be:	47b8      	blx	r7
 80029c0:	89a1      	ldrh	r1, [r4, #12]
 80029c2:	1c43      	adds	r3, r0, #1
 80029c4:	d106      	bne.n	80029d4 <__sflush_r+0x68>
 80029c6:	682b      	ldr	r3, [r5, #0]
 80029c8:	2b1d      	cmp	r3, #29
 80029ca:	d830      	bhi.n	8002a2e <__sflush_r+0xc2>
 80029cc:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <__sflush_r+0x110>)
 80029ce:	40da      	lsrs	r2, r3
 80029d0:	07d3      	lsls	r3, r2, #31
 80029d2:	d52c      	bpl.n	8002a2e <__sflush_r+0xc2>
 80029d4:	2300      	movs	r3, #0
 80029d6:	6063      	str	r3, [r4, #4]
 80029d8:	6923      	ldr	r3, [r4, #16]
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	04cb      	lsls	r3, r1, #19
 80029de:	d505      	bpl.n	80029ec <__sflush_r+0x80>
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d102      	bne.n	80029ea <__sflush_r+0x7e>
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d100      	bne.n	80029ec <__sflush_r+0x80>
 80029ea:	6560      	str	r0, [r4, #84]	; 0x54
 80029ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029ee:	602e      	str	r6, [r5, #0]
 80029f0:	2900      	cmp	r1, #0
 80029f2:	d0c7      	beq.n	8002984 <__sflush_r+0x18>
 80029f4:	0023      	movs	r3, r4
 80029f6:	3344      	adds	r3, #68	; 0x44
 80029f8:	4299      	cmp	r1, r3
 80029fa:	d002      	beq.n	8002a02 <__sflush_r+0x96>
 80029fc:	0028      	movs	r0, r5
 80029fe:	f000 f8f9 	bl	8002bf4 <_free_r>
 8002a02:	2000      	movs	r0, #0
 8002a04:	6360      	str	r0, [r4, #52]	; 0x34
 8002a06:	e7be      	b.n	8002986 <__sflush_r+0x1a>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	0028      	movs	r0, r5
 8002a0c:	47b8      	blx	r7
 8002a0e:	1c43      	adds	r3, r0, #1
 8002a10:	d1c6      	bne.n	80029a0 <__sflush_r+0x34>
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0c3      	beq.n	80029a0 <__sflush_r+0x34>
 8002a18:	2b1d      	cmp	r3, #29
 8002a1a:	d001      	beq.n	8002a20 <__sflush_r+0xb4>
 8002a1c:	2b16      	cmp	r3, #22
 8002a1e:	d101      	bne.n	8002a24 <__sflush_r+0xb8>
 8002a20:	602e      	str	r6, [r5, #0]
 8002a22:	e7af      	b.n	8002984 <__sflush_r+0x18>
 8002a24:	2340      	movs	r3, #64	; 0x40
 8002a26:	89a2      	ldrh	r2, [r4, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	81a3      	strh	r3, [r4, #12]
 8002a2c:	e7ab      	b.n	8002986 <__sflush_r+0x1a>
 8002a2e:	2340      	movs	r3, #64	; 0x40
 8002a30:	430b      	orrs	r3, r1
 8002a32:	2001      	movs	r0, #1
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	4240      	negs	r0, r0
 8002a38:	e7a5      	b.n	8002986 <__sflush_r+0x1a>
 8002a3a:	690f      	ldr	r7, [r1, #16]
 8002a3c:	2f00      	cmp	r7, #0
 8002a3e:	d0a1      	beq.n	8002984 <__sflush_r+0x18>
 8002a40:	680b      	ldr	r3, [r1, #0]
 8002a42:	600f      	str	r7, [r1, #0]
 8002a44:	1bdb      	subs	r3, r3, r7
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	0792      	lsls	r2, r2, #30
 8002a4c:	d100      	bne.n	8002a50 <__sflush_r+0xe4>
 8002a4e:	694b      	ldr	r3, [r1, #20]
 8002a50:	60a3      	str	r3, [r4, #8]
 8002a52:	9b01      	ldr	r3, [sp, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	dc00      	bgt.n	8002a5a <__sflush_r+0xee>
 8002a58:	e794      	b.n	8002984 <__sflush_r+0x18>
 8002a5a:	9b01      	ldr	r3, [sp, #4]
 8002a5c:	003a      	movs	r2, r7
 8002a5e:	6a21      	ldr	r1, [r4, #32]
 8002a60:	0028      	movs	r0, r5
 8002a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a64:	47b0      	blx	r6
 8002a66:	2800      	cmp	r0, #0
 8002a68:	dc03      	bgt.n	8002a72 <__sflush_r+0x106>
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	89a2      	ldrh	r2, [r4, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	e7df      	b.n	8002a32 <__sflush_r+0xc6>
 8002a72:	9b01      	ldr	r3, [sp, #4]
 8002a74:	183f      	adds	r7, r7, r0
 8002a76:	1a1b      	subs	r3, r3, r0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	e7ea      	b.n	8002a52 <__sflush_r+0xe6>
 8002a7c:	20400001 	.word	0x20400001

08002a80 <_fflush_r>:
 8002a80:	690b      	ldr	r3, [r1, #16]
 8002a82:	b570      	push	{r4, r5, r6, lr}
 8002a84:	0005      	movs	r5, r0
 8002a86:	000c      	movs	r4, r1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <_fflush_r+0x10>
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d004      	beq.n	8002a9e <_fflush_r+0x1e>
 8002a94:	6983      	ldr	r3, [r0, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <_fflush_r+0x1e>
 8002a9a:	f7ff fa71 	bl	8001f80 <__sinit>
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <_fflush_r+0x4c>)
 8002aa0:	429c      	cmp	r4, r3
 8002aa2:	d109      	bne.n	8002ab8 <_fflush_r+0x38>
 8002aa4:	686c      	ldr	r4, [r5, #4]
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	5ea3      	ldrsh	r3, [r4, r2]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ee      	beq.n	8002a8c <_fflush_r+0xc>
 8002aae:	0021      	movs	r1, r4
 8002ab0:	0028      	movs	r0, r5
 8002ab2:	f7ff ff5b 	bl	800296c <__sflush_r>
 8002ab6:	e7ea      	b.n	8002a8e <_fflush_r+0xe>
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <_fflush_r+0x50>)
 8002aba:	429c      	cmp	r4, r3
 8002abc:	d101      	bne.n	8002ac2 <_fflush_r+0x42>
 8002abe:	68ac      	ldr	r4, [r5, #8]
 8002ac0:	e7f1      	b.n	8002aa6 <_fflush_r+0x26>
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <_fflush_r+0x54>)
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	d1ee      	bne.n	8002aa6 <_fflush_r+0x26>
 8002ac8:	68ec      	ldr	r4, [r5, #12]
 8002aca:	e7ec      	b.n	8002aa6 <_fflush_r+0x26>
 8002acc:	08002d5c 	.word	0x08002d5c
 8002ad0:	08002d7c 	.word	0x08002d7c
 8002ad4:	08002d3c 	.word	0x08002d3c

08002ad8 <_lseek_r>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	0005      	movs	r5, r0
 8002adc:	0008      	movs	r0, r1
 8002ade:	0011      	movs	r1, r2
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4c06      	ldr	r4, [pc, #24]	; (8002afc <_lseek_r+0x24>)
 8002ae4:	6022      	str	r2, [r4, #0]
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	f7fd fe58 	bl	800079c <_lseek>
 8002aec:	1c43      	adds	r3, r0, #1
 8002aee:	d103      	bne.n	8002af8 <_lseek_r+0x20>
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d000      	beq.n	8002af8 <_lseek_r+0x20>
 8002af6:	602b      	str	r3, [r5, #0]
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	20000128 	.word	0x20000128

08002b00 <__swhatbuf_r>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	000e      	movs	r6, r1
 8002b04:	001d      	movs	r5, r3
 8002b06:	230e      	movs	r3, #14
 8002b08:	5ec9      	ldrsh	r1, [r1, r3]
 8002b0a:	b096      	sub	sp, #88	; 0x58
 8002b0c:	0014      	movs	r4, r2
 8002b0e:	2900      	cmp	r1, #0
 8002b10:	da07      	bge.n	8002b22 <__swhatbuf_r+0x22>
 8002b12:	2300      	movs	r3, #0
 8002b14:	602b      	str	r3, [r5, #0]
 8002b16:	89b3      	ldrh	r3, [r6, #12]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	d411      	bmi.n	8002b40 <__swhatbuf_r+0x40>
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	e00f      	b.n	8002b42 <__swhatbuf_r+0x42>
 8002b22:	466a      	mov	r2, sp
 8002b24:	f000 f8c4 	bl	8002cb0 <_fstat_r>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	dbf2      	blt.n	8002b12 <__swhatbuf_r+0x12>
 8002b2c:	22f0      	movs	r2, #240	; 0xf0
 8002b2e:	9b01      	ldr	r3, [sp, #4]
 8002b30:	0212      	lsls	r2, r2, #8
 8002b32:	4013      	ands	r3, r2
 8002b34:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <__swhatbuf_r+0x4c>)
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	425a      	negs	r2, r3
 8002b3a:	4153      	adcs	r3, r2
 8002b3c:	602b      	str	r3, [r5, #0]
 8002b3e:	e7ed      	b.n	8002b1c <__swhatbuf_r+0x1c>
 8002b40:	2340      	movs	r3, #64	; 0x40
 8002b42:	2000      	movs	r0, #0
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	b016      	add	sp, #88	; 0x58
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	ffffe000 	.word	0xffffe000

08002b50 <__smakebuf_r>:
 8002b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b52:	2602      	movs	r6, #2
 8002b54:	898b      	ldrh	r3, [r1, #12]
 8002b56:	0005      	movs	r5, r0
 8002b58:	000c      	movs	r4, r1
 8002b5a:	4233      	tst	r3, r6
 8002b5c:	d006      	beq.n	8002b6c <__smakebuf_r+0x1c>
 8002b5e:	0023      	movs	r3, r4
 8002b60:	3347      	adds	r3, #71	; 0x47
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	6123      	str	r3, [r4, #16]
 8002b66:	2301      	movs	r3, #1
 8002b68:	6163      	str	r3, [r4, #20]
 8002b6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002b6c:	ab01      	add	r3, sp, #4
 8002b6e:	466a      	mov	r2, sp
 8002b70:	f7ff ffc6 	bl	8002b00 <__swhatbuf_r>
 8002b74:	9900      	ldr	r1, [sp, #0]
 8002b76:	0007      	movs	r7, r0
 8002b78:	0028      	movs	r0, r5
 8002b7a:	f7ff fa95 	bl	80020a8 <_malloc_r>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	d108      	bne.n	8002b94 <__smakebuf_r+0x44>
 8002b82:	220c      	movs	r2, #12
 8002b84:	5ea3      	ldrsh	r3, [r4, r2]
 8002b86:	059a      	lsls	r2, r3, #22
 8002b88:	d4ef      	bmi.n	8002b6a <__smakebuf_r+0x1a>
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	431e      	orrs	r6, r3
 8002b90:	81a6      	strh	r6, [r4, #12]
 8002b92:	e7e4      	b.n	8002b5e <__smakebuf_r+0xe>
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <__smakebuf_r+0x84>)
 8002b96:	62ab      	str	r3, [r5, #40]	; 0x28
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	89a2      	ldrh	r2, [r4, #12]
 8002b9c:	6020      	str	r0, [r4, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	81a3      	strh	r3, [r4, #12]
 8002ba2:	9b00      	ldr	r3, [sp, #0]
 8002ba4:	6120      	str	r0, [r4, #16]
 8002ba6:	6163      	str	r3, [r4, #20]
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <__smakebuf_r+0x7a>
 8002bae:	230e      	movs	r3, #14
 8002bb0:	5ee1      	ldrsh	r1, [r4, r3]
 8002bb2:	0028      	movs	r0, r5
 8002bb4:	f000 f88e 	bl	8002cd4 <_isatty_r>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d006      	beq.n	8002bca <__smakebuf_r+0x7a>
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	89a0      	ldrh	r0, [r4, #12]
 8002bcc:	4338      	orrs	r0, r7
 8002bce:	81a0      	strh	r0, [r4, #12]
 8002bd0:	e7cb      	b.n	8002b6a <__smakebuf_r+0x1a>
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	08001f45 	.word	0x08001f45

08002bd8 <memchr>:
 8002bd8:	b2c9      	uxtb	r1, r1
 8002bda:	1882      	adds	r2, r0, r2
 8002bdc:	4290      	cmp	r0, r2
 8002bde:	d101      	bne.n	8002be4 <memchr+0xc>
 8002be0:	2000      	movs	r0, #0
 8002be2:	4770      	bx	lr
 8002be4:	7803      	ldrb	r3, [r0, #0]
 8002be6:	428b      	cmp	r3, r1
 8002be8:	d0fb      	beq.n	8002be2 <memchr+0xa>
 8002bea:	3001      	adds	r0, #1
 8002bec:	e7f6      	b.n	8002bdc <memchr+0x4>

08002bee <__malloc_lock>:
 8002bee:	4770      	bx	lr

08002bf0 <__malloc_unlock>:
 8002bf0:	4770      	bx	lr
	...

08002bf4 <_free_r>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	0005      	movs	r5, r0
 8002bf8:	2900      	cmp	r1, #0
 8002bfa:	d010      	beq.n	8002c1e <_free_r+0x2a>
 8002bfc:	1f0c      	subs	r4, r1, #4
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da00      	bge.n	8002c06 <_free_r+0x12>
 8002c04:	18e4      	adds	r4, r4, r3
 8002c06:	0028      	movs	r0, r5
 8002c08:	f7ff fff1 	bl	8002bee <__malloc_lock>
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <_free_r+0x90>)
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <_free_r+0x2c>
 8002c14:	6063      	str	r3, [r4, #4]
 8002c16:	6014      	str	r4, [r2, #0]
 8002c18:	0028      	movs	r0, r5
 8002c1a:	f7ff ffe9 	bl	8002bf0 <__malloc_unlock>
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d909      	bls.n	8002c38 <_free_r+0x44>
 8002c24:	6821      	ldr	r1, [r4, #0]
 8002c26:	1860      	adds	r0, r4, r1
 8002c28:	4283      	cmp	r3, r0
 8002c2a:	d1f3      	bne.n	8002c14 <_free_r+0x20>
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	1841      	adds	r1, r0, r1
 8002c32:	6021      	str	r1, [r4, #0]
 8002c34:	e7ee      	b.n	8002c14 <_free_r+0x20>
 8002c36:	0013      	movs	r3, r2
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	2a00      	cmp	r2, #0
 8002c3c:	d001      	beq.n	8002c42 <_free_r+0x4e>
 8002c3e:	42a2      	cmp	r2, r4
 8002c40:	d9f9      	bls.n	8002c36 <_free_r+0x42>
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	1858      	adds	r0, r3, r1
 8002c46:	42a0      	cmp	r0, r4
 8002c48:	d10b      	bne.n	8002c62 <_free_r+0x6e>
 8002c4a:	6820      	ldr	r0, [r4, #0]
 8002c4c:	1809      	adds	r1, r1, r0
 8002c4e:	1858      	adds	r0, r3, r1
 8002c50:	6019      	str	r1, [r3, #0]
 8002c52:	4282      	cmp	r2, r0
 8002c54:	d1e0      	bne.n	8002c18 <_free_r+0x24>
 8002c56:	6810      	ldr	r0, [r2, #0]
 8002c58:	6852      	ldr	r2, [r2, #4]
 8002c5a:	1841      	adds	r1, r0, r1
 8002c5c:	6019      	str	r1, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	e7da      	b.n	8002c18 <_free_r+0x24>
 8002c62:	42a0      	cmp	r0, r4
 8002c64:	d902      	bls.n	8002c6c <_free_r+0x78>
 8002c66:	230c      	movs	r3, #12
 8002c68:	602b      	str	r3, [r5, #0]
 8002c6a:	e7d5      	b.n	8002c18 <_free_r+0x24>
 8002c6c:	6821      	ldr	r1, [r4, #0]
 8002c6e:	1860      	adds	r0, r4, r1
 8002c70:	4282      	cmp	r2, r0
 8002c72:	d103      	bne.n	8002c7c <_free_r+0x88>
 8002c74:	6810      	ldr	r0, [r2, #0]
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	1841      	adds	r1, r0, r1
 8002c7a:	6021      	str	r1, [r4, #0]
 8002c7c:	6062      	str	r2, [r4, #4]
 8002c7e:	605c      	str	r4, [r3, #4]
 8002c80:	e7ca      	b.n	8002c18 <_free_r+0x24>
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	20000088 	.word	0x20000088

08002c88 <_read_r>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	0005      	movs	r5, r0
 8002c8c:	0008      	movs	r0, r1
 8002c8e:	0011      	movs	r1, r2
 8002c90:	2200      	movs	r2, #0
 8002c92:	4c06      	ldr	r4, [pc, #24]	; (8002cac <_read_r+0x24>)
 8002c94:	6022      	str	r2, [r4, #0]
 8002c96:	001a      	movs	r2, r3
 8002c98:	f7fd fd26 	bl	80006e8 <_read>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d103      	bne.n	8002ca8 <_read_r+0x20>
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d000      	beq.n	8002ca8 <_read_r+0x20>
 8002ca6:	602b      	str	r3, [r5, #0]
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	20000128 	.word	0x20000128

08002cb0 <_fstat_r>:
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	b570      	push	{r4, r5, r6, lr}
 8002cb4:	4c06      	ldr	r4, [pc, #24]	; (8002cd0 <_fstat_r+0x20>)
 8002cb6:	0005      	movs	r5, r0
 8002cb8:	0008      	movs	r0, r1
 8002cba:	0011      	movs	r1, r2
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	f7fd fd56 	bl	800076e <_fstat>
 8002cc2:	1c43      	adds	r3, r0, #1
 8002cc4:	d103      	bne.n	8002cce <_fstat_r+0x1e>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d000      	beq.n	8002cce <_fstat_r+0x1e>
 8002ccc:	602b      	str	r3, [r5, #0]
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	20000128 	.word	0x20000128

08002cd4 <_isatty_r>:
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	b570      	push	{r4, r5, r6, lr}
 8002cd8:	4c06      	ldr	r4, [pc, #24]	; (8002cf4 <_isatty_r+0x20>)
 8002cda:	0005      	movs	r5, r0
 8002cdc:	0008      	movs	r0, r1
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	f7fd fd53 	bl	800078a <_isatty>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d103      	bne.n	8002cf0 <_isatty_r+0x1c>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d000      	beq.n	8002cf0 <_isatty_r+0x1c>
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	20000128 	.word	0x20000128

08002cf8 <_init>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr

08002d04 <_fini>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr
