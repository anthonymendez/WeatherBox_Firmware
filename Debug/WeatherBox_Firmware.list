
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003990  08003990  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003998  08003998  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000068  08003a08  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003a08  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b03  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017f9  00000000  00000000  00028b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  0002a390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  0002ac90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014bc9  00000000  00000000  0002b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078e1  00000000  00000000  00040081  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e14f  00000000  00000000  00047962  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5ab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025fc  00000000  00000000  000c5b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003844 	.word	0x08003844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003844 	.word	0x08003844

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fb7a 	bl	8000b34 <HAL_Init>

  /* USER CODE BEGIN Init */
  printf("HAL_Inited");
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <main+0x4c>)
 8000442:	0018      	movs	r0, r3
 8000444:	f002 fae6 	bl	8002a14 <iprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f824 	bl	8000494 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  printf("Sys_Inited");
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <main+0x50>)
 800044e:	0018      	movs	r0, r3
 8000450:	f002 fae0 	bl	8002a14 <iprintf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f8f2 	bl	800063c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000458:	f000 f888 	bl	800056c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800045c:	f000 f8be 	bl	80005dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("GPIO Inited");
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <main+0x54>)
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fad6 	bl	8002a14 <iprintf>
  printf("SPI1 Inited");
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <main+0x58>)
 800046a:	0018      	movs	r0, r3
 800046c:	f002 fad2 	bl	8002a14 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8000470:	23a0      	movs	r3, #160	; 0xa0
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2120      	movs	r1, #32
 8000476:	0018      	movs	r0, r3
 8000478:	f000 fe29 	bl	80010ce <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800047c:	2064      	movs	r0, #100	; 0x64
 800047e:	f000 fbb9 	bl	8000bf4 <HAL_Delay>
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8000482:	e7f5      	b.n	8000470 <main+0x38>
 8000484:	0800385c 	.word	0x0800385c
 8000488:	08003868 	.word	0x08003868
 800048c:	08003874 	.word	0x08003874
 8000490:	08003880 	.word	0x08003880

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b09f      	sub	sp, #124	; 0x7c
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	2440      	movs	r4, #64	; 0x40
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2338      	movs	r3, #56	; 0x38
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 faad 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004aa:	232c      	movs	r3, #44	; 0x2c
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	0018      	movs	r0, r3
 80004b0:	2314      	movs	r3, #20
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f002 faa5 	bl	8002a04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	0018      	movs	r0, r3
 80004be:	2328      	movs	r3, #40	; 0x28
 80004c0:	001a      	movs	r2, r3
 80004c2:	2100      	movs	r1, #0
 80004c4:	f002 fa9e 	bl	8002a04 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <SystemClock_Config+0xd0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a26      	ldr	r2, [pc, #152]	; (8000568 <SystemClock_Config+0xd4>)
 80004ce:	401a      	ands	r2, r3
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <SystemClock_Config+0xd0>)
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	0109      	lsls	r1, r1, #4
 80004d6:	430a      	orrs	r2, r1
 80004d8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004da:	0021      	movs	r1, r4
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2210      	movs	r2, #16
 80004e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2201      	movs	r2, #1
 80004e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	22a0      	movs	r2, #160	; 0xa0
 80004f2:	0212      	lsls	r2, r2, #8
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fdf8 	bl	80010f4 <HAL_RCC_OscConfig>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000508:	f000 f93c 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050c:	212c      	movs	r1, #44	; 0x2c
 800050e:	187b      	adds	r3, r7, r1
 8000510:	220f      	movs	r2, #15
 8000512:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2100      	movs	r1, #0
 8000530:	0018      	movs	r0, r3
 8000532:	f001 f9af 	bl	8001894 <HAL_RCC_ClockConfig>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800053a:	f000 f923 	bl	8000784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2201      	movs	r2, #1
 8000542:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fb85 	bl	8001c5c <HAL_RCCEx_PeriphCLKConfig>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000556:	f000 f915 	bl	8000784 <Error_Handler>
  }
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b01f      	add	sp, #124	; 0x7c
 8000560:	bd90      	pop	{r4, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40007000 	.word	0x40007000
 8000568:	ffffe7ff 	.word	0xffffe7ff

0800056c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_SPI1_Init+0x68>)
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_SPI1_Init+0x6c>)
 8000574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_SPI1_Init+0x68>)
 8000578:	2282      	movs	r2, #130	; 0x82
 800057a:	0052      	lsls	r2, r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_SPI1_Init+0x68>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_SPI1_Init+0x68>)
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0112      	lsls	r2, r2, #4
 800058a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_SPI1_Init+0x68>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_SPI1_Init+0x68>)
 8000594:	2200      	movs	r2, #0
 8000596:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_SPI1_Init+0x68>)
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	02d2      	lsls	r2, r2, #11
 800059e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_SPI1_Init+0x68>)
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_SPI1_Init+0x68>)
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_SPI1_Init+0x68>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_SPI1_Init+0x68>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_SPI1_Init+0x68>)
 80005ba:	2207      	movs	r2, #7
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MX_SPI1_Init+0x68>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fcbf 	bl	8001f44 <HAL_SPI_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80005ca:	f000 f8db 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000110 	.word	0x20000110
 80005d8:	40013000 	.word	0x40013000

080005dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <MX_USART1_UART_Init+0x5c>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005e8:	22e1      	movs	r2, #225	; 0xe1
 80005ea:	0252      	lsls	r2, r2, #9
 80005ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART1_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART1_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USART1_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_USART1_UART_Init+0x58>)
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fcf9 	bl	8002018 <HAL_UART_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800062a:	f000 f8ab 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000090 	.word	0x20000090
 8000638:	40013800 	.word	0x40013800

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b08b      	sub	sp, #44	; 0x2c
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	2414      	movs	r4, #20
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2314      	movs	r3, #20
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 f9d9 	bl	8002a04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b48      	ldr	r3, [pc, #288]	; (8000774 <MX_GPIO_Init+0x138>)
 8000654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000656:	4b47      	ldr	r3, [pc, #284]	; (8000774 <MX_GPIO_Init+0x138>)
 8000658:	2104      	movs	r1, #4
 800065a:	430a      	orrs	r2, r1
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
 800065e:	4b45      	ldr	r3, [pc, #276]	; (8000774 <MX_GPIO_Init+0x138>)
 8000660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000662:	2204      	movs	r2, #4
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	4b42      	ldr	r3, [pc, #264]	; (8000774 <MX_GPIO_Init+0x138>)
 800066c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <MX_GPIO_Init+0x138>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	430a      	orrs	r2, r1
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <MX_GPIO_Init+0x138>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	4013      	ands	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <MX_GPIO_Init+0x138>)
 8000684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000686:	4b3b      	ldr	r3, [pc, #236]	; (8000774 <MX_GPIO_Init+0x138>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <MX_GPIO_Init+0x138>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b36      	ldr	r3, [pc, #216]	; (8000774 <MX_GPIO_Init+0x138>)
 800069c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800069e:	4b35      	ldr	r3, [pc, #212]	; (8000774 <MX_GPIO_Init+0x138>)
 80006a0:	2102      	movs	r1, #2
 80006a2:	430a      	orrs	r2, r1
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <MX_GPIO_Init+0x138>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	2202      	movs	r2, #2
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 80006b2:	23a0      	movs	r3, #160	; 0xa0
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fcea 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	019b      	lsls	r3, r3, #6
 80006c4:	482c      	ldr	r0, [pc, #176]	; (8000778 <MX_GPIO_Init+0x13c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	0019      	movs	r1, r3
 80006ca:	f000 fce3 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	4a28      	ldr	r2, [pc, #160]	; (800077c <MX_GPIO_Init+0x140>)
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <MX_GPIO_Init+0x144>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f000 fb55 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	220c      	movs	r2, #12
 80006f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2202      	movs	r2, #2
 80006f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2203      	movs	r2, #3
 8000704:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2204      	movs	r2, #4
 800070a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	193a      	adds	r2, r7, r4
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fb3f 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 800071a:	0021      	movs	r1, r4
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2220      	movs	r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2201      	movs	r2, #1
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8000734:	000c      	movs	r4, r1
 8000736:	187a      	adds	r2, r7, r1
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fb2a 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000744:	0021      	movs	r1, r4
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0192      	lsls	r2, r2, #6
 800074c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2201      	movs	r2, #1
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	187b      	adds	r3, r7, r1
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <MX_GPIO_Init+0x13c>)
 8000764:	0019      	movs	r1, r3
 8000766:	0010      	movs	r0, r2
 8000768:	f000 fb16 	bl	8000d98 <HAL_GPIO_Init>

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b00b      	add	sp, #44	; 0x2c
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	50000400 	.word	0x50000400
 800077c:	10210000 	.word	0x10210000
 8000780:	50000800 	.word	0x50000800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <HAL_MspInit+0x24>)
 8000796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x24>)
 800079a:	2101      	movs	r1, #1
 800079c:	430a      	orrs	r2, r1
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <HAL_MspInit+0x24>)
 80007a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <HAL_MspInit+0x24>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0549      	lsls	r1, r1, #21
 80007aa:	430a      	orrs	r2, r1
 80007ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b08b      	sub	sp, #44	; 0x2c
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	2314      	movs	r3, #20
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	2314      	movs	r3, #20
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f002 f91a 	bl	8002a04 <memset>
  if(hspi->Instance==SPI1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a29      	ldr	r2, [pc, #164]	; (800087c <HAL_SPI_MspInit+0xc4>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d14b      	bne.n	8000872 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0149      	lsls	r1, r1, #5
 80007e4:	430a      	orrs	r2, r1
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 80007ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 80007ee:	2101      	movs	r1, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	2201      	movs	r2, #1
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 8000802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 8000806:	2102      	movs	r1, #2
 8000808:	430a      	orrs	r2, r1
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_SPI_MspInit+0xc8>)
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	2202      	movs	r2, #2
 8000812:	4013      	ands	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000818:	2414      	movs	r4, #20
 800081a:	193b      	adds	r3, r7, r4
 800081c:	22d0      	movs	r2, #208	; 0xd0
 800081e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2202      	movs	r2, #2
 8000824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2203      	movs	r2, #3
 8000830:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	193a      	adds	r2, r7, r4
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 faa9 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000846:	0021      	movs	r1, r4
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2208      	movs	r2, #8
 800084c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2202      	movs	r2, #2
 8000852:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2203      	movs	r2, #3
 800085e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	187b      	adds	r3, r7, r1
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_SPI_MspInit+0xcc>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f000 fa93 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b00b      	add	sp, #44	; 0x2c
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40013000 	.word	0x40013000
 8000880:	40021000 	.word	0x40021000
 8000884:	50000400 	.word	0x50000400

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	230c      	movs	r3, #12
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 f8b2 	bl	8002a04 <memset>
  if(huart->Instance==USART1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a18      	ldr	r2, [pc, #96]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12a      	bne.n	8000900 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x84>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_UART_MspInit+0x84>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	01c9      	lsls	r1, r1, #7
 80008b4:	430a      	orrs	r2, r1
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_UART_MspInit+0x84>)
 80008ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_UART_MspInit+0x84>)
 80008be:	2101      	movs	r1, #1
 80008c0:	430a      	orrs	r2, r1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_UART_MspInit+0x84>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	2201      	movs	r2, #1
 80008ca:	4013      	ands	r3, r2
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d0:	210c      	movs	r1, #12
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	22c0      	movs	r2, #192	; 0xc0
 80008d6:	00d2      	lsls	r2, r2, #3
 80008d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2202      	movs	r2, #2
 80008de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2203      	movs	r2, #3
 80008ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2204      	movs	r2, #4
 80008f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	187a      	adds	r2, r7, r1
 80008f4:	23a0      	movs	r3, #160	; 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fa4c 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b008      	add	sp, #32
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f946 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	e00a      	b.n	800096a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000954:	e000      	b.n	8000958 <_read+0x16>
 8000956:	bf00      	nop
 8000958:	0001      	movs	r1, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	60ba      	str	r2, [r7, #8]
 8000960:	b2ca      	uxtb	r2, r1
 8000962:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	dbf0      	blt.n	8000954 <_read+0x12>
	}

return len;
 8000972:	687b      	ldr	r3, [r7, #4]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b006      	add	sp, #24
 800097a:	bd80      	pop	{r7, pc}

0800097c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e009      	b.n	80009a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	60ba      	str	r2, [r7, #8]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0018      	movs	r0, r3
 8000998:	e000      	b.n	800099c <_write+0x20>
 800099a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbf1      	blt.n	800098e <_write+0x12>
	}
	return len;
 80009aa:	687b      	ldr	r3, [r7, #4]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b006      	add	sp, #24
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_close>:

int _close(int file)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return -1;
 80009bc:	2301      	movs	r3, #1
 80009be:	425b      	negs	r3, r3
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	0192      	lsls	r2, r2, #6
 80009d8:	605a      	str	r2, [r3, #4]
	return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_isatty>:

int _isatty(int file)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	return 1;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
	return 0;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b004      	add	sp, #16
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x50>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x16>
		heap_end = &end;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <_sbrk+0x50>)
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <_sbrk+0x54>)
 8000a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <_sbrk+0x50>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <_sbrk+0x50>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	18d3      	adds	r3, r2, r3
 8000a30:	466a      	mov	r2, sp
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d907      	bls.n	8000a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a36:	f001 ffbb 	bl	80029b0 <__errno>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	425b      	negs	r3, r3
 8000a44:	e006      	b.n	8000a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <_sbrk+0x50>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	18d2      	adds	r2, r2, r3
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <_sbrk+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b004      	add	sp, #16
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000084 	.word	0x20000084
 8000a60:	20000170 	.word	0x20000170

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <SystemInit+0x64>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <SystemInit+0x64>)
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	0049      	lsls	r1, r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <SystemInit+0x64>)
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <SystemInit+0x64>)
 8000a7c:	4913      	ldr	r1, [pc, #76]	; (8000acc <SystemInit+0x68>)
 8000a7e:	400a      	ands	r2, r1
 8000a80:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <SystemInit+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <SystemInit+0x64>)
 8000a88:	4911      	ldr	r1, [pc, #68]	; (8000ad0 <SystemInit+0x6c>)
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <SystemInit+0x64>)
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SystemInit+0x64>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	438a      	bics	r2, r1
 8000a98:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <SystemInit+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SystemInit+0x64>)
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <SystemInit+0x70>)
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SystemInit+0x64>)
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <SystemInit+0x64>)
 8000aac:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <SystemInit+0x74>)
 8000aae:	400a      	ands	r2, r1
 8000ab0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SystemInit+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <SystemInit+0x78>)
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	0512      	lsls	r2, r2, #20
 8000abe:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	88ff400c 	.word	0x88ff400c
 8000ad0:	fef6fff6 	.word	0xfef6fff6
 8000ad4:	fffbffff 	.word	0xfffbffff
 8000ad8:	ff02ffff 	.word	0xff02ffff
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ae2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000ae4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ae6:	e003      	b.n	8000af0 <LoopCopyDataInit>

08000ae8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000aea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aee:	3104      	adds	r1, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000af4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000af6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000af8:	d3f6      	bcc.n	8000ae8 <CopyDataInit>
  ldr  r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000afc:	e002      	b.n	8000b04 <LoopFillZerobss>

08000afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000afe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b00:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b02:	3204      	adds	r2, #4

08000b04 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <LoopForever+0x16>)
  cmp  r2, r3
 8000b06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b08:	d3f9      	bcc.n	8000afe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b0a:	f7ff ffab 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f001 ff55 	bl	80029bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fc91 	bl	8000438 <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
   ldr   r0, =_estack
 8000b18:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000b1c:	080039a0 	.word	0x080039a0
  ldr  r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b24:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000b28:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8000b2c:	20000170 	.word	0x20000170

08000b30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_COMP_IRQHandler>
	...

08000b34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x3c>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_Init+0x3c>)
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f811 	bl	8000b74 <HAL_InitTick>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e001      	b.n	8000b62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5e:	f7ff fe17 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_InitTick+0x50>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	23fa      	movs	r3, #250	; 0xfa
 8000b8a:	0099      	lsls	r1, r3, #2
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	f7ff fabb 	bl	8000108 <__udivsi3>
 8000b92:	0003      	movs	r3, r0
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 f8f2 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d004      	beq.n	8000ba8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e006      	b.n	8000bb6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	2301      	movs	r3, #1
 8000bac:	425b      	negs	r3, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 f8cf 	bl	8000d54 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b004      	add	sp, #16
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  uwTick++;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_IncTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <HAL_IncTick+0x14>)
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000168 	.word	0x20000168

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	20000168 	.word	0x20000168

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff fff0 	bl	8000be0 <HAL_GetTick>
 8000c00:	0003      	movs	r3, r0
 8000c02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	d002      	beq.n	8000c14 <HAL_Delay+0x20>
  {
    wait++;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	f7ff ffe3 	bl	8000be0 <HAL_GetTick>
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d8f7      	bhi.n	8000c16 <HAL_Delay+0x22>
  {
  }
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0002      	movs	r2, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b7f      	cmp	r3, #127	; 0x7f
 8000c44:	d932      	bls.n	8000cac <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c46:	4a2f      	ldr	r2, [pc, #188]	; (8000d04 <NVIC_SetPriority+0xd4>)
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	230f      	movs	r3, #15
 8000c50:	400b      	ands	r3, r1
 8000c52:	3b08      	subs	r3, #8
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3306      	adds	r3, #6
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1dfa      	adds	r2, r7, #7
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	0011      	movs	r1, r2
 8000c66:	2203      	movs	r2, #3
 8000c68:	400a      	ands	r2, r1
 8000c6a:	00d2      	lsls	r2, r2, #3
 8000c6c:	21ff      	movs	r1, #255	; 0xff
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	000a      	movs	r2, r1
 8000c72:	43d2      	mvns	r2, r2
 8000c74:	401a      	ands	r2, r3
 8000c76:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	019b      	lsls	r3, r3, #6
 8000c7c:	22ff      	movs	r2, #255	; 0xff
 8000c7e:	401a      	ands	r2, r3
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	2303      	movs	r3, #3
 8000c88:	4003      	ands	r3, r0
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8e:	481d      	ldr	r0, [pc, #116]	; (8000d04 <NVIC_SetPriority+0xd4>)
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	001c      	movs	r4, r3
 8000c96:	230f      	movs	r3, #15
 8000c98:	4023      	ands	r3, r4
 8000c9a:	3b08      	subs	r3, #8
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	3306      	adds	r3, #6
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	18c3      	adds	r3, r0, r3
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000caa:	e027      	b.n	8000cfc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <NVIC_SetPriority+0xd8>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	33c0      	adds	r3, #192	; 0xc0
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	589b      	ldr	r3, [r3, r2]
 8000cbc:	1dfa      	adds	r2, r7, #7
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	00d2      	lsls	r2, r2, #3
 8000cc8:	21ff      	movs	r1, #255	; 0xff
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	000a      	movs	r2, r1
 8000cce:	43d2      	mvns	r2, r2
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	019b      	lsls	r3, r3, #6
 8000cd8:	22ff      	movs	r2, #255	; 0xff
 8000cda:	401a      	ands	r2, r3
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	4003      	ands	r3, r0
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <NVIC_SetPriority+0xd8>)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	33c0      	adds	r3, #192	; 0xc0
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	501a      	str	r2, [r3, r0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b003      	add	sp, #12
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <SysTick_Config+0x40>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d901      	bls.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e010      	b.n	8000d44 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <SysTick_Config+0x44>)
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	2103      	movs	r1, #3
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ff7d 	bl	8000c30 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SysTick_Config+0x44>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x44>)
 8000d3e:	2207      	movs	r2, #7
 8000d40:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	00ffffff 	.word	0x00ffffff
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	210f      	movs	r1, #15
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	1c02      	adds	r2, r0, #0
 8000d64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <NVIC_SetPriority>
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ffbf 	bl	8000d0c <SysTick_Config>
 8000d8e:	0003      	movs	r3, r0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dae:	e155      	b.n	800105c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4091      	lsls	r1, r2
 8000dba:	000a      	movs	r2, r1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d100      	bne.n	8000dc8 <HAL_GPIO_Init+0x30>
 8000dc6:	e146      	b.n	8001056 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x40>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b12      	cmp	r3, #18
 8000dd6:	d123      	bne.n	8000e20 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3208      	adds	r2, #8
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	58d3      	ldr	r3, [r2, r3]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2207      	movs	r2, #7
 8000dea:	4013      	ands	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2107      	movs	r1, #7
 8000e04:	400b      	ands	r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	6939      	ldr	r1, [r7, #16]
 8000e1e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d00b      	beq.n	8000e40 <HAL_GPIO_Init+0xa8>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	2b11      	cmp	r3, #17
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b12      	cmp	r3, #18
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	055b      	lsls	r3, r3, #21
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d100      	bne.n	8000f14 <HAL_GPIO_Init+0x17c>
 8000f12:	e0a0      	b.n	8001056 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <HAL_GPIO_Init+0x2dc>)
 8000f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f18:	4b56      	ldr	r3, [pc, #344]	; (8001074 <HAL_GPIO_Init+0x2dc>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f20:	4a55      	ldr	r2, [pc, #340]	; (8001078 <HAL_GPIO_Init+0x2e0>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	589b      	ldr	r3, [r3, r2]
 8000f2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2203      	movs	r2, #3
 8000f32:	4013      	ands	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	23a0      	movs	r3, #160	; 0xa0
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x1f6>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4a      	ldr	r2, [pc, #296]	; (800107c <HAL_GPIO_Init+0x2e4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x1f2>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x1ea>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a47      	ldr	r2, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x1e6>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_GPIO_Init+0x2f4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x1e2>
 8000f76:	2305      	movs	r3, #5
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x1f8>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x1f8>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x1f8>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x1f8>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x1f8>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x1f8>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	2103      	movs	r1, #3
 8000f94:	400a      	ands	r2, r1
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	; (8001078 <HAL_GPIO_Init+0x2e0>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	029b      	lsls	r3, r3, #10
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	035b      	lsls	r3, r3, #13
 800101a:	4013      	ands	r3, r2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	039b      	lsls	r3, r3, #14
 8001044:	4013      	ands	r3, r2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	40da      	lsrs	r2, r3
 8001064:	1e13      	subs	r3, r2, #0
 8001066:	d000      	beq.n	800106a <HAL_GPIO_Init+0x2d2>
 8001068:	e6a2      	b.n	8000db0 <HAL_GPIO_Init+0x18>
  }
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b006      	add	sp, #24
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	50000400 	.word	0x50000400
 8001080:	50000800 	.word	0x50000800
 8001084:	50000c00 	.word	0x50000c00
 8001088:	50001000 	.word	0x50001000
 800108c:	50001c00 	.word	0x50001c00
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	1c7b      	adds	r3, r7, #1
 80010a8:	1c0a      	adds	r2, r1, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	000a      	movs	r2, r1
 80010d8:	1cbb      	adds	r3, r7, #2
 80010da:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	1cbb      	adds	r3, r7, #2
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	405a      	eors	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	615a      	str	r2, [r3, #20]
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f000 fbbc 	bl	8001880 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001108:	4bc8      	ldr	r3, [pc, #800]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001112:	4bc6      	ldr	r3, [pc, #792]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	4013      	ands	r3, r2
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x36>
 8001128:	e07e      	b.n	8001228 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b08      	cmp	r3, #8
 800112e:	d007      	beq.n	8001140 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0c      	cmp	r3, #12
 8001134:	d112      	bne.n	800115c <HAL_RCC_OscConfig+0x68>
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	025b      	lsls	r3, r3, #9
 800113c:	429a      	cmp	r2, r3
 800113e:	d10d      	bne.n	800115c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4bba      	ldr	r3, [pc, #744]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	029b      	lsls	r3, r3, #10
 8001148:	4013      	ands	r3, r2
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x5a>
 800114c:	e06b      	b.n	8001226 <HAL_RCC_OscConfig+0x132>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d167      	bne.n	8001226 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	f000 fb92 	bl	8001880 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	025b      	lsls	r3, r3, #9
 8001164:	429a      	cmp	r2, r3
 8001166:	d107      	bne.n	8001178 <HAL_RCC_OscConfig+0x84>
 8001168:	4bb0      	ldr	r3, [pc, #704]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4baf      	ldr	r3, [pc, #700]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	0249      	lsls	r1, r1, #9
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e027      	b.n	80011c8 <HAL_RCC_OscConfig+0xd4>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	23a0      	movs	r3, #160	; 0xa0
 800117e:	02db      	lsls	r3, r3, #11
 8001180:	429a      	cmp	r2, r3
 8001182:	d10e      	bne.n	80011a2 <HAL_RCC_OscConfig+0xae>
 8001184:	4ba9      	ldr	r3, [pc, #676]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4ba8      	ldr	r3, [pc, #672]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	02c9      	lsls	r1, r1, #11
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	4ba6      	ldr	r3, [pc, #664]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4ba5      	ldr	r3, [pc, #660]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	0249      	lsls	r1, r1, #9
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e012      	b.n	80011c8 <HAL_RCC_OscConfig+0xd4>
 80011a2:	4ba2      	ldr	r3, [pc, #648]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4ba1      	ldr	r3, [pc, #644]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80011a8:	49a1      	ldr	r1, [pc, #644]	; (8001430 <HAL_RCC_OscConfig+0x33c>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	4b9f      	ldr	r3, [pc, #636]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4013      	ands	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4b9b      	ldr	r3, [pc, #620]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b9a      	ldr	r3, [pc, #616]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80011c2:	499c      	ldr	r1, [pc, #624]	; (8001434 <HAL_RCC_OscConfig+0x340>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d015      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fd06 	bl	8000be0 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d8:	e009      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011da:	f7ff fd01 	bl	8000be0 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d902      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	f000 fb49 	bl	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ee:	4b8f      	ldr	r3, [pc, #572]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	029b      	lsls	r3, r3, #10
 80011f6:	4013      	ands	r3, r2
 80011f8:	d0ef      	beq.n	80011da <HAL_RCC_OscConfig+0xe6>
 80011fa:	e015      	b.n	8001228 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fcf0 	bl	8000be0 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001206:	f7ff fceb 	bl	8000be0 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e333      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001218:	4b84      	ldr	r3, [pc, #528]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	029b      	lsls	r3, r3, #10
 8001220:	4013      	ands	r3, r2
 8001222:	d1f0      	bne.n	8001206 <HAL_RCC_OscConfig+0x112>
 8001224:	e000      	b.n	8001228 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2202      	movs	r2, #2
 800122e:	4013      	ands	r3, r2
 8001230:	d100      	bne.n	8001234 <HAL_RCC_OscConfig+0x140>
 8001232:	e098      	b.n	8001366 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	2220      	movs	r2, #32
 800123e:	4013      	ands	r3, r2
 8001240:	d009      	beq.n	8001256 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001242:	4b7a      	ldr	r3, [pc, #488]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b79      	ldr	r3, [pc, #484]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001248:	2120      	movs	r1, #32
 800124a:	430a      	orrs	r2, r1
 800124c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	2220      	movs	r2, #32
 8001252:	4393      	bics	r3, r2
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	2b04      	cmp	r3, #4
 800125a:	d005      	beq.n	8001268 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0c      	cmp	r3, #12
 8001260:	d13d      	bne.n	80012de <HAL_RCC_OscConfig+0x1ea>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d13a      	bne.n	80012de <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001268:	4b70      	ldr	r3, [pc, #448]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2204      	movs	r2, #4
 800126e:	4013      	ands	r3, r2
 8001270:	d004      	beq.n	800127c <HAL_RCC_OscConfig+0x188>
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e301      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b6b      	ldr	r3, [pc, #428]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a6d      	ldr	r2, [pc, #436]	; (8001438 <HAL_RCC_OscConfig+0x344>)
 8001282:	4013      	ands	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	021a      	lsls	r2, r3, #8
 800128c:	4b67      	ldr	r3, [pc, #412]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001292:	4b66      	ldr	r3, [pc, #408]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2209      	movs	r2, #9
 8001298:	4393      	bics	r3, r2
 800129a:	0019      	movs	r1, r3
 800129c:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800129e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a4:	f000 fc20 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 80012a8:	0001      	movs	r1, r0
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	220f      	movs	r2, #15
 80012b2:	4013      	ands	r3, r2
 80012b4:	4a61      	ldr	r2, [pc, #388]	; (800143c <HAL_RCC_OscConfig+0x348>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	000a      	movs	r2, r1
 80012ba:	40da      	lsrs	r2, r3
 80012bc:	4b60      	ldr	r3, [pc, #384]	; (8001440 <HAL_RCC_OscConfig+0x34c>)
 80012be:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80012c0:	2513      	movs	r5, #19
 80012c2:	197c      	adds	r4, r7, r5
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fc55 	bl	8000b74 <HAL_InitTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012ce:	197b      	adds	r3, r7, r5
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d047      	beq.n	8001366 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80012d6:	2313      	movs	r3, #19
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	e2d0      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d027      	beq.n	8001334 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012e4:	4b51      	ldr	r3, [pc, #324]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2209      	movs	r2, #9
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	4b4f      	ldr	r3, [pc, #316]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80012f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fc73 	bl	8000be0 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc6e 	bl	8000be0 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e2b6      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001312:	4b46      	ldr	r3, [pc, #280]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2204      	movs	r2, #4
 8001318:	4013      	ands	r3, r2
 800131a:	d0f1      	beq.n	8001300 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <HAL_RCC_OscConfig+0x344>)
 8001322:	4013      	ands	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	021a      	lsls	r2, r3, #8
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	e018      	b.n	8001366 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800133a:	2101      	movs	r1, #1
 800133c:	438a      	bics	r2, r1
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc4e 	bl	8000be0 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fc49 	bl	8000be0 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e291      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800135c:	4b33      	ldr	r3, [pc, #204]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2204      	movs	r2, #4
 8001362:	4013      	ands	r3, r2
 8001364:	d1f1      	bne.n	800134a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2210      	movs	r2, #16
 800136c:	4013      	ands	r3, r2
 800136e:	d100      	bne.n	8001372 <HAL_RCC_OscConfig+0x27e>
 8001370:	e09f      	b.n	80014b2 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d13f      	bne.n	80013f8 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <HAL_RCC_OscConfig+0x338>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x29c>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e277      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a2b      	ldr	r2, [pc, #172]	; (8001444 <HAL_RCC_OscConfig+0x350>)
 8001396:	4013      	ands	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	0a19      	lsrs	r1, r3, #8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	061a      	lsls	r2, r3, #24
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	0b5b      	lsrs	r3, r3, #13
 80013be:	3301      	adds	r3, #1
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	0212      	lsls	r2, r2, #8
 80013c4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_OscConfig+0x338>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	210f      	movs	r1, #15
 80013ce:	400b      	ands	r3, r1
 80013d0:	491a      	ldr	r1, [pc, #104]	; (800143c <HAL_RCC_OscConfig+0x348>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_RCC_OscConfig+0x34c>)
 80013d8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80013da:	2513      	movs	r5, #19
 80013dc:	197c      	adds	r4, r7, r5
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff fbc8 	bl	8000b74 <HAL_InitTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013e8:	197b      	adds	r3, r7, r5
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d060      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80013f0:	2313      	movs	r3, #19
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	e243      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03e      	beq.n	800147e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_OscConfig+0x338>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0049      	lsls	r1, r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fbe7 	bl	8000be0 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001416:	e017      	b.n	8001448 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001418:	f7ff fbe2 	bl	8000be0 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d910      	bls.n	8001448 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e22a      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40021000 	.word	0x40021000
 8001430:	fffeffff 	.word	0xfffeffff
 8001434:	fffbffff 	.word	0xfffbffff
 8001438:	ffffe0ff 	.word	0xffffe0ff
 800143c:	0800388c 	.word	0x0800388c
 8001440:	20000000 	.word	0x20000000
 8001444:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001448:	4bc6      	ldr	r3, [pc, #792]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d0e1      	beq.n	8001418 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001454:	4bc3      	ldr	r3, [pc, #780]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4ac3      	ldr	r2, [pc, #780]	; (8001768 <HAL_RCC_OscConfig+0x674>)
 800145a:	4013      	ands	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001462:	4bc0      	ldr	r3, [pc, #768]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4bbe      	ldr	r3, [pc, #760]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	0a19      	lsrs	r1, r3, #8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	061a      	lsls	r2, r3, #24
 8001476:	4bbb      	ldr	r3, [pc, #748]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	e019      	b.n	80014b2 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147e:	4bb9      	ldr	r3, [pc, #740]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4bb8      	ldr	r3, [pc, #736]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001484:	49b9      	ldr	r1, [pc, #740]	; (800176c <HAL_RCC_OscConfig+0x678>)
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fba9 	bl	8000be0 <HAL_GetTick>
 800148e:	0003      	movs	r3, r0
 8001490:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001494:	f7ff fba4 	bl	8000be0 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1ec      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014a6:	4baf      	ldr	r3, [pc, #700]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2208      	movs	r2, #8
 80014b8:	4013      	ands	r3, r2
 80014ba:	d036      	beq.n	800152a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d019      	beq.n	80014f8 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c4:	4ba7      	ldr	r3, [pc, #668]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80014c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c8:	4ba6      	ldr	r3, [pc, #664]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	430a      	orrs	r2, r1
 80014ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fb86 	bl	8000be0 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fb81 	bl	8000be0 <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1c9      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ec:	4b9d      	ldr	r3, [pc, #628]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80014ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d0f1      	beq.n	80014da <HAL_RCC_OscConfig+0x3e6>
 80014f6:	e018      	b.n	800152a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f8:	4b9a      	ldr	r3, [pc, #616]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80014fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014fc:	4b99      	ldr	r3, [pc, #612]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80014fe:	2101      	movs	r1, #1
 8001500:	438a      	bics	r2, r1
 8001502:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001504:	f7ff fb6c 	bl	8000be0 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fb67 	bl	8000be0 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e1af      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001520:	4b90      	ldr	r3, [pc, #576]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d1f1      	bne.n	800150e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2204      	movs	r2, #4
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x442>
 8001534:	e0af      	b.n	8001696 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2323      	movs	r3, #35	; 0x23
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b89      	ldr	r3, [pc, #548]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	055b      	lsls	r3, r3, #21
 8001546:	4013      	ands	r3, r2
 8001548:	d10a      	bne.n	8001560 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b86      	ldr	r3, [pc, #536]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800154c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800154e:	4b85      	ldr	r3, [pc, #532]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0549      	lsls	r1, r1, #21
 8001554:	430a      	orrs	r2, r1
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001558:	2323      	movs	r3, #35	; 0x23
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b83      	ldr	r3, [pc, #524]	; (8001770 <HAL_RCC_OscConfig+0x67c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4013      	ands	r3, r2
 800156a:	d11a      	bne.n	80015a2 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156c:	4b80      	ldr	r3, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x67c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b7f      	ldr	r3, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x67c>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0049      	lsls	r1, r1, #1
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb31 	bl	8000be0 <HAL_GetTick>
 800157e:	0003      	movs	r3, r0
 8001580:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001584:	f7ff fb2c 	bl	8000be0 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e174      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x67c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4013      	ands	r3, r2
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d107      	bne.n	80015be <HAL_RCC_OscConfig+0x4ca>
 80015ae:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0049      	lsls	r1, r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	651a      	str	r2, [r3, #80]	; 0x50
 80015bc:	e031      	b.n	8001622 <HAL_RCC_OscConfig+0x52e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4ec>
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ca:	4b66      	ldr	r3, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015cc:	4967      	ldr	r1, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x678>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	651a      	str	r2, [r3, #80]	; 0x50
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015d8:	4966      	ldr	r1, [pc, #408]	; (8001774 <HAL_RCC_OscConfig+0x680>)
 80015da:	400a      	ands	r2, r1
 80015dc:	651a      	str	r2, [r3, #80]	; 0x50
 80015de:	e020      	b.n	8001622 <HAL_RCC_OscConfig+0x52e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	23a0      	movs	r3, #160	; 0xa0
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10e      	bne.n	800160a <HAL_RCC_OscConfig+0x516>
 80015ec:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f0:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	00c9      	lsls	r1, r1, #3
 80015f6:	430a      	orrs	r2, r1
 80015f8:	651a      	str	r2, [r3, #80]	; 0x50
 80015fa:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80015fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	0049      	lsls	r1, r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	651a      	str	r2, [r3, #80]	; 0x50
 8001608:	e00b      	b.n	8001622 <HAL_RCC_OscConfig+0x52e>
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800160c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800160e:	4b55      	ldr	r3, [pc, #340]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001610:	4956      	ldr	r1, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x678>)
 8001612:	400a      	ands	r2, r1
 8001614:	651a      	str	r2, [r3, #80]	; 0x50
 8001616:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161a:	4b52      	ldr	r3, [pc, #328]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800161c:	4955      	ldr	r1, [pc, #340]	; (8001774 <HAL_RCC_OscConfig+0x680>)
 800161e:	400a      	ands	r2, r1
 8001620:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d015      	beq.n	8001656 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fad9 	bl	8000be0 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001632:	e009      	b.n	8001648 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff fad4 	bl	8000be0 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a4e      	ldr	r2, [pc, #312]	; (8001778 <HAL_RCC_OscConfig+0x684>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e11b      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800164a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d0ef      	beq.n	8001634 <HAL_RCC_OscConfig+0x540>
 8001654:	e014      	b.n	8001680 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fac3 	bl	8000be0 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800165e:	e009      	b.n	8001674 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff fabe 	bl	8000be0 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a43      	ldr	r2, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x684>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e105      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001674:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d1ef      	bne.n	8001660 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001680:	2323      	movs	r3, #35	; 0x23
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d105      	bne.n	8001696 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800168c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001690:	493a      	ldr	r1, [pc, #232]	; (800177c <HAL_RCC_OscConfig+0x688>)
 8001692:	400a      	ands	r2, r1
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2220      	movs	r2, #32
 800169c:	4013      	ands	r3, r2
 800169e:	d049      	beq.n	8001734 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d026      	beq.n	80016f6 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80016b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	430a      	orrs	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_RCC_OscConfig+0x68c>)
 80016c2:	6a1a      	ldr	r2, [r3, #32]
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <HAL_RCC_OscConfig+0x68c>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0189      	lsls	r1, r1, #6
 80016ca:	430a      	orrs	r2, r1
 80016cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa87 	bl	8000be0 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d8:	f7ff fa82 	bl	8000be0 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0ca      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2202      	movs	r2, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	d0f1      	beq.n	80016d8 <HAL_RCC_OscConfig+0x5e4>
 80016f4:	e01e      	b.n	8001734 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	438a      	bics	r2, r1
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <HAL_RCC_OscConfig+0x68c>)
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_OscConfig+0x68c>)
 8001708:	491e      	ldr	r1, [pc, #120]	; (8001784 <HAL_RCC_OscConfig+0x690>)
 800170a:	400a      	ands	r2, r1
 800170c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fa67 	bl	8000be0 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001718:	f7ff fa62 	bl	8000be0 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0aa      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d1f1      	bne.n	8001718 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	d100      	bne.n	800173e <HAL_RCC_OscConfig+0x64a>
 800173c:	e09f      	b.n	800187e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d100      	bne.n	8001746 <HAL_RCC_OscConfig+0x652>
 8001744:	e078      	b.n	8001838 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	2b02      	cmp	r3, #2
 800174c:	d159      	bne.n	8001802 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_RCC_OscConfig+0x670>)
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <HAL_RCC_OscConfig+0x694>)
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fa41 	bl	8000be0 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001762:	e01c      	b.n	800179e <HAL_RCC_OscConfig+0x6aa>
 8001764:	40021000 	.word	0x40021000
 8001768:	ffff1fff 	.word	0xffff1fff
 800176c:	fffffeff 	.word	0xfffffeff
 8001770:	40007000 	.word	0x40007000
 8001774:	fffffbff 	.word	0xfffffbff
 8001778:	00001388 	.word	0x00001388
 800177c:	efffffff 	.word	0xefffffff
 8001780:	40010000 	.word	0x40010000
 8001784:	ffffdfff 	.word	0xffffdfff
 8001788:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fa28 	bl	8000be0 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e070      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	049b      	lsls	r3, r3, #18
 80017a6:	4013      	ands	r3, r2
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	4a37      	ldr	r2, [pc, #220]	; (800188c <HAL_RCC_OscConfig+0x798>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c2:	431a      	orrs	r2, r3
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0449      	lsls	r1, r1, #17
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa02 	bl	8000be0 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff f9fd 	bl	8000be0 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e045      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	049b      	lsls	r3, r3, #18
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x6ee>
 8001800:	e03d      	b.n	800187e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 8001808:	4921      	ldr	r1, [pc, #132]	; (8001890 <HAL_RCC_OscConfig+0x79c>)
 800180a:	400a      	ands	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff f9e7 	bl	8000be0 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f9e2 	bl	8000be0 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e02a      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	049b      	lsls	r3, r3, #18
 8001832:	4013      	ands	r3, r2
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x724>
 8001836:	e022      	b.n	800187e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e01d      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_RCC_OscConfig+0x794>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	429a      	cmp	r2, r3
 8001858:	d10f      	bne.n	800187a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	23f0      	movs	r3, #240	; 0xf0
 800185e:	039b      	lsls	r3, r3, #14
 8001860:	401a      	ands	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d107      	bne.n	800187a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	23c0      	movs	r3, #192	; 0xc0
 800186e:	041b      	lsls	r3, r3, #16
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b00a      	add	sp, #40	; 0x28
 8001886:	bdb0      	pop	{r4, r5, r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	ff02ffff 	.word	0xff02ffff
 8001890:	feffffff 	.word	0xfeffffff

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e10d      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b88      	ldr	r3, [pc, #544]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d911      	bls.n	80018da <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b85      	ldr	r3, [pc, #532]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4393      	bics	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	4b82      	ldr	r3, [pc, #520]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c8:	4b80      	ldr	r3, [pc, #512]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d001      	beq.n	80018da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0f4      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2202      	movs	r2, #2
 80018e0:	4013      	ands	r3, r2
 80018e2:	d009      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	22f0      	movs	r2, #240	; 0xf0
 80018ea:	4393      	bics	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	4b77      	ldr	r3, [pc, #476]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	d100      	bne.n	8001904 <HAL_RCC_ClockConfig+0x70>
 8001902:	e089      	b.n	8001a18 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d107      	bne.n	800191c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800190c:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	d120      	bne.n	800195a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0d3      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d107      	bne.n	8001934 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001924:	4b6a      	ldr	r3, [pc, #424]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	049b      	lsls	r3, r3, #18
 800192c:	4013      	ands	r3, r2
 800192e:	d114      	bne.n	800195a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0c7      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193c:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2204      	movs	r2, #4
 8001942:	4013      	ands	r3, r2
 8001944:	d109      	bne.n	800195a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0bc      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800194a:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4013      	ands	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0b4      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2203      	movs	r2, #3
 8001960:	4393      	bics	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 800196a:	430a      	orrs	r2, r1
 800196c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196e:	f7ff f937 	bl	8000be0 <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d111      	bne.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800197e:	e009      	b.n	8001994 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff f92e 	bl	8000be0 <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e097      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	220c      	movs	r2, #12
 800199a:	4013      	ands	r3, r2
 800199c:	2b08      	cmp	r3, #8
 800199e:	d1ef      	bne.n	8001980 <HAL_RCC_ClockConfig+0xec>
 80019a0:	e03a      	b.n	8001a18 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d111      	bne.n	80019ce <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f918 	bl	8000be0 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e081      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	220c      	movs	r2, #12
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d1ef      	bne.n	80019ac <HAL_RCC_ClockConfig+0x118>
 80019cc:	e024      	b.n	8001a18 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d11b      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d6:	e009      	b.n	80019ec <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f7ff f902 	bl	8000be0 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	4a3c      	ldr	r2, [pc, #240]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e06b      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	220c      	movs	r2, #12
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d1ef      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x144>
 80019f8:	e00e      	b.n	8001a18 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7ff f8f1 	bl	8000be0 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e05a      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	220c      	movs	r2, #12
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d211      	bcs.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4393      	bics	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_ClockConfig+0x238>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e03c      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	4013      	ands	r3, r2
 8001a52:	d009      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d00a      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x248>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00da      	lsls	r2, r3, #3
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a88:	f000 f82e 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_RCC_ClockConfig+0x23c>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	220f      	movs	r2, #15
 8001a96:	4013      	ands	r3, r2
 8001a98:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_RCC_ClockConfig+0x24c>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	40da      	lsrs	r2, r3
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_ClockConfig+0x250>)
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001aa4:	250b      	movs	r5, #11
 8001aa6:	197c      	adds	r4, r7, r5
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff f863 	bl	8000b74 <HAL_InitTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ab2:	197b      	adds	r3, r7, r5
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001aba:	230b      	movs	r3, #11
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	00001388 	.word	0x00001388
 8001ad8:	fffff8ff 	.word	0xfffff8ff
 8001adc:	ffffc7ff 	.word	0xffffc7ff
 8001ae0:	0800388c 	.word	0x0800388c
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	220c      	movs	r2, #12
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d00e      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x34>
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d00f      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d157      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b06:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d002      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b14:	e05d      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001b16:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b18:	613b      	str	r3, [r7, #16]
      break;
 8001b1a:	e05a      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b1c:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b1e:	613b      	str	r3, [r7, #16]
      break;
 8001b20:	e057      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	0c9b      	lsrs	r3, r3, #18
 8001b26:	220f      	movs	r2, #15
 8001b28:	4013      	ands	r3, r2
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <HAL_RCC_GetSysClockFreq+0x104>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	0d9b      	lsrs	r3, r3, #22
 8001b34:	2203      	movs	r2, #3
 8001b36:	4013      	ands	r3, r2
 8001b38:	3301      	adds	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	025b      	lsls	r3, r3, #9
 8001b44:	4013      	ands	r3, r2
 8001b46:	d00f      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	000a      	movs	r2, r1
 8001b4c:	0152      	lsls	r2, r2, #5
 8001b4e:	1a52      	subs	r2, r2, r1
 8001b50:	0193      	lsls	r3, r2, #6
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	185b      	adds	r3, r3, r1
 8001b58:	025b      	lsls	r3, r3, #9
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7fe fad3 	bl	8000108 <__udivsi3>
 8001b62:	0003      	movs	r3, r0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e023      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d00f      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	000a      	movs	r2, r1
 8001b76:	0152      	lsls	r2, r2, #5
 8001b78:	1a52      	subs	r2, r2, r1
 8001b7a:	0193      	lsls	r3, r2, #6
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	185b      	adds	r3, r3, r1
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe fabe 	bl	8000108 <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00e      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	000a      	movs	r2, r1
 8001b96:	0152      	lsls	r2, r2, #5
 8001b98:	1a52      	subs	r2, r2, r1
 8001b9a:	0193      	lsls	r3, r2, #6
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	185b      	adds	r3, r3, r1
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7fe faae 	bl	8000108 <__udivsi3>
 8001bac:	0003      	movs	r3, r0
 8001bae:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
      break;
 8001bb4:	e00d      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0b5b      	lsrs	r3, r3, #13
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	0212      	lsls	r2, r2, #8
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      break;
 8001bd0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bd2:	693b      	ldr	r3, [r7, #16]
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b006      	add	sp, #24
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	003d0900 	.word	0x003d0900
 8001be4:	00f42400 	.word	0x00f42400
 8001be8:	007a1200 	.word	0x007a1200
 8001bec:	080038a4 	.word	0x080038a4

08001bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	20000000 	.word	0x20000000

08001c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c08:	f7ff fff2 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	2207      	movs	r2, #7
 8001c16:	4013      	ands	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	40d9      	lsrs	r1, r3
 8001c1e:	000b      	movs	r3, r1
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	0800389c 	.word	0x0800389c

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c34:	f7ff ffdc 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c38:	0001      	movs	r1, r0
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	2207      	movs	r2, #7
 8001c42:	4013      	ands	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	40d9      	lsrs	r1, r3
 8001c4a:	000b      	movs	r3, r1
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021000 	.word	0x40021000
 8001c58:	0800389c 	.word	0x0800389c

08001c5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4013      	ands	r3, r2
 8001c78:	d100      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001c7a:	e0dd      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001c7c:	2317      	movs	r3, #23
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c84:	4ba4      	ldr	r3, [pc, #656]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	4ba1      	ldr	r3, [pc, #644]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c94:	4ba0      	ldr	r3, [pc, #640]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	0549      	lsls	r1, r1, #21
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b9d      	ldr	r3, [pc, #628]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b9a      	ldr	r3, [pc, #616]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b99      	ldr	r3, [pc, #612]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0049      	lsls	r1, r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe ff8e 	bl	8000be0 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	e008      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7fe ff89 	bl	8000be0 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e118      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ce8:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	039b      	lsls	r3, r3, #14
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	039b      	lsls	r3, r3, #14
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	23c0      	movs	r3, #192	; 0xc0
 8001d0a:	039b      	lsls	r3, r3, #14
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d013      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	23c0      	movs	r3, #192	; 0xc0
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10a      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d26:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	029b      	lsls	r3, r3, #10
 8001d2e:	401a      	ands	r2, r3
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d101      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0e8      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d3c:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d40:	23c0      	movs	r3, #192	; 0xc0
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d049      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	23c0      	movs	r3, #192	; 0xc0
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d004      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2220      	movs	r2, #32
 8001d64:	4013      	ands	r3, r2
 8001d66:	d10d      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d034      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d02e      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d84:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d88:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8e:	4b62      	ldr	r3, [pc, #392]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d92:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0309      	lsls	r1, r1, #12
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da0:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001da2:	4960      	ldr	r1, [pc, #384]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001da8:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d014      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ff12 	bl	8000be0 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe ff0d 	bl	8000be0 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e09b      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dd6:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d0ef      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	401a      	ands	r2, r3
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001df4:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	401a      	ands	r2, r3
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	23c0      	movs	r3, #192	; 0xc0
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e22:	2317      	movs	r3, #23
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e32:	493f      	ldr	r1, [pc, #252]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	2203      	movs	r2, #3
 8001e48:	4393      	bics	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	220c      	movs	r2, #12
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2208      	movs	r2, #8
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b006      	add	sp, #24
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	fffcffff 	.word	0xfffcffff
 8001f24:	fff7ffff 	.word	0xfff7ffff
 8001f28:	00001388 	.word	0x00001388
 8001f2c:	ffcfffff 	.word	0xffcfffff
 8001f30:	efffffff 	.word	0xefffffff
 8001f34:	fffff3ff 	.word	0xfffff3ff
 8001f38:	ffffcfff 	.word	0xffffcfff
 8001f3c:	fbffffff 	.word	0xfbffffff
 8001f40:	fff3ffff 	.word	0xfff3ffff

08001f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e059      	b.n	800200a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2251      	movs	r2, #81	; 0x51
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2250      	movs	r2, #80	; 0x50
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7fe fc20 	bl	80007b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2251      	movs	r2, #81	; 0x51
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2140      	movs	r1, #64	; 0x40
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6999      	ldr	r1, [r3, #24]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	0c1b      	lsrs	r3, r3, #16
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <HAL_SPI_Init+0xd0>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2251      	movs	r2, #81	; 0x51
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	fffff7ff 	.word	0xfffff7ff

08002018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e044      	b.n	80020b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202e:	2b00      	cmp	r3, #0
 8002030:	d107      	bne.n	8002042 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2270      	movs	r2, #112	; 0x70
 8002036:	2100      	movs	r1, #0
 8002038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe fc23 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2224      	movs	r2, #36	; 0x24
 8002046:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2101      	movs	r1, #1
 8002054:	438a      	bics	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 f830 	bl	80020c0 <UART_SetConfig>
 8002060:	0003      	movs	r3, r0
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e024      	b.n	80020b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0018      	movs	r0, r3
 8002076:	f000 fb57 	bl	8002728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	490d      	ldr	r1, [pc, #52]	; (80020bc <HAL_UART_Init+0xa4>)
 8002086:	400a      	ands	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	212a      	movs	r1, #42	; 0x2a
 8002096:	438a      	bics	r2, r1
 8002098:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fbef 	bl	8002890 <UART_CheckIdleState>
 80020b2:	0003      	movs	r3, r0
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	ffffb7ff 	.word	0xffffb7ff

080020c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b08e      	sub	sp, #56	; 0x38
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80020c8:	231b      	movs	r3, #27
 80020ca:	2218      	movs	r2, #24
 80020cc:	4694      	mov	ip, r2
 80020ce:	44bc      	add	ip, r7
 80020d0:	4463      	add	r3, ip
 80020d2:	2210      	movs	r2, #16
 80020d4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80020da:	2313      	movs	r3, #19
 80020dc:	2218      	movs	r2, #24
 80020de:	4694      	mov	ip, r2
 80020e0:	44bc      	add	ip, r7
 80020e2:	4463      	add	r3, ip
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4313      	orrs	r3, r2
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4aca      	ldr	r2, [pc, #808]	; (8002434 <UART_SetConfig+0x374>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4ac5      	ldr	r2, [pc, #788]	; (8002438 <UART_SetConfig+0x378>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4abf      	ldr	r2, [pc, #764]	; (800243c <UART_SetConfig+0x37c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d004      	beq.n	800214c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002148:	4313      	orrs	r3, r2
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4abb      	ldr	r2, [pc, #748]	; (8002440 <UART_SetConfig+0x380>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4ab7      	ldr	r2, [pc, #732]	; (8002444 <UART_SetConfig+0x384>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d134      	bne.n	80021d6 <UART_SetConfig+0x116>
 800216c:	4bb6      	ldr	r3, [pc, #728]	; (8002448 <UART_SetConfig+0x388>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	2203      	movs	r2, #3
 8002172:	4013      	ands	r3, r2
 8002174:	2b01      	cmp	r3, #1
 8002176:	d015      	beq.n	80021a4 <UART_SetConfig+0xe4>
 8002178:	d304      	bcc.n	8002184 <UART_SetConfig+0xc4>
 800217a:	2b02      	cmp	r3, #2
 800217c:	d00a      	beq.n	8002194 <UART_SetConfig+0xd4>
 800217e:	2b03      	cmp	r3, #3
 8002180:	d018      	beq.n	80021b4 <UART_SetConfig+0xf4>
 8002182:	e01f      	b.n	80021c4 <UART_SetConfig+0x104>
 8002184:	231b      	movs	r3, #27
 8002186:	2218      	movs	r2, #24
 8002188:	4694      	mov	ip, r2
 800218a:	44bc      	add	ip, r7
 800218c:	4463      	add	r3, ip
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e0c5      	b.n	8002320 <UART_SetConfig+0x260>
 8002194:	231b      	movs	r3, #27
 8002196:	2218      	movs	r2, #24
 8002198:	4694      	mov	ip, r2
 800219a:	44bc      	add	ip, r7
 800219c:	4463      	add	r3, ip
 800219e:	2202      	movs	r2, #2
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e0bd      	b.n	8002320 <UART_SetConfig+0x260>
 80021a4:	231b      	movs	r3, #27
 80021a6:	2218      	movs	r2, #24
 80021a8:	4694      	mov	ip, r2
 80021aa:	44bc      	add	ip, r7
 80021ac:	4463      	add	r3, ip
 80021ae:	2204      	movs	r2, #4
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e0b5      	b.n	8002320 <UART_SetConfig+0x260>
 80021b4:	231b      	movs	r3, #27
 80021b6:	2218      	movs	r2, #24
 80021b8:	4694      	mov	ip, r2
 80021ba:	44bc      	add	ip, r7
 80021bc:	4463      	add	r3, ip
 80021be:	2208      	movs	r2, #8
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e0ad      	b.n	8002320 <UART_SetConfig+0x260>
 80021c4:	231b      	movs	r3, #27
 80021c6:	2218      	movs	r2, #24
 80021c8:	4694      	mov	ip, r2
 80021ca:	44bc      	add	ip, r7
 80021cc:	4463      	add	r3, ip
 80021ce:	2210      	movs	r2, #16
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	e0a4      	b.n	8002320 <UART_SetConfig+0x260>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a9c      	ldr	r2, [pc, #624]	; (800244c <UART_SetConfig+0x38c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d137      	bne.n	8002250 <UART_SetConfig+0x190>
 80021e0:	4b99      	ldr	r3, [pc, #612]	; (8002448 <UART_SetConfig+0x388>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	220c      	movs	r2, #12
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d018      	beq.n	800221e <UART_SetConfig+0x15e>
 80021ec:	d802      	bhi.n	80021f4 <UART_SetConfig+0x134>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <UART_SetConfig+0x13e>
 80021f2:	e024      	b.n	800223e <UART_SetConfig+0x17e>
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d00a      	beq.n	800220e <UART_SetConfig+0x14e>
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d018      	beq.n	800222e <UART_SetConfig+0x16e>
 80021fc:	e01f      	b.n	800223e <UART_SetConfig+0x17e>
 80021fe:	231b      	movs	r3, #27
 8002200:	2218      	movs	r2, #24
 8002202:	4694      	mov	ip, r2
 8002204:	44bc      	add	ip, r7
 8002206:	4463      	add	r3, ip
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e088      	b.n	8002320 <UART_SetConfig+0x260>
 800220e:	231b      	movs	r3, #27
 8002210:	2218      	movs	r2, #24
 8002212:	4694      	mov	ip, r2
 8002214:	44bc      	add	ip, r7
 8002216:	4463      	add	r3, ip
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e080      	b.n	8002320 <UART_SetConfig+0x260>
 800221e:	231b      	movs	r3, #27
 8002220:	2218      	movs	r2, #24
 8002222:	4694      	mov	ip, r2
 8002224:	44bc      	add	ip, r7
 8002226:	4463      	add	r3, ip
 8002228:	2204      	movs	r2, #4
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e078      	b.n	8002320 <UART_SetConfig+0x260>
 800222e:	231b      	movs	r3, #27
 8002230:	2218      	movs	r2, #24
 8002232:	4694      	mov	ip, r2
 8002234:	44bc      	add	ip, r7
 8002236:	4463      	add	r3, ip
 8002238:	2208      	movs	r2, #8
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e070      	b.n	8002320 <UART_SetConfig+0x260>
 800223e:	231b      	movs	r3, #27
 8002240:	2218      	movs	r2, #24
 8002242:	4694      	mov	ip, r2
 8002244:	44bc      	add	ip, r7
 8002246:	4463      	add	r3, ip
 8002248:	2210      	movs	r2, #16
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	e067      	b.n	8002320 <UART_SetConfig+0x260>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a7e      	ldr	r2, [pc, #504]	; (8002450 <UART_SetConfig+0x390>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d107      	bne.n	800226a <UART_SetConfig+0x1aa>
 800225a:	231b      	movs	r3, #27
 800225c:	2218      	movs	r2, #24
 800225e:	4694      	mov	ip, r2
 8002260:	44bc      	add	ip, r7
 8002262:	4463      	add	r3, ip
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e05a      	b.n	8002320 <UART_SetConfig+0x260>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a79      	ldr	r2, [pc, #484]	; (8002454 <UART_SetConfig+0x394>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d107      	bne.n	8002284 <UART_SetConfig+0x1c4>
 8002274:	231b      	movs	r3, #27
 8002276:	2218      	movs	r2, #24
 8002278:	4694      	mov	ip, r2
 800227a:	44bc      	add	ip, r7
 800227c:	4463      	add	r3, ip
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e04d      	b.n	8002320 <UART_SetConfig+0x260>
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a6c      	ldr	r2, [pc, #432]	; (800243c <UART_SetConfig+0x37c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d141      	bne.n	8002312 <UART_SetConfig+0x252>
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <UART_SetConfig+0x388>)
 8002290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002292:	23c0      	movs	r3, #192	; 0xc0
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4013      	ands	r3, r2
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	00d2      	lsls	r2, r2, #3
 800229c:	4293      	cmp	r3, r2
 800229e:	d01f      	beq.n	80022e0 <UART_SetConfig+0x220>
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	00d2      	lsls	r2, r2, #3
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d802      	bhi.n	80022ae <UART_SetConfig+0x1ee>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <UART_SetConfig+0x200>
 80022ac:	e028      	b.n	8002300 <UART_SetConfig+0x240>
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00c      	beq.n	80022d0 <UART_SetConfig+0x210>
 80022b6:	22c0      	movs	r2, #192	; 0xc0
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d018      	beq.n	80022f0 <UART_SetConfig+0x230>
 80022be:	e01f      	b.n	8002300 <UART_SetConfig+0x240>
 80022c0:	231b      	movs	r3, #27
 80022c2:	2218      	movs	r2, #24
 80022c4:	4694      	mov	ip, r2
 80022c6:	44bc      	add	ip, r7
 80022c8:	4463      	add	r3, ip
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e027      	b.n	8002320 <UART_SetConfig+0x260>
 80022d0:	231b      	movs	r3, #27
 80022d2:	2218      	movs	r2, #24
 80022d4:	4694      	mov	ip, r2
 80022d6:	44bc      	add	ip, r7
 80022d8:	4463      	add	r3, ip
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e01f      	b.n	8002320 <UART_SetConfig+0x260>
 80022e0:	231b      	movs	r3, #27
 80022e2:	2218      	movs	r2, #24
 80022e4:	4694      	mov	ip, r2
 80022e6:	44bc      	add	ip, r7
 80022e8:	4463      	add	r3, ip
 80022ea:	2204      	movs	r2, #4
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e017      	b.n	8002320 <UART_SetConfig+0x260>
 80022f0:	231b      	movs	r3, #27
 80022f2:	2218      	movs	r2, #24
 80022f4:	4694      	mov	ip, r2
 80022f6:	44bc      	add	ip, r7
 80022f8:	4463      	add	r3, ip
 80022fa:	2208      	movs	r2, #8
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e00f      	b.n	8002320 <UART_SetConfig+0x260>
 8002300:	231b      	movs	r3, #27
 8002302:	2218      	movs	r2, #24
 8002304:	4694      	mov	ip, r2
 8002306:	44bc      	add	ip, r7
 8002308:	4463      	add	r3, ip
 800230a:	2210      	movs	r2, #16
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	e006      	b.n	8002320 <UART_SetConfig+0x260>
 8002312:	231b      	movs	r3, #27
 8002314:	2218      	movs	r2, #24
 8002316:	4694      	mov	ip, r2
 8002318:	44bc      	add	ip, r7
 800231a:	4463      	add	r3, ip
 800231c:	2210      	movs	r2, #16
 800231e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a45      	ldr	r2, [pc, #276]	; (800243c <UART_SetConfig+0x37c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d000      	beq.n	800232c <UART_SetConfig+0x26c>
 800232a:	e09d      	b.n	8002468 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800232c:	231b      	movs	r3, #27
 800232e:	2218      	movs	r2, #24
 8002330:	4694      	mov	ip, r2
 8002332:	44bc      	add	ip, r7
 8002334:	4463      	add	r3, ip
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d00d      	beq.n	8002358 <UART_SetConfig+0x298>
 800233c:	dc02      	bgt.n	8002344 <UART_SetConfig+0x284>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <UART_SetConfig+0x28e>
 8002342:	e01d      	b.n	8002380 <UART_SetConfig+0x2c0>
 8002344:	2b04      	cmp	r3, #4
 8002346:	d012      	beq.n	800236e <UART_SetConfig+0x2ae>
 8002348:	2b08      	cmp	r3, #8
 800234a:	d015      	beq.n	8002378 <UART_SetConfig+0x2b8>
 800234c:	e018      	b.n	8002380 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800234e:	f7ff fc59 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 8002352:	0003      	movs	r3, r0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002356:	e01b      	b.n	8002390 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <UART_SetConfig+0x388>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2210      	movs	r2, #16
 800235e:	4013      	ands	r3, r2
 8002360:	d002      	beq.n	8002368 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002362:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <UART_SetConfig+0x398>)
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002366:	e013      	b.n	8002390 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002368:	4b3c      	ldr	r3, [pc, #240]	; (800245c <UART_SetConfig+0x39c>)
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800236c:	e010      	b.n	8002390 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800236e:	f7ff fbbb 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002372:	0003      	movs	r3, r0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002376:	e00b      	b.n	8002390 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800237e:	e007      	b.n	8002390 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002380:	2313      	movs	r3, #19
 8002382:	2218      	movs	r2, #24
 8002384:	4694      	mov	ip, r2
 8002386:	44bc      	add	ip, r7
 8002388:	4463      	add	r3, ip
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
        break;
 800238e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d100      	bne.n	8002398 <UART_SetConfig+0x2d8>
 8002396:	e1a6      	b.n	80026e6 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	0013      	movs	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	189b      	adds	r3, r3, r2
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d305      	bcc.n	80023b4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d907      	bls.n	80023c4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80023b4:	2313      	movs	r3, #19
 80023b6:	2218      	movs	r2, #24
 80023b8:	4694      	mov	ip, r2
 80023ba:	44bc      	add	ip, r7
 80023bc:	4463      	add	r3, ip
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e190      	b.n	80026e6 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	6939      	ldr	r1, [r7, #16]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	000b      	movs	r3, r1
 80023d2:	0e1b      	lsrs	r3, r3, #24
 80023d4:	0010      	movs	r0, r2
 80023d6:	0205      	lsls	r5, r0, #8
 80023d8:	431d      	orrs	r5, r3
 80023da:	000b      	movs	r3, r1
 80023dc:	021c      	lsls	r4, r3, #8
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	1900      	adds	r0, r0, r4
 80023f0:	4169      	adcs	r1, r5
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f7fd ff0e 	bl	8000220 <__aeabi_uldivmod>
 8002404:	0003      	movs	r3, r0
 8002406:	000c      	movs	r4, r1
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <UART_SetConfig+0x3a0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d908      	bls.n	8002424 <UART_SetConfig+0x364>
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	4a13      	ldr	r2, [pc, #76]	; (8002464 <UART_SetConfig+0x3a4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d804      	bhi.n	8002424 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	e160      	b.n	80026e6 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8002424:	2313      	movs	r3, #19
 8002426:	2218      	movs	r2, #24
 8002428:	4694      	mov	ip, r2
 800242a:	44bc      	add	ip, r7
 800242c:	4463      	add	r3, ip
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e158      	b.n	80026e6 <UART_SetConfig+0x626>
 8002434:	efff69f3 	.word	0xefff69f3
 8002438:	ffffcfff 	.word	0xffffcfff
 800243c:	40004800 	.word	0x40004800
 8002440:	fffff4ff 	.word	0xfffff4ff
 8002444:	40013800 	.word	0x40013800
 8002448:	40021000 	.word	0x40021000
 800244c:	40004400 	.word	0x40004400
 8002450:	40004c00 	.word	0x40004c00
 8002454:	40005000 	.word	0x40005000
 8002458:	003d0900 	.word	0x003d0900
 800245c:	00f42400 	.word	0x00f42400
 8002460:	000002ff 	.word	0x000002ff
 8002464:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	429a      	cmp	r2, r3
 8002472:	d000      	beq.n	8002476 <UART_SetConfig+0x3b6>
 8002474:	e0a9      	b.n	80025ca <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8002476:	231b      	movs	r3, #27
 8002478:	2218      	movs	r2, #24
 800247a:	4694      	mov	ip, r2
 800247c:	44bc      	add	ip, r7
 800247e:	4463      	add	r3, ip
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d86d      	bhi.n	8002562 <UART_SetConfig+0x4a2>
 8002486:	009a      	lsls	r2, r3, #2
 8002488:	4b9f      	ldr	r3, [pc, #636]	; (8002708 <UART_SetConfig+0x648>)
 800248a:	18d3      	adds	r3, r2, r3
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002490:	f7ff fbb8 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 8002494:	0003      	movs	r3, r0
 8002496:	005a      	lsls	r2, r3, #1
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	18d2      	adds	r2, r2, r3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	f7fd fe2e 	bl	8000108 <__udivsi3>
 80024ac:	0003      	movs	r3, r0
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024b2:	e05e      	b.n	8002572 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024b4:	f7ff fbbc 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 80024b8:	0003      	movs	r3, r0
 80024ba:	005a      	lsls	r2, r3, #1
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	18d2      	adds	r2, r2, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	0019      	movs	r1, r3
 80024ca:	0010      	movs	r0, r2
 80024cc:	f7fd fe1c 	bl	8000108 <__udivsi3>
 80024d0:	0003      	movs	r3, r0
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024d6:	e04c      	b.n	8002572 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024d8:	4b8c      	ldr	r3, [pc, #560]	; (800270c <UART_SetConfig+0x64c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2210      	movs	r2, #16
 80024de:	4013      	ands	r3, r2
 80024e0:	d00e      	beq.n	8002500 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	4a89      	ldr	r2, [pc, #548]	; (8002710 <UART_SetConfig+0x650>)
 80024ea:	189a      	adds	r2, r3, r2
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0019      	movs	r1, r3
 80024f2:	0010      	movs	r0, r2
 80024f4:	f7fd fe08 	bl	8000108 <__udivsi3>
 80024f8:	0003      	movs	r3, r0
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80024fe:	e038      	b.n	8002572 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	4a83      	ldr	r2, [pc, #524]	; (8002714 <UART_SetConfig+0x654>)
 8002508:	189a      	adds	r2, r3, r2
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	0019      	movs	r1, r3
 8002510:	0010      	movs	r0, r2
 8002512:	f7fd fdf9 	bl	8000108 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	b29b      	uxth	r3, r3
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800251c:	e029      	b.n	8002572 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800251e:	f7ff fae3 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002522:	0003      	movs	r3, r0
 8002524:	005a      	lsls	r2, r3, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	18d2      	adds	r2, r2, r3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0019      	movs	r1, r3
 8002534:	0010      	movs	r0, r2
 8002536:	f7fd fde7 	bl	8000108 <__udivsi3>
 800253a:	0003      	movs	r3, r0
 800253c:	b29b      	uxth	r3, r3
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002540:	e017      	b.n	8002572 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	0252      	lsls	r2, r2, #9
 800254c:	189a      	adds	r2, r3, r2
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0019      	movs	r1, r3
 8002554:	0010      	movs	r0, r2
 8002556:	f7fd fdd7 	bl	8000108 <__udivsi3>
 800255a:	0003      	movs	r3, r0
 800255c:	b29b      	uxth	r3, r3
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002560:	e007      	b.n	8002572 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002562:	2313      	movs	r3, #19
 8002564:	2218      	movs	r2, #24
 8002566:	4694      	mov	ip, r2
 8002568:	44bc      	add	ip, r7
 800256a:	4463      	add	r3, ip
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
        break;
 8002570:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d920      	bls.n	80025ba <UART_SetConfig+0x4fa>
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	4a67      	ldr	r2, [pc, #412]	; (8002718 <UART_SetConfig+0x658>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d81c      	bhi.n	80025ba <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	b29a      	uxth	r2, r3
 8002584:	200a      	movs	r0, #10
 8002586:	2418      	movs	r4, #24
 8002588:	193b      	adds	r3, r7, r4
 800258a:	181b      	adds	r3, r3, r0
 800258c:	210f      	movs	r1, #15
 800258e:	438a      	bics	r2, r1
 8002590:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	b29b      	uxth	r3, r3
 8002598:	2207      	movs	r2, #7
 800259a:	4013      	ands	r3, r2
 800259c:	b299      	uxth	r1, r3
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	181b      	adds	r3, r3, r0
 80025a2:	193a      	adds	r2, r7, r4
 80025a4:	1812      	adds	r2, r2, r0
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	193a      	adds	r2, r7, r4
 80025b2:	1812      	adds	r2, r2, r0
 80025b4:	8812      	ldrh	r2, [r2, #0]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	e095      	b.n	80026e6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80025ba:	2313      	movs	r3, #19
 80025bc:	2218      	movs	r2, #24
 80025be:	4694      	mov	ip, r2
 80025c0:	44bc      	add	ip, r7
 80025c2:	4463      	add	r3, ip
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e08d      	b.n	80026e6 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80025ca:	231b      	movs	r3, #27
 80025cc:	2218      	movs	r2, #24
 80025ce:	4694      	mov	ip, r2
 80025d0:	44bc      	add	ip, r7
 80025d2:	4463      	add	r3, ip
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d86a      	bhi.n	80026b0 <UART_SetConfig+0x5f0>
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	4b4f      	ldr	r3, [pc, #316]	; (800271c <UART_SetConfig+0x65c>)
 80025de:	18d3      	adds	r3, r2, r3
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025e4:	f7ff fb0e 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 80025e8:	0002      	movs	r2, r0
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	18d2      	adds	r2, r2, r3
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0019      	movs	r1, r3
 80025f8:	0010      	movs	r0, r2
 80025fa:	f7fd fd85 	bl	8000108 <__udivsi3>
 80025fe:	0003      	movs	r3, r0
 8002600:	b29b      	uxth	r3, r3
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002604:	e05c      	b.n	80026c0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002606:	f7ff fb13 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 800260a:	0002      	movs	r2, r0
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	18d2      	adds	r2, r2, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0019      	movs	r1, r3
 800261a:	0010      	movs	r0, r2
 800261c:	f7fd fd74 	bl	8000108 <__udivsi3>
 8002620:	0003      	movs	r3, r0
 8002622:	b29b      	uxth	r3, r3
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002626:	e04b      	b.n	80026c0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002628:	4b38      	ldr	r3, [pc, #224]	; (800270c <UART_SetConfig+0x64c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2210      	movs	r2, #16
 800262e:	4013      	ands	r3, r2
 8002630:	d00e      	beq.n	8002650 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	4a39      	ldr	r2, [pc, #228]	; (8002720 <UART_SetConfig+0x660>)
 800263a:	189a      	adds	r2, r3, r2
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	0019      	movs	r1, r3
 8002642:	0010      	movs	r0, r2
 8002644:	f7fd fd60 	bl	8000108 <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	b29b      	uxth	r3, r3
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800264e:	e037      	b.n	80026c0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	4a33      	ldr	r2, [pc, #204]	; (8002724 <UART_SetConfig+0x664>)
 8002658:	189a      	adds	r2, r3, r2
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0019      	movs	r1, r3
 8002660:	0010      	movs	r0, r2
 8002662:	f7fd fd51 	bl	8000108 <__udivsi3>
 8002666:	0003      	movs	r3, r0
 8002668:	b29b      	uxth	r3, r3
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800266c:	e028      	b.n	80026c0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800266e:	f7ff fa3b 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002672:	0002      	movs	r2, r0
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	18d2      	adds	r2, r2, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0019      	movs	r1, r3
 8002682:	0010      	movs	r0, r2
 8002684:	f7fd fd40 	bl	8000108 <__udivsi3>
 8002688:	0003      	movs	r3, r0
 800268a:	b29b      	uxth	r3, r3
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800268e:	e017      	b.n	80026c0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	0212      	lsls	r2, r2, #8
 800269a:	189a      	adds	r2, r3, r2
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0019      	movs	r1, r3
 80026a2:	0010      	movs	r0, r2
 80026a4:	f7fd fd30 	bl	8000108 <__udivsi3>
 80026a8:	0003      	movs	r3, r0
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ae:	e007      	b.n	80026c0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80026b0:	2313      	movs	r3, #19
 80026b2:	2218      	movs	r2, #24
 80026b4:	4694      	mov	ip, r2
 80026b6:	44bc      	add	ip, r7
 80026b8:	4463      	add	r3, ip
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
        break;
 80026be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	d908      	bls.n	80026d8 <UART_SetConfig+0x618>
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	4a13      	ldr	r2, [pc, #76]	; (8002718 <UART_SetConfig+0x658>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d804      	bhi.n	80026d8 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	e006      	b.n	80026e6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80026d8:	2313      	movs	r3, #19
 80026da:	2218      	movs	r2, #24
 80026dc:	4694      	mov	ip, r2
 80026de:	44bc      	add	ip, r7
 80026e0:	4463      	add	r3, ip
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2200      	movs	r2, #0
 80026ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2200      	movs	r2, #0
 80026f0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80026f2:	2313      	movs	r3, #19
 80026f4:	2218      	movs	r2, #24
 80026f6:	4694      	mov	ip, r2
 80026f8:	44bc      	add	ip, r7
 80026fa:	4463      	add	r3, ip
 80026fc:	781b      	ldrb	r3, [r3, #0]
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b00e      	add	sp, #56	; 0x38
 8002704:	bdb0      	pop	{r4, r5, r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	080038b0 	.word	0x080038b0
 800270c:	40021000 	.word	0x40021000
 8002710:	007a1200 	.word	0x007a1200
 8002714:	01e84800 	.word	0x01e84800
 8002718:	0000ffff 	.word	0x0000ffff
 800271c:	080038d4 	.word	0x080038d4
 8002720:	003d0900 	.word	0x003d0900
 8002724:	00f42400 	.word	0x00f42400

08002728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d00b      	beq.n	8002752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a4a      	ldr	r2, [pc, #296]	; (800286c <UART_AdvFeatureConfig+0x144>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d00b      	beq.n	8002774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a43      	ldr	r2, [pc, #268]	; (8002870 <UART_AdvFeatureConfig+0x148>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2204      	movs	r2, #4
 800277a:	4013      	ands	r3, r2
 800277c:	d00b      	beq.n	8002796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a3b      	ldr	r2, [pc, #236]	; (8002874 <UART_AdvFeatureConfig+0x14c>)
 8002786:	4013      	ands	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2208      	movs	r2, #8
 800279c:	4013      	ands	r3, r2
 800279e:	d00b      	beq.n	80027b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4a34      	ldr	r2, [pc, #208]	; (8002878 <UART_AdvFeatureConfig+0x150>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2210      	movs	r2, #16
 80027be:	4013      	ands	r3, r2
 80027c0:	d00b      	beq.n	80027da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a2c      	ldr	r2, [pc, #176]	; (800287c <UART_AdvFeatureConfig+0x154>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2220      	movs	r2, #32
 80027e0:	4013      	ands	r3, r2
 80027e2:	d00b      	beq.n	80027fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	4a25      	ldr	r2, [pc, #148]	; (8002880 <UART_AdvFeatureConfig+0x158>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2240      	movs	r2, #64	; 0x40
 8002802:	4013      	ands	r3, r2
 8002804:	d01d      	beq.n	8002842 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <UART_AdvFeatureConfig+0x15c>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	035b      	lsls	r3, r3, #13
 8002826:	429a      	cmp	r2, r3
 8002828:	d10b      	bne.n	8002842 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a15      	ldr	r2, [pc, #84]	; (8002888 <UART_AdvFeatureConfig+0x160>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	4013      	ands	r3, r2
 800284a:	d00b      	beq.n	8002864 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <UART_AdvFeatureConfig+0x164>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}
 800286c:	fffdffff 	.word	0xfffdffff
 8002870:	fffeffff 	.word	0xfffeffff
 8002874:	fffbffff 	.word	0xfffbffff
 8002878:	ffff7fff 	.word	0xffff7fff
 800287c:	ffffefff 	.word	0xffffefff
 8002880:	ffffdfff 	.word	0xffffdfff
 8002884:	ffefffff 	.word	0xffefffff
 8002888:	ff9fffff 	.word	0xff9fffff
 800288c:	fff7ffff 	.word	0xfff7ffff

08002890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af02      	add	r7, sp, #8
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800289e:	f7fe f99f 	bl	8000be0 <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d10d      	bne.n	80028d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	0399      	lsls	r1, r3, #14
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4b16      	ldr	r3, [pc, #88]	; (8002918 <UART_CheckIdleState+0x88>)
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	0013      	movs	r3, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	f000 f82a 	bl	800291c <UART_WaitOnFlagUntilTimeout>
 80028c8:	1e03      	subs	r3, r0, #0
 80028ca:	d001      	beq.n	80028d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e01f      	b.n	8002910 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2204      	movs	r2, #4
 80028d8:	4013      	ands	r3, r2
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d10d      	bne.n	80028fa <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	03d9      	lsls	r1, r3, #15
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <UART_CheckIdleState+0x88>)
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	0013      	movs	r3, r2
 80028ec:	2200      	movs	r2, #0
 80028ee:	f000 f815 	bl	800291c <UART_WaitOnFlagUntilTimeout>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e00a      	b.n	8002910 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2270      	movs	r2, #112	; 0x70
 800290a:	2100      	movs	r1, #0
 800290c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b004      	add	sp, #16
 8002916:	bd80      	pop	{r7, pc}
 8002918:	01ffffff 	.word	0x01ffffff

0800291c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	1dfb      	adds	r3, r7, #7
 800292a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292c:	e029      	b.n	8002982 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	3301      	adds	r3, #1
 8002932:	d026      	beq.n	8002982 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002934:	f7fe f954 	bl	8000be0 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11b      	bne.n	8002982 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4915      	ldr	r1, [pc, #84]	; (80029ac <UART_WaitOnFlagUntilTimeout+0x90>)
 8002956:	400a      	ands	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	438a      	bics	r2, r1
 8002968:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2270      	movs	r2, #112	; 0x70
 800297a:	2100      	movs	r1, #0
 800297c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e00f      	b.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	425a      	negs	r2, r3
 8002992:	4153      	adcs	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	001a      	movs	r2, r3
 8002998:	1dfb      	adds	r3, r7, #7
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d0c6      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	fffffe5f 	.word	0xfffffe5f

080029b0 <__errno>:
 80029b0:	4b01      	ldr	r3, [pc, #4]	; (80029b8 <__errno+0x8>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	4770      	bx	lr
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	20000004 	.word	0x20000004

080029bc <__libc_init_array>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	2600      	movs	r6, #0
 80029c0:	4d0c      	ldr	r5, [pc, #48]	; (80029f4 <__libc_init_array+0x38>)
 80029c2:	4c0d      	ldr	r4, [pc, #52]	; (80029f8 <__libc_init_array+0x3c>)
 80029c4:	1b64      	subs	r4, r4, r5
 80029c6:	10a4      	asrs	r4, r4, #2
 80029c8:	42a6      	cmp	r6, r4
 80029ca:	d109      	bne.n	80029e0 <__libc_init_array+0x24>
 80029cc:	2600      	movs	r6, #0
 80029ce:	f000 ff39 	bl	8003844 <_init>
 80029d2:	4d0a      	ldr	r5, [pc, #40]	; (80029fc <__libc_init_array+0x40>)
 80029d4:	4c0a      	ldr	r4, [pc, #40]	; (8002a00 <__libc_init_array+0x44>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	42a6      	cmp	r6, r4
 80029dc:	d105      	bne.n	80029ea <__libc_init_array+0x2e>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	00b3      	lsls	r3, r6, #2
 80029e2:	58eb      	ldr	r3, [r5, r3]
 80029e4:	4798      	blx	r3
 80029e6:	3601      	adds	r6, #1
 80029e8:	e7ee      	b.n	80029c8 <__libc_init_array+0xc>
 80029ea:	00b3      	lsls	r3, r6, #2
 80029ec:	58eb      	ldr	r3, [r5, r3]
 80029ee:	4798      	blx	r3
 80029f0:	3601      	adds	r6, #1
 80029f2:	e7f2      	b.n	80029da <__libc_init_array+0x1e>
 80029f4:	08003998 	.word	0x08003998
 80029f8:	08003998 	.word	0x08003998
 80029fc:	08003998 	.word	0x08003998
 8002a00:	0800399c 	.word	0x0800399c

08002a04 <memset>:
 8002a04:	0003      	movs	r3, r0
 8002a06:	1812      	adds	r2, r2, r0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	7019      	strb	r1, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <iprintf>:
 8002a14:	b40f      	push	{r0, r1, r2, r3}
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <iprintf+0x30>)
 8002a18:	b513      	push	{r0, r1, r4, lr}
 8002a1a:	681c      	ldr	r4, [r3, #0]
 8002a1c:	2c00      	cmp	r4, #0
 8002a1e:	d005      	beq.n	8002a2c <iprintf+0x18>
 8002a20:	69a3      	ldr	r3, [r4, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <iprintf+0x18>
 8002a26:	0020      	movs	r0, r4
 8002a28:	f000 f850 	bl	8002acc <__sinit>
 8002a2c:	ab05      	add	r3, sp, #20
 8002a2e:	9a04      	ldr	r2, [sp, #16]
 8002a30:	68a1      	ldr	r1, [r4, #8]
 8002a32:	0020      	movs	r0, r4
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	f000 f963 	bl	8002d00 <_vfiprintf_r>
 8002a3a:	bc16      	pop	{r1, r2, r4}
 8002a3c:	bc08      	pop	{r3}
 8002a3e:	b004      	add	sp, #16
 8002a40:	4718      	bx	r3
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	20000004 	.word	0x20000004

08002a48 <std>:
 8002a48:	2300      	movs	r3, #0
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	0004      	movs	r4, r0
 8002a4e:	6003      	str	r3, [r0, #0]
 8002a50:	6043      	str	r3, [r0, #4]
 8002a52:	6083      	str	r3, [r0, #8]
 8002a54:	8181      	strh	r1, [r0, #12]
 8002a56:	6643      	str	r3, [r0, #100]	; 0x64
 8002a58:	81c2      	strh	r2, [r0, #14]
 8002a5a:	6103      	str	r3, [r0, #16]
 8002a5c:	6143      	str	r3, [r0, #20]
 8002a5e:	6183      	str	r3, [r0, #24]
 8002a60:	0019      	movs	r1, r3
 8002a62:	2208      	movs	r2, #8
 8002a64:	305c      	adds	r0, #92	; 0x5c
 8002a66:	f7ff ffcd 	bl	8002a04 <memset>
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <std+0x38>)
 8002a6c:	6224      	str	r4, [r4, #32]
 8002a6e:	6263      	str	r3, [r4, #36]	; 0x24
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <std+0x3c>)
 8002a72:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <std+0x40>)
 8002a76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <std+0x44>)
 8002a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a7c:	bd10      	pop	{r4, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	0800323d 	.word	0x0800323d
 8002a84:	08003265 	.word	0x08003265
 8002a88:	0800329d 	.word	0x0800329d
 8002a8c:	080032c9 	.word	0x080032c9

08002a90 <_cleanup_r>:
 8002a90:	b510      	push	{r4, lr}
 8002a92:	4902      	ldr	r1, [pc, #8]	; (8002a9c <_cleanup_r+0xc>)
 8002a94:	f000 f88c 	bl	8002bb0 <_fwalk_reent>
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	080035cd 	.word	0x080035cd

08002aa0 <__sfmoreglue>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	2568      	movs	r5, #104	; 0x68
 8002aa4:	1e4a      	subs	r2, r1, #1
 8002aa6:	4355      	muls	r5, r2
 8002aa8:	000e      	movs	r6, r1
 8002aaa:	0029      	movs	r1, r5
 8002aac:	3174      	adds	r1, #116	; 0x74
 8002aae:	f000 f8a1 	bl	8002bf4 <_malloc_r>
 8002ab2:	1e04      	subs	r4, r0, #0
 8002ab4:	d008      	beq.n	8002ac8 <__sfmoreglue+0x28>
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	002a      	movs	r2, r5
 8002aba:	6001      	str	r1, [r0, #0]
 8002abc:	6046      	str	r6, [r0, #4]
 8002abe:	300c      	adds	r0, #12
 8002ac0:	60a0      	str	r0, [r4, #8]
 8002ac2:	3268      	adds	r2, #104	; 0x68
 8002ac4:	f7ff ff9e 	bl	8002a04 <memset>
 8002ac8:	0020      	movs	r0, r4
 8002aca:	bd70      	pop	{r4, r5, r6, pc}

08002acc <__sinit>:
 8002acc:	6983      	ldr	r3, [r0, #24]
 8002ace:	b513      	push	{r0, r1, r4, lr}
 8002ad0:	0004      	movs	r4, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d128      	bne.n	8002b28 <__sinit+0x5c>
 8002ad6:	6483      	str	r3, [r0, #72]	; 0x48
 8002ad8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002ada:	6503      	str	r3, [r0, #80]	; 0x50
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <__sinit+0x60>)
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <__sinit+0x64>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6282      	str	r2, [r0, #40]	; 0x28
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d101      	bne.n	8002aee <__sinit+0x22>
 8002aea:	2301      	movs	r3, #1
 8002aec:	6183      	str	r3, [r0, #24]
 8002aee:	0020      	movs	r0, r4
 8002af0:	f000 f820 	bl	8002b34 <__sfp>
 8002af4:	6060      	str	r0, [r4, #4]
 8002af6:	0020      	movs	r0, r4
 8002af8:	f000 f81c 	bl	8002b34 <__sfp>
 8002afc:	60a0      	str	r0, [r4, #8]
 8002afe:	0020      	movs	r0, r4
 8002b00:	f000 f818 	bl	8002b34 <__sfp>
 8002b04:	2200      	movs	r2, #0
 8002b06:	60e0      	str	r0, [r4, #12]
 8002b08:	2104      	movs	r1, #4
 8002b0a:	6860      	ldr	r0, [r4, #4]
 8002b0c:	f7ff ff9c 	bl	8002a48 <std>
 8002b10:	2201      	movs	r2, #1
 8002b12:	2109      	movs	r1, #9
 8002b14:	68a0      	ldr	r0, [r4, #8]
 8002b16:	f7ff ff97 	bl	8002a48 <std>
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	2112      	movs	r1, #18
 8002b1e:	68e0      	ldr	r0, [r4, #12]
 8002b20:	f7ff ff92 	bl	8002a48 <std>
 8002b24:	2301      	movs	r3, #1
 8002b26:	61a3      	str	r3, [r4, #24]
 8002b28:	bd13      	pop	{r0, r1, r4, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	080038f8 	.word	0x080038f8
 8002b30:	08002a91 	.word	0x08002a91

08002b34 <__sfp>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <__sfp+0x74>)
 8002b38:	0007      	movs	r7, r0
 8002b3a:	681e      	ldr	r6, [r3, #0]
 8002b3c:	69b3      	ldr	r3, [r6, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <__sfp+0x14>
 8002b42:	0030      	movs	r0, r6
 8002b44:	f7ff ffc2 	bl	8002acc <__sinit>
 8002b48:	3648      	adds	r6, #72	; 0x48
 8002b4a:	68b4      	ldr	r4, [r6, #8]
 8002b4c:	6873      	ldr	r3, [r6, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	d504      	bpl.n	8002b5c <__sfp+0x28>
 8002b52:	6833      	ldr	r3, [r6, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <__sfp+0x34>
 8002b58:	6836      	ldr	r6, [r6, #0]
 8002b5a:	e7f6      	b.n	8002b4a <__sfp+0x16>
 8002b5c:	220c      	movs	r2, #12
 8002b5e:	5ea5      	ldrsh	r5, [r4, r2]
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	d00d      	beq.n	8002b80 <__sfp+0x4c>
 8002b64:	3468      	adds	r4, #104	; 0x68
 8002b66:	e7f2      	b.n	8002b4e <__sfp+0x1a>
 8002b68:	2104      	movs	r1, #4
 8002b6a:	0038      	movs	r0, r7
 8002b6c:	f7ff ff98 	bl	8002aa0 <__sfmoreglue>
 8002b70:	6030      	str	r0, [r6, #0]
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d1f0      	bne.n	8002b58 <__sfp+0x24>
 8002b76:	230c      	movs	r3, #12
 8002b78:	0004      	movs	r4, r0
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	0020      	movs	r0, r4
 8002b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b80:	0020      	movs	r0, r4
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <__sfp+0x78>)
 8002b84:	6665      	str	r5, [r4, #100]	; 0x64
 8002b86:	6025      	str	r5, [r4, #0]
 8002b88:	6065      	str	r5, [r4, #4]
 8002b8a:	60a5      	str	r5, [r4, #8]
 8002b8c:	60e3      	str	r3, [r4, #12]
 8002b8e:	6125      	str	r5, [r4, #16]
 8002b90:	6165      	str	r5, [r4, #20]
 8002b92:	61a5      	str	r5, [r4, #24]
 8002b94:	2208      	movs	r2, #8
 8002b96:	0029      	movs	r1, r5
 8002b98:	305c      	adds	r0, #92	; 0x5c
 8002b9a:	f7ff ff33 	bl	8002a04 <memset>
 8002b9e:	6365      	str	r5, [r4, #52]	; 0x34
 8002ba0:	63a5      	str	r5, [r4, #56]	; 0x38
 8002ba2:	64a5      	str	r5, [r4, #72]	; 0x48
 8002ba4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002ba6:	e7e9      	b.n	8002b7c <__sfp+0x48>
 8002ba8:	080038f8 	.word	0x080038f8
 8002bac:	ffff0001 	.word	0xffff0001

08002bb0 <_fwalk_reent>:
 8002bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bb2:	0004      	movs	r4, r0
 8002bb4:	0007      	movs	r7, r0
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	9101      	str	r1, [sp, #4]
 8002bba:	3448      	adds	r4, #72	; 0x48
 8002bbc:	2c00      	cmp	r4, #0
 8002bbe:	d101      	bne.n	8002bc4 <_fwalk_reent+0x14>
 8002bc0:	0030      	movs	r0, r6
 8002bc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bc4:	6863      	ldr	r3, [r4, #4]
 8002bc6:	68a5      	ldr	r5, [r4, #8]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	9b00      	ldr	r3, [sp, #0]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	d501      	bpl.n	8002bd6 <_fwalk_reent+0x26>
 8002bd2:	6824      	ldr	r4, [r4, #0]
 8002bd4:	e7f2      	b.n	8002bbc <_fwalk_reent+0xc>
 8002bd6:	89ab      	ldrh	r3, [r5, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d908      	bls.n	8002bee <_fwalk_reent+0x3e>
 8002bdc:	220e      	movs	r2, #14
 8002bde:	5eab      	ldrsh	r3, [r5, r2]
 8002be0:	3301      	adds	r3, #1
 8002be2:	d004      	beq.n	8002bee <_fwalk_reent+0x3e>
 8002be4:	0029      	movs	r1, r5
 8002be6:	0038      	movs	r0, r7
 8002be8:	9b01      	ldr	r3, [sp, #4]
 8002bea:	4798      	blx	r3
 8002bec:	4306      	orrs	r6, r0
 8002bee:	3568      	adds	r5, #104	; 0x68
 8002bf0:	e7eb      	b.n	8002bca <_fwalk_reent+0x1a>
	...

08002bf4 <_malloc_r>:
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	b570      	push	{r4, r5, r6, lr}
 8002bf8:	1ccd      	adds	r5, r1, #3
 8002bfa:	439d      	bics	r5, r3
 8002bfc:	3508      	adds	r5, #8
 8002bfe:	0006      	movs	r6, r0
 8002c00:	2d0c      	cmp	r5, #12
 8002c02:	d21e      	bcs.n	8002c42 <_malloc_r+0x4e>
 8002c04:	250c      	movs	r5, #12
 8002c06:	42a9      	cmp	r1, r5
 8002c08:	d81d      	bhi.n	8002c46 <_malloc_r+0x52>
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	f000 fd95 	bl	800373a <__malloc_lock>
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <_malloc_r+0xb4>)
 8002c12:	6814      	ldr	r4, [r2, #0]
 8002c14:	0021      	movs	r1, r4
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d119      	bne.n	8002c4e <_malloc_r+0x5a>
 8002c1a:	4c24      	ldr	r4, [pc, #144]	; (8002cac <_malloc_r+0xb8>)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <_malloc_r+0x36>
 8002c22:	0030      	movs	r0, r6
 8002c24:	f000 faf8 	bl	8003218 <_sbrk_r>
 8002c28:	6020      	str	r0, [r4, #0]
 8002c2a:	0029      	movs	r1, r5
 8002c2c:	0030      	movs	r0, r6
 8002c2e:	f000 faf3 	bl	8003218 <_sbrk_r>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d12b      	bne.n	8002c8e <_malloc_r+0x9a>
 8002c36:	230c      	movs	r3, #12
 8002c38:	0030      	movs	r0, r6
 8002c3a:	6033      	str	r3, [r6, #0]
 8002c3c:	f000 fd7e 	bl	800373c <__malloc_unlock>
 8002c40:	e003      	b.n	8002c4a <_malloc_r+0x56>
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	dadf      	bge.n	8002c06 <_malloc_r+0x12>
 8002c46:	230c      	movs	r3, #12
 8002c48:	6033      	str	r3, [r6, #0]
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	680b      	ldr	r3, [r1, #0]
 8002c50:	1b5b      	subs	r3, r3, r5
 8002c52:	d419      	bmi.n	8002c88 <_malloc_r+0x94>
 8002c54:	2b0b      	cmp	r3, #11
 8002c56:	d903      	bls.n	8002c60 <_malloc_r+0x6c>
 8002c58:	600b      	str	r3, [r1, #0]
 8002c5a:	18cc      	adds	r4, r1, r3
 8002c5c:	6025      	str	r5, [r4, #0]
 8002c5e:	e003      	b.n	8002c68 <_malloc_r+0x74>
 8002c60:	684b      	ldr	r3, [r1, #4]
 8002c62:	428c      	cmp	r4, r1
 8002c64:	d10d      	bne.n	8002c82 <_malloc_r+0x8e>
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	0030      	movs	r0, r6
 8002c6a:	f000 fd67 	bl	800373c <__malloc_unlock>
 8002c6e:	0020      	movs	r0, r4
 8002c70:	2207      	movs	r2, #7
 8002c72:	300b      	adds	r0, #11
 8002c74:	1d23      	adds	r3, r4, #4
 8002c76:	4390      	bics	r0, r2
 8002c78:	1ac3      	subs	r3, r0, r3
 8002c7a:	d0e7      	beq.n	8002c4c <_malloc_r+0x58>
 8002c7c:	425a      	negs	r2, r3
 8002c7e:	50e2      	str	r2, [r4, r3]
 8002c80:	e7e4      	b.n	8002c4c <_malloc_r+0x58>
 8002c82:	6063      	str	r3, [r4, #4]
 8002c84:	000c      	movs	r4, r1
 8002c86:	e7ef      	b.n	8002c68 <_malloc_r+0x74>
 8002c88:	000c      	movs	r4, r1
 8002c8a:	6849      	ldr	r1, [r1, #4]
 8002c8c:	e7c3      	b.n	8002c16 <_malloc_r+0x22>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	1cc4      	adds	r4, r0, #3
 8002c92:	439c      	bics	r4, r3
 8002c94:	42a0      	cmp	r0, r4
 8002c96:	d0e1      	beq.n	8002c5c <_malloc_r+0x68>
 8002c98:	1a21      	subs	r1, r4, r0
 8002c9a:	0030      	movs	r0, r6
 8002c9c:	f000 fabc 	bl	8003218 <_sbrk_r>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d1db      	bne.n	8002c5c <_malloc_r+0x68>
 8002ca4:	e7c7      	b.n	8002c36 <_malloc_r+0x42>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20000088 	.word	0x20000088
 8002cac:	2000008c 	.word	0x2000008c

08002cb0 <__sfputc_r>:
 8002cb0:	6893      	ldr	r3, [r2, #8]
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	6093      	str	r3, [r2, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da04      	bge.n	8002cc6 <__sfputc_r+0x16>
 8002cbc:	6994      	ldr	r4, [r2, #24]
 8002cbe:	42a3      	cmp	r3, r4
 8002cc0:	db07      	blt.n	8002cd2 <__sfputc_r+0x22>
 8002cc2:	290a      	cmp	r1, #10
 8002cc4:	d005      	beq.n	8002cd2 <__sfputc_r+0x22>
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	1c58      	adds	r0, r3, #1
 8002cca:	6010      	str	r0, [r2, #0]
 8002ccc:	7019      	strb	r1, [r3, #0]
 8002cce:	0008      	movs	r0, r1
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	f000 faff 	bl	80032d4 <__swbuf_r>
 8002cd6:	0001      	movs	r1, r0
 8002cd8:	e7f9      	b.n	8002cce <__sfputc_r+0x1e>

08002cda <__sfputs_r>:
 8002cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cdc:	0006      	movs	r6, r0
 8002cde:	000f      	movs	r7, r1
 8002ce0:	0014      	movs	r4, r2
 8002ce2:	18d5      	adds	r5, r2, r3
 8002ce4:	42ac      	cmp	r4, r5
 8002ce6:	d101      	bne.n	8002cec <__sfputs_r+0x12>
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e007      	b.n	8002cfc <__sfputs_r+0x22>
 8002cec:	7821      	ldrb	r1, [r4, #0]
 8002cee:	003a      	movs	r2, r7
 8002cf0:	0030      	movs	r0, r6
 8002cf2:	f7ff ffdd 	bl	8002cb0 <__sfputc_r>
 8002cf6:	3401      	adds	r4, #1
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d1f3      	bne.n	8002ce4 <__sfputs_r+0xa>
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d00 <_vfiprintf_r>:
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b0a1      	sub	sp, #132	; 0x84
 8002d04:	9003      	str	r0, [sp, #12]
 8002d06:	000f      	movs	r7, r1
 8002d08:	0016      	movs	r6, r2
 8002d0a:	001d      	movs	r5, r3
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d005      	beq.n	8002d1c <_vfiprintf_r+0x1c>
 8002d10:	6983      	ldr	r3, [r0, #24]
 8002d12:	9305      	str	r3, [sp, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <_vfiprintf_r+0x1c>
 8002d18:	f7ff fed8 	bl	8002acc <__sinit>
 8002d1c:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <_vfiprintf_r+0x20c>)
 8002d1e:	429f      	cmp	r7, r3
 8002d20:	d15c      	bne.n	8002ddc <_vfiprintf_r+0xdc>
 8002d22:	9b03      	ldr	r3, [sp, #12]
 8002d24:	685f      	ldr	r7, [r3, #4]
 8002d26:	89bb      	ldrh	r3, [r7, #12]
 8002d28:	071b      	lsls	r3, r3, #28
 8002d2a:	d563      	bpl.n	8002df4 <_vfiprintf_r+0xf4>
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d060      	beq.n	8002df4 <_vfiprintf_r+0xf4>
 8002d32:	2300      	movs	r3, #0
 8002d34:	ac08      	add	r4, sp, #32
 8002d36:	6163      	str	r3, [r4, #20]
 8002d38:	3320      	adds	r3, #32
 8002d3a:	7663      	strb	r3, [r4, #25]
 8002d3c:	3310      	adds	r3, #16
 8002d3e:	76a3      	strb	r3, [r4, #26]
 8002d40:	9507      	str	r5, [sp, #28]
 8002d42:	0035      	movs	r5, r6
 8002d44:	782b      	ldrb	r3, [r5, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <_vfiprintf_r+0x4e>
 8002d4a:	2b25      	cmp	r3, #37	; 0x25
 8002d4c:	d15c      	bne.n	8002e08 <_vfiprintf_r+0x108>
 8002d4e:	1bab      	subs	r3, r5, r6
 8002d50:	9305      	str	r3, [sp, #20]
 8002d52:	d00c      	beq.n	8002d6e <_vfiprintf_r+0x6e>
 8002d54:	0032      	movs	r2, r6
 8002d56:	0039      	movs	r1, r7
 8002d58:	9803      	ldr	r0, [sp, #12]
 8002d5a:	f7ff ffbe 	bl	8002cda <__sfputs_r>
 8002d5e:	1c43      	adds	r3, r0, #1
 8002d60:	d100      	bne.n	8002d64 <_vfiprintf_r+0x64>
 8002d62:	e0c4      	b.n	8002eee <_vfiprintf_r+0x1ee>
 8002d64:	6962      	ldr	r2, [r4, #20]
 8002d66:	9b05      	ldr	r3, [sp, #20]
 8002d68:	4694      	mov	ip, r2
 8002d6a:	4463      	add	r3, ip
 8002d6c:	6163      	str	r3, [r4, #20]
 8002d6e:	782b      	ldrb	r3, [r5, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <_vfiprintf_r+0x76>
 8002d74:	e0bb      	b.n	8002eee <_vfiprintf_r+0x1ee>
 8002d76:	2201      	movs	r2, #1
 8002d78:	2300      	movs	r3, #0
 8002d7a:	4252      	negs	r2, r2
 8002d7c:	6062      	str	r2, [r4, #4]
 8002d7e:	a904      	add	r1, sp, #16
 8002d80:	3254      	adds	r2, #84	; 0x54
 8002d82:	1852      	adds	r2, r2, r1
 8002d84:	1c6e      	adds	r6, r5, #1
 8002d86:	6023      	str	r3, [r4, #0]
 8002d88:	60e3      	str	r3, [r4, #12]
 8002d8a:	60a3      	str	r3, [r4, #8]
 8002d8c:	7013      	strb	r3, [r2, #0]
 8002d8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d90:	7831      	ldrb	r1, [r6, #0]
 8002d92:	2205      	movs	r2, #5
 8002d94:	485e      	ldr	r0, [pc, #376]	; (8002f10 <_vfiprintf_r+0x210>)
 8002d96:	f000 fcc5 	bl	8003724 <memchr>
 8002d9a:	1c75      	adds	r5, r6, #1
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d135      	bne.n	8002e0c <_vfiprintf_r+0x10c>
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	06d3      	lsls	r3, r2, #27
 8002da4:	d504      	bpl.n	8002db0 <_vfiprintf_r+0xb0>
 8002da6:	2353      	movs	r3, #83	; 0x53
 8002da8:	a904      	add	r1, sp, #16
 8002daa:	185b      	adds	r3, r3, r1
 8002dac:	2120      	movs	r1, #32
 8002dae:	7019      	strb	r1, [r3, #0]
 8002db0:	0713      	lsls	r3, r2, #28
 8002db2:	d504      	bpl.n	8002dbe <_vfiprintf_r+0xbe>
 8002db4:	2353      	movs	r3, #83	; 0x53
 8002db6:	a904      	add	r1, sp, #16
 8002db8:	185b      	adds	r3, r3, r1
 8002dba:	212b      	movs	r1, #43	; 0x2b
 8002dbc:	7019      	strb	r1, [r3, #0]
 8002dbe:	7833      	ldrb	r3, [r6, #0]
 8002dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc2:	d02c      	beq.n	8002e1e <_vfiprintf_r+0x11e>
 8002dc4:	0035      	movs	r5, r6
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	200a      	movs	r0, #10
 8002dca:	68e3      	ldr	r3, [r4, #12]
 8002dcc:	782a      	ldrb	r2, [r5, #0]
 8002dce:	1c6e      	adds	r6, r5, #1
 8002dd0:	3a30      	subs	r2, #48	; 0x30
 8002dd2:	2a09      	cmp	r2, #9
 8002dd4:	d964      	bls.n	8002ea0 <_vfiprintf_r+0x1a0>
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	d02e      	beq.n	8002e38 <_vfiprintf_r+0x138>
 8002dda:	e026      	b.n	8002e2a <_vfiprintf_r+0x12a>
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <_vfiprintf_r+0x214>)
 8002dde:	429f      	cmp	r7, r3
 8002de0:	d102      	bne.n	8002de8 <_vfiprintf_r+0xe8>
 8002de2:	9b03      	ldr	r3, [sp, #12]
 8002de4:	689f      	ldr	r7, [r3, #8]
 8002de6:	e79e      	b.n	8002d26 <_vfiprintf_r+0x26>
 8002de8:	4b4b      	ldr	r3, [pc, #300]	; (8002f18 <_vfiprintf_r+0x218>)
 8002dea:	429f      	cmp	r7, r3
 8002dec:	d19b      	bne.n	8002d26 <_vfiprintf_r+0x26>
 8002dee:	9b03      	ldr	r3, [sp, #12]
 8002df0:	68df      	ldr	r7, [r3, #12]
 8002df2:	e798      	b.n	8002d26 <_vfiprintf_r+0x26>
 8002df4:	0039      	movs	r1, r7
 8002df6:	9803      	ldr	r0, [sp, #12]
 8002df8:	f000 fad6 	bl	80033a8 <__swsetup_r>
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d098      	beq.n	8002d32 <_vfiprintf_r+0x32>
 8002e00:	2001      	movs	r0, #1
 8002e02:	4240      	negs	r0, r0
 8002e04:	b021      	add	sp, #132	; 0x84
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e08:	3501      	adds	r5, #1
 8002e0a:	e79b      	b.n	8002d44 <_vfiprintf_r+0x44>
 8002e0c:	4b40      	ldr	r3, [pc, #256]	; (8002f10 <_vfiprintf_r+0x210>)
 8002e0e:	6822      	ldr	r2, [r4, #0]
 8002e10:	1ac0      	subs	r0, r0, r3
 8002e12:	2301      	movs	r3, #1
 8002e14:	4083      	lsls	r3, r0
 8002e16:	4313      	orrs	r3, r2
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	002e      	movs	r6, r5
 8002e1c:	e7b8      	b.n	8002d90 <_vfiprintf_r+0x90>
 8002e1e:	9b07      	ldr	r3, [sp, #28]
 8002e20:	1d19      	adds	r1, r3, #4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	9107      	str	r1, [sp, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db01      	blt.n	8002e2e <_vfiprintf_r+0x12e>
 8002e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e2c:	e004      	b.n	8002e38 <_vfiprintf_r+0x138>
 8002e2e:	425b      	negs	r3, r3
 8002e30:	60e3      	str	r3, [r4, #12]
 8002e32:	2302      	movs	r3, #2
 8002e34:	4313      	orrs	r3, r2
 8002e36:	6023      	str	r3, [r4, #0]
 8002e38:	782b      	ldrb	r3, [r5, #0]
 8002e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e3c:	d10a      	bne.n	8002e54 <_vfiprintf_r+0x154>
 8002e3e:	786b      	ldrb	r3, [r5, #1]
 8002e40:	2b2a      	cmp	r3, #42	; 0x2a
 8002e42:	d135      	bne.n	8002eb0 <_vfiprintf_r+0x1b0>
 8002e44:	9b07      	ldr	r3, [sp, #28]
 8002e46:	3502      	adds	r5, #2
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	9207      	str	r2, [sp, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db2b      	blt.n	8002eaa <_vfiprintf_r+0x1aa>
 8002e52:	9309      	str	r3, [sp, #36]	; 0x24
 8002e54:	4e31      	ldr	r6, [pc, #196]	; (8002f1c <_vfiprintf_r+0x21c>)
 8002e56:	7829      	ldrb	r1, [r5, #0]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	0030      	movs	r0, r6
 8002e5c:	f000 fc62 	bl	8003724 <memchr>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d006      	beq.n	8002e72 <_vfiprintf_r+0x172>
 8002e64:	2340      	movs	r3, #64	; 0x40
 8002e66:	1b80      	subs	r0, r0, r6
 8002e68:	4083      	lsls	r3, r0
 8002e6a:	6822      	ldr	r2, [r4, #0]
 8002e6c:	3501      	adds	r5, #1
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	6023      	str	r3, [r4, #0]
 8002e72:	7829      	ldrb	r1, [r5, #0]
 8002e74:	2206      	movs	r2, #6
 8002e76:	482a      	ldr	r0, [pc, #168]	; (8002f20 <_vfiprintf_r+0x220>)
 8002e78:	1c6e      	adds	r6, r5, #1
 8002e7a:	7621      	strb	r1, [r4, #24]
 8002e7c:	f000 fc52 	bl	8003724 <memchr>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d03a      	beq.n	8002efa <_vfiprintf_r+0x1fa>
 8002e84:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <_vfiprintf_r+0x224>)
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d125      	bne.n	8002ed6 <_vfiprintf_r+0x1d6>
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	9b07      	ldr	r3, [sp, #28]
 8002e8e:	3307      	adds	r3, #7
 8002e90:	4393      	bics	r3, r2
 8002e92:	3308      	adds	r3, #8
 8002e94:	9307      	str	r3, [sp, #28]
 8002e96:	6963      	ldr	r3, [r4, #20]
 8002e98:	9a04      	ldr	r2, [sp, #16]
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	6163      	str	r3, [r4, #20]
 8002e9e:	e750      	b.n	8002d42 <_vfiprintf_r+0x42>
 8002ea0:	4343      	muls	r3, r0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	0035      	movs	r5, r6
 8002ea8:	e790      	b.n	8002dcc <_vfiprintf_r+0xcc>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	425b      	negs	r3, r3
 8002eae:	e7d0      	b.n	8002e52 <_vfiprintf_r+0x152>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	200a      	movs	r0, #10
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	3501      	adds	r5, #1
 8002eb8:	6063      	str	r3, [r4, #4]
 8002eba:	7829      	ldrb	r1, [r5, #0]
 8002ebc:	1c6e      	adds	r6, r5, #1
 8002ebe:	3930      	subs	r1, #48	; 0x30
 8002ec0:	2909      	cmp	r1, #9
 8002ec2:	d903      	bls.n	8002ecc <_vfiprintf_r+0x1cc>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0c5      	beq.n	8002e54 <_vfiprintf_r+0x154>
 8002ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8002eca:	e7c3      	b.n	8002e54 <_vfiprintf_r+0x154>
 8002ecc:	4342      	muls	r2, r0
 8002ece:	2301      	movs	r3, #1
 8002ed0:	1852      	adds	r2, r2, r1
 8002ed2:	0035      	movs	r5, r6
 8002ed4:	e7f1      	b.n	8002eba <_vfiprintf_r+0x1ba>
 8002ed6:	ab07      	add	r3, sp, #28
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	003a      	movs	r2, r7
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <_vfiprintf_r+0x228>)
 8002ede:	0021      	movs	r1, r4
 8002ee0:	9803      	ldr	r0, [sp, #12]
 8002ee2:	e000      	b.n	8002ee6 <_vfiprintf_r+0x1e6>
 8002ee4:	bf00      	nop
 8002ee6:	9004      	str	r0, [sp, #16]
 8002ee8:	9b04      	ldr	r3, [sp, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	d1d3      	bne.n	8002e96 <_vfiprintf_r+0x196>
 8002eee:	89bb      	ldrh	r3, [r7, #12]
 8002ef0:	065b      	lsls	r3, r3, #25
 8002ef2:	d500      	bpl.n	8002ef6 <_vfiprintf_r+0x1f6>
 8002ef4:	e784      	b.n	8002e00 <_vfiprintf_r+0x100>
 8002ef6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ef8:	e784      	b.n	8002e04 <_vfiprintf_r+0x104>
 8002efa:	ab07      	add	r3, sp, #28
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	003a      	movs	r2, r7
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <_vfiprintf_r+0x228>)
 8002f02:	0021      	movs	r1, r4
 8002f04:	9803      	ldr	r0, [sp, #12]
 8002f06:	f000 f87f 	bl	8003008 <_printf_i>
 8002f0a:	e7ec      	b.n	8002ee6 <_vfiprintf_r+0x1e6>
 8002f0c:	0800391c 	.word	0x0800391c
 8002f10:	0800395c 	.word	0x0800395c
 8002f14:	0800393c 	.word	0x0800393c
 8002f18:	080038fc 	.word	0x080038fc
 8002f1c:	08003962 	.word	0x08003962
 8002f20:	08003966 	.word	0x08003966
 8002f24:	00000000 	.word	0x00000000
 8002f28:	08002cdb 	.word	0x08002cdb

08002f2c <_printf_common>:
 8002f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f2e:	0015      	movs	r5, r2
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	688a      	ldr	r2, [r1, #8]
 8002f34:	690b      	ldr	r3, [r1, #16]
 8002f36:	9000      	str	r0, [sp, #0]
 8002f38:	000c      	movs	r4, r1
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	da00      	bge.n	8002f40 <_printf_common+0x14>
 8002f3e:	0013      	movs	r3, r2
 8002f40:	0022      	movs	r2, r4
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	3243      	adds	r2, #67	; 0x43
 8002f46:	7812      	ldrb	r2, [r2, #0]
 8002f48:	2a00      	cmp	r2, #0
 8002f4a:	d001      	beq.n	8002f50 <_printf_common+0x24>
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	602b      	str	r3, [r5, #0]
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	069b      	lsls	r3, r3, #26
 8002f54:	d502      	bpl.n	8002f5c <_printf_common+0x30>
 8002f56:	682b      	ldr	r3, [r5, #0]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	602b      	str	r3, [r5, #0]
 8002f5c:	2706      	movs	r7, #6
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	401f      	ands	r7, r3
 8002f62:	d027      	beq.n	8002fb4 <_printf_common+0x88>
 8002f64:	0023      	movs	r3, r4
 8002f66:	3343      	adds	r3, #67	; 0x43
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	1e5a      	subs	r2, r3, #1
 8002f6c:	4193      	sbcs	r3, r2
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	0692      	lsls	r2, r2, #26
 8002f72:	d430      	bmi.n	8002fd6 <_printf_common+0xaa>
 8002f74:	0022      	movs	r2, r4
 8002f76:	9901      	ldr	r1, [sp, #4]
 8002f78:	3243      	adds	r2, #67	; 0x43
 8002f7a:	9800      	ldr	r0, [sp, #0]
 8002f7c:	9e08      	ldr	r6, [sp, #32]
 8002f7e:	47b0      	blx	r6
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d025      	beq.n	8002fd0 <_printf_common+0xa4>
 8002f84:	2306      	movs	r3, #6
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	682a      	ldr	r2, [r5, #0]
 8002f8a:	68e1      	ldr	r1, [r4, #12]
 8002f8c:	4003      	ands	r3, r0
 8002f8e:	2500      	movs	r5, #0
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d103      	bne.n	8002f9c <_printf_common+0x70>
 8002f94:	1a8d      	subs	r5, r1, r2
 8002f96:	43eb      	mvns	r3, r5
 8002f98:	17db      	asrs	r3, r3, #31
 8002f9a:	401d      	ands	r5, r3
 8002f9c:	68a3      	ldr	r3, [r4, #8]
 8002f9e:	6922      	ldr	r2, [r4, #16]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	dd01      	ble.n	8002fa8 <_printf_common+0x7c>
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	18ed      	adds	r5, r5, r3
 8002fa8:	2700      	movs	r7, #0
 8002faa:	42bd      	cmp	r5, r7
 8002fac:	d120      	bne.n	8002ff0 <_printf_common+0xc4>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e010      	b.n	8002fd4 <_printf_common+0xa8>
 8002fb2:	3701      	adds	r7, #1
 8002fb4:	68e3      	ldr	r3, [r4, #12]
 8002fb6:	682a      	ldr	r2, [r5, #0]
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	42bb      	cmp	r3, r7
 8002fbc:	ddd2      	ble.n	8002f64 <_printf_common+0x38>
 8002fbe:	0022      	movs	r2, r4
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	3219      	adds	r2, #25
 8002fc4:	9901      	ldr	r1, [sp, #4]
 8002fc6:	9800      	ldr	r0, [sp, #0]
 8002fc8:	9e08      	ldr	r6, [sp, #32]
 8002fca:	47b0      	blx	r6
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d1f0      	bne.n	8002fb2 <_printf_common+0x86>
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	4240      	negs	r0, r0
 8002fd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fd6:	2030      	movs	r0, #48	; 0x30
 8002fd8:	18e1      	adds	r1, r4, r3
 8002fda:	3143      	adds	r1, #67	; 0x43
 8002fdc:	7008      	strb	r0, [r1, #0]
 8002fde:	0021      	movs	r1, r4
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	3145      	adds	r1, #69	; 0x45
 8002fe4:	7809      	ldrb	r1, [r1, #0]
 8002fe6:	18a2      	adds	r2, r4, r2
 8002fe8:	3243      	adds	r2, #67	; 0x43
 8002fea:	3302      	adds	r3, #2
 8002fec:	7011      	strb	r1, [r2, #0]
 8002fee:	e7c1      	b.n	8002f74 <_printf_common+0x48>
 8002ff0:	0022      	movs	r2, r4
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	321a      	adds	r2, #26
 8002ff6:	9901      	ldr	r1, [sp, #4]
 8002ff8:	9800      	ldr	r0, [sp, #0]
 8002ffa:	9e08      	ldr	r6, [sp, #32]
 8002ffc:	47b0      	blx	r6
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	d0e6      	beq.n	8002fd0 <_printf_common+0xa4>
 8003002:	3701      	adds	r7, #1
 8003004:	e7d1      	b.n	8002faa <_printf_common+0x7e>
	...

08003008 <_printf_i>:
 8003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	9204      	str	r2, [sp, #16]
 800300e:	000a      	movs	r2, r1
 8003010:	3243      	adds	r2, #67	; 0x43
 8003012:	9305      	str	r3, [sp, #20]
 8003014:	9003      	str	r0, [sp, #12]
 8003016:	9202      	str	r2, [sp, #8]
 8003018:	7e0a      	ldrb	r2, [r1, #24]
 800301a:	000c      	movs	r4, r1
 800301c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800301e:	2a6e      	cmp	r2, #110	; 0x6e
 8003020:	d100      	bne.n	8003024 <_printf_i+0x1c>
 8003022:	e086      	b.n	8003132 <_printf_i+0x12a>
 8003024:	d81f      	bhi.n	8003066 <_printf_i+0x5e>
 8003026:	2a63      	cmp	r2, #99	; 0x63
 8003028:	d033      	beq.n	8003092 <_printf_i+0x8a>
 800302a:	d808      	bhi.n	800303e <_printf_i+0x36>
 800302c:	2a00      	cmp	r2, #0
 800302e:	d100      	bne.n	8003032 <_printf_i+0x2a>
 8003030:	e08c      	b.n	800314c <_printf_i+0x144>
 8003032:	2a58      	cmp	r2, #88	; 0x58
 8003034:	d04d      	beq.n	80030d2 <_printf_i+0xca>
 8003036:	0025      	movs	r5, r4
 8003038:	3542      	adds	r5, #66	; 0x42
 800303a:	702a      	strb	r2, [r5, #0]
 800303c:	e030      	b.n	80030a0 <_printf_i+0x98>
 800303e:	2a64      	cmp	r2, #100	; 0x64
 8003040:	d001      	beq.n	8003046 <_printf_i+0x3e>
 8003042:	2a69      	cmp	r2, #105	; 0x69
 8003044:	d1f7      	bne.n	8003036 <_printf_i+0x2e>
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	6825      	ldr	r5, [r4, #0]
 800304a:	1d0a      	adds	r2, r1, #4
 800304c:	0628      	lsls	r0, r5, #24
 800304e:	d529      	bpl.n	80030a4 <_printf_i+0x9c>
 8003050:	6808      	ldr	r0, [r1, #0]
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	2800      	cmp	r0, #0
 8003056:	da03      	bge.n	8003060 <_printf_i+0x58>
 8003058:	232d      	movs	r3, #45	; 0x2d
 800305a:	9a02      	ldr	r2, [sp, #8]
 800305c:	4240      	negs	r0, r0
 800305e:	7013      	strb	r3, [r2, #0]
 8003060:	4e6b      	ldr	r6, [pc, #428]	; (8003210 <_printf_i+0x208>)
 8003062:	270a      	movs	r7, #10
 8003064:	e04f      	b.n	8003106 <_printf_i+0xfe>
 8003066:	2a73      	cmp	r2, #115	; 0x73
 8003068:	d074      	beq.n	8003154 <_printf_i+0x14c>
 800306a:	d808      	bhi.n	800307e <_printf_i+0x76>
 800306c:	2a6f      	cmp	r2, #111	; 0x6f
 800306e:	d01f      	beq.n	80030b0 <_printf_i+0xa8>
 8003070:	2a70      	cmp	r2, #112	; 0x70
 8003072:	d1e0      	bne.n	8003036 <_printf_i+0x2e>
 8003074:	2220      	movs	r2, #32
 8003076:	6809      	ldr	r1, [r1, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	6022      	str	r2, [r4, #0]
 800307c:	e003      	b.n	8003086 <_printf_i+0x7e>
 800307e:	2a75      	cmp	r2, #117	; 0x75
 8003080:	d016      	beq.n	80030b0 <_printf_i+0xa8>
 8003082:	2a78      	cmp	r2, #120	; 0x78
 8003084:	d1d7      	bne.n	8003036 <_printf_i+0x2e>
 8003086:	0022      	movs	r2, r4
 8003088:	2178      	movs	r1, #120	; 0x78
 800308a:	3245      	adds	r2, #69	; 0x45
 800308c:	7011      	strb	r1, [r2, #0]
 800308e:	4e61      	ldr	r6, [pc, #388]	; (8003214 <_printf_i+0x20c>)
 8003090:	e022      	b.n	80030d8 <_printf_i+0xd0>
 8003092:	0025      	movs	r5, r4
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	3542      	adds	r5, #66	; 0x42
 8003098:	1d11      	adds	r1, r2, #4
 800309a:	6019      	str	r1, [r3, #0]
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	702b      	strb	r3, [r5, #0]
 80030a0:	2301      	movs	r3, #1
 80030a2:	e065      	b.n	8003170 <_printf_i+0x168>
 80030a4:	6808      	ldr	r0, [r1, #0]
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	0669      	lsls	r1, r5, #25
 80030aa:	d5d3      	bpl.n	8003054 <_printf_i+0x4c>
 80030ac:	b200      	sxth	r0, r0
 80030ae:	e7d1      	b.n	8003054 <_printf_i+0x4c>
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	6825      	ldr	r5, [r4, #0]
 80030b4:	1d08      	adds	r0, r1, #4
 80030b6:	6018      	str	r0, [r3, #0]
 80030b8:	6808      	ldr	r0, [r1, #0]
 80030ba:	062e      	lsls	r6, r5, #24
 80030bc:	d505      	bpl.n	80030ca <_printf_i+0xc2>
 80030be:	4e54      	ldr	r6, [pc, #336]	; (8003210 <_printf_i+0x208>)
 80030c0:	2708      	movs	r7, #8
 80030c2:	2a6f      	cmp	r2, #111	; 0x6f
 80030c4:	d01b      	beq.n	80030fe <_printf_i+0xf6>
 80030c6:	270a      	movs	r7, #10
 80030c8:	e019      	b.n	80030fe <_printf_i+0xf6>
 80030ca:	066d      	lsls	r5, r5, #25
 80030cc:	d5f7      	bpl.n	80030be <_printf_i+0xb6>
 80030ce:	b280      	uxth	r0, r0
 80030d0:	e7f5      	b.n	80030be <_printf_i+0xb6>
 80030d2:	3145      	adds	r1, #69	; 0x45
 80030d4:	4e4e      	ldr	r6, [pc, #312]	; (8003210 <_printf_i+0x208>)
 80030d6:	700a      	strb	r2, [r1, #0]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	1d01      	adds	r1, r0, #4
 80030de:	6800      	ldr	r0, [r0, #0]
 80030e0:	6019      	str	r1, [r3, #0]
 80030e2:	0615      	lsls	r5, r2, #24
 80030e4:	d521      	bpl.n	800312a <_printf_i+0x122>
 80030e6:	07d3      	lsls	r3, r2, #31
 80030e8:	d502      	bpl.n	80030f0 <_printf_i+0xe8>
 80030ea:	2320      	movs	r3, #32
 80030ec:	431a      	orrs	r2, r3
 80030ee:	6022      	str	r2, [r4, #0]
 80030f0:	2710      	movs	r7, #16
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d103      	bne.n	80030fe <_printf_i+0xf6>
 80030f6:	2320      	movs	r3, #32
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	439a      	bics	r2, r3
 80030fc:	6022      	str	r2, [r4, #0]
 80030fe:	0023      	movs	r3, r4
 8003100:	2200      	movs	r2, #0
 8003102:	3343      	adds	r3, #67	; 0x43
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	6863      	ldr	r3, [r4, #4]
 8003108:	60a3      	str	r3, [r4, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	db58      	blt.n	80031c0 <_printf_i+0x1b8>
 800310e:	2204      	movs	r2, #4
 8003110:	6821      	ldr	r1, [r4, #0]
 8003112:	4391      	bics	r1, r2
 8003114:	6021      	str	r1, [r4, #0]
 8003116:	2800      	cmp	r0, #0
 8003118:	d154      	bne.n	80031c4 <_printf_i+0x1bc>
 800311a:	9d02      	ldr	r5, [sp, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05a      	beq.n	80031d6 <_printf_i+0x1ce>
 8003120:	0025      	movs	r5, r4
 8003122:	7833      	ldrb	r3, [r6, #0]
 8003124:	3542      	adds	r5, #66	; 0x42
 8003126:	702b      	strb	r3, [r5, #0]
 8003128:	e055      	b.n	80031d6 <_printf_i+0x1ce>
 800312a:	0655      	lsls	r5, r2, #25
 800312c:	d5db      	bpl.n	80030e6 <_printf_i+0xde>
 800312e:	b280      	uxth	r0, r0
 8003130:	e7d9      	b.n	80030e6 <_printf_i+0xde>
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	680d      	ldr	r5, [r1, #0]
 8003136:	1d10      	adds	r0, r2, #4
 8003138:	6949      	ldr	r1, [r1, #20]
 800313a:	6018      	str	r0, [r3, #0]
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	062e      	lsls	r6, r5, #24
 8003140:	d501      	bpl.n	8003146 <_printf_i+0x13e>
 8003142:	6019      	str	r1, [r3, #0]
 8003144:	e002      	b.n	800314c <_printf_i+0x144>
 8003146:	066d      	lsls	r5, r5, #25
 8003148:	d5fb      	bpl.n	8003142 <_printf_i+0x13a>
 800314a:	8019      	strh	r1, [r3, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	9d02      	ldr	r5, [sp, #8]
 8003150:	6123      	str	r3, [r4, #16]
 8003152:	e04f      	b.n	80031f4 <_printf_i+0x1ec>
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	1d11      	adds	r1, r2, #4
 8003158:	6019      	str	r1, [r3, #0]
 800315a:	6815      	ldr	r5, [r2, #0]
 800315c:	2100      	movs	r1, #0
 800315e:	6862      	ldr	r2, [r4, #4]
 8003160:	0028      	movs	r0, r5
 8003162:	f000 fadf 	bl	8003724 <memchr>
 8003166:	2800      	cmp	r0, #0
 8003168:	d001      	beq.n	800316e <_printf_i+0x166>
 800316a:	1b40      	subs	r0, r0, r5
 800316c:	6060      	str	r0, [r4, #4]
 800316e:	6863      	ldr	r3, [r4, #4]
 8003170:	6123      	str	r3, [r4, #16]
 8003172:	2300      	movs	r3, #0
 8003174:	9a02      	ldr	r2, [sp, #8]
 8003176:	7013      	strb	r3, [r2, #0]
 8003178:	e03c      	b.n	80031f4 <_printf_i+0x1ec>
 800317a:	6923      	ldr	r3, [r4, #16]
 800317c:	002a      	movs	r2, r5
 800317e:	9904      	ldr	r1, [sp, #16]
 8003180:	9803      	ldr	r0, [sp, #12]
 8003182:	9d05      	ldr	r5, [sp, #20]
 8003184:	47a8      	blx	r5
 8003186:	1c43      	adds	r3, r0, #1
 8003188:	d03e      	beq.n	8003208 <_printf_i+0x200>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	079b      	lsls	r3, r3, #30
 800318e:	d415      	bmi.n	80031bc <_printf_i+0x1b4>
 8003190:	9b07      	ldr	r3, [sp, #28]
 8003192:	68e0      	ldr	r0, [r4, #12]
 8003194:	4298      	cmp	r0, r3
 8003196:	da39      	bge.n	800320c <_printf_i+0x204>
 8003198:	0018      	movs	r0, r3
 800319a:	e037      	b.n	800320c <_printf_i+0x204>
 800319c:	0022      	movs	r2, r4
 800319e:	2301      	movs	r3, #1
 80031a0:	3219      	adds	r2, #25
 80031a2:	9904      	ldr	r1, [sp, #16]
 80031a4:	9803      	ldr	r0, [sp, #12]
 80031a6:	9e05      	ldr	r6, [sp, #20]
 80031a8:	47b0      	blx	r6
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	d02c      	beq.n	8003208 <_printf_i+0x200>
 80031ae:	3501      	adds	r5, #1
 80031b0:	68e3      	ldr	r3, [r4, #12]
 80031b2:	9a07      	ldr	r2, [sp, #28]
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	42ab      	cmp	r3, r5
 80031b8:	dcf0      	bgt.n	800319c <_printf_i+0x194>
 80031ba:	e7e9      	b.n	8003190 <_printf_i+0x188>
 80031bc:	2500      	movs	r5, #0
 80031be:	e7f7      	b.n	80031b0 <_printf_i+0x1a8>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d0ad      	beq.n	8003120 <_printf_i+0x118>
 80031c4:	9d02      	ldr	r5, [sp, #8]
 80031c6:	0039      	movs	r1, r7
 80031c8:	f7fd f824 	bl	8000214 <__aeabi_uidivmod>
 80031cc:	5c73      	ldrb	r3, [r6, r1]
 80031ce:	3d01      	subs	r5, #1
 80031d0:	702b      	strb	r3, [r5, #0]
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d1f7      	bne.n	80031c6 <_printf_i+0x1be>
 80031d6:	2f08      	cmp	r7, #8
 80031d8:	d109      	bne.n	80031ee <_printf_i+0x1e6>
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	07db      	lsls	r3, r3, #31
 80031de:	d506      	bpl.n	80031ee <_printf_i+0x1e6>
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	6922      	ldr	r2, [r4, #16]
 80031e4:	4293      	cmp	r3, r2
 80031e6:	dc02      	bgt.n	80031ee <_printf_i+0x1e6>
 80031e8:	2330      	movs	r3, #48	; 0x30
 80031ea:	3d01      	subs	r5, #1
 80031ec:	702b      	strb	r3, [r5, #0]
 80031ee:	9b02      	ldr	r3, [sp, #8]
 80031f0:	1b5b      	subs	r3, r3, r5
 80031f2:	6123      	str	r3, [r4, #16]
 80031f4:	9b05      	ldr	r3, [sp, #20]
 80031f6:	aa07      	add	r2, sp, #28
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	0021      	movs	r1, r4
 80031fc:	9b04      	ldr	r3, [sp, #16]
 80031fe:	9803      	ldr	r0, [sp, #12]
 8003200:	f7ff fe94 	bl	8002f2c <_printf_common>
 8003204:	1c43      	adds	r3, r0, #1
 8003206:	d1b8      	bne.n	800317a <_printf_i+0x172>
 8003208:	2001      	movs	r0, #1
 800320a:	4240      	negs	r0, r0
 800320c:	b009      	add	sp, #36	; 0x24
 800320e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003210:	0800396d 	.word	0x0800396d
 8003214:	0800397e 	.word	0x0800397e

08003218 <_sbrk_r>:
 8003218:	2300      	movs	r3, #0
 800321a:	b570      	push	{r4, r5, r6, lr}
 800321c:	4c06      	ldr	r4, [pc, #24]	; (8003238 <_sbrk_r+0x20>)
 800321e:	0005      	movs	r5, r0
 8003220:	0008      	movs	r0, r1
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	f7fd fbf2 	bl	8000a0c <_sbrk>
 8003228:	1c43      	adds	r3, r0, #1
 800322a:	d103      	bne.n	8003234 <_sbrk_r+0x1c>
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d000      	beq.n	8003234 <_sbrk_r+0x1c>
 8003232:	602b      	str	r3, [r5, #0]
 8003234:	bd70      	pop	{r4, r5, r6, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	2000016c 	.word	0x2000016c

0800323c <__sread>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	000c      	movs	r4, r1
 8003240:	250e      	movs	r5, #14
 8003242:	5f49      	ldrsh	r1, [r1, r5]
 8003244:	f000 fac6 	bl	80037d4 <_read_r>
 8003248:	2800      	cmp	r0, #0
 800324a:	db03      	blt.n	8003254 <__sread+0x18>
 800324c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800324e:	181b      	adds	r3, r3, r0
 8003250:	6563      	str	r3, [r4, #84]	; 0x54
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	4a02      	ldr	r2, [pc, #8]	; (8003260 <__sread+0x24>)
 8003258:	4013      	ands	r3, r2
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	e7f9      	b.n	8003252 <__sread+0x16>
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	ffffefff 	.word	0xffffefff

08003264 <__swrite>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	001f      	movs	r7, r3
 8003268:	898b      	ldrh	r3, [r1, #12]
 800326a:	0005      	movs	r5, r0
 800326c:	000c      	movs	r4, r1
 800326e:	0016      	movs	r6, r2
 8003270:	05db      	lsls	r3, r3, #23
 8003272:	d505      	bpl.n	8003280 <__swrite+0x1c>
 8003274:	230e      	movs	r3, #14
 8003276:	5ec9      	ldrsh	r1, [r1, r3]
 8003278:	2200      	movs	r2, #0
 800327a:	2302      	movs	r3, #2
 800327c:	f000 f9d2 	bl	8003624 <_lseek_r>
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <__swrite+0x34>)
 8003284:	0028      	movs	r0, r5
 8003286:	4013      	ands	r3, r2
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	0032      	movs	r2, r6
 800328c:	230e      	movs	r3, #14
 800328e:	5ee1      	ldrsh	r1, [r4, r3]
 8003290:	003b      	movs	r3, r7
 8003292:	f000 f875 	bl	8003380 <_write_r>
 8003296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003298:	ffffefff 	.word	0xffffefff

0800329c <__sseek>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	000c      	movs	r4, r1
 80032a0:	250e      	movs	r5, #14
 80032a2:	5f49      	ldrsh	r1, [r1, r5]
 80032a4:	f000 f9be 	bl	8003624 <_lseek_r>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	1c42      	adds	r2, r0, #1
 80032ac:	d103      	bne.n	80032b6 <__sseek+0x1a>
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <__sseek+0x28>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	81a3      	strh	r3, [r4, #12]
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	0152      	lsls	r2, r2, #5
 80032ba:	4313      	orrs	r3, r2
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	6560      	str	r0, [r4, #84]	; 0x54
 80032c0:	e7f8      	b.n	80032b4 <__sseek+0x18>
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	ffffefff 	.word	0xffffefff

080032c8 <__sclose>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	230e      	movs	r3, #14
 80032cc:	5ec9      	ldrsh	r1, [r1, r3]
 80032ce:	f000 f8e1 	bl	8003494 <_close_r>
 80032d2:	bd10      	pop	{r4, pc}

080032d4 <__swbuf_r>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	0005      	movs	r5, r0
 80032d8:	000e      	movs	r6, r1
 80032da:	0014      	movs	r4, r2
 80032dc:	2800      	cmp	r0, #0
 80032de:	d004      	beq.n	80032ea <__swbuf_r+0x16>
 80032e0:	6983      	ldr	r3, [r0, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <__swbuf_r+0x16>
 80032e6:	f7ff fbf1 	bl	8002acc <__sinit>
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <__swbuf_r+0xa0>)
 80032ec:	429c      	cmp	r4, r3
 80032ee:	d12d      	bne.n	800334c <__swbuf_r+0x78>
 80032f0:	686c      	ldr	r4, [r5, #4]
 80032f2:	69a3      	ldr	r3, [r4, #24]
 80032f4:	60a3      	str	r3, [r4, #8]
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	071b      	lsls	r3, r3, #28
 80032fa:	d531      	bpl.n	8003360 <__swbuf_r+0x8c>
 80032fc:	6923      	ldr	r3, [r4, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02e      	beq.n	8003360 <__swbuf_r+0x8c>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	6922      	ldr	r2, [r4, #16]
 8003306:	b2f7      	uxtb	r7, r6
 8003308:	1a98      	subs	r0, r3, r2
 800330a:	6963      	ldr	r3, [r4, #20]
 800330c:	b2f6      	uxtb	r6, r6
 800330e:	4283      	cmp	r3, r0
 8003310:	dc05      	bgt.n	800331e <__swbuf_r+0x4a>
 8003312:	0021      	movs	r1, r4
 8003314:	0028      	movs	r0, r5
 8003316:	f000 f959 	bl	80035cc <_fflush_r>
 800331a:	2800      	cmp	r0, #0
 800331c:	d126      	bne.n	800336c <__swbuf_r+0x98>
 800331e:	68a3      	ldr	r3, [r4, #8]
 8003320:	3001      	adds	r0, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	60a3      	str	r3, [r4, #8]
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	6022      	str	r2, [r4, #0]
 800332c:	701f      	strb	r7, [r3, #0]
 800332e:	6963      	ldr	r3, [r4, #20]
 8003330:	4283      	cmp	r3, r0
 8003332:	d004      	beq.n	800333e <__swbuf_r+0x6a>
 8003334:	89a3      	ldrh	r3, [r4, #12]
 8003336:	07db      	lsls	r3, r3, #31
 8003338:	d51a      	bpl.n	8003370 <__swbuf_r+0x9c>
 800333a:	2e0a      	cmp	r6, #10
 800333c:	d118      	bne.n	8003370 <__swbuf_r+0x9c>
 800333e:	0021      	movs	r1, r4
 8003340:	0028      	movs	r0, r5
 8003342:	f000 f943 	bl	80035cc <_fflush_r>
 8003346:	2800      	cmp	r0, #0
 8003348:	d012      	beq.n	8003370 <__swbuf_r+0x9c>
 800334a:	e00f      	b.n	800336c <__swbuf_r+0x98>
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <__swbuf_r+0xa4>)
 800334e:	429c      	cmp	r4, r3
 8003350:	d101      	bne.n	8003356 <__swbuf_r+0x82>
 8003352:	68ac      	ldr	r4, [r5, #8]
 8003354:	e7cd      	b.n	80032f2 <__swbuf_r+0x1e>
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <__swbuf_r+0xa8>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d1ca      	bne.n	80032f2 <__swbuf_r+0x1e>
 800335c:	68ec      	ldr	r4, [r5, #12]
 800335e:	e7c8      	b.n	80032f2 <__swbuf_r+0x1e>
 8003360:	0021      	movs	r1, r4
 8003362:	0028      	movs	r0, r5
 8003364:	f000 f820 	bl	80033a8 <__swsetup_r>
 8003368:	2800      	cmp	r0, #0
 800336a:	d0ca      	beq.n	8003302 <__swbuf_r+0x2e>
 800336c:	2601      	movs	r6, #1
 800336e:	4276      	negs	r6, r6
 8003370:	0030      	movs	r0, r6
 8003372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003374:	0800391c 	.word	0x0800391c
 8003378:	0800393c 	.word	0x0800393c
 800337c:	080038fc 	.word	0x080038fc

08003380 <_write_r>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	0005      	movs	r5, r0
 8003384:	0008      	movs	r0, r1
 8003386:	0011      	movs	r1, r2
 8003388:	2200      	movs	r2, #0
 800338a:	4c06      	ldr	r4, [pc, #24]	; (80033a4 <_write_r+0x24>)
 800338c:	6022      	str	r2, [r4, #0]
 800338e:	001a      	movs	r2, r3
 8003390:	f7fd faf4 	bl	800097c <_write>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d103      	bne.n	80033a0 <_write_r+0x20>
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d000      	beq.n	80033a0 <_write_r+0x20>
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	2000016c 	.word	0x2000016c

080033a8 <__swsetup_r>:
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <__swsetup_r+0xdc>)
 80033aa:	b570      	push	{r4, r5, r6, lr}
 80033ac:	681d      	ldr	r5, [r3, #0]
 80033ae:	0006      	movs	r6, r0
 80033b0:	000c      	movs	r4, r1
 80033b2:	2d00      	cmp	r5, #0
 80033b4:	d005      	beq.n	80033c2 <__swsetup_r+0x1a>
 80033b6:	69ab      	ldr	r3, [r5, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <__swsetup_r+0x1a>
 80033bc:	0028      	movs	r0, r5
 80033be:	f7ff fb85 	bl	8002acc <__sinit>
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <__swsetup_r+0xe0>)
 80033c4:	429c      	cmp	r4, r3
 80033c6:	d10f      	bne.n	80033e8 <__swsetup_r+0x40>
 80033c8:	686c      	ldr	r4, [r5, #4]
 80033ca:	230c      	movs	r3, #12
 80033cc:	5ee2      	ldrsh	r2, [r4, r3]
 80033ce:	b293      	uxth	r3, r2
 80033d0:	0719      	lsls	r1, r3, #28
 80033d2:	d42d      	bmi.n	8003430 <__swsetup_r+0x88>
 80033d4:	06d9      	lsls	r1, r3, #27
 80033d6:	d411      	bmi.n	80033fc <__swsetup_r+0x54>
 80033d8:	2309      	movs	r3, #9
 80033da:	2001      	movs	r0, #1
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	3337      	adds	r3, #55	; 0x37
 80033e0:	4313      	orrs	r3, r2
 80033e2:	81a3      	strh	r3, [r4, #12]
 80033e4:	4240      	negs	r0, r0
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	4b28      	ldr	r3, [pc, #160]	; (800348c <__swsetup_r+0xe4>)
 80033ea:	429c      	cmp	r4, r3
 80033ec:	d101      	bne.n	80033f2 <__swsetup_r+0x4a>
 80033ee:	68ac      	ldr	r4, [r5, #8]
 80033f0:	e7eb      	b.n	80033ca <__swsetup_r+0x22>
 80033f2:	4b27      	ldr	r3, [pc, #156]	; (8003490 <__swsetup_r+0xe8>)
 80033f4:	429c      	cmp	r4, r3
 80033f6:	d1e8      	bne.n	80033ca <__swsetup_r+0x22>
 80033f8:	68ec      	ldr	r4, [r5, #12]
 80033fa:	e7e6      	b.n	80033ca <__swsetup_r+0x22>
 80033fc:	075b      	lsls	r3, r3, #29
 80033fe:	d513      	bpl.n	8003428 <__swsetup_r+0x80>
 8003400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003402:	2900      	cmp	r1, #0
 8003404:	d008      	beq.n	8003418 <__swsetup_r+0x70>
 8003406:	0023      	movs	r3, r4
 8003408:	3344      	adds	r3, #68	; 0x44
 800340a:	4299      	cmp	r1, r3
 800340c:	d002      	beq.n	8003414 <__swsetup_r+0x6c>
 800340e:	0030      	movs	r0, r6
 8003410:	f000 f996 	bl	8003740 <_free_r>
 8003414:	2300      	movs	r3, #0
 8003416:	6363      	str	r3, [r4, #52]	; 0x34
 8003418:	2224      	movs	r2, #36	; 0x24
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	4393      	bics	r3, r2
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	2300      	movs	r3, #0
 8003422:	6063      	str	r3, [r4, #4]
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	2308      	movs	r3, #8
 800342a:	89a2      	ldrh	r2, [r4, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	81a3      	strh	r3, [r4, #12]
 8003430:	6923      	ldr	r3, [r4, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <__swsetup_r+0xa6>
 8003436:	21a0      	movs	r1, #160	; 0xa0
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	0089      	lsls	r1, r1, #2
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	400b      	ands	r3, r1
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <__swsetup_r+0xa6>
 8003446:	0021      	movs	r1, r4
 8003448:	0030      	movs	r0, r6
 800344a:	f000 f927 	bl	800369c <__smakebuf_r>
 800344e:	2301      	movs	r3, #1
 8003450:	89a2      	ldrh	r2, [r4, #12]
 8003452:	4013      	ands	r3, r2
 8003454:	d011      	beq.n	800347a <__swsetup_r+0xd2>
 8003456:	2300      	movs	r3, #0
 8003458:	60a3      	str	r3, [r4, #8]
 800345a:	6963      	ldr	r3, [r4, #20]
 800345c:	425b      	negs	r3, r3
 800345e:	61a3      	str	r3, [r4, #24]
 8003460:	2000      	movs	r0, #0
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	4283      	cmp	r3, r0
 8003466:	d1be      	bne.n	80033e6 <__swsetup_r+0x3e>
 8003468:	230c      	movs	r3, #12
 800346a:	5ee2      	ldrsh	r2, [r4, r3]
 800346c:	0613      	lsls	r3, r2, #24
 800346e:	d5ba      	bpl.n	80033e6 <__swsetup_r+0x3e>
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	4313      	orrs	r3, r2
 8003474:	81a3      	strh	r3, [r4, #12]
 8003476:	3801      	subs	r0, #1
 8003478:	e7b5      	b.n	80033e6 <__swsetup_r+0x3e>
 800347a:	0792      	lsls	r2, r2, #30
 800347c:	d400      	bmi.n	8003480 <__swsetup_r+0xd8>
 800347e:	6963      	ldr	r3, [r4, #20]
 8003480:	60a3      	str	r3, [r4, #8]
 8003482:	e7ed      	b.n	8003460 <__swsetup_r+0xb8>
 8003484:	20000004 	.word	0x20000004
 8003488:	0800391c 	.word	0x0800391c
 800348c:	0800393c 	.word	0x0800393c
 8003490:	080038fc 	.word	0x080038fc

08003494 <_close_r>:
 8003494:	2300      	movs	r3, #0
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	4c06      	ldr	r4, [pc, #24]	; (80034b4 <_close_r+0x20>)
 800349a:	0005      	movs	r5, r0
 800349c:	0008      	movs	r0, r1
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	f7fd fa88 	bl	80009b4 <_close>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d103      	bne.n	80034b0 <_close_r+0x1c>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d000      	beq.n	80034b0 <_close_r+0x1c>
 80034ae:	602b      	str	r3, [r5, #0]
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	2000016c 	.word	0x2000016c

080034b8 <__sflush_r>:
 80034b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ba:	898a      	ldrh	r2, [r1, #12]
 80034bc:	0005      	movs	r5, r0
 80034be:	000c      	movs	r4, r1
 80034c0:	0713      	lsls	r3, r2, #28
 80034c2:	d460      	bmi.n	8003586 <__sflush_r+0xce>
 80034c4:	684b      	ldr	r3, [r1, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dc04      	bgt.n	80034d4 <__sflush_r+0x1c>
 80034ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	dc01      	bgt.n	80034d4 <__sflush_r+0x1c>
 80034d0:	2000      	movs	r0, #0
 80034d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80034d6:	2f00      	cmp	r7, #0
 80034d8:	d0fa      	beq.n	80034d0 <__sflush_r+0x18>
 80034da:	2300      	movs	r3, #0
 80034dc:	682e      	ldr	r6, [r5, #0]
 80034de:	602b      	str	r3, [r5, #0]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	015b      	lsls	r3, r3, #5
 80034e4:	6a21      	ldr	r1, [r4, #32]
 80034e6:	401a      	ands	r2, r3
 80034e8:	d034      	beq.n	8003554 <__sflush_r+0x9c>
 80034ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	075b      	lsls	r3, r3, #29
 80034f0:	d506      	bpl.n	8003500 <__sflush_r+0x48>
 80034f2:	6863      	ldr	r3, [r4, #4]
 80034f4:	1ac0      	subs	r0, r0, r3
 80034f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <__sflush_r+0x48>
 80034fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034fe:	1ac0      	subs	r0, r0, r3
 8003500:	0002      	movs	r2, r0
 8003502:	6a21      	ldr	r1, [r4, #32]
 8003504:	2300      	movs	r3, #0
 8003506:	0028      	movs	r0, r5
 8003508:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800350a:	47b8      	blx	r7
 800350c:	89a1      	ldrh	r1, [r4, #12]
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	d106      	bne.n	8003520 <__sflush_r+0x68>
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	2b1d      	cmp	r3, #29
 8003516:	d830      	bhi.n	800357a <__sflush_r+0xc2>
 8003518:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <__sflush_r+0x110>)
 800351a:	40da      	lsrs	r2, r3
 800351c:	07d3      	lsls	r3, r2, #31
 800351e:	d52c      	bpl.n	800357a <__sflush_r+0xc2>
 8003520:	2300      	movs	r3, #0
 8003522:	6063      	str	r3, [r4, #4]
 8003524:	6923      	ldr	r3, [r4, #16]
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	04cb      	lsls	r3, r1, #19
 800352a:	d505      	bpl.n	8003538 <__sflush_r+0x80>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d102      	bne.n	8003536 <__sflush_r+0x7e>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d100      	bne.n	8003538 <__sflush_r+0x80>
 8003536:	6560      	str	r0, [r4, #84]	; 0x54
 8003538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800353a:	602e      	str	r6, [r5, #0]
 800353c:	2900      	cmp	r1, #0
 800353e:	d0c7      	beq.n	80034d0 <__sflush_r+0x18>
 8003540:	0023      	movs	r3, r4
 8003542:	3344      	adds	r3, #68	; 0x44
 8003544:	4299      	cmp	r1, r3
 8003546:	d002      	beq.n	800354e <__sflush_r+0x96>
 8003548:	0028      	movs	r0, r5
 800354a:	f000 f8f9 	bl	8003740 <_free_r>
 800354e:	2000      	movs	r0, #0
 8003550:	6360      	str	r0, [r4, #52]	; 0x34
 8003552:	e7be      	b.n	80034d2 <__sflush_r+0x1a>
 8003554:	2301      	movs	r3, #1
 8003556:	0028      	movs	r0, r5
 8003558:	47b8      	blx	r7
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	d1c6      	bne.n	80034ec <__sflush_r+0x34>
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0c3      	beq.n	80034ec <__sflush_r+0x34>
 8003564:	2b1d      	cmp	r3, #29
 8003566:	d001      	beq.n	800356c <__sflush_r+0xb4>
 8003568:	2b16      	cmp	r3, #22
 800356a:	d101      	bne.n	8003570 <__sflush_r+0xb8>
 800356c:	602e      	str	r6, [r5, #0]
 800356e:	e7af      	b.n	80034d0 <__sflush_r+0x18>
 8003570:	2340      	movs	r3, #64	; 0x40
 8003572:	89a2      	ldrh	r2, [r4, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	81a3      	strh	r3, [r4, #12]
 8003578:	e7ab      	b.n	80034d2 <__sflush_r+0x1a>
 800357a:	2340      	movs	r3, #64	; 0x40
 800357c:	430b      	orrs	r3, r1
 800357e:	2001      	movs	r0, #1
 8003580:	81a3      	strh	r3, [r4, #12]
 8003582:	4240      	negs	r0, r0
 8003584:	e7a5      	b.n	80034d2 <__sflush_r+0x1a>
 8003586:	690f      	ldr	r7, [r1, #16]
 8003588:	2f00      	cmp	r7, #0
 800358a:	d0a1      	beq.n	80034d0 <__sflush_r+0x18>
 800358c:	680b      	ldr	r3, [r1, #0]
 800358e:	600f      	str	r7, [r1, #0]
 8003590:	1bdb      	subs	r3, r3, r7
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	2300      	movs	r3, #0
 8003596:	0792      	lsls	r2, r2, #30
 8003598:	d100      	bne.n	800359c <__sflush_r+0xe4>
 800359a:	694b      	ldr	r3, [r1, #20]
 800359c:	60a3      	str	r3, [r4, #8]
 800359e:	9b01      	ldr	r3, [sp, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	dc00      	bgt.n	80035a6 <__sflush_r+0xee>
 80035a4:	e794      	b.n	80034d0 <__sflush_r+0x18>
 80035a6:	9b01      	ldr	r3, [sp, #4]
 80035a8:	003a      	movs	r2, r7
 80035aa:	6a21      	ldr	r1, [r4, #32]
 80035ac:	0028      	movs	r0, r5
 80035ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035b0:	47b0      	blx	r6
 80035b2:	2800      	cmp	r0, #0
 80035b4:	dc03      	bgt.n	80035be <__sflush_r+0x106>
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	89a2      	ldrh	r2, [r4, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	e7df      	b.n	800357e <__sflush_r+0xc6>
 80035be:	9b01      	ldr	r3, [sp, #4]
 80035c0:	183f      	adds	r7, r7, r0
 80035c2:	1a1b      	subs	r3, r3, r0
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	e7ea      	b.n	800359e <__sflush_r+0xe6>
 80035c8:	20400001 	.word	0x20400001

080035cc <_fflush_r>:
 80035cc:	690b      	ldr	r3, [r1, #16]
 80035ce:	b570      	push	{r4, r5, r6, lr}
 80035d0:	0005      	movs	r5, r0
 80035d2:	000c      	movs	r4, r1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <_fflush_r+0x10>
 80035d8:	2000      	movs	r0, #0
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	2800      	cmp	r0, #0
 80035de:	d004      	beq.n	80035ea <_fflush_r+0x1e>
 80035e0:	6983      	ldr	r3, [r0, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <_fflush_r+0x1e>
 80035e6:	f7ff fa71 	bl	8002acc <__sinit>
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <_fflush_r+0x4c>)
 80035ec:	429c      	cmp	r4, r3
 80035ee:	d109      	bne.n	8003604 <_fflush_r+0x38>
 80035f0:	686c      	ldr	r4, [r5, #4]
 80035f2:	220c      	movs	r2, #12
 80035f4:	5ea3      	ldrsh	r3, [r4, r2]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ee      	beq.n	80035d8 <_fflush_r+0xc>
 80035fa:	0021      	movs	r1, r4
 80035fc:	0028      	movs	r0, r5
 80035fe:	f7ff ff5b 	bl	80034b8 <__sflush_r>
 8003602:	e7ea      	b.n	80035da <_fflush_r+0xe>
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <_fflush_r+0x50>)
 8003606:	429c      	cmp	r4, r3
 8003608:	d101      	bne.n	800360e <_fflush_r+0x42>
 800360a:	68ac      	ldr	r4, [r5, #8]
 800360c:	e7f1      	b.n	80035f2 <_fflush_r+0x26>
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <_fflush_r+0x54>)
 8003610:	429c      	cmp	r4, r3
 8003612:	d1ee      	bne.n	80035f2 <_fflush_r+0x26>
 8003614:	68ec      	ldr	r4, [r5, #12]
 8003616:	e7ec      	b.n	80035f2 <_fflush_r+0x26>
 8003618:	0800391c 	.word	0x0800391c
 800361c:	0800393c 	.word	0x0800393c
 8003620:	080038fc 	.word	0x080038fc

08003624 <_lseek_r>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	0005      	movs	r5, r0
 8003628:	0008      	movs	r0, r1
 800362a:	0011      	movs	r1, r2
 800362c:	2200      	movs	r2, #0
 800362e:	4c06      	ldr	r4, [pc, #24]	; (8003648 <_lseek_r+0x24>)
 8003630:	6022      	str	r2, [r4, #0]
 8003632:	001a      	movs	r2, r3
 8003634:	f7fd f9df 	bl	80009f6 <_lseek>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d103      	bne.n	8003644 <_lseek_r+0x20>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d000      	beq.n	8003644 <_lseek_r+0x20>
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	2000016c 	.word	0x2000016c

0800364c <__swhatbuf_r>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	000e      	movs	r6, r1
 8003650:	001d      	movs	r5, r3
 8003652:	230e      	movs	r3, #14
 8003654:	5ec9      	ldrsh	r1, [r1, r3]
 8003656:	b096      	sub	sp, #88	; 0x58
 8003658:	0014      	movs	r4, r2
 800365a:	2900      	cmp	r1, #0
 800365c:	da07      	bge.n	800366e <__swhatbuf_r+0x22>
 800365e:	2300      	movs	r3, #0
 8003660:	602b      	str	r3, [r5, #0]
 8003662:	89b3      	ldrh	r3, [r6, #12]
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	d411      	bmi.n	800368c <__swhatbuf_r+0x40>
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	e00f      	b.n	800368e <__swhatbuf_r+0x42>
 800366e:	466a      	mov	r2, sp
 8003670:	f000 f8c4 	bl	80037fc <_fstat_r>
 8003674:	2800      	cmp	r0, #0
 8003676:	dbf2      	blt.n	800365e <__swhatbuf_r+0x12>
 8003678:	22f0      	movs	r2, #240	; 0xf0
 800367a:	9b01      	ldr	r3, [sp, #4]
 800367c:	0212      	lsls	r2, r2, #8
 800367e:	4013      	ands	r3, r2
 8003680:	4a05      	ldr	r2, [pc, #20]	; (8003698 <__swhatbuf_r+0x4c>)
 8003682:	189b      	adds	r3, r3, r2
 8003684:	425a      	negs	r2, r3
 8003686:	4153      	adcs	r3, r2
 8003688:	602b      	str	r3, [r5, #0]
 800368a:	e7ed      	b.n	8003668 <__swhatbuf_r+0x1c>
 800368c:	2340      	movs	r3, #64	; 0x40
 800368e:	2000      	movs	r0, #0
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	b016      	add	sp, #88	; 0x58
 8003694:	bd70      	pop	{r4, r5, r6, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	ffffe000 	.word	0xffffe000

0800369c <__smakebuf_r>:
 800369c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800369e:	2602      	movs	r6, #2
 80036a0:	898b      	ldrh	r3, [r1, #12]
 80036a2:	0005      	movs	r5, r0
 80036a4:	000c      	movs	r4, r1
 80036a6:	4233      	tst	r3, r6
 80036a8:	d006      	beq.n	80036b8 <__smakebuf_r+0x1c>
 80036aa:	0023      	movs	r3, r4
 80036ac:	3347      	adds	r3, #71	; 0x47
 80036ae:	6023      	str	r3, [r4, #0]
 80036b0:	6123      	str	r3, [r4, #16]
 80036b2:	2301      	movs	r3, #1
 80036b4:	6163      	str	r3, [r4, #20]
 80036b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80036b8:	ab01      	add	r3, sp, #4
 80036ba:	466a      	mov	r2, sp
 80036bc:	f7ff ffc6 	bl	800364c <__swhatbuf_r>
 80036c0:	9900      	ldr	r1, [sp, #0]
 80036c2:	0007      	movs	r7, r0
 80036c4:	0028      	movs	r0, r5
 80036c6:	f7ff fa95 	bl	8002bf4 <_malloc_r>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d108      	bne.n	80036e0 <__smakebuf_r+0x44>
 80036ce:	220c      	movs	r2, #12
 80036d0:	5ea3      	ldrsh	r3, [r4, r2]
 80036d2:	059a      	lsls	r2, r3, #22
 80036d4:	d4ef      	bmi.n	80036b6 <__smakebuf_r+0x1a>
 80036d6:	2203      	movs	r2, #3
 80036d8:	4393      	bics	r3, r2
 80036da:	431e      	orrs	r6, r3
 80036dc:	81a6      	strh	r6, [r4, #12]
 80036de:	e7e4      	b.n	80036aa <__smakebuf_r+0xe>
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <__smakebuf_r+0x84>)
 80036e2:	62ab      	str	r3, [r5, #40]	; 0x28
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	89a2      	ldrh	r2, [r4, #12]
 80036e8:	6020      	str	r0, [r4, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	6120      	str	r0, [r4, #16]
 80036f2:	6163      	str	r3, [r4, #20]
 80036f4:	9b01      	ldr	r3, [sp, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <__smakebuf_r+0x7a>
 80036fa:	230e      	movs	r3, #14
 80036fc:	5ee1      	ldrsh	r1, [r4, r3]
 80036fe:	0028      	movs	r0, r5
 8003700:	f000 f88e 	bl	8003820 <_isatty_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	d006      	beq.n	8003716 <__smakebuf_r+0x7a>
 8003708:	2203      	movs	r2, #3
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	4393      	bics	r3, r2
 800370e:	001a      	movs	r2, r3
 8003710:	2301      	movs	r3, #1
 8003712:	4313      	orrs	r3, r2
 8003714:	81a3      	strh	r3, [r4, #12]
 8003716:	89a0      	ldrh	r0, [r4, #12]
 8003718:	4338      	orrs	r0, r7
 800371a:	81a0      	strh	r0, [r4, #12]
 800371c:	e7cb      	b.n	80036b6 <__smakebuf_r+0x1a>
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	08002a91 	.word	0x08002a91

08003724 <memchr>:
 8003724:	b2c9      	uxtb	r1, r1
 8003726:	1882      	adds	r2, r0, r2
 8003728:	4290      	cmp	r0, r2
 800372a:	d101      	bne.n	8003730 <memchr+0xc>
 800372c:	2000      	movs	r0, #0
 800372e:	4770      	bx	lr
 8003730:	7803      	ldrb	r3, [r0, #0]
 8003732:	428b      	cmp	r3, r1
 8003734:	d0fb      	beq.n	800372e <memchr+0xa>
 8003736:	3001      	adds	r0, #1
 8003738:	e7f6      	b.n	8003728 <memchr+0x4>

0800373a <__malloc_lock>:
 800373a:	4770      	bx	lr

0800373c <__malloc_unlock>:
 800373c:	4770      	bx	lr
	...

08003740 <_free_r>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	0005      	movs	r5, r0
 8003744:	2900      	cmp	r1, #0
 8003746:	d010      	beq.n	800376a <_free_r+0x2a>
 8003748:	1f0c      	subs	r4, r1, #4
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da00      	bge.n	8003752 <_free_r+0x12>
 8003750:	18e4      	adds	r4, r4, r3
 8003752:	0028      	movs	r0, r5
 8003754:	f7ff fff1 	bl	800373a <__malloc_lock>
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <_free_r+0x90>)
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <_free_r+0x2c>
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6014      	str	r4, [r2, #0]
 8003764:	0028      	movs	r0, r5
 8003766:	f7ff ffe9 	bl	800373c <__malloc_unlock>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	42a3      	cmp	r3, r4
 800376e:	d909      	bls.n	8003784 <_free_r+0x44>
 8003770:	6821      	ldr	r1, [r4, #0]
 8003772:	1860      	adds	r0, r4, r1
 8003774:	4283      	cmp	r3, r0
 8003776:	d1f3      	bne.n	8003760 <_free_r+0x20>
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	1841      	adds	r1, r0, r1
 800377e:	6021      	str	r1, [r4, #0]
 8003780:	e7ee      	b.n	8003760 <_free_r+0x20>
 8003782:	0013      	movs	r3, r2
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	2a00      	cmp	r2, #0
 8003788:	d001      	beq.n	800378e <_free_r+0x4e>
 800378a:	42a2      	cmp	r2, r4
 800378c:	d9f9      	bls.n	8003782 <_free_r+0x42>
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	1858      	adds	r0, r3, r1
 8003792:	42a0      	cmp	r0, r4
 8003794:	d10b      	bne.n	80037ae <_free_r+0x6e>
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1809      	adds	r1, r1, r0
 800379a:	1858      	adds	r0, r3, r1
 800379c:	6019      	str	r1, [r3, #0]
 800379e:	4282      	cmp	r2, r0
 80037a0:	d1e0      	bne.n	8003764 <_free_r+0x24>
 80037a2:	6810      	ldr	r0, [r2, #0]
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	1841      	adds	r1, r0, r1
 80037a8:	6019      	str	r1, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	e7da      	b.n	8003764 <_free_r+0x24>
 80037ae:	42a0      	cmp	r0, r4
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x78>
 80037b2:	230c      	movs	r3, #12
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	e7d5      	b.n	8003764 <_free_r+0x24>
 80037b8:	6821      	ldr	r1, [r4, #0]
 80037ba:	1860      	adds	r0, r4, r1
 80037bc:	4282      	cmp	r2, r0
 80037be:	d103      	bne.n	80037c8 <_free_r+0x88>
 80037c0:	6810      	ldr	r0, [r2, #0]
 80037c2:	6852      	ldr	r2, [r2, #4]
 80037c4:	1841      	adds	r1, r0, r1
 80037c6:	6021      	str	r1, [r4, #0]
 80037c8:	6062      	str	r2, [r4, #4]
 80037ca:	605c      	str	r4, [r3, #4]
 80037cc:	e7ca      	b.n	8003764 <_free_r+0x24>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	20000088 	.word	0x20000088

080037d4 <_read_r>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	0005      	movs	r5, r0
 80037d8:	0008      	movs	r0, r1
 80037da:	0011      	movs	r1, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	4c06      	ldr	r4, [pc, #24]	; (80037f8 <_read_r+0x24>)
 80037e0:	6022      	str	r2, [r4, #0]
 80037e2:	001a      	movs	r2, r3
 80037e4:	f7fd f8ad 	bl	8000942 <_read>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d103      	bne.n	80037f4 <_read_r+0x20>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d000      	beq.n	80037f4 <_read_r+0x20>
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	2000016c 	.word	0x2000016c

080037fc <_fstat_r>:
 80037fc:	2300      	movs	r3, #0
 80037fe:	b570      	push	{r4, r5, r6, lr}
 8003800:	4c06      	ldr	r4, [pc, #24]	; (800381c <_fstat_r+0x20>)
 8003802:	0005      	movs	r5, r0
 8003804:	0008      	movs	r0, r1
 8003806:	0011      	movs	r1, r2
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	f7fd f8dd 	bl	80009c8 <_fstat>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	d103      	bne.n	800381a <_fstat_r+0x1e>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d000      	beq.n	800381a <_fstat_r+0x1e>
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	2000016c 	.word	0x2000016c

08003820 <_isatty_r>:
 8003820:	2300      	movs	r3, #0
 8003822:	b570      	push	{r4, r5, r6, lr}
 8003824:	4c06      	ldr	r4, [pc, #24]	; (8003840 <_isatty_r+0x20>)
 8003826:	0005      	movs	r5, r0
 8003828:	0008      	movs	r0, r1
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	f7fd f8da 	bl	80009e4 <_isatty>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d103      	bne.n	800383c <_isatty_r+0x1c>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d000      	beq.n	800383c <_isatty_r+0x1c>
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	2000016c 	.word	0x2000016c

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
