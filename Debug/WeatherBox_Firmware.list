
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009d78  08009d78  00019d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb0  08009eb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eb8  08009eb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eb8  08009eb8  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ebc  08009ebc  00019ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000074  08009f34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08009f34  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001140c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000210f  00000000  00000000  000314a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001538b  00000000  00000000  000355d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be33  00000000  00000000  0004a95b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085a11  00000000  00000000  0005678e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc19f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f4  00000000  00000000  000dc21c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d60 	.word	0x08009d60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08009d60 	.word	0x08009d60

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f001 fa97 	bl	8001774 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f001 f9ef 	bl	8001634 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 fa89 	bl	8001774 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fa7f 	bl	8001774 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 fa11 	bl	80016ac <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 fa07 	bl	80016ac <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_cfrcmple>:
 80002ac:	4684      	mov	ip, r0
 80002ae:	1c08      	adds	r0, r1, #0
 80002b0:	4661      	mov	r1, ip
 80002b2:	e7ff      	b.n	80002b4 <__aeabi_cfcmpeq>

080002b4 <__aeabi_cfcmpeq>:
 80002b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002b6:	f000 f98b 	bl	80005d0 <__lesf2>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d401      	bmi.n	80002c2 <__aeabi_cfcmpeq+0xe>
 80002be:	2100      	movs	r1, #0
 80002c0:	42c8      	cmn	r0, r1
 80002c2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c4 <__aeabi_fcmpeq>:
 80002c4:	b510      	push	{r4, lr}
 80002c6:	f000 f90d 	bl	80004e4 <__eqsf2>
 80002ca:	4240      	negs	r0, r0
 80002cc:	3001      	adds	r0, #1
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <__aeabi_fcmplt>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	f000 f97d 	bl	80005d0 <__lesf2>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	db01      	blt.n	80002de <__aeabi_fcmplt+0xe>
 80002da:	2000      	movs	r0, #0
 80002dc:	bd10      	pop	{r4, pc}
 80002de:	2001      	movs	r0, #1
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_fcmple>:
 80002e4:	b510      	push	{r4, lr}
 80002e6:	f000 f973 	bl	80005d0 <__lesf2>
 80002ea:	2800      	cmp	r0, #0
 80002ec:	dd01      	ble.n	80002f2 <__aeabi_fcmple+0xe>
 80002ee:	2000      	movs	r0, #0
 80002f0:	bd10      	pop	{r4, pc}
 80002f2:	2001      	movs	r0, #1
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_fcmpgt>:
 80002f8:	b510      	push	{r4, lr}
 80002fa:	f000 f91b 	bl	8000534 <__gesf2>
 80002fe:	2800      	cmp	r0, #0
 8000300:	dc01      	bgt.n	8000306 <__aeabi_fcmpgt+0xe>
 8000302:	2000      	movs	r0, #0
 8000304:	bd10      	pop	{r4, pc}
 8000306:	2001      	movs	r0, #1
 8000308:	bd10      	pop	{r4, pc}
 800030a:	46c0      	nop			; (mov r8, r8)

0800030c <__aeabi_fcmpge>:
 800030c:	b510      	push	{r4, lr}
 800030e:	f000 f911 	bl	8000534 <__gesf2>
 8000312:	2800      	cmp	r0, #0
 8000314:	da01      	bge.n	800031a <__aeabi_fcmpge+0xe>
 8000316:	2000      	movs	r0, #0
 8000318:	bd10      	pop	{r4, pc}
 800031a:	2001      	movs	r0, #1
 800031c:	bd10      	pop	{r4, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_uldivmod>:
 8000320:	2b00      	cmp	r3, #0
 8000322:	d111      	bne.n	8000348 <__aeabi_uldivmod+0x28>
 8000324:	2a00      	cmp	r2, #0
 8000326:	d10f      	bne.n	8000348 <__aeabi_uldivmod+0x28>
 8000328:	2900      	cmp	r1, #0
 800032a:	d100      	bne.n	800032e <__aeabi_uldivmod+0xe>
 800032c:	2800      	cmp	r0, #0
 800032e:	d002      	beq.n	8000336 <__aeabi_uldivmod+0x16>
 8000330:	2100      	movs	r1, #0
 8000332:	43c9      	mvns	r1, r1
 8000334:	1c08      	adds	r0, r1, #0
 8000336:	b407      	push	{r0, r1, r2}
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <__aeabi_uldivmod+0x24>)
 800033a:	a102      	add	r1, pc, #8	; (adr r1, 8000344 <__aeabi_uldivmod+0x24>)
 800033c:	1840      	adds	r0, r0, r1
 800033e:	9002      	str	r0, [sp, #8]
 8000340:	bd03      	pop	{r0, r1, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	fffffee9 	.word	0xfffffee9
 8000348:	b403      	push	{r0, r1}
 800034a:	4668      	mov	r0, sp
 800034c:	b501      	push	{r0, lr}
 800034e:	9802      	ldr	r0, [sp, #8]
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	9b01      	ldr	r3, [sp, #4]
 8000356:	469e      	mov	lr, r3
 8000358:	b002      	add	sp, #8
 800035a:	bc0c      	pop	{r2, r3}
 800035c:	4770      	bx	lr
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__udivmoddi4>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	464f      	mov	r7, r9
 8000364:	4646      	mov	r6, r8
 8000366:	46d6      	mov	lr, sl
 8000368:	b5c0      	push	{r6, r7, lr}
 800036a:	0004      	movs	r4, r0
 800036c:	b082      	sub	sp, #8
 800036e:	000d      	movs	r5, r1
 8000370:	4691      	mov	r9, r2
 8000372:	4698      	mov	r8, r3
 8000374:	428b      	cmp	r3, r1
 8000376:	d82f      	bhi.n	80003d8 <__udivmoddi4+0x78>
 8000378:	d02c      	beq.n	80003d4 <__udivmoddi4+0x74>
 800037a:	4641      	mov	r1, r8
 800037c:	4648      	mov	r0, r9
 800037e:	f002 f997 	bl	80026b0 <__clzdi2>
 8000382:	0029      	movs	r1, r5
 8000384:	0006      	movs	r6, r0
 8000386:	0020      	movs	r0, r4
 8000388:	f002 f992 	bl	80026b0 <__clzdi2>
 800038c:	1a33      	subs	r3, r6, r0
 800038e:	469c      	mov	ip, r3
 8000390:	3b20      	subs	r3, #32
 8000392:	469a      	mov	sl, r3
 8000394:	d500      	bpl.n	8000398 <__udivmoddi4+0x38>
 8000396:	e076      	b.n	8000486 <__udivmoddi4+0x126>
 8000398:	464b      	mov	r3, r9
 800039a:	4652      	mov	r2, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001f      	movs	r7, r3
 80003a0:	464b      	mov	r3, r9
 80003a2:	4662      	mov	r2, ip
 80003a4:	4093      	lsls	r3, r2
 80003a6:	001e      	movs	r6, r3
 80003a8:	42af      	cmp	r7, r5
 80003aa:	d828      	bhi.n	80003fe <__udivmoddi4+0x9e>
 80003ac:	d025      	beq.n	80003fa <__udivmoddi4+0x9a>
 80003ae:	4653      	mov	r3, sl
 80003b0:	1ba4      	subs	r4, r4, r6
 80003b2:	41bd      	sbcs	r5, r7
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	da00      	bge.n	80003ba <__udivmoddi4+0x5a>
 80003b8:	e07b      	b.n	80004b2 <__udivmoddi4+0x152>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	4652      	mov	r2, sl
 80003c6:	4093      	lsls	r3, r2
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	2301      	movs	r3, #1
 80003cc:	4662      	mov	r2, ip
 80003ce:	4093      	lsls	r3, r2
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	e018      	b.n	8000406 <__udivmoddi4+0xa6>
 80003d4:	4282      	cmp	r2, r0
 80003d6:	d9d0      	bls.n	800037a <__udivmoddi4+0x1a>
 80003d8:	2200      	movs	r2, #0
 80003da:	2300      	movs	r3, #0
 80003dc:	9200      	str	r2, [sp, #0]
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <__udivmoddi4+0x8a>
 80003e6:	601c      	str	r4, [r3, #0]
 80003e8:	605d      	str	r5, [r3, #4]
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	b002      	add	sp, #8
 80003f0:	bc1c      	pop	{r2, r3, r4}
 80003f2:	4690      	mov	r8, r2
 80003f4:	4699      	mov	r9, r3
 80003f6:	46a2      	mov	sl, r4
 80003f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003fa:	42a3      	cmp	r3, r4
 80003fc:	d9d7      	bls.n	80003ae <__udivmoddi4+0x4e>
 80003fe:	2200      	movs	r2, #0
 8000400:	2300      	movs	r3, #0
 8000402:	9200      	str	r2, [sp, #0]
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	4663      	mov	r3, ip
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0e9      	beq.n	80003e0 <__udivmoddi4+0x80>
 800040c:	07fb      	lsls	r3, r7, #31
 800040e:	4698      	mov	r8, r3
 8000410:	4641      	mov	r1, r8
 8000412:	0872      	lsrs	r2, r6, #1
 8000414:	430a      	orrs	r2, r1
 8000416:	087b      	lsrs	r3, r7, #1
 8000418:	4666      	mov	r6, ip
 800041a:	e00e      	b.n	800043a <__udivmoddi4+0xda>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d101      	bne.n	8000424 <__udivmoddi4+0xc4>
 8000420:	42a2      	cmp	r2, r4
 8000422:	d80c      	bhi.n	800043e <__udivmoddi4+0xde>
 8000424:	1aa4      	subs	r4, r4, r2
 8000426:	419d      	sbcs	r5, r3
 8000428:	2001      	movs	r0, #1
 800042a:	1924      	adds	r4, r4, r4
 800042c:	416d      	adcs	r5, r5
 800042e:	2100      	movs	r1, #0
 8000430:	3e01      	subs	r6, #1
 8000432:	1824      	adds	r4, r4, r0
 8000434:	414d      	adcs	r5, r1
 8000436:	2e00      	cmp	r6, #0
 8000438:	d006      	beq.n	8000448 <__udivmoddi4+0xe8>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d9ee      	bls.n	800041c <__udivmoddi4+0xbc>
 800043e:	3e01      	subs	r6, #1
 8000440:	1924      	adds	r4, r4, r4
 8000442:	416d      	adcs	r5, r5
 8000444:	2e00      	cmp	r6, #0
 8000446:	d1f8      	bne.n	800043a <__udivmoddi4+0xda>
 8000448:	9800      	ldr	r0, [sp, #0]
 800044a:	9901      	ldr	r1, [sp, #4]
 800044c:	4653      	mov	r3, sl
 800044e:	1900      	adds	r0, r0, r4
 8000450:	4169      	adcs	r1, r5
 8000452:	2b00      	cmp	r3, #0
 8000454:	db23      	blt.n	800049e <__udivmoddi4+0x13e>
 8000456:	002b      	movs	r3, r5
 8000458:	4652      	mov	r2, sl
 800045a:	40d3      	lsrs	r3, r2
 800045c:	002a      	movs	r2, r5
 800045e:	4664      	mov	r4, ip
 8000460:	40e2      	lsrs	r2, r4
 8000462:	001c      	movs	r4, r3
 8000464:	4653      	mov	r3, sl
 8000466:	0015      	movs	r5, r2
 8000468:	2b00      	cmp	r3, #0
 800046a:	db2d      	blt.n	80004c8 <__udivmoddi4+0x168>
 800046c:	0026      	movs	r6, r4
 800046e:	4657      	mov	r7, sl
 8000470:	40be      	lsls	r6, r7
 8000472:	0033      	movs	r3, r6
 8000474:	0026      	movs	r6, r4
 8000476:	4667      	mov	r7, ip
 8000478:	40be      	lsls	r6, r7
 800047a:	0032      	movs	r2, r6
 800047c:	1a80      	subs	r0, r0, r2
 800047e:	4199      	sbcs	r1, r3
 8000480:	9000      	str	r0, [sp, #0]
 8000482:	9101      	str	r1, [sp, #4]
 8000484:	e7ac      	b.n	80003e0 <__udivmoddi4+0x80>
 8000486:	4662      	mov	r2, ip
 8000488:	2320      	movs	r3, #32
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	464a      	mov	r2, r9
 800048e:	40da      	lsrs	r2, r3
 8000490:	4661      	mov	r1, ip
 8000492:	0013      	movs	r3, r2
 8000494:	4642      	mov	r2, r8
 8000496:	408a      	lsls	r2, r1
 8000498:	0017      	movs	r7, r2
 800049a:	431f      	orrs	r7, r3
 800049c:	e780      	b.n	80003a0 <__udivmoddi4+0x40>
 800049e:	4662      	mov	r2, ip
 80004a0:	2320      	movs	r3, #32
 80004a2:	1a9b      	subs	r3, r3, r2
 80004a4:	002a      	movs	r2, r5
 80004a6:	4666      	mov	r6, ip
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0023      	movs	r3, r4
 80004ac:	40f3      	lsrs	r3, r6
 80004ae:	4313      	orrs	r3, r2
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0xfc>
 80004b2:	4662      	mov	r2, ip
 80004b4:	2320      	movs	r3, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	2200      	movs	r2, #0
 80004bc:	9100      	str	r1, [sp, #0]
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	e780      	b.n	80003ca <__udivmoddi4+0x6a>
 80004c8:	2320      	movs	r3, #32
 80004ca:	4662      	mov	r2, ip
 80004cc:	0026      	movs	r6, r4
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	40de      	lsrs	r6, r3
 80004d2:	002f      	movs	r7, r5
 80004d4:	46b0      	mov	r8, r6
 80004d6:	4666      	mov	r6, ip
 80004d8:	40b7      	lsls	r7, r6
 80004da:	4646      	mov	r6, r8
 80004dc:	003b      	movs	r3, r7
 80004de:	4333      	orrs	r3, r6
 80004e0:	e7c8      	b.n	8000474 <__udivmoddi4+0x114>
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__eqsf2>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0042      	lsls	r2, r0, #1
 80004e8:	024e      	lsls	r6, r1, #9
 80004ea:	004c      	lsls	r4, r1, #1
 80004ec:	0245      	lsls	r5, r0, #9
 80004ee:	0a6d      	lsrs	r5, r5, #9
 80004f0:	0e12      	lsrs	r2, r2, #24
 80004f2:	0fc3      	lsrs	r3, r0, #31
 80004f4:	0a76      	lsrs	r6, r6, #9
 80004f6:	0e24      	lsrs	r4, r4, #24
 80004f8:	0fc9      	lsrs	r1, r1, #31
 80004fa:	2aff      	cmp	r2, #255	; 0xff
 80004fc:	d00f      	beq.n	800051e <__eqsf2+0x3a>
 80004fe:	2cff      	cmp	r4, #255	; 0xff
 8000500:	d011      	beq.n	8000526 <__eqsf2+0x42>
 8000502:	2001      	movs	r0, #1
 8000504:	42a2      	cmp	r2, r4
 8000506:	d000      	beq.n	800050a <__eqsf2+0x26>
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	42b5      	cmp	r5, r6
 800050c:	d1fc      	bne.n	8000508 <__eqsf2+0x24>
 800050e:	428b      	cmp	r3, r1
 8000510:	d00d      	beq.n	800052e <__eqsf2+0x4a>
 8000512:	2a00      	cmp	r2, #0
 8000514:	d1f8      	bne.n	8000508 <__eqsf2+0x24>
 8000516:	0028      	movs	r0, r5
 8000518:	1e45      	subs	r5, r0, #1
 800051a:	41a8      	sbcs	r0, r5
 800051c:	e7f4      	b.n	8000508 <__eqsf2+0x24>
 800051e:	2001      	movs	r0, #1
 8000520:	2d00      	cmp	r5, #0
 8000522:	d1f1      	bne.n	8000508 <__eqsf2+0x24>
 8000524:	e7eb      	b.n	80004fe <__eqsf2+0x1a>
 8000526:	2001      	movs	r0, #1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d1ed      	bne.n	8000508 <__eqsf2+0x24>
 800052c:	e7e9      	b.n	8000502 <__eqsf2+0x1e>
 800052e:	2000      	movs	r0, #0
 8000530:	e7ea      	b.n	8000508 <__eqsf2+0x24>
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__gesf2>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	004a      	lsls	r2, r1, #1
 8000538:	024e      	lsls	r6, r1, #9
 800053a:	0245      	lsls	r5, r0, #9
 800053c:	0044      	lsls	r4, r0, #1
 800053e:	0a6d      	lsrs	r5, r5, #9
 8000540:	0e24      	lsrs	r4, r4, #24
 8000542:	0fc3      	lsrs	r3, r0, #31
 8000544:	0a76      	lsrs	r6, r6, #9
 8000546:	0e12      	lsrs	r2, r2, #24
 8000548:	0fc9      	lsrs	r1, r1, #31
 800054a:	2cff      	cmp	r4, #255	; 0xff
 800054c:	d015      	beq.n	800057a <__gesf2+0x46>
 800054e:	2aff      	cmp	r2, #255	; 0xff
 8000550:	d00e      	beq.n	8000570 <__gesf2+0x3c>
 8000552:	2c00      	cmp	r4, #0
 8000554:	d115      	bne.n	8000582 <__gesf2+0x4e>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d101      	bne.n	800055e <__gesf2+0x2a>
 800055a:	2e00      	cmp	r6, #0
 800055c:	d01c      	beq.n	8000598 <__gesf2+0x64>
 800055e:	2d00      	cmp	r5, #0
 8000560:	d014      	beq.n	800058c <__gesf2+0x58>
 8000562:	428b      	cmp	r3, r1
 8000564:	d027      	beq.n	80005b6 <__gesf2+0x82>
 8000566:	2002      	movs	r0, #2
 8000568:	3b01      	subs	r3, #1
 800056a:	4018      	ands	r0, r3
 800056c:	3801      	subs	r0, #1
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	2e00      	cmp	r6, #0
 8000572:	d0ee      	beq.n	8000552 <__gesf2+0x1e>
 8000574:	2002      	movs	r0, #2
 8000576:	4240      	negs	r0, r0
 8000578:	e7f9      	b.n	800056e <__gesf2+0x3a>
 800057a:	2d00      	cmp	r5, #0
 800057c:	d1fa      	bne.n	8000574 <__gesf2+0x40>
 800057e:	2aff      	cmp	r2, #255	; 0xff
 8000580:	d00e      	beq.n	80005a0 <__gesf2+0x6c>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d10e      	bne.n	80005a4 <__gesf2+0x70>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d0ed      	beq.n	8000566 <__gesf2+0x32>
 800058a:	e00b      	b.n	80005a4 <__gesf2+0x70>
 800058c:	2301      	movs	r3, #1
 800058e:	3901      	subs	r1, #1
 8000590:	4399      	bics	r1, r3
 8000592:	0008      	movs	r0, r1
 8000594:	3001      	adds	r0, #1
 8000596:	e7ea      	b.n	800056e <__gesf2+0x3a>
 8000598:	2000      	movs	r0, #0
 800059a:	2d00      	cmp	r5, #0
 800059c:	d0e7      	beq.n	800056e <__gesf2+0x3a>
 800059e:	e7e2      	b.n	8000566 <__gesf2+0x32>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d1e7      	bne.n	8000574 <__gesf2+0x40>
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d1de      	bne.n	8000566 <__gesf2+0x32>
 80005a8:	4294      	cmp	r4, r2
 80005aa:	dd05      	ble.n	80005b8 <__gesf2+0x84>
 80005ac:	2102      	movs	r1, #2
 80005ae:	1e58      	subs	r0, r3, #1
 80005b0:	4008      	ands	r0, r1
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7db      	b.n	800056e <__gesf2+0x3a>
 80005b6:	2400      	movs	r4, #0
 80005b8:	42a2      	cmp	r2, r4
 80005ba:	dc04      	bgt.n	80005c6 <__gesf2+0x92>
 80005bc:	42b5      	cmp	r5, r6
 80005be:	d8d2      	bhi.n	8000566 <__gesf2+0x32>
 80005c0:	2000      	movs	r0, #0
 80005c2:	42b5      	cmp	r5, r6
 80005c4:	d2d3      	bcs.n	800056e <__gesf2+0x3a>
 80005c6:	1e58      	subs	r0, r3, #1
 80005c8:	2301      	movs	r3, #1
 80005ca:	4398      	bics	r0, r3
 80005cc:	3001      	adds	r0, #1
 80005ce:	e7ce      	b.n	800056e <__gesf2+0x3a>

080005d0 <__lesf2>:
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	0042      	lsls	r2, r0, #1
 80005d4:	0244      	lsls	r4, r0, #9
 80005d6:	024d      	lsls	r5, r1, #9
 80005d8:	0fc3      	lsrs	r3, r0, #31
 80005da:	0048      	lsls	r0, r1, #1
 80005dc:	0a64      	lsrs	r4, r4, #9
 80005de:	0e12      	lsrs	r2, r2, #24
 80005e0:	0a6d      	lsrs	r5, r5, #9
 80005e2:	0e00      	lsrs	r0, r0, #24
 80005e4:	0fc9      	lsrs	r1, r1, #31
 80005e6:	2aff      	cmp	r2, #255	; 0xff
 80005e8:	d012      	beq.n	8000610 <__lesf2+0x40>
 80005ea:	28ff      	cmp	r0, #255	; 0xff
 80005ec:	d00c      	beq.n	8000608 <__lesf2+0x38>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d112      	bne.n	8000618 <__lesf2+0x48>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d119      	bne.n	800062a <__lesf2+0x5a>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d117      	bne.n	800062a <__lesf2+0x5a>
 80005fa:	2c00      	cmp	r4, #0
 80005fc:	d02b      	beq.n	8000656 <__lesf2+0x86>
 80005fe:	2002      	movs	r0, #2
 8000600:	3b01      	subs	r3, #1
 8000602:	4018      	ands	r0, r3
 8000604:	3801      	subs	r0, #1
 8000606:	e026      	b.n	8000656 <__lesf2+0x86>
 8000608:	2d00      	cmp	r5, #0
 800060a:	d0f0      	beq.n	80005ee <__lesf2+0x1e>
 800060c:	2002      	movs	r0, #2
 800060e:	e022      	b.n	8000656 <__lesf2+0x86>
 8000610:	2c00      	cmp	r4, #0
 8000612:	d1fb      	bne.n	800060c <__lesf2+0x3c>
 8000614:	28ff      	cmp	r0, #255	; 0xff
 8000616:	d01f      	beq.n	8000658 <__lesf2+0x88>
 8000618:	2800      	cmp	r0, #0
 800061a:	d11f      	bne.n	800065c <__lesf2+0x8c>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d11d      	bne.n	800065c <__lesf2+0x8c>
 8000620:	2002      	movs	r0, #2
 8000622:	3b01      	subs	r3, #1
 8000624:	4018      	ands	r0, r3
 8000626:	3801      	subs	r0, #1
 8000628:	e015      	b.n	8000656 <__lesf2+0x86>
 800062a:	2c00      	cmp	r4, #0
 800062c:	d00e      	beq.n	800064c <__lesf2+0x7c>
 800062e:	428b      	cmp	r3, r1
 8000630:	d1e5      	bne.n	80005fe <__lesf2+0x2e>
 8000632:	2200      	movs	r2, #0
 8000634:	4290      	cmp	r0, r2
 8000636:	dc04      	bgt.n	8000642 <__lesf2+0x72>
 8000638:	42ac      	cmp	r4, r5
 800063a:	d8e0      	bhi.n	80005fe <__lesf2+0x2e>
 800063c:	2000      	movs	r0, #0
 800063e:	42ac      	cmp	r4, r5
 8000640:	d209      	bcs.n	8000656 <__lesf2+0x86>
 8000642:	1e58      	subs	r0, r3, #1
 8000644:	2301      	movs	r3, #1
 8000646:	4398      	bics	r0, r3
 8000648:	3001      	adds	r0, #1
 800064a:	e004      	b.n	8000656 <__lesf2+0x86>
 800064c:	2301      	movs	r3, #1
 800064e:	3901      	subs	r1, #1
 8000650:	4399      	bics	r1, r3
 8000652:	0008      	movs	r0, r1
 8000654:	3001      	adds	r0, #1
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	2d00      	cmp	r5, #0
 800065a:	d1d7      	bne.n	800060c <__lesf2+0x3c>
 800065c:	428b      	cmp	r3, r1
 800065e:	d1ce      	bne.n	80005fe <__lesf2+0x2e>
 8000660:	4282      	cmp	r2, r0
 8000662:	dde7      	ble.n	8000634 <__lesf2+0x64>
 8000664:	2102      	movs	r1, #2
 8000666:	1e58      	subs	r0, r3, #1
 8000668:	4008      	ands	r0, r1
 800066a:	3801      	subs	r0, #1
 800066c:	e7f3      	b.n	8000656 <__lesf2+0x86>
 800066e:	46c0      	nop			; (mov r8, r8)

08000670 <__aeabi_fsub>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	4647      	mov	r7, r8
 8000674:	46ce      	mov	lr, r9
 8000676:	0044      	lsls	r4, r0, #1
 8000678:	0fc2      	lsrs	r2, r0, #31
 800067a:	b580      	push	{r7, lr}
 800067c:	0247      	lsls	r7, r0, #9
 800067e:	0248      	lsls	r0, r1, #9
 8000680:	0a40      	lsrs	r0, r0, #9
 8000682:	4684      	mov	ip, r0
 8000684:	4666      	mov	r6, ip
 8000686:	0048      	lsls	r0, r1, #1
 8000688:	0a7f      	lsrs	r7, r7, #9
 800068a:	0e24      	lsrs	r4, r4, #24
 800068c:	00f6      	lsls	r6, r6, #3
 800068e:	0025      	movs	r5, r4
 8000690:	4690      	mov	r8, r2
 8000692:	00fb      	lsls	r3, r7, #3
 8000694:	0e00      	lsrs	r0, r0, #24
 8000696:	0fc9      	lsrs	r1, r1, #31
 8000698:	46b1      	mov	r9, r6
 800069a:	28ff      	cmp	r0, #255	; 0xff
 800069c:	d100      	bne.n	80006a0 <__aeabi_fsub+0x30>
 800069e:	e085      	b.n	80007ac <__aeabi_fsub+0x13c>
 80006a0:	2601      	movs	r6, #1
 80006a2:	4071      	eors	r1, r6
 80006a4:	1a26      	subs	r6, r4, r0
 80006a6:	4291      	cmp	r1, r2
 80006a8:	d057      	beq.n	800075a <__aeabi_fsub+0xea>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	dd43      	ble.n	8000736 <__aeabi_fsub+0xc6>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fsub+0x44>
 80006b2:	e07f      	b.n	80007b4 <__aeabi_fsub+0x144>
 80006b4:	4649      	mov	r1, r9
 80006b6:	2900      	cmp	r1, #0
 80006b8:	d100      	bne.n	80006bc <__aeabi_fsub+0x4c>
 80006ba:	e0aa      	b.n	8000812 <__aeabi_fsub+0x1a2>
 80006bc:	3e01      	subs	r6, #1
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fsub+0x54>
 80006c2:	e0f7      	b.n	80008b4 <__aeabi_fsub+0x244>
 80006c4:	1a5b      	subs	r3, r3, r1
 80006c6:	015a      	lsls	r2, r3, #5
 80006c8:	d400      	bmi.n	80006cc <__aeabi_fsub+0x5c>
 80006ca:	e08b      	b.n	80007e4 <__aeabi_fsub+0x174>
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	099c      	lsrs	r4, r3, #6
 80006d0:	0020      	movs	r0, r4
 80006d2:	f001 ffcf 	bl	8002674 <__clzsi2>
 80006d6:	3805      	subs	r0, #5
 80006d8:	4084      	lsls	r4, r0
 80006da:	4285      	cmp	r5, r0
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_fsub+0x70>
 80006de:	e0d3      	b.n	8000888 <__aeabi_fsub+0x218>
 80006e0:	1b45      	subs	r5, r0, r5
 80006e2:	0023      	movs	r3, r4
 80006e4:	2020      	movs	r0, #32
 80006e6:	3501      	adds	r5, #1
 80006e8:	40eb      	lsrs	r3, r5
 80006ea:	1b45      	subs	r5, r0, r5
 80006ec:	40ac      	lsls	r4, r5
 80006ee:	1e62      	subs	r2, r4, #1
 80006f0:	4194      	sbcs	r4, r2
 80006f2:	4323      	orrs	r3, r4
 80006f4:	2407      	movs	r4, #7
 80006f6:	2500      	movs	r5, #0
 80006f8:	401c      	ands	r4, r3
 80006fa:	2201      	movs	r2, #1
 80006fc:	4641      	mov	r1, r8
 80006fe:	400a      	ands	r2, r1
 8000700:	2c00      	cmp	r4, #0
 8000702:	d004      	beq.n	800070e <__aeabi_fsub+0x9e>
 8000704:	210f      	movs	r1, #15
 8000706:	4019      	ands	r1, r3
 8000708:	2904      	cmp	r1, #4
 800070a:	d000      	beq.n	800070e <__aeabi_fsub+0x9e>
 800070c:	3304      	adds	r3, #4
 800070e:	0159      	lsls	r1, r3, #5
 8000710:	d400      	bmi.n	8000714 <__aeabi_fsub+0xa4>
 8000712:	e080      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000714:	3501      	adds	r5, #1
 8000716:	b2ec      	uxtb	r4, r5
 8000718:	2dff      	cmp	r5, #255	; 0xff
 800071a:	d000      	beq.n	800071e <__aeabi_fsub+0xae>
 800071c:	e0a3      	b.n	8000866 <__aeabi_fsub+0x1f6>
 800071e:	24ff      	movs	r4, #255	; 0xff
 8000720:	2300      	movs	r3, #0
 8000722:	025b      	lsls	r3, r3, #9
 8000724:	05e4      	lsls	r4, r4, #23
 8000726:	0a58      	lsrs	r0, r3, #9
 8000728:	07d2      	lsls	r2, r2, #31
 800072a:	4320      	orrs	r0, r4
 800072c:	4310      	orrs	r0, r2
 800072e:	bc0c      	pop	{r2, r3}
 8000730:	4690      	mov	r8, r2
 8000732:	4699      	mov	r9, r3
 8000734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000736:	2e00      	cmp	r6, #0
 8000738:	d174      	bne.n	8000824 <__aeabi_fsub+0x1b4>
 800073a:	1c60      	adds	r0, r4, #1
 800073c:	b2c0      	uxtb	r0, r0
 800073e:	2801      	cmp	r0, #1
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fsub+0xd4>
 8000742:	e0a7      	b.n	8000894 <__aeabi_fsub+0x224>
 8000744:	464a      	mov	r2, r9
 8000746:	1a9c      	subs	r4, r3, r2
 8000748:	0162      	lsls	r2, r4, #5
 800074a:	d500      	bpl.n	800074e <__aeabi_fsub+0xde>
 800074c:	e0b6      	b.n	80008bc <__aeabi_fsub+0x24c>
 800074e:	2c00      	cmp	r4, #0
 8000750:	d1be      	bne.n	80006d0 <__aeabi_fsub+0x60>
 8000752:	2200      	movs	r2, #0
 8000754:	2400      	movs	r4, #0
 8000756:	2300      	movs	r3, #0
 8000758:	e7e3      	b.n	8000722 <__aeabi_fsub+0xb2>
 800075a:	2e00      	cmp	r6, #0
 800075c:	dc00      	bgt.n	8000760 <__aeabi_fsub+0xf0>
 800075e:	e085      	b.n	800086c <__aeabi_fsub+0x1fc>
 8000760:	2800      	cmp	r0, #0
 8000762:	d046      	beq.n	80007f2 <__aeabi_fsub+0x182>
 8000764:	2cff      	cmp	r4, #255	; 0xff
 8000766:	d049      	beq.n	80007fc <__aeabi_fsub+0x18c>
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	4648      	mov	r0, r9
 800076c:	04d2      	lsls	r2, r2, #19
 800076e:	4310      	orrs	r0, r2
 8000770:	4681      	mov	r9, r0
 8000772:	2201      	movs	r2, #1
 8000774:	2e1b      	cmp	r6, #27
 8000776:	dc09      	bgt.n	800078c <__aeabi_fsub+0x11c>
 8000778:	2020      	movs	r0, #32
 800077a:	464c      	mov	r4, r9
 800077c:	1b80      	subs	r0, r0, r6
 800077e:	4084      	lsls	r4, r0
 8000780:	464a      	mov	r2, r9
 8000782:	0020      	movs	r0, r4
 8000784:	40f2      	lsrs	r2, r6
 8000786:	1e44      	subs	r4, r0, #1
 8000788:	41a0      	sbcs	r0, r4
 800078a:	4302      	orrs	r2, r0
 800078c:	189b      	adds	r3, r3, r2
 800078e:	015a      	lsls	r2, r3, #5
 8000790:	d528      	bpl.n	80007e4 <__aeabi_fsub+0x174>
 8000792:	3501      	adds	r5, #1
 8000794:	2dff      	cmp	r5, #255	; 0xff
 8000796:	d100      	bne.n	800079a <__aeabi_fsub+0x12a>
 8000798:	e0a8      	b.n	80008ec <__aeabi_fsub+0x27c>
 800079a:	2201      	movs	r2, #1
 800079c:	2407      	movs	r4, #7
 800079e:	4994      	ldr	r1, [pc, #592]	; (80009f0 <__aeabi_fsub+0x380>)
 80007a0:	401a      	ands	r2, r3
 80007a2:	085b      	lsrs	r3, r3, #1
 80007a4:	400b      	ands	r3, r1
 80007a6:	4313      	orrs	r3, r2
 80007a8:	401c      	ands	r4, r3
 80007aa:	e7a6      	b.n	80006fa <__aeabi_fsub+0x8a>
 80007ac:	2e00      	cmp	r6, #0
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fsub+0x142>
 80007b0:	e778      	b.n	80006a4 <__aeabi_fsub+0x34>
 80007b2:	e775      	b.n	80006a0 <__aeabi_fsub+0x30>
 80007b4:	2cff      	cmp	r4, #255	; 0xff
 80007b6:	d054      	beq.n	8000862 <__aeabi_fsub+0x1f2>
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	4649      	mov	r1, r9
 80007bc:	04d2      	lsls	r2, r2, #19
 80007be:	4311      	orrs	r1, r2
 80007c0:	4689      	mov	r9, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	2e1b      	cmp	r6, #27
 80007c6:	dc09      	bgt.n	80007dc <__aeabi_fsub+0x16c>
 80007c8:	2120      	movs	r1, #32
 80007ca:	4648      	mov	r0, r9
 80007cc:	1b89      	subs	r1, r1, r6
 80007ce:	4088      	lsls	r0, r1
 80007d0:	464a      	mov	r2, r9
 80007d2:	0001      	movs	r1, r0
 80007d4:	40f2      	lsrs	r2, r6
 80007d6:	1e48      	subs	r0, r1, #1
 80007d8:	4181      	sbcs	r1, r0
 80007da:	430a      	orrs	r2, r1
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	015a      	lsls	r2, r3, #5
 80007e0:	d500      	bpl.n	80007e4 <__aeabi_fsub+0x174>
 80007e2:	e773      	b.n	80006cc <__aeabi_fsub+0x5c>
 80007e4:	2201      	movs	r2, #1
 80007e6:	4641      	mov	r1, r8
 80007e8:	400a      	ands	r2, r1
 80007ea:	0759      	lsls	r1, r3, #29
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fsub+0x180>
 80007ee:	e789      	b.n	8000704 <__aeabi_fsub+0x94>
 80007f0:	e011      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80007f2:	4648      	mov	r0, r9
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d158      	bne.n	80008aa <__aeabi_fsub+0x23a>
 80007f8:	2cff      	cmp	r4, #255	; 0xff
 80007fa:	d10c      	bne.n	8000816 <__aeabi_fsub+0x1a6>
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fsub+0x194>
 8000802:	e78c      	b.n	800071e <__aeabi_fsub+0xae>
 8000804:	2080      	movs	r0, #128	; 0x80
 8000806:	03c0      	lsls	r0, r0, #15
 8000808:	4303      	orrs	r3, r0
 800080a:	025b      	lsls	r3, r3, #9
 800080c:	0a5b      	lsrs	r3, r3, #9
 800080e:	24ff      	movs	r4, #255	; 0xff
 8000810:	e787      	b.n	8000722 <__aeabi_fsub+0xb2>
 8000812:	2cff      	cmp	r4, #255	; 0xff
 8000814:	d025      	beq.n	8000862 <__aeabi_fsub+0x1f2>
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d0f0      	beq.n	80007fe <__aeabi_fsub+0x18e>
 800081c:	025b      	lsls	r3, r3, #9
 800081e:	0a5b      	lsrs	r3, r3, #9
 8000820:	b2ec      	uxtb	r4, r5
 8000822:	e77e      	b.n	8000722 <__aeabi_fsub+0xb2>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d04d      	beq.n	80008c4 <__aeabi_fsub+0x254>
 8000828:	28ff      	cmp	r0, #255	; 0xff
 800082a:	d018      	beq.n	800085e <__aeabi_fsub+0x1ee>
 800082c:	2480      	movs	r4, #128	; 0x80
 800082e:	04e4      	lsls	r4, r4, #19
 8000830:	4272      	negs	r2, r6
 8000832:	4323      	orrs	r3, r4
 8000834:	2a1b      	cmp	r2, #27
 8000836:	dd00      	ble.n	800083a <__aeabi_fsub+0x1ca>
 8000838:	e0c4      	b.n	80009c4 <__aeabi_fsub+0x354>
 800083a:	001c      	movs	r4, r3
 800083c:	2520      	movs	r5, #32
 800083e:	40d4      	lsrs	r4, r2
 8000840:	1aaa      	subs	r2, r5, r2
 8000842:	4093      	lsls	r3, r2
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	4193      	sbcs	r3, r2
 8000848:	4323      	orrs	r3, r4
 800084a:	464a      	mov	r2, r9
 800084c:	0005      	movs	r5, r0
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	4688      	mov	r8, r1
 8000852:	e738      	b.n	80006c6 <__aeabi_fsub+0x56>
 8000854:	1c72      	adds	r2, r6, #1
 8000856:	d0f8      	beq.n	800084a <__aeabi_fsub+0x1da>
 8000858:	43f2      	mvns	r2, r6
 800085a:	28ff      	cmp	r0, #255	; 0xff
 800085c:	d1ea      	bne.n	8000834 <__aeabi_fsub+0x1c4>
 800085e:	000a      	movs	r2, r1
 8000860:	464b      	mov	r3, r9
 8000862:	25ff      	movs	r5, #255	; 0xff
 8000864:	e7d7      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000866:	019b      	lsls	r3, r3, #6
 8000868:	0a5b      	lsrs	r3, r3, #9
 800086a:	e75a      	b.n	8000722 <__aeabi_fsub+0xb2>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d141      	bne.n	80008f4 <__aeabi_fsub+0x284>
 8000870:	1c65      	adds	r5, r4, #1
 8000872:	b2e9      	uxtb	r1, r5
 8000874:	2901      	cmp	r1, #1
 8000876:	dd45      	ble.n	8000904 <__aeabi_fsub+0x294>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x20e>
 800087c:	e74f      	b.n	800071e <__aeabi_fsub+0xae>
 800087e:	2407      	movs	r4, #7
 8000880:	444b      	add	r3, r9
 8000882:	085b      	lsrs	r3, r3, #1
 8000884:	401c      	ands	r4, r3
 8000886:	e738      	b.n	80006fa <__aeabi_fsub+0x8a>
 8000888:	2207      	movs	r2, #7
 800088a:	4b5a      	ldr	r3, [pc, #360]	; (80009f4 <__aeabi_fsub+0x384>)
 800088c:	1a2d      	subs	r5, r5, r0
 800088e:	4023      	ands	r3, r4
 8000890:	4014      	ands	r4, r2
 8000892:	e732      	b.n	80006fa <__aeabi_fsub+0x8a>
 8000894:	2c00      	cmp	r4, #0
 8000896:	d11d      	bne.n	80008d4 <__aeabi_fsub+0x264>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d17a      	bne.n	8000992 <__aeabi_fsub+0x322>
 800089c:	464b      	mov	r3, r9
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x234>
 80008a2:	e091      	b.n	80009c8 <__aeabi_fsub+0x358>
 80008a4:	000a      	movs	r2, r1
 80008a6:	2500      	movs	r5, #0
 80008a8:	e7b5      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008aa:	3e01      	subs	r6, #1
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d119      	bne.n	80008e4 <__aeabi_fsub+0x274>
 80008b0:	444b      	add	r3, r9
 80008b2:	e76c      	b.n	800078e <__aeabi_fsub+0x11e>
 80008b4:	2cff      	cmp	r4, #255	; 0xff
 80008b6:	d184      	bne.n	80007c2 <__aeabi_fsub+0x152>
 80008b8:	25ff      	movs	r5, #255	; 0xff
 80008ba:	e7ac      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008bc:	464a      	mov	r2, r9
 80008be:	4688      	mov	r8, r1
 80008c0:	1ad4      	subs	r4, r2, r3
 80008c2:	e705      	b.n	80006d0 <__aeabi_fsub+0x60>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1c5      	bne.n	8000854 <__aeabi_fsub+0x1e4>
 80008c8:	000a      	movs	r2, r1
 80008ca:	28ff      	cmp	r0, #255	; 0xff
 80008cc:	d0c8      	beq.n	8000860 <__aeabi_fsub+0x1f0>
 80008ce:	0005      	movs	r5, r0
 80008d0:	464b      	mov	r3, r9
 80008d2:	e7a0      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d149      	bne.n	800096c <__aeabi_fsub+0x2fc>
 80008d8:	464b      	mov	r3, r9
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d077      	beq.n	80009ce <__aeabi_fsub+0x35e>
 80008de:	000a      	movs	r2, r1
 80008e0:	25ff      	movs	r5, #255	; 0xff
 80008e2:	e798      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80008e4:	2cff      	cmp	r4, #255	; 0xff
 80008e6:	d000      	beq.n	80008ea <__aeabi_fsub+0x27a>
 80008e8:	e743      	b.n	8000772 <__aeabi_fsub+0x102>
 80008ea:	e787      	b.n	80007fc <__aeabi_fsub+0x18c>
 80008ec:	000a      	movs	r2, r1
 80008ee:	24ff      	movs	r4, #255	; 0xff
 80008f0:	2300      	movs	r3, #0
 80008f2:	e716      	b.n	8000722 <__aeabi_fsub+0xb2>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d115      	bne.n	8000924 <__aeabi_fsub+0x2b4>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d157      	bne.n	80009ac <__aeabi_fsub+0x33c>
 80008fc:	28ff      	cmp	r0, #255	; 0xff
 80008fe:	d1e6      	bne.n	80008ce <__aeabi_fsub+0x25e>
 8000900:	464b      	mov	r3, r9
 8000902:	e77b      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000904:	2c00      	cmp	r4, #0
 8000906:	d120      	bne.n	800094a <__aeabi_fsub+0x2da>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d057      	beq.n	80009bc <__aeabi_fsub+0x34c>
 800090c:	4649      	mov	r1, r9
 800090e:	2900      	cmp	r1, #0
 8000910:	d053      	beq.n	80009ba <__aeabi_fsub+0x34a>
 8000912:	444b      	add	r3, r9
 8000914:	015a      	lsls	r2, r3, #5
 8000916:	d568      	bpl.n	80009ea <__aeabi_fsub+0x37a>
 8000918:	2407      	movs	r4, #7
 800091a:	4a36      	ldr	r2, [pc, #216]	; (80009f4 <__aeabi_fsub+0x384>)
 800091c:	401c      	ands	r4, r3
 800091e:	2501      	movs	r5, #1
 8000920:	4013      	ands	r3, r2
 8000922:	e6ea      	b.n	80006fa <__aeabi_fsub+0x8a>
 8000924:	28ff      	cmp	r0, #255	; 0xff
 8000926:	d0eb      	beq.n	8000900 <__aeabi_fsub+0x290>
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	04d2      	lsls	r2, r2, #19
 800092c:	4276      	negs	r6, r6
 800092e:	4313      	orrs	r3, r2
 8000930:	2e1b      	cmp	r6, #27
 8000932:	dc53      	bgt.n	80009dc <__aeabi_fsub+0x36c>
 8000934:	2520      	movs	r5, #32
 8000936:	1bad      	subs	r5, r5, r6
 8000938:	001a      	movs	r2, r3
 800093a:	40ab      	lsls	r3, r5
 800093c:	40f2      	lsrs	r2, r6
 800093e:	1e5c      	subs	r4, r3, #1
 8000940:	41a3      	sbcs	r3, r4
 8000942:	4313      	orrs	r3, r2
 8000944:	444b      	add	r3, r9
 8000946:	0005      	movs	r5, r0
 8000948:	e721      	b.n	800078e <__aeabi_fsub+0x11e>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0d8      	beq.n	8000900 <__aeabi_fsub+0x290>
 800094e:	4649      	mov	r1, r9
 8000950:	2900      	cmp	r1, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_fsub+0x2e6>
 8000954:	e752      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	03c9      	lsls	r1, r1, #15
 800095a:	420f      	tst	r7, r1
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x2f0>
 800095e:	e74d      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000960:	4660      	mov	r0, ip
 8000962:	4208      	tst	r0, r1
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x2f8>
 8000966:	e749      	b.n	80007fc <__aeabi_fsub+0x18c>
 8000968:	464b      	mov	r3, r9
 800096a:	e747      	b.n	80007fc <__aeabi_fsub+0x18c>
 800096c:	4648      	mov	r0, r9
 800096e:	25ff      	movs	r5, #255	; 0xff
 8000970:	2800      	cmp	r0, #0
 8000972:	d100      	bne.n	8000976 <__aeabi_fsub+0x306>
 8000974:	e74f      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	03d2      	lsls	r2, r2, #15
 800097a:	4217      	tst	r7, r2
 800097c:	d004      	beq.n	8000988 <__aeabi_fsub+0x318>
 800097e:	4660      	mov	r0, ip
 8000980:	4210      	tst	r0, r2
 8000982:	d101      	bne.n	8000988 <__aeabi_fsub+0x318>
 8000984:	464b      	mov	r3, r9
 8000986:	4688      	mov	r8, r1
 8000988:	2201      	movs	r2, #1
 800098a:	4641      	mov	r1, r8
 800098c:	25ff      	movs	r5, #255	; 0xff
 800098e:	400a      	ands	r2, r1
 8000990:	e741      	b.n	8000816 <__aeabi_fsub+0x1a6>
 8000992:	4648      	mov	r0, r9
 8000994:	2800      	cmp	r0, #0
 8000996:	d01f      	beq.n	80009d8 <__aeabi_fsub+0x368>
 8000998:	1a1a      	subs	r2, r3, r0
 800099a:	0150      	lsls	r0, r2, #5
 800099c:	d520      	bpl.n	80009e0 <__aeabi_fsub+0x370>
 800099e:	464a      	mov	r2, r9
 80009a0:	2407      	movs	r4, #7
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	401c      	ands	r4, r3
 80009a6:	4688      	mov	r8, r1
 80009a8:	2500      	movs	r5, #0
 80009aa:	e6a6      	b.n	80006fa <__aeabi_fsub+0x8a>
 80009ac:	1c74      	adds	r4, r6, #1
 80009ae:	d0c9      	beq.n	8000944 <__aeabi_fsub+0x2d4>
 80009b0:	43f6      	mvns	r6, r6
 80009b2:	28ff      	cmp	r0, #255	; 0xff
 80009b4:	d1bc      	bne.n	8000930 <__aeabi_fsub+0x2c0>
 80009b6:	464b      	mov	r3, r9
 80009b8:	e720      	b.n	80007fc <__aeabi_fsub+0x18c>
 80009ba:	4699      	mov	r9, r3
 80009bc:	464b      	mov	r3, r9
 80009be:	2500      	movs	r5, #0
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	e72b      	b.n	800081c <__aeabi_fsub+0x1ac>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e740      	b.n	800084a <__aeabi_fsub+0x1da>
 80009c8:	2200      	movs	r2, #0
 80009ca:	2300      	movs	r3, #0
 80009cc:	e6a9      	b.n	8000722 <__aeabi_fsub+0xb2>
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	2200      	movs	r2, #0
 80009d2:	03db      	lsls	r3, r3, #15
 80009d4:	24ff      	movs	r4, #255	; 0xff
 80009d6:	e6a4      	b.n	8000722 <__aeabi_fsub+0xb2>
 80009d8:	2500      	movs	r5, #0
 80009da:	e71c      	b.n	8000816 <__aeabi_fsub+0x1a6>
 80009dc:	2301      	movs	r3, #1
 80009de:	e7b1      	b.n	8000944 <__aeabi_fsub+0x2d4>
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	d0f1      	beq.n	80009c8 <__aeabi_fsub+0x358>
 80009e4:	0013      	movs	r3, r2
 80009e6:	2500      	movs	r5, #0
 80009e8:	e6fc      	b.n	80007e4 <__aeabi_fsub+0x174>
 80009ea:	2500      	movs	r5, #0
 80009ec:	e6fa      	b.n	80007e4 <__aeabi_fsub+0x174>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	7dffffff 	.word	0x7dffffff
 80009f4:	fbffffff 	.word	0xfbffffff

080009f8 <__aeabi_dadd>:
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	464f      	mov	r7, r9
 80009fc:	4646      	mov	r6, r8
 80009fe:	46d6      	mov	lr, sl
 8000a00:	000c      	movs	r4, r1
 8000a02:	0309      	lsls	r1, r1, #12
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	0f47      	lsrs	r7, r0, #29
 8000a0a:	005e      	lsls	r6, r3, #1
 8000a0c:	4339      	orrs	r1, r7
 8000a0e:	031f      	lsls	r7, r3, #12
 8000a10:	0fdb      	lsrs	r3, r3, #31
 8000a12:	469c      	mov	ip, r3
 8000a14:	0065      	lsls	r5, r4, #1
 8000a16:	0a7b      	lsrs	r3, r7, #9
 8000a18:	0f57      	lsrs	r7, r2, #29
 8000a1a:	431f      	orrs	r7, r3
 8000a1c:	0d6d      	lsrs	r5, r5, #21
 8000a1e:	0fe4      	lsrs	r4, r4, #31
 8000a20:	0d76      	lsrs	r6, r6, #21
 8000a22:	46a1      	mov	r9, r4
 8000a24:	00c0      	lsls	r0, r0, #3
 8000a26:	46b8      	mov	r8, r7
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	1bab      	subs	r3, r5, r6
 8000a2c:	4564      	cmp	r4, ip
 8000a2e:	d07b      	beq.n	8000b28 <__aeabi_dadd+0x130>
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dd5f      	ble.n	8000af4 <__aeabi_dadd+0xfc>
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x42>
 8000a38:	e0a4      	b.n	8000b84 <__aeabi_dadd+0x18c>
 8000a3a:	003e      	movs	r6, r7
 8000a3c:	4316      	orrs	r6, r2
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x4a>
 8000a40:	e112      	b.n	8000c68 <__aeabi_dadd+0x270>
 8000a42:	1e5e      	subs	r6, r3, #1
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x52>
 8000a48:	e19e      	b.n	8000d88 <__aeabi_dadd+0x390>
 8000a4a:	1a87      	subs	r7, r0, r2
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	42b8      	cmp	r0, r7
 8000a50:	4180      	sbcs	r0, r0
 8000a52:	2501      	movs	r5, #1
 8000a54:	1ac9      	subs	r1, r1, r3
 8000a56:	4240      	negs	r0, r0
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	020b      	lsls	r3, r1, #8
 8000a5c:	d400      	bmi.n	8000a60 <__aeabi_dadd+0x68>
 8000a5e:	e131      	b.n	8000cc4 <__aeabi_dadd+0x2cc>
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	0a4e      	lsrs	r6, r1, #9
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x72>
 8000a68:	e16e      	b.n	8000d48 <__aeabi_dadd+0x350>
 8000a6a:	0030      	movs	r0, r6
 8000a6c:	f001 fe02 	bl	8002674 <__clzsi2>
 8000a70:	0003      	movs	r3, r0
 8000a72:	3b08      	subs	r3, #8
 8000a74:	2b1f      	cmp	r3, #31
 8000a76:	dd00      	ble.n	8000a7a <__aeabi_dadd+0x82>
 8000a78:	e161      	b.n	8000d3e <__aeabi_dadd+0x346>
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	0039      	movs	r1, r7
 8000a7e:	1ad2      	subs	r2, r2, r3
 8000a80:	409e      	lsls	r6, r3
 8000a82:	40d1      	lsrs	r1, r2
 8000a84:	409f      	lsls	r7, r3
 8000a86:	430e      	orrs	r6, r1
 8000a88:	429d      	cmp	r5, r3
 8000a8a:	dd00      	ble.n	8000a8e <__aeabi_dadd+0x96>
 8000a8c:	e151      	b.n	8000d32 <__aeabi_dadd+0x33a>
 8000a8e:	1b5d      	subs	r5, r3, r5
 8000a90:	1c6b      	adds	r3, r5, #1
 8000a92:	2b1f      	cmp	r3, #31
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_dadd+0xa0>
 8000a96:	e17c      	b.n	8000d92 <__aeabi_dadd+0x39a>
 8000a98:	2120      	movs	r1, #32
 8000a9a:	1ac9      	subs	r1, r1, r3
 8000a9c:	003d      	movs	r5, r7
 8000a9e:	0030      	movs	r0, r6
 8000aa0:	408f      	lsls	r7, r1
 8000aa2:	4088      	lsls	r0, r1
 8000aa4:	40dd      	lsrs	r5, r3
 8000aa6:	1e79      	subs	r1, r7, #1
 8000aa8:	418f      	sbcs	r7, r1
 8000aaa:	0031      	movs	r1, r6
 8000aac:	2207      	movs	r2, #7
 8000aae:	4328      	orrs	r0, r5
 8000ab0:	40d9      	lsrs	r1, r3
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	4307      	orrs	r7, r0
 8000ab6:	403a      	ands	r2, r7
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_dadd+0xd8>
 8000abc:	230f      	movs	r3, #15
 8000abe:	403b      	ands	r3, r7
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d005      	beq.n	8000ad0 <__aeabi_dadd+0xd8>
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	42bb      	cmp	r3, r7
 8000ac8:	41bf      	sbcs	r7, r7
 8000aca:	427f      	negs	r7, r7
 8000acc:	19c9      	adds	r1, r1, r7
 8000ace:	001f      	movs	r7, r3
 8000ad0:	020b      	lsls	r3, r1, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0xde>
 8000ad4:	e226      	b.n	8000f24 <__aeabi_dadd+0x52c>
 8000ad6:	1c6a      	adds	r2, r5, #1
 8000ad8:	4bc6      	ldr	r3, [pc, #792]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000ada:	0555      	lsls	r5, r2, #21
 8000adc:	0d6d      	lsrs	r5, r5, #21
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0xec>
 8000ae2:	e106      	b.n	8000cf2 <__aeabi_dadd+0x2fa>
 8000ae4:	4ac4      	ldr	r2, [pc, #784]	; (8000df8 <__aeabi_dadd+0x400>)
 8000ae6:	08ff      	lsrs	r7, r7, #3
 8000ae8:	400a      	ands	r2, r1
 8000aea:	0753      	lsls	r3, r2, #29
 8000aec:	0252      	lsls	r2, r2, #9
 8000aee:	433b      	orrs	r3, r7
 8000af0:	0b12      	lsrs	r2, r2, #12
 8000af2:	e08e      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x102>
 8000af8:	e0b8      	b.n	8000c6c <__aeabi_dadd+0x274>
 8000afa:	1c6b      	adds	r3, r5, #1
 8000afc:	055b      	lsls	r3, r3, #21
 8000afe:	0d5b      	lsrs	r3, r3, #21
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	dc00      	bgt.n	8000b06 <__aeabi_dadd+0x10e>
 8000b04:	e130      	b.n	8000d68 <__aeabi_dadd+0x370>
 8000b06:	1a87      	subs	r7, r0, r2
 8000b08:	4643      	mov	r3, r8
 8000b0a:	42b8      	cmp	r0, r7
 8000b0c:	41b6      	sbcs	r6, r6
 8000b0e:	1acb      	subs	r3, r1, r3
 8000b10:	4276      	negs	r6, r6
 8000b12:	1b9e      	subs	r6, r3, r6
 8000b14:	0233      	lsls	r3, r6, #8
 8000b16:	d500      	bpl.n	8000b1a <__aeabi_dadd+0x122>
 8000b18:	e14c      	b.n	8000db4 <__aeabi_dadd+0x3bc>
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	4333      	orrs	r3, r6
 8000b1e:	d1a1      	bne.n	8000a64 <__aeabi_dadd+0x6c>
 8000b20:	2200      	movs	r2, #0
 8000b22:	2400      	movs	r4, #0
 8000b24:	2500      	movs	r5, #0
 8000b26:	e070      	b.n	8000c0a <__aeabi_dadd+0x212>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc00      	bgt.n	8000b2e <__aeabi_dadd+0x136>
 8000b2c:	e0e5      	b.n	8000cfa <__aeabi_dadd+0x302>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x13c>
 8000b32:	e083      	b.n	8000c3c <__aeabi_dadd+0x244>
 8000b34:	4eaf      	ldr	r6, [pc, #700]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000b36:	42b5      	cmp	r5, r6
 8000b38:	d060      	beq.n	8000bfc <__aeabi_dadd+0x204>
 8000b3a:	2680      	movs	r6, #128	; 0x80
 8000b3c:	0436      	lsls	r6, r6, #16
 8000b3e:	4337      	orrs	r7, r6
 8000b40:	46b8      	mov	r8, r7
 8000b42:	2b38      	cmp	r3, #56	; 0x38
 8000b44:	dc00      	bgt.n	8000b48 <__aeabi_dadd+0x150>
 8000b46:	e13e      	b.n	8000dc6 <__aeabi_dadd+0x3ce>
 8000b48:	4643      	mov	r3, r8
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	001f      	movs	r7, r3
 8000b4e:	1e7a      	subs	r2, r7, #1
 8000b50:	4197      	sbcs	r7, r2
 8000b52:	183f      	adds	r7, r7, r0
 8000b54:	4287      	cmp	r7, r0
 8000b56:	4180      	sbcs	r0, r0
 8000b58:	4240      	negs	r0, r0
 8000b5a:	1809      	adds	r1, r1, r0
 8000b5c:	020b      	lsls	r3, r1, #8
 8000b5e:	d400      	bmi.n	8000b62 <__aeabi_dadd+0x16a>
 8000b60:	e0b0      	b.n	8000cc4 <__aeabi_dadd+0x2cc>
 8000b62:	4ba4      	ldr	r3, [pc, #656]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000b64:	3501      	adds	r5, #1
 8000b66:	429d      	cmp	r5, r3
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x174>
 8000b6a:	e0c3      	b.n	8000cf4 <__aeabi_dadd+0x2fc>
 8000b6c:	4aa2      	ldr	r2, [pc, #648]	; (8000df8 <__aeabi_dadd+0x400>)
 8000b6e:	087b      	lsrs	r3, r7, #1
 8000b70:	400a      	ands	r2, r1
 8000b72:	2101      	movs	r1, #1
 8000b74:	400f      	ands	r7, r1
 8000b76:	431f      	orrs	r7, r3
 8000b78:	0851      	lsrs	r1, r2, #1
 8000b7a:	07d3      	lsls	r3, r2, #31
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	403a      	ands	r2, r7
 8000b82:	e799      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000b84:	4e9b      	ldr	r6, [pc, #620]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000b86:	42b5      	cmp	r5, r6
 8000b88:	d038      	beq.n	8000bfc <__aeabi_dadd+0x204>
 8000b8a:	2680      	movs	r6, #128	; 0x80
 8000b8c:	0436      	lsls	r6, r6, #16
 8000b8e:	4337      	orrs	r7, r6
 8000b90:	46b8      	mov	r8, r7
 8000b92:	2b38      	cmp	r3, #56	; 0x38
 8000b94:	dd00      	ble.n	8000b98 <__aeabi_dadd+0x1a0>
 8000b96:	e0dc      	b.n	8000d52 <__aeabi_dadd+0x35a>
 8000b98:	2b1f      	cmp	r3, #31
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_dadd+0x1a6>
 8000b9c:	e130      	b.n	8000e00 <__aeabi_dadd+0x408>
 8000b9e:	001e      	movs	r6, r3
 8000ba0:	4647      	mov	r7, r8
 8000ba2:	3e20      	subs	r6, #32
 8000ba4:	40f7      	lsrs	r7, r6
 8000ba6:	46bc      	mov	ip, r7
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	d004      	beq.n	8000bb6 <__aeabi_dadd+0x1be>
 8000bac:	2640      	movs	r6, #64	; 0x40
 8000bae:	1af3      	subs	r3, r6, r3
 8000bb0:	4646      	mov	r6, r8
 8000bb2:	409e      	lsls	r6, r3
 8000bb4:	4332      	orrs	r2, r6
 8000bb6:	0017      	movs	r7, r2
 8000bb8:	4663      	mov	r3, ip
 8000bba:	1e7a      	subs	r2, r7, #1
 8000bbc:	4197      	sbcs	r7, r2
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	e0cc      	b.n	8000d5c <__aeabi_dadd+0x364>
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x1d0>
 8000bc6:	e204      	b.n	8000fd2 <__aeabi_dadd+0x5da>
 8000bc8:	4643      	mov	r3, r8
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0x1d8>
 8000bce:	e159      	b.n	8000e84 <__aeabi_dadd+0x48c>
 8000bd0:	074b      	lsls	r3, r1, #29
 8000bd2:	08c0      	lsrs	r0, r0, #3
 8000bd4:	4318      	orrs	r0, r3
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	08c9      	lsrs	r1, r1, #3
 8000bda:	031b      	lsls	r3, r3, #12
 8000bdc:	4219      	tst	r1, r3
 8000bde:	d008      	beq.n	8000bf2 <__aeabi_dadd+0x1fa>
 8000be0:	4645      	mov	r5, r8
 8000be2:	08ed      	lsrs	r5, r5, #3
 8000be4:	421d      	tst	r5, r3
 8000be6:	d104      	bne.n	8000bf2 <__aeabi_dadd+0x1fa>
 8000be8:	4643      	mov	r3, r8
 8000bea:	08d0      	lsrs	r0, r2, #3
 8000bec:	0759      	lsls	r1, r3, #29
 8000bee:	4308      	orrs	r0, r1
 8000bf0:	0029      	movs	r1, r5
 8000bf2:	0f42      	lsrs	r2, r0, #29
 8000bf4:	00c9      	lsls	r1, r1, #3
 8000bf6:	4d7f      	ldr	r5, [pc, #508]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000bf8:	4311      	orrs	r1, r2
 8000bfa:	00c0      	lsls	r0, r0, #3
 8000bfc:	074b      	lsls	r3, r1, #29
 8000bfe:	08ca      	lsrs	r2, r1, #3
 8000c00:	497c      	ldr	r1, [pc, #496]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000c02:	08c0      	lsrs	r0, r0, #3
 8000c04:	4303      	orrs	r3, r0
 8000c06:	428d      	cmp	r5, r1
 8000c08:	d068      	beq.n	8000cdc <__aeabi_dadd+0x2e4>
 8000c0a:	0312      	lsls	r2, r2, #12
 8000c0c:	056d      	lsls	r5, r5, #21
 8000c0e:	0b12      	lsrs	r2, r2, #12
 8000c10:	0d6d      	lsrs	r5, r5, #21
 8000c12:	2100      	movs	r1, #0
 8000c14:	0312      	lsls	r2, r2, #12
 8000c16:	0018      	movs	r0, r3
 8000c18:	0b13      	lsrs	r3, r2, #12
 8000c1a:	0d0a      	lsrs	r2, r1, #20
 8000c1c:	0512      	lsls	r2, r2, #20
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	4b76      	ldr	r3, [pc, #472]	; (8000dfc <__aeabi_dadd+0x404>)
 8000c22:	052d      	lsls	r5, r5, #20
 8000c24:	4013      	ands	r3, r2
 8000c26:	432b      	orrs	r3, r5
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	07e4      	lsls	r4, r4, #31
 8000c2c:	085b      	lsrs	r3, r3, #1
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	0019      	movs	r1, r3
 8000c32:	bc1c      	pop	{r2, r3, r4}
 8000c34:	4690      	mov	r8, r2
 8000c36:	4699      	mov	r9, r3
 8000c38:	46a2      	mov	sl, r4
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3c:	003e      	movs	r6, r7
 8000c3e:	4316      	orrs	r6, r2
 8000c40:	d012      	beq.n	8000c68 <__aeabi_dadd+0x270>
 8000c42:	1e5e      	subs	r6, r3, #1
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x252>
 8000c48:	e100      	b.n	8000e4c <__aeabi_dadd+0x454>
 8000c4a:	1887      	adds	r7, r0, r2
 8000c4c:	4287      	cmp	r7, r0
 8000c4e:	4180      	sbcs	r0, r0
 8000c50:	4441      	add	r1, r8
 8000c52:	4240      	negs	r0, r0
 8000c54:	1809      	adds	r1, r1, r0
 8000c56:	2501      	movs	r5, #1
 8000c58:	020b      	lsls	r3, r1, #8
 8000c5a:	d533      	bpl.n	8000cc4 <__aeabi_dadd+0x2cc>
 8000c5c:	2502      	movs	r5, #2
 8000c5e:	e785      	b.n	8000b6c <__aeabi_dadd+0x174>
 8000c60:	4664      	mov	r4, ip
 8000c62:	0033      	movs	r3, r6
 8000c64:	4641      	mov	r1, r8
 8000c66:	0010      	movs	r0, r2
 8000c68:	001d      	movs	r5, r3
 8000c6a:	e7c7      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000c6c:	2d00      	cmp	r5, #0
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_dadd+0x27a>
 8000c70:	e0da      	b.n	8000e28 <__aeabi_dadd+0x430>
 8000c72:	000c      	movs	r4, r1
 8000c74:	4304      	orrs	r4, r0
 8000c76:	d0f3      	beq.n	8000c60 <__aeabi_dadd+0x268>
 8000c78:	1c5c      	adds	r4, r3, #1
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x286>
 8000c7c:	e19f      	b.n	8000fbe <__aeabi_dadd+0x5c6>
 8000c7e:	4c5d      	ldr	r4, [pc, #372]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000c80:	42a6      	cmp	r6, r4
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x28e>
 8000c84:	e12f      	b.n	8000ee6 <__aeabi_dadd+0x4ee>
 8000c86:	43db      	mvns	r3, r3
 8000c88:	2b38      	cmp	r3, #56	; 0x38
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_dadd+0x296>
 8000c8c:	e166      	b.n	8000f5c <__aeabi_dadd+0x564>
 8000c8e:	2b1f      	cmp	r3, #31
 8000c90:	dd00      	ble.n	8000c94 <__aeabi_dadd+0x29c>
 8000c92:	e183      	b.n	8000f9c <__aeabi_dadd+0x5a4>
 8000c94:	2420      	movs	r4, #32
 8000c96:	0005      	movs	r5, r0
 8000c98:	1ae4      	subs	r4, r4, r3
 8000c9a:	000f      	movs	r7, r1
 8000c9c:	40dd      	lsrs	r5, r3
 8000c9e:	40d9      	lsrs	r1, r3
 8000ca0:	40a0      	lsls	r0, r4
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	40a7      	lsls	r7, r4
 8000ca6:	1a5b      	subs	r3, r3, r1
 8000ca8:	1e44      	subs	r4, r0, #1
 8000caa:	41a0      	sbcs	r0, r4
 8000cac:	4698      	mov	r8, r3
 8000cae:	432f      	orrs	r7, r5
 8000cb0:	4338      	orrs	r0, r7
 8000cb2:	1a17      	subs	r7, r2, r0
 8000cb4:	42ba      	cmp	r2, r7
 8000cb6:	4192      	sbcs	r2, r2
 8000cb8:	4643      	mov	r3, r8
 8000cba:	4252      	negs	r2, r2
 8000cbc:	1a99      	subs	r1, r3, r2
 8000cbe:	4664      	mov	r4, ip
 8000cc0:	0035      	movs	r5, r6
 8000cc2:	e6ca      	b.n	8000a5a <__aeabi_dadd+0x62>
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	403a      	ands	r2, r7
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x2d6>
 8000ccc:	e6f6      	b.n	8000abc <__aeabi_dadd+0xc4>
 8000cce:	074b      	lsls	r3, r1, #29
 8000cd0:	08ca      	lsrs	r2, r1, #3
 8000cd2:	4948      	ldr	r1, [pc, #288]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000cd4:	08ff      	lsrs	r7, r7, #3
 8000cd6:	433b      	orrs	r3, r7
 8000cd8:	428d      	cmp	r5, r1
 8000cda:	d196      	bne.n	8000c0a <__aeabi_dadd+0x212>
 8000cdc:	0019      	movs	r1, r3
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x2ec>
 8000ce2:	e19e      	b.n	8001022 <__aeabi_dadd+0x62a>
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0309      	lsls	r1, r1, #12
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	0312      	lsls	r2, r2, #12
 8000cec:	0b12      	lsrs	r2, r2, #12
 8000cee:	4d41      	ldr	r5, [pc, #260]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000cf0:	e78f      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000cf2:	0015      	movs	r5, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e78b      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x308>
 8000cfe:	e0c7      	b.n	8000e90 <__aeabi_dadd+0x498>
 8000d00:	1c6b      	adds	r3, r5, #1
 8000d02:	055f      	lsls	r7, r3, #21
 8000d04:	0d7f      	lsrs	r7, r7, #21
 8000d06:	2f01      	cmp	r7, #1
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_dadd+0x314>
 8000d0a:	e0f1      	b.n	8000ef0 <__aeabi_dadd+0x4f8>
 8000d0c:	4d39      	ldr	r5, [pc, #228]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000d0e:	42ab      	cmp	r3, r5
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x31c>
 8000d12:	e0b9      	b.n	8000e88 <__aeabi_dadd+0x490>
 8000d14:	1885      	adds	r5, r0, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	4189      	sbcs	r1, r1
 8000d1c:	4442      	add	r2, r8
 8000d1e:	4249      	negs	r1, r1
 8000d20:	1851      	adds	r1, r2, r1
 8000d22:	2207      	movs	r2, #7
 8000d24:	07cf      	lsls	r7, r1, #31
 8000d26:	086d      	lsrs	r5, r5, #1
 8000d28:	432f      	orrs	r7, r5
 8000d2a:	0849      	lsrs	r1, r1, #1
 8000d2c:	403a      	ands	r2, r7
 8000d2e:	001d      	movs	r5, r3
 8000d30:	e6c2      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000d32:	2207      	movs	r2, #7
 8000d34:	4930      	ldr	r1, [pc, #192]	; (8000df8 <__aeabi_dadd+0x400>)
 8000d36:	1aed      	subs	r5, r5, r3
 8000d38:	4031      	ands	r1, r6
 8000d3a:	403a      	ands	r2, r7
 8000d3c:	e6bc      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000d3e:	003e      	movs	r6, r7
 8000d40:	3828      	subs	r0, #40	; 0x28
 8000d42:	4086      	lsls	r6, r0
 8000d44:	2700      	movs	r7, #0
 8000d46:	e69f      	b.n	8000a88 <__aeabi_dadd+0x90>
 8000d48:	0038      	movs	r0, r7
 8000d4a:	f001 fc93 	bl	8002674 <__clzsi2>
 8000d4e:	3020      	adds	r0, #32
 8000d50:	e68e      	b.n	8000a70 <__aeabi_dadd+0x78>
 8000d52:	4643      	mov	r3, r8
 8000d54:	4313      	orrs	r3, r2
 8000d56:	001f      	movs	r7, r3
 8000d58:	1e7a      	subs	r2, r7, #1
 8000d5a:	4197      	sbcs	r7, r2
 8000d5c:	1bc7      	subs	r7, r0, r7
 8000d5e:	42b8      	cmp	r0, r7
 8000d60:	4180      	sbcs	r0, r0
 8000d62:	4240      	negs	r0, r0
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	e678      	b.n	8000a5a <__aeabi_dadd+0x62>
 8000d68:	000e      	movs	r6, r1
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	4306      	orrs	r6, r0
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d161      	bne.n	8000e38 <__aeabi_dadd+0x440>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d000      	beq.n	8000d7a <__aeabi_dadd+0x382>
 8000d78:	e0f4      	b.n	8000f64 <__aeabi_dadd+0x56c>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_dadd+0x388>
 8000d7e:	e11b      	b.n	8000fb8 <__aeabi_dadd+0x5c0>
 8000d80:	4664      	mov	r4, ip
 8000d82:	0039      	movs	r1, r7
 8000d84:	0010      	movs	r0, r2
 8000d86:	e739      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000d88:	4f1a      	ldr	r7, [pc, #104]	; (8000df4 <__aeabi_dadd+0x3fc>)
 8000d8a:	42bb      	cmp	r3, r7
 8000d8c:	d07a      	beq.n	8000e84 <__aeabi_dadd+0x48c>
 8000d8e:	0033      	movs	r3, r6
 8000d90:	e6ff      	b.n	8000b92 <__aeabi_dadd+0x19a>
 8000d92:	0030      	movs	r0, r6
 8000d94:	3d1f      	subs	r5, #31
 8000d96:	40e8      	lsrs	r0, r5
 8000d98:	2b20      	cmp	r3, #32
 8000d9a:	d003      	beq.n	8000da4 <__aeabi_dadd+0x3ac>
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	409e      	lsls	r6, r3
 8000da2:	4337      	orrs	r7, r6
 8000da4:	1e7b      	subs	r3, r7, #1
 8000da6:	419f      	sbcs	r7, r3
 8000da8:	2207      	movs	r2, #7
 8000daa:	4307      	orrs	r7, r0
 8000dac:	403a      	ands	r2, r7
 8000dae:	2100      	movs	r1, #0
 8000db0:	2500      	movs	r5, #0
 8000db2:	e789      	b.n	8000cc8 <__aeabi_dadd+0x2d0>
 8000db4:	1a17      	subs	r7, r2, r0
 8000db6:	4643      	mov	r3, r8
 8000db8:	42ba      	cmp	r2, r7
 8000dba:	41b6      	sbcs	r6, r6
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	4276      	negs	r6, r6
 8000dc0:	1b8e      	subs	r6, r1, r6
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	e64e      	b.n	8000a64 <__aeabi_dadd+0x6c>
 8000dc6:	2b1f      	cmp	r3, #31
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_dadd+0x3d4>
 8000dca:	e0ad      	b.n	8000f28 <__aeabi_dadd+0x530>
 8000dcc:	2620      	movs	r6, #32
 8000dce:	4647      	mov	r7, r8
 8000dd0:	1af6      	subs	r6, r6, r3
 8000dd2:	40b7      	lsls	r7, r6
 8000dd4:	46b9      	mov	r9, r7
 8000dd6:	0017      	movs	r7, r2
 8000dd8:	46b2      	mov	sl, r6
 8000dda:	40df      	lsrs	r7, r3
 8000ddc:	464e      	mov	r6, r9
 8000dde:	433e      	orrs	r6, r7
 8000de0:	0037      	movs	r7, r6
 8000de2:	4656      	mov	r6, sl
 8000de4:	40b2      	lsls	r2, r6
 8000de6:	1e56      	subs	r6, r2, #1
 8000de8:	41b2      	sbcs	r2, r6
 8000dea:	4317      	orrs	r7, r2
 8000dec:	4642      	mov	r2, r8
 8000dee:	40da      	lsrs	r2, r3
 8000df0:	1889      	adds	r1, r1, r2
 8000df2:	e6ae      	b.n	8000b52 <__aeabi_dadd+0x15a>
 8000df4:	000007ff 	.word	0x000007ff
 8000df8:	ff7fffff 	.word	0xff7fffff
 8000dfc:	800fffff 	.word	0x800fffff
 8000e00:	2620      	movs	r6, #32
 8000e02:	4647      	mov	r7, r8
 8000e04:	1af6      	subs	r6, r6, r3
 8000e06:	40b7      	lsls	r7, r6
 8000e08:	46b9      	mov	r9, r7
 8000e0a:	0017      	movs	r7, r2
 8000e0c:	46b2      	mov	sl, r6
 8000e0e:	40df      	lsrs	r7, r3
 8000e10:	464e      	mov	r6, r9
 8000e12:	433e      	orrs	r6, r7
 8000e14:	0037      	movs	r7, r6
 8000e16:	4656      	mov	r6, sl
 8000e18:	40b2      	lsls	r2, r6
 8000e1a:	1e56      	subs	r6, r2, #1
 8000e1c:	41b2      	sbcs	r2, r6
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	4642      	mov	r2, r8
 8000e22:	40da      	lsrs	r2, r3
 8000e24:	1a89      	subs	r1, r1, r2
 8000e26:	e799      	b.n	8000d5c <__aeabi_dadd+0x364>
 8000e28:	4c7f      	ldr	r4, [pc, #508]	; (8001028 <__aeabi_dadd+0x630>)
 8000e2a:	42a6      	cmp	r6, r4
 8000e2c:	d05b      	beq.n	8000ee6 <__aeabi_dadd+0x4ee>
 8000e2e:	2480      	movs	r4, #128	; 0x80
 8000e30:	0424      	lsls	r4, r4, #16
 8000e32:	425b      	negs	r3, r3
 8000e34:	4321      	orrs	r1, r4
 8000e36:	e727      	b.n	8000c88 <__aeabi_dadd+0x290>
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d10c      	bne.n	8000e56 <__aeabi_dadd+0x45e>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dadd+0x44a>
 8000e40:	e0cb      	b.n	8000fda <__aeabi_dadd+0x5e2>
 8000e42:	4664      	mov	r4, ip
 8000e44:	0039      	movs	r1, r7
 8000e46:	0010      	movs	r0, r2
 8000e48:	4d77      	ldr	r5, [pc, #476]	; (8001028 <__aeabi_dadd+0x630>)
 8000e4a:	e6d7      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000e4c:	4f76      	ldr	r7, [pc, #472]	; (8001028 <__aeabi_dadd+0x630>)
 8000e4e:	42bb      	cmp	r3, r7
 8000e50:	d018      	beq.n	8000e84 <__aeabi_dadd+0x48c>
 8000e52:	0033      	movs	r3, r6
 8000e54:	e675      	b.n	8000b42 <__aeabi_dadd+0x14a>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d014      	beq.n	8000e84 <__aeabi_dadd+0x48c>
 8000e5a:	074b      	lsls	r3, r1, #29
 8000e5c:	08c0      	lsrs	r0, r0, #3
 8000e5e:	4318      	orrs	r0, r3
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	08c9      	lsrs	r1, r1, #3
 8000e64:	031b      	lsls	r3, r3, #12
 8000e66:	4219      	tst	r1, r3
 8000e68:	d007      	beq.n	8000e7a <__aeabi_dadd+0x482>
 8000e6a:	08fc      	lsrs	r4, r7, #3
 8000e6c:	421c      	tst	r4, r3
 8000e6e:	d104      	bne.n	8000e7a <__aeabi_dadd+0x482>
 8000e70:	0779      	lsls	r1, r7, #29
 8000e72:	08d0      	lsrs	r0, r2, #3
 8000e74:	4308      	orrs	r0, r1
 8000e76:	46e1      	mov	r9, ip
 8000e78:	0021      	movs	r1, r4
 8000e7a:	464c      	mov	r4, r9
 8000e7c:	0f42      	lsrs	r2, r0, #29
 8000e7e:	00c9      	lsls	r1, r1, #3
 8000e80:	4311      	orrs	r1, r2
 8000e82:	00c0      	lsls	r0, r0, #3
 8000e84:	4d68      	ldr	r5, [pc, #416]	; (8001028 <__aeabi_dadd+0x630>)
 8000e86:	e6b9      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000e88:	001d      	movs	r5, r3
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e6c0      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d15b      	bne.n	8000f4c <__aeabi_dadd+0x554>
 8000e94:	000d      	movs	r5, r1
 8000e96:	4305      	orrs	r5, r0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x4a4>
 8000e9a:	e6e2      	b.n	8000c62 <__aeabi_dadd+0x26a>
 8000e9c:	1c5d      	adds	r5, r3, #1
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x4aa>
 8000ea0:	e0b0      	b.n	8001004 <__aeabi_dadd+0x60c>
 8000ea2:	4d61      	ldr	r5, [pc, #388]	; (8001028 <__aeabi_dadd+0x630>)
 8000ea4:	42ae      	cmp	r6, r5
 8000ea6:	d01f      	beq.n	8000ee8 <__aeabi_dadd+0x4f0>
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	2b38      	cmp	r3, #56	; 0x38
 8000eac:	dc71      	bgt.n	8000f92 <__aeabi_dadd+0x59a>
 8000eae:	2b1f      	cmp	r3, #31
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_dadd+0x4bc>
 8000eb2:	e096      	b.n	8000fe2 <__aeabi_dadd+0x5ea>
 8000eb4:	2520      	movs	r5, #32
 8000eb6:	000f      	movs	r7, r1
 8000eb8:	1aed      	subs	r5, r5, r3
 8000eba:	40af      	lsls	r7, r5
 8000ebc:	46b9      	mov	r9, r7
 8000ebe:	0007      	movs	r7, r0
 8000ec0:	46aa      	mov	sl, r5
 8000ec2:	40df      	lsrs	r7, r3
 8000ec4:	464d      	mov	r5, r9
 8000ec6:	433d      	orrs	r5, r7
 8000ec8:	002f      	movs	r7, r5
 8000eca:	4655      	mov	r5, sl
 8000ecc:	40a8      	lsls	r0, r5
 8000ece:	40d9      	lsrs	r1, r3
 8000ed0:	1e45      	subs	r5, r0, #1
 8000ed2:	41a8      	sbcs	r0, r5
 8000ed4:	4488      	add	r8, r1
 8000ed6:	4307      	orrs	r7, r0
 8000ed8:	18bf      	adds	r7, r7, r2
 8000eda:	4297      	cmp	r7, r2
 8000edc:	4192      	sbcs	r2, r2
 8000ede:	4251      	negs	r1, r2
 8000ee0:	4441      	add	r1, r8
 8000ee2:	0035      	movs	r5, r6
 8000ee4:	e63a      	b.n	8000b5c <__aeabi_dadd+0x164>
 8000ee6:	4664      	mov	r4, ip
 8000ee8:	0035      	movs	r5, r6
 8000eea:	4641      	mov	r1, r8
 8000eec:	0010      	movs	r0, r2
 8000eee:	e685      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000ef0:	000b      	movs	r3, r1
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d000      	beq.n	8000efa <__aeabi_dadd+0x502>
 8000ef8:	e663      	b.n	8000bc2 <__aeabi_dadd+0x1ca>
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f5      	beq.n	8000eea <__aeabi_dadd+0x4f2>
 8000efe:	4643      	mov	r3, r8
 8000f00:	4313      	orrs	r3, r2
 8000f02:	d100      	bne.n	8000f06 <__aeabi_dadd+0x50e>
 8000f04:	e67a      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000f06:	1887      	adds	r7, r0, r2
 8000f08:	4287      	cmp	r7, r0
 8000f0a:	4180      	sbcs	r0, r0
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	4441      	add	r1, r8
 8000f10:	4240      	negs	r0, r0
 8000f12:	1809      	adds	r1, r1, r0
 8000f14:	403a      	ands	r2, r7
 8000f16:	020b      	lsls	r3, r1, #8
 8000f18:	d400      	bmi.n	8000f1c <__aeabi_dadd+0x524>
 8000f1a:	e6d5      	b.n	8000cc8 <__aeabi_dadd+0x2d0>
 8000f1c:	4b43      	ldr	r3, [pc, #268]	; (800102c <__aeabi_dadd+0x634>)
 8000f1e:	3501      	adds	r5, #1
 8000f20:	4019      	ands	r1, r3
 8000f22:	e5c9      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000f24:	0038      	movs	r0, r7
 8000f26:	e669      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000f28:	001e      	movs	r6, r3
 8000f2a:	4647      	mov	r7, r8
 8000f2c:	3e20      	subs	r6, #32
 8000f2e:	40f7      	lsrs	r7, r6
 8000f30:	46bc      	mov	ip, r7
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	d004      	beq.n	8000f40 <__aeabi_dadd+0x548>
 8000f36:	2640      	movs	r6, #64	; 0x40
 8000f38:	1af3      	subs	r3, r6, r3
 8000f3a:	4646      	mov	r6, r8
 8000f3c:	409e      	lsls	r6, r3
 8000f3e:	4332      	orrs	r2, r6
 8000f40:	0017      	movs	r7, r2
 8000f42:	4663      	mov	r3, ip
 8000f44:	1e7a      	subs	r2, r7, #1
 8000f46:	4197      	sbcs	r7, r2
 8000f48:	431f      	orrs	r7, r3
 8000f4a:	e602      	b.n	8000b52 <__aeabi_dadd+0x15a>
 8000f4c:	4d36      	ldr	r5, [pc, #216]	; (8001028 <__aeabi_dadd+0x630>)
 8000f4e:	42ae      	cmp	r6, r5
 8000f50:	d0ca      	beq.n	8000ee8 <__aeabi_dadd+0x4f0>
 8000f52:	2580      	movs	r5, #128	; 0x80
 8000f54:	042d      	lsls	r5, r5, #16
 8000f56:	425b      	negs	r3, r3
 8000f58:	4329      	orrs	r1, r5
 8000f5a:	e7a6      	b.n	8000eaa <__aeabi_dadd+0x4b2>
 8000f5c:	4308      	orrs	r0, r1
 8000f5e:	1e41      	subs	r1, r0, #1
 8000f60:	4188      	sbcs	r0, r1
 8000f62:	e6a6      	b.n	8000cb2 <__aeabi_dadd+0x2ba>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0x572>
 8000f68:	e648      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000f6a:	1a87      	subs	r7, r0, r2
 8000f6c:	4643      	mov	r3, r8
 8000f6e:	42b8      	cmp	r0, r7
 8000f70:	41b6      	sbcs	r6, r6
 8000f72:	1acb      	subs	r3, r1, r3
 8000f74:	4276      	negs	r6, r6
 8000f76:	1b9e      	subs	r6, r3, r6
 8000f78:	0233      	lsls	r3, r6, #8
 8000f7a:	d54b      	bpl.n	8001014 <__aeabi_dadd+0x61c>
 8000f7c:	1a17      	subs	r7, r2, r0
 8000f7e:	4643      	mov	r3, r8
 8000f80:	42ba      	cmp	r2, r7
 8000f82:	4192      	sbcs	r2, r2
 8000f84:	1a59      	subs	r1, r3, r1
 8000f86:	4252      	negs	r2, r2
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	4664      	mov	r4, ip
 8000f8e:	403a      	ands	r2, r7
 8000f90:	e592      	b.n	8000ab8 <__aeabi_dadd+0xc0>
 8000f92:	4301      	orrs	r1, r0
 8000f94:	000f      	movs	r7, r1
 8000f96:	1e79      	subs	r1, r7, #1
 8000f98:	418f      	sbcs	r7, r1
 8000f9a:	e79d      	b.n	8000ed8 <__aeabi_dadd+0x4e0>
 8000f9c:	001c      	movs	r4, r3
 8000f9e:	000f      	movs	r7, r1
 8000fa0:	3c20      	subs	r4, #32
 8000fa2:	40e7      	lsrs	r7, r4
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	d003      	beq.n	8000fb0 <__aeabi_dadd+0x5b8>
 8000fa8:	2440      	movs	r4, #64	; 0x40
 8000faa:	1ae3      	subs	r3, r4, r3
 8000fac:	4099      	lsls	r1, r3
 8000fae:	4308      	orrs	r0, r1
 8000fb0:	1e41      	subs	r1, r0, #1
 8000fb2:	4188      	sbcs	r0, r1
 8000fb4:	4338      	orrs	r0, r7
 8000fb6:	e67c      	b.n	8000cb2 <__aeabi_dadd+0x2ba>
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2400      	movs	r4, #0
 8000fbc:	e625      	b.n	8000c0a <__aeabi_dadd+0x212>
 8000fbe:	1a17      	subs	r7, r2, r0
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	42ba      	cmp	r2, r7
 8000fc4:	4192      	sbcs	r2, r2
 8000fc6:	1a59      	subs	r1, r3, r1
 8000fc8:	4252      	negs	r2, r2
 8000fca:	1a89      	subs	r1, r1, r2
 8000fcc:	4664      	mov	r4, ip
 8000fce:	0035      	movs	r5, r6
 8000fd0:	e543      	b.n	8000a5a <__aeabi_dadd+0x62>
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	0010      	movs	r0, r2
 8000fd6:	4d14      	ldr	r5, [pc, #80]	; (8001028 <__aeabi_dadd+0x630>)
 8000fd8:	e610      	b.n	8000bfc <__aeabi_dadd+0x204>
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	2400      	movs	r4, #0
 8000fde:	0312      	lsls	r2, r2, #12
 8000fe0:	e680      	b.n	8000ce4 <__aeabi_dadd+0x2ec>
 8000fe2:	001d      	movs	r5, r3
 8000fe4:	000f      	movs	r7, r1
 8000fe6:	3d20      	subs	r5, #32
 8000fe8:	40ef      	lsrs	r7, r5
 8000fea:	46bc      	mov	ip, r7
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d003      	beq.n	8000ff8 <__aeabi_dadd+0x600>
 8000ff0:	2540      	movs	r5, #64	; 0x40
 8000ff2:	1aeb      	subs	r3, r5, r3
 8000ff4:	4099      	lsls	r1, r3
 8000ff6:	4308      	orrs	r0, r1
 8000ff8:	0007      	movs	r7, r0
 8000ffa:	4663      	mov	r3, ip
 8000ffc:	1e78      	subs	r0, r7, #1
 8000ffe:	4187      	sbcs	r7, r0
 8001000:	431f      	orrs	r7, r3
 8001002:	e769      	b.n	8000ed8 <__aeabi_dadd+0x4e0>
 8001004:	1887      	adds	r7, r0, r2
 8001006:	4297      	cmp	r7, r2
 8001008:	419b      	sbcs	r3, r3
 800100a:	4441      	add	r1, r8
 800100c:	425b      	negs	r3, r3
 800100e:	18c9      	adds	r1, r1, r3
 8001010:	0035      	movs	r5, r6
 8001012:	e5a3      	b.n	8000b5c <__aeabi_dadd+0x164>
 8001014:	003b      	movs	r3, r7
 8001016:	4333      	orrs	r3, r6
 8001018:	d0ce      	beq.n	8000fb8 <__aeabi_dadd+0x5c0>
 800101a:	2207      	movs	r2, #7
 800101c:	0031      	movs	r1, r6
 800101e:	403a      	ands	r2, r7
 8001020:	e652      	b.n	8000cc8 <__aeabi_dadd+0x2d0>
 8001022:	2300      	movs	r3, #0
 8001024:	001a      	movs	r2, r3
 8001026:	e5f4      	b.n	8000c12 <__aeabi_dadd+0x21a>
 8001028:	000007ff 	.word	0x000007ff
 800102c:	ff7fffff 	.word	0xff7fffff

08001030 <__aeabi_ddiv>:
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	4657      	mov	r7, sl
 8001034:	46de      	mov	lr, fp
 8001036:	464e      	mov	r6, r9
 8001038:	4645      	mov	r5, r8
 800103a:	b5e0      	push	{r5, r6, r7, lr}
 800103c:	4683      	mov	fp, r0
 800103e:	0007      	movs	r7, r0
 8001040:	030e      	lsls	r6, r1, #12
 8001042:	0048      	lsls	r0, r1, #1
 8001044:	b085      	sub	sp, #20
 8001046:	4692      	mov	sl, r2
 8001048:	001c      	movs	r4, r3
 800104a:	0b36      	lsrs	r6, r6, #12
 800104c:	0d40      	lsrs	r0, r0, #21
 800104e:	0fcd      	lsrs	r5, r1, #31
 8001050:	2800      	cmp	r0, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x26>
 8001054:	e09d      	b.n	8001192 <__aeabi_ddiv+0x162>
 8001056:	4b95      	ldr	r3, [pc, #596]	; (80012ac <__aeabi_ddiv+0x27c>)
 8001058:	4298      	cmp	r0, r3
 800105a:	d039      	beq.n	80010d0 <__aeabi_ddiv+0xa0>
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	00f6      	lsls	r6, r6, #3
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	431e      	orrs	r6, r3
 8001064:	4a92      	ldr	r2, [pc, #584]	; (80012b0 <__aeabi_ddiv+0x280>)
 8001066:	0f7b      	lsrs	r3, r7, #29
 8001068:	4333      	orrs	r3, r6
 800106a:	4699      	mov	r9, r3
 800106c:	4694      	mov	ip, r2
 800106e:	0003      	movs	r3, r0
 8001070:	4463      	add	r3, ip
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	2600      	movs	r6, #0
 8001078:	00ff      	lsls	r7, r7, #3
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	0323      	lsls	r3, r4, #12
 800107e:	0b1b      	lsrs	r3, r3, #12
 8001080:	4698      	mov	r8, r3
 8001082:	0063      	lsls	r3, r4, #1
 8001084:	0fe4      	lsrs	r4, r4, #31
 8001086:	4652      	mov	r2, sl
 8001088:	0d5b      	lsrs	r3, r3, #21
 800108a:	9401      	str	r4, [sp, #4]
 800108c:	d100      	bne.n	8001090 <__aeabi_ddiv+0x60>
 800108e:	e0b3      	b.n	80011f8 <__aeabi_ddiv+0x1c8>
 8001090:	4986      	ldr	r1, [pc, #536]	; (80012ac <__aeabi_ddiv+0x27c>)
 8001092:	428b      	cmp	r3, r1
 8001094:	d100      	bne.n	8001098 <__aeabi_ddiv+0x68>
 8001096:	e09e      	b.n	80011d6 <__aeabi_ddiv+0x1a6>
 8001098:	4642      	mov	r2, r8
 800109a:	00d1      	lsls	r1, r2, #3
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	0412      	lsls	r2, r2, #16
 80010a0:	430a      	orrs	r2, r1
 80010a2:	4651      	mov	r1, sl
 80010a4:	0f49      	lsrs	r1, r1, #29
 80010a6:	4311      	orrs	r1, r2
 80010a8:	468b      	mov	fp, r1
 80010aa:	4981      	ldr	r1, [pc, #516]	; (80012b0 <__aeabi_ddiv+0x280>)
 80010ac:	4652      	mov	r2, sl
 80010ae:	468c      	mov	ip, r1
 80010b0:	9900      	ldr	r1, [sp, #0]
 80010b2:	4463      	add	r3, ip
 80010b4:	1acb      	subs	r3, r1, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	00d2      	lsls	r2, r2, #3
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	002b      	movs	r3, r5
 80010be:	4063      	eors	r3, r4
 80010c0:	469a      	mov	sl, r3
 80010c2:	2e0f      	cmp	r6, #15
 80010c4:	d900      	bls.n	80010c8 <__aeabi_ddiv+0x98>
 80010c6:	e105      	b.n	80012d4 <__aeabi_ddiv+0x2a4>
 80010c8:	4b7a      	ldr	r3, [pc, #488]	; (80012b4 <__aeabi_ddiv+0x284>)
 80010ca:	00b6      	lsls	r6, r6, #2
 80010cc:	599b      	ldr	r3, [r3, r6]
 80010ce:	469f      	mov	pc, r3
 80010d0:	465b      	mov	r3, fp
 80010d2:	4333      	orrs	r3, r6
 80010d4:	4699      	mov	r9, r3
 80010d6:	d000      	beq.n	80010da <__aeabi_ddiv+0xaa>
 80010d8:	e0b8      	b.n	800124c <__aeabi_ddiv+0x21c>
 80010da:	2302      	movs	r3, #2
 80010dc:	2608      	movs	r6, #8
 80010de:	2700      	movs	r7, #0
 80010e0:	9000      	str	r0, [sp, #0]
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	e7ca      	b.n	800107c <__aeabi_ddiv+0x4c>
 80010e6:	46cb      	mov	fp, r9
 80010e8:	003a      	movs	r2, r7
 80010ea:	9902      	ldr	r1, [sp, #8]
 80010ec:	9501      	str	r5, [sp, #4]
 80010ee:	9b01      	ldr	r3, [sp, #4]
 80010f0:	469a      	mov	sl, r3
 80010f2:	2902      	cmp	r1, #2
 80010f4:	d027      	beq.n	8001146 <__aeabi_ddiv+0x116>
 80010f6:	2903      	cmp	r1, #3
 80010f8:	d100      	bne.n	80010fc <__aeabi_ddiv+0xcc>
 80010fa:	e280      	b.n	80015fe <__aeabi_ddiv+0x5ce>
 80010fc:	2901      	cmp	r1, #1
 80010fe:	d044      	beq.n	800118a <__aeabi_ddiv+0x15a>
 8001100:	496d      	ldr	r1, [pc, #436]	; (80012b8 <__aeabi_ddiv+0x288>)
 8001102:	9b00      	ldr	r3, [sp, #0]
 8001104:	468c      	mov	ip, r1
 8001106:	4463      	add	r3, ip
 8001108:	001c      	movs	r4, r3
 800110a:	2c00      	cmp	r4, #0
 800110c:	dd38      	ble.n	8001180 <__aeabi_ddiv+0x150>
 800110e:	0753      	lsls	r3, r2, #29
 8001110:	d000      	beq.n	8001114 <__aeabi_ddiv+0xe4>
 8001112:	e213      	b.n	800153c <__aeabi_ddiv+0x50c>
 8001114:	08d2      	lsrs	r2, r2, #3
 8001116:	465b      	mov	r3, fp
 8001118:	01db      	lsls	r3, r3, #7
 800111a:	d509      	bpl.n	8001130 <__aeabi_ddiv+0x100>
 800111c:	4659      	mov	r1, fp
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <__aeabi_ddiv+0x28c>)
 8001120:	4019      	ands	r1, r3
 8001122:	468b      	mov	fp, r1
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	00c9      	lsls	r1, r1, #3
 8001128:	468c      	mov	ip, r1
 800112a:	9b00      	ldr	r3, [sp, #0]
 800112c:	4463      	add	r3, ip
 800112e:	001c      	movs	r4, r3
 8001130:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <__aeabi_ddiv+0x290>)
 8001132:	429c      	cmp	r4, r3
 8001134:	dc07      	bgt.n	8001146 <__aeabi_ddiv+0x116>
 8001136:	465b      	mov	r3, fp
 8001138:	0564      	lsls	r4, r4, #21
 800113a:	075f      	lsls	r7, r3, #29
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	4317      	orrs	r7, r2
 8001140:	0b1b      	lsrs	r3, r3, #12
 8001142:	0d62      	lsrs	r2, r4, #21
 8001144:	e002      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001146:	2300      	movs	r3, #0
 8001148:	2700      	movs	r7, #0
 800114a:	4a58      	ldr	r2, [pc, #352]	; (80012ac <__aeabi_ddiv+0x27c>)
 800114c:	2100      	movs	r1, #0
 800114e:	031b      	lsls	r3, r3, #12
 8001150:	0b1c      	lsrs	r4, r3, #12
 8001152:	0d0b      	lsrs	r3, r1, #20
 8001154:	051b      	lsls	r3, r3, #20
 8001156:	4323      	orrs	r3, r4
 8001158:	0514      	lsls	r4, r2, #20
 800115a:	4a5a      	ldr	r2, [pc, #360]	; (80012c4 <__aeabi_ddiv+0x294>)
 800115c:	0038      	movs	r0, r7
 800115e:	4013      	ands	r3, r2
 8001160:	431c      	orrs	r4, r3
 8001162:	4653      	mov	r3, sl
 8001164:	0064      	lsls	r4, r4, #1
 8001166:	07db      	lsls	r3, r3, #31
 8001168:	0864      	lsrs	r4, r4, #1
 800116a:	431c      	orrs	r4, r3
 800116c:	0021      	movs	r1, r4
 800116e:	b005      	add	sp, #20
 8001170:	bc3c      	pop	{r2, r3, r4, r5}
 8001172:	4690      	mov	r8, r2
 8001174:	4699      	mov	r9, r3
 8001176:	46a2      	mov	sl, r4
 8001178:	46ab      	mov	fp, r5
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117c:	2201      	movs	r2, #1
 800117e:	4252      	negs	r2, r2
 8001180:	2301      	movs	r3, #1
 8001182:	1b1b      	subs	r3, r3, r4
 8001184:	2b38      	cmp	r3, #56	; 0x38
 8001186:	dc00      	bgt.n	800118a <__aeabi_ddiv+0x15a>
 8001188:	e1ad      	b.n	80014e6 <__aeabi_ddiv+0x4b6>
 800118a:	2200      	movs	r2, #0
 800118c:	2300      	movs	r3, #0
 800118e:	2700      	movs	r7, #0
 8001190:	e7dc      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001192:	465b      	mov	r3, fp
 8001194:	4333      	orrs	r3, r6
 8001196:	4699      	mov	r9, r3
 8001198:	d05e      	beq.n	8001258 <__aeabi_ddiv+0x228>
 800119a:	2e00      	cmp	r6, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x170>
 800119e:	e18a      	b.n	80014b6 <__aeabi_ddiv+0x486>
 80011a0:	0030      	movs	r0, r6
 80011a2:	f001 fa67 	bl	8002674 <__clzsi2>
 80011a6:	0003      	movs	r3, r0
 80011a8:	3b0b      	subs	r3, #11
 80011aa:	2b1c      	cmp	r3, #28
 80011ac:	dd00      	ble.n	80011b0 <__aeabi_ddiv+0x180>
 80011ae:	e17b      	b.n	80014a8 <__aeabi_ddiv+0x478>
 80011b0:	221d      	movs	r2, #29
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	465a      	mov	r2, fp
 80011b6:	0001      	movs	r1, r0
 80011b8:	40da      	lsrs	r2, r3
 80011ba:	3908      	subs	r1, #8
 80011bc:	408e      	lsls	r6, r1
 80011be:	0013      	movs	r3, r2
 80011c0:	465f      	mov	r7, fp
 80011c2:	4333      	orrs	r3, r6
 80011c4:	4699      	mov	r9, r3
 80011c6:	408f      	lsls	r7, r1
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <__aeabi_ddiv+0x298>)
 80011ca:	2600      	movs	r6, #0
 80011cc:	1a1b      	subs	r3, r3, r0
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	e752      	b.n	800107c <__aeabi_ddiv+0x4c>
 80011d6:	4641      	mov	r1, r8
 80011d8:	4653      	mov	r3, sl
 80011da:	430b      	orrs	r3, r1
 80011dc:	493b      	ldr	r1, [pc, #236]	; (80012cc <__aeabi_ddiv+0x29c>)
 80011de:	469b      	mov	fp, r3
 80011e0:	468c      	mov	ip, r1
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	4463      	add	r3, ip
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	465b      	mov	r3, fp
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d13b      	bne.n	8001266 <__aeabi_ddiv+0x236>
 80011ee:	2302      	movs	r3, #2
 80011f0:	2200      	movs	r2, #0
 80011f2:	431e      	orrs	r6, r3
 80011f4:	2102      	movs	r1, #2
 80011f6:	e761      	b.n	80010bc <__aeabi_ddiv+0x8c>
 80011f8:	4643      	mov	r3, r8
 80011fa:	4313      	orrs	r3, r2
 80011fc:	469b      	mov	fp, r3
 80011fe:	d037      	beq.n	8001270 <__aeabi_ddiv+0x240>
 8001200:	4643      	mov	r3, r8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_ddiv+0x1d8>
 8001206:	e162      	b.n	80014ce <__aeabi_ddiv+0x49e>
 8001208:	4640      	mov	r0, r8
 800120a:	f001 fa33 	bl	8002674 <__clzsi2>
 800120e:	0003      	movs	r3, r0
 8001210:	3b0b      	subs	r3, #11
 8001212:	2b1c      	cmp	r3, #28
 8001214:	dd00      	ble.n	8001218 <__aeabi_ddiv+0x1e8>
 8001216:	e153      	b.n	80014c0 <__aeabi_ddiv+0x490>
 8001218:	0002      	movs	r2, r0
 800121a:	4641      	mov	r1, r8
 800121c:	3a08      	subs	r2, #8
 800121e:	4091      	lsls	r1, r2
 8001220:	4688      	mov	r8, r1
 8001222:	211d      	movs	r1, #29
 8001224:	1acb      	subs	r3, r1, r3
 8001226:	4651      	mov	r1, sl
 8001228:	40d9      	lsrs	r1, r3
 800122a:	000b      	movs	r3, r1
 800122c:	4641      	mov	r1, r8
 800122e:	430b      	orrs	r3, r1
 8001230:	469b      	mov	fp, r3
 8001232:	4653      	mov	r3, sl
 8001234:	4093      	lsls	r3, r2
 8001236:	001a      	movs	r2, r3
 8001238:	9b00      	ldr	r3, [sp, #0]
 800123a:	4925      	ldr	r1, [pc, #148]	; (80012d0 <__aeabi_ddiv+0x2a0>)
 800123c:	469c      	mov	ip, r3
 800123e:	4460      	add	r0, ip
 8001240:	0003      	movs	r3, r0
 8001242:	468c      	mov	ip, r1
 8001244:	4463      	add	r3, ip
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2100      	movs	r1, #0
 800124a:	e737      	b.n	80010bc <__aeabi_ddiv+0x8c>
 800124c:	2303      	movs	r3, #3
 800124e:	46b1      	mov	r9, r6
 8001250:	9000      	str	r0, [sp, #0]
 8001252:	260c      	movs	r6, #12
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	e711      	b.n	800107c <__aeabi_ddiv+0x4c>
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	2604      	movs	r6, #4
 8001260:	2700      	movs	r7, #0
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	e70a      	b.n	800107c <__aeabi_ddiv+0x4c>
 8001266:	2303      	movs	r3, #3
 8001268:	46c3      	mov	fp, r8
 800126a:	431e      	orrs	r6, r3
 800126c:	2103      	movs	r1, #3
 800126e:	e725      	b.n	80010bc <__aeabi_ddiv+0x8c>
 8001270:	3301      	adds	r3, #1
 8001272:	431e      	orrs	r6, r3
 8001274:	2200      	movs	r2, #0
 8001276:	2101      	movs	r1, #1
 8001278:	e720      	b.n	80010bc <__aeabi_ddiv+0x8c>
 800127a:	2300      	movs	r3, #0
 800127c:	469a      	mov	sl, r3
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	2700      	movs	r7, #0
 8001282:	031b      	lsls	r3, r3, #12
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <__aeabi_ddiv+0x27c>)
 8001286:	e761      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	4649      	mov	r1, r9
 800128c:	031b      	lsls	r3, r3, #12
 800128e:	4219      	tst	r1, r3
 8001290:	d100      	bne.n	8001294 <__aeabi_ddiv+0x264>
 8001292:	e0e2      	b.n	800145a <__aeabi_ddiv+0x42a>
 8001294:	4659      	mov	r1, fp
 8001296:	4219      	tst	r1, r3
 8001298:	d000      	beq.n	800129c <__aeabi_ddiv+0x26c>
 800129a:	e0de      	b.n	800145a <__aeabi_ddiv+0x42a>
 800129c:	430b      	orrs	r3, r1
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	0017      	movs	r7, r2
 80012a2:	0b1b      	lsrs	r3, r3, #12
 80012a4:	46a2      	mov	sl, r4
 80012a6:	4a01      	ldr	r2, [pc, #4]	; (80012ac <__aeabi_ddiv+0x27c>)
 80012a8:	e750      	b.n	800114c <__aeabi_ddiv+0x11c>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	000007ff 	.word	0x000007ff
 80012b0:	fffffc01 	.word	0xfffffc01
 80012b4:	08009d78 	.word	0x08009d78
 80012b8:	000003ff 	.word	0x000003ff
 80012bc:	feffffff 	.word	0xfeffffff
 80012c0:	000007fe 	.word	0x000007fe
 80012c4:	800fffff 	.word	0x800fffff
 80012c8:	fffffc0d 	.word	0xfffffc0d
 80012cc:	fffff801 	.word	0xfffff801
 80012d0:	000003f3 	.word	0x000003f3
 80012d4:	45d9      	cmp	r9, fp
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x2aa>
 80012d8:	e0cb      	b.n	8001472 <__aeabi_ddiv+0x442>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x2ae>
 80012dc:	e0c6      	b.n	800146c <__aeabi_ddiv+0x43c>
 80012de:	003c      	movs	r4, r7
 80012e0:	4648      	mov	r0, r9
 80012e2:	2700      	movs	r7, #0
 80012e4:	9b00      	ldr	r3, [sp, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	465b      	mov	r3, fp
 80012ec:	0e16      	lsrs	r6, r2, #24
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	431e      	orrs	r6, r3
 80012f2:	0213      	lsls	r3, r2, #8
 80012f4:	4698      	mov	r8, r3
 80012f6:	0433      	lsls	r3, r6, #16
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	4699      	mov	r9, r3
 80012fc:	0c31      	lsrs	r1, r6, #16
 80012fe:	9101      	str	r1, [sp, #4]
 8001300:	f7fe ff90 	bl	8000224 <__aeabi_uidivmod>
 8001304:	464a      	mov	r2, r9
 8001306:	4342      	muls	r2, r0
 8001308:	040b      	lsls	r3, r1, #16
 800130a:	0c21      	lsrs	r1, r4, #16
 800130c:	0005      	movs	r5, r0
 800130e:	4319      	orrs	r1, r3
 8001310:	428a      	cmp	r2, r1
 8001312:	d907      	bls.n	8001324 <__aeabi_ddiv+0x2f4>
 8001314:	1989      	adds	r1, r1, r6
 8001316:	3d01      	subs	r5, #1
 8001318:	428e      	cmp	r6, r1
 800131a:	d803      	bhi.n	8001324 <__aeabi_ddiv+0x2f4>
 800131c:	428a      	cmp	r2, r1
 800131e:	d901      	bls.n	8001324 <__aeabi_ddiv+0x2f4>
 8001320:	1e85      	subs	r5, r0, #2
 8001322:	1989      	adds	r1, r1, r6
 8001324:	1a88      	subs	r0, r1, r2
 8001326:	9901      	ldr	r1, [sp, #4]
 8001328:	f7fe ff7c 	bl	8000224 <__aeabi_uidivmod>
 800132c:	0409      	lsls	r1, r1, #16
 800132e:	468c      	mov	ip, r1
 8001330:	464a      	mov	r2, r9
 8001332:	0421      	lsls	r1, r4, #16
 8001334:	4664      	mov	r4, ip
 8001336:	4342      	muls	r2, r0
 8001338:	0c09      	lsrs	r1, r1, #16
 800133a:	0003      	movs	r3, r0
 800133c:	4321      	orrs	r1, r4
 800133e:	428a      	cmp	r2, r1
 8001340:	d904      	bls.n	800134c <__aeabi_ddiv+0x31c>
 8001342:	1989      	adds	r1, r1, r6
 8001344:	3b01      	subs	r3, #1
 8001346:	428e      	cmp	r6, r1
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x31c>
 800134a:	e0f1      	b.n	8001530 <__aeabi_ddiv+0x500>
 800134c:	042d      	lsls	r5, r5, #16
 800134e:	431d      	orrs	r5, r3
 8001350:	46ab      	mov	fp, r5
 8001352:	4643      	mov	r3, r8
 8001354:	1a89      	subs	r1, r1, r2
 8001356:	4642      	mov	r2, r8
 8001358:	0c28      	lsrs	r0, r5, #16
 800135a:	0412      	lsls	r2, r2, #16
 800135c:	0c1d      	lsrs	r5, r3, #16
 800135e:	465b      	mov	r3, fp
 8001360:	0c14      	lsrs	r4, r2, #16
 8001362:	0022      	movs	r2, r4
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	435a      	muls	r2, r3
 800136a:	9403      	str	r4, [sp, #12]
 800136c:	436b      	muls	r3, r5
 800136e:	4344      	muls	r4, r0
 8001370:	9502      	str	r5, [sp, #8]
 8001372:	4368      	muls	r0, r5
 8001374:	191b      	adds	r3, r3, r4
 8001376:	0c15      	lsrs	r5, r2, #16
 8001378:	18eb      	adds	r3, r5, r3
 800137a:	429c      	cmp	r4, r3
 800137c:	d903      	bls.n	8001386 <__aeabi_ddiv+0x356>
 800137e:	2480      	movs	r4, #128	; 0x80
 8001380:	0264      	lsls	r4, r4, #9
 8001382:	46a4      	mov	ip, r4
 8001384:	4460      	add	r0, ip
 8001386:	0c1c      	lsrs	r4, r3, #16
 8001388:	0415      	lsls	r5, r2, #16
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	0c2d      	lsrs	r5, r5, #16
 800138e:	1820      	adds	r0, r4, r0
 8001390:	195d      	adds	r5, r3, r5
 8001392:	4281      	cmp	r1, r0
 8001394:	d377      	bcc.n	8001486 <__aeabi_ddiv+0x456>
 8001396:	d073      	beq.n	8001480 <__aeabi_ddiv+0x450>
 8001398:	1a0c      	subs	r4, r1, r0
 800139a:	4aa2      	ldr	r2, [pc, #648]	; (8001624 <__aeabi_ddiv+0x5f4>)
 800139c:	1b7d      	subs	r5, r7, r5
 800139e:	42af      	cmp	r7, r5
 80013a0:	41bf      	sbcs	r7, r7
 80013a2:	4694      	mov	ip, r2
 80013a4:	9b00      	ldr	r3, [sp, #0]
 80013a6:	427f      	negs	r7, r7
 80013a8:	4463      	add	r3, ip
 80013aa:	1be0      	subs	r0, r4, r7
 80013ac:	001c      	movs	r4, r3
 80013ae:	4286      	cmp	r6, r0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_ddiv+0x384>
 80013b2:	e0db      	b.n	800156c <__aeabi_ddiv+0x53c>
 80013b4:	9901      	ldr	r1, [sp, #4]
 80013b6:	f7fe ff35 	bl	8000224 <__aeabi_uidivmod>
 80013ba:	464a      	mov	r2, r9
 80013bc:	4342      	muls	r2, r0
 80013be:	040b      	lsls	r3, r1, #16
 80013c0:	0c29      	lsrs	r1, r5, #16
 80013c2:	0007      	movs	r7, r0
 80013c4:	4319      	orrs	r1, r3
 80013c6:	428a      	cmp	r2, r1
 80013c8:	d907      	bls.n	80013da <__aeabi_ddiv+0x3aa>
 80013ca:	1989      	adds	r1, r1, r6
 80013cc:	3f01      	subs	r7, #1
 80013ce:	428e      	cmp	r6, r1
 80013d0:	d803      	bhi.n	80013da <__aeabi_ddiv+0x3aa>
 80013d2:	428a      	cmp	r2, r1
 80013d4:	d901      	bls.n	80013da <__aeabi_ddiv+0x3aa>
 80013d6:	1e87      	subs	r7, r0, #2
 80013d8:	1989      	adds	r1, r1, r6
 80013da:	1a88      	subs	r0, r1, r2
 80013dc:	9901      	ldr	r1, [sp, #4]
 80013de:	f7fe ff21 	bl	8000224 <__aeabi_uidivmod>
 80013e2:	0409      	lsls	r1, r1, #16
 80013e4:	464a      	mov	r2, r9
 80013e6:	4689      	mov	r9, r1
 80013e8:	0429      	lsls	r1, r5, #16
 80013ea:	464d      	mov	r5, r9
 80013ec:	4342      	muls	r2, r0
 80013ee:	0c09      	lsrs	r1, r1, #16
 80013f0:	0003      	movs	r3, r0
 80013f2:	4329      	orrs	r1, r5
 80013f4:	428a      	cmp	r2, r1
 80013f6:	d907      	bls.n	8001408 <__aeabi_ddiv+0x3d8>
 80013f8:	1989      	adds	r1, r1, r6
 80013fa:	3b01      	subs	r3, #1
 80013fc:	428e      	cmp	r6, r1
 80013fe:	d803      	bhi.n	8001408 <__aeabi_ddiv+0x3d8>
 8001400:	428a      	cmp	r2, r1
 8001402:	d901      	bls.n	8001408 <__aeabi_ddiv+0x3d8>
 8001404:	1e83      	subs	r3, r0, #2
 8001406:	1989      	adds	r1, r1, r6
 8001408:	043f      	lsls	r7, r7, #16
 800140a:	1a89      	subs	r1, r1, r2
 800140c:	003a      	movs	r2, r7
 800140e:	9f03      	ldr	r7, [sp, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	0038      	movs	r0, r7
 8001414:	0413      	lsls	r3, r2, #16
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	4358      	muls	r0, r3
 800141a:	4681      	mov	r9, r0
 800141c:	9802      	ldr	r0, [sp, #8]
 800141e:	0c15      	lsrs	r5, r2, #16
 8001420:	436f      	muls	r7, r5
 8001422:	4343      	muls	r3, r0
 8001424:	4345      	muls	r5, r0
 8001426:	4648      	mov	r0, r9
 8001428:	0c00      	lsrs	r0, r0, #16
 800142a:	4684      	mov	ip, r0
 800142c:	19db      	adds	r3, r3, r7
 800142e:	4463      	add	r3, ip
 8001430:	429f      	cmp	r7, r3
 8001432:	d903      	bls.n	800143c <__aeabi_ddiv+0x40c>
 8001434:	2080      	movs	r0, #128	; 0x80
 8001436:	0240      	lsls	r0, r0, #9
 8001438:	4684      	mov	ip, r0
 800143a:	4465      	add	r5, ip
 800143c:	4648      	mov	r0, r9
 800143e:	0c1f      	lsrs	r7, r3, #16
 8001440:	0400      	lsls	r0, r0, #16
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	0c00      	lsrs	r0, r0, #16
 8001446:	197d      	adds	r5, r7, r5
 8001448:	1818      	adds	r0, r3, r0
 800144a:	42a9      	cmp	r1, r5
 800144c:	d200      	bcs.n	8001450 <__aeabi_ddiv+0x420>
 800144e:	e084      	b.n	800155a <__aeabi_ddiv+0x52a>
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0x424>
 8001452:	e07f      	b.n	8001554 <__aeabi_ddiv+0x524>
 8001454:	2301      	movs	r3, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	e657      	b.n	800110a <__aeabi_ddiv+0xda>
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	464a      	mov	r2, r9
 800145e:	031b      	lsls	r3, r3, #12
 8001460:	4313      	orrs	r3, r2
 8001462:	031b      	lsls	r3, r3, #12
 8001464:	0b1b      	lsrs	r3, r3, #12
 8001466:	46aa      	mov	sl, r5
 8001468:	4a6f      	ldr	r2, [pc, #444]	; (8001628 <__aeabi_ddiv+0x5f8>)
 800146a:	e66f      	b.n	800114c <__aeabi_ddiv+0x11c>
 800146c:	42ba      	cmp	r2, r7
 800146e:	d900      	bls.n	8001472 <__aeabi_ddiv+0x442>
 8001470:	e735      	b.n	80012de <__aeabi_ddiv+0x2ae>
 8001472:	464b      	mov	r3, r9
 8001474:	07dc      	lsls	r4, r3, #31
 8001476:	0858      	lsrs	r0, r3, #1
 8001478:	087b      	lsrs	r3, r7, #1
 800147a:	431c      	orrs	r4, r3
 800147c:	07ff      	lsls	r7, r7, #31
 800147e:	e734      	b.n	80012ea <__aeabi_ddiv+0x2ba>
 8001480:	2400      	movs	r4, #0
 8001482:	42af      	cmp	r7, r5
 8001484:	d289      	bcs.n	800139a <__aeabi_ddiv+0x36a>
 8001486:	4447      	add	r7, r8
 8001488:	4547      	cmp	r7, r8
 800148a:	41a4      	sbcs	r4, r4
 800148c:	465b      	mov	r3, fp
 800148e:	4264      	negs	r4, r4
 8001490:	19a4      	adds	r4, r4, r6
 8001492:	1864      	adds	r4, r4, r1
 8001494:	3b01      	subs	r3, #1
 8001496:	42a6      	cmp	r6, r4
 8001498:	d21e      	bcs.n	80014d8 <__aeabi_ddiv+0x4a8>
 800149a:	42a0      	cmp	r0, r4
 800149c:	d86d      	bhi.n	800157a <__aeabi_ddiv+0x54a>
 800149e:	d100      	bne.n	80014a2 <__aeabi_ddiv+0x472>
 80014a0:	e0b6      	b.n	8001610 <__aeabi_ddiv+0x5e0>
 80014a2:	1a24      	subs	r4, r4, r0
 80014a4:	469b      	mov	fp, r3
 80014a6:	e778      	b.n	800139a <__aeabi_ddiv+0x36a>
 80014a8:	0003      	movs	r3, r0
 80014aa:	465a      	mov	r2, fp
 80014ac:	3b28      	subs	r3, #40	; 0x28
 80014ae:	409a      	lsls	r2, r3
 80014b0:	2700      	movs	r7, #0
 80014b2:	4691      	mov	r9, r2
 80014b4:	e688      	b.n	80011c8 <__aeabi_ddiv+0x198>
 80014b6:	4658      	mov	r0, fp
 80014b8:	f001 f8dc 	bl	8002674 <__clzsi2>
 80014bc:	3020      	adds	r0, #32
 80014be:	e672      	b.n	80011a6 <__aeabi_ddiv+0x176>
 80014c0:	0003      	movs	r3, r0
 80014c2:	4652      	mov	r2, sl
 80014c4:	3b28      	subs	r3, #40	; 0x28
 80014c6:	409a      	lsls	r2, r3
 80014c8:	4693      	mov	fp, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	e6b4      	b.n	8001238 <__aeabi_ddiv+0x208>
 80014ce:	4650      	mov	r0, sl
 80014d0:	f001 f8d0 	bl	8002674 <__clzsi2>
 80014d4:	3020      	adds	r0, #32
 80014d6:	e69a      	b.n	800120e <__aeabi_ddiv+0x1de>
 80014d8:	42a6      	cmp	r6, r4
 80014da:	d1e2      	bne.n	80014a2 <__aeabi_ddiv+0x472>
 80014dc:	45b8      	cmp	r8, r7
 80014de:	d9dc      	bls.n	800149a <__aeabi_ddiv+0x46a>
 80014e0:	1a34      	subs	r4, r6, r0
 80014e2:	469b      	mov	fp, r3
 80014e4:	e759      	b.n	800139a <__aeabi_ddiv+0x36a>
 80014e6:	2b1f      	cmp	r3, #31
 80014e8:	dc65      	bgt.n	80015b6 <__aeabi_ddiv+0x586>
 80014ea:	4c50      	ldr	r4, [pc, #320]	; (800162c <__aeabi_ddiv+0x5fc>)
 80014ec:	9900      	ldr	r1, [sp, #0]
 80014ee:	46a4      	mov	ip, r4
 80014f0:	465c      	mov	r4, fp
 80014f2:	4461      	add	r1, ip
 80014f4:	0008      	movs	r0, r1
 80014f6:	408c      	lsls	r4, r1
 80014f8:	0011      	movs	r1, r2
 80014fa:	4082      	lsls	r2, r0
 80014fc:	40d9      	lsrs	r1, r3
 80014fe:	1e50      	subs	r0, r2, #1
 8001500:	4182      	sbcs	r2, r0
 8001502:	430c      	orrs	r4, r1
 8001504:	4314      	orrs	r4, r2
 8001506:	465a      	mov	r2, fp
 8001508:	40da      	lsrs	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	0762      	lsls	r2, r4, #29
 800150e:	d009      	beq.n	8001524 <__aeabi_ddiv+0x4f4>
 8001510:	220f      	movs	r2, #15
 8001512:	4022      	ands	r2, r4
 8001514:	2a04      	cmp	r2, #4
 8001516:	d005      	beq.n	8001524 <__aeabi_ddiv+0x4f4>
 8001518:	0022      	movs	r2, r4
 800151a:	1d14      	adds	r4, r2, #4
 800151c:	4294      	cmp	r4, r2
 800151e:	4189      	sbcs	r1, r1
 8001520:	4249      	negs	r1, r1
 8001522:	185b      	adds	r3, r3, r1
 8001524:	021a      	lsls	r2, r3, #8
 8001526:	d562      	bpl.n	80015ee <__aeabi_ddiv+0x5be>
 8001528:	2201      	movs	r2, #1
 800152a:	2300      	movs	r3, #0
 800152c:	2700      	movs	r7, #0
 800152e:	e60d      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001530:	428a      	cmp	r2, r1
 8001532:	d800      	bhi.n	8001536 <__aeabi_ddiv+0x506>
 8001534:	e70a      	b.n	800134c <__aeabi_ddiv+0x31c>
 8001536:	1e83      	subs	r3, r0, #2
 8001538:	1989      	adds	r1, r1, r6
 800153a:	e707      	b.n	800134c <__aeabi_ddiv+0x31c>
 800153c:	230f      	movs	r3, #15
 800153e:	4013      	ands	r3, r2
 8001540:	2b04      	cmp	r3, #4
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0x516>
 8001544:	e5e6      	b.n	8001114 <__aeabi_ddiv+0xe4>
 8001546:	1d17      	adds	r7, r2, #4
 8001548:	4297      	cmp	r7, r2
 800154a:	4192      	sbcs	r2, r2
 800154c:	4253      	negs	r3, r2
 800154e:	449b      	add	fp, r3
 8001550:	08fa      	lsrs	r2, r7, #3
 8001552:	e5e0      	b.n	8001116 <__aeabi_ddiv+0xe6>
 8001554:	2800      	cmp	r0, #0
 8001556:	d100      	bne.n	800155a <__aeabi_ddiv+0x52a>
 8001558:	e5d7      	b.n	800110a <__aeabi_ddiv+0xda>
 800155a:	1871      	adds	r1, r6, r1
 800155c:	1e53      	subs	r3, r2, #1
 800155e:	42b1      	cmp	r1, r6
 8001560:	d327      	bcc.n	80015b2 <__aeabi_ddiv+0x582>
 8001562:	42a9      	cmp	r1, r5
 8001564:	d315      	bcc.n	8001592 <__aeabi_ddiv+0x562>
 8001566:	d058      	beq.n	800161a <__aeabi_ddiv+0x5ea>
 8001568:	001a      	movs	r2, r3
 800156a:	e773      	b.n	8001454 <__aeabi_ddiv+0x424>
 800156c:	2b00      	cmp	r3, #0
 800156e:	dc00      	bgt.n	8001572 <__aeabi_ddiv+0x542>
 8001570:	e604      	b.n	800117c <__aeabi_ddiv+0x14c>
 8001572:	2301      	movs	r3, #1
 8001574:	2200      	movs	r2, #0
 8001576:	449b      	add	fp, r3
 8001578:	e5cd      	b.n	8001116 <__aeabi_ddiv+0xe6>
 800157a:	2302      	movs	r3, #2
 800157c:	4447      	add	r7, r8
 800157e:	4547      	cmp	r7, r8
 8001580:	4189      	sbcs	r1, r1
 8001582:	425b      	negs	r3, r3
 8001584:	469c      	mov	ip, r3
 8001586:	4249      	negs	r1, r1
 8001588:	1989      	adds	r1, r1, r6
 800158a:	190c      	adds	r4, r1, r4
 800158c:	44e3      	add	fp, ip
 800158e:	1a24      	subs	r4, r4, r0
 8001590:	e703      	b.n	800139a <__aeabi_ddiv+0x36a>
 8001592:	4643      	mov	r3, r8
 8001594:	005f      	lsls	r7, r3, #1
 8001596:	4547      	cmp	r7, r8
 8001598:	419b      	sbcs	r3, r3
 800159a:	46b8      	mov	r8, r7
 800159c:	425b      	negs	r3, r3
 800159e:	199e      	adds	r6, r3, r6
 80015a0:	3a02      	subs	r2, #2
 80015a2:	1989      	adds	r1, r1, r6
 80015a4:	42a9      	cmp	r1, r5
 80015a6:	d000      	beq.n	80015aa <__aeabi_ddiv+0x57a>
 80015a8:	e754      	b.n	8001454 <__aeabi_ddiv+0x424>
 80015aa:	4540      	cmp	r0, r8
 80015ac:	d000      	beq.n	80015b0 <__aeabi_ddiv+0x580>
 80015ae:	e751      	b.n	8001454 <__aeabi_ddiv+0x424>
 80015b0:	e5ab      	b.n	800110a <__aeabi_ddiv+0xda>
 80015b2:	001a      	movs	r2, r3
 80015b4:	e7f6      	b.n	80015a4 <__aeabi_ddiv+0x574>
 80015b6:	211f      	movs	r1, #31
 80015b8:	465f      	mov	r7, fp
 80015ba:	4249      	negs	r1, r1
 80015bc:	1b0c      	subs	r4, r1, r4
 80015be:	40e7      	lsrs	r7, r4
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d007      	beq.n	80015d4 <__aeabi_ddiv+0x5a4>
 80015c4:	491a      	ldr	r1, [pc, #104]	; (8001630 <__aeabi_ddiv+0x600>)
 80015c6:	9b00      	ldr	r3, [sp, #0]
 80015c8:	468c      	mov	ip, r1
 80015ca:	4463      	add	r3, ip
 80015cc:	0018      	movs	r0, r3
 80015ce:	465b      	mov	r3, fp
 80015d0:	4083      	lsls	r3, r0
 80015d2:	431a      	orrs	r2, r3
 80015d4:	1e50      	subs	r0, r2, #1
 80015d6:	4182      	sbcs	r2, r0
 80015d8:	433a      	orrs	r2, r7
 80015da:	2707      	movs	r7, #7
 80015dc:	2300      	movs	r3, #0
 80015de:	4017      	ands	r7, r2
 80015e0:	d009      	beq.n	80015f6 <__aeabi_ddiv+0x5c6>
 80015e2:	210f      	movs	r1, #15
 80015e4:	2300      	movs	r3, #0
 80015e6:	4011      	ands	r1, r2
 80015e8:	0014      	movs	r4, r2
 80015ea:	2904      	cmp	r1, #4
 80015ec:	d195      	bne.n	800151a <__aeabi_ddiv+0x4ea>
 80015ee:	0022      	movs	r2, r4
 80015f0:	075f      	lsls	r7, r3, #29
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	0b1b      	lsrs	r3, r3, #12
 80015f6:	08d2      	lsrs	r2, r2, #3
 80015f8:	4317      	orrs	r7, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	e5a6      	b.n	800114c <__aeabi_ddiv+0x11c>
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	4659      	mov	r1, fp
 8001602:	031b      	lsls	r3, r3, #12
 8001604:	430b      	orrs	r3, r1
 8001606:	031b      	lsls	r3, r3, #12
 8001608:	0017      	movs	r7, r2
 800160a:	0b1b      	lsrs	r3, r3, #12
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <__aeabi_ddiv+0x5f8>)
 800160e:	e59d      	b.n	800114c <__aeabi_ddiv+0x11c>
 8001610:	42bd      	cmp	r5, r7
 8001612:	d8b2      	bhi.n	800157a <__aeabi_ddiv+0x54a>
 8001614:	469b      	mov	fp, r3
 8001616:	2400      	movs	r4, #0
 8001618:	e6bf      	b.n	800139a <__aeabi_ddiv+0x36a>
 800161a:	4580      	cmp	r8, r0
 800161c:	d3b9      	bcc.n	8001592 <__aeabi_ddiv+0x562>
 800161e:	001a      	movs	r2, r3
 8001620:	e7c3      	b.n	80015aa <__aeabi_ddiv+0x57a>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	000003ff 	.word	0x000003ff
 8001628:	000007ff 	.word	0x000007ff
 800162c:	0000041e 	.word	0x0000041e
 8001630:	0000043e 	.word	0x0000043e

08001634 <__eqdf2>:
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	464f      	mov	r7, r9
 8001638:	4646      	mov	r6, r8
 800163a:	46d6      	mov	lr, sl
 800163c:	4684      	mov	ip, r0
 800163e:	b5c0      	push	{r6, r7, lr}
 8001640:	4680      	mov	r8, r0
 8001642:	4e19      	ldr	r6, [pc, #100]	; (80016a8 <__eqdf2+0x74>)
 8001644:	0318      	lsls	r0, r3, #12
 8001646:	030f      	lsls	r7, r1, #12
 8001648:	004d      	lsls	r5, r1, #1
 800164a:	0b00      	lsrs	r0, r0, #12
 800164c:	005c      	lsls	r4, r3, #1
 800164e:	4682      	mov	sl, r0
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d6d      	lsrs	r5, r5, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	4691      	mov	r9, r2
 8001658:	0d64      	lsrs	r4, r4, #21
 800165a:	0fdb      	lsrs	r3, r3, #31
 800165c:	2001      	movs	r0, #1
 800165e:	42b5      	cmp	r5, r6
 8001660:	d00a      	beq.n	8001678 <__eqdf2+0x44>
 8001662:	42b4      	cmp	r4, r6
 8001664:	d003      	beq.n	800166e <__eqdf2+0x3a>
 8001666:	42a5      	cmp	r5, r4
 8001668:	d101      	bne.n	800166e <__eqdf2+0x3a>
 800166a:	4557      	cmp	r7, sl
 800166c:	d00c      	beq.n	8001688 <__eqdf2+0x54>
 800166e:	bc1c      	pop	{r2, r3, r4}
 8001670:	4690      	mov	r8, r2
 8001672:	4699      	mov	r9, r3
 8001674:	46a2      	mov	sl, r4
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	4666      	mov	r6, ip
 800167a:	433e      	orrs	r6, r7
 800167c:	d1f7      	bne.n	800166e <__eqdf2+0x3a>
 800167e:	42ac      	cmp	r4, r5
 8001680:	d1f5      	bne.n	800166e <__eqdf2+0x3a>
 8001682:	4654      	mov	r4, sl
 8001684:	4314      	orrs	r4, r2
 8001686:	d1f2      	bne.n	800166e <__eqdf2+0x3a>
 8001688:	2001      	movs	r0, #1
 800168a:	45c8      	cmp	r8, r9
 800168c:	d1ef      	bne.n	800166e <__eqdf2+0x3a>
 800168e:	4299      	cmp	r1, r3
 8001690:	d007      	beq.n	80016a2 <__eqdf2+0x6e>
 8001692:	2d00      	cmp	r5, #0
 8001694:	d1eb      	bne.n	800166e <__eqdf2+0x3a>
 8001696:	4663      	mov	r3, ip
 8001698:	431f      	orrs	r7, r3
 800169a:	0038      	movs	r0, r7
 800169c:	1e47      	subs	r7, r0, #1
 800169e:	41b8      	sbcs	r0, r7
 80016a0:	e7e5      	b.n	800166e <__eqdf2+0x3a>
 80016a2:	2000      	movs	r0, #0
 80016a4:	e7e3      	b.n	800166e <__eqdf2+0x3a>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__gedf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	464f      	mov	r7, r9
 80016b0:	4646      	mov	r6, r8
 80016b2:	46d6      	mov	lr, sl
 80016b4:	004d      	lsls	r5, r1, #1
 80016b6:	b5c0      	push	{r6, r7, lr}
 80016b8:	030e      	lsls	r6, r1, #12
 80016ba:	0fc9      	lsrs	r1, r1, #31
 80016bc:	468a      	mov	sl, r1
 80016be:	492c      	ldr	r1, [pc, #176]	; (8001770 <__gedf2+0xc4>)
 80016c0:	031f      	lsls	r7, r3, #12
 80016c2:	005c      	lsls	r4, r3, #1
 80016c4:	4680      	mov	r8, r0
 80016c6:	0b36      	lsrs	r6, r6, #12
 80016c8:	0d6d      	lsrs	r5, r5, #21
 80016ca:	4691      	mov	r9, r2
 80016cc:	0b3f      	lsrs	r7, r7, #12
 80016ce:	0d64      	lsrs	r4, r4, #21
 80016d0:	0fdb      	lsrs	r3, r3, #31
 80016d2:	428d      	cmp	r5, r1
 80016d4:	d01e      	beq.n	8001714 <__gedf2+0x68>
 80016d6:	428c      	cmp	r4, r1
 80016d8:	d016      	beq.n	8001708 <__gedf2+0x5c>
 80016da:	2d00      	cmp	r5, #0
 80016dc:	d11e      	bne.n	800171c <__gedf2+0x70>
 80016de:	4330      	orrs	r0, r6
 80016e0:	4684      	mov	ip, r0
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d101      	bne.n	80016ea <__gedf2+0x3e>
 80016e6:	433a      	orrs	r2, r7
 80016e8:	d023      	beq.n	8001732 <__gedf2+0x86>
 80016ea:	4662      	mov	r2, ip
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d01a      	beq.n	8001726 <__gedf2+0x7a>
 80016f0:	459a      	cmp	sl, r3
 80016f2:	d029      	beq.n	8001748 <__gedf2+0x9c>
 80016f4:	4651      	mov	r1, sl
 80016f6:	2002      	movs	r0, #2
 80016f8:	3901      	subs	r1, #1
 80016fa:	4008      	ands	r0, r1
 80016fc:	3801      	subs	r0, #1
 80016fe:	bc1c      	pop	{r2, r3, r4}
 8001700:	4690      	mov	r8, r2
 8001702:	4699      	mov	r9, r3
 8001704:	46a2      	mov	sl, r4
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001708:	0039      	movs	r1, r7
 800170a:	4311      	orrs	r1, r2
 800170c:	d0e5      	beq.n	80016da <__gedf2+0x2e>
 800170e:	2002      	movs	r0, #2
 8001710:	4240      	negs	r0, r0
 8001712:	e7f4      	b.n	80016fe <__gedf2+0x52>
 8001714:	4330      	orrs	r0, r6
 8001716:	d1fa      	bne.n	800170e <__gedf2+0x62>
 8001718:	42ac      	cmp	r4, r5
 800171a:	d00f      	beq.n	800173c <__gedf2+0x90>
 800171c:	2c00      	cmp	r4, #0
 800171e:	d10f      	bne.n	8001740 <__gedf2+0x94>
 8001720:	433a      	orrs	r2, r7
 8001722:	d0e7      	beq.n	80016f4 <__gedf2+0x48>
 8001724:	e00c      	b.n	8001740 <__gedf2+0x94>
 8001726:	2201      	movs	r2, #1
 8001728:	3b01      	subs	r3, #1
 800172a:	4393      	bics	r3, r2
 800172c:	0018      	movs	r0, r3
 800172e:	3001      	adds	r0, #1
 8001730:	e7e5      	b.n	80016fe <__gedf2+0x52>
 8001732:	4663      	mov	r3, ip
 8001734:	2000      	movs	r0, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0e1      	beq.n	80016fe <__gedf2+0x52>
 800173a:	e7db      	b.n	80016f4 <__gedf2+0x48>
 800173c:	433a      	orrs	r2, r7
 800173e:	d1e6      	bne.n	800170e <__gedf2+0x62>
 8001740:	459a      	cmp	sl, r3
 8001742:	d1d7      	bne.n	80016f4 <__gedf2+0x48>
 8001744:	42a5      	cmp	r5, r4
 8001746:	dcd5      	bgt.n	80016f4 <__gedf2+0x48>
 8001748:	42a5      	cmp	r5, r4
 800174a:	db05      	blt.n	8001758 <__gedf2+0xac>
 800174c:	42be      	cmp	r6, r7
 800174e:	d8d1      	bhi.n	80016f4 <__gedf2+0x48>
 8001750:	d008      	beq.n	8001764 <__gedf2+0xb8>
 8001752:	2000      	movs	r0, #0
 8001754:	42be      	cmp	r6, r7
 8001756:	d2d2      	bcs.n	80016fe <__gedf2+0x52>
 8001758:	4650      	mov	r0, sl
 800175a:	2301      	movs	r3, #1
 800175c:	3801      	subs	r0, #1
 800175e:	4398      	bics	r0, r3
 8001760:	3001      	adds	r0, #1
 8001762:	e7cc      	b.n	80016fe <__gedf2+0x52>
 8001764:	45c8      	cmp	r8, r9
 8001766:	d8c5      	bhi.n	80016f4 <__gedf2+0x48>
 8001768:	2000      	movs	r0, #0
 800176a:	45c8      	cmp	r8, r9
 800176c:	d3f4      	bcc.n	8001758 <__gedf2+0xac>
 800176e:	e7c6      	b.n	80016fe <__gedf2+0x52>
 8001770:	000007ff 	.word	0x000007ff

08001774 <__ledf2>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	464f      	mov	r7, r9
 8001778:	4646      	mov	r6, r8
 800177a:	46d6      	mov	lr, sl
 800177c:	004d      	lsls	r5, r1, #1
 800177e:	b5c0      	push	{r6, r7, lr}
 8001780:	030e      	lsls	r6, r1, #12
 8001782:	0fc9      	lsrs	r1, r1, #31
 8001784:	468a      	mov	sl, r1
 8001786:	492e      	ldr	r1, [pc, #184]	; (8001840 <__ledf2+0xcc>)
 8001788:	031f      	lsls	r7, r3, #12
 800178a:	005c      	lsls	r4, r3, #1
 800178c:	4680      	mov	r8, r0
 800178e:	0b36      	lsrs	r6, r6, #12
 8001790:	0d6d      	lsrs	r5, r5, #21
 8001792:	4691      	mov	r9, r2
 8001794:	0b3f      	lsrs	r7, r7, #12
 8001796:	0d64      	lsrs	r4, r4, #21
 8001798:	0fdb      	lsrs	r3, r3, #31
 800179a:	428d      	cmp	r5, r1
 800179c:	d018      	beq.n	80017d0 <__ledf2+0x5c>
 800179e:	428c      	cmp	r4, r1
 80017a0:	d011      	beq.n	80017c6 <__ledf2+0x52>
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d118      	bne.n	80017d8 <__ledf2+0x64>
 80017a6:	4330      	orrs	r0, r6
 80017a8:	4684      	mov	ip, r0
 80017aa:	2c00      	cmp	r4, #0
 80017ac:	d11e      	bne.n	80017ec <__ledf2+0x78>
 80017ae:	433a      	orrs	r2, r7
 80017b0:	d11c      	bne.n	80017ec <__ledf2+0x78>
 80017b2:	4663      	mov	r3, ip
 80017b4:	2000      	movs	r0, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d030      	beq.n	800181c <__ledf2+0xa8>
 80017ba:	4651      	mov	r1, sl
 80017bc:	2002      	movs	r0, #2
 80017be:	3901      	subs	r1, #1
 80017c0:	4008      	ands	r0, r1
 80017c2:	3801      	subs	r0, #1
 80017c4:	e02a      	b.n	800181c <__ledf2+0xa8>
 80017c6:	0039      	movs	r1, r7
 80017c8:	4311      	orrs	r1, r2
 80017ca:	d0ea      	beq.n	80017a2 <__ledf2+0x2e>
 80017cc:	2002      	movs	r0, #2
 80017ce:	e025      	b.n	800181c <__ledf2+0xa8>
 80017d0:	4330      	orrs	r0, r6
 80017d2:	d1fb      	bne.n	80017cc <__ledf2+0x58>
 80017d4:	42ac      	cmp	r4, r5
 80017d6:	d026      	beq.n	8001826 <__ledf2+0xb2>
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d126      	bne.n	800182a <__ledf2+0xb6>
 80017dc:	433a      	orrs	r2, r7
 80017de:	d124      	bne.n	800182a <__ledf2+0xb6>
 80017e0:	4651      	mov	r1, sl
 80017e2:	2002      	movs	r0, #2
 80017e4:	3901      	subs	r1, #1
 80017e6:	4008      	ands	r0, r1
 80017e8:	3801      	subs	r0, #1
 80017ea:	e017      	b.n	800181c <__ledf2+0xa8>
 80017ec:	4662      	mov	r2, ip
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d00f      	beq.n	8001812 <__ledf2+0x9e>
 80017f2:	459a      	cmp	sl, r3
 80017f4:	d1e1      	bne.n	80017ba <__ledf2+0x46>
 80017f6:	42a5      	cmp	r5, r4
 80017f8:	db05      	blt.n	8001806 <__ledf2+0x92>
 80017fa:	42be      	cmp	r6, r7
 80017fc:	d8dd      	bhi.n	80017ba <__ledf2+0x46>
 80017fe:	d019      	beq.n	8001834 <__ledf2+0xc0>
 8001800:	2000      	movs	r0, #0
 8001802:	42be      	cmp	r6, r7
 8001804:	d20a      	bcs.n	800181c <__ledf2+0xa8>
 8001806:	4650      	mov	r0, sl
 8001808:	2301      	movs	r3, #1
 800180a:	3801      	subs	r0, #1
 800180c:	4398      	bics	r0, r3
 800180e:	3001      	adds	r0, #1
 8001810:	e004      	b.n	800181c <__ledf2+0xa8>
 8001812:	2201      	movs	r2, #1
 8001814:	3b01      	subs	r3, #1
 8001816:	4393      	bics	r3, r2
 8001818:	0018      	movs	r0, r3
 800181a:	3001      	adds	r0, #1
 800181c:	bc1c      	pop	{r2, r3, r4}
 800181e:	4690      	mov	r8, r2
 8001820:	4699      	mov	r9, r3
 8001822:	46a2      	mov	sl, r4
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001826:	433a      	orrs	r2, r7
 8001828:	d1d0      	bne.n	80017cc <__ledf2+0x58>
 800182a:	459a      	cmp	sl, r3
 800182c:	d1c5      	bne.n	80017ba <__ledf2+0x46>
 800182e:	42a5      	cmp	r5, r4
 8001830:	dcc3      	bgt.n	80017ba <__ledf2+0x46>
 8001832:	e7e0      	b.n	80017f6 <__ledf2+0x82>
 8001834:	45c8      	cmp	r8, r9
 8001836:	d8c0      	bhi.n	80017ba <__ledf2+0x46>
 8001838:	2000      	movs	r0, #0
 800183a:	45c8      	cmp	r8, r9
 800183c:	d3e3      	bcc.n	8001806 <__ledf2+0x92>
 800183e:	e7ed      	b.n	800181c <__ledf2+0xa8>
 8001840:	000007ff 	.word	0x000007ff

08001844 <__aeabi_dmul>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	4657      	mov	r7, sl
 8001848:	46de      	mov	lr, fp
 800184a:	464e      	mov	r6, r9
 800184c:	4645      	mov	r5, r8
 800184e:	b5e0      	push	{r5, r6, r7, lr}
 8001850:	4683      	mov	fp, r0
 8001852:	0006      	movs	r6, r0
 8001854:	030f      	lsls	r7, r1, #12
 8001856:	0048      	lsls	r0, r1, #1
 8001858:	b087      	sub	sp, #28
 800185a:	4692      	mov	sl, r2
 800185c:	001d      	movs	r5, r3
 800185e:	0b3f      	lsrs	r7, r7, #12
 8001860:	0d40      	lsrs	r0, r0, #21
 8001862:	0fcc      	lsrs	r4, r1, #31
 8001864:	2800      	cmp	r0, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x26>
 8001868:	e06f      	b.n	800194a <__aeabi_dmul+0x106>
 800186a:	4bde      	ldr	r3, [pc, #888]	; (8001be4 <__aeabi_dmul+0x3a0>)
 800186c:	4298      	cmp	r0, r3
 800186e:	d038      	beq.n	80018e2 <__aeabi_dmul+0x9e>
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	00ff      	lsls	r7, r7, #3
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431f      	orrs	r7, r3
 8001878:	0f73      	lsrs	r3, r6, #29
 800187a:	433b      	orrs	r3, r7
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	4bda      	ldr	r3, [pc, #872]	; (8001be8 <__aeabi_dmul+0x3a4>)
 8001880:	2700      	movs	r7, #0
 8001882:	4699      	mov	r9, r3
 8001884:	2300      	movs	r3, #0
 8001886:	469b      	mov	fp, r3
 8001888:	00f6      	lsls	r6, r6, #3
 800188a:	4481      	add	r9, r0
 800188c:	032b      	lsls	r3, r5, #12
 800188e:	0069      	lsls	r1, r5, #1
 8001890:	0b1b      	lsrs	r3, r3, #12
 8001892:	4652      	mov	r2, sl
 8001894:	4698      	mov	r8, r3
 8001896:	0d49      	lsrs	r1, r1, #21
 8001898:	0fed      	lsrs	r5, r5, #31
 800189a:	2900      	cmp	r1, #0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dmul+0x5c>
 800189e:	e085      	b.n	80019ac <__aeabi_dmul+0x168>
 80018a0:	4bd0      	ldr	r3, [pc, #832]	; (8001be4 <__aeabi_dmul+0x3a0>)
 80018a2:	4299      	cmp	r1, r3
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dmul+0x64>
 80018a6:	e073      	b.n	8001990 <__aeabi_dmul+0x14c>
 80018a8:	4643      	mov	r3, r8
 80018aa:	00da      	lsls	r2, r3, #3
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	4313      	orrs	r3, r2
 80018b2:	4652      	mov	r2, sl
 80018b4:	48cc      	ldr	r0, [pc, #816]	; (8001be8 <__aeabi_dmul+0x3a4>)
 80018b6:	0f52      	lsrs	r2, r2, #29
 80018b8:	4684      	mov	ip, r0
 80018ba:	4313      	orrs	r3, r2
 80018bc:	4652      	mov	r2, sl
 80018be:	2000      	movs	r0, #0
 80018c0:	4461      	add	r1, ip
 80018c2:	00d2      	lsls	r2, r2, #3
 80018c4:	4489      	add	r9, r1
 80018c6:	0021      	movs	r1, r4
 80018c8:	4069      	eors	r1, r5
 80018ca:	9100      	str	r1, [sp, #0]
 80018cc:	468c      	mov	ip, r1
 80018ce:	2101      	movs	r1, #1
 80018d0:	4449      	add	r1, r9
 80018d2:	468a      	mov	sl, r1
 80018d4:	2f0f      	cmp	r7, #15
 80018d6:	d900      	bls.n	80018da <__aeabi_dmul+0x96>
 80018d8:	e090      	b.n	80019fc <__aeabi_dmul+0x1b8>
 80018da:	49c4      	ldr	r1, [pc, #784]	; (8001bec <__aeabi_dmul+0x3a8>)
 80018dc:	00bf      	lsls	r7, r7, #2
 80018de:	59cf      	ldr	r7, [r1, r7]
 80018e0:	46bf      	mov	pc, r7
 80018e2:	465b      	mov	r3, fp
 80018e4:	433b      	orrs	r3, r7
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	d000      	beq.n	80018ec <__aeabi_dmul+0xa8>
 80018ea:	e16a      	b.n	8001bc2 <__aeabi_dmul+0x37e>
 80018ec:	2302      	movs	r3, #2
 80018ee:	2708      	movs	r7, #8
 80018f0:	2600      	movs	r6, #0
 80018f2:	4681      	mov	r9, r0
 80018f4:	469b      	mov	fp, r3
 80018f6:	e7c9      	b.n	800188c <__aeabi_dmul+0x48>
 80018f8:	0032      	movs	r2, r6
 80018fa:	4658      	mov	r0, fp
 80018fc:	9b01      	ldr	r3, [sp, #4]
 80018fe:	4661      	mov	r1, ip
 8001900:	9100      	str	r1, [sp, #0]
 8001902:	2802      	cmp	r0, #2
 8001904:	d100      	bne.n	8001908 <__aeabi_dmul+0xc4>
 8001906:	e075      	b.n	80019f4 <__aeabi_dmul+0x1b0>
 8001908:	2803      	cmp	r0, #3
 800190a:	d100      	bne.n	800190e <__aeabi_dmul+0xca>
 800190c:	e1fe      	b.n	8001d0c <__aeabi_dmul+0x4c8>
 800190e:	2801      	cmp	r0, #1
 8001910:	d000      	beq.n	8001914 <__aeabi_dmul+0xd0>
 8001912:	e12c      	b.n	8001b6e <__aeabi_dmul+0x32a>
 8001914:	2300      	movs	r3, #0
 8001916:	2700      	movs	r7, #0
 8001918:	2600      	movs	r6, #0
 800191a:	2500      	movs	r5, #0
 800191c:	033f      	lsls	r7, r7, #12
 800191e:	0d2a      	lsrs	r2, r5, #20
 8001920:	0b3f      	lsrs	r7, r7, #12
 8001922:	48b3      	ldr	r0, [pc, #716]	; (8001bf0 <__aeabi_dmul+0x3ac>)
 8001924:	0512      	lsls	r2, r2, #20
 8001926:	433a      	orrs	r2, r7
 8001928:	4002      	ands	r2, r0
 800192a:	051b      	lsls	r3, r3, #20
 800192c:	4313      	orrs	r3, r2
 800192e:	9a00      	ldr	r2, [sp, #0]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	07d1      	lsls	r1, r2, #31
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	430b      	orrs	r3, r1
 8001938:	0030      	movs	r0, r6
 800193a:	0019      	movs	r1, r3
 800193c:	b007      	add	sp, #28
 800193e:	bc3c      	pop	{r2, r3, r4, r5}
 8001940:	4690      	mov	r8, r2
 8001942:	4699      	mov	r9, r3
 8001944:	46a2      	mov	sl, r4
 8001946:	46ab      	mov	fp, r5
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194a:	465b      	mov	r3, fp
 800194c:	433b      	orrs	r3, r7
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	d100      	bne.n	8001954 <__aeabi_dmul+0x110>
 8001952:	e12f      	b.n	8001bb4 <__aeabi_dmul+0x370>
 8001954:	2f00      	cmp	r7, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dmul+0x116>
 8001958:	e1a5      	b.n	8001ca6 <__aeabi_dmul+0x462>
 800195a:	0038      	movs	r0, r7
 800195c:	f000 fe8a 	bl	8002674 <__clzsi2>
 8001960:	0003      	movs	r3, r0
 8001962:	3b0b      	subs	r3, #11
 8001964:	2b1c      	cmp	r3, #28
 8001966:	dd00      	ble.n	800196a <__aeabi_dmul+0x126>
 8001968:	e196      	b.n	8001c98 <__aeabi_dmul+0x454>
 800196a:	221d      	movs	r2, #29
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	465a      	mov	r2, fp
 8001970:	0001      	movs	r1, r0
 8001972:	40da      	lsrs	r2, r3
 8001974:	465e      	mov	r6, fp
 8001976:	3908      	subs	r1, #8
 8001978:	408f      	lsls	r7, r1
 800197a:	0013      	movs	r3, r2
 800197c:	408e      	lsls	r6, r1
 800197e:	433b      	orrs	r3, r7
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <__aeabi_dmul+0x3b0>)
 8001984:	2700      	movs	r7, #0
 8001986:	1a1b      	subs	r3, r3, r0
 8001988:	4699      	mov	r9, r3
 800198a:	2300      	movs	r3, #0
 800198c:	469b      	mov	fp, r3
 800198e:	e77d      	b.n	800188c <__aeabi_dmul+0x48>
 8001990:	4641      	mov	r1, r8
 8001992:	4653      	mov	r3, sl
 8001994:	430b      	orrs	r3, r1
 8001996:	4993      	ldr	r1, [pc, #588]	; (8001be4 <__aeabi_dmul+0x3a0>)
 8001998:	468c      	mov	ip, r1
 800199a:	44e1      	add	r9, ip
 800199c:	2b00      	cmp	r3, #0
 800199e:	d000      	beq.n	80019a2 <__aeabi_dmul+0x15e>
 80019a0:	e11a      	b.n	8001bd8 <__aeabi_dmul+0x394>
 80019a2:	2202      	movs	r2, #2
 80019a4:	2002      	movs	r0, #2
 80019a6:	4317      	orrs	r7, r2
 80019a8:	2200      	movs	r2, #0
 80019aa:	e78c      	b.n	80018c6 <__aeabi_dmul+0x82>
 80019ac:	4313      	orrs	r3, r2
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dmul+0x16e>
 80019b0:	e10d      	b.n	8001bce <__aeabi_dmul+0x38a>
 80019b2:	4643      	mov	r3, r8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d100      	bne.n	80019ba <__aeabi_dmul+0x176>
 80019b8:	e181      	b.n	8001cbe <__aeabi_dmul+0x47a>
 80019ba:	4640      	mov	r0, r8
 80019bc:	f000 fe5a 	bl	8002674 <__clzsi2>
 80019c0:	0002      	movs	r2, r0
 80019c2:	3a0b      	subs	r2, #11
 80019c4:	2a1c      	cmp	r2, #28
 80019c6:	dd00      	ble.n	80019ca <__aeabi_dmul+0x186>
 80019c8:	e172      	b.n	8001cb0 <__aeabi_dmul+0x46c>
 80019ca:	0001      	movs	r1, r0
 80019cc:	4643      	mov	r3, r8
 80019ce:	3908      	subs	r1, #8
 80019d0:	408b      	lsls	r3, r1
 80019d2:	4698      	mov	r8, r3
 80019d4:	231d      	movs	r3, #29
 80019d6:	1a9a      	subs	r2, r3, r2
 80019d8:	4653      	mov	r3, sl
 80019da:	40d3      	lsrs	r3, r2
 80019dc:	001a      	movs	r2, r3
 80019de:	4643      	mov	r3, r8
 80019e0:	4313      	orrs	r3, r2
 80019e2:	4652      	mov	r2, sl
 80019e4:	408a      	lsls	r2, r1
 80019e6:	4649      	mov	r1, r9
 80019e8:	1a08      	subs	r0, r1, r0
 80019ea:	4982      	ldr	r1, [pc, #520]	; (8001bf4 <__aeabi_dmul+0x3b0>)
 80019ec:	4689      	mov	r9, r1
 80019ee:	4481      	add	r9, r0
 80019f0:	2000      	movs	r0, #0
 80019f2:	e768      	b.n	80018c6 <__aeabi_dmul+0x82>
 80019f4:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <__aeabi_dmul+0x3a0>)
 80019f6:	2700      	movs	r7, #0
 80019f8:	2600      	movs	r6, #0
 80019fa:	e78e      	b.n	800191a <__aeabi_dmul+0xd6>
 80019fc:	0c14      	lsrs	r4, r2, #16
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	0c12      	lsrs	r2, r2, #16
 8001a02:	0011      	movs	r1, r2
 8001a04:	0c37      	lsrs	r7, r6, #16
 8001a06:	0436      	lsls	r6, r6, #16
 8001a08:	0c35      	lsrs	r5, r6, #16
 8001a0a:	4379      	muls	r1, r7
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	468c      	mov	ip, r1
 8001a10:	002e      	movs	r6, r5
 8001a12:	4360      	muls	r0, r4
 8001a14:	4460      	add	r0, ip
 8001a16:	4683      	mov	fp, r0
 8001a18:	4356      	muls	r6, r2
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	0c30      	lsrs	r0, r6, #16
 8001a1e:	4680      	mov	r8, r0
 8001a20:	4658      	mov	r0, fp
 8001a22:	4379      	muls	r1, r7
 8001a24:	4440      	add	r0, r8
 8001a26:	9102      	str	r1, [sp, #8]
 8001a28:	4584      	cmp	ip, r0
 8001a2a:	d906      	bls.n	8001a3a <__aeabi_dmul+0x1f6>
 8001a2c:	4688      	mov	r8, r1
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	0249      	lsls	r1, r1, #9
 8001a32:	468c      	mov	ip, r1
 8001a34:	44e0      	add	r8, ip
 8001a36:	4641      	mov	r1, r8
 8001a38:	9102      	str	r1, [sp, #8]
 8001a3a:	0436      	lsls	r6, r6, #16
 8001a3c:	0c01      	lsrs	r1, r0, #16
 8001a3e:	0c36      	lsrs	r6, r6, #16
 8001a40:	0400      	lsls	r0, r0, #16
 8001a42:	468b      	mov	fp, r1
 8001a44:	1981      	adds	r1, r0, r6
 8001a46:	0c1e      	lsrs	r6, r3, #16
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	0c1b      	lsrs	r3, r3, #16
 8001a4c:	9103      	str	r1, [sp, #12]
 8001a4e:	0019      	movs	r1, r3
 8001a50:	4379      	muls	r1, r7
 8001a52:	468c      	mov	ip, r1
 8001a54:	0028      	movs	r0, r5
 8001a56:	4375      	muls	r5, r6
 8001a58:	4465      	add	r5, ip
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	4358      	muls	r0, r3
 8001a5e:	0c05      	lsrs	r5, r0, #16
 8001a60:	4445      	add	r5, r8
 8001a62:	4377      	muls	r7, r6
 8001a64:	42a9      	cmp	r1, r5
 8001a66:	d903      	bls.n	8001a70 <__aeabi_dmul+0x22c>
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0249      	lsls	r1, r1, #9
 8001a6c:	468c      	mov	ip, r1
 8001a6e:	4467      	add	r7, ip
 8001a70:	0c29      	lsrs	r1, r5, #16
 8001a72:	468c      	mov	ip, r1
 8001a74:	0039      	movs	r1, r7
 8001a76:	0400      	lsls	r0, r0, #16
 8001a78:	0c00      	lsrs	r0, r0, #16
 8001a7a:	042d      	lsls	r5, r5, #16
 8001a7c:	182d      	adds	r5, r5, r0
 8001a7e:	4461      	add	r1, ip
 8001a80:	44ab      	add	fp, r5
 8001a82:	9105      	str	r1, [sp, #20]
 8001a84:	4659      	mov	r1, fp
 8001a86:	9104      	str	r1, [sp, #16]
 8001a88:	9901      	ldr	r1, [sp, #4]
 8001a8a:	040f      	lsls	r7, r1, #16
 8001a8c:	0c3f      	lsrs	r7, r7, #16
 8001a8e:	0c08      	lsrs	r0, r1, #16
 8001a90:	0039      	movs	r1, r7
 8001a92:	4351      	muls	r1, r2
 8001a94:	4342      	muls	r2, r0
 8001a96:	4690      	mov	r8, r2
 8001a98:	0002      	movs	r2, r0
 8001a9a:	468c      	mov	ip, r1
 8001a9c:	0c09      	lsrs	r1, r1, #16
 8001a9e:	468b      	mov	fp, r1
 8001aa0:	4362      	muls	r2, r4
 8001aa2:	437c      	muls	r4, r7
 8001aa4:	4444      	add	r4, r8
 8001aa6:	445c      	add	r4, fp
 8001aa8:	45a0      	cmp	r8, r4
 8001aaa:	d903      	bls.n	8001ab4 <__aeabi_dmul+0x270>
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0249      	lsls	r1, r1, #9
 8001ab0:	4688      	mov	r8, r1
 8001ab2:	4442      	add	r2, r8
 8001ab4:	0c21      	lsrs	r1, r4, #16
 8001ab6:	4688      	mov	r8, r1
 8001ab8:	4661      	mov	r1, ip
 8001aba:	0409      	lsls	r1, r1, #16
 8001abc:	0c09      	lsrs	r1, r1, #16
 8001abe:	468c      	mov	ip, r1
 8001ac0:	0039      	movs	r1, r7
 8001ac2:	4359      	muls	r1, r3
 8001ac4:	4343      	muls	r3, r0
 8001ac6:	4370      	muls	r0, r6
 8001ac8:	437e      	muls	r6, r7
 8001aca:	0c0f      	lsrs	r7, r1, #16
 8001acc:	18f6      	adds	r6, r6, r3
 8001ace:	0424      	lsls	r4, r4, #16
 8001ad0:	19be      	adds	r6, r7, r6
 8001ad2:	4464      	add	r4, ip
 8001ad4:	4442      	add	r2, r8
 8001ad6:	468c      	mov	ip, r1
 8001ad8:	42b3      	cmp	r3, r6
 8001ada:	d903      	bls.n	8001ae4 <__aeabi_dmul+0x2a0>
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	4440      	add	r0, r8
 8001ae4:	9b02      	ldr	r3, [sp, #8]
 8001ae6:	4661      	mov	r1, ip
 8001ae8:	4698      	mov	r8, r3
 8001aea:	9b04      	ldr	r3, [sp, #16]
 8001aec:	0437      	lsls	r7, r6, #16
 8001aee:	4443      	add	r3, r8
 8001af0:	469b      	mov	fp, r3
 8001af2:	45ab      	cmp	fp, r5
 8001af4:	41ad      	sbcs	r5, r5
 8001af6:	426b      	negs	r3, r5
 8001af8:	040d      	lsls	r5, r1, #16
 8001afa:	9905      	ldr	r1, [sp, #20]
 8001afc:	0c2d      	lsrs	r5, r5, #16
 8001afe:	468c      	mov	ip, r1
 8001b00:	197f      	adds	r7, r7, r5
 8001b02:	4467      	add	r7, ip
 8001b04:	18fd      	adds	r5, r7, r3
 8001b06:	46a8      	mov	r8, r5
 8001b08:	465d      	mov	r5, fp
 8001b0a:	192d      	adds	r5, r5, r4
 8001b0c:	42a5      	cmp	r5, r4
 8001b0e:	41a4      	sbcs	r4, r4
 8001b10:	4693      	mov	fp, r2
 8001b12:	4264      	negs	r4, r4
 8001b14:	46a4      	mov	ip, r4
 8001b16:	44c3      	add	fp, r8
 8001b18:	44dc      	add	ip, fp
 8001b1a:	428f      	cmp	r7, r1
 8001b1c:	41bf      	sbcs	r7, r7
 8001b1e:	4598      	cmp	r8, r3
 8001b20:	419b      	sbcs	r3, r3
 8001b22:	4593      	cmp	fp, r2
 8001b24:	4192      	sbcs	r2, r2
 8001b26:	45a4      	cmp	ip, r4
 8001b28:	41a4      	sbcs	r4, r4
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	427f      	negs	r7, r7
 8001b2e:	431f      	orrs	r7, r3
 8001b30:	0c36      	lsrs	r6, r6, #16
 8001b32:	4252      	negs	r2, r2
 8001b34:	4264      	negs	r4, r4
 8001b36:	19bf      	adds	r7, r7, r6
 8001b38:	4322      	orrs	r2, r4
 8001b3a:	18bf      	adds	r7, r7, r2
 8001b3c:	4662      	mov	r2, ip
 8001b3e:	1838      	adds	r0, r7, r0
 8001b40:	0243      	lsls	r3, r0, #9
 8001b42:	0dd2      	lsrs	r2, r2, #23
 8001b44:	9903      	ldr	r1, [sp, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	026a      	lsls	r2, r5, #9
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	1e50      	subs	r0, r2, #1
 8001b4e:	4182      	sbcs	r2, r0
 8001b50:	4661      	mov	r1, ip
 8001b52:	0ded      	lsrs	r5, r5, #23
 8001b54:	432a      	orrs	r2, r5
 8001b56:	024e      	lsls	r6, r1, #9
 8001b58:	4332      	orrs	r2, r6
 8001b5a:	01d9      	lsls	r1, r3, #7
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dmul+0x31c>
 8001b5e:	e0b3      	b.n	8001cc8 <__aeabi_dmul+0x484>
 8001b60:	2601      	movs	r6, #1
 8001b62:	0850      	lsrs	r0, r2, #1
 8001b64:	4032      	ands	r2, r6
 8001b66:	4302      	orrs	r2, r0
 8001b68:	07de      	lsls	r6, r3, #31
 8001b6a:	4332      	orrs	r2, r6
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	4c22      	ldr	r4, [pc, #136]	; (8001bf8 <__aeabi_dmul+0x3b4>)
 8001b70:	4454      	add	r4, sl
 8001b72:	2c00      	cmp	r4, #0
 8001b74:	dd62      	ble.n	8001c3c <__aeabi_dmul+0x3f8>
 8001b76:	0751      	lsls	r1, r2, #29
 8001b78:	d009      	beq.n	8001b8e <__aeabi_dmul+0x34a>
 8001b7a:	200f      	movs	r0, #15
 8001b7c:	4010      	ands	r0, r2
 8001b7e:	2804      	cmp	r0, #4
 8001b80:	d005      	beq.n	8001b8e <__aeabi_dmul+0x34a>
 8001b82:	1d10      	adds	r0, r2, #4
 8001b84:	4290      	cmp	r0, r2
 8001b86:	4192      	sbcs	r2, r2
 8001b88:	4252      	negs	r2, r2
 8001b8a:	189b      	adds	r3, r3, r2
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	01d9      	lsls	r1, r3, #7
 8001b90:	d504      	bpl.n	8001b9c <__aeabi_dmul+0x358>
 8001b92:	2480      	movs	r4, #128	; 0x80
 8001b94:	4819      	ldr	r0, [pc, #100]	; (8001bfc <__aeabi_dmul+0x3b8>)
 8001b96:	00e4      	lsls	r4, r4, #3
 8001b98:	4003      	ands	r3, r0
 8001b9a:	4454      	add	r4, sl
 8001b9c:	4818      	ldr	r0, [pc, #96]	; (8001c00 <__aeabi_dmul+0x3bc>)
 8001b9e:	4284      	cmp	r4, r0
 8001ba0:	dd00      	ble.n	8001ba4 <__aeabi_dmul+0x360>
 8001ba2:	e727      	b.n	80019f4 <__aeabi_dmul+0x1b0>
 8001ba4:	075e      	lsls	r6, r3, #29
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	08d2      	lsrs	r2, r2, #3
 8001baa:	0b1f      	lsrs	r7, r3, #12
 8001bac:	0563      	lsls	r3, r4, #21
 8001bae:	4316      	orrs	r6, r2
 8001bb0:	0d5b      	lsrs	r3, r3, #21
 8001bb2:	e6b2      	b.n	800191a <__aeabi_dmul+0xd6>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4699      	mov	r9, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	2704      	movs	r7, #4
 8001bbc:	2600      	movs	r6, #0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	e664      	b.n	800188c <__aeabi_dmul+0x48>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	9701      	str	r7, [sp, #4]
 8001bc6:	4681      	mov	r9, r0
 8001bc8:	270c      	movs	r7, #12
 8001bca:	469b      	mov	fp, r3
 8001bcc:	e65e      	b.n	800188c <__aeabi_dmul+0x48>
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	4317      	orrs	r7, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	e676      	b.n	80018c6 <__aeabi_dmul+0x82>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	2003      	movs	r0, #3
 8001bdc:	431f      	orrs	r7, r3
 8001bde:	4643      	mov	r3, r8
 8001be0:	e671      	b.n	80018c6 <__aeabi_dmul+0x82>
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	000007ff 	.word	0x000007ff
 8001be8:	fffffc01 	.word	0xfffffc01
 8001bec:	08009db8 	.word	0x08009db8
 8001bf0:	800fffff 	.word	0x800fffff
 8001bf4:	fffffc0d 	.word	0xfffffc0d
 8001bf8:	000003ff 	.word	0x000003ff
 8001bfc:	feffffff 	.word	0xfeffffff
 8001c00:	000007fe 	.word	0x000007fe
 8001c04:	2300      	movs	r3, #0
 8001c06:	2780      	movs	r7, #128	; 0x80
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	033f      	lsls	r7, r7, #12
 8001c0c:	2600      	movs	r6, #0
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001c10:	e683      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	0032      	movs	r2, r6
 8001c16:	46a4      	mov	ip, r4
 8001c18:	4658      	mov	r0, fp
 8001c1a:	e670      	b.n	80018fe <__aeabi_dmul+0xba>
 8001c1c:	46ac      	mov	ip, r5
 8001c1e:	e66e      	b.n	80018fe <__aeabi_dmul+0xba>
 8001c20:	2780      	movs	r7, #128	; 0x80
 8001c22:	9901      	ldr	r1, [sp, #4]
 8001c24:	033f      	lsls	r7, r7, #12
 8001c26:	4239      	tst	r1, r7
 8001c28:	d02d      	beq.n	8001c86 <__aeabi_dmul+0x442>
 8001c2a:	423b      	tst	r3, r7
 8001c2c:	d12b      	bne.n	8001c86 <__aeabi_dmul+0x442>
 8001c2e:	431f      	orrs	r7, r3
 8001c30:	033f      	lsls	r7, r7, #12
 8001c32:	0b3f      	lsrs	r7, r7, #12
 8001c34:	9500      	str	r5, [sp, #0]
 8001c36:	0016      	movs	r6, r2
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001c3a:	e66e      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c3c:	2501      	movs	r5, #1
 8001c3e:	1b2d      	subs	r5, r5, r4
 8001c40:	2d38      	cmp	r5, #56	; 0x38
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dmul+0x402>
 8001c44:	e666      	b.n	8001914 <__aeabi_dmul+0xd0>
 8001c46:	2d1f      	cmp	r5, #31
 8001c48:	dc40      	bgt.n	8001ccc <__aeabi_dmul+0x488>
 8001c4a:	4835      	ldr	r0, [pc, #212]	; (8001d20 <__aeabi_dmul+0x4dc>)
 8001c4c:	001c      	movs	r4, r3
 8001c4e:	4450      	add	r0, sl
 8001c50:	0016      	movs	r6, r2
 8001c52:	4082      	lsls	r2, r0
 8001c54:	4084      	lsls	r4, r0
 8001c56:	40ee      	lsrs	r6, r5
 8001c58:	1e50      	subs	r0, r2, #1
 8001c5a:	4182      	sbcs	r2, r0
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	4314      	orrs	r4, r2
 8001c60:	40eb      	lsrs	r3, r5
 8001c62:	0762      	lsls	r2, r4, #29
 8001c64:	d009      	beq.n	8001c7a <__aeabi_dmul+0x436>
 8001c66:	220f      	movs	r2, #15
 8001c68:	4022      	ands	r2, r4
 8001c6a:	2a04      	cmp	r2, #4
 8001c6c:	d005      	beq.n	8001c7a <__aeabi_dmul+0x436>
 8001c6e:	0022      	movs	r2, r4
 8001c70:	1d14      	adds	r4, r2, #4
 8001c72:	4294      	cmp	r4, r2
 8001c74:	4180      	sbcs	r0, r0
 8001c76:	4240      	negs	r0, r0
 8001c78:	181b      	adds	r3, r3, r0
 8001c7a:	021a      	lsls	r2, r3, #8
 8001c7c:	d53e      	bpl.n	8001cfc <__aeabi_dmul+0x4b8>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	2700      	movs	r7, #0
 8001c82:	2600      	movs	r6, #0
 8001c84:	e649      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c86:	2780      	movs	r7, #128	; 0x80
 8001c88:	9b01      	ldr	r3, [sp, #4]
 8001c8a:	033f      	lsls	r7, r7, #12
 8001c8c:	431f      	orrs	r7, r3
 8001c8e:	033f      	lsls	r7, r7, #12
 8001c90:	0b3f      	lsrs	r7, r7, #12
 8001c92:	9400      	str	r4, [sp, #0]
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001c96:	e640      	b.n	800191a <__aeabi_dmul+0xd6>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	465a      	mov	r2, fp
 8001c9c:	3b28      	subs	r3, #40	; 0x28
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	2600      	movs	r6, #0
 8001ca2:	9201      	str	r2, [sp, #4]
 8001ca4:	e66d      	b.n	8001982 <__aeabi_dmul+0x13e>
 8001ca6:	4658      	mov	r0, fp
 8001ca8:	f000 fce4 	bl	8002674 <__clzsi2>
 8001cac:	3020      	adds	r0, #32
 8001cae:	e657      	b.n	8001960 <__aeabi_dmul+0x11c>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	4652      	mov	r2, sl
 8001cb4:	3b28      	subs	r3, #40	; 0x28
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	e693      	b.n	80019e6 <__aeabi_dmul+0x1a2>
 8001cbe:	4650      	mov	r0, sl
 8001cc0:	f000 fcd8 	bl	8002674 <__clzsi2>
 8001cc4:	3020      	adds	r0, #32
 8001cc6:	e67b      	b.n	80019c0 <__aeabi_dmul+0x17c>
 8001cc8:	46ca      	mov	sl, r9
 8001cca:	e750      	b.n	8001b6e <__aeabi_dmul+0x32a>
 8001ccc:	201f      	movs	r0, #31
 8001cce:	001e      	movs	r6, r3
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	1b04      	subs	r4, r0, r4
 8001cd4:	40e6      	lsrs	r6, r4
 8001cd6:	2d20      	cmp	r5, #32
 8001cd8:	d003      	beq.n	8001ce2 <__aeabi_dmul+0x49e>
 8001cda:	4c12      	ldr	r4, [pc, #72]	; (8001d24 <__aeabi_dmul+0x4e0>)
 8001cdc:	4454      	add	r4, sl
 8001cde:	40a3      	lsls	r3, r4
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	1e50      	subs	r0, r2, #1
 8001ce4:	4182      	sbcs	r2, r0
 8001ce6:	4332      	orrs	r2, r6
 8001ce8:	2607      	movs	r6, #7
 8001cea:	2700      	movs	r7, #0
 8001cec:	4016      	ands	r6, r2
 8001cee:	d009      	beq.n	8001d04 <__aeabi_dmul+0x4c0>
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	4010      	ands	r0, r2
 8001cf6:	0014      	movs	r4, r2
 8001cf8:	2804      	cmp	r0, #4
 8001cfa:	d1b9      	bne.n	8001c70 <__aeabi_dmul+0x42c>
 8001cfc:	0022      	movs	r2, r4
 8001cfe:	075e      	lsls	r6, r3, #29
 8001d00:	025b      	lsls	r3, r3, #9
 8001d02:	0b1f      	lsrs	r7, r3, #12
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	4316      	orrs	r6, r2
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e606      	b.n	800191a <__aeabi_dmul+0xd6>
 8001d0c:	2780      	movs	r7, #128	; 0x80
 8001d0e:	033f      	lsls	r7, r7, #12
 8001d10:	431f      	orrs	r7, r3
 8001d12:	033f      	lsls	r7, r7, #12
 8001d14:	0b3f      	lsrs	r7, r7, #12
 8001d16:	0016      	movs	r6, r2
 8001d18:	4b00      	ldr	r3, [pc, #0]	; (8001d1c <__aeabi_dmul+0x4d8>)
 8001d1a:	e5fe      	b.n	800191a <__aeabi_dmul+0xd6>
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	0000041e 	.word	0x0000041e
 8001d24:	0000043e 	.word	0x0000043e

08001d28 <__aeabi_dsub>:
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	4657      	mov	r7, sl
 8001d2c:	464e      	mov	r6, r9
 8001d2e:	4645      	mov	r5, r8
 8001d30:	46de      	mov	lr, fp
 8001d32:	000c      	movs	r4, r1
 8001d34:	0309      	lsls	r1, r1, #12
 8001d36:	b5e0      	push	{r5, r6, r7, lr}
 8001d38:	0a49      	lsrs	r1, r1, #9
 8001d3a:	0f46      	lsrs	r6, r0, #29
 8001d3c:	005f      	lsls	r7, r3, #1
 8001d3e:	4331      	orrs	r1, r6
 8001d40:	031e      	lsls	r6, r3, #12
 8001d42:	0fdb      	lsrs	r3, r3, #31
 8001d44:	0a76      	lsrs	r6, r6, #9
 8001d46:	469b      	mov	fp, r3
 8001d48:	0f53      	lsrs	r3, r2, #29
 8001d4a:	4333      	orrs	r3, r6
 8001d4c:	4ec8      	ldr	r6, [pc, #800]	; (8002070 <__aeabi_dsub+0x348>)
 8001d4e:	0065      	lsls	r5, r4, #1
 8001d50:	00c0      	lsls	r0, r0, #3
 8001d52:	0fe4      	lsrs	r4, r4, #31
 8001d54:	00d2      	lsls	r2, r2, #3
 8001d56:	0d6d      	lsrs	r5, r5, #21
 8001d58:	46a2      	mov	sl, r4
 8001d5a:	4681      	mov	r9, r0
 8001d5c:	0d7f      	lsrs	r7, r7, #21
 8001d5e:	469c      	mov	ip, r3
 8001d60:	4690      	mov	r8, r2
 8001d62:	42b7      	cmp	r7, r6
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x40>
 8001d66:	e0b9      	b.n	8001edc <__aeabi_dsub+0x1b4>
 8001d68:	465b      	mov	r3, fp
 8001d6a:	2601      	movs	r6, #1
 8001d6c:	4073      	eors	r3, r6
 8001d6e:	469b      	mov	fp, r3
 8001d70:	1bee      	subs	r6, r5, r7
 8001d72:	45a3      	cmp	fp, r4
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x50>
 8001d76:	e083      	b.n	8001e80 <__aeabi_dsub+0x158>
 8001d78:	2e00      	cmp	r6, #0
 8001d7a:	dd63      	ble.n	8001e44 <__aeabi_dsub+0x11c>
 8001d7c:	2f00      	cmp	r7, #0
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x5a>
 8001d80:	e0b1      	b.n	8001ee6 <__aeabi_dsub+0x1be>
 8001d82:	4663      	mov	r3, ip
 8001d84:	4313      	orrs	r3, r2
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x62>
 8001d88:	e123      	b.n	8001fd2 <__aeabi_dsub+0x2aa>
 8001d8a:	1e73      	subs	r3, r6, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x6a>
 8001d90:	e1ba      	b.n	8002108 <__aeabi_dsub+0x3e0>
 8001d92:	1a86      	subs	r6, r0, r2
 8001d94:	4663      	mov	r3, ip
 8001d96:	42b0      	cmp	r0, r6
 8001d98:	4180      	sbcs	r0, r0
 8001d9a:	2501      	movs	r5, #1
 8001d9c:	1ac9      	subs	r1, r1, r3
 8001d9e:	4240      	negs	r0, r0
 8001da0:	1a09      	subs	r1, r1, r0
 8001da2:	020b      	lsls	r3, r1, #8
 8001da4:	d400      	bmi.n	8001da8 <__aeabi_dsub+0x80>
 8001da6:	e147      	b.n	8002038 <__aeabi_dsub+0x310>
 8001da8:	0249      	lsls	r1, r1, #9
 8001daa:	0a4b      	lsrs	r3, r1, #9
 8001dac:	4698      	mov	r8, r3
 8001dae:	4643      	mov	r3, r8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x8e>
 8001db4:	e189      	b.n	80020ca <__aeabi_dsub+0x3a2>
 8001db6:	4640      	mov	r0, r8
 8001db8:	f000 fc5c 	bl	8002674 <__clzsi2>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	2b1f      	cmp	r3, #31
 8001dc2:	dd00      	ble.n	8001dc6 <__aeabi_dsub+0x9e>
 8001dc4:	e17c      	b.n	80020c0 <__aeabi_dsub+0x398>
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	0030      	movs	r0, r6
 8001dca:	1ad2      	subs	r2, r2, r3
 8001dcc:	4641      	mov	r1, r8
 8001dce:	40d0      	lsrs	r0, r2
 8001dd0:	4099      	lsls	r1, r3
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	409e      	lsls	r6, r3
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	429d      	cmp	r5, r3
 8001dda:	dd00      	ble.n	8001dde <__aeabi_dsub+0xb6>
 8001ddc:	e16a      	b.n	80020b4 <__aeabi_dsub+0x38c>
 8001dde:	1b5d      	subs	r5, r3, r5
 8001de0:	1c6b      	adds	r3, r5, #1
 8001de2:	2b1f      	cmp	r3, #31
 8001de4:	dd00      	ble.n	8001de8 <__aeabi_dsub+0xc0>
 8001de6:	e194      	b.n	8002112 <__aeabi_dsub+0x3ea>
 8001de8:	2120      	movs	r1, #32
 8001dea:	0010      	movs	r0, r2
 8001dec:	0035      	movs	r5, r6
 8001dee:	1ac9      	subs	r1, r1, r3
 8001df0:	408e      	lsls	r6, r1
 8001df2:	40da      	lsrs	r2, r3
 8001df4:	4088      	lsls	r0, r1
 8001df6:	40dd      	lsrs	r5, r3
 8001df8:	1e71      	subs	r1, r6, #1
 8001dfa:	418e      	sbcs	r6, r1
 8001dfc:	0011      	movs	r1, r2
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4328      	orrs	r0, r5
 8001e02:	2500      	movs	r5, #0
 8001e04:	4306      	orrs	r6, r0
 8001e06:	4032      	ands	r2, r6
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d009      	beq.n	8001e20 <__aeabi_dsub+0xf8>
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	4033      	ands	r3, r6
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d005      	beq.n	8001e20 <__aeabi_dsub+0xf8>
 8001e14:	1d33      	adds	r3, r6, #4
 8001e16:	42b3      	cmp	r3, r6
 8001e18:	41b6      	sbcs	r6, r6
 8001e1a:	4276      	negs	r6, r6
 8001e1c:	1989      	adds	r1, r1, r6
 8001e1e:	001e      	movs	r6, r3
 8001e20:	020b      	lsls	r3, r1, #8
 8001e22:	d400      	bmi.n	8001e26 <__aeabi_dsub+0xfe>
 8001e24:	e23d      	b.n	80022a2 <__aeabi_dsub+0x57a>
 8001e26:	1c6a      	adds	r2, r5, #1
 8001e28:	4b91      	ldr	r3, [pc, #580]	; (8002070 <__aeabi_dsub+0x348>)
 8001e2a:	0555      	lsls	r5, r2, #21
 8001e2c:	0d6d      	lsrs	r5, r5, #21
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x10c>
 8001e32:	e119      	b.n	8002068 <__aeabi_dsub+0x340>
 8001e34:	4a8f      	ldr	r2, [pc, #572]	; (8002074 <__aeabi_dsub+0x34c>)
 8001e36:	08f6      	lsrs	r6, r6, #3
 8001e38:	400a      	ands	r2, r1
 8001e3a:	0757      	lsls	r7, r2, #29
 8001e3c:	0252      	lsls	r2, r2, #9
 8001e3e:	4337      	orrs	r7, r6
 8001e40:	0b12      	lsrs	r2, r2, #12
 8001e42:	e09b      	b.n	8001f7c <__aeabi_dsub+0x254>
 8001e44:	2e00      	cmp	r6, #0
 8001e46:	d000      	beq.n	8001e4a <__aeabi_dsub+0x122>
 8001e48:	e0c5      	b.n	8001fd6 <__aeabi_dsub+0x2ae>
 8001e4a:	1c6e      	adds	r6, r5, #1
 8001e4c:	0576      	lsls	r6, r6, #21
 8001e4e:	0d76      	lsrs	r6, r6, #21
 8001e50:	2e01      	cmp	r6, #1
 8001e52:	dc00      	bgt.n	8001e56 <__aeabi_dsub+0x12e>
 8001e54:	e148      	b.n	80020e8 <__aeabi_dsub+0x3c0>
 8001e56:	4667      	mov	r7, ip
 8001e58:	1a86      	subs	r6, r0, r2
 8001e5a:	1bcb      	subs	r3, r1, r7
 8001e5c:	42b0      	cmp	r0, r6
 8001e5e:	41bf      	sbcs	r7, r7
 8001e60:	427f      	negs	r7, r7
 8001e62:	46b8      	mov	r8, r7
 8001e64:	001f      	movs	r7, r3
 8001e66:	4643      	mov	r3, r8
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	003b      	movs	r3, r7
 8001e6c:	46b8      	mov	r8, r7
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d500      	bpl.n	8001e74 <__aeabi_dsub+0x14c>
 8001e72:	e15f      	b.n	8002134 <__aeabi_dsub+0x40c>
 8001e74:	4337      	orrs	r7, r6
 8001e76:	d19a      	bne.n	8001dae <__aeabi_dsub+0x86>
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	e079      	b.n	8001f74 <__aeabi_dsub+0x24c>
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dsub+0x15e>
 8001e84:	e0fa      	b.n	800207c <__aeabi_dsub+0x354>
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x164>
 8001e8a:	e08d      	b.n	8001fa8 <__aeabi_dsub+0x280>
 8001e8c:	4b78      	ldr	r3, [pc, #480]	; (8002070 <__aeabi_dsub+0x348>)
 8001e8e:	429d      	cmp	r5, r3
 8001e90:	d067      	beq.n	8001f62 <__aeabi_dsub+0x23a>
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	4667      	mov	r7, ip
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	431f      	orrs	r7, r3
 8001e9a:	46bc      	mov	ip, r7
 8001e9c:	2e38      	cmp	r6, #56	; 0x38
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_dsub+0x17a>
 8001ea0:	e152      	b.n	8002148 <__aeabi_dsub+0x420>
 8001ea2:	4663      	mov	r3, ip
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	4193      	sbcs	r3, r2
 8001eaa:	181e      	adds	r6, r3, r0
 8001eac:	4286      	cmp	r6, r0
 8001eae:	4180      	sbcs	r0, r0
 8001eb0:	4240      	negs	r0, r0
 8001eb2:	1809      	adds	r1, r1, r0
 8001eb4:	020b      	lsls	r3, r1, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x192>
 8001eb8:	e0be      	b.n	8002038 <__aeabi_dsub+0x310>
 8001eba:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <__aeabi_dsub+0x348>)
 8001ebc:	3501      	adds	r5, #1
 8001ebe:	429d      	cmp	r5, r3
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x19c>
 8001ec2:	e0d2      	b.n	800206a <__aeabi_dsub+0x342>
 8001ec4:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <__aeabi_dsub+0x34c>)
 8001ec6:	0873      	lsrs	r3, r6, #1
 8001ec8:	400a      	ands	r2, r1
 8001eca:	2101      	movs	r1, #1
 8001ecc:	400e      	ands	r6, r1
 8001ece:	431e      	orrs	r6, r3
 8001ed0:	0851      	lsrs	r1, r2, #1
 8001ed2:	07d3      	lsls	r3, r2, #31
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	431e      	orrs	r6, r3
 8001ed8:	4032      	ands	r2, r6
 8001eda:	e795      	b.n	8001e08 <__aeabi_dsub+0xe0>
 8001edc:	001e      	movs	r6, r3
 8001ede:	4316      	orrs	r6, r2
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x1bc>
 8001ee2:	e745      	b.n	8001d70 <__aeabi_dsub+0x48>
 8001ee4:	e740      	b.n	8001d68 <__aeabi_dsub+0x40>
 8001ee6:	4b62      	ldr	r3, [pc, #392]	; (8002070 <__aeabi_dsub+0x348>)
 8001ee8:	429d      	cmp	r5, r3
 8001eea:	d03a      	beq.n	8001f62 <__aeabi_dsub+0x23a>
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	4667      	mov	r7, ip
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	431f      	orrs	r7, r3
 8001ef4:	46bc      	mov	ip, r7
 8001ef6:	2e38      	cmp	r6, #56	; 0x38
 8001ef8:	dd00      	ble.n	8001efc <__aeabi_dsub+0x1d4>
 8001efa:	e0eb      	b.n	80020d4 <__aeabi_dsub+0x3ac>
 8001efc:	2e1f      	cmp	r6, #31
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_dsub+0x1da>
 8001f00:	e13a      	b.n	8002178 <__aeabi_dsub+0x450>
 8001f02:	0033      	movs	r3, r6
 8001f04:	4667      	mov	r7, ip
 8001f06:	3b20      	subs	r3, #32
 8001f08:	40df      	lsrs	r7, r3
 8001f0a:	003b      	movs	r3, r7
 8001f0c:	2e20      	cmp	r6, #32
 8001f0e:	d005      	beq.n	8001f1c <__aeabi_dsub+0x1f4>
 8001f10:	2740      	movs	r7, #64	; 0x40
 8001f12:	1bbf      	subs	r7, r7, r6
 8001f14:	4666      	mov	r6, ip
 8001f16:	40be      	lsls	r6, r7
 8001f18:	4332      	orrs	r2, r6
 8001f1a:	4690      	mov	r8, r2
 8001f1c:	4646      	mov	r6, r8
 8001f1e:	1e72      	subs	r2, r6, #1
 8001f20:	4196      	sbcs	r6, r2
 8001f22:	4333      	orrs	r3, r6
 8001f24:	e0da      	b.n	80020dc <__aeabi_dsub+0x3b4>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x204>
 8001f2a:	e214      	b.n	8002356 <__aeabi_dsub+0x62e>
 8001f2c:	4663      	mov	r3, ip
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x20c>
 8001f32:	e168      	b.n	8002206 <__aeabi_dsub+0x4de>
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	074e      	lsls	r6, r1, #29
 8001f38:	08c0      	lsrs	r0, r0, #3
 8001f3a:	08c9      	lsrs	r1, r1, #3
 8001f3c:	031b      	lsls	r3, r3, #12
 8001f3e:	4306      	orrs	r6, r0
 8001f40:	4219      	tst	r1, r3
 8001f42:	d008      	beq.n	8001f56 <__aeabi_dsub+0x22e>
 8001f44:	4660      	mov	r0, ip
 8001f46:	08c0      	lsrs	r0, r0, #3
 8001f48:	4218      	tst	r0, r3
 8001f4a:	d104      	bne.n	8001f56 <__aeabi_dsub+0x22e>
 8001f4c:	4663      	mov	r3, ip
 8001f4e:	0001      	movs	r1, r0
 8001f50:	08d2      	lsrs	r2, r2, #3
 8001f52:	075e      	lsls	r6, r3, #29
 8001f54:	4316      	orrs	r6, r2
 8001f56:	00f3      	lsls	r3, r6, #3
 8001f58:	4699      	mov	r9, r3
 8001f5a:	00c9      	lsls	r1, r1, #3
 8001f5c:	0f72      	lsrs	r2, r6, #29
 8001f5e:	4d44      	ldr	r5, [pc, #272]	; (8002070 <__aeabi_dsub+0x348>)
 8001f60:	4311      	orrs	r1, r2
 8001f62:	464b      	mov	r3, r9
 8001f64:	08de      	lsrs	r6, r3, #3
 8001f66:	4b42      	ldr	r3, [pc, #264]	; (8002070 <__aeabi_dsub+0x348>)
 8001f68:	074f      	lsls	r7, r1, #29
 8001f6a:	4337      	orrs	r7, r6
 8001f6c:	08ca      	lsrs	r2, r1, #3
 8001f6e:	429d      	cmp	r5, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x24c>
 8001f72:	e06e      	b.n	8002052 <__aeabi_dsub+0x32a>
 8001f74:	0312      	lsls	r2, r2, #12
 8001f76:	056d      	lsls	r5, r5, #21
 8001f78:	0b12      	lsrs	r2, r2, #12
 8001f7a:	0d6d      	lsrs	r5, r5, #21
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	0312      	lsls	r2, r2, #12
 8001f80:	0b13      	lsrs	r3, r2, #12
 8001f82:	0d0a      	lsrs	r2, r1, #20
 8001f84:	0512      	lsls	r2, r2, #20
 8001f86:	431a      	orrs	r2, r3
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <__aeabi_dsub+0x350>)
 8001f8a:	052d      	lsls	r5, r5, #20
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	432b      	orrs	r3, r5
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	07e4      	lsls	r4, r4, #31
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	4323      	orrs	r3, r4
 8001f98:	0038      	movs	r0, r7
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	bc3c      	pop	{r2, r3, r4, r5}
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	46a2      	mov	sl, r4
 8001fa4:	46ab      	mov	fp, r5
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa8:	4663      	mov	r3, ip
 8001faa:	4313      	orrs	r3, r2
 8001fac:	d011      	beq.n	8001fd2 <__aeabi_dsub+0x2aa>
 8001fae:	1e73      	subs	r3, r6, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_dsub+0x28e>
 8001fb4:	e107      	b.n	80021c6 <__aeabi_dsub+0x49e>
 8001fb6:	1886      	adds	r6, r0, r2
 8001fb8:	4286      	cmp	r6, r0
 8001fba:	4180      	sbcs	r0, r0
 8001fbc:	4461      	add	r1, ip
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	1809      	adds	r1, r1, r0
 8001fc2:	2501      	movs	r5, #1
 8001fc4:	020b      	lsls	r3, r1, #8
 8001fc6:	d537      	bpl.n	8002038 <__aeabi_dsub+0x310>
 8001fc8:	2502      	movs	r5, #2
 8001fca:	e77b      	b.n	8001ec4 <__aeabi_dsub+0x19c>
 8001fcc:	003e      	movs	r6, r7
 8001fce:	4661      	mov	r1, ip
 8001fd0:	4691      	mov	r9, r2
 8001fd2:	0035      	movs	r5, r6
 8001fd4:	e7c5      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8001fd6:	465c      	mov	r4, fp
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x2b6>
 8001fdc:	e0e1      	b.n	80021a2 <__aeabi_dsub+0x47a>
 8001fde:	000b      	movs	r3, r1
 8001fe0:	4303      	orrs	r3, r0
 8001fe2:	d0f3      	beq.n	8001fcc <__aeabi_dsub+0x2a4>
 8001fe4:	1c73      	adds	r3, r6, #1
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x2c2>
 8001fe8:	e1ac      	b.n	8002344 <__aeabi_dsub+0x61c>
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <__aeabi_dsub+0x348>)
 8001fec:	429f      	cmp	r7, r3
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x2ca>
 8001ff0:	e13a      	b.n	8002268 <__aeabi_dsub+0x540>
 8001ff2:	43f3      	mvns	r3, r6
 8001ff4:	2b38      	cmp	r3, #56	; 0x38
 8001ff6:	dd00      	ble.n	8001ffa <__aeabi_dsub+0x2d2>
 8001ff8:	e16f      	b.n	80022da <__aeabi_dsub+0x5b2>
 8001ffa:	2b1f      	cmp	r3, #31
 8001ffc:	dd00      	ble.n	8002000 <__aeabi_dsub+0x2d8>
 8001ffe:	e18c      	b.n	800231a <__aeabi_dsub+0x5f2>
 8002000:	2520      	movs	r5, #32
 8002002:	000e      	movs	r6, r1
 8002004:	1aed      	subs	r5, r5, r3
 8002006:	40ae      	lsls	r6, r5
 8002008:	46b0      	mov	r8, r6
 800200a:	0006      	movs	r6, r0
 800200c:	46aa      	mov	sl, r5
 800200e:	40de      	lsrs	r6, r3
 8002010:	4645      	mov	r5, r8
 8002012:	4335      	orrs	r5, r6
 8002014:	002e      	movs	r6, r5
 8002016:	4655      	mov	r5, sl
 8002018:	40d9      	lsrs	r1, r3
 800201a:	40a8      	lsls	r0, r5
 800201c:	4663      	mov	r3, ip
 800201e:	1e45      	subs	r5, r0, #1
 8002020:	41a8      	sbcs	r0, r5
 8002022:	1a5b      	subs	r3, r3, r1
 8002024:	469c      	mov	ip, r3
 8002026:	4330      	orrs	r0, r6
 8002028:	1a16      	subs	r6, r2, r0
 800202a:	42b2      	cmp	r2, r6
 800202c:	4192      	sbcs	r2, r2
 800202e:	4663      	mov	r3, ip
 8002030:	4252      	negs	r2, r2
 8002032:	1a99      	subs	r1, r3, r2
 8002034:	003d      	movs	r5, r7
 8002036:	e6b4      	b.n	8001da2 <__aeabi_dsub+0x7a>
 8002038:	2207      	movs	r2, #7
 800203a:	4032      	ands	r2, r6
 800203c:	2a00      	cmp	r2, #0
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x31a>
 8002040:	e6e4      	b.n	8001e0c <__aeabi_dsub+0xe4>
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <__aeabi_dsub+0x348>)
 8002044:	08f6      	lsrs	r6, r6, #3
 8002046:	074f      	lsls	r7, r1, #29
 8002048:	4337      	orrs	r7, r6
 800204a:	08ca      	lsrs	r2, r1, #3
 800204c:	429d      	cmp	r5, r3
 800204e:	d000      	beq.n	8002052 <__aeabi_dsub+0x32a>
 8002050:	e790      	b.n	8001f74 <__aeabi_dsub+0x24c>
 8002052:	003b      	movs	r3, r7
 8002054:	4313      	orrs	r3, r2
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x332>
 8002058:	e1a6      	b.n	80023a8 <__aeabi_dsub+0x680>
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	031b      	lsls	r3, r3, #12
 800205e:	431a      	orrs	r2, r3
 8002060:	0312      	lsls	r2, r2, #12
 8002062:	0b12      	lsrs	r2, r2, #12
 8002064:	4d02      	ldr	r5, [pc, #8]	; (8002070 <__aeabi_dsub+0x348>)
 8002066:	e789      	b.n	8001f7c <__aeabi_dsub+0x254>
 8002068:	0015      	movs	r5, r2
 800206a:	2200      	movs	r2, #0
 800206c:	2700      	movs	r7, #0
 800206e:	e785      	b.n	8001f7c <__aeabi_dsub+0x254>
 8002070:	000007ff 	.word	0x000007ff
 8002074:	ff7fffff 	.word	0xff7fffff
 8002078:	800fffff 	.word	0x800fffff
 800207c:	2e00      	cmp	r6, #0
 800207e:	d000      	beq.n	8002082 <__aeabi_dsub+0x35a>
 8002080:	e0c7      	b.n	8002212 <__aeabi_dsub+0x4ea>
 8002082:	1c6b      	adds	r3, r5, #1
 8002084:	055e      	lsls	r6, r3, #21
 8002086:	0d76      	lsrs	r6, r6, #21
 8002088:	2e01      	cmp	r6, #1
 800208a:	dc00      	bgt.n	800208e <__aeabi_dsub+0x366>
 800208c:	e0f0      	b.n	8002270 <__aeabi_dsub+0x548>
 800208e:	4dc8      	ldr	r5, [pc, #800]	; (80023b0 <__aeabi_dsub+0x688>)
 8002090:	42ab      	cmp	r3, r5
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x36e>
 8002094:	e0b9      	b.n	800220a <__aeabi_dsub+0x4e2>
 8002096:	1885      	adds	r5, r0, r2
 8002098:	000a      	movs	r2, r1
 800209a:	4285      	cmp	r5, r0
 800209c:	4189      	sbcs	r1, r1
 800209e:	4462      	add	r2, ip
 80020a0:	4249      	negs	r1, r1
 80020a2:	1851      	adds	r1, r2, r1
 80020a4:	2207      	movs	r2, #7
 80020a6:	07ce      	lsls	r6, r1, #31
 80020a8:	086d      	lsrs	r5, r5, #1
 80020aa:	432e      	orrs	r6, r5
 80020ac:	0849      	lsrs	r1, r1, #1
 80020ae:	4032      	ands	r2, r6
 80020b0:	001d      	movs	r5, r3
 80020b2:	e6a9      	b.n	8001e08 <__aeabi_dsub+0xe0>
 80020b4:	49bf      	ldr	r1, [pc, #764]	; (80023b4 <__aeabi_dsub+0x68c>)
 80020b6:	1aed      	subs	r5, r5, r3
 80020b8:	4011      	ands	r1, r2
 80020ba:	2207      	movs	r2, #7
 80020bc:	4032      	ands	r2, r6
 80020be:	e6a3      	b.n	8001e08 <__aeabi_dsub+0xe0>
 80020c0:	0032      	movs	r2, r6
 80020c2:	3828      	subs	r0, #40	; 0x28
 80020c4:	4082      	lsls	r2, r0
 80020c6:	2600      	movs	r6, #0
 80020c8:	e686      	b.n	8001dd8 <__aeabi_dsub+0xb0>
 80020ca:	0030      	movs	r0, r6
 80020cc:	f000 fad2 	bl	8002674 <__clzsi2>
 80020d0:	3020      	adds	r0, #32
 80020d2:	e673      	b.n	8001dbc <__aeabi_dsub+0x94>
 80020d4:	4663      	mov	r3, ip
 80020d6:	4313      	orrs	r3, r2
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	4193      	sbcs	r3, r2
 80020dc:	1ac6      	subs	r6, r0, r3
 80020de:	42b0      	cmp	r0, r6
 80020e0:	4180      	sbcs	r0, r0
 80020e2:	4240      	negs	r0, r0
 80020e4:	1a09      	subs	r1, r1, r0
 80020e6:	e65c      	b.n	8001da2 <__aeabi_dsub+0x7a>
 80020e8:	000e      	movs	r6, r1
 80020ea:	4667      	mov	r7, ip
 80020ec:	4306      	orrs	r6, r0
 80020ee:	4317      	orrs	r7, r2
 80020f0:	2d00      	cmp	r5, #0
 80020f2:	d15e      	bne.n	80021b2 <__aeabi_dsub+0x48a>
 80020f4:	2e00      	cmp	r6, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x3d2>
 80020f8:	e0f3      	b.n	80022e2 <__aeabi_dsub+0x5ba>
 80020fa:	2f00      	cmp	r7, #0
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x3d8>
 80020fe:	e11e      	b.n	800233e <__aeabi_dsub+0x616>
 8002100:	465c      	mov	r4, fp
 8002102:	4661      	mov	r1, ip
 8002104:	4691      	mov	r9, r2
 8002106:	e72c      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8002108:	4fa9      	ldr	r7, [pc, #676]	; (80023b0 <__aeabi_dsub+0x688>)
 800210a:	42be      	cmp	r6, r7
 800210c:	d07b      	beq.n	8002206 <__aeabi_dsub+0x4de>
 800210e:	001e      	movs	r6, r3
 8002110:	e6f1      	b.n	8001ef6 <__aeabi_dsub+0x1ce>
 8002112:	0010      	movs	r0, r2
 8002114:	3d1f      	subs	r5, #31
 8002116:	40e8      	lsrs	r0, r5
 8002118:	2b20      	cmp	r3, #32
 800211a:	d003      	beq.n	8002124 <__aeabi_dsub+0x3fc>
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	1acb      	subs	r3, r1, r3
 8002120:	409a      	lsls	r2, r3
 8002122:	4316      	orrs	r6, r2
 8002124:	1e73      	subs	r3, r6, #1
 8002126:	419e      	sbcs	r6, r3
 8002128:	2207      	movs	r2, #7
 800212a:	4306      	orrs	r6, r0
 800212c:	4032      	ands	r2, r6
 800212e:	2100      	movs	r1, #0
 8002130:	2500      	movs	r5, #0
 8002132:	e783      	b.n	800203c <__aeabi_dsub+0x314>
 8002134:	1a16      	subs	r6, r2, r0
 8002136:	4663      	mov	r3, ip
 8002138:	42b2      	cmp	r2, r6
 800213a:	4180      	sbcs	r0, r0
 800213c:	1a59      	subs	r1, r3, r1
 800213e:	4240      	negs	r0, r0
 8002140:	1a0b      	subs	r3, r1, r0
 8002142:	4698      	mov	r8, r3
 8002144:	465c      	mov	r4, fp
 8002146:	e632      	b.n	8001dae <__aeabi_dsub+0x86>
 8002148:	2e1f      	cmp	r6, #31
 800214a:	dd00      	ble.n	800214e <__aeabi_dsub+0x426>
 800214c:	e0ab      	b.n	80022a6 <__aeabi_dsub+0x57e>
 800214e:	2720      	movs	r7, #32
 8002150:	1bbb      	subs	r3, r7, r6
 8002152:	469a      	mov	sl, r3
 8002154:	4663      	mov	r3, ip
 8002156:	4657      	mov	r7, sl
 8002158:	40bb      	lsls	r3, r7
 800215a:	4699      	mov	r9, r3
 800215c:	0013      	movs	r3, r2
 800215e:	464f      	mov	r7, r9
 8002160:	40f3      	lsrs	r3, r6
 8002162:	431f      	orrs	r7, r3
 8002164:	003b      	movs	r3, r7
 8002166:	4657      	mov	r7, sl
 8002168:	40ba      	lsls	r2, r7
 800216a:	1e57      	subs	r7, r2, #1
 800216c:	41ba      	sbcs	r2, r7
 800216e:	4313      	orrs	r3, r2
 8002170:	4662      	mov	r2, ip
 8002172:	40f2      	lsrs	r2, r6
 8002174:	1889      	adds	r1, r1, r2
 8002176:	e698      	b.n	8001eaa <__aeabi_dsub+0x182>
 8002178:	2720      	movs	r7, #32
 800217a:	1bbb      	subs	r3, r7, r6
 800217c:	469a      	mov	sl, r3
 800217e:	4663      	mov	r3, ip
 8002180:	4657      	mov	r7, sl
 8002182:	40bb      	lsls	r3, r7
 8002184:	4699      	mov	r9, r3
 8002186:	0013      	movs	r3, r2
 8002188:	464f      	mov	r7, r9
 800218a:	40f3      	lsrs	r3, r6
 800218c:	431f      	orrs	r7, r3
 800218e:	003b      	movs	r3, r7
 8002190:	4657      	mov	r7, sl
 8002192:	40ba      	lsls	r2, r7
 8002194:	1e57      	subs	r7, r2, #1
 8002196:	41ba      	sbcs	r2, r7
 8002198:	4313      	orrs	r3, r2
 800219a:	4662      	mov	r2, ip
 800219c:	40f2      	lsrs	r2, r6
 800219e:	1a89      	subs	r1, r1, r2
 80021a0:	e79c      	b.n	80020dc <__aeabi_dsub+0x3b4>
 80021a2:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <__aeabi_dsub+0x688>)
 80021a4:	429f      	cmp	r7, r3
 80021a6:	d05f      	beq.n	8002268 <__aeabi_dsub+0x540>
 80021a8:	2580      	movs	r5, #128	; 0x80
 80021aa:	042d      	lsls	r5, r5, #16
 80021ac:	4273      	negs	r3, r6
 80021ae:	4329      	orrs	r1, r5
 80021b0:	e720      	b.n	8001ff4 <__aeabi_dsub+0x2cc>
 80021b2:	2e00      	cmp	r6, #0
 80021b4:	d10c      	bne.n	80021d0 <__aeabi_dsub+0x4a8>
 80021b6:	2f00      	cmp	r7, #0
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x494>
 80021ba:	e0d0      	b.n	800235e <__aeabi_dsub+0x636>
 80021bc:	465c      	mov	r4, fp
 80021be:	4661      	mov	r1, ip
 80021c0:	4691      	mov	r9, r2
 80021c2:	4d7b      	ldr	r5, [pc, #492]	; (80023b0 <__aeabi_dsub+0x688>)
 80021c4:	e6cd      	b.n	8001f62 <__aeabi_dsub+0x23a>
 80021c6:	4f7a      	ldr	r7, [pc, #488]	; (80023b0 <__aeabi_dsub+0x688>)
 80021c8:	42be      	cmp	r6, r7
 80021ca:	d01c      	beq.n	8002206 <__aeabi_dsub+0x4de>
 80021cc:	001e      	movs	r6, r3
 80021ce:	e665      	b.n	8001e9c <__aeabi_dsub+0x174>
 80021d0:	2f00      	cmp	r7, #0
 80021d2:	d018      	beq.n	8002206 <__aeabi_dsub+0x4de>
 80021d4:	08c0      	lsrs	r0, r0, #3
 80021d6:	074e      	lsls	r6, r1, #29
 80021d8:	4306      	orrs	r6, r0
 80021da:	2080      	movs	r0, #128	; 0x80
 80021dc:	08c9      	lsrs	r1, r1, #3
 80021de:	0300      	lsls	r0, r0, #12
 80021e0:	4201      	tst	r1, r0
 80021e2:	d008      	beq.n	80021f6 <__aeabi_dsub+0x4ce>
 80021e4:	4663      	mov	r3, ip
 80021e6:	08dc      	lsrs	r4, r3, #3
 80021e8:	4204      	tst	r4, r0
 80021ea:	d104      	bne.n	80021f6 <__aeabi_dsub+0x4ce>
 80021ec:	0021      	movs	r1, r4
 80021ee:	46da      	mov	sl, fp
 80021f0:	08d2      	lsrs	r2, r2, #3
 80021f2:	075e      	lsls	r6, r3, #29
 80021f4:	4316      	orrs	r6, r2
 80021f6:	00f3      	lsls	r3, r6, #3
 80021f8:	4699      	mov	r9, r3
 80021fa:	2401      	movs	r4, #1
 80021fc:	4653      	mov	r3, sl
 80021fe:	00c9      	lsls	r1, r1, #3
 8002200:	0f72      	lsrs	r2, r6, #29
 8002202:	4311      	orrs	r1, r2
 8002204:	401c      	ands	r4, r3
 8002206:	4d6a      	ldr	r5, [pc, #424]	; (80023b0 <__aeabi_dsub+0x688>)
 8002208:	e6ab      	b.n	8001f62 <__aeabi_dsub+0x23a>
 800220a:	001d      	movs	r5, r3
 800220c:	2200      	movs	r2, #0
 800220e:	2700      	movs	r7, #0
 8002210:	e6b4      	b.n	8001f7c <__aeabi_dsub+0x254>
 8002212:	2d00      	cmp	r5, #0
 8002214:	d159      	bne.n	80022ca <__aeabi_dsub+0x5a2>
 8002216:	000b      	movs	r3, r1
 8002218:	4303      	orrs	r3, r0
 800221a:	d100      	bne.n	800221e <__aeabi_dsub+0x4f6>
 800221c:	e6d6      	b.n	8001fcc <__aeabi_dsub+0x2a4>
 800221e:	1c73      	adds	r3, r6, #1
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x4fc>
 8002222:	e0b2      	b.n	800238a <__aeabi_dsub+0x662>
 8002224:	4b62      	ldr	r3, [pc, #392]	; (80023b0 <__aeabi_dsub+0x688>)
 8002226:	429f      	cmp	r7, r3
 8002228:	d01e      	beq.n	8002268 <__aeabi_dsub+0x540>
 800222a:	43f3      	mvns	r3, r6
 800222c:	2b38      	cmp	r3, #56	; 0x38
 800222e:	dc6f      	bgt.n	8002310 <__aeabi_dsub+0x5e8>
 8002230:	2b1f      	cmp	r3, #31
 8002232:	dd00      	ble.n	8002236 <__aeabi_dsub+0x50e>
 8002234:	e097      	b.n	8002366 <__aeabi_dsub+0x63e>
 8002236:	2520      	movs	r5, #32
 8002238:	000e      	movs	r6, r1
 800223a:	1aed      	subs	r5, r5, r3
 800223c:	40ae      	lsls	r6, r5
 800223e:	46b0      	mov	r8, r6
 8002240:	0006      	movs	r6, r0
 8002242:	46aa      	mov	sl, r5
 8002244:	40de      	lsrs	r6, r3
 8002246:	4645      	mov	r5, r8
 8002248:	4335      	orrs	r5, r6
 800224a:	002e      	movs	r6, r5
 800224c:	4655      	mov	r5, sl
 800224e:	40a8      	lsls	r0, r5
 8002250:	40d9      	lsrs	r1, r3
 8002252:	1e45      	subs	r5, r0, #1
 8002254:	41a8      	sbcs	r0, r5
 8002256:	448c      	add	ip, r1
 8002258:	4306      	orrs	r6, r0
 800225a:	18b6      	adds	r6, r6, r2
 800225c:	4296      	cmp	r6, r2
 800225e:	4192      	sbcs	r2, r2
 8002260:	4251      	negs	r1, r2
 8002262:	4461      	add	r1, ip
 8002264:	003d      	movs	r5, r7
 8002266:	e625      	b.n	8001eb4 <__aeabi_dsub+0x18c>
 8002268:	003d      	movs	r5, r7
 800226a:	4661      	mov	r1, ip
 800226c:	4691      	mov	r9, r2
 800226e:	e678      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8002270:	000b      	movs	r3, r1
 8002272:	4303      	orrs	r3, r0
 8002274:	2d00      	cmp	r5, #0
 8002276:	d000      	beq.n	800227a <__aeabi_dsub+0x552>
 8002278:	e655      	b.n	8001f26 <__aeabi_dsub+0x1fe>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f5      	beq.n	800226a <__aeabi_dsub+0x542>
 800227e:	4663      	mov	r3, ip
 8002280:	4313      	orrs	r3, r2
 8002282:	d100      	bne.n	8002286 <__aeabi_dsub+0x55e>
 8002284:	e66d      	b.n	8001f62 <__aeabi_dsub+0x23a>
 8002286:	1886      	adds	r6, r0, r2
 8002288:	4286      	cmp	r6, r0
 800228a:	4180      	sbcs	r0, r0
 800228c:	4461      	add	r1, ip
 800228e:	4240      	negs	r0, r0
 8002290:	1809      	adds	r1, r1, r0
 8002292:	2200      	movs	r2, #0
 8002294:	020b      	lsls	r3, r1, #8
 8002296:	d400      	bmi.n	800229a <__aeabi_dsub+0x572>
 8002298:	e6d0      	b.n	800203c <__aeabi_dsub+0x314>
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <__aeabi_dsub+0x68c>)
 800229c:	3501      	adds	r5, #1
 800229e:	4019      	ands	r1, r3
 80022a0:	e5b2      	b.n	8001e08 <__aeabi_dsub+0xe0>
 80022a2:	46b1      	mov	r9, r6
 80022a4:	e65d      	b.n	8001f62 <__aeabi_dsub+0x23a>
 80022a6:	0033      	movs	r3, r6
 80022a8:	4667      	mov	r7, ip
 80022aa:	3b20      	subs	r3, #32
 80022ac:	40df      	lsrs	r7, r3
 80022ae:	003b      	movs	r3, r7
 80022b0:	2e20      	cmp	r6, #32
 80022b2:	d005      	beq.n	80022c0 <__aeabi_dsub+0x598>
 80022b4:	2740      	movs	r7, #64	; 0x40
 80022b6:	1bbf      	subs	r7, r7, r6
 80022b8:	4666      	mov	r6, ip
 80022ba:	40be      	lsls	r6, r7
 80022bc:	4332      	orrs	r2, r6
 80022be:	4690      	mov	r8, r2
 80022c0:	4646      	mov	r6, r8
 80022c2:	1e72      	subs	r2, r6, #1
 80022c4:	4196      	sbcs	r6, r2
 80022c6:	4333      	orrs	r3, r6
 80022c8:	e5ef      	b.n	8001eaa <__aeabi_dsub+0x182>
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <__aeabi_dsub+0x688>)
 80022cc:	429f      	cmp	r7, r3
 80022ce:	d0cb      	beq.n	8002268 <__aeabi_dsub+0x540>
 80022d0:	2580      	movs	r5, #128	; 0x80
 80022d2:	042d      	lsls	r5, r5, #16
 80022d4:	4273      	negs	r3, r6
 80022d6:	4329      	orrs	r1, r5
 80022d8:	e7a8      	b.n	800222c <__aeabi_dsub+0x504>
 80022da:	4308      	orrs	r0, r1
 80022dc:	1e41      	subs	r1, r0, #1
 80022de:	4188      	sbcs	r0, r1
 80022e0:	e6a2      	b.n	8002028 <__aeabi_dsub+0x300>
 80022e2:	2f00      	cmp	r7, #0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x5c0>
 80022e6:	e63c      	b.n	8001f62 <__aeabi_dsub+0x23a>
 80022e8:	4663      	mov	r3, ip
 80022ea:	1a86      	subs	r6, r0, r2
 80022ec:	1acf      	subs	r7, r1, r3
 80022ee:	42b0      	cmp	r0, r6
 80022f0:	419b      	sbcs	r3, r3
 80022f2:	425b      	negs	r3, r3
 80022f4:	1afb      	subs	r3, r7, r3
 80022f6:	4698      	mov	r8, r3
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	d54e      	bpl.n	800239a <__aeabi_dsub+0x672>
 80022fc:	1a16      	subs	r6, r2, r0
 80022fe:	4663      	mov	r3, ip
 8002300:	42b2      	cmp	r2, r6
 8002302:	4192      	sbcs	r2, r2
 8002304:	1a59      	subs	r1, r3, r1
 8002306:	4252      	negs	r2, r2
 8002308:	1a89      	subs	r1, r1, r2
 800230a:	465c      	mov	r4, fp
 800230c:	2200      	movs	r2, #0
 800230e:	e57b      	b.n	8001e08 <__aeabi_dsub+0xe0>
 8002310:	4301      	orrs	r1, r0
 8002312:	000e      	movs	r6, r1
 8002314:	1e71      	subs	r1, r6, #1
 8002316:	418e      	sbcs	r6, r1
 8002318:	e79f      	b.n	800225a <__aeabi_dsub+0x532>
 800231a:	001d      	movs	r5, r3
 800231c:	000e      	movs	r6, r1
 800231e:	3d20      	subs	r5, #32
 8002320:	40ee      	lsrs	r6, r5
 8002322:	46b0      	mov	r8, r6
 8002324:	2b20      	cmp	r3, #32
 8002326:	d004      	beq.n	8002332 <__aeabi_dsub+0x60a>
 8002328:	2540      	movs	r5, #64	; 0x40
 800232a:	1aeb      	subs	r3, r5, r3
 800232c:	4099      	lsls	r1, r3
 800232e:	4308      	orrs	r0, r1
 8002330:	4681      	mov	r9, r0
 8002332:	4648      	mov	r0, r9
 8002334:	4643      	mov	r3, r8
 8002336:	1e41      	subs	r1, r0, #1
 8002338:	4188      	sbcs	r0, r1
 800233a:	4318      	orrs	r0, r3
 800233c:	e674      	b.n	8002028 <__aeabi_dsub+0x300>
 800233e:	2200      	movs	r2, #0
 8002340:	2400      	movs	r4, #0
 8002342:	e617      	b.n	8001f74 <__aeabi_dsub+0x24c>
 8002344:	1a16      	subs	r6, r2, r0
 8002346:	4663      	mov	r3, ip
 8002348:	42b2      	cmp	r2, r6
 800234a:	4192      	sbcs	r2, r2
 800234c:	1a59      	subs	r1, r3, r1
 800234e:	4252      	negs	r2, r2
 8002350:	1a89      	subs	r1, r1, r2
 8002352:	003d      	movs	r5, r7
 8002354:	e525      	b.n	8001da2 <__aeabi_dsub+0x7a>
 8002356:	4661      	mov	r1, ip
 8002358:	4691      	mov	r9, r2
 800235a:	4d15      	ldr	r5, [pc, #84]	; (80023b0 <__aeabi_dsub+0x688>)
 800235c:	e601      	b.n	8001f62 <__aeabi_dsub+0x23a>
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	2400      	movs	r4, #0
 8002362:	0312      	lsls	r2, r2, #12
 8002364:	e679      	b.n	800205a <__aeabi_dsub+0x332>
 8002366:	001d      	movs	r5, r3
 8002368:	000e      	movs	r6, r1
 800236a:	3d20      	subs	r5, #32
 800236c:	40ee      	lsrs	r6, r5
 800236e:	46b0      	mov	r8, r6
 8002370:	2b20      	cmp	r3, #32
 8002372:	d004      	beq.n	800237e <__aeabi_dsub+0x656>
 8002374:	2540      	movs	r5, #64	; 0x40
 8002376:	1aeb      	subs	r3, r5, r3
 8002378:	4099      	lsls	r1, r3
 800237a:	4308      	orrs	r0, r1
 800237c:	4681      	mov	r9, r0
 800237e:	464e      	mov	r6, r9
 8002380:	4643      	mov	r3, r8
 8002382:	1e71      	subs	r1, r6, #1
 8002384:	418e      	sbcs	r6, r1
 8002386:	431e      	orrs	r6, r3
 8002388:	e767      	b.n	800225a <__aeabi_dsub+0x532>
 800238a:	1886      	adds	r6, r0, r2
 800238c:	4296      	cmp	r6, r2
 800238e:	419b      	sbcs	r3, r3
 8002390:	4461      	add	r1, ip
 8002392:	425b      	negs	r3, r3
 8002394:	18c9      	adds	r1, r1, r3
 8002396:	003d      	movs	r5, r7
 8002398:	e58c      	b.n	8001eb4 <__aeabi_dsub+0x18c>
 800239a:	4647      	mov	r7, r8
 800239c:	4337      	orrs	r7, r6
 800239e:	d0ce      	beq.n	800233e <__aeabi_dsub+0x616>
 80023a0:	2207      	movs	r2, #7
 80023a2:	4641      	mov	r1, r8
 80023a4:	4032      	ands	r2, r6
 80023a6:	e649      	b.n	800203c <__aeabi_dsub+0x314>
 80023a8:	2700      	movs	r7, #0
 80023aa:	003a      	movs	r2, r7
 80023ac:	e5e6      	b.n	8001f7c <__aeabi_dsub+0x254>
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	000007ff 	.word	0x000007ff
 80023b4:	ff7fffff 	.word	0xff7fffff

080023b8 <__aeabi_dcmpun>:
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	4e0c      	ldr	r6, [pc, #48]	; (80023ec <__aeabi_dcmpun+0x34>)
 80023bc:	030d      	lsls	r5, r1, #12
 80023be:	031c      	lsls	r4, r3, #12
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	0b2d      	lsrs	r5, r5, #12
 80023c6:	0d49      	lsrs	r1, r1, #21
 80023c8:	0b24      	lsrs	r4, r4, #12
 80023ca:	0d5b      	lsrs	r3, r3, #21
 80023cc:	42b1      	cmp	r1, r6
 80023ce:	d008      	beq.n	80023e2 <__aeabi_dcmpun+0x2a>
 80023d0:	4906      	ldr	r1, [pc, #24]	; (80023ec <__aeabi_dcmpun+0x34>)
 80023d2:	2000      	movs	r0, #0
 80023d4:	428b      	cmp	r3, r1
 80023d6:	d103      	bne.n	80023e0 <__aeabi_dcmpun+0x28>
 80023d8:	4314      	orrs	r4, r2
 80023da:	0020      	movs	r0, r4
 80023dc:	1e44      	subs	r4, r0, #1
 80023de:	41a0      	sbcs	r0, r4
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
 80023e2:	4305      	orrs	r5, r0
 80023e4:	2001      	movs	r0, #1
 80023e6:	2d00      	cmp	r5, #0
 80023e8:	d1fa      	bne.n	80023e0 <__aeabi_dcmpun+0x28>
 80023ea:	e7f1      	b.n	80023d0 <__aeabi_dcmpun+0x18>
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__aeabi_i2d>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d02d      	beq.n	8002452 <__aeabi_i2d+0x62>
 80023f6:	17c3      	asrs	r3, r0, #31
 80023f8:	18c5      	adds	r5, r0, r3
 80023fa:	405d      	eors	r5, r3
 80023fc:	0fc4      	lsrs	r4, r0, #31
 80023fe:	0028      	movs	r0, r5
 8002400:	f000 f938 	bl	8002674 <__clzsi2>
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <__aeabi_i2d+0x6c>)
 8002406:	1a1b      	subs	r3, r3, r0
 8002408:	055b      	lsls	r3, r3, #21
 800240a:	0d5b      	lsrs	r3, r3, #21
 800240c:	280a      	cmp	r0, #10
 800240e:	dd15      	ble.n	800243c <__aeabi_i2d+0x4c>
 8002410:	380b      	subs	r0, #11
 8002412:	4085      	lsls	r5, r0
 8002414:	2200      	movs	r2, #0
 8002416:	032d      	lsls	r5, r5, #12
 8002418:	0b2d      	lsrs	r5, r5, #12
 800241a:	2100      	movs	r1, #0
 800241c:	0010      	movs	r0, r2
 800241e:	032d      	lsls	r5, r5, #12
 8002420:	0d0a      	lsrs	r2, r1, #20
 8002422:	0b2d      	lsrs	r5, r5, #12
 8002424:	0512      	lsls	r2, r2, #20
 8002426:	432a      	orrs	r2, r5
 8002428:	4d0d      	ldr	r5, [pc, #52]	; (8002460 <__aeabi_i2d+0x70>)
 800242a:	051b      	lsls	r3, r3, #20
 800242c:	402a      	ands	r2, r5
 800242e:	4313      	orrs	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	07e4      	lsls	r4, r4, #31
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	4323      	orrs	r3, r4
 8002438:	0019      	movs	r1, r3
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	0002      	movs	r2, r0
 800243e:	0029      	movs	r1, r5
 8002440:	3215      	adds	r2, #21
 8002442:	4091      	lsls	r1, r2
 8002444:	000a      	movs	r2, r1
 8002446:	210b      	movs	r1, #11
 8002448:	1a08      	subs	r0, r1, r0
 800244a:	40c5      	lsrs	r5, r0
 800244c:	032d      	lsls	r5, r5, #12
 800244e:	0b2d      	lsrs	r5, r5, #12
 8002450:	e7e3      	b.n	800241a <__aeabi_i2d+0x2a>
 8002452:	2400      	movs	r4, #0
 8002454:	2300      	movs	r3, #0
 8002456:	2500      	movs	r5, #0
 8002458:	2200      	movs	r2, #0
 800245a:	e7de      	b.n	800241a <__aeabi_i2d+0x2a>
 800245c:	0000041e 	.word	0x0000041e
 8002460:	800fffff 	.word	0x800fffff

08002464 <__aeabi_ui2d>:
 8002464:	b510      	push	{r4, lr}
 8002466:	1e04      	subs	r4, r0, #0
 8002468:	d025      	beq.n	80024b6 <__aeabi_ui2d+0x52>
 800246a:	f000 f903 	bl	8002674 <__clzsi2>
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <__aeabi_ui2d+0x5c>)
 8002470:	1a1b      	subs	r3, r3, r0
 8002472:	055b      	lsls	r3, r3, #21
 8002474:	0d5b      	lsrs	r3, r3, #21
 8002476:	280a      	cmp	r0, #10
 8002478:	dd12      	ble.n	80024a0 <__aeabi_ui2d+0x3c>
 800247a:	380b      	subs	r0, #11
 800247c:	4084      	lsls	r4, r0
 800247e:	2200      	movs	r2, #0
 8002480:	0324      	lsls	r4, r4, #12
 8002482:	0b24      	lsrs	r4, r4, #12
 8002484:	2100      	movs	r1, #0
 8002486:	0010      	movs	r0, r2
 8002488:	0324      	lsls	r4, r4, #12
 800248a:	0d0a      	lsrs	r2, r1, #20
 800248c:	0b24      	lsrs	r4, r4, #12
 800248e:	0512      	lsls	r2, r2, #20
 8002490:	4322      	orrs	r2, r4
 8002492:	4c0c      	ldr	r4, [pc, #48]	; (80024c4 <__aeabi_ui2d+0x60>)
 8002494:	051b      	lsls	r3, r3, #20
 8002496:	4022      	ands	r2, r4
 8002498:	4313      	orrs	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	0859      	lsrs	r1, r3, #1
 800249e:	bd10      	pop	{r4, pc}
 80024a0:	0002      	movs	r2, r0
 80024a2:	0021      	movs	r1, r4
 80024a4:	3215      	adds	r2, #21
 80024a6:	4091      	lsls	r1, r2
 80024a8:	000a      	movs	r2, r1
 80024aa:	210b      	movs	r1, #11
 80024ac:	1a08      	subs	r0, r1, r0
 80024ae:	40c4      	lsrs	r4, r0
 80024b0:	0324      	lsls	r4, r4, #12
 80024b2:	0b24      	lsrs	r4, r4, #12
 80024b4:	e7e6      	b.n	8002484 <__aeabi_ui2d+0x20>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2400      	movs	r4, #0
 80024ba:	2200      	movs	r2, #0
 80024bc:	e7e2      	b.n	8002484 <__aeabi_ui2d+0x20>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	0000041e 	.word	0x0000041e
 80024c4:	800fffff 	.word	0x800fffff

080024c8 <__aeabi_f2d>:
 80024c8:	0041      	lsls	r1, r0, #1
 80024ca:	0e09      	lsrs	r1, r1, #24
 80024cc:	1c4b      	adds	r3, r1, #1
 80024ce:	b570      	push	{r4, r5, r6, lr}
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	0246      	lsls	r6, r0, #9
 80024d4:	0a75      	lsrs	r5, r6, #9
 80024d6:	0fc4      	lsrs	r4, r0, #31
 80024d8:	2b01      	cmp	r3, #1
 80024da:	dd14      	ble.n	8002506 <__aeabi_f2d+0x3e>
 80024dc:	23e0      	movs	r3, #224	; 0xe0
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	076d      	lsls	r5, r5, #29
 80024e2:	0b36      	lsrs	r6, r6, #12
 80024e4:	18cb      	adds	r3, r1, r3
 80024e6:	2100      	movs	r1, #0
 80024e8:	0d0a      	lsrs	r2, r1, #20
 80024ea:	0028      	movs	r0, r5
 80024ec:	0512      	lsls	r2, r2, #20
 80024ee:	4d1c      	ldr	r5, [pc, #112]	; (8002560 <__aeabi_f2d+0x98>)
 80024f0:	4332      	orrs	r2, r6
 80024f2:	055b      	lsls	r3, r3, #21
 80024f4:	402a      	ands	r2, r5
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	4313      	orrs	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	07e4      	lsls	r4, r4, #31
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	4323      	orrs	r3, r4
 8002502:	0019      	movs	r1, r3
 8002504:	bd70      	pop	{r4, r5, r6, pc}
 8002506:	2900      	cmp	r1, #0
 8002508:	d114      	bne.n	8002534 <__aeabi_f2d+0x6c>
 800250a:	2d00      	cmp	r5, #0
 800250c:	d01e      	beq.n	800254c <__aeabi_f2d+0x84>
 800250e:	0028      	movs	r0, r5
 8002510:	f000 f8b0 	bl	8002674 <__clzsi2>
 8002514:	280a      	cmp	r0, #10
 8002516:	dc1c      	bgt.n	8002552 <__aeabi_f2d+0x8a>
 8002518:	230b      	movs	r3, #11
 800251a:	002a      	movs	r2, r5
 800251c:	1a1b      	subs	r3, r3, r0
 800251e:	40da      	lsrs	r2, r3
 8002520:	0003      	movs	r3, r0
 8002522:	3315      	adds	r3, #21
 8002524:	409d      	lsls	r5, r3
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <__aeabi_f2d+0x9c>)
 8002528:	0312      	lsls	r2, r2, #12
 800252a:	1a1b      	subs	r3, r3, r0
 800252c:	055b      	lsls	r3, r3, #21
 800252e:	0b16      	lsrs	r6, r2, #12
 8002530:	0d5b      	lsrs	r3, r3, #21
 8002532:	e7d8      	b.n	80024e6 <__aeabi_f2d+0x1e>
 8002534:	2d00      	cmp	r5, #0
 8002536:	d006      	beq.n	8002546 <__aeabi_f2d+0x7e>
 8002538:	0b32      	lsrs	r2, r6, #12
 800253a:	2680      	movs	r6, #128	; 0x80
 800253c:	0336      	lsls	r6, r6, #12
 800253e:	076d      	lsls	r5, r5, #29
 8002540:	4316      	orrs	r6, r2
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <__aeabi_f2d+0xa0>)
 8002544:	e7cf      	b.n	80024e6 <__aeabi_f2d+0x1e>
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <__aeabi_f2d+0xa0>)
 8002548:	2600      	movs	r6, #0
 800254a:	e7cc      	b.n	80024e6 <__aeabi_f2d+0x1e>
 800254c:	2300      	movs	r3, #0
 800254e:	2600      	movs	r6, #0
 8002550:	e7c9      	b.n	80024e6 <__aeabi_f2d+0x1e>
 8002552:	0003      	movs	r3, r0
 8002554:	002a      	movs	r2, r5
 8002556:	3b0b      	subs	r3, #11
 8002558:	409a      	lsls	r2, r3
 800255a:	2500      	movs	r5, #0
 800255c:	e7e3      	b.n	8002526 <__aeabi_f2d+0x5e>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	800fffff 	.word	0x800fffff
 8002564:	00000389 	.word	0x00000389
 8002568:	000007ff 	.word	0x000007ff

0800256c <__aeabi_d2f>:
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256e:	004c      	lsls	r4, r1, #1
 8002570:	0d64      	lsrs	r4, r4, #21
 8002572:	030b      	lsls	r3, r1, #12
 8002574:	1c62      	adds	r2, r4, #1
 8002576:	0a5b      	lsrs	r3, r3, #9
 8002578:	0f46      	lsrs	r6, r0, #29
 800257a:	0552      	lsls	r2, r2, #21
 800257c:	0fc9      	lsrs	r1, r1, #31
 800257e:	431e      	orrs	r6, r3
 8002580:	00c5      	lsls	r5, r0, #3
 8002582:	0d52      	lsrs	r2, r2, #21
 8002584:	2a01      	cmp	r2, #1
 8002586:	dd29      	ble.n	80025dc <__aeabi_d2f+0x70>
 8002588:	4b37      	ldr	r3, [pc, #220]	; (8002668 <__aeabi_d2f+0xfc>)
 800258a:	18e7      	adds	r7, r4, r3
 800258c:	2ffe      	cmp	r7, #254	; 0xfe
 800258e:	dc1c      	bgt.n	80025ca <__aeabi_d2f+0x5e>
 8002590:	2f00      	cmp	r7, #0
 8002592:	dd3b      	ble.n	800260c <__aeabi_d2f+0xa0>
 8002594:	0180      	lsls	r0, r0, #6
 8002596:	1e43      	subs	r3, r0, #1
 8002598:	4198      	sbcs	r0, r3
 800259a:	2207      	movs	r2, #7
 800259c:	00f3      	lsls	r3, r6, #3
 800259e:	0f6d      	lsrs	r5, r5, #29
 80025a0:	4303      	orrs	r3, r0
 80025a2:	432b      	orrs	r3, r5
 80025a4:	401a      	ands	r2, r3
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d004      	beq.n	80025b4 <__aeabi_d2f+0x48>
 80025aa:	220f      	movs	r2, #15
 80025ac:	401a      	ands	r2, r3
 80025ae:	2a04      	cmp	r2, #4
 80025b0:	d000      	beq.n	80025b4 <__aeabi_d2f+0x48>
 80025b2:	3304      	adds	r3, #4
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	04d2      	lsls	r2, r2, #19
 80025b8:	401a      	ands	r2, r3
 80025ba:	d024      	beq.n	8002606 <__aeabi_d2f+0x9a>
 80025bc:	3701      	adds	r7, #1
 80025be:	b2fa      	uxtb	r2, r7
 80025c0:	2fff      	cmp	r7, #255	; 0xff
 80025c2:	d002      	beq.n	80025ca <__aeabi_d2f+0x5e>
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	0a58      	lsrs	r0, r3, #9
 80025c8:	e001      	b.n	80025ce <__aeabi_d2f+0x62>
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	2000      	movs	r0, #0
 80025ce:	0240      	lsls	r0, r0, #9
 80025d0:	05d2      	lsls	r2, r2, #23
 80025d2:	0a40      	lsrs	r0, r0, #9
 80025d4:	07c9      	lsls	r1, r1, #31
 80025d6:	4310      	orrs	r0, r2
 80025d8:	4308      	orrs	r0, r1
 80025da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025dc:	4335      	orrs	r5, r6
 80025de:	2c00      	cmp	r4, #0
 80025e0:	d104      	bne.n	80025ec <__aeabi_d2f+0x80>
 80025e2:	2d00      	cmp	r5, #0
 80025e4:	d10a      	bne.n	80025fc <__aeabi_d2f+0x90>
 80025e6:	2200      	movs	r2, #0
 80025e8:	2000      	movs	r0, #0
 80025ea:	e7f0      	b.n	80025ce <__aeabi_d2f+0x62>
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d0ec      	beq.n	80025ca <__aeabi_d2f+0x5e>
 80025f0:	2080      	movs	r0, #128	; 0x80
 80025f2:	03c0      	lsls	r0, r0, #15
 80025f4:	4330      	orrs	r0, r6
 80025f6:	22ff      	movs	r2, #255	; 0xff
 80025f8:	e7e9      	b.n	80025ce <__aeabi_d2f+0x62>
 80025fa:	2400      	movs	r4, #0
 80025fc:	2300      	movs	r3, #0
 80025fe:	025b      	lsls	r3, r3, #9
 8002600:	0a58      	lsrs	r0, r3, #9
 8002602:	b2e2      	uxtb	r2, r4
 8002604:	e7e3      	b.n	80025ce <__aeabi_d2f+0x62>
 8002606:	08db      	lsrs	r3, r3, #3
 8002608:	003c      	movs	r4, r7
 800260a:	e7f8      	b.n	80025fe <__aeabi_d2f+0x92>
 800260c:	003b      	movs	r3, r7
 800260e:	3317      	adds	r3, #23
 8002610:	dbf3      	blt.n	80025fa <__aeabi_d2f+0x8e>
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	4333      	orrs	r3, r6
 8002618:	261e      	movs	r6, #30
 800261a:	1bf6      	subs	r6, r6, r7
 800261c:	2e1f      	cmp	r6, #31
 800261e:	dd14      	ble.n	800264a <__aeabi_d2f+0xde>
 8002620:	2202      	movs	r2, #2
 8002622:	4252      	negs	r2, r2
 8002624:	1bd7      	subs	r7, r2, r7
 8002626:	001a      	movs	r2, r3
 8002628:	40fa      	lsrs	r2, r7
 800262a:	0017      	movs	r7, r2
 800262c:	2e20      	cmp	r6, #32
 800262e:	d004      	beq.n	800263a <__aeabi_d2f+0xce>
 8002630:	4a0e      	ldr	r2, [pc, #56]	; (800266c <__aeabi_d2f+0x100>)
 8002632:	4694      	mov	ip, r2
 8002634:	4464      	add	r4, ip
 8002636:	40a3      	lsls	r3, r4
 8002638:	431d      	orrs	r5, r3
 800263a:	002b      	movs	r3, r5
 800263c:	1e5d      	subs	r5, r3, #1
 800263e:	41ab      	sbcs	r3, r5
 8002640:	2207      	movs	r2, #7
 8002642:	433b      	orrs	r3, r7
 8002644:	401a      	ands	r2, r3
 8002646:	2700      	movs	r7, #0
 8002648:	e7ad      	b.n	80025a6 <__aeabi_d2f+0x3a>
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <__aeabi_d2f+0x104>)
 800264c:	0028      	movs	r0, r5
 800264e:	18a2      	adds	r2, r4, r2
 8002650:	4095      	lsls	r5, r2
 8002652:	4093      	lsls	r3, r2
 8002654:	1e6c      	subs	r4, r5, #1
 8002656:	41a5      	sbcs	r5, r4
 8002658:	40f0      	lsrs	r0, r6
 800265a:	2207      	movs	r2, #7
 800265c:	432b      	orrs	r3, r5
 800265e:	4303      	orrs	r3, r0
 8002660:	401a      	ands	r2, r3
 8002662:	2700      	movs	r7, #0
 8002664:	e79f      	b.n	80025a6 <__aeabi_d2f+0x3a>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	fffffc80 	.word	0xfffffc80
 800266c:	fffffca2 	.word	0xfffffca2
 8002670:	fffffc82 	.word	0xfffffc82

08002674 <__clzsi2>:
 8002674:	211c      	movs	r1, #28
 8002676:	2301      	movs	r3, #1
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	4298      	cmp	r0, r3
 800267c:	d301      	bcc.n	8002682 <__clzsi2+0xe>
 800267e:	0c00      	lsrs	r0, r0, #16
 8002680:	3910      	subs	r1, #16
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	4298      	cmp	r0, r3
 8002686:	d301      	bcc.n	800268c <__clzsi2+0x18>
 8002688:	0a00      	lsrs	r0, r0, #8
 800268a:	3908      	subs	r1, #8
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	4298      	cmp	r0, r3
 8002690:	d301      	bcc.n	8002696 <__clzsi2+0x22>
 8002692:	0900      	lsrs	r0, r0, #4
 8002694:	3904      	subs	r1, #4
 8002696:	a202      	add	r2, pc, #8	; (adr r2, 80026a0 <__clzsi2+0x2c>)
 8002698:	5c10      	ldrb	r0, [r2, r0]
 800269a:	1840      	adds	r0, r0, r1
 800269c:	4770      	bx	lr
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	02020304 	.word	0x02020304
 80026a4:	01010101 	.word	0x01010101
	...

080026b0 <__clzdi2>:
 80026b0:	b510      	push	{r4, lr}
 80026b2:	2900      	cmp	r1, #0
 80026b4:	d103      	bne.n	80026be <__clzdi2+0xe>
 80026b6:	f7ff ffdd 	bl	8002674 <__clzsi2>
 80026ba:	3020      	adds	r0, #32
 80026bc:	e002      	b.n	80026c4 <__clzdi2+0x14>
 80026be:	1c08      	adds	r0, r1, #0
 80026c0:	f7ff ffd8 	bl	8002674 <__clzsi2>
 80026c4:	bd10      	pop	{r4, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)

080026c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026cc:	f002 f98e 	bl	80049ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026d0:	f000 f81a 	bl	8002708 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026d4:	f000 f9b2 	bl	8002a3c <MX_GPIO_Init>
  MX_SPI1_Init();
 80026d8:	f000 f8d4 	bl	8002884 <MX_SPI1_Init>
  MX_TIM2_Init();
 80026dc:	f000 f90a 	bl	80028f4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80026e0:	f000 f88e 	bl	8002800 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80026e4:	f000 f976 	bl	80029d4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80026e8:	f000 f87c 	bl	80027e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  BME280_INIT();
 80026ec:	f000 fa52 	bl	8002b94 <BME280_INIT>
  bme280_init_complete = 1;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <main+0x38>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 80026f6:	4b03      	ldr	r3, [pc, #12]	; (8002704 <main+0x3c>)
 80026f8:	0018      	movs	r0, r3
 80026fa:	f005 f85a 	bl	80077b2 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026fe:	e7fe      	b.n	80026fe <main+0x36>
 8002700:	20000090 	.word	0x20000090
 8002704:	20000188 	.word	0x20000188

08002708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b09f      	sub	sp, #124	; 0x7c
 800270c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800270e:	2440      	movs	r4, #64	; 0x40
 8002710:	193b      	adds	r3, r7, r4
 8002712:	0018      	movs	r0, r3
 8002714:	2338      	movs	r3, #56	; 0x38
 8002716:	001a      	movs	r2, r3
 8002718:	2100      	movs	r1, #0
 800271a:	f006 fad2 	bl	8008cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800271e:	232c      	movs	r3, #44	; 0x2c
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	0018      	movs	r0, r3
 8002724:	2314      	movs	r3, #20
 8002726:	001a      	movs	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f006 faca 	bl	8008cc2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	0018      	movs	r0, r3
 8002732:	2328      	movs	r3, #40	; 0x28
 8002734:	001a      	movs	r2, r3
 8002736:	2100      	movs	r1, #0
 8002738:	f006 fac3 	bl	8008cc2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <SystemClock_Config+0xd4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <SystemClock_Config+0xd8>)
 8002742:	401a      	ands	r2, r3
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <SystemClock_Config+0xd4>)
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	0109      	lsls	r1, r1, #4
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800274e:	0021      	movs	r1, r4
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2210      	movs	r2, #16
 8002754:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2201      	movs	r2, #1
 800275a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002762:	187b      	adds	r3, r7, r1
 8002764:	22a0      	movs	r2, #160	; 0xa0
 8002766:	0212      	lsls	r2, r2, #8
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800276a:	187b      	adds	r3, r7, r1
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002770:	187b      	adds	r3, r7, r1
 8002772:	0018      	movs	r0, r3
 8002774:	f003 fb20 	bl	8005db8 <HAL_RCC_OscConfig>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d001      	beq.n	8002780 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800277c:	f000 fb24 	bl	8002dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	187b      	adds	r3, r7, r1
 8002784:	220f      	movs	r2, #15
 8002786:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002788:	187b      	adds	r3, r7, r1
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2100      	movs	r1, #0
 80027a4:	0018      	movs	r0, r3
 80027a6:	f003 fed7 	bl	8006558 <HAL_RCC_ClockConfig>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d001      	beq.n	80027b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80027ae:	f000 fb0b 	bl	8002dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	220a      	movs	r2, #10
 80027b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	0018      	movs	r0, r3
 80027c8:	f004 f8aa 	bl	8006920 <HAL_RCCEx_PeriphCLKConfig>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80027d0:	f000 fafa 	bl	8002dc8 <Error_Handler>
  }
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b01f      	add	sp, #124	; 0x7c
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	40007000 	.word	0x40007000
 80027e0:	ffffe7ff 	.word	0xffffe7ff

080027e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2101      	movs	r1, #1
 80027ec:	200f      	movs	r0, #15
 80027ee:	f002 fa23 	bl	8004c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027f2:	200f      	movs	r0, #15
 80027f4:	f002 fa35 	bl	8004c62 <HAL_NVIC_EnableIRQ>
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <MX_I2C1_Init+0x78>)
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <MX_I2C1_Init+0x7c>)
 8002808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000609;
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <MX_I2C1_Init+0x78>)
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <MX_I2C1_Init+0x80>)
 800280e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <MX_I2C1_Init+0x78>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <MX_I2C1_Init+0x78>)
 8002818:	2201      	movs	r2, #1
 800281a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <MX_I2C1_Init+0x78>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <MX_I2C1_Init+0x78>)
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <MX_I2C1_Init+0x78>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <MX_I2C1_Init+0x78>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_I2C1_Init+0x78>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_I2C1_Init+0x78>)
 800283c:	0018      	movs	r0, r3
 800283e:	f002 fcbd 	bl	80051bc <HAL_I2C_Init>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	d001      	beq.n	800284a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002846:	f000 fabf 	bl	8002dc8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <MX_I2C1_Init+0x78>)
 8002850:	0011      	movs	r1, r2
 8002852:	0018      	movs	r0, r3
 8002854:	f003 fa18 	bl	8005c88 <HAL_I2CEx_ConfigAnalogFilter>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800285c:	f000 fab4 	bl	8002dc8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <MX_I2C1_Init+0x78>)
 8002862:	2100      	movs	r1, #0
 8002864:	0018      	movs	r0, r3
 8002866:	f003 fa5b 	bl	8005d20 <HAL_I2CEx_ConfigDigitalFilter>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800286e:	f000 faab 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000098 	.word	0x20000098
 800287c:	40005400 	.word	0x40005400
 8002880:	00000609 	.word	0x00000609

08002884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <MX_SPI1_Init+0x68>)
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <MX_SPI1_Init+0x6c>)
 800288c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <MX_SPI1_Init+0x68>)
 8002890:	2282      	movs	r2, #130	; 0x82
 8002892:	0052      	lsls	r2, r2, #1
 8002894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <MX_SPI1_Init+0x68>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <MX_SPI1_Init+0x68>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <MX_SPI1_Init+0x68>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <MX_SPI1_Init+0x68>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <MX_SPI1_Init+0x68>)
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	02d2      	lsls	r2, r2, #11
 80028b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <MX_SPI1_Init+0x68>)
 80028b8:	2238      	movs	r2, #56	; 0x38
 80028ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_SPI1_Init+0x68>)
 80028be:	2200      	movs	r2, #0
 80028c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <MX_SPI1_Init+0x68>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_SPI1_Init+0x68>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <MX_SPI1_Init+0x68>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <MX_SPI1_Init+0x68>)
 80028d6:	0018      	movs	r0, r3
 80028d8:	f004 f996 	bl	8006c08 <HAL_SPI_Init>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d001      	beq.n	80028e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028e0:	f000 fa72 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	20000130 	.word	0x20000130
 80028f0:	40013000 	.word	0x40013000

080028f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fa:	2320      	movs	r3, #32
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	0018      	movs	r0, r3
 8002900:	2310      	movs	r3, #16
 8002902:	001a      	movs	r2, r3
 8002904:	2100      	movs	r1, #0
 8002906:	f006 f9dc 	bl	8008cc2 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800290a:	230c      	movs	r3, #12
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	0018      	movs	r0, r3
 8002910:	2314      	movs	r3, #20
 8002912:	001a      	movs	r2, r3
 8002914:	2100      	movs	r1, #0
 8002916:	f006 f9d4 	bl	8008cc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	0018      	movs	r0, r3
 800291e:	2308      	movs	r3, #8
 8002920:	001a      	movs	r2, r3
 8002922:	2100      	movs	r1, #0
 8002924:	f006 f9cd 	bl	8008cc2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <MX_TIM2_Init+0xd4>)
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	05d2      	lsls	r2, r2, #23
 800292e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <MX_TIM2_Init+0xd4>)
 8002932:	4a26      	ldr	r2, [pc, #152]	; (80029cc <MX_TIM2_Init+0xd8>)
 8002934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <MX_TIM2_Init+0xd4>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 750;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_TIM2_Init+0xd4>)
 800293e:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <MX_TIM2_Init+0xdc>)
 8002940:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_TIM2_Init+0xd4>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_TIM2_Init+0xd4>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <MX_TIM2_Init+0xd4>)
 8002950:	0018      	movs	r0, r3
 8002952:	f004 ff02 	bl	800775a <HAL_TIM_Base_Init>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d001      	beq.n	800295e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800295a:	f000 fa35 	bl	8002dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800295e:	2120      	movs	r1, #32
 8002960:	187b      	adds	r3, r7, r1
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	0152      	lsls	r2, r2, #5
 8002966:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002968:	187a      	adds	r2, r7, r1
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_TIM2_Init+0xd4>)
 800296c:	0011      	movs	r1, r2
 800296e:	0018      	movs	r0, r3
 8002970:	f005 f82a 	bl	80079c8 <HAL_TIM_ConfigClockSource>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002978:	f000 fa26 	bl	8002dc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800297c:	210c      	movs	r1, #12
 800297e:	187b      	adds	r3, r7, r1
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800298a:	187a      	adds	r2, r7, r1
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_TIM2_Init+0xd4>)
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f005 f8d7 	bl	8007b44 <HAL_TIM_SlaveConfigSynchro>
 8002996:	1e03      	subs	r3, r0, #0
 8002998:	d001      	beq.n	800299e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800299a:	f000 fa15 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029aa:	1d3a      	adds	r2, r7, #4
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_TIM2_Init+0xd4>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f005 fab1 	bl	8007f18 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80029ba:	f000 fa05 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b00c      	add	sp, #48	; 0x30
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	20000188 	.word	0x20000188
 80029cc:	00001b58 	.word	0x00001b58
 80029d0:	000002ee 	.word	0x000002ee

080029d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_UART_Init(&huart2);
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f005 fae0 	bl	8007fa0 <HAL_UART_Init>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <MX_USART2_UART_Init+0x64>)
 80029e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 80029e8:	22e1      	movs	r2, #225	; 0xe1
 80029ea:	0252      	lsls	r2, r2, #9
 80029ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 8002a02:	220c      	movs	r2, #12
 8002a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <MX_USART2_UART_Init+0x60>)
 8002a20:	0018      	movs	r0, r3
 8002a22:	f005 fabd 	bl	8007fa0 <HAL_UART_Init>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d001      	beq.n	8002a2e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002a2a:	f000 f9cd 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200001c4 	.word	0x200001c4
 8002a38:	40004400 	.word	0x40004400

08002a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b08b      	sub	sp, #44	; 0x2c
 8002a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a42:	2414      	movs	r4, #20
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	0018      	movs	r0, r3
 8002a48:	2314      	movs	r3, #20
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f006 f938 	bl	8008cc2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a58:	2104      	movs	r1, #4
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a5e:	4b48      	ldr	r3, [pc, #288]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	2204      	movs	r2, #4
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a6a:	4b45      	ldr	r3, [pc, #276]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	430a      	orrs	r2, r1
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a76:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a86:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a8e:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	2201      	movs	r2, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	4b38      	ldr	r3, [pc, #224]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa6:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <MX_GPIO_Init+0x144>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4013      	ands	r3, r2
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 8002ab2:	23a0      	movs	r3, #160	; 0xa0
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2120      	movs	r1, #32
 8002aba:	0018      	movs	r0, r3
 8002abc:	f002 fb4e 	bl	800515c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 8002ac0:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <MX_GPIO_Init+0x148>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	2110      	movs	r1, #16
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f002 fb48 	bl	800515c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <MX_GPIO_Init+0x148>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f002 fb42 	bl	800515c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8002ad8:	492b      	ldr	r1, [pc, #172]	; (8002b88 <MX_GPIO_Init+0x14c>)
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <MX_GPIO_Init+0x150>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f002 fb3c 	bl	800515c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	0192      	lsls	r2, r2, #6
 8002aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	4a28      	ldr	r2, [pc, #160]	; (8002b90 <MX_GPIO_Init+0x154>)
 8002af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <MX_GPIO_Init+0x148>)
 8002afc:	0019      	movs	r1, r3
 8002afe:	0010      	movs	r0, r2
 8002b00:	f002 f8cc 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	2220      	movs	r2, #32
 8002b08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	193a      	adds	r2, r7, r4
 8002b1e:	23a0      	movs	r3, #160	; 0xa0
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f002 f8b9 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8002b2a:	0021      	movs	r1, r4
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2230      	movs	r2, #48	; 0x30
 8002b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2201      	movs	r2, #1
 8002b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2200      	movs	r2, #0
 8002b42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	000c      	movs	r4, r1
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <MX_GPIO_Init+0x148>)
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	f002 f8a5 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 8002b52:	0021      	movs	r1, r4
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <MX_GPIO_Init+0x14c>)
 8002b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <MX_GPIO_Init+0x150>)
 8002b70:	0019      	movs	r1, r3
 8002b72:	0010      	movs	r0, r2
 8002b74:	f002 f892 	bl	8004c9c <HAL_GPIO_Init>

}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b00b      	add	sp, #44	; 0x2c
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	50000800 	.word	0x50000800
 8002b88:	00002001 	.word	0x00002001
 8002b8c:	50000400 	.word	0x50000400
 8002b90:	10210000 	.word	0x10210000

08002b94 <BME280_INIT>:
/* USER CODE BEGIN 4 */
/**
 * Initializes Bosch BME280 Temperature, Pressure, and Humidity Sensor
 */
static void BME280_INIT(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
	/* Device Sampling, Filter, and Standby Time Settings */
	/* Recommended mode of operation: Indoor navigation */
	bme280_device_settings.osr_p = BME280_OVERSAMPLING_16X;		// Pressure
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <BME280_INIT+0xac>)
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	701a      	strb	r2, [r3, #0]
	bme280_device_settings.osr_t = BME280_OVERSAMPLING_2X;		// Temperature
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <BME280_INIT+0xac>)
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	705a      	strb	r2, [r3, #1]
	bme280_device_settings.osr_h = BME280_OVERSAMPLING_1X;		// Humidity
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <BME280_INIT+0xac>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	709a      	strb	r2, [r3, #2]
	bme280_device_settings.filter = BME280_FILTER_COEFF_16;		// Filter
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <BME280_INIT+0xac>)
 8002bac:	2204      	movs	r2, #4
 8002bae:	70da      	strb	r2, [r3, #3]
	bme280_device_settings.standby_time = 0;					// Standby Time
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <BME280_INIT+0xac>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	711a      	strb	r2, [r3, #4]
	bme280_device.dev_id = BME280_I2C_ADDR_SEC;					// I2C Address
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <BME280_INIT+0xb0>)
 8002bb8:	2277      	movs	r2, #119	; 0x77
 8002bba:	705a      	strb	r2, [r3, #1]
	bme280_device.intf = BME280_I2C_INTF;						// I2C Mode
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <BME280_INIT+0xb0>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	709a      	strb	r2, [r3, #2]
	bme280_device.read = user_i2c_read;							// Read Function Ptr
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <BME280_INIT+0xb0>)
 8002bc4:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <BME280_INIT+0xb4>)
 8002bc6:	605a      	str	r2, [r3, #4]
	bme280_device.write = user_i2c_write;						// Write Function Ptr
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <BME280_INIT+0xb0>)
 8002bca:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <BME280_INIT+0xb8>)
 8002bcc:	609a      	str	r2, [r3, #8]
	bme280_device.delay_ms = user_delay_ms;						// Delay Function Ptr
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <BME280_INIT+0xb0>)
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <BME280_INIT+0xbc>)
 8002bd2:	60da      	str	r2, [r3, #12]
	bme280_device.settings = bme280_device_settings;			// Device Settings set above
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <BME280_INIT+0xb0>)
 8002bd6:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <BME280_INIT+0xac>)
 8002bd8:	3338      	adds	r3, #56	; 0x38
 8002bda:	0011      	movs	r1, r2
 8002bdc:	2205      	movs	r2, #5
 8002bde:	0018      	movs	r0, r3
 8002be0:	f006 f866 	bl	8008cb0 <memcpy>
	bme280_init_rslt |= bme280_init(&bme280_device);					// Initizialize Device
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <BME280_INIT+0xb0>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 fd23 	bl	8003632 <bme280_init>
 8002bec:	0003      	movs	r3, r0
 8002bee:	001a      	movs	r2, r3
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <BME280_INIT+0xc0>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b25a      	sxtb	r2, r3
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <BME280_INIT+0xc0>)
 8002bfc:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_settings(bme280_settings_sel, &bme280_device); // Apply Settings
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <BME280_INIT+0xc4>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <BME280_INIT+0xb0>)
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fe5f 	bl	80038ca <bme280_set_sensor_settings>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	001a      	movs	r2, r3
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <BME280_INIT+0xc0>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b25a      	sxtb	r2, r3
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <BME280_INIT+0xc0>)
 8002c1c:	701a      	strb	r2, [r3, #0]
	bme280_init_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, &bme280_device); // Set to sleep mode
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <BME280_INIT+0xb0>)
 8002c20:	0019      	movs	r1, r3
 8002c22:	2000      	movs	r0, #0
 8002c24:	f000 fec0 	bl	80039a8 <bme280_set_sensor_mode>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <BME280_INIT+0xc0>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b25a      	sxtb	r2, r3
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <BME280_INIT+0xc0>)
 8002c38:	701a      	strb	r2, [r3, #0]
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000244 	.word	0x20000244
 8002c44:	200000f0 	.word	0x200000f0
 8002c48:	08002c75 	.word	0x08002c75
 8002c4c:	08002d25 	.word	0x08002d25
 8002c50:	08002c5d 	.word	0x08002c5d
 8002c54:	20000094 	.word	0x20000094
 8002c58:	20000000 	.word	0x20000000

08002c5c <user_delay_ms>:
 *	After a number of milliseconds have passed, we
 *	return control.
 * 	@param[in] milliseconds : How much to delay by in milliseconds.
 */
void user_delay_ms(uint32_t milliseconds)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f001 ff20 	bl	8004aac <HAL_Delay>
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <user_i2c_read>:
 *	0xFD - Humidity_MSB - 8 bits - Bits[15:8]
 *	0xFE - Humidity_LSB - 8 bits - Bits[7:0]
 *	See BME280 Datasheet Page 27 for more info
 */
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	0004      	movs	r4, r0
 8002c7c:	0008      	movs	r0, r1
 8002c7e:	603a      	str	r2, [r7, #0]
 8002c80:	0019      	movs	r1, r3
 8002c82:	1dfb      	adds	r3, r7, #7
 8002c84:	1c22      	adds	r2, r4, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	1dbb      	adds	r3, r7, #6
 8002c8a:	1c02      	adds	r2, r0, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	1c0a      	adds	r2, r1, #0
 8002c92:	801a      	strh	r2, [r3, #0]
	 * | Read       | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002c94:	230d      	movs	r3, #13
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
	uint16_t read_mode = dev_id;
 8002c9c:	230e      	movs	r3, #14
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	1dfa      	adds	r2, r7, #7
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a read bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b76      	cmp	r3, #118	; 0x76
 8002cac:	d003      	beq.n	8002cb6 <user_i2c_read+0x42>
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b77      	cmp	r3, #119	; 0x77
 8002cb4:	d109      	bne.n	8002cca <user_i2c_read+0x56>
	{
		read_mode = (dev_id << 1) | 1;
 8002cb6:	1dfb      	adds	r3, r7, #7
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	230e      	movs	r3, #14
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	801a      	strh	r2, [r3, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <user_i2c_read+0xac>)
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f002 fa75 	bl	80051bc <HAL_I2C_Init>
	rslt |= HAL_I2C_Mem_Read(&hi2c1, read_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 8002cd2:	1dbb      	adds	r3, r7, #6
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	23fa      	movs	r3, #250	; 0xfa
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	001c      	movs	r4, r3
 8002cde:	230e      	movs	r3, #14
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	8819      	ldrh	r1, [r3, #0]
 8002ce4:	480e      	ldr	r0, [pc, #56]	; (8002d20 <user_i2c_read+0xac>)
 8002ce6:	9402      	str	r4, [sp, #8]
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f002 fc56 	bl	80055a4 <HAL_I2C_Mem_Read>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	b259      	sxtb	r1, r3
 8002cfc:	240d      	movs	r4, #13
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	193a      	adds	r2, r7, r4
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <user_i2c_read+0xac>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f002 faec 	bl	80052e8 <HAL_I2C_DeInit>
	return rslt;
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b25b      	sxtb	r3, r3
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b005      	add	sp, #20
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000098 	.word	0x20000098

08002d24 <user_i2c_write>:
 * 	@param[in] reg_addr : Register address of what we want to read in from the BME280.
 * 	@param[in] reg_data : Data we're writing to the register
 * 	@param[in] len : Amount of registers to write to
 */
int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af04      	add	r7, sp, #16
 8002d2a:	0004      	movs	r4, r0
 8002d2c:	0008      	movs	r0, r1
 8002d2e:	603a      	str	r2, [r7, #0]
 8002d30:	0019      	movs	r1, r3
 8002d32:	1dfb      	adds	r3, r7, #7
 8002d34:	1c22      	adds	r2, r4, #0
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	1dbb      	adds	r3, r7, #6
 8002d3a:	1c02      	adds	r2, r0, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	1c0a      	adds	r2, r1, #0
 8002d42:	801a      	strh	r2, [r3, #0]
	 * | Write      | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */
	//TODO: Verify this is correct
	int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002d44:	230d      	movs	r3, #13
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
	uint16_t write_mode = dev_id;
 8002d4c:	230e      	movs	r3, #14
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	1dfa      	adds	r2, r7, #7
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	801a      	strh	r2, [r3, #0]
	/* Check if our dev_id is already left shifted with a write bit */
	if (dev_id == (uint8_t)(BME280_I2C_ADDR_PRIM) || dev_id == (uint8_t)(BME280_I2C_ADDR_SEC))
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b76      	cmp	r3, #118	; 0x76
 8002d5c:	d003      	beq.n	8002d66 <user_i2c_write+0x42>
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b77      	cmp	r3, #119	; 0x77
 8002d64:	d106      	bne.n	8002d74 <user_i2c_write+0x50>
	{
		write_mode = (dev_id << 1) | 0;
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	220e      	movs	r2, #14
 8002d6e:	18ba      	adds	r2, r7, r2
 8002d70:	18db      	adds	r3, r3, r3
 8002d72:	8013      	strh	r3, [r2, #0]
	}
	// Initing then Deiniting fixed I2C Busy Flag bug
	HAL_I2C_Init(&hi2c1);
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <user_i2c_write+0xa0>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f002 fa20 	bl	80051bc <HAL_I2C_Init>
	rslt = HAL_I2C_Mem_Write(&hi2c1, write_mode, reg_addr, sizeof(uint8_t), reg_data, len, I2C_TIMEOUT);
 8002d7c:	1dbb      	adds	r3, r7, #6
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	23fa      	movs	r3, #250	; 0xfa
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	001c      	movs	r4, r3
 8002d88:	230e      	movs	r3, #14
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	8819      	ldrh	r1, [r3, #0]
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <user_i2c_write+0xa0>)
 8002d90:	9402      	str	r4, [sp, #8]
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f002 fad3 	bl	8005348 <HAL_I2C_Mem_Write>
 8002da2:	0003      	movs	r3, r0
 8002da4:	001a      	movs	r2, r3
 8002da6:	240d      	movs	r4, #13
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <user_i2c_write+0xa0>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f002 fa9a 	bl	80052e8 <HAL_I2C_DeInit>
	return rslt;
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b25b      	sxtb	r3, r3
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b005      	add	sp, #20
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000098 	.word	0x20000098

08002dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_MspInit+0x40>)
 8002dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_MspInit+0x40>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_MspInit+0x40>)
 8002de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_MspInit+0x40>)
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	0549      	lsls	r1, r1, #21
 8002dee:	430a      	orrs	r2, r1
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8002df2:	2305      	movs	r3, #5
 8002df4:	425b      	negs	r3, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	2101      	movs	r1, #1
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 ff1c 	bl	8004c38 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002e00:	2302      	movs	r3, #2
 8002e02:	425b      	negs	r3, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	2101      	movs	r1, #1
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f001 ff15 	bl	8004c38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	230c      	movs	r3, #12
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	0018      	movs	r0, r3
 8002e26:	2314      	movs	r3, #20
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f005 ff49 	bl	8008cc2 <memset>
  if(hi2c->Instance==I2C1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_I2C_MspInit+0x80>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d12a      	bne.n	8002e90 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_I2C_MspInit+0x84>)
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_I2C_MspInit+0x84>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_I2C_MspInit+0x84>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e52:	210c      	movs	r1, #12
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	22c0      	movs	r2, #192	; 0xc0
 8002e58:	00d2      	lsls	r2, r2, #3
 8002e5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2212      	movs	r2, #18
 8002e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2201      	movs	r2, #1
 8002e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	2206      	movs	r2, #6
 8002e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	187a      	adds	r2, r7, r1
 8002e76:	23a0      	movs	r3, #160	; 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f001 ff0d 	bl	8004c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_I2C_MspInit+0x84>)
 8002e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_I2C_MspInit+0x84>)
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	0389      	lsls	r1, r1, #14
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b008      	add	sp, #32
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40005400 	.word	0x40005400
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <HAL_I2C_MspDeInit+0x38>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10d      	bne.n	8002ece <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_I2C_MspDeInit+0x3c>)
 8002eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_I2C_MspDeInit+0x3c>)
 8002eb8:	4909      	ldr	r1, [pc, #36]	; (8002ee0 <HAL_I2C_MspDeInit+0x40>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002ebe:	23c0      	movs	r3, #192	; 0xc0
 8002ec0:	00da      	lsls	r2, r3, #3
 8002ec2:	23a0      	movs	r3, #160	; 0xa0
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f002 f865 	bl	8004f98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	ffdfffff 	.word	0xffdfffff

08002ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b08b      	sub	sp, #44	; 0x2c
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	2314      	movs	r3, #20
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	2314      	movs	r3, #20
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f005 fee3 	bl	8008cc2 <memset>
  if(hspi->Instance==SPI1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a29      	ldr	r2, [pc, #164]	; (8002fa8 <HAL_SPI_MspInit+0xc4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d14b      	bne.n	8002f9e <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	0149      	lsls	r1, r1, #5
 8002f10:	430a      	orrs	r2, r1
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	2201      	movs	r2, #1
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f32:	2102      	movs	r1, #2
 8002f34:	430a      	orrs	r2, r1
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_SPI_MspInit+0xc8>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002f44:	2414      	movs	r4, #20
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	22d0      	movs	r2, #208	; 0xd0
 8002f4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	2202      	movs	r2, #2
 8002f50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f64:	193a      	adds	r2, r7, r4
 8002f66:	23a0      	movs	r3, #160	; 0xa0
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	0011      	movs	r1, r2
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f001 fe95 	bl	8004c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8002f72:	0021      	movs	r1, r4
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2208      	movs	r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <HAL_SPI_MspInit+0xcc>)
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f001 fe7f 	bl	8004c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b00b      	add	sp, #44	; 0x2c
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40013000 	.word	0x40013000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	50000400 	.word	0x50000400

08002fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	05db      	lsls	r3, r3, #23
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d105      	bne.n	8002fd4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_TIM_Base_MspInit+0x28>)
 8002fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_TIM_Base_MspInit+0x28>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	230c      	movs	r3, #12
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	0018      	movs	r0, r3
 8002fee:	2314      	movs	r3, #20
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	f005 fe65 	bl	8008cc2 <memset>
  if(huart->Instance==USART2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a18      	ldr	r2, [pc, #96]	; (8003060 <HAL_UART_MspInit+0x80>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d129      	bne.n	8003056 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_UART_MspInit+0x84>)
 8003004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <HAL_UART_MspInit+0x84>)
 8003008:	2180      	movs	r1, #128	; 0x80
 800300a:	0289      	lsls	r1, r1, #10
 800300c:	430a      	orrs	r2, r1
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <HAL_UART_MspInit+0x84>)
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	4b13      	ldr	r3, [pc, #76]	; (8003064 <HAL_UART_MspInit+0x84>)
 8003016:	2101      	movs	r1, #1
 8003018:	430a      	orrs	r2, r1
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_UART_MspInit+0x84>)
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003028:	210c      	movs	r1, #12
 800302a:	187b      	adds	r3, r7, r1
 800302c:	220c      	movs	r2, #12
 800302e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	187b      	adds	r3, r7, r1
 8003032:	2202      	movs	r2, #2
 8003034:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303c:	187b      	adds	r3, r7, r1
 800303e:	2203      	movs	r2, #3
 8003040:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003042:	187b      	adds	r3, r7, r1
 8003044:	2204      	movs	r2, #4
 8003046:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	187a      	adds	r2, r7, r1
 800304a:	23a0      	movs	r3, #160	; 0xa0
 800304c:	05db      	lsls	r3, r3, #23
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f001 fe23 	bl	8004c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b008      	add	sp, #32
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40004400 	.word	0x40004400
 8003064:	40021000 	.word	0x40021000

08003068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003076:	e7fe      	b.n	8003076 <HardFault_Handler+0x4>

08003078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 8003090:	f001 fcf6 	bl	8004a80 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800309c:	b5b0      	push	{r4, r5, r7, lr}
 800309e:	b08c      	sub	sp, #48	; 0x30
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed_digital = 0;
 80030a2:	2322      	movs	r3, #34	; 0x22
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2200      	movs	r2, #0
 80030a8:	801a      	strh	r2, [r3, #0]
  uint16_t wind_temp_digital = 0;
 80030aa:	2320      	movs	r3, #32
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	2200      	movs	r2, #0
 80030b0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch2 = 0;
 80030b2:	231e      	movs	r3, #30
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2200      	movs	r2, #0
 80030b8:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch3 = 0;
 80030ba:	231c      	movs	r3, #28
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2200      	movs	r2, #0
 80030c0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch4 = 0;
 80030c2:	231a      	movs	r3, #26
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch5 = 0;
 80030ca:	2318      	movs	r3, #24
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch6 = 0;
 80030d2:	2316      	movs	r3, #22
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2200      	movs	r2, #0
 80030d8:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch7 = 0;
 80030da:	2314      	movs	r3, #20
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2200      	movs	r2, #0
 80030e0:	801a      	strh	r2, [r3, #0]
  char wifi_data1[2];
  char UARTsend[] = "AT\r";
 80030e2:	230c      	movs	r3, #12
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	4a53      	ldr	r2, [pc, #332]	; (8003234 <TIM2_IRQHandler+0x198>)
 80030e8:	601a      	str	r2, [r3, #0]
  float bme280_pressure = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  float bme280_temperature = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
  float bme280_humidity = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  float md_wind_speed = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
  float md_temp = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030fe:	4b4e      	ldr	r3, [pc, #312]	; (8003238 <TIM2_IRQHandler+0x19c>)
 8003100:	0018      	movs	r0, r3
 8003102:	f004 fb78 	bl	80077f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Toggle_User_LED();
 8003106:	f000 f8a9 	bl	800325c <Toggle_User_LED>
  if (bme280_init_complete == 0)
 800310a:	4b4c      	ldr	r3, [pc, #304]	; (800323c <TIM2_IRQHandler+0x1a0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d100      	bne.n	8003114 <TIM2_IRQHandler+0x78>
 8003112:	e08a      	b.n	800322a <TIM2_IRQHandler+0x18e>
  {
	  return;
  }

  /* Read ADC Wind Speed Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_SPEED_CH, &wind_speed_digital);
 8003114:	2422      	movs	r4, #34	; 0x22
 8003116:	193b      	adds	r3, r7, r4
 8003118:	0019      	movs	r1, r3
 800311a:	2080      	movs	r0, #128	; 0x80
 800311c:	f000 f8cc 	bl	80032b8 <Read_ADC>

  /* Read ADC Wind Temp Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_TEMP_CH, &wind_temp_digital);
 8003120:	2520      	movs	r5, #32
 8003122:	197b      	adds	r3, r7, r5
 8003124:	0019      	movs	r1, r3
 8003126:	2090      	movs	r0, #144	; 0x90
 8003128:	f000 f8c6 	bl	80032b8 <Read_ADC>

  Read_ADC((uint8_t) ADC_DIN_CH2, &din_ch2);
 800312c:	231e      	movs	r3, #30
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	0019      	movs	r1, r3
 8003132:	20a0      	movs	r0, #160	; 0xa0
 8003134:	f000 f8c0 	bl	80032b8 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH3, &din_ch3);
 8003138:	231c      	movs	r3, #28
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	0019      	movs	r1, r3
 800313e:	20b0      	movs	r0, #176	; 0xb0
 8003140:	f000 f8ba 	bl	80032b8 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH4, &din_ch4);
 8003144:	231a      	movs	r3, #26
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	0019      	movs	r1, r3
 800314a:	20c0      	movs	r0, #192	; 0xc0
 800314c:	f000 f8b4 	bl	80032b8 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH5, &din_ch5);
 8003150:	2318      	movs	r3, #24
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	0019      	movs	r1, r3
 8003156:	20d0      	movs	r0, #208	; 0xd0
 8003158:	f000 f8ae 	bl	80032b8 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH6, &din_ch6);
 800315c:	2316      	movs	r3, #22
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	0019      	movs	r1, r3
 8003162:	20e0      	movs	r0, #224	; 0xe0
 8003164:	f000 f8a8 	bl	80032b8 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH7, &din_ch7);
 8003168:	2314      	movs	r3, #20
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	0019      	movs	r1, r3
 800316e:	20f0      	movs	r0, #240	; 0xf0
 8003170:	f000 f8a2 	bl	80032b8 <Read_ADC>

  /* Data is output to comp_data */
  bme280_read_data_forced_mode(&bme280_device);
 8003174:	4b32      	ldr	r3, [pc, #200]	; (8003240 <TIM2_IRQHandler+0x1a4>)
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f9b4 	bl	80034e4 <bme280_read_data_forced_mode>

  /* Calculations Done Here */
  // TODO: Double check later if this is properly compensated
  calculate_wind_speed(wind_speed_digital, wind_temp_digital, &md_wind_speed, &md_temp);
 800317c:	193b      	adds	r3, r7, r4
 800317e:	8818      	ldrh	r0, [r3, #0]
 8003180:	197b      	adds	r3, r7, r5
 8003182:	8819      	ldrh	r1, [r3, #0]
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	2208      	movs	r2, #8
 8003188:	18ba      	adds	r2, r7, r2
 800318a:	f000 f8fb 	bl	8003384 <calculate_wind_speed>
  bme280_temperature = comp_data.temperature * 0.01; // Celsius
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <TIM2_IRQHandler+0x1a8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff f92c 	bl	80023f0 <__aeabi_i2d>
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <TIM2_IRQHandler+0x1ac>)
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <TIM2_IRQHandler+0x1b0>)
 800319c:	f7fe fb52 	bl	8001844 <__aeabi_dmul>
 80031a0:	0003      	movs	r3, r0
 80031a2:	000c      	movs	r4, r1
 80031a4:	0018      	movs	r0, r3
 80031a6:	0021      	movs	r1, r4
 80031a8:	f7ff f9e0 	bl	800256c <__aeabi_d2f>
 80031ac:	1c03      	adds	r3, r0, #0
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
  bme280_humidity = comp_data.humidity / 1024.0; // Output is in percentage... so 43.33 is 43.33 %rH
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <TIM2_IRQHandler+0x1a8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff f955 	bl	8002464 <__aeabi_ui2d>
 80031ba:	2200      	movs	r2, #0
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <TIM2_IRQHandler+0x1b4>)
 80031be:	f7fd ff37 	bl	8001030 <__aeabi_ddiv>
 80031c2:	0003      	movs	r3, r0
 80031c4:	000c      	movs	r4, r1
 80031c6:	0018      	movs	r0, r3
 80031c8:	0021      	movs	r1, r4
 80031ca:	f7ff f9cf 	bl	800256c <__aeabi_d2f>
 80031ce:	1c03      	adds	r3, r0, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
  bme280_pressure = comp_data.pressure * 0.01; // hPa Pressure Units... for Debug Purposes
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <TIM2_IRQHandler+0x1a8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff f944 	bl	8002464 <__aeabi_ui2d>
 80031dc:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <TIM2_IRQHandler+0x1ac>)
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <TIM2_IRQHandler+0x1b0>)
 80031e0:	f7fe fb30 	bl	8001844 <__aeabi_dmul>
 80031e4:	0003      	movs	r3, r0
 80031e6:	000c      	movs	r4, r1
 80031e8:	0018      	movs	r0, r3
 80031ea:	0021      	movs	r1, r4
 80031ec:	f7ff f9be 	bl	800256c <__aeabi_d2f>
 80031f0:	1c03      	adds	r3, r0, #0
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Transmit over WiFi */
  HAL_UART_Transmit(&huart2, (uint8_t *) UARTsend, strlen(UARTsend), 500);
 80031f4:	240c      	movs	r4, #12
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fc ff85 	bl	8000108 <strlen>
 80031fe:	0003      	movs	r3, r0
 8003200:	b29a      	uxth	r2, r3
 8003202:	23fa      	movs	r3, #250	; 0xfa
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	1939      	adds	r1, r7, r4
 8003208:	4812      	ldr	r0, [pc, #72]	; (8003254 <TIM2_IRQHandler+0x1b8>)
 800320a:	f004 ff1d 	bl	8008048 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart2, (uint8_t *)wifi_data1, 2, 500);
 800320e:	23fa      	movs	r3, #250	; 0xfa
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2210      	movs	r2, #16
 8003214:	18b9      	adds	r1, r7, r2
 8003216:	480f      	ldr	r0, [pc, #60]	; (8003254 <TIM2_IRQHandler+0x1b8>)
 8003218:	2202      	movs	r2, #2
 800321a:	f004 ffbd 	bl	8008198 <HAL_UART_Receive>

//  /* Toggle SS1 Pin Low to select sensor */
    HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <TIM2_IRQHandler+0x1bc>)
 8003220:	2120      	movs	r1, #32
 8003222:	0018      	movs	r0, r3
 8003224:	f001 ffb7 	bl	8005196 <HAL_GPIO_TogglePin>
 8003228:	e000      	b.n	800322c <TIM2_IRQHandler+0x190>
	  return;
 800322a:	46c0      	nop			; (mov r8, r8)
//  // TODO: Read from Sensor
//  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
//  /* Toggle SS2 High to un-select sensor */

  /* USER CODE END TIM2_IRQn 1 */
}
 800322c:	46bd      	mov	sp, r7
 800322e:	b00c      	add	sp, #48	; 0x30
 8003230:	bdb0      	pop	{r4, r5, r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	000d5441 	.word	0x000d5441
 8003238:	20000188 	.word	0x20000188
 800323c:	20000090 	.word	0x20000090
 8003240:	200000f0 	.word	0x200000f0
 8003244:	200000e4 	.word	0x200000e4
 8003248:	47ae147b 	.word	0x47ae147b
 800324c:	3f847ae1 	.word	0x3f847ae1
 8003250:	40900000 	.word	0x40900000
 8003254:	200001c4 	.word	0x200001c4
 8003258:	50000800 	.word	0x50000800

0800325c <Toggle_User_LED>:
/* USER CODE BEGIN 1 */
/**
 * 	@brief Toggle LED
 */
void Toggle_User_LED()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8003260:	23a0      	movs	r3, #160	; 0xa0
 8003262:	05db      	lsls	r3, r3, #23
 8003264:	2120      	movs	r1, #32
 8003266:	0018      	movs	r0, r3
 8003268:	f001 ff95 	bl	8005196 <HAL_GPIO_TogglePin>
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <Toggle_ADC_Chip_Select>:

/**
 * 	@brief Toggle ADC Chip Select Pin
 */
void Toggle_ADC_Chip_Select()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ADC_CS_GPIO_Port, ADC_CS_PIN);
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <Toggle_ADC_Chip_Select+0x14>)
 800327a:	2110      	movs	r1, #16
 800327c:	0018      	movs	r0, r3
 800327e:	f001 ff8a 	bl	8005196 <HAL_GPIO_TogglePin>
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	50000800 	.word	0x50000800

0800328c <HAL_SPI_Transmit_Start>:

/**
 * 	@brief Transmit Start Bit in HAL SPI
 */
void HAL_SPI_Transmit_Start()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
	uint8_t adc_start = (uint8_t) ADC_START_BIT;
 8003292:	1dfb      	adds	r3, r7, #7
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &adc_start, sizeof(adc_start), SPI_TIMEOUT);
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_SPI_Transmit_Start+0x24>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	1df9      	adds	r1, r7, #7
 800329e:	4805      	ldr	r0, [pc, #20]	; (80032b4 <HAL_SPI_Transmit_Start+0x28>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	f003 fd1b 	bl	8006cdc <HAL_SPI_Transmit>
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b002      	add	sp, #8
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	08009df8 	.word	0x08009df8
 80032b4:	20000130 	.word	0x20000130

080032b8 <Read_ADC>:
 * 	@brief Read MCP3008 ADC based on given channel enum.
 *	Output is set to the pointer of a uint16_t set in the parameters.
 *	Output will be set to 0 before setting the ADC Value to it.
 */
void Read_ADC(uint8_t adc_ch_select, uint16_t *output)
{
 80032b8:	b5b0      	push	{r4, r5, r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	0002      	movs	r2, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_1 = 0;
 80032c6:	240f      	movs	r4, #15
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_2 = 0;
 80032ce:	250e      	movs	r5, #14
 80032d0:	197b      	adds	r3, r7, r5
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
	/* Set output to 0 */
	*output = 0;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2200      	movs	r2, #0
 80032da:	801a      	strh	r2, [r3, #0]

	/* Toggle SS0 Pin (CS) Low to use ADC */
	Toggle_ADC_Chip_Select();
 80032dc:	f7ff ffca 	bl	8003274 <Toggle_ADC_Chip_Select>
	/* Send to DIN CH0 Select */
	HAL_SPI_Transmit_Start();
 80032e0:	f7ff ffd4 	bl	800328c <HAL_SPI_Transmit_Start>
	HAL_SPI_TransmitReceive(&hspi1, &adc_ch_select, &adc_byte_1, sizeof(adc_ch_select), SPI_TIMEOUT);
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <Read_ADC+0x78>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	193a      	adds	r2, r7, r4
 80032ea:	1df9      	adds	r1, r7, #7
 80032ec:	4811      	ldr	r0, [pc, #68]	; (8003334 <Read_ADC+0x7c>)
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2301      	movs	r3, #1
 80032f2:	f003 ff5f 	bl	80071b4 <HAL_SPI_TransmitReceive>
	/* Read from Dout of ADC */
	HAL_SPI_Receive(&hspi1, &adc_byte_2, sizeof(adc_byte_2), SPI_TIMEOUT);
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <Read_ADC+0x78>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1979      	adds	r1, r7, r5
 80032fc:	480d      	ldr	r0, [pc, #52]	; (8003334 <Read_ADC+0x7c>)
 80032fe:	2201      	movs	r2, #1
 8003300:	f003 fe3a 	bl	8006f78 <HAL_SPI_Receive>
	/* Toggle SS0 High (CS) to signify we're done with a round of the ADC */
	Toggle_ADC_Chip_Select();
 8003304:	f7ff ffb6 	bl	8003274 <Toggle_ADC_Chip_Select>
	/* Set Output to adc_value */
	*output = ADC_16_TO_10_BIT(adc_byte_1, adc_byte_2);
 8003308:	193b      	adds	r3, r7, r4
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	b21a      	sxth	r2, r3
 8003310:	197b      	adds	r3, r7, r5
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b21b      	sxth	r3, r3
 8003316:	4313      	orrs	r3, r2
 8003318:	b21b      	sxth	r3, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	059b      	lsls	r3, r3, #22
 800331e:	0d9b      	lsrs	r3, r3, #22
 8003320:	b29a      	uxth	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	801a      	strh	r2, [r3, #0]
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bdb0      	pop	{r4, r5, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	08009df8 	.word	0x08009df8
 8003334:	20000130 	.word	0x20000130

08003338 <adc_to_voltage>:
/**
 * 	@brief Function handles converting adc value to a voltage.
 * 	Call reverse_and_shift_adc_value before hand.
 */
static float adc_to_voltage(uint16_t adc_value)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	0002      	movs	r2, r0
 8003340:	1dbb      	adds	r3, r7, #6
 8003342:	801a      	strh	r2, [r3, #0]
	return 5.0 * adc_value / 1024;;
 8003344:	1dbb      	adds	r3, r7, #6
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	0018      	movs	r0, r3
 800334a:	f7ff f851 	bl	80023f0 <__aeabi_i2d>
 800334e:	2200      	movs	r2, #0
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <adc_to_voltage+0x44>)
 8003352:	f7fe fa77 	bl	8001844 <__aeabi_dmul>
 8003356:	0003      	movs	r3, r0
 8003358:	000c      	movs	r4, r1
 800335a:	0018      	movs	r0, r3
 800335c:	0021      	movs	r1, r4
 800335e:	2200      	movs	r2, #0
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <adc_to_voltage+0x48>)
 8003362:	f7fd fe65 	bl	8001030 <__aeabi_ddiv>
 8003366:	0003      	movs	r3, r0
 8003368:	000c      	movs	r4, r1
 800336a:	0018      	movs	r0, r3
 800336c:	0021      	movs	r1, r4
 800336e:	f7ff f8fd 	bl	800256c <__aeabi_d2f>
 8003372:	1c03      	adds	r3, r0, #0
}
 8003374:	1c18      	adds	r0, r3, #0
 8003376:	46bd      	mov	sp, r7
 8003378:	b003      	add	sp, #12
 800337a:	bd90      	pop	{r4, r7, pc}
 800337c:	40140000 	.word	0x40140000
 8003380:	40900000 	.word	0x40900000

08003384 <calculate_wind_speed>:
 *	TODO: Wait 40 seconds until we do the first measurement to let the wind sensor stabilize
 *	TODO: Use the Bosch sensor for ambiant temperature instead of the onboard Modern Device Sensor
 * 	https://moderndevice.com/uncategorized/calibrating-rev-p-wind-sensor-new-regression/?preview=true
 */
static void calculate_wind_speed(uint16_t wind_speed_adc, uint16_t wind_temp_adc, float *wind_speed, float *temp_amb)
{
 8003384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60ba      	str	r2, [r7, #8]
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	240e      	movs	r4, #14
 8003390:	193b      	adds	r3, r7, r4
 8003392:	1c02      	adds	r2, r0, #0
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	250c      	movs	r5, #12
 8003398:	197b      	adds	r3, r7, r5
 800339a:	1c0a      	adds	r2, r1, #0
 800339c:	801a      	strh	r2, [r3, #0]
	// Calculate Vin from ADC
	float wind_speed_vout = adc_to_voltage(wind_speed_adc);
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff ffc8 	bl	8003338 <adc_to_voltage>
 80033a8:	1c03      	adds	r3, r0, #0
 80033aa:	617b      	str	r3, [r7, #20]
	float wind_temp_vout = adc_to_voltage(wind_temp_adc);
 80033ac:	197b      	adds	r3, r7, r5
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff ffc1 	bl	8003338 <adc_to_voltage>
 80033b6:	1c03      	adds	r3, r0, #0
 80033b8:	613b      	str	r3, [r7, #16]

	// Zero Voltage not set, set here
	// TODO: Check if 40 seconds of operation have passed before we decided to set the zero voltage.
	if (zero_voltage == -1) {
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <calculate_wind_speed+0x128>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	493c      	ldr	r1, [pc, #240]	; (80034b0 <calculate_wind_speed+0x12c>)
 80033c0:	1c18      	adds	r0, r3, #0
 80033c2:	f7fc ff7f 	bl	80002c4 <__aeabi_fcmpeq>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d002      	beq.n	80033d0 <calculate_wind_speed+0x4c>
		zero_voltage = wind_speed_vout;
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <calculate_wind_speed+0x128>)
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	601a      	str	r2, [r3, #0]
	}

	// Calculate Ambient Temperature in Celsius
	*temp_amb = (wind_temp_vout - 0.400) / 0.0195;
 80033d0:	6938      	ldr	r0, [r7, #16]
 80033d2:	f7ff f879 	bl	80024c8 <__aeabi_f2d>
 80033d6:	4a37      	ldr	r2, [pc, #220]	; (80034b4 <calculate_wind_speed+0x130>)
 80033d8:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <calculate_wind_speed+0x134>)
 80033da:	f7fe fca5 	bl	8001d28 <__aeabi_dsub>
 80033de:	0003      	movs	r3, r0
 80033e0:	000c      	movs	r4, r1
 80033e2:	0018      	movs	r0, r3
 80033e4:	0021      	movs	r1, r4
 80033e6:	4a35      	ldr	r2, [pc, #212]	; (80034bc <calculate_wind_speed+0x138>)
 80033e8:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <calculate_wind_speed+0x13c>)
 80033ea:	f7fd fe21 	bl	8001030 <__aeabi_ddiv>
 80033ee:	0003      	movs	r3, r0
 80033f0:	000c      	movs	r4, r1
 80033f2:	0018      	movs	r0, r3
 80033f4:	0021      	movs	r1, r4
 80033f6:	f7ff f8b9 	bl	800256c <__aeabi_d2f>
 80033fa:	1c02      	adds	r2, r0, #0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	601a      	str	r2, [r3, #0]

	// Calculate the Wind Speed in MPH
	*wind_speed = (wind_speed_vout - zero_voltage) / (3.038517 * pow(*temp_amb, 0.115157));
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <calculate_wind_speed+0x128>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1c19      	adds	r1, r3, #0
 8003406:	6978      	ldr	r0, [r7, #20]
 8003408:	f7fd f932 	bl	8000670 <__aeabi_fsub>
 800340c:	1c03      	adds	r3, r0, #0
 800340e:	1c18      	adds	r0, r3, #0
 8003410:	f7ff f85a 	bl	80024c8 <__aeabi_f2d>
 8003414:	0005      	movs	r5, r0
 8003416:	000e      	movs	r6, r1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1c18      	adds	r0, r3, #0
 800341e:	f7ff f853 	bl	80024c8 <__aeabi_f2d>
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <calculate_wind_speed+0x140>)
 8003424:	4c28      	ldr	r4, [pc, #160]	; (80034c8 <calculate_wind_speed+0x144>)
 8003426:	001a      	movs	r2, r3
 8003428:	0023      	movs	r3, r4
 800342a:	f005 fc53 	bl	8008cd4 <pow>
 800342e:	4a27      	ldr	r2, [pc, #156]	; (80034cc <calculate_wind_speed+0x148>)
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <calculate_wind_speed+0x14c>)
 8003432:	f7fe fa07 	bl	8001844 <__aeabi_dmul>
 8003436:	0003      	movs	r3, r0
 8003438:	000c      	movs	r4, r1
 800343a:	001a      	movs	r2, r3
 800343c:	0023      	movs	r3, r4
 800343e:	0028      	movs	r0, r5
 8003440:	0031      	movs	r1, r6
 8003442:	f7fd fdf5 	bl	8001030 <__aeabi_ddiv>
 8003446:	0003      	movs	r3, r0
 8003448:	000c      	movs	r4, r1
 800344a:	0018      	movs	r0, r3
 800344c:	0021      	movs	r1, r4
 800344e:	f7ff f88d 	bl	800256c <__aeabi_d2f>
 8003452:	1c02      	adds	r2, r0, #0
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	601a      	str	r2, [r3, #0]
	*wind_speed /= 0.087288;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c18      	adds	r0, r3, #0
 800345e:	f7ff f833 	bl	80024c8 <__aeabi_f2d>
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <calculate_wind_speed+0x150>)
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <calculate_wind_speed+0x154>)
 8003466:	f7fd fde3 	bl	8001030 <__aeabi_ddiv>
 800346a:	0003      	movs	r3, r0
 800346c:	000c      	movs	r4, r1
 800346e:	0018      	movs	r0, r3
 8003470:	0021      	movs	r1, r4
 8003472:	f7ff f87b 	bl	800256c <__aeabi_d2f>
 8003476:	1c02      	adds	r2, r0, #0
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	601a      	str	r2, [r3, #0]
	*wind_speed = pow(*wind_speed, 3.009364);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	1c18      	adds	r0, r3, #0
 8003482:	f7ff f821 	bl	80024c8 <__aeabi_f2d>
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <calculate_wind_speed+0x158>)
 8003488:	4c15      	ldr	r4, [pc, #84]	; (80034e0 <calculate_wind_speed+0x15c>)
 800348a:	001a      	movs	r2, r3
 800348c:	0023      	movs	r3, r4
 800348e:	f005 fc21 	bl	8008cd4 <pow>
 8003492:	0003      	movs	r3, r0
 8003494:	000c      	movs	r4, r1
 8003496:	0018      	movs	r0, r3
 8003498:	0021      	movs	r1, r4
 800349a:	f7ff f867 	bl	800256c <__aeabi_d2f>
 800349e:	1c02      	adds	r2, r0, #0
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	601a      	str	r2, [r3, #0]
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b007      	add	sp, #28
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	20000004 	.word	0x20000004
 80034b0:	bf800000 	.word	0xbf800000
 80034b4:	9999999a 	.word	0x9999999a
 80034b8:	3fd99999 	.word	0x3fd99999
 80034bc:	d916872b 	.word	0xd916872b
 80034c0:	3f93f7ce 	.word	0x3f93f7ce
 80034c4:	dce7cd03 	.word	0xdce7cd03
 80034c8:	3fbd7aed 	.word	0x3fbd7aed
 80034cc:	003ab863 	.word	0x003ab863
 80034d0:	40084ee2 	.word	0x40084ee2
 80034d4:	a1554fbe 	.word	0xa1554fbe
 80034d8:	3fb65881 	.word	0x3fb65881
 80034dc:	6ece13f5 	.word	0x6ece13f5
 80034e0:	4008132d 	.word	0x4008132d

080034e4 <bme280_read_data_forced_mode>:

void bme280_read_data_forced_mode(struct bme280_dev *dev)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	bme280_rslt = 0;
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <bme280_read_data_forced_mode+0x78>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
	/* Set measurement mode to Forced */
	bme280_rslt |= bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0019      	movs	r1, r3
 80034f6:	2001      	movs	r0, #1
 80034f8:	f000 fa56 	bl	80039a8 <bme280_set_sensor_mode>
 80034fc:	0003      	movs	r3, r0
 80034fe:	001a      	movs	r2, r3
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <bme280_read_data_forced_mode+0x78>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b25b      	sxtb	r3, r3
 8003506:	4313      	orrs	r3, r2
 8003508:	b25a      	sxtb	r2, r3
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <bme280_read_data_forced_mode+0x78>)
 800350c:	701a      	strb	r2, [r3, #0]
	/* Wait for the measurement to complete */
	dev->delay_ms(500);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	22fa      	movs	r2, #250	; 0xfa
 8003514:	0052      	lsls	r2, r2, #1
 8003516:	0010      	movs	r0, r2
 8003518:	4798      	blx	r3
	/* Output data to comp_data */
	bme280_rslt |= bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <bme280_read_data_forced_mode+0x7c>)
 800351e:	0019      	movs	r1, r3
 8003520:	2007      	movs	r0, #7
 8003522:	f000 fb1e 	bl	8003b62 <bme280_get_sensor_data>
 8003526:	0003      	movs	r3, r0
 8003528:	001a      	movs	r2, r3
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <bme280_read_data_forced_mode+0x78>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b25b      	sxtb	r3, r3
 8003530:	4313      	orrs	r3, r2
 8003532:	b25a      	sxtb	r2, r3
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <bme280_read_data_forced_mode+0x78>)
 8003536:	701a      	strb	r2, [r3, #0]
	/* Set sensor to Sleep */
	bme280_rslt |= bme280_set_sensor_mode(BME280_SLEEP_MODE, dev);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0019      	movs	r1, r3
 800353c:	2000      	movs	r0, #0
 800353e:	f000 fa33 	bl	80039a8 <bme280_set_sensor_mode>
 8003542:	0003      	movs	r3, r0
 8003544:	001a      	movs	r2, r3
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <bme280_read_data_forced_mode+0x78>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b25b      	sxtb	r3, r3
 800354c:	4313      	orrs	r3, r2
 800354e:	b25a      	sxtb	r2, r3
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <bme280_read_data_forced_mode+0x78>)
 8003552:	701a      	strb	r2, [r3, #0]
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000095 	.word	0x20000095
 8003560:	200000e4 	.word	0x200000e4

08003564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <SystemInit+0x64>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <SystemInit+0x64>)
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	0049      	lsls	r1, r1, #1
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <SystemInit+0x64>)
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <SystemInit+0x64>)
 800357c:	4913      	ldr	r1, [pc, #76]	; (80035cc <SystemInit+0x68>)
 800357e:	400a      	ands	r2, r1
 8003580:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <SystemInit+0x64>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <SystemInit+0x64>)
 8003588:	4911      	ldr	r1, [pc, #68]	; (80035d0 <SystemInit+0x6c>)
 800358a:	400a      	ands	r2, r1
 800358c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <SystemInit+0x64>)
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <SystemInit+0x64>)
 8003594:	2101      	movs	r1, #1
 8003596:	438a      	bics	r2, r1
 8003598:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <SystemInit+0x64>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <SystemInit+0x64>)
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <SystemInit+0x70>)
 80035a2:	400a      	ands	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
 RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <SystemInit+0x64>)
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <SystemInit+0x64>)
 80035ac:	490a      	ldr	r1, [pc, #40]	; (80035d8 <SystemInit+0x74>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <SystemInit+0x64>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <SystemInit+0x78>)
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	0512      	lsls	r2, r2, #20
 80035be:	609a      	str	r2, [r3, #8]
#endif
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	40021000 	.word	0x40021000
 80035cc:	88ff400c 	.word	0x88ff400c
 80035d0:	fef6fff6 	.word	0xfef6fff6
 80035d4:	fffbffff 	.word	0xfffbffff
 80035d8:	ff02ffff 	.word	0xff02ffff
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80035e0:	480d      	ldr	r0, [pc, #52]	; (8003618 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80035e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80035e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035e6:	e003      	b.n	80035f0 <LoopCopyDataInit>

080035e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80035ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035ee:	3104      	adds	r1, #4

080035f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80035f0:	480b      	ldr	r0, [pc, #44]	; (8003620 <LoopForever+0xa>)
  ldr  r3, =_edata
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <LoopForever+0xe>)
  adds  r2, r0, r1
 80035f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035f8:	d3f6      	bcc.n	80035e8 <CopyDataInit>
  ldr  r2, =_sbss
 80035fa:	4a0b      	ldr	r2, [pc, #44]	; (8003628 <LoopForever+0x12>)
  b  LoopFillZerobss
 80035fc:	e002      	b.n	8003604 <LoopFillZerobss>

080035fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80035fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8003600:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003602:	3204      	adds	r2, #4

08003604 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <LoopForever+0x16>)
  cmp  r2, r3
 8003606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003608:	d3f9      	bcc.n	80035fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800360a:	f7ff ffab 	bl	8003564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800360e:	f005 fb2b 	bl	8008c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003612:	f7ff f859 	bl	80026c8 <main>

08003616 <LoopForever>:

LoopForever:
    b LoopForever
 8003616:	e7fe      	b.n	8003616 <LoopForever>
   ldr   r0, =_estack
 8003618:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800361c:	08009ec0 	.word	0x08009ec0
  ldr  r0, =_sdata
 8003620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003624:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003628:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800362c:	20000250 	.word	0x20000250

08003630 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003630:	e7fe      	b.n	8003630 <ADC1_COMP_IRQHandler>

08003632 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003632:	b5b0      	push	{r4, r5, r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 800363a:	230e      	movs	r3, #14
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2205      	movs	r2, #5
 8003640:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8003642:	230d      	movs	r3, #13
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800364a:	250f      	movs	r5, #15
 800364c:	197c      	adds	r4, r7, r5
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f001 f9a7 	bl	80049a4 <null_ptr_check>
 8003656:	0003      	movs	r3, r0
 8003658:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800365a:	197b      	adds	r3, r7, r5
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b25b      	sxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d14a      	bne.n	80036fa <bme280_init+0xc8>
    {
        while (try_count)
 8003664:	e039      	b.n	80036da <bme280_init+0xa8>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003666:	250f      	movs	r5, #15
 8003668:	197c      	adds	r4, r7, r5
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	220d      	movs	r2, #13
 800366e:	18b9      	adds	r1, r7, r2
 8003670:	2201      	movs	r2, #1
 8003672:	20d0      	movs	r0, #208	; 0xd0
 8003674:	f000 f849 	bl	800370a <bme280_get_regs>
 8003678:	0003      	movs	r3, r0
 800367a:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 800367c:	197b      	adds	r3, r7, r5
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b25b      	sxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d11f      	bne.n	80036c6 <bme280_init+0x94>
 8003686:	230d      	movs	r3, #13
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b60      	cmp	r3, #96	; 0x60
 800368e:	d11a      	bne.n	80036c6 <bme280_init+0x94>
            {
                dev->chip_id = chip_id;
 8003690:	230d      	movs	r3, #13
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 800369a:	250f      	movs	r5, #15
 800369c:	197c      	adds	r4, r7, r5
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 f9f6 	bl	8003a92 <bme280_soft_reset>
 80036a6:	0003      	movs	r3, r0
 80036a8:	7023      	strb	r3, [r4, #0]
                if (rslt == BME280_OK)
 80036aa:	197b      	adds	r3, r7, r5
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d118      	bne.n	80036e6 <bme280_init+0xb4>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80036b4:	230f      	movs	r3, #15
 80036b6:	18fc      	adds	r4, r7, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f000 ffc4 	bl	8004648 <get_calib_data>
 80036c0:	0003      	movs	r3, r0
 80036c2:	7023      	strb	r3, [r4, #0]
                }
                break;
 80036c4:	e00f      	b.n	80036e6 <bme280_init+0xb4>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2001      	movs	r0, #1
 80036cc:	4798      	blx	r3
            --try_count;
 80036ce:	220e      	movs	r2, #14
 80036d0:	18bb      	adds	r3, r7, r2
 80036d2:	18ba      	adds	r2, r7, r2
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	3a01      	subs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
        while (try_count)
 80036da:	230e      	movs	r3, #14
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1c0      	bne.n	8003666 <bme280_init+0x34>
 80036e4:	e000      	b.n	80036e8 <bme280_init+0xb6>
                break;
 80036e6:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 80036e8:	230e      	movs	r3, #14
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <bme280_init+0xc8>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80036f2:	230f      	movs	r3, #15
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	22fe      	movs	r2, #254	; 0xfe
 80036f8:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 80036fa:	230f      	movs	r3, #15
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b25b      	sxtb	r3, r3
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bdb0      	pop	{r4, r5, r7, pc}

0800370a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800370a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370c:	b087      	sub	sp, #28
 800370e:	af00      	add	r7, sp, #0
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	0011      	movs	r1, r2
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	230f      	movs	r3, #15
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	1c02      	adds	r2, r0, #0
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	230c      	movs	r3, #12
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	1c0a      	adds	r2, r1, #0
 8003724:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003726:	2517      	movs	r5, #23
 8003728:	197c      	adds	r4, r7, r5
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0018      	movs	r0, r3
 800372e:	f001 f939 	bl	80049a4 <null_ptr_check>
 8003732:	0003      	movs	r3, r0
 8003734:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003736:	197b      	adds	r3, r7, r5
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b25b      	sxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d126      	bne.n	800378e <bme280_get_regs+0x84>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	789b      	ldrb	r3, [r3, #2]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d007      	beq.n	8003758 <bme280_get_regs+0x4e>
        {
            reg_addr = reg_addr | 0x80;
 8003748:	220f      	movs	r2, #15
 800374a:	18bb      	adds	r3, r7, r2
 800374c:	18ba      	adds	r2, r7, r2
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	2180      	movs	r1, #128	; 0x80
 8003752:	4249      	negs	r1, r1
 8003754:	430a      	orrs	r2, r1
 8003756:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685d      	ldr	r5, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7858      	ldrb	r0, [r3, #1]
 8003760:	2317      	movs	r3, #23
 8003762:	18fc      	adds	r4, r7, r3
 8003764:	220c      	movs	r2, #12
 8003766:	18bb      	adds	r3, r7, r2
 8003768:	881e      	ldrh	r6, [r3, #0]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	210f      	movs	r1, #15
 800376e:	187b      	adds	r3, r7, r1
 8003770:	7819      	ldrb	r1, [r3, #0]
 8003772:	0033      	movs	r3, r6
 8003774:	47a8      	blx	r5
 8003776:	0003      	movs	r3, r0
 8003778:	7023      	strb	r3, [r4, #0]

        /* Check for communication error */
        if (rslt != BME280_OK)
 800377a:	2317      	movs	r3, #23
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b25b      	sxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <bme280_get_regs+0x84>
        {
            rslt = BME280_E_COMM_FAIL;
 8003786:	2317      	movs	r3, #23
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	22fc      	movs	r2, #252	; 0xfc
 800378c:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 800378e:	2317      	movs	r3, #23
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b25b      	sxtb	r3, r3
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b007      	add	sp, #28
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800379e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800379e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a0:	b08d      	sub	sp, #52	; 0x34
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 80037ae:	1dfb      	adds	r3, r7, #7
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b0a      	cmp	r3, #10
 80037b4:	d902      	bls.n	80037bc <bme280_set_regs+0x1e>
    {
        len = 10;
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	220a      	movs	r2, #10
 80037ba:	701a      	strb	r2, [r3, #0]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80037bc:	252f      	movs	r5, #47	; 0x2f
 80037be:	197c      	adds	r4, r7, r5
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f001 f8ee 	bl	80049a4 <null_ptr_check>
 80037c8:	0003      	movs	r3, r0
 80037ca:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80037cc:	197b      	adds	r3, r7, r5
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d16b      	bne.n	80038ae <bme280_set_regs+0x110>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d068      	beq.n	80038ae <bme280_set_regs+0x110>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d065      	beq.n	80038ae <bme280_set_regs+0x110>
    {
        if (len != 0)
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d05c      	beq.n	80038a4 <bme280_set_regs+0x106>
        {
            temp_buff[0] = reg_data[0];
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	2314      	movs	r3, #20
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	789b      	ldrb	r3, [r3, #2]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d01e      	beq.n	800383a <bme280_set_regs+0x9c>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80037fc:	232b      	movs	r3, #43	; 0x2b
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e012      	b.n	800382c <bme280_set_regs+0x8e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003806:	202b      	movs	r0, #43	; 0x2b
 8003808:	183b      	adds	r3, r7, r0
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	183b      	adds	r3, r7, r0
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	18cb      	adds	r3, r1, r3
 800381a:	217f      	movs	r1, #127	; 0x7f
 800381c:	400a      	ands	r2, r1
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003822:	183b      	adds	r3, r7, r0
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	183b      	adds	r3, r7, r0
 8003828:	3201      	adds	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	232b      	movs	r3, #43	; 0x2b
 800382e:	18fa      	adds	r2, r7, r3
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d3e5      	bcc.n	8003806 <bme280_set_regs+0x68>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d911      	bls.n	8003866 <bme280_set_regs+0xc8>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	2114      	movs	r1, #20
 800384a:	1879      	adds	r1, r7, r1
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 ff48 	bl	80046e2 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	18db      	adds	r3, r3, r3
 800385a:	b29a      	uxth	r2, r3
 800385c:	232c      	movs	r3, #44	; 0x2c
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	3a01      	subs	r2, #1
 8003862:	801a      	strh	r2, [r3, #0]
 8003864:	e004      	b.n	8003870 <bme280_set_regs+0xd2>
            }
            else
            {
                temp_len = len;
 8003866:	232c      	movs	r3, #44	; 0x2c
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	1dfa      	adds	r2, r7, #7
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	801a      	strh	r2, [r3, #0]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689d      	ldr	r5, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	7858      	ldrb	r0, [r3, #1]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	7819      	ldrb	r1, [r3, #0]
 800387c:	262f      	movs	r6, #47	; 0x2f
 800387e:	19bc      	adds	r4, r7, r6
 8003880:	232c      	movs	r3, #44	; 0x2c
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	2214      	movs	r2, #20
 8003888:	18ba      	adds	r2, r7, r2
 800388a:	47a8      	blx	r5
 800388c:	0003      	movs	r3, r0
 800388e:	7023      	strb	r3, [r4, #0]

            /* Check for communication error */
            if (rslt != BME280_OK)
 8003890:	19bb      	adds	r3, r7, r6
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b25b      	sxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <bme280_set_regs+0x11a>
            {
                rslt = BME280_E_COMM_FAIL;
 800389a:	232f      	movs	r3, #47	; 0x2f
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	22fc      	movs	r2, #252	; 0xfc
 80038a0:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 80038a2:	e009      	b.n	80038b8 <bme280_set_regs+0x11a>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80038a4:	232f      	movs	r3, #47	; 0x2f
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	22fd      	movs	r2, #253	; 0xfd
 80038aa:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 80038ac:	e004      	b.n	80038b8 <bme280_set_regs+0x11a>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80038ae:	232f      	movs	r3, #47	; 0x2f
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	22ff      	movs	r2, #255	; 0xff
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e000      	b.n	80038ba <bme280_set_regs+0x11c>
        if (len != 0)
 80038b8:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 80038ba:	232f      	movs	r3, #47	; 0x2f
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b25b      	sxtb	r3, r3
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b00d      	add	sp, #52	; 0x34
 80038c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ca <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80038ca:	b5b0      	push	{r4, r5, r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	0002      	movs	r2, r0
 80038d2:	6039      	str	r1, [r7, #0]
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80038d8:	250f      	movs	r5, #15
 80038da:	197c      	adds	r4, r7, r5
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	0018      	movs	r0, r3
 80038e0:	f001 f860 	bl	80049a4 <null_ptr_check>
 80038e4:	0003      	movs	r3, r0
 80038e6:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80038e8:	197b      	adds	r3, r7, r5
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d152      	bne.n	8003998 <bme280_set_sensor_settings+0xce>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80038f2:	250f      	movs	r5, #15
 80038f4:	197c      	adds	r4, r7, r5
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	230e      	movs	r3, #14
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	0011      	movs	r1, r2
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 f89c 	bl	8003a3c <bme280_get_sensor_mode>
 8003904:	0003      	movs	r3, r0
 8003906:	7023      	strb	r3, [r4, #0]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003908:	197b      	adds	r3, r7, r5
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	b25b      	sxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <bme280_set_sensor_settings+0x62>
 8003912:	230e      	movs	r3, #14
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <bme280_set_sensor_settings+0x62>
        {
            rslt = put_device_to_sleep(dev);
 800391c:	230f      	movs	r3, #15
 800391e:	18fc      	adds	r4, r7, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	0018      	movs	r0, r3
 8003924:	f000 fc08 	bl	8004138 <put_device_to_sleep>
 8003928:	0003      	movs	r3, r0
 800392a:	7023      	strb	r3, [r4, #0]
        }
        if (rslt == BME280_OK)
 800392c:	230f      	movs	r3, #15
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b25b      	sxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d12f      	bne.n	8003998 <bme280_set_sensor_settings+0xce>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	0019      	movs	r1, r3
 800393e:	2007      	movs	r0, #7
 8003940:	f001 f80b 	bl	800495a <are_settings_changed>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d00c      	beq.n	8003962 <bme280_set_sensor_settings+0x98>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	3338      	adds	r3, #56	; 0x38
 800394c:	0019      	movs	r1, r3
 800394e:	230f      	movs	r3, #15
 8003950:	18fc      	adds	r4, r7, r3
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 f9fd 	bl	8003d58 <set_osr_settings>
 800395e:	0003      	movs	r3, r0
 8003960:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003962:	230f      	movs	r3, #15
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b25b      	sxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d114      	bne.n	8003998 <bme280_set_sensor_settings+0xce>
 800396e:	1dfb      	adds	r3, r7, #7
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	0019      	movs	r1, r3
 8003974:	2018      	movs	r0, #24
 8003976:	f000 fff0 	bl	800495a <are_settings_changed>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d00c      	beq.n	8003998 <bme280_set_sensor_settings+0xce>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	3338      	adds	r3, #56	; 0x38
 8003982:	0019      	movs	r1, r3
 8003984:	230f      	movs	r3, #15
 8003986:	18fc      	adds	r4, r7, r3
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 faad 	bl	8003eee <set_filter_standby_settings>
 8003994:	0003      	movs	r3, r0
 8003996:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8003998:	230f      	movs	r3, #15
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b25b      	sxtb	r3, r3
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bdb0      	pop	{r4, r5, r7, pc}

080039a8 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	0002      	movs	r2, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80039b6:	250f      	movs	r5, #15
 80039b8:	197c      	adds	r4, r7, r5
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 fff1 	bl	80049a4 <null_ptr_check>
 80039c2:	0003      	movs	r3, r0
 80039c4:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 80039c6:	197b      	adds	r3, r7, r5
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	b25b      	sxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d12d      	bne.n	8003a2c <bme280_set_sensor_mode+0x84>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80039d0:	250f      	movs	r5, #15
 80039d2:	197c      	adds	r4, r7, r5
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	230e      	movs	r3, #14
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	0011      	movs	r1, r2
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 f82d 	bl	8003a3c <bme280_get_sensor_mode>
 80039e2:	0003      	movs	r3, r0
 80039e4:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80039e6:	197b      	adds	r3, r7, r5
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10c      	bne.n	8003a0a <bme280_set_sensor_mode+0x62>
 80039f0:	230e      	movs	r3, #14
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <bme280_set_sensor_mode+0x62>
        {
            rslt = put_device_to_sleep(dev);
 80039fa:	230f      	movs	r3, #15
 80039fc:	18fc      	adds	r4, r7, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 fb99 	bl	8004138 <put_device_to_sleep>
 8003a06:	0003      	movs	r3, r0
 8003a08:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8003a0a:	230f      	movs	r3, #15
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <bme280_set_sensor_mode+0x84>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fc      	adds	r4, r7, r3
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	0011      	movs	r1, r2
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 fb47 	bl	80040b6 <write_power_mode>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b25b      	sxtb	r3, r3
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b004      	add	sp, #16
 8003a3a:	bdb0      	pop	{r4, r5, r7, pc}

08003a3c <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003a3c:	b5b0      	push	{r4, r5, r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003a46:	250f      	movs	r5, #15
 8003a48:	197c      	adds	r4, r7, r5
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 ffa9 	bl	80049a4 <null_ptr_check>
 8003a52:	0003      	movs	r3, r0
 8003a54:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8003a56:	197b      	adds	r3, r7, r5
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d110      	bne.n	8003a82 <bme280_get_sensor_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003a60:	230f      	movs	r3, #15
 8003a62:	18fc      	adds	r4, r7, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	20f4      	movs	r0, #244	; 0xf4
 8003a6c:	f7ff fe4d 	bl	800370a <bme280_get_regs>
 8003a70:	0003      	movs	r3, r0
 8003a72:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003a82:	230f      	movs	r3, #15
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b25b      	sxtb	r3, r3
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b004      	add	sp, #16
 8003a90:	bdb0      	pop	{r4, r5, r7, pc}

08003a92 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003a92:	b5b0      	push	{r4, r5, r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8003a9a:	230d      	movs	r3, #13
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	22e0      	movs	r2, #224	; 0xe0
 8003aa0:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8003aa2:	230c      	movs	r3, #12
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8003aaa:	230e      	movs	r3, #14
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	2205      	movs	r2, #5
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8003ab2:	230b      	movs	r3, #11
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	22b6      	movs	r2, #182	; 0xb6
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003aba:	250f      	movs	r5, #15
 8003abc:	197c      	adds	r4, r7, r5
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 ff6f 	bl	80049a4 <null_ptr_check>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003aca:	197b      	adds	r3, r7, r5
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d13e      	bne.n	8003b52 <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003ad4:	250f      	movs	r5, #15
 8003ad6:	197c      	adds	r4, r7, r5
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	220b      	movs	r2, #11
 8003adc:	18b9      	adds	r1, r7, r2
 8003ade:	220d      	movs	r2, #13
 8003ae0:	18b8      	adds	r0, r7, r2
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f7ff fe5b 	bl	800379e <bme280_set_regs>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8003aec:	197b      	adds	r3, r7, r5
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	b25b      	sxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d12d      	bne.n	8003b52 <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2002      	movs	r0, #2
 8003afc:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8003afe:	250f      	movs	r5, #15
 8003b00:	197c      	adds	r4, r7, r5
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	220c      	movs	r2, #12
 8003b06:	18b9      	adds	r1, r7, r2
 8003b08:	2201      	movs	r2, #1
 8003b0a:	20f3      	movs	r0, #243	; 0xf3
 8003b0c:	f7ff fdfd 	bl	800370a <bme280_get_regs>
 8003b10:	0003      	movs	r3, r0
 8003b12:	7023      	strb	r3, [r4, #0]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8003b14:	197b      	adds	r3, r7, r5
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b25b      	sxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10e      	bne.n	8003b3c <bme280_soft_reset+0xaa>
 8003b1e:	220e      	movs	r2, #14
 8003b20:	18bb      	adds	r3, r7, r2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	18ba      	adds	r2, r7, r2
 8003b26:	1e59      	subs	r1, r3, #1
 8003b28:	7011      	strb	r1, [r2, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <bme280_soft_reset+0xaa>
 8003b2e:	230c      	movs	r3, #12
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	001a      	movs	r2, r3
 8003b36:	2301      	movs	r3, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d1dc      	bne.n	8003af6 <bme280_soft_reset+0x64>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	001a      	movs	r2, r3
 8003b44:	2301      	movs	r3, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	d003      	beq.n	8003b52 <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8003b4a:	230f      	movs	r3, #15
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	22fa      	movs	r2, #250	; 0xfa
 8003b50:	701a      	strb	r2, [r3, #0]
            }

        }
    }

    return rslt;
 8003b52:	230f      	movs	r3, #15
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b25b      	sxtb	r3, r3
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bdb0      	pop	{r4, r5, r7, pc}

08003b62 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b64:	b08b      	sub	sp, #44	; 0x2c
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	230f      	movs	r3, #15
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	1c02      	adds	r2, r0, #0
 8003b72:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8003b74:	231c      	movs	r3, #28
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	0018      	movs	r0, r3
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	2100      	movs	r1, #0
 8003b80:	f005 f89f 	bl	8008cc2 <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 8003b84:	2310      	movs	r3, #16
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	0018      	movs	r0, r3
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f005 f897 	bl	8008cc2 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003b94:	2527      	movs	r5, #39	; 0x27
 8003b96:	197c      	adds	r4, r7, r5
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 ff02 	bl	80049a4 <null_ptr_check>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8003ba4:	197b      	adds	r3, r7, r5
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12a      	bne.n	8003c04 <bme280_get_sensor_data+0xa2>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d027      	beq.n	8003c04 <bme280_get_sensor_data+0xa2>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003bb4:	2527      	movs	r5, #39	; 0x27
 8003bb6:	197c      	adds	r4, r7, r5
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	221c      	movs	r2, #28
 8003bbc:	18b9      	adds	r1, r7, r2
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	20f7      	movs	r0, #247	; 0xf7
 8003bc2:	f7ff fda2 	bl	800370a <bme280_get_regs>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8003bca:	197b      	adds	r3, r7, r5
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d11b      	bne.n	8003c0c <bme280_get_sensor_data+0xaa>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003bd4:	2610      	movs	r6, #16
 8003bd6:	19ba      	adds	r2, r7, r6
 8003bd8:	231c      	movs	r3, #28
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f81c 	bl	8003c1c <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3310      	adds	r3, #16
 8003be8:	001d      	movs	r5, r3
 8003bea:	2327      	movs	r3, #39	; 0x27
 8003bec:	18fc      	adds	r4, r7, r3
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	19b9      	adds	r1, r7, r6
 8003bf2:	230f      	movs	r3, #15
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	7818      	ldrb	r0, [r3, #0]
 8003bf8:	002b      	movs	r3, r5
 8003bfa:	f000 f853 	bl	8003ca4 <bme280_compensate_data>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8003c02:	e003      	b.n	8003c0c <bme280_get_sensor_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003c04:	2327      	movs	r3, #39	; 0x27
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003c0c:	2327      	movs	r3, #39	; 0x27
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b25b      	sxtb	r3, r3
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b00b      	add	sp, #44	; 0x2c
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c1c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	031b      	lsls	r3, r3, #12
 8003c2c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3301      	adds	r3, #1
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3303      	adds	r3, #3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3305      	adds	r3, #5
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3306      	adds	r3, #6
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3307      	adds	r3, #7
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b006      	add	sp, #24
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	230f      	movs	r3, #15
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	1c02      	adds	r2, r0, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 8003cb8:	2317      	movs	r3, #23
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03c      	beq.n	8003d40 <bme280_compensate_data+0x9c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d039      	beq.n	8003d40 <bme280_compensate_data+0x9c>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d036      	beq.n	8003d40 <bme280_compensate_data+0x9c>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8003ce4:	230f      	movs	r3, #15
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2207      	movs	r2, #7
 8003cec:	4013      	ands	r3, r2
 8003cee:	d008      	beq.n	8003d02 <bme280_compensate_data+0x5e>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	0011      	movs	r1, r2
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 fa80 	bl	80041fc <compensate_temperature>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	605a      	str	r2, [r3, #4]
        }
        if (sensor_comp & BME280_PRESS)
 8003d02:	230f      	movs	r3, #15
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d008      	beq.n	8003d20 <bme280_compensate_data+0x7c>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	0011      	movs	r1, r2
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 fad7 	bl	80042c8 <compensate_pressure>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
        }
        if (sensor_comp & BME280_HUM)
 8003d20:	230f      	movs	r3, #15
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2204      	movs	r2, #4
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d00d      	beq.n	8003d48 <bme280_compensate_data+0xa4>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 fbca 	bl	80044cc <compensate_humidity>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 8003d3e:	e003      	b.n	8003d48 <bme280_compensate_data+0xa4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003d40:	2317      	movs	r3, #23
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003d48:	2317      	movs	r3, #23
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b25b      	sxtb	r3, r3
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b006      	add	sp, #24
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	210f      	movs	r1, #15
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	1c02      	adds	r2, r0, #0
 8003d68:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003d6a:	2317      	movs	r3, #23
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <set_osr_settings+0x38>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8003d7c:	2317      	movs	r3, #23
 8003d7e:	18fc      	adds	r4, r7, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 f81c 	bl	8003dc4 <set_osr_humidity_settings>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	7023      	strb	r3, [r4, #0]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003d90:	230f      	movs	r3, #15
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2203      	movs	r2, #3
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <set_osr_settings+0x5c>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003d9c:	2317      	movs	r3, #23
 8003d9e:	18fc      	adds	r4, r7, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	230f      	movs	r3, #15
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 f853 	bl	8003e56 <set_osr_press_temp_settings>
 8003db0:	0003      	movs	r3, r0
 8003db2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003db4:	2317      	movs	r3, #23
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b25b      	sxtb	r3, r3
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b007      	add	sp, #28
 8003dc2:	bd90      	pop	{r4, r7, pc}

08003dc4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003dc4:	b5b0      	push	{r4, r5, r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003dce:	200c      	movs	r0, #12
 8003dd0:	183b      	adds	r3, r7, r0
 8003dd2:	22f2      	movs	r2, #242	; 0xf2
 8003dd4:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	789b      	ldrb	r3, [r3, #2]
 8003dda:	2207      	movs	r2, #7
 8003ddc:	4013      	ands	r3, r2
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	210e      	movs	r1, #14
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8003de6:	250f      	movs	r5, #15
 8003de8:	197c      	adds	r4, r7, r5
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	1879      	adds	r1, r7, r1
 8003dee:	1838      	adds	r0, r7, r0
 8003df0:	2201      	movs	r2, #1
 8003df2:	f7ff fcd4 	bl	800379e <bme280_set_regs>
 8003df6:	0003      	movs	r3, r0
 8003df8:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8003dfa:	197b      	adds	r3, r7, r5
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d120      	bne.n	8003e46 <set_osr_humidity_settings+0x82>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e04:	210c      	movs	r1, #12
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	22f4      	movs	r2, #244	; 0xf4
 8003e0a:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	7818      	ldrb	r0, [r3, #0]
 8003e10:	250f      	movs	r5, #15
 8003e12:	197c      	adds	r4, r7, r5
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	220d      	movs	r2, #13
 8003e18:	18b9      	adds	r1, r7, r2
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f7ff fc75 	bl	800370a <bme280_get_regs>
 8003e20:	0003      	movs	r3, r0
 8003e22:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8003e24:	197b      	adds	r3, r7, r5
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b25b      	sxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <set_osr_humidity_settings+0x82>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003e2e:	230f      	movs	r3, #15
 8003e30:	18fc      	adds	r4, r7, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	220d      	movs	r2, #13
 8003e36:	18b9      	adds	r1, r7, r2
 8003e38:	220c      	movs	r2, #12
 8003e3a:	18b8      	adds	r0, r7, r2
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f7ff fcae 	bl	800379e <bme280_set_regs>
 8003e42:	0003      	movs	r3, r0
 8003e44:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8003e46:	230f      	movs	r3, #15
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bdb0      	pop	{r4, r5, r7, pc}

08003e56 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8003e56:	b5b0      	push	{r4, r5, r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	230f      	movs	r3, #15
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	1c02      	adds	r2, r0, #0
 8003e66:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e68:	2116      	movs	r1, #22
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	22f4      	movs	r2, #244	; 0xf4
 8003e6e:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	7818      	ldrb	r0, [r3, #0]
 8003e74:	2517      	movs	r5, #23
 8003e76:	197c      	adds	r4, r7, r5
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2215      	movs	r2, #21
 8003e7c:	18b9      	adds	r1, r7, r2
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f7ff fc43 	bl	800370a <bme280_get_regs>
 8003e84:	0003      	movs	r3, r0
 8003e86:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8003e88:	197b      	adds	r3, r7, r5
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b25b      	sxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d125      	bne.n	8003ede <set_osr_press_temp_settings+0x88>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8003e92:	230f      	movs	r3, #15
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d006      	beq.n	8003eac <set_osr_press_temp_settings+0x56>
        {
            fill_osr_press_settings(&reg_data, settings);
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	2315      	movs	r3, #21
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	0011      	movs	r1, r2
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 f8a0 	bl	8003fec <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8003eac:	230f      	movs	r3, #15
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d006      	beq.n	8003ec6 <set_osr_press_temp_settings+0x70>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	2315      	movs	r3, #21
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 f8ae 	bl	8004022 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003ec6:	2317      	movs	r3, #23
 8003ec8:	18fc      	adds	r4, r7, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2215      	movs	r2, #21
 8003ece:	18b9      	adds	r1, r7, r2
 8003ed0:	2216      	movs	r2, #22
 8003ed2:	18b8      	adds	r0, r7, r2
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f7ff fc62 	bl	800379e <bme280_set_regs>
 8003eda:	0003      	movs	r3, r0
 8003edc:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003ede:	2317      	movs	r3, #23
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b25b      	sxtb	r3, r3
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b006      	add	sp, #24
 8003eec:	bdb0      	pop	{r4, r5, r7, pc}

08003eee <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8003eee:	b5b0      	push	{r4, r5, r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	230f      	movs	r3, #15
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	1c02      	adds	r2, r0, #0
 8003efe:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003f00:	2116      	movs	r1, #22
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	22f5      	movs	r2, #245	; 0xf5
 8003f06:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	7818      	ldrb	r0, [r3, #0]
 8003f0c:	2517      	movs	r5, #23
 8003f0e:	197c      	adds	r4, r7, r5
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2215      	movs	r2, #21
 8003f14:	18b9      	adds	r1, r7, r2
 8003f16:	2201      	movs	r2, #1
 8003f18:	f7ff fbf7 	bl	800370a <bme280_get_regs>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8003f20:	197b      	adds	r3, r7, r5
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b25b      	sxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d125      	bne.n	8003f76 <set_filter_standby_settings+0x88>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8003f2a:	230f      	movs	r3, #15
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2208      	movs	r2, #8
 8003f32:	4013      	ands	r3, r2
 8003f34:	d006      	beq.n	8003f44 <set_filter_standby_settings+0x56>
        {
            fill_filter_settings(&reg_data, settings);
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	2315      	movs	r3, #21
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 f821 	bl	8003f86 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8003f44:	230f      	movs	r3, #15
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d006      	beq.n	8003f5e <set_filter_standby_settings+0x70>
        {
            fill_standby_settings(&reg_data, settings);
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	2315      	movs	r3, #21
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 f82f 	bl	8003fbc <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f5e:	2317      	movs	r3, #23
 8003f60:	18fc      	adds	r4, r7, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2215      	movs	r2, #21
 8003f66:	18b9      	adds	r1, r7, r2
 8003f68:	2216      	movs	r2, #22
 8003f6a:	18b8      	adds	r0, r7, r2
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f7ff fc16 	bl	800379e <bme280_set_regs>
 8003f72:	0003      	movs	r3, r0
 8003f74:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003f76:	2317      	movs	r3, #23
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b25b      	sxtb	r3, r3
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b006      	add	sp, #24
 8003f84:	bdb0      	pop	{r4, r5, r7, pc}

08003f86 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	221c      	movs	r2, #28
 8003f98:	4393      	bics	r3, r2
 8003f9a:	b25a      	sxtb	r2, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	78db      	ldrb	r3, [r3, #3]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	211c      	movs	r1, #28
 8003fa6:	400b      	ands	r3, r1
 8003fa8:	b25b      	sxtb	r3, r3
 8003faa:	4313      	orrs	r3, r2
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	701a      	strb	r2, [r3, #0]
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	221f      	movs	r2, #31
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b25a      	sxtb	r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	791b      	ldrb	r3, [r3, #4]
 8003fd6:	015b      	lsls	r3, r3, #5
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	701a      	strb	r2, [r3, #0]
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b25b      	sxtb	r3, r3
 8003ffc:	221c      	movs	r2, #28
 8003ffe:	4393      	bics	r3, r2
 8004000:	b25a      	sxtb	r2, r3
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	b25b      	sxtb	r3, r3
 800400a:	211c      	movs	r1, #28
 800400c:	400b      	ands	r3, r1
 800400e:	b25b      	sxtb	r3, r3
 8004010:	4313      	orrs	r3, r2
 8004012:	b25b      	sxtb	r3, r3
 8004014:	b2da      	uxtb	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	701a      	strb	r2, [r3, #0]
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b002      	add	sp, #8
 8004020:	bd80      	pop	{r7, pc}

08004022 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b25b      	sxtb	r3, r3
 8004032:	221f      	movs	r2, #31
 8004034:	4013      	ands	r3, r2
 8004036:	b25a      	sxtb	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	785b      	ldrb	r3, [r3, #1]
 800403c:	015b      	lsls	r3, r3, #5
 800403e:	b25b      	sxtb	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	b25b      	sxtb	r3, r3
 8004044:	b2da      	uxtb	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	701a      	strb	r2, [r3, #0]
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}

08004052 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2207      	movs	r2, #7
 8004062:	4013      	ands	r3, r2
 8004064:	b2da      	uxtb	r2, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3302      	adds	r3, #2
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	109b      	asrs	r3, r3, #2
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2207      	movs	r2, #7
 8004076:	4013      	ands	r3, r2
 8004078:	b2da      	uxtb	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3302      	adds	r3, #2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	b2da      	uxtb	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3303      	adds	r3, #3
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	109b      	asrs	r3, r3, #2
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2207      	movs	r2, #7
 8004098:	4013      	ands	r3, r2
 800409a:	b2da      	uxtb	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3303      	adds	r3, #3
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	711a      	strb	r2, [r3, #4]
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b002      	add	sp, #8
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80040b6:	b5b0      	push	{r4, r5, r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	0002      	movs	r2, r0
 80040be:	6039      	str	r1, [r7, #0]
 80040c0:	1dfb      	adds	r3, r7, #7
 80040c2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80040c4:	210e      	movs	r1, #14
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	22f4      	movs	r2, #244	; 0xf4
 80040ca:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	7818      	ldrb	r0, [r3, #0]
 80040d0:	250f      	movs	r5, #15
 80040d2:	197c      	adds	r4, r7, r5
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	220d      	movs	r2, #13
 80040d8:	18b9      	adds	r1, r7, r2
 80040da:	2201      	movs	r2, #1
 80040dc:	f7ff fb15 	bl	800370a <bme280_get_regs>
 80040e0:	0003      	movs	r3, r0
 80040e2:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 80040e4:	197b      	adds	r3, r7, r5
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b25b      	sxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d11c      	bne.n	8004128 <write_power_mode+0x72>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80040ee:	200d      	movs	r0, #13
 80040f0:	183b      	adds	r3, r7, r0
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	2203      	movs	r2, #3
 80040f8:	4393      	bics	r3, r2
 80040fa:	b25a      	sxtb	r2, r3
 80040fc:	1dfb      	adds	r3, r7, #7
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b25b      	sxtb	r3, r3
 8004102:	2103      	movs	r1, #3
 8004104:	400b      	ands	r3, r1
 8004106:	b25b      	sxtb	r3, r3
 8004108:	4313      	orrs	r3, r2
 800410a:	b25b      	sxtb	r3, r3
 800410c:	b2da      	uxtb	r2, r3
 800410e:	183b      	adds	r3, r7, r0
 8004110:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004112:	230f      	movs	r3, #15
 8004114:	18fc      	adds	r4, r7, r3
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1839      	adds	r1, r7, r0
 800411a:	220e      	movs	r2, #14
 800411c:	18b8      	adds	r0, r7, r2
 800411e:	2201      	movs	r2, #1
 8004120:	f7ff fb3d 	bl	800379e <bme280_set_regs>
 8004124:	0003      	movs	r3, r0
 8004126:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8004128:	230f      	movs	r3, #15
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b25b      	sxtb	r3, r3
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bdb0      	pop	{r4, r5, r7, pc}

08004138 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004138:	b5b0      	push	{r4, r5, r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004140:	2517      	movs	r5, #23
 8004142:	197c      	adds	r4, r7, r5
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2210      	movs	r2, #16
 8004148:	18b9      	adds	r1, r7, r2
 800414a:	2204      	movs	r2, #4
 800414c:	20f2      	movs	r0, #242	; 0xf2
 800414e:	f7ff fadc 	bl	800370a <bme280_get_regs>
 8004152:	0003      	movs	r3, r0
 8004154:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004156:	197b      	adds	r3, r7, r5
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b25b      	sxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11f      	bne.n	80041a0 <put_device_to_sleep+0x68>
    {
        parse_device_settings(reg_data, &settings);
 8004160:	2308      	movs	r3, #8
 8004162:	18fa      	adds	r2, r7, r3
 8004164:	2310      	movs	r3, #16
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	0011      	movs	r1, r2
 800416a:	0018      	movs	r0, r3
 800416c:	f7ff ff71 	bl	8004052 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8004170:	2517      	movs	r5, #23
 8004172:	197c      	adds	r4, r7, r5
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff fc8b 	bl	8003a92 <bme280_soft_reset>
 800417c:	0003      	movs	r3, r0
 800417e:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 8004180:	197b      	adds	r3, r7, r5
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	b25b      	sxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <put_device_to_sleep+0x68>
        {
            rslt = reload_device_settings(&settings, dev);
 800418a:	2317      	movs	r3, #23
 800418c:	18fc      	adds	r4, r7, r3
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	2308      	movs	r3, #8
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	0011      	movs	r1, r2
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f80a 	bl	80041b0 <reload_device_settings>
 800419c:	0003      	movs	r3, r0
 800419e:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 80041a0:	2317      	movs	r3, #23
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b25b      	sxtb	r3, r3
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b006      	add	sp, #24
 80041ae:	bdb0      	pop	{r4, r5, r7, pc}

080041b0 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80041b0:	b5b0      	push	{r4, r5, r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80041ba:	250f      	movs	r5, #15
 80041bc:	197c      	adds	r4, r7, r5
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0019      	movs	r1, r3
 80041c4:	201f      	movs	r0, #31
 80041c6:	f7ff fdc7 	bl	8003d58 <set_osr_settings>
 80041ca:	0003      	movs	r3, r0
 80041cc:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 80041ce:	197b      	adds	r3, r7, r5
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <reload_device_settings+0x3c>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80041d8:	230f      	movs	r3, #15
 80041da:	18fc      	adds	r4, r7, r3
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0019      	movs	r1, r3
 80041e2:	201f      	movs	r0, #31
 80041e4:	f7ff fe83 	bl	8003eee <set_filter_standby_settings>
 80041e8:	0003      	movs	r3, r0
 80041ea:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80041ec:	230f      	movs	r3, #15
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	b25b      	sxtb	r3, r3
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bdb0      	pop	{r4, r5, r7, pc}

080041fc <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <compensate_temperature+0xb8>)
 8004208:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <compensate_temperature+0xbc>)
 800420c:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	08db      	lsrs	r3, r3, #3
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	8812      	ldrh	r2, [r2, #0]
 8004218:	0052      	lsls	r2, r2, #1
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2202      	movs	r2, #2
 8004222:	5e9b      	ldrsh	r3, [r3, r2]
 8004224:	001a      	movs	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4353      	muls	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	da02      	bge.n	8004234 <compensate_temperature+0x38>
 800422e:	4a23      	ldr	r2, [pc, #140]	; (80042bc <compensate_temperature+0xc0>)
 8004230:	4694      	mov	ip, r2
 8004232:	4463      	add	r3, ip
 8004234:	12db      	asrs	r3, r3, #11
 8004236:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	8812      	ldrh	r2, [r2, #0]
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4353      	muls	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	da02      	bge.n	8004256 <compensate_temperature+0x5a>
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <compensate_temperature+0xc4>)
 8004252:	4694      	mov	ip, r2
 8004254:	4463      	add	r3, ip
 8004256:	131b      	asrs	r3, r3, #12
 8004258:	001a      	movs	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2104      	movs	r1, #4
 800425e:	5e5b      	ldrsh	r3, [r3, r1]
 8004260:	4353      	muls	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	da02      	bge.n	800426c <compensate_temperature+0x70>
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <compensate_temperature+0xc8>)
 8004268:	4694      	mov	ip, r2
 800426a:	4463      	add	r3, ip
 800426c:	139b      	asrs	r3, r3, #14
 800426e:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	18d2      	adds	r2, r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427e:	0013      	movs	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	189b      	adds	r3, r3, r2
 8004284:	3380      	adds	r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	da00      	bge.n	800428c <compensate_temperature+0x90>
 800428a:	33ff      	adds	r3, #255	; 0xff
 800428c:	121b      	asrs	r3, r3, #8
 800428e:	61fb      	str	r3, [r7, #28]
    if (temperature < temperature_min)
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	429a      	cmp	r2, r3
 8004296:	da02      	bge.n	800429e <compensate_temperature+0xa2>
    {
        temperature = temperature_min;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e005      	b.n	80042aa <compensate_temperature+0xae>
    }
    else if (temperature > temperature_max)
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	dd01      	ble.n	80042aa <compensate_temperature+0xae>
    {
        temperature = temperature_max;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	61fb      	str	r3, [r7, #28]
    }

    return temperature;
 80042aa:	69fb      	ldr	r3, [r7, #28]
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b008      	add	sp, #32
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	fffff060 	.word	0xfffff060
 80042b8:	00002134 	.word	0x00002134
 80042bc:	000007ff 	.word	0x000007ff
 80042c0:	00000fff 	.word	0x00000fff
 80042c4:	00003fff 	.word	0x00003fff

080042c8 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 80042d2:	4b75      	ldr	r3, [pc, #468]	; (80044a8 <compensate_pressure+0x1e0>)
 80042d4:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 80042d6:	4b75      	ldr	r3, [pc, #468]	; (80044ac <compensate_pressure+0x1e4>)
 80042d8:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da00      	bge.n	80042e4 <compensate_pressure+0x1c>
 80042e2:	3301      	adds	r3, #1
 80042e4:	105b      	asrs	r3, r3, #1
 80042e6:	4a72      	ldr	r2, [pc, #456]	; (80044b0 <compensate_pressure+0x1e8>)
 80042e8:	4694      	mov	ip, r2
 80042ea:	4463      	add	r3, ip
 80042ec:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	da00      	bge.n	80042f6 <compensate_pressure+0x2e>
 80042f4:	3303      	adds	r3, #3
 80042f6:	109b      	asrs	r3, r3, #2
 80042f8:	001a      	movs	r2, r3
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da00      	bge.n	8004302 <compensate_pressure+0x3a>
 8004300:	3303      	adds	r3, #3
 8004302:	109b      	asrs	r3, r3, #2
 8004304:	4353      	muls	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	da02      	bge.n	8004310 <compensate_pressure+0x48>
 800430a:	4a6a      	ldr	r2, [pc, #424]	; (80044b4 <compensate_pressure+0x1ec>)
 800430c:	4694      	mov	ip, r2
 800430e:	4463      	add	r3, ip
 8004310:	12db      	asrs	r3, r3, #11
 8004312:	001a      	movs	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2110      	movs	r1, #16
 8004318:	5e5b      	ldrsh	r3, [r3, r1]
 800431a:	4353      	muls	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	220e      	movs	r2, #14
 8004322:	5e9b      	ldrsh	r3, [r3, r2]
 8004324:	001a      	movs	r2, r3
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4353      	muls	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	da00      	bge.n	800433a <compensate_pressure+0x72>
 8004338:	3303      	adds	r3, #3
 800433a:	109b      	asrs	r3, r3, #2
 800433c:	001a      	movs	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	210c      	movs	r1, #12
 8004342:	5e5b      	ldrsh	r3, [r3, r1]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	18d3      	adds	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	220a      	movs	r2, #10
 800434e:	5e9b      	ldrsh	r3, [r3, r2]
 8004350:	001a      	movs	r2, r3
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	da00      	bge.n	800435a <compensate_pressure+0x92>
 8004358:	3303      	adds	r3, #3
 800435a:	109b      	asrs	r3, r3, #2
 800435c:	0019      	movs	r1, r3
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da00      	bge.n	8004366 <compensate_pressure+0x9e>
 8004364:	3303      	adds	r3, #3
 8004366:	109b      	asrs	r3, r3, #2
 8004368:	434b      	muls	r3, r1
 800436a:	2b00      	cmp	r3, #0
 800436c:	da02      	bge.n	8004374 <compensate_pressure+0xac>
 800436e:	4952      	ldr	r1, [pc, #328]	; (80044b8 <compensate_pressure+0x1f0>)
 8004370:	468c      	mov	ip, r1
 8004372:	4463      	add	r3, ip
 8004374:	135b      	asrs	r3, r3, #13
 8004376:	4353      	muls	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	da00      	bge.n	800437e <compensate_pressure+0xb6>
 800437c:	3307      	adds	r3, #7
 800437e:	10db      	asrs	r3, r3, #3
 8004380:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2208      	movs	r2, #8
 8004386:	5e9b      	ldrsh	r3, [r3, r2]
 8004388:	001a      	movs	r2, r3
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4353      	muls	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	da00      	bge.n	8004394 <compensate_pressure+0xcc>
 8004392:	3301      	adds	r3, #1
 8004394:	105b      	asrs	r3, r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da02      	bge.n	80043a8 <compensate_pressure+0xe0>
 80043a2:	4a46      	ldr	r2, [pc, #280]	; (80044bc <compensate_pressure+0x1f4>)
 80043a4:	4694      	mov	ip, r2
 80043a6:	4463      	add	r3, ip
 80043a8:	149b      	asrs	r3, r3, #18
 80043aa:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	0212      	lsls	r2, r2, #8
 80043b2:	4694      	mov	ip, r2
 80043b4:	4463      	add	r3, ip
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	88d2      	ldrh	r2, [r2, #6]
 80043ba:	4353      	muls	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da02      	bge.n	80043c6 <compensate_pressure+0xfe>
 80043c0:	4a3f      	ldr	r2, [pc, #252]	; (80044c0 <compensate_pressure+0x1f8>)
 80043c2:	4694      	mov	ip, r2
 80043c4:	4463      	add	r3, ip
 80043c6:	13db      	asrs	r3, r3, #15
 80043c8:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d064      	beq.n	800449a <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2280      	movs	r2, #128	; 0x80
 80043d6:	0352      	lsls	r2, r2, #13
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da02      	bge.n	80043e8 <compensate_pressure+0x120>
 80043e2:	4a38      	ldr	r2, [pc, #224]	; (80044c4 <compensate_pressure+0x1fc>)
 80043e4:	4694      	mov	ip, r2
 80043e6:	4463      	add	r3, ip
 80043e8:	131b      	asrs	r3, r3, #12
 80043ea:	001a      	movs	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	4a35      	ldr	r2, [pc, #212]	; (80044c8 <compensate_pressure+0x200>)
 80043f2:	4353      	muls	r3, r2
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < 0x80000000)
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	db09      	blt.n	8004410 <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	0011      	movs	r1, r2
 8004404:	0018      	movs	r0, r3
 8004406:	f7fb fe87 	bl	8000118 <__udivsi3>
 800440a:	0003      	movs	r3, r0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	e007      	b.n	8004420 <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	0019      	movs	r1, r3
 8004414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004416:	f7fb fe7f 	bl	8000118 <__udivsi3>
 800441a:	0003      	movs	r3, r0
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2216      	movs	r2, #22
 8004424:	5e9b      	ldrsh	r3, [r3, r2]
 8004426:	0019      	movs	r1, r3
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	08db      	lsrs	r3, r3, #3
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	08d2      	lsrs	r2, r2, #3
 8004430:	4353      	muls	r3, r2
 8004432:	0b5b      	lsrs	r3, r3, #13
 8004434:	434b      	muls	r3, r1
 8004436:	2b00      	cmp	r3, #0
 8004438:	da02      	bge.n	8004440 <compensate_pressure+0x178>
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <compensate_pressure+0x1fc>)
 800443c:	4694      	mov	ip, r2
 800443e:	4463      	add	r3, ip
 8004440:	131b      	asrs	r3, r3, #12
 8004442:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	001a      	movs	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2114      	movs	r1, #20
 800444e:	5e5b      	ldrsh	r3, [r3, r1]
 8004450:	4353      	muls	r3, r2
 8004452:	2b00      	cmp	r3, #0
 8004454:	da02      	bge.n	800445c <compensate_pressure+0x194>
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <compensate_pressure+0x1f0>)
 8004458:	4694      	mov	ip, r2
 800445a:	4463      	add	r3, ip
 800445c:	135b      	asrs	r3, r3, #13
 800445e:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	18d3      	adds	r3, r2, r3
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	2112      	movs	r1, #18
 800446a:	5e52      	ldrsh	r2, [r2, r1]
 800446c:	189b      	adds	r3, r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	da00      	bge.n	8004474 <compensate_pressure+0x1ac>
 8004472:	330f      	adds	r3, #15
 8004474:	111b      	asrs	r3, r3, #4
 8004476:	001a      	movs	r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	18d3      	adds	r3, r2, r3
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
        if (pressure < pressure_min)
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	429a      	cmp	r2, r3
 8004484:	d202      	bcs.n	800448c <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	e008      	b.n	800449e <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d904      	bls.n	800449e <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
 8004498:	e001      	b.n	800449e <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return pressure;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b00a      	add	sp, #40	; 0x28
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	00007530 	.word	0x00007530
 80044ac:	0001adb0 	.word	0x0001adb0
 80044b0:	ffff0600 	.word	0xffff0600
 80044b4:	000007ff 	.word	0x000007ff
 80044b8:	00001fff 	.word	0x00001fff
 80044bc:	0003ffff 	.word	0x0003ffff
 80044c0:	00007fff 	.word	0x00007fff
 80044c4:	00000fff 	.word	0x00000fff
 80044c8:	00000c35 	.word	0x00000c35

080044cc <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	; 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 80044d6:	23c8      	movs	r3, #200	; 0xc8
 80044d8:	025b      	lsls	r3, r3, #9
 80044da:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	4a53      	ldr	r2, [pc, #332]	; (8004630 <compensate_humidity+0x164>)
 80044e2:	4694      	mov	ip, r2
 80044e4:	4463      	add	r3, ip
 80044e6:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	039b      	lsls	r3, r3, #14
 80044ee:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	221e      	movs	r2, #30
 80044f4:	5e9b      	ldrsh	r3, [r3, r2]
 80044f6:	051b      	lsls	r3, r3, #20
 80044f8:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_H5) * var1;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2220      	movs	r2, #32
 80044fe:	5e9b      	ldrsh	r3, [r3, r2]
 8004500:	001a      	movs	r2, r3
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4353      	muls	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad2      	subs	r2, r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	01d2      	lsls	r2, r2, #7
 8004516:	4694      	mov	ip, r2
 8004518:	4463      	add	r3, ip
 800451a:	2b00      	cmp	r3, #0
 800451c:	da02      	bge.n	8004524 <compensate_humidity+0x58>
 800451e:	4a45      	ldr	r2, [pc, #276]	; (8004634 <compensate_humidity+0x168>)
 8004520:	4694      	mov	ip, r2
 8004522:	4463      	add	r3, ip
 8004524:	13db      	asrs	r3, r3, #15
 8004526:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2222      	movs	r2, #34	; 0x22
 800452c:	569b      	ldrsb	r3, [r3, r2]
 800452e:	001a      	movs	r2, r3
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4353      	muls	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	da02      	bge.n	800453e <compensate_humidity+0x72>
 8004538:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <compensate_humidity+0x16c>)
 800453a:	4694      	mov	ip, r2
 800453c:	4463      	add	r3, ip
 800453e:	129b      	asrs	r3, r3, #10
 8004540:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	7f1b      	ldrb	r3, [r3, #28]
 8004546:	001a      	movs	r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4353      	muls	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	da02      	bge.n	8004556 <compensate_humidity+0x8a>
 8004550:	4a3a      	ldr	r2, [pc, #232]	; (800463c <compensate_humidity+0x170>)
 8004552:	4694      	mov	ip, r2
 8004554:	4463      	add	r3, ip
 8004556:	12db      	asrs	r3, r3, #11
 8004558:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2280      	movs	r2, #128	; 0x80
 800455e:	0212      	lsls	r2, r2, #8
 8004560:	4694      	mov	ip, r2
 8004562:	4463      	add	r3, ip
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4353      	muls	r3, r2
 8004568:	2b00      	cmp	r3, #0
 800456a:	da02      	bge.n	8004572 <compensate_humidity+0xa6>
 800456c:	4a32      	ldr	r2, [pc, #200]	; (8004638 <compensate_humidity+0x16c>)
 800456e:	4694      	mov	ip, r2
 8004570:	4463      	add	r3, ip
 8004572:	129b      	asrs	r3, r3, #10
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	0392      	lsls	r2, r2, #14
 8004578:	4694      	mov	ip, r2
 800457a:	4463      	add	r3, ip
 800457c:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	221a      	movs	r2, #26
 8004582:	5e9b      	ldrsh	r3, [r3, r2]
 8004584:	001a      	movs	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4353      	muls	r3, r2
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	0192      	lsls	r2, r2, #6
 800458e:	4694      	mov	ip, r2
 8004590:	4463      	add	r3, ip
 8004592:	2b00      	cmp	r3, #0
 8004594:	da02      	bge.n	800459c <compensate_humidity+0xd0>
 8004596:	4a2a      	ldr	r2, [pc, #168]	; (8004640 <compensate_humidity+0x174>)
 8004598:	4694      	mov	ip, r2
 800459a:	4463      	add	r3, ip
 800459c:	139b      	asrs	r3, r3, #14
 800459e:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4353      	muls	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da02      	bge.n	80045b4 <compensate_humidity+0xe8>
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <compensate_humidity+0x168>)
 80045b0:	4694      	mov	ip, r2
 80045b2:	4463      	add	r3, ip
 80045b4:	13db      	asrs	r3, r3, #15
 80045b6:	001a      	movs	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da02      	bge.n	80045c4 <compensate_humidity+0xf8>
 80045be:	491d      	ldr	r1, [pc, #116]	; (8004634 <compensate_humidity+0x168>)
 80045c0:	468c      	mov	ip, r1
 80045c2:	4463      	add	r3, ip
 80045c4:	13db      	asrs	r3, r3, #15
 80045c6:	4353      	muls	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da00      	bge.n	80045ce <compensate_humidity+0x102>
 80045cc:	337f      	adds	r3, #127	; 0x7f
 80045ce:	11db      	asrs	r3, r3, #7
 80045d0:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	7e1b      	ldrb	r3, [r3, #24]
 80045d6:	001a      	movs	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4353      	muls	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da00      	bge.n	80045e2 <compensate_humidity+0x116>
 80045e0:	330f      	adds	r3, #15
 80045e2:	111b      	asrs	r3, r3, #4
 80045e4:	425b      	negs	r3, r3
 80045e6:	001a      	movs	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da00      	bge.n	80045f6 <compensate_humidity+0x12a>
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	22c8      	movs	r2, #200	; 0xc8
 80045fc:	0552      	lsls	r2, r2, #21
 80045fe:	4293      	cmp	r3, r2
 8004600:	dd01      	ble.n	8004606 <compensate_humidity+0x13a>
 8004602:	23c8      	movs	r3, #200	; 0xc8
 8004604:	055b      	lsls	r3, r3, #21
 8004606:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	da02      	bge.n	8004614 <compensate_humidity+0x148>
 800460e:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <compensate_humidity+0x178>)
 8004610:	4694      	mov	ip, r2
 8004612:	4463      	add	r3, ip
 8004614:	131b      	asrs	r3, r3, #12
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
    if (humidity > humidity_max)
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	429a      	cmp	r2, r3
 800461e:	d901      	bls.n	8004624 <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return humidity;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b00a      	add	sp, #40	; 0x28
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	fffed400 	.word	0xfffed400
 8004634:	00007fff 	.word	0x00007fff
 8004638:	000003ff 	.word	0x000003ff
 800463c:	000007ff 	.word	0x000007ff
 8004640:	00003fff 	.word	0x00003fff
 8004644:	00000fff 	.word	0x00000fff

08004648 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464a:	b08b      	sub	sp, #44	; 0x2c
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004650:	2526      	movs	r5, #38	; 0x26
 8004652:	197b      	adds	r3, r7, r5
 8004654:	2288      	movs	r2, #136	; 0x88
 8004656:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8004658:	260c      	movs	r6, #12
 800465a:	19bb      	adds	r3, r7, r6
 800465c:	0018      	movs	r0, r3
 800465e:	231a      	movs	r3, #26
 8004660:	001a      	movs	r2, r3
 8004662:	2100      	movs	r1, #0
 8004664:	f004 fb2d 	bl	8008cc2 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004668:	2327      	movs	r3, #39	; 0x27
 800466a:	18fc      	adds	r4, r7, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	19b9      	adds	r1, r7, r6
 8004670:	197b      	adds	r3, r7, r5
 8004672:	7818      	ldrb	r0, [r3, #0]
 8004674:	0013      	movs	r3, r2
 8004676:	221a      	movs	r2, #26
 8004678:	f7ff f847 	bl	800370a <bme280_get_regs>
 800467c:	0003      	movs	r3, r0
 800467e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME280_OK)
 8004680:	2327      	movs	r3, #39	; 0x27
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b25b      	sxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d122      	bne.n	80046d2 <get_calib_data+0x8a>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	250c      	movs	r5, #12
 8004690:	197b      	adds	r3, r7, r5
 8004692:	0011      	movs	r1, r2
 8004694:	0018      	movs	r0, r3
 8004696:	f000 f85b 	bl	8004750 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800469a:	2026      	movs	r0, #38	; 0x26
 800469c:	183b      	adds	r3, r7, r0
 800469e:	22e1      	movs	r2, #225	; 0xe1
 80046a0:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80046a2:	2627      	movs	r6, #39	; 0x27
 80046a4:	19bc      	adds	r4, r7, r6
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	1979      	adds	r1, r7, r5
 80046aa:	183b      	adds	r3, r7, r0
 80046ac:	7818      	ldrb	r0, [r3, #0]
 80046ae:	0013      	movs	r3, r2
 80046b0:	2207      	movs	r2, #7
 80046b2:	f7ff f82a 	bl	800370a <bme280_get_regs>
 80046b6:	0003      	movs	r3, r0
 80046b8:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80046ba:	19bb      	adds	r3, r7, r6
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <get_calib_data+0x8a>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	230c      	movs	r3, #12
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	0011      	movs	r1, r2
 80046cc:	0018      	movs	r0, r3
 80046ce:	f000 f8ec 	bl	80048aa <parse_humidity_calib_data>
        }
    }

    return rslt;
 80046d2:	2327      	movs	r3, #39	; 0x27
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b25b      	sxtb	r3, r3
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b00b      	add	sp, #44	; 0x2c
 80046e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046e2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b086      	sub	sp, #24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	001a      	movs	r2, r3
 80046f0:	1cfb      	adds	r3, r7, #3
 80046f2:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 80046f4:	2317      	movs	r3, #23
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e01d      	b.n	800473a <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80046fe:	2017      	movs	r0, #23
 8004700:	183b      	adds	r3, r7, r0
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	18d2      	adds	r2, r2, r3
 8004708:	183b      	adds	r3, r7, r0
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	3b01      	subs	r3, #1
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	18cb      	adds	r3, r1, r3
 8004714:	7812      	ldrb	r2, [r2, #0]
 8004716:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8004718:	183b      	adds	r3, r7, r0
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	18d2      	adds	r2, r2, r3
 8004720:	183b      	adds	r3, r7, r0
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	0019      	movs	r1, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	185b      	adds	r3, r3, r1
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8004730:	183b      	adds	r3, r7, r0
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	183b      	adds	r3, r7, r0
 8004736:	3201      	adds	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	2317      	movs	r3, #23
 800473c:	18fa      	adds	r2, r7, r3
 800473e:	1cfb      	adds	r3, r7, #3
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d3da      	bcc.n	80046fe <interleave_reg_addr+0x1c>
    }
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b006      	add	sp, #24
 800474e:	bd80      	pop	{r7, pc}

08004750 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	3310      	adds	r3, #16
 800475e:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3301      	adds	r3, #1
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	b21a      	sxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b21b      	sxth	r3, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	b21b      	sxth	r3, r3
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3303      	adds	r3, #3
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	b21a      	sxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3302      	adds	r3, #2
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	b21b      	sxth	r3, r3
 800478c:	4313      	orrs	r3, r2
 800478e:	b21a      	sxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3305      	adds	r3, #5
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	b21a      	sxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	4313      	orrs	r3, r2
 80047a8:	b21a      	sxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3307      	adds	r3, #7
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	b21a      	sxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3306      	adds	r3, #6
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b21b      	sxth	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b21b      	sxth	r3, r3
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3309      	adds	r3, #9
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	b21a      	sxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3308      	adds	r3, #8
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	b21b      	sxth	r3, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	b21a      	sxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	330b      	adds	r3, #11
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	b21a      	sxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	330a      	adds	r3, #10
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b21b      	sxth	r3, r3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	b21a      	sxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	330d      	adds	r3, #13
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	b21a      	sxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	330c      	adds	r3, #12
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b21b      	sxth	r3, r3
 8004810:	4313      	orrs	r3, r2
 8004812:	b21a      	sxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	330f      	adds	r3, #15
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	b21a      	sxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	330e      	adds	r3, #14
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b21b      	sxth	r3, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	b21a      	sxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3311      	adds	r3, #17
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	b21a      	sxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3310      	adds	r3, #16
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	b21b      	sxth	r3, r3
 8004844:	4313      	orrs	r3, r2
 8004846:	b21a      	sxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3313      	adds	r3, #19
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	b21a      	sxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3312      	adds	r3, #18
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	b21b      	sxth	r3, r3
 800485e:	4313      	orrs	r3, r2
 8004860:	b21a      	sxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3315      	adds	r3, #21
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	b21a      	sxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3314      	adds	r3, #20
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b21b      	sxth	r3, r3
 8004878:	4313      	orrs	r3, r2
 800487a:	b21a      	sxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3317      	adds	r3, #23
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	b21a      	sxth	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3316      	adds	r3, #22
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b21b      	sxth	r3, r3
 8004892:	4313      	orrs	r3, r2
 8004894:	b21a      	sxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	7e5a      	ldrb	r2, [r3, #25]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	761a      	strb	r2, [r3, #24]
}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b004      	add	sp, #16
 80048a8:	bd80      	pop	{r7, pc}

080048aa <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80048aa:	b590      	push	{r4, r7, lr}
 80048ac:	b087      	sub	sp, #28
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	3310      	adds	r3, #16
 80048b8:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3301      	adds	r3, #1
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	b21a      	sxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	789a      	ldrb	r2, [r3, #2]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3303      	adds	r3, #3
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b25b      	sxtb	r3, r3
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	2012      	movs	r0, #18
 80048ea:	183b      	adds	r3, r7, r0
 80048ec:	801a      	strh	r2, [r3, #0]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b21a      	sxth	r2, r3
 80048f6:	2410      	movs	r4, #16
 80048f8:	193b      	adds	r3, r7, r4
 80048fa:	210f      	movs	r1, #15
 80048fc:	400a      	ands	r2, r1
 80048fe:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004900:	183a      	adds	r2, r7, r0
 8004902:	193b      	adds	r3, r7, r4
 8004904:	8812      	ldrh	r2, [r2, #0]
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	4313      	orrs	r3, r2
 800490a:	b21a      	sxth	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3305      	adds	r3, #5
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	b25b      	sxtb	r3, r3
 8004918:	b29b      	uxth	r3, r3
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	b29a      	uxth	r2, r3
 800491e:	210e      	movs	r1, #14
 8004920:	187b      	adds	r3, r7, r1
 8004922:	801a      	strh	r2, [r3, #0]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	b2da      	uxtb	r2, r3
 800492e:	200c      	movs	r0, #12
 8004930:	183b      	adds	r3, r7, r0
 8004932:	801a      	strh	r2, [r3, #0]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004934:	187a      	adds	r2, r7, r1
 8004936:	183b      	adds	r3, r7, r0
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	b21a      	sxth	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3306      	adds	r3, #6
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b259      	sxtb	r1, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2222      	movs	r2, #34	; 0x22
 8004950:	5499      	strb	r1, [r3, r2]
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b007      	add	sp, #28
 8004958:	bd90      	pop	{r4, r7, pc}

0800495a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	0002      	movs	r2, r0
 8004962:	1dfb      	adds	r3, r7, #7
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	1dbb      	adds	r3, r7, #6
 8004968:	1c0a      	adds	r2, r1, #0
 800496a:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 800496c:	230f      	movs	r3, #15
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8004974:	1dfb      	adds	r3, r7, #7
 8004976:	1dba      	adds	r2, r7, #6
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	7812      	ldrb	r2, [r2, #0]
 800497c:	4013      	ands	r3, r2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <are_settings_changed+0x34>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004984:	230f      	movs	r3, #15
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2201      	movs	r2, #1
 800498a:	701a      	strb	r2, [r3, #0]
 800498c:	e003      	b.n	8004996 <are_settings_changed+0x3c>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800498e:	230f      	movs	r3, #15
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8004996:	230f      	movs	r3, #15
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	781b      	ldrb	r3, [r3, #0]
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <null_ptr_check+0x26>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <null_ptr_check+0x26>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <null_ptr_check+0x26>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80049ca:	230f      	movs	r3, #15
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e003      	b.n	80049dc <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80049d4:	230f      	movs	r3, #15
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80049dc:	230f      	movs	r3, #15
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b25b      	sxtb	r3, r3
}
 80049e4:	0018      	movs	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80049f2:	1dfb      	adds	r3, r7, #7
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_Init+0x3c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <HAL_Init+0x3c>)
 80049fe:	2140      	movs	r1, #64	; 0x40
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a04:	2000      	movs	r0, #0
 8004a06:	f000 f811 	bl	8004a2c <HAL_InitTick>
 8004a0a:	1e03      	subs	r3, r0, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004a0e:	1dfb      	adds	r3, r7, #7
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e001      	b.n	8004a1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a16:	f7fe f9dd 	bl	8002dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a1a:	1dfb      	adds	r3, r7, #7
 8004a1c:	781b      	ldrb	r3, [r3, #0]
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	40022000 	.word	0x40022000

08004a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a34:	230f      	movs	r3, #15
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_InitTick+0x50>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	23fa      	movs	r3, #250	; 0xfa
 8004a42:	0099      	lsls	r1, r3, #2
 8004a44:	0010      	movs	r0, r2
 8004a46:	f7fb fb67 	bl	8000118 <__udivsi3>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 f918 	bl	8004c82 <HAL_SYSTICK_Config>
 8004a52:	1e03      	subs	r3, r0, #0
 8004a54:	d004      	beq.n	8004a60 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8004a56:	230f      	movs	r3, #15
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e006      	b.n	8004a6e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	2301      	movs	r3, #1
 8004a64:	425b      	negs	r3, r3
 8004a66:	2200      	movs	r2, #0
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 f8e5 	bl	8004c38 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8004a6e:	230f      	movs	r3, #15
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	781b      	ldrb	r3, [r3, #0]
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000008 	.word	0x20000008

08004a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  uwTick++;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_IncTick+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <HAL_IncTick+0x14>)
 8004a8c:	601a      	str	r2, [r3, #0]
}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	2000024c 	.word	0x2000024c

08004a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a9c:	4b02      	ldr	r3, [pc, #8]	; (8004aa8 <HAL_GetTick+0x10>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	2000024c 	.word	0x2000024c

08004aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ab4:	f7ff fff0 	bl	8004a98 <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	d002      	beq.n	8004acc <HAL_Delay+0x20>
  {
    wait++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	f7ff ffe3 	bl	8004a98 <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d8f7      	bhi.n	8004ace <HAL_Delay+0x22>
  {
  }
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b004      	add	sp, #16
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	0002      	movs	r2, r0
 8004af0:	1dfb      	adds	r3, r7, #7
 8004af2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	001a      	movs	r2, r3
 8004afa:	231f      	movs	r3, #31
 8004afc:	401a      	ands	r2, r3
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <NVIC_EnableIRQ+0x28>)
 8004b00:	2101      	movs	r1, #1
 8004b02:	4091      	lsls	r1, r2
 8004b04:	000a      	movs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	e000e100 	.word	0xe000e100

08004b14 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	0002      	movs	r2, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	1dfb      	adds	r3, r7, #7
 8004b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004b22:	1dfb      	adds	r3, r7, #7
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b7f      	cmp	r3, #127	; 0x7f
 8004b28:	d932      	bls.n	8004b90 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b2a:	4a2f      	ldr	r2, [pc, #188]	; (8004be8 <NVIC_SetPriority+0xd4>)
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	0019      	movs	r1, r3
 8004b32:	230f      	movs	r3, #15
 8004b34:	400b      	ands	r3, r1
 8004b36:	3b08      	subs	r3, #8
 8004b38:	089b      	lsrs	r3, r3, #2
 8004b3a:	3306      	adds	r3, #6
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	18d3      	adds	r3, r2, r3
 8004b40:	3304      	adds	r3, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1dfa      	adds	r2, r7, #7
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	0011      	movs	r1, r2
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	00d2      	lsls	r2, r2, #3
 8004b50:	21ff      	movs	r1, #255	; 0xff
 8004b52:	4091      	lsls	r1, r2
 8004b54:	000a      	movs	r2, r1
 8004b56:	43d2      	mvns	r2, r2
 8004b58:	401a      	ands	r2, r3
 8004b5a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	019b      	lsls	r3, r3, #6
 8004b60:	22ff      	movs	r2, #255	; 0xff
 8004b62:	401a      	ands	r2, r3
 8004b64:	1dfb      	adds	r3, r7, #7
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	4003      	ands	r3, r0
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b72:	481d      	ldr	r0, [pc, #116]	; (8004be8 <NVIC_SetPriority+0xd4>)
 8004b74:	1dfb      	adds	r3, r7, #7
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	001c      	movs	r4, r3
 8004b7a:	230f      	movs	r3, #15
 8004b7c:	4023      	ands	r3, r4
 8004b7e:	3b08      	subs	r3, #8
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	430a      	orrs	r2, r1
 8004b84:	3306      	adds	r3, #6
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	18c3      	adds	r3, r0, r3
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b8e:	e027      	b.n	8004be0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <NVIC_SetPriority+0xd8>)
 8004b92:	1dfb      	adds	r3, r7, #7
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	33c0      	adds	r3, #192	; 0xc0
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	589b      	ldr	r3, [r3, r2]
 8004ba0:	1dfa      	adds	r2, r7, #7
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	0011      	movs	r1, r2
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	400a      	ands	r2, r1
 8004baa:	00d2      	lsls	r2, r2, #3
 8004bac:	21ff      	movs	r1, #255	; 0xff
 8004bae:	4091      	lsls	r1, r2
 8004bb0:	000a      	movs	r2, r1
 8004bb2:	43d2      	mvns	r2, r2
 8004bb4:	401a      	ands	r2, r3
 8004bb6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	019b      	lsls	r3, r3, #6
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	1dfb      	adds	r3, r7, #7
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	4003      	ands	r3, r0
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bce:	4807      	ldr	r0, [pc, #28]	; (8004bec <NVIC_SetPriority+0xd8>)
 8004bd0:	1dfb      	adds	r3, r7, #7
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	089b      	lsrs	r3, r3, #2
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	33c0      	adds	r3, #192	; 0xc0
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	501a      	str	r2, [r3, r0]
}
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b003      	add	sp, #12
 8004be6:	bd90      	pop	{r4, r7, pc}
 8004be8:	e000ed00 	.word	0xe000ed00
 8004bec:	e000e100 	.word	0xe000e100

08004bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <SysTick_Config+0x40>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c02:	2301      	movs	r3, #1
 8004c04:	e010      	b.n	8004c28 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <SysTick_Config+0x44>)
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c0e:	2301      	movs	r3, #1
 8004c10:	425b      	negs	r3, r3
 8004c12:	2103      	movs	r1, #3
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7ff ff7d 	bl	8004b14 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <SysTick_Config+0x44>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <SysTick_Config+0x44>)
 8004c22:	2207      	movs	r2, #7
 8004c24:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	00ffffff 	.word	0x00ffffff
 8004c34:	e000e010 	.word	0xe000e010

08004c38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	210f      	movs	r1, #15
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	1c02      	adds	r2, r0, #0
 8004c48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	187b      	adds	r3, r7, r1
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	0011      	movs	r1, r2
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff ff5d 	bl	8004b14 <NVIC_SetPriority>
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	0002      	movs	r2, r0
 8004c6a:	1dfb      	adds	r3, r7, #7
 8004c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c6e:	1dfb      	adds	r3, r7, #7
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7ff ff37 	bl	8004ae8 <NVIC_EnableIRQ>
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b002      	add	sp, #8
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff ffaf 	bl	8004bf0 <SysTick_Config>
 8004c92:	0003      	movs	r3, r0
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004cb2:	e155      	b.n	8004f60 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4091      	lsls	r1, r2
 8004cbe:	000a      	movs	r2, r1
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d100      	bne.n	8004ccc <HAL_GPIO_Init+0x30>
 8004cca:	e146      	b.n	8004f5a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x40>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b12      	cmp	r3, #18
 8004cda:	d123      	bne.n	8004d24 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	08da      	lsrs	r2, r3, #3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3208      	adds	r2, #8
 8004ce4:	0092      	lsls	r2, r2, #2
 8004ce6:	58d3      	ldr	r3, [r2, r3]
 8004ce8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2207      	movs	r2, #7
 8004cee:	4013      	ands	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	0013      	movs	r3, r2
 8004cf8:	43da      	mvns	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2107      	movs	r1, #7
 8004d08:	400b      	ands	r3, r1
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	0013      	movs	r3, r2
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	08da      	lsrs	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3208      	adds	r2, #8
 8004d1e:	0092      	lsls	r2, r2, #2
 8004d20:	6939      	ldr	r1, [r7, #16]
 8004d22:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d00b      	beq.n	8004d44 <HAL_GPIO_Init+0xa8>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d007      	beq.n	8004d44 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d38:	2b11      	cmp	r3, #17
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b12      	cmp	r3, #18
 8004d42:	d130      	bne.n	8004da6 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	2203      	movs	r2, #3
 8004d50:	409a      	lsls	r2, r3
 8004d52:	0013      	movs	r3, r2
 8004d54:	43da      	mvns	r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	409a      	lsls	r2, r3
 8004d66:	0013      	movs	r3, r2
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	0013      	movs	r3, r2
 8004d82:	43da      	mvns	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	2201      	movs	r2, #1
 8004d92:	401a      	ands	r2, r3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	409a      	lsls	r2, r3
 8004d98:	0013      	movs	r3, r2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	2203      	movs	r2, #3
 8004db2:	409a      	lsls	r2, r3
 8004db4:	0013      	movs	r3, r2
 8004db6:	43da      	mvns	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	0013      	movs	r3, r2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	2203      	movs	r2, #3
 8004de6:	409a      	lsls	r2, r3
 8004de8:	0013      	movs	r3, r2
 8004dea:	43da      	mvns	r2, r3
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4013      	ands	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	0013      	movs	r3, r2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	055b      	lsls	r3, r3, #21
 8004e12:	4013      	ands	r3, r2
 8004e14:	d100      	bne.n	8004e18 <HAL_GPIO_Init+0x17c>
 8004e16:	e0a0      	b.n	8004f5a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e18:	4b57      	ldr	r3, [pc, #348]	; (8004f78 <HAL_GPIO_Init+0x2dc>)
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1c:	4b56      	ldr	r3, [pc, #344]	; (8004f78 <HAL_GPIO_Init+0x2dc>)
 8004e1e:	2101      	movs	r1, #1
 8004e20:	430a      	orrs	r2, r1
 8004e22:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8004e24:	4a55      	ldr	r2, [pc, #340]	; (8004f7c <HAL_GPIO_Init+0x2e0>)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	089b      	lsrs	r3, r3, #2
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	589b      	ldr	r3, [r3, r2]
 8004e30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2203      	movs	r2, #3
 8004e36:	4013      	ands	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	220f      	movs	r2, #15
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	0013      	movs	r3, r2
 8004e40:	43da      	mvns	r2, r3
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	23a0      	movs	r3, #160	; 0xa0
 8004e4c:	05db      	lsls	r3, r3, #23
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d01f      	beq.n	8004e92 <HAL_GPIO_Init+0x1f6>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4a      	ldr	r2, [pc, #296]	; (8004f80 <HAL_GPIO_Init+0x2e4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d019      	beq.n	8004e8e <HAL_GPIO_Init+0x1f2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a49      	ldr	r2, [pc, #292]	; (8004f84 <HAL_GPIO_Init+0x2e8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_GPIO_Init+0x1ee>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a48      	ldr	r2, [pc, #288]	; (8004f88 <HAL_GPIO_Init+0x2ec>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00d      	beq.n	8004e86 <HAL_GPIO_Init+0x1ea>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a47      	ldr	r2, [pc, #284]	; (8004f8c <HAL_GPIO_Init+0x2f0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <HAL_GPIO_Init+0x1e6>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a46      	ldr	r2, [pc, #280]	; (8004f90 <HAL_GPIO_Init+0x2f4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_GPIO_Init+0x1e2>
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	e00a      	b.n	8004e94 <HAL_GPIO_Init+0x1f8>
 8004e7e:	2306      	movs	r3, #6
 8004e80:	e008      	b.n	8004e94 <HAL_GPIO_Init+0x1f8>
 8004e82:	2304      	movs	r3, #4
 8004e84:	e006      	b.n	8004e94 <HAL_GPIO_Init+0x1f8>
 8004e86:	2303      	movs	r3, #3
 8004e88:	e004      	b.n	8004e94 <HAL_GPIO_Init+0x1f8>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e002      	b.n	8004e94 <HAL_GPIO_Init+0x1f8>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_GPIO_Init+0x1f8>
 8004e92:	2300      	movs	r3, #0
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	2103      	movs	r1, #3
 8004e98:	400a      	ands	r2, r1
 8004e9a:	0092      	lsls	r2, r2, #2
 8004e9c:	4093      	lsls	r3, r2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ea4:	4935      	ldr	r1, [pc, #212]	; (8004f7c <HAL_GPIO_Init+0x2e0>)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	089b      	lsrs	r3, r3, #2
 8004eaa:	3302      	adds	r3, #2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eb2:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004edc:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	43da      	mvns	r2, r3
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	029b      	lsls	r3, r3, #10
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f00:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f06:	4b23      	ldr	r3, [pc, #140]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4013      	ands	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	035b      	lsls	r3, r3, #13
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004f30:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	039b      	lsls	r3, r3, #14
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_GPIO_Init+0x2f8>)
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	40da      	lsrs	r2, r3
 8004f68:	1e13      	subs	r3, r2, #0
 8004f6a:	d000      	beq.n	8004f6e <HAL_GPIO_Init+0x2d2>
 8004f6c:	e6a2      	b.n	8004cb4 <HAL_GPIO_Init+0x18>
  }
}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b006      	add	sp, #24
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	50000400 	.word	0x50000400
 8004f84:	50000800 	.word	0x50000800
 8004f88:	50000c00 	.word	0x50000c00
 8004f8c:	50001000 	.word	0x50001000
 8004f90:	50001c00 	.word	0x50001c00
 8004f94:	40010400 	.word	0x40010400

08004f98 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8004fae:	e0bc      	b.n	800512a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d100      	bne.n	8004fc4 <HAL_GPIO_DeInit+0x2c>
 8004fc2:	e0af      	b.n	8005124 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	2103      	movs	r1, #3
 8004fce:	4099      	lsls	r1, r3
 8004fd0:	000b      	movs	r3, r1
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	08da      	lsrs	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3208      	adds	r2, #8
 8004fe0:	0092      	lsls	r2, r2, #2
 8004fe2:	58d3      	ldr	r3, [r2, r3]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	2107      	movs	r1, #7
 8004fe8:	400a      	ands	r2, r1
 8004fea:	0092      	lsls	r2, r2, #2
 8004fec:	210f      	movs	r1, #15
 8004fee:	4091      	lsls	r1, r2
 8004ff0:	000a      	movs	r2, r1
 8004ff2:	43d1      	mvns	r1, r2
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	08d2      	lsrs	r2, r2, #3
 8004ff8:	4019      	ands	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	0052      	lsls	r2, r2, #1
 800500a:	2103      	movs	r1, #3
 800500c:	4091      	lsls	r1, r2
 800500e:	000a      	movs	r2, r1
 8005010:	43d2      	mvns	r2, r2
 8005012:	401a      	ands	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2101      	movs	r1, #1
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4091      	lsls	r1, r2
 8005022:	000a      	movs	r2, r1
 8005024:	43d2      	mvns	r2, r2
 8005026:	401a      	ands	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	0052      	lsls	r2, r2, #1
 8005034:	2103      	movs	r1, #3
 8005036:	4091      	lsls	r1, r2
 8005038:	000a      	movs	r2, r1
 800503a:	43d2      	mvns	r2, r2
 800503c:	401a      	ands	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005042:	4a3f      	ldr	r2, [pc, #252]	; (8005140 <HAL_GPIO_DeInit+0x1a8>)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	3302      	adds	r3, #2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	589b      	ldr	r3, [r3, r2]
 800504e:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2203      	movs	r2, #3
 8005054:	4013      	ands	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	220f      	movs	r2, #15
 800505a:	409a      	lsls	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4013      	ands	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	23a0      	movs	r3, #160	; 0xa0
 8005066:	05db      	lsls	r3, r3, #23
 8005068:	429a      	cmp	r2, r3
 800506a:	d01f      	beq.n	80050ac <HAL_GPIO_DeInit+0x114>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a35      	ldr	r2, [pc, #212]	; (8005144 <HAL_GPIO_DeInit+0x1ac>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d019      	beq.n	80050a8 <HAL_GPIO_DeInit+0x110>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a34      	ldr	r2, [pc, #208]	; (8005148 <HAL_GPIO_DeInit+0x1b0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_GPIO_DeInit+0x10c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a33      	ldr	r2, [pc, #204]	; (800514c <HAL_GPIO_DeInit+0x1b4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00d      	beq.n	80050a0 <HAL_GPIO_DeInit+0x108>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a32      	ldr	r2, [pc, #200]	; (8005150 <HAL_GPIO_DeInit+0x1b8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <HAL_GPIO_DeInit+0x104>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a31      	ldr	r2, [pc, #196]	; (8005154 <HAL_GPIO_DeInit+0x1bc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_GPIO_DeInit+0x100>
 8005094:	2305      	movs	r3, #5
 8005096:	e00a      	b.n	80050ae <HAL_GPIO_DeInit+0x116>
 8005098:	2306      	movs	r3, #6
 800509a:	e008      	b.n	80050ae <HAL_GPIO_DeInit+0x116>
 800509c:	2304      	movs	r3, #4
 800509e:	e006      	b.n	80050ae <HAL_GPIO_DeInit+0x116>
 80050a0:	2303      	movs	r3, #3
 80050a2:	e004      	b.n	80050ae <HAL_GPIO_DeInit+0x116>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e002      	b.n	80050ae <HAL_GPIO_DeInit+0x116>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_GPIO_DeInit+0x116>
 80050ac:	2300      	movs	r3, #0
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	2103      	movs	r1, #3
 80050b2:	400a      	ands	r2, r1
 80050b4:	0092      	lsls	r2, r2, #2
 80050b6:	4093      	lsls	r3, r2
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d132      	bne.n	8005124 <HAL_GPIO_DeInit+0x18c>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2203      	movs	r2, #3
 80050c2:	4013      	ands	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	220f      	movs	r2, #15
 80050c8:	409a      	lsls	r2, r3
 80050ca:	0013      	movs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050ce:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <HAL_GPIO_DeInit+0x1a8>)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	3302      	adds	r3, #2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	589a      	ldr	r2, [r3, r2]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	43d9      	mvns	r1, r3
 80050de:	4818      	ldr	r0, [pc, #96]	; (8005140 <HAL_GPIO_DeInit+0x1a8>)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	400a      	ands	r2, r1
 80050e6:	3302      	adds	r3, #2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050ec:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	43d9      	mvns	r1, r3
 80050f4:	4b18      	ldr	r3, [pc, #96]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 80050f6:	400a      	ands	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	43d9      	mvns	r1, r3
 8005102:	4b15      	ldr	r3, [pc, #84]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 8005104:	400a      	ands	r2, r1
 8005106:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005108:	4b13      	ldr	r3, [pc, #76]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43d9      	mvns	r1, r3
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 8005112:	400a      	ands	r2, r1
 8005114:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	43d9      	mvns	r1, r3
 800511e:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <HAL_GPIO_DeInit+0x1c0>)
 8005120:	400a      	ands	r2, r1
 8005122:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3301      	adds	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	40da      	lsrs	r2, r3
 8005130:	1e13      	subs	r3, r2, #0
 8005132:	d000      	beq.n	8005136 <HAL_GPIO_DeInit+0x19e>
 8005134:	e73c      	b.n	8004fb0 <HAL_GPIO_DeInit+0x18>
  }
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b006      	add	sp, #24
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	40010000 	.word	0x40010000
 8005144:	50000400 	.word	0x50000400
 8005148:	50000800 	.word	0x50000800
 800514c:	50000c00 	.word	0x50000c00
 8005150:	50001000 	.word	0x50001000
 8005154:	50001c00 	.word	0x50001c00
 8005158:	40010400 	.word	0x40010400

0800515c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	0008      	movs	r0, r1
 8005166:	0011      	movs	r1, r2
 8005168:	1cbb      	adds	r3, r7, #2
 800516a:	1c02      	adds	r2, r0, #0
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	1c7b      	adds	r3, r7, #1
 8005170:	1c0a      	adds	r2, r1, #0
 8005172:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005174:	1c7b      	adds	r3, r7, #1
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800517c:	1cbb      	adds	r3, r7, #2
 800517e:	881a      	ldrh	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005184:	e003      	b.n	800518e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005186:	1cbb      	adds	r3, r7, #2
 8005188:	881a      	ldrh	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b002      	add	sp, #8
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	000a      	movs	r2, r1
 80051a0:	1cbb      	adds	r3, r7, #2
 80051a2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	1cbb      	adds	r3, r7, #2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	405a      	eors	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b002      	add	sp, #8
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e082      	b.n	80052d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2241      	movs	r2, #65	; 0x41
 80051d2:	5c9b      	ldrb	r3, [r3, r2]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d107      	bne.n	80051ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2240      	movs	r2, #64	; 0x40
 80051de:	2100      	movs	r1, #0
 80051e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7fd fe17 	bl	8002e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2241      	movs	r2, #65	; 0x41
 80051ee:	2124      	movs	r1, #36	; 0x24
 80051f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2101      	movs	r1, #1
 80051fe:	438a      	bics	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4934      	ldr	r1, [pc, #208]	; (80052dc <HAL_I2C_Init+0x120>)
 800520c:	400a      	ands	r2, r1
 800520e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4931      	ldr	r1, [pc, #196]	; (80052e0 <HAL_I2C_Init+0x124>)
 800521c:	400a      	ands	r2, r1
 800521e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d108      	bne.n	800523a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2180      	movs	r1, #128	; 0x80
 8005232:	0209      	lsls	r1, r1, #8
 8005234:	430a      	orrs	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	e007      	b.n	800524a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2184      	movs	r1, #132	; 0x84
 8005244:	0209      	lsls	r1, r1, #8
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d104      	bne.n	800525c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	0112      	lsls	r2, r2, #4
 800525a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	491f      	ldr	r1, [pc, #124]	; (80052e4 <HAL_I2C_Init+0x128>)
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	491a      	ldr	r1, [pc, #104]	; (80052e0 <HAL_I2C_Init+0x124>)
 8005278:	400a      	ands	r2, r1
 800527a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	431a      	orrs	r2, r3
 8005286:	0011      	movs	r1, r2
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	021a      	lsls	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69d9      	ldr	r1, [r3, #28]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2101      	movs	r1, #1
 80052b2:	430a      	orrs	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2241      	movs	r2, #65	; 0x41
 80052c0:	2120      	movs	r1, #32
 80052c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2242      	movs	r2, #66	; 0x42
 80052ce:	2100      	movs	r1, #0
 80052d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	0018      	movs	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b002      	add	sp, #8
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	f0ffffff 	.word	0xf0ffffff
 80052e0:	ffff7fff 	.word	0xffff7fff
 80052e4:	02008000 	.word	0x02008000

080052e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e022      	b.n	8005340 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2241      	movs	r2, #65	; 0x41
 80052fe:	2124      	movs	r1, #36	; 0x24
 8005300:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	438a      	bics	r2, r1
 8005310:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f7fd fdc3 	bl	8002ea0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2241      	movs	r2, #65	; 0x41
 8005324:	2100      	movs	r1, #0
 8005326:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2242      	movs	r2, #66	; 0x42
 8005332:	2100      	movs	r1, #0
 8005334:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2240      	movs	r2, #64	; 0x40
 800533a:	2100      	movs	r1, #0
 800533c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b002      	add	sp, #8
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b089      	sub	sp, #36	; 0x24
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	000c      	movs	r4, r1
 8005352:	0010      	movs	r0, r2
 8005354:	0019      	movs	r1, r3
 8005356:	230a      	movs	r3, #10
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	1c22      	adds	r2, r4, #0
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	2308      	movs	r3, #8
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	1c02      	adds	r2, r0, #0
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	1dbb      	adds	r3, r7, #6
 8005368:	1c0a      	adds	r2, r1, #0
 800536a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2241      	movs	r2, #65	; 0x41
 8005370:	5c9b      	ldrb	r3, [r3, r2]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b20      	cmp	r3, #32
 8005376:	d000      	beq.n	800537a <HAL_I2C_Mem_Write+0x32>
 8005378:	e10c      	b.n	8005594 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <HAL_I2C_Mem_Write+0x42>
 8005380:	232c      	movs	r3, #44	; 0x2c
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	0092      	lsls	r2, r2, #2
 8005390:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0ff      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2240      	movs	r2, #64	; 0x40
 800539a:	5c9b      	ldrb	r3, [r3, r2]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_I2C_Mem_Write+0x5c>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e0f8      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2240      	movs	r2, #64	; 0x40
 80053a8:	2101      	movs	r1, #1
 80053aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053ac:	f7ff fb74 	bl	8004a98 <HAL_GetTick>
 80053b0:	0003      	movs	r3, r0
 80053b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	0219      	lsls	r1, r3, #8
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2319      	movs	r3, #25
 80053c0:	2201      	movs	r2, #1
 80053c2:	f000 fb0b 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d001      	beq.n	80053ce <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e0e3      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2241      	movs	r2, #65	; 0x41
 80053d2:	2121      	movs	r1, #33	; 0x21
 80053d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2242      	movs	r2, #66	; 0x42
 80053da:	2140      	movs	r1, #64	; 0x40
 80053dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	222c      	movs	r2, #44	; 0x2c
 80053ee:	18ba      	adds	r2, r7, r2
 80053f0:	8812      	ldrh	r2, [r2, #0]
 80053f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	881c      	ldrh	r4, [r3, #0]
 80053fe:	2308      	movs	r3, #8
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	230a      	movs	r3, #10
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	8819      	ldrh	r1, [r3, #0]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	0023      	movs	r3, r4
 8005416:	f000 f9f9 	bl	800580c <I2C_RequestMemoryWrite>
 800541a:	1e03      	subs	r3, r0, #0
 800541c:	d005      	beq.n	800542a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2240      	movs	r2, #64	; 0x40
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0b5      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	2bff      	cmp	r3, #255	; 0xff
 8005432:	d911      	bls.n	8005458 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	22ff      	movs	r2, #255	; 0xff
 8005438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543e:	b2da      	uxtb	r2, r3
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	045c      	lsls	r4, r3, #17
 8005444:	230a      	movs	r3, #10
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	8819      	ldrh	r1, [r3, #0]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	2300      	movs	r3, #0
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	0023      	movs	r3, r4
 8005452:	f000 fbe3 	bl	8005c1c <I2C_TransferConfig>
 8005456:	e012      	b.n	800547e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005466:	b2da      	uxtb	r2, r3
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	049c      	lsls	r4, r3, #18
 800546c:	230a      	movs	r3, #10
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	8819      	ldrh	r1, [r3, #0]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	2300      	movs	r3, #0
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	0023      	movs	r3, r4
 800547a:	f000 fbcf 	bl	8005c1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	0018      	movs	r0, r3
 8005486:	f000 fae8 	bl	8005a5a <I2C_WaitOnTXISFlagUntilTimeout>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d001      	beq.n	8005492 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e081      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d03a      	beq.n	8005542 <HAL_I2C_Mem_Write+0x1fa>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d136      	bne.n	8005542 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	0013      	movs	r3, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	f000 fa7b 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	d001      	beq.n	80054ee <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e053      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2bff      	cmp	r3, #255	; 0xff
 80054f6:	d911      	bls.n	800551c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	22ff      	movs	r2, #255	; 0xff
 80054fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	b2da      	uxtb	r2, r3
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	045c      	lsls	r4, r3, #17
 8005508:	230a      	movs	r3, #10
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	8819      	ldrh	r1, [r3, #0]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	2300      	movs	r3, #0
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	0023      	movs	r3, r4
 8005516:	f000 fb81 	bl	8005c1c <I2C_TransferConfig>
 800551a:	e012      	b.n	8005542 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552a:	b2da      	uxtb	r2, r3
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	049c      	lsls	r4, r3, #18
 8005530:	230a      	movs	r3, #10
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	8819      	ldrh	r1, [r3, #0]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	2300      	movs	r3, #0
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	0023      	movs	r3, r4
 800553e:	f000 fb6d 	bl	8005c1c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d198      	bne.n	800547e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	0018      	movs	r0, r3
 8005554:	f000 fac0 	bl	8005ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005558:	1e03      	subs	r3, r0, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e01a      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2220      	movs	r2, #32
 8005566:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	490b      	ldr	r1, [pc, #44]	; (80055a0 <HAL_I2C_Mem_Write+0x258>)
 8005574:	400a      	ands	r2, r1
 8005576:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2241      	movs	r2, #65	; 0x41
 800557c:	2120      	movs	r1, #32
 800557e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2242      	movs	r2, #66	; 0x42
 8005584:	2100      	movs	r1, #0
 8005586:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2240      	movs	r2, #64	; 0x40
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b007      	add	sp, #28
 800559c:	bd90      	pop	{r4, r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	fe00e800 	.word	0xfe00e800

080055a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a4:	b590      	push	{r4, r7, lr}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	000c      	movs	r4, r1
 80055ae:	0010      	movs	r0, r2
 80055b0:	0019      	movs	r1, r3
 80055b2:	230a      	movs	r3, #10
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	1c22      	adds	r2, r4, #0
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	2308      	movs	r3, #8
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	1c02      	adds	r2, r0, #0
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	1dbb      	adds	r3, r7, #6
 80055c4:	1c0a      	adds	r2, r1, #0
 80055c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2241      	movs	r2, #65	; 0x41
 80055cc:	5c9b      	ldrb	r3, [r3, r2]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d000      	beq.n	80055d6 <HAL_I2C_Mem_Read+0x32>
 80055d4:	e110      	b.n	80057f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <HAL_I2C_Mem_Read+0x42>
 80055dc:	232c      	movs	r3, #44	; 0x2c
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	0092      	lsls	r2, r2, #2
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e103      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2240      	movs	r2, #64	; 0x40
 80055f6:	5c9b      	ldrb	r3, [r3, r2]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_I2C_Mem_Read+0x5c>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e0fc      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2240      	movs	r2, #64	; 0x40
 8005604:	2101      	movs	r1, #1
 8005606:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005608:	f7ff fa46 	bl	8004a98 <HAL_GetTick>
 800560c:	0003      	movs	r3, r0
 800560e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	0219      	lsls	r1, r3, #8
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2319      	movs	r3, #25
 800561c:	2201      	movs	r2, #1
 800561e:	f000 f9dd 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005622:	1e03      	subs	r3, r0, #0
 8005624:	d001      	beq.n	800562a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0e7      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2241      	movs	r2, #65	; 0x41
 800562e:	2122      	movs	r1, #34	; 0x22
 8005630:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2242      	movs	r2, #66	; 0x42
 8005636:	2140      	movs	r1, #64	; 0x40
 8005638:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	222c      	movs	r2, #44	; 0x2c
 800564a:	18ba      	adds	r2, r7, r2
 800564c:	8812      	ldrh	r2, [r2, #0]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005656:	1dbb      	adds	r3, r7, #6
 8005658:	881c      	ldrh	r4, [r3, #0]
 800565a:	2308      	movs	r3, #8
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	881a      	ldrh	r2, [r3, #0]
 8005660:	230a      	movs	r3, #10
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	8819      	ldrh	r1, [r3, #0]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	0023      	movs	r3, r4
 8005672:	f000 f92f 	bl	80058d4 <I2C_RequestMemoryRead>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d005      	beq.n	8005686 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	2100      	movs	r1, #0
 8005680:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e0b9      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	2bff      	cmp	r3, #255	; 0xff
 800568e:	d911      	bls.n	80056b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	22ff      	movs	r2, #255	; 0xff
 8005694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	b2da      	uxtb	r2, r3
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	045c      	lsls	r4, r3, #17
 80056a0:	230a      	movs	r3, #10
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	8819      	ldrh	r1, [r3, #0]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	4b56      	ldr	r3, [pc, #344]	; (8005804 <HAL_I2C_Mem_Read+0x260>)
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	0023      	movs	r3, r4
 80056ae:	f000 fab5 	bl	8005c1c <I2C_TransferConfig>
 80056b2:	e012      	b.n	80056da <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	049c      	lsls	r4, r3, #18
 80056c8:	230a      	movs	r3, #10
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	8819      	ldrh	r1, [r3, #0]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <HAL_I2C_Mem_Read+0x260>)
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	0023      	movs	r3, r4
 80056d6:	f000 faa1 	bl	8005c1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	0013      	movs	r3, r2
 80056e4:	2200      	movs	r2, #0
 80056e6:	2104      	movs	r1, #4
 80056e8:	f000 f978 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80056ec:	1e03      	subs	r3, r0, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e082      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d03a      	beq.n	80057a6 <HAL_I2C_Mem_Read+0x202>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	2b00      	cmp	r3, #0
 8005736:	d136      	bne.n	80057a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	0013      	movs	r3, r2
 8005742:	2200      	movs	r2, #0
 8005744:	2180      	movs	r1, #128	; 0x80
 8005746:	f000 f949 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800574a:	1e03      	subs	r3, r0, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e053      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	2bff      	cmp	r3, #255	; 0xff
 800575a:	d911      	bls.n	8005780 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	22ff      	movs	r2, #255	; 0xff
 8005760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005766:	b2da      	uxtb	r2, r3
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	045c      	lsls	r4, r3, #17
 800576c:	230a      	movs	r3, #10
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	8819      	ldrh	r1, [r3, #0]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	2300      	movs	r3, #0
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	0023      	movs	r3, r4
 800577a:	f000 fa4f 	bl	8005c1c <I2C_TransferConfig>
 800577e:	e012      	b.n	80057a6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578e:	b2da      	uxtb	r2, r3
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	049c      	lsls	r4, r3, #18
 8005794:	230a      	movs	r3, #10
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	8819      	ldrh	r1, [r3, #0]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	2300      	movs	r3, #0
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	0023      	movs	r3, r4
 80057a2:	f000 fa3b 	bl	8005c1c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d194      	bne.n	80056da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f98e 	bl	8005ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057bc:	1e03      	subs	r3, r0, #0
 80057be:	d001      	beq.n	80057c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e01a      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2220      	movs	r2, #32
 80057ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	490c      	ldr	r1, [pc, #48]	; (8005808 <HAL_I2C_Mem_Read+0x264>)
 80057d8:	400a      	ands	r2, r1
 80057da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2241      	movs	r2, #65	; 0x41
 80057e0:	2120      	movs	r1, #32
 80057e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2242      	movs	r2, #66	; 0x42
 80057e8:	2100      	movs	r1, #0
 80057ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2240      	movs	r2, #64	; 0x40
 80057f0:	2100      	movs	r1, #0
 80057f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b007      	add	sp, #28
 8005800:	bd90      	pop	{r4, r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	80002400 	.word	0x80002400
 8005808:	fe00e800 	.word	0xfe00e800

0800580c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b5b0      	push	{r4, r5, r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	000c      	movs	r4, r1
 8005816:	0010      	movs	r0, r2
 8005818:	0019      	movs	r1, r3
 800581a:	250a      	movs	r5, #10
 800581c:	197b      	adds	r3, r7, r5
 800581e:	1c22      	adds	r2, r4, #0
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	2308      	movs	r3, #8
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	1c02      	adds	r2, r0, #0
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	1dbb      	adds	r3, r7, #6
 800582c:	1c0a      	adds	r2, r1, #0
 800582e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005830:	1dbb      	adds	r3, r7, #6
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	045c      	lsls	r4, r3, #17
 800583a:	197b      	adds	r3, r7, r5
 800583c:	8819      	ldrh	r1, [r3, #0]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	4b23      	ldr	r3, [pc, #140]	; (80058d0 <I2C_RequestMemoryWrite+0xc4>)
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	0023      	movs	r3, r4
 8005846:	f000 f9e9 	bl	8005c1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	6a39      	ldr	r1, [r7, #32]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	0018      	movs	r0, r3
 8005852:	f000 f902 	bl	8005a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8005856:	1e03      	subs	r3, r0, #0
 8005858:	d001      	beq.n	800585e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e033      	b.n	80058c6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800585e:	1dbb      	adds	r3, r7, #6
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d107      	bne.n	8005876 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005866:	2308      	movs	r3, #8
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
 8005874:	e019      	b.n	80058aa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005876:	2308      	movs	r3, #8
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	b29b      	uxth	r3, r3
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	6a39      	ldr	r1, [r7, #32]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	0018      	movs	r0, r3
 8005890:	f000 f8e3 	bl	8005a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8005894:	1e03      	subs	r3, r0, #0
 8005896:	d001      	beq.n	800589c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e014      	b.n	80058c6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800589c:	2308      	movs	r3, #8
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	0013      	movs	r3, r2
 80058b4:	2200      	movs	r2, #0
 80058b6:	2180      	movs	r1, #128	; 0x80
 80058b8:	f000 f890 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80058bc:	1e03      	subs	r3, r0, #0
 80058be:	d001      	beq.n	80058c4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	0018      	movs	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b004      	add	sp, #16
 80058cc:	bdb0      	pop	{r4, r5, r7, pc}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	80002000 	.word	0x80002000

080058d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b5b0      	push	{r4, r5, r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	000c      	movs	r4, r1
 80058de:	0010      	movs	r0, r2
 80058e0:	0019      	movs	r1, r3
 80058e2:	250a      	movs	r5, #10
 80058e4:	197b      	adds	r3, r7, r5
 80058e6:	1c22      	adds	r2, r4, #0
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	2308      	movs	r3, #8
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	1c02      	adds	r2, r0, #0
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	1dbb      	adds	r3, r7, #6
 80058f4:	1c0a      	adds	r2, r1, #0
 80058f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058f8:	1dbb      	adds	r3, r7, #6
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	197b      	adds	r3, r7, r5
 8005900:	8819      	ldrh	r1, [r3, #0]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	4b23      	ldr	r3, [pc, #140]	; (8005994 <I2C_RequestMemoryRead+0xc0>)
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2300      	movs	r3, #0
 800590a:	f000 f987 	bl	8005c1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	6a39      	ldr	r1, [r7, #32]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	0018      	movs	r0, r3
 8005916:	f000 f8a0 	bl	8005a5a <I2C_WaitOnTXISFlagUntilTimeout>
 800591a:	1e03      	subs	r3, r0, #0
 800591c:	d001      	beq.n	8005922 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e033      	b.n	800598a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005922:	1dbb      	adds	r3, r7, #6
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d107      	bne.n	800593a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800592a:	2308      	movs	r3, #8
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	629a      	str	r2, [r3, #40]	; 0x28
 8005938:	e019      	b.n	800596e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800593a:	2308      	movs	r3, #8
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	b29b      	uxth	r3, r3
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	6a39      	ldr	r1, [r7, #32]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 f881 	bl	8005a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d001      	beq.n	8005960 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e014      	b.n	800598a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005960:	2308      	movs	r3, #8
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800596e:	6a3a      	ldr	r2, [r7, #32]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	0013      	movs	r3, r2
 8005978:	2200      	movs	r2, #0
 800597a:	2140      	movs	r1, #64	; 0x40
 800597c:	f000 f82e 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005980:	1e03      	subs	r3, r0, #0
 8005982:	d001      	beq.n	8005988 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	0018      	movs	r0, r3
 800598c:	46bd      	mov	sp, r7
 800598e:	b004      	add	sp, #16
 8005990:	bdb0      	pop	{r4, r5, r7, pc}
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	80002000 	.word	0x80002000

08005998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2202      	movs	r2, #2
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d103      	bne.n	80059b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d007      	beq.n	80059d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2101      	movs	r1, #1
 80059d0:	430a      	orrs	r2, r1
 80059d2:	619a      	str	r2, [r3, #24]
  }
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	1dfb      	adds	r3, r7, #7
 80059ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ec:	e021      	b.n	8005a32 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	d01e      	beq.n	8005a32 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f4:	f7ff f850 	bl	8004a98 <HAL_GetTick>
 80059f8:	0002      	movs	r2, r0
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d302      	bcc.n	8005a0a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d113      	bne.n	8005a32 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	2220      	movs	r2, #32
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2241      	movs	r2, #65	; 0x41
 8005a1a:	2120      	movs	r1, #32
 8005a1c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2242      	movs	r2, #66	; 0x42
 8005a22:	2100      	movs	r1, #0
 8005a24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2240      	movs	r2, #64	; 0x40
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e00f      	b.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	425a      	negs	r2, r3
 8005a42:	4153      	adcs	r3, r2
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	001a      	movs	r2, r3
 8005a48:	1dfb      	adds	r3, r7, #7
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d0ce      	beq.n	80059ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b004      	add	sp, #16
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a66:	e02b      	b.n	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 f86e 	bl	8005b50 <I2C_IsAcknowledgeFailed>
 8005a74:	1e03      	subs	r3, r0, #0
 8005a76:	d001      	beq.n	8005a7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e029      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	d01e      	beq.n	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7ff f809 	bl	8004a98 <HAL_GetTick>
 8005a86:	0002      	movs	r2, r0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d113      	bne.n	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2241      	movs	r2, #65	; 0x41
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2242      	movs	r2, #66	; 0x42
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2240      	movs	r2, #64	; 0x40
 8005ab8:	2100      	movs	r1, #0
 8005aba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e007      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d1cc      	bne.n	8005a68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b004      	add	sp, #16
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ae4:	e028      	b.n	8005b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 f82f 	bl	8005b50 <I2C_IsAcknowledgeFailed>
 8005af2:	1e03      	subs	r3, r0, #0
 8005af4:	d001      	beq.n	8005afa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e026      	b.n	8005b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fe ffcd 	bl	8004a98 <HAL_GetTick>
 8005afe:	0002      	movs	r2, r0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d113      	bne.n	8005b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b14:	2220      	movs	r2, #32
 8005b16:	431a      	orrs	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2241      	movs	r2, #65	; 0x41
 8005b20:	2120      	movs	r1, #32
 8005b22:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2242      	movs	r2, #66	; 0x42
 8005b28:	2100      	movs	r1, #0
 8005b2a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2240      	movs	r2, #64	; 0x40
 8005b30:	2100      	movs	r1, #0
 8005b32:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e007      	b.n	8005b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d1cf      	bne.n	8005ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	0018      	movs	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b004      	add	sp, #16
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2210      	movs	r2, #16
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d151      	bne.n	8005c0e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b6a:	e021      	b.n	8005bb0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	d01e      	beq.n	8005bb0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b72:	f7fe ff91 	bl	8004a98 <HAL_GetTick>
 8005b76:	0002      	movs	r2, r0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d302      	bcc.n	8005b88 <I2C_IsAcknowledgeFailed+0x38>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d113      	bne.n	8005bb0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2241      	movs	r2, #65	; 0x41
 8005b98:	2120      	movs	r1, #32
 8005b9a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2242      	movs	r2, #66	; 0x42
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2240      	movs	r2, #64	; 0x40
 8005ba8:	2100      	movs	r1, #0
 8005baa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e02f      	b.n	8005c10 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d1d6      	bne.n	8005b6c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7ff fee1 	bl	8005998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	490d      	ldr	r1, [pc, #52]	; (8005c18 <I2C_IsAcknowledgeFailed+0xc8>)
 8005be2:	400a      	ands	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	2204      	movs	r2, #4
 8005bec:	431a      	orrs	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2241      	movs	r2, #65	; 0x41
 8005bf6:	2120      	movs	r1, #32
 8005bf8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2242      	movs	r2, #66	; 0x42
 8005bfe:	2100      	movs	r1, #0
 8005c00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2240      	movs	r2, #64	; 0x40
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b004      	add	sp, #16
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	fe00e800 	.word	0xfe00e800

08005c1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005c1c:	b590      	push	{r4, r7, lr}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	0008      	movs	r0, r1
 8005c26:	0011      	movs	r1, r2
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	240a      	movs	r4, #10
 8005c2c:	193b      	adds	r3, r7, r4
 8005c2e:	1c02      	adds	r2, r0, #0
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	2009      	movs	r0, #9
 8005c34:	183b      	adds	r3, r7, r0
 8005c36:	1c0a      	adds	r2, r1, #0
 8005c38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	0d51      	lsrs	r1, r2, #21
 8005c44:	2280      	movs	r2, #128	; 0x80
 8005c46:	00d2      	lsls	r2, r2, #3
 8005c48:	400a      	ands	r2, r1
 8005c4a:	490e      	ldr	r1, [pc, #56]	; (8005c84 <I2C_TransferConfig+0x68>)
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	43d2      	mvns	r2, r2
 8005c50:	401a      	ands	r2, r3
 8005c52:	0011      	movs	r1, r2
 8005c54:	193b      	adds	r3, r7, r4
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	0d9a      	lsrs	r2, r3, #22
 8005c5c:	183b      	adds	r3, r7, r0
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	0418      	lsls	r0, r3, #16
 8005c62:	23ff      	movs	r3, #255	; 0xff
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	4003      	ands	r3, r0
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b005      	add	sp, #20
 8005c80:	bd90      	pop	{r4, r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	03ff63ff 	.word	0x03ff63ff

08005c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2241      	movs	r2, #65	; 0x41
 8005c96:	5c9b      	ldrb	r3, [r3, r2]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d138      	bne.n	8005d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2240      	movs	r2, #64	; 0x40
 8005ca2:	5c9b      	ldrb	r3, [r3, r2]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e032      	b.n	8005d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2241      	movs	r2, #65	; 0x41
 8005cb8:	2124      	movs	r1, #36	; 0x24
 8005cba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	438a      	bics	r2, r1
 8005cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4911      	ldr	r1, [pc, #68]	; (8005d1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005cd8:	400a      	ands	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2241      	movs	r2, #65	; 0x41
 8005d00:	2120      	movs	r1, #32
 8005d02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2240      	movs	r2, #64	; 0x40
 8005d08:	2100      	movs	r1, #0
 8005d0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
  }
}
 8005d12:	0018      	movs	r0, r3
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b002      	add	sp, #8
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	ffffefff 	.word	0xffffefff

08005d20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2241      	movs	r2, #65	; 0x41
 8005d2e:	5c9b      	ldrb	r3, [r3, r2]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d139      	bne.n	8005daa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2240      	movs	r2, #64	; 0x40
 8005d3a:	5c9b      	ldrb	r3, [r3, r2]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e033      	b.n	8005dac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	2101      	movs	r1, #1
 8005d4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2241      	movs	r2, #65	; 0x41
 8005d50:	2124      	movs	r1, #36	; 0x24
 8005d52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2101      	movs	r1, #1
 8005d60:	438a      	bics	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2101      	movs	r1, #1
 8005d92:	430a      	orrs	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2241      	movs	r2, #65	; 0x41
 8005d9a:	2120      	movs	r1, #32
 8005d9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2240      	movs	r2, #64	; 0x40
 8005da2:	2100      	movs	r1, #0
 8005da4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
  }
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b004      	add	sp, #16
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	fffff0ff 	.word	0xfffff0ff

08005db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db8:	b5b0      	push	{r4, r5, r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f000 fbbc 	bl	8006544 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dcc:	4bc8      	ldr	r3, [pc, #800]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	220c      	movs	r2, #12
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dd6:	4bc6      	ldr	r3, [pc, #792]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	025b      	lsls	r3, r3, #9
 8005dde:	4013      	ands	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	4013      	ands	r3, r2
 8005dea:	d100      	bne.n	8005dee <HAL_RCC_OscConfig+0x36>
 8005dec:	e07e      	b.n	8005eec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d007      	beq.n	8005e04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	d112      	bne.n	8005e20 <HAL_RCC_OscConfig+0x68>
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	025b      	lsls	r3, r3, #9
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d10d      	bne.n	8005e20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e04:	4bba      	ldr	r3, [pc, #744]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d100      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5a>
 8005e10:	e06b      	b.n	8005eea <HAL_RCC_OscConfig+0x132>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d167      	bne.n	8005eea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f000 fb92 	bl	8006544 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	025b      	lsls	r3, r3, #9
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d107      	bne.n	8005e3c <HAL_RCC_OscConfig+0x84>
 8005e2c:	4bb0      	ldr	r3, [pc, #704]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4baf      	ldr	r3, [pc, #700]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e32:	2180      	movs	r1, #128	; 0x80
 8005e34:	0249      	lsls	r1, r1, #9
 8005e36:	430a      	orrs	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e027      	b.n	8005e8c <HAL_RCC_OscConfig+0xd4>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	23a0      	movs	r3, #160	; 0xa0
 8005e42:	02db      	lsls	r3, r3, #11
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d10e      	bne.n	8005e66 <HAL_RCC_OscConfig+0xae>
 8005e48:	4ba9      	ldr	r3, [pc, #676]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4ba8      	ldr	r3, [pc, #672]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	02c9      	lsls	r1, r1, #11
 8005e52:	430a      	orrs	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	4ba6      	ldr	r3, [pc, #664]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4ba5      	ldr	r3, [pc, #660]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	0249      	lsls	r1, r1, #9
 8005e60:	430a      	orrs	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e012      	b.n	8005e8c <HAL_RCC_OscConfig+0xd4>
 8005e66:	4ba2      	ldr	r3, [pc, #648]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4ba1      	ldr	r3, [pc, #644]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e6c:	49a1      	ldr	r1, [pc, #644]	; (80060f4 <HAL_RCC_OscConfig+0x33c>)
 8005e6e:	400a      	ands	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	4b9f      	ldr	r3, [pc, #636]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	025b      	lsls	r3, r3, #9
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4b9b      	ldr	r3, [pc, #620]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b9a      	ldr	r3, [pc, #616]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005e86:	499c      	ldr	r1, [pc, #624]	; (80060f8 <HAL_RCC_OscConfig+0x340>)
 8005e88:	400a      	ands	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d015      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fe fe00 	bl	8004a98 <HAL_GetTick>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e9c:	e009      	b.n	8005eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e9e:	f7fe fdfb 	bl	8004a98 <HAL_GetTick>
 8005ea2:	0002      	movs	r2, r0
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b64      	cmp	r3, #100	; 0x64
 8005eaa:	d902      	bls.n	8005eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	f000 fb49 	bl	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eb2:	4b8f      	ldr	r3, [pc, #572]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d0ef      	beq.n	8005e9e <HAL_RCC_OscConfig+0xe6>
 8005ebe:	e015      	b.n	8005eec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fe fdea 	bl	8004a98 <HAL_GetTick>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eca:	f7fe fde5 	bl	8004a98 <HAL_GetTick>
 8005ece:	0002      	movs	r2, r0
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b64      	cmp	r3, #100	; 0x64
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e333      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005edc:	4b84      	ldr	r3, [pc, #528]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	029b      	lsls	r3, r3, #10
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d1f0      	bne.n	8005eca <HAL_RCC_OscConfig+0x112>
 8005ee8:	e000      	b.n	8005eec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d100      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x140>
 8005ef6:	e098      	b.n	800602a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	2220      	movs	r2, #32
 8005f02:	4013      	ands	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005f06:	4b7a      	ldr	r3, [pc, #488]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b79      	ldr	r3, [pc, #484]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f0c:	2120      	movs	r1, #32
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2220      	movs	r2, #32
 8005f16:	4393      	bics	r3, r2
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b0c      	cmp	r3, #12
 8005f24:	d13d      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x1ea>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d13a      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005f2c:	4b70      	ldr	r3, [pc, #448]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2204      	movs	r2, #4
 8005f32:	4013      	ands	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_RCC_OscConfig+0x188>
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e301      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f40:	4b6b      	ldr	r3, [pc, #428]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a6d      	ldr	r2, [pc, #436]	; (80060fc <HAL_RCC_OscConfig+0x344>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	0019      	movs	r1, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	4b67      	ldr	r3, [pc, #412]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005f56:	4b66      	ldr	r3, [pc, #408]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2209      	movs	r2, #9
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	0019      	movs	r1, r3
 8005f60:	4b63      	ldr	r3, [pc, #396]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f68:	f000 fc20 	bl	80067ac <HAL_RCC_GetSysClockFreq>
 8005f6c:	0001      	movs	r1, r0
 8005f6e:	4b60      	ldr	r3, [pc, #384]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	091b      	lsrs	r3, r3, #4
 8005f74:	220f      	movs	r2, #15
 8005f76:	4013      	ands	r3, r2
 8005f78:	4a61      	ldr	r2, [pc, #388]	; (8006100 <HAL_RCC_OscConfig+0x348>)
 8005f7a:	5cd3      	ldrb	r3, [r2, r3]
 8005f7c:	000a      	movs	r2, r1
 8005f7e:	40da      	lsrs	r2, r3
 8005f80:	4b60      	ldr	r3, [pc, #384]	; (8006104 <HAL_RCC_OscConfig+0x34c>)
 8005f82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8005f84:	2513      	movs	r5, #19
 8005f86:	197c      	adds	r4, r7, r5
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f7fe fd4f 	bl	8004a2c <HAL_InitTick>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005f92:	197b      	adds	r3, r7, r5
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d047      	beq.n	800602a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005f9a:	2313      	movs	r3, #19
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	e2d0      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d027      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005fa8:	4b51      	ldr	r3, [pc, #324]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2209      	movs	r2, #9
 8005fae:	4393      	bics	r3, r2
 8005fb0:	0019      	movs	r1, r3
 8005fb2:	4b4f      	ldr	r3, [pc, #316]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fba:	f7fe fd6d 	bl	8004a98 <HAL_GetTick>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fe fd68 	bl	8004a98 <HAL_GetTick>
 8005fc8:	0002      	movs	r2, r0
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e2b6      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fd6:	4b46      	ldr	r3, [pc, #280]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2204      	movs	r2, #4
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d0f1      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe0:	4b43      	ldr	r3, [pc, #268]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a45      	ldr	r2, [pc, #276]	; (80060fc <HAL_RCC_OscConfig+0x344>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	021a      	lsls	r2, r3, #8
 8005ff0:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	e018      	b.n	800602a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff8:	4b3d      	ldr	r3, [pc, #244]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b3c      	ldr	r3, [pc, #240]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8005ffe:	2101      	movs	r1, #1
 8006000:	438a      	bics	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006004:	f7fe fd48 	bl	8004a98 <HAL_GetTick>
 8006008:	0003      	movs	r3, r0
 800600a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800600e:	f7fe fd43 	bl	8004a98 <HAL_GetTick>
 8006012:	0002      	movs	r2, r0
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e291      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006020:	4b33      	ldr	r3, [pc, #204]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2204      	movs	r2, #4
 8006026:	4013      	ands	r3, r2
 8006028:	d1f1      	bne.n	800600e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2210      	movs	r2, #16
 8006030:	4013      	ands	r3, r2
 8006032:	d100      	bne.n	8006036 <HAL_RCC_OscConfig+0x27e>
 8006034:	e09f      	b.n	8006176 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d13f      	bne.n	80060bc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800603c:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4013      	ands	r3, r2
 8006046:	d005      	beq.n	8006054 <HAL_RCC_OscConfig+0x29c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e277      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006054:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4a2b      	ldr	r2, [pc, #172]	; (8006108 <HAL_RCC_OscConfig+0x350>)
 800605a:	4013      	ands	r3, r2
 800605c:	0019      	movs	r1, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006062:	4b23      	ldr	r3, [pc, #140]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006068:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	0a19      	lsrs	r1, r3, #8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	061a      	lsls	r2, r3, #24
 8006076:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	0b5b      	lsrs	r3, r3, #13
 8006082:	3301      	adds	r3, #1
 8006084:	2280      	movs	r2, #128	; 0x80
 8006086:	0212      	lsls	r2, r2, #8
 8006088:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800608a:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	091b      	lsrs	r3, r3, #4
 8006090:	210f      	movs	r1, #15
 8006092:	400b      	ands	r3, r1
 8006094:	491a      	ldr	r1, [pc, #104]	; (8006100 <HAL_RCC_OscConfig+0x348>)
 8006096:	5ccb      	ldrb	r3, [r1, r3]
 8006098:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <HAL_RCC_OscConfig+0x34c>)
 800609c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800609e:	2513      	movs	r5, #19
 80060a0:	197c      	adds	r4, r7, r5
 80060a2:	2000      	movs	r0, #0
 80060a4:	f7fe fcc2 	bl	8004a2c <HAL_InitTick>
 80060a8:	0003      	movs	r3, r0
 80060aa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80060ac:	197b      	adds	r3, r7, r5
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d060      	beq.n	8006176 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80060b4:	2313      	movs	r3, #19
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	e243      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d03e      	beq.n	8006142 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <HAL_RCC_OscConfig+0x338>)
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	0049      	lsls	r1, r1, #1
 80060ce:	430a      	orrs	r2, r1
 80060d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d2:	f7fe fce1 	bl	8004a98 <HAL_GetTick>
 80060d6:	0003      	movs	r3, r0
 80060d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80060da:	e017      	b.n	800610c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060dc:	f7fe fcdc 	bl	8004a98 <HAL_GetTick>
 80060e0:	0002      	movs	r2, r0
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d910      	bls.n	800610c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e22a      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	40021000 	.word	0x40021000
 80060f4:	fffeffff 	.word	0xfffeffff
 80060f8:	fffbffff 	.word	0xfffbffff
 80060fc:	ffffe0ff 	.word	0xffffe0ff
 8006100:	08009dfc 	.word	0x08009dfc
 8006104:	20000008 	.word	0x20000008
 8006108:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800610c:	4bc6      	ldr	r3, [pc, #792]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4013      	ands	r3, r2
 8006116:	d0e1      	beq.n	80060dc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006118:	4bc3      	ldr	r3, [pc, #780]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4ac3      	ldr	r2, [pc, #780]	; (800642c <HAL_RCC_OscConfig+0x674>)
 800611e:	4013      	ands	r3, r2
 8006120:	0019      	movs	r1, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006126:	4bc0      	ldr	r3, [pc, #768]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800612c:	4bbe      	ldr	r3, [pc, #760]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	0a19      	lsrs	r1, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	061a      	lsls	r2, r3, #24
 800613a:	4bbb      	ldr	r3, [pc, #748]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
 8006140:	e019      	b.n	8006176 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006142:	4bb9      	ldr	r3, [pc, #740]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4bb8      	ldr	r3, [pc, #736]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006148:	49b9      	ldr	r1, [pc, #740]	; (8006430 <HAL_RCC_OscConfig+0x678>)
 800614a:	400a      	ands	r2, r1
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fe fca3 	bl	8004a98 <HAL_GetTick>
 8006152:	0003      	movs	r3, r0
 8006154:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006158:	f7fe fc9e 	bl	8004a98 <HAL_GetTick>
 800615c:	0002      	movs	r2, r0
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e1ec      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800616a:	4baf      	ldr	r3, [pc, #700]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4013      	ands	r3, r2
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2208      	movs	r2, #8
 800617c:	4013      	ands	r3, r2
 800617e:	d036      	beq.n	80061ee <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d019      	beq.n	80061bc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006188:	4ba7      	ldr	r3, [pc, #668]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800618a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800618c:	4ba6      	ldr	r3, [pc, #664]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800618e:	2101      	movs	r1, #1
 8006190:	430a      	orrs	r2, r1
 8006192:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006194:	f7fe fc80 	bl	8004a98 <HAL_GetTick>
 8006198:	0003      	movs	r3, r0
 800619a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619e:	f7fe fc7b 	bl	8004a98 <HAL_GetTick>
 80061a2:	0002      	movs	r2, r0
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e1c9      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061b0:	4b9d      	ldr	r3, [pc, #628]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80061b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b4:	2202      	movs	r2, #2
 80061b6:	4013      	ands	r3, r2
 80061b8:	d0f1      	beq.n	800619e <HAL_RCC_OscConfig+0x3e6>
 80061ba:	e018      	b.n	80061ee <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061bc:	4b9a      	ldr	r3, [pc, #616]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80061be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061c0:	4b99      	ldr	r3, [pc, #612]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80061c2:	2101      	movs	r1, #1
 80061c4:	438a      	bics	r2, r1
 80061c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c8:	f7fe fc66 	bl	8004a98 <HAL_GetTick>
 80061cc:	0003      	movs	r3, r0
 80061ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d2:	f7fe fc61 	bl	8004a98 <HAL_GetTick>
 80061d6:	0002      	movs	r2, r0
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e1af      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061e4:	4b90      	ldr	r3, [pc, #576]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80061e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e8:	2202      	movs	r2, #2
 80061ea:	4013      	ands	r3, r2
 80061ec:	d1f1      	bne.n	80061d2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2204      	movs	r2, #4
 80061f4:	4013      	ands	r3, r2
 80061f6:	d100      	bne.n	80061fa <HAL_RCC_OscConfig+0x442>
 80061f8:	e0af      	b.n	800635a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061fa:	2323      	movs	r3, #35	; 0x23
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006202:	4b89      	ldr	r3, [pc, #548]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	055b      	lsls	r3, r3, #21
 800620a:	4013      	ands	r3, r2
 800620c:	d10a      	bne.n	8006224 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800620e:	4b86      	ldr	r3, [pc, #536]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006212:	4b85      	ldr	r3, [pc, #532]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006214:	2180      	movs	r1, #128	; 0x80
 8006216:	0549      	lsls	r1, r1, #21
 8006218:	430a      	orrs	r2, r1
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800621c:	2323      	movs	r3, #35	; 0x23
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	2201      	movs	r2, #1
 8006222:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	4b83      	ldr	r3, [pc, #524]	; (8006434 <HAL_RCC_OscConfig+0x67c>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4013      	ands	r3, r2
 800622e:	d11a      	bne.n	8006266 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006230:	4b80      	ldr	r3, [pc, #512]	; (8006434 <HAL_RCC_OscConfig+0x67c>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b7f      	ldr	r3, [pc, #508]	; (8006434 <HAL_RCC_OscConfig+0x67c>)
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	0049      	lsls	r1, r1, #1
 800623a:	430a      	orrs	r2, r1
 800623c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800623e:	f7fe fc2b 	bl	8004a98 <HAL_GetTick>
 8006242:	0003      	movs	r3, r0
 8006244:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006248:	f7fe fc26 	bl	8004a98 <HAL_GetTick>
 800624c:	0002      	movs	r2, r0
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b64      	cmp	r3, #100	; 0x64
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e174      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	4b76      	ldr	r3, [pc, #472]	; (8006434 <HAL_RCC_OscConfig+0x67c>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4013      	ands	r3, r2
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	429a      	cmp	r2, r3
 8006270:	d107      	bne.n	8006282 <HAL_RCC_OscConfig+0x4ca>
 8006272:	4b6d      	ldr	r3, [pc, #436]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006276:	4b6c      	ldr	r3, [pc, #432]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006278:	2180      	movs	r1, #128	; 0x80
 800627a:	0049      	lsls	r1, r1, #1
 800627c:	430a      	orrs	r2, r1
 800627e:	651a      	str	r2, [r3, #80]	; 0x50
 8006280:	e031      	b.n	80062e6 <HAL_RCC_OscConfig+0x52e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x4ec>
 800628a:	4b67      	ldr	r3, [pc, #412]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800628c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800628e:	4b66      	ldr	r3, [pc, #408]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006290:	4967      	ldr	r1, [pc, #412]	; (8006430 <HAL_RCC_OscConfig+0x678>)
 8006292:	400a      	ands	r2, r1
 8006294:	651a      	str	r2, [r3, #80]	; 0x50
 8006296:	4b64      	ldr	r3, [pc, #400]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800629a:	4b63      	ldr	r3, [pc, #396]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800629c:	4966      	ldr	r1, [pc, #408]	; (8006438 <HAL_RCC_OscConfig+0x680>)
 800629e:	400a      	ands	r2, r1
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50
 80062a2:	e020      	b.n	80062e6 <HAL_RCC_OscConfig+0x52e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	23a0      	movs	r3, #160	; 0xa0
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d10e      	bne.n	80062ce <HAL_RCC_OscConfig+0x516>
 80062b0:	4b5d      	ldr	r3, [pc, #372]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062b4:	4b5c      	ldr	r3, [pc, #368]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	00c9      	lsls	r1, r1, #3
 80062ba:	430a      	orrs	r2, r1
 80062bc:	651a      	str	r2, [r3, #80]	; 0x50
 80062be:	4b5a      	ldr	r3, [pc, #360]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062c2:	4b59      	ldr	r3, [pc, #356]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	0049      	lsls	r1, r1, #1
 80062c8:	430a      	orrs	r2, r1
 80062ca:	651a      	str	r2, [r3, #80]	; 0x50
 80062cc:	e00b      	b.n	80062e6 <HAL_RCC_OscConfig+0x52e>
 80062ce:	4b56      	ldr	r3, [pc, #344]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062d2:	4b55      	ldr	r3, [pc, #340]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062d4:	4956      	ldr	r1, [pc, #344]	; (8006430 <HAL_RCC_OscConfig+0x678>)
 80062d6:	400a      	ands	r2, r1
 80062d8:	651a      	str	r2, [r3, #80]	; 0x50
 80062da:	4b53      	ldr	r3, [pc, #332]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062de:	4b52      	ldr	r3, [pc, #328]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80062e0:	4955      	ldr	r1, [pc, #340]	; (8006438 <HAL_RCC_OscConfig+0x680>)
 80062e2:	400a      	ands	r2, r1
 80062e4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d015      	beq.n	800631a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ee:	f7fe fbd3 	bl	8004a98 <HAL_GetTick>
 80062f2:	0003      	movs	r3, r0
 80062f4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f6:	e009      	b.n	800630c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f8:	f7fe fbce 	bl	8004a98 <HAL_GetTick>
 80062fc:	0002      	movs	r2, r0
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	4a4e      	ldr	r2, [pc, #312]	; (800643c <HAL_RCC_OscConfig+0x684>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e11b      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800630c:	4b46      	ldr	r3, [pc, #280]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800630e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4013      	ands	r3, r2
 8006316:	d0ef      	beq.n	80062f8 <HAL_RCC_OscConfig+0x540>
 8006318:	e014      	b.n	8006344 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800631a:	f7fe fbbd 	bl	8004a98 <HAL_GetTick>
 800631e:	0003      	movs	r3, r0
 8006320:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006322:	e009      	b.n	8006338 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006324:	f7fe fbb8 	bl	8004a98 <HAL_GetTick>
 8006328:	0002      	movs	r2, r0
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	4a43      	ldr	r2, [pc, #268]	; (800643c <HAL_RCC_OscConfig+0x684>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e105      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006338:	4b3b      	ldr	r3, [pc, #236]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800633a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4013      	ands	r3, r2
 8006342:	d1ef      	bne.n	8006324 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006344:	2323      	movs	r3, #35	; 0x23
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800634e:	4b36      	ldr	r3, [pc, #216]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006352:	4b35      	ldr	r3, [pc, #212]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006354:	493a      	ldr	r1, [pc, #232]	; (8006440 <HAL_RCC_OscConfig+0x688>)
 8006356:	400a      	ands	r2, r1
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2220      	movs	r2, #32
 8006360:	4013      	ands	r3, r2
 8006362:	d049      	beq.n	80063f8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d026      	beq.n	80063ba <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800636c:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	4b2d      	ldr	r3, [pc, #180]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006372:	2101      	movs	r1, #1
 8006374:	430a      	orrs	r2, r1
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800637a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637c:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 800637e:	2101      	movs	r1, #1
 8006380:	430a      	orrs	r2, r1
 8006382:	635a      	str	r2, [r3, #52]	; 0x34
 8006384:	4b2f      	ldr	r3, [pc, #188]	; (8006444 <HAL_RCC_OscConfig+0x68c>)
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	4b2e      	ldr	r3, [pc, #184]	; (8006444 <HAL_RCC_OscConfig+0x68c>)
 800638a:	2180      	movs	r1, #128	; 0x80
 800638c:	0189      	lsls	r1, r1, #6
 800638e:	430a      	orrs	r2, r1
 8006390:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006392:	f7fe fb81 	bl	8004a98 <HAL_GetTick>
 8006396:	0003      	movs	r3, r0
 8006398:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800639c:	f7fe fb7c 	bl	8004a98 <HAL_GetTick>
 80063a0:	0002      	movs	r2, r0
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e0ca      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063ae:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2202      	movs	r2, #2
 80063b4:	4013      	ands	r3, r2
 80063b6:	d0f1      	beq.n	800639c <HAL_RCC_OscConfig+0x5e4>
 80063b8:	e01e      	b.n	80063f8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80063c0:	2101      	movs	r1, #1
 80063c2:	438a      	bics	r2, r1
 80063c4:	609a      	str	r2, [r3, #8]
 80063c6:	4b1f      	ldr	r3, [pc, #124]	; (8006444 <HAL_RCC_OscConfig+0x68c>)
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <HAL_RCC_OscConfig+0x68c>)
 80063cc:	491e      	ldr	r1, [pc, #120]	; (8006448 <HAL_RCC_OscConfig+0x690>)
 80063ce:	400a      	ands	r2, r1
 80063d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d2:	f7fe fb61 	bl	8004a98 <HAL_GetTick>
 80063d6:	0003      	movs	r3, r0
 80063d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063dc:	f7fe fb5c 	bl	8004a98 <HAL_GetTick>
 80063e0:	0002      	movs	r2, r0
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e0aa      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2202      	movs	r2, #2
 80063f4:	4013      	ands	r3, r2
 80063f6:	d1f1      	bne.n	80063dc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d100      	bne.n	8006402 <HAL_RCC_OscConfig+0x64a>
 8006400:	e09f      	b.n	8006542 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b0c      	cmp	r3, #12
 8006406:	d100      	bne.n	800640a <HAL_RCC_OscConfig+0x652>
 8006408:	e078      	b.n	80064fc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	2b02      	cmp	r3, #2
 8006410:	d159      	bne.n	80064c6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b04      	ldr	r3, [pc, #16]	; (8006428 <HAL_RCC_OscConfig+0x670>)
 8006418:	490c      	ldr	r1, [pc, #48]	; (800644c <HAL_RCC_OscConfig+0x694>)
 800641a:	400a      	ands	r2, r1
 800641c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641e:	f7fe fb3b 	bl	8004a98 <HAL_GetTick>
 8006422:	0003      	movs	r3, r0
 8006424:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006426:	e01c      	b.n	8006462 <HAL_RCC_OscConfig+0x6aa>
 8006428:	40021000 	.word	0x40021000
 800642c:	ffff1fff 	.word	0xffff1fff
 8006430:	fffffeff 	.word	0xfffffeff
 8006434:	40007000 	.word	0x40007000
 8006438:	fffffbff 	.word	0xfffffbff
 800643c:	00001388 	.word	0x00001388
 8006440:	efffffff 	.word	0xefffffff
 8006444:	40010000 	.word	0x40010000
 8006448:	ffffdfff 	.word	0xffffdfff
 800644c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006450:	f7fe fb22 	bl	8004a98 <HAL_GetTick>
 8006454:	0002      	movs	r2, r0
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e070      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006462:	4b3a      	ldr	r3, [pc, #232]	; (800654c <HAL_RCC_OscConfig+0x794>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	049b      	lsls	r3, r3, #18
 800646a:	4013      	ands	r3, r2
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800646e:	4b37      	ldr	r3, [pc, #220]	; (800654c <HAL_RCC_OscConfig+0x794>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	4a37      	ldr	r2, [pc, #220]	; (8006550 <HAL_RCC_OscConfig+0x798>)
 8006474:	4013      	ands	r3, r2
 8006476:	0019      	movs	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	431a      	orrs	r2, r3
 8006488:	4b30      	ldr	r3, [pc, #192]	; (800654c <HAL_RCC_OscConfig+0x794>)
 800648a:	430a      	orrs	r2, r1
 800648c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800648e:	4b2f      	ldr	r3, [pc, #188]	; (800654c <HAL_RCC_OscConfig+0x794>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b2e      	ldr	r3, [pc, #184]	; (800654c <HAL_RCC_OscConfig+0x794>)
 8006494:	2180      	movs	r1, #128	; 0x80
 8006496:	0449      	lsls	r1, r1, #17
 8006498:	430a      	orrs	r2, r1
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fe fafc 	bl	8004a98 <HAL_GetTick>
 80064a0:	0003      	movs	r3, r0
 80064a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a6:	f7fe faf7 	bl	8004a98 <HAL_GetTick>
 80064aa:	0002      	movs	r2, r0
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e045      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <HAL_RCC_OscConfig+0x794>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	2380      	movs	r3, #128	; 0x80
 80064be:	049b      	lsls	r3, r3, #18
 80064c0:	4013      	ands	r3, r2
 80064c2:	d0f0      	beq.n	80064a6 <HAL_RCC_OscConfig+0x6ee>
 80064c4:	e03d      	b.n	8006542 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c6:	4b21      	ldr	r3, [pc, #132]	; (800654c <HAL_RCC_OscConfig+0x794>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_RCC_OscConfig+0x794>)
 80064cc:	4921      	ldr	r1, [pc, #132]	; (8006554 <HAL_RCC_OscConfig+0x79c>)
 80064ce:	400a      	ands	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d2:	f7fe fae1 	bl	8004a98 <HAL_GetTick>
 80064d6:	0003      	movs	r3, r0
 80064d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fe fadc 	bl	8004a98 <HAL_GetTick>
 80064e0:	0002      	movs	r2, r0
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e02a      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064ee:	4b17      	ldr	r3, [pc, #92]	; (800654c <HAL_RCC_OscConfig+0x794>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	049b      	lsls	r3, r3, #18
 80064f6:	4013      	ands	r3, r2
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x724>
 80064fa:	e022      	b.n	8006542 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e01d      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006508:	4b10      	ldr	r3, [pc, #64]	; (800654c <HAL_RCC_OscConfig+0x794>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	025b      	lsls	r3, r3, #9
 8006514:	401a      	ands	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	429a      	cmp	r2, r3
 800651c:	d10f      	bne.n	800653e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	23f0      	movs	r3, #240	; 0xf0
 8006522:	039b      	lsls	r3, r3, #14
 8006524:	401a      	ands	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d107      	bne.n	800653e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	23c0      	movs	r3, #192	; 0xc0
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	401a      	ands	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d001      	beq.n	8006542 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	0018      	movs	r0, r3
 8006546:	46bd      	mov	sp, r7
 8006548:	b00a      	add	sp, #40	; 0x28
 800654a:	bdb0      	pop	{r4, r5, r7, pc}
 800654c:	40021000 	.word	0x40021000
 8006550:	ff02ffff 	.word	0xff02ffff
 8006554:	feffffff 	.word	0xfeffffff

08006558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e10d      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800656c:	4b88      	ldr	r3, [pc, #544]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2201      	movs	r2, #1
 8006572:	4013      	ands	r3, r2
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d911      	bls.n	800659e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657a:	4b85      	ldr	r3, [pc, #532]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2201      	movs	r2, #1
 8006580:	4393      	bics	r3, r2
 8006582:	0019      	movs	r1, r3
 8006584:	4b82      	ldr	r3, [pc, #520]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658c:	4b80      	ldr	r3, [pc, #512]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2201      	movs	r2, #1
 8006592:	4013      	ands	r3, r2
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d001      	beq.n	800659e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e0f4      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2202      	movs	r2, #2
 80065a4:	4013      	ands	r3, r2
 80065a6:	d009      	beq.n	80065bc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a8:	4b7a      	ldr	r3, [pc, #488]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	22f0      	movs	r2, #240	; 0xf0
 80065ae:	4393      	bics	r3, r2
 80065b0:	0019      	movs	r1, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4b77      	ldr	r3, [pc, #476]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 80065b8:	430a      	orrs	r2, r1
 80065ba:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2201      	movs	r2, #1
 80065c2:	4013      	ands	r3, r2
 80065c4:	d100      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x70>
 80065c6:	e089      	b.n	80066dc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065d0:	4b70      	ldr	r3, [pc, #448]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	029b      	lsls	r3, r3, #10
 80065d8:	4013      	ands	r3, r2
 80065da:	d120      	bne.n	800661e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0d3      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d107      	bne.n	80065f8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065e8:	4b6a      	ldr	r3, [pc, #424]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	049b      	lsls	r3, r3, #18
 80065f0:	4013      	ands	r3, r2
 80065f2:	d114      	bne.n	800661e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0c7      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d106      	bne.n	800660e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006600:	4b64      	ldr	r3, [pc, #400]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2204      	movs	r2, #4
 8006606:	4013      	ands	r3, r2
 8006608:	d109      	bne.n	800661e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e0bc      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800660e:	4b61      	ldr	r3, [pc, #388]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4013      	ands	r3, r2
 8006618:	d101      	bne.n	800661e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e0b4      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800661e:	4b5d      	ldr	r3, [pc, #372]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2203      	movs	r2, #3
 8006624:	4393      	bics	r3, r2
 8006626:	0019      	movs	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4b59      	ldr	r3, [pc, #356]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 800662e:	430a      	orrs	r2, r1
 8006630:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006632:	f7fe fa31 	bl	8004a98 <HAL_GetTick>
 8006636:	0003      	movs	r3, r0
 8006638:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d111      	bne.n	8006666 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006642:	e009      	b.n	8006658 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006644:	f7fe fa28 	bl	8004a98 <HAL_GetTick>
 8006648:	0002      	movs	r2, r0
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	4a52      	ldr	r2, [pc, #328]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e097      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006658:	4b4e      	ldr	r3, [pc, #312]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	220c      	movs	r2, #12
 800665e:	4013      	ands	r3, r2
 8006660:	2b08      	cmp	r3, #8
 8006662:	d1ef      	bne.n	8006644 <HAL_RCC_ClockConfig+0xec>
 8006664:	e03a      	b.n	80066dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b03      	cmp	r3, #3
 800666c:	d111      	bne.n	8006692 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800666e:	e009      	b.n	8006684 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006670:	f7fe fa12 	bl	8004a98 <HAL_GetTick>
 8006674:	0002      	movs	r2, r0
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	4a47      	ldr	r2, [pc, #284]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e081      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006684:	4b43      	ldr	r3, [pc, #268]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	220c      	movs	r2, #12
 800668a:	4013      	ands	r3, r2
 800668c:	2b0c      	cmp	r3, #12
 800668e:	d1ef      	bne.n	8006670 <HAL_RCC_ClockConfig+0x118>
 8006690:	e024      	b.n	80066dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d11b      	bne.n	80066d2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800669a:	e009      	b.n	80066b0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800669c:	f7fe f9fc 	bl	8004a98 <HAL_GetTick>
 80066a0:	0002      	movs	r2, r0
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	4a3c      	ldr	r2, [pc, #240]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e06b      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80066b0:	4b38      	ldr	r3, [pc, #224]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	220c      	movs	r2, #12
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d1ef      	bne.n	800669c <HAL_RCC_ClockConfig+0x144>
 80066bc:	e00e      	b.n	80066dc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066be:	f7fe f9eb 	bl	8004a98 <HAL_GetTick>
 80066c2:	0002      	movs	r2, r0
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	4a33      	ldr	r2, [pc, #204]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e05a      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80066d2:	4b30      	ldr	r3, [pc, #192]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	220c      	movs	r2, #12
 80066d8:	4013      	ands	r3, r2
 80066da:	d1f0      	bne.n	80066be <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066dc:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2201      	movs	r2, #1
 80066e2:	4013      	ands	r3, r2
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d211      	bcs.n	800670e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b29      	ldr	r3, [pc, #164]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2201      	movs	r2, #1
 80066f0:	4393      	bics	r3, r2
 80066f2:	0019      	movs	r1, r3
 80066f4:	4b26      	ldr	r3, [pc, #152]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fc:	4b24      	ldr	r3, [pc, #144]	; (8006790 <HAL_RCC_ClockConfig+0x238>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2201      	movs	r2, #1
 8006702:	4013      	ands	r3, r2
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d001      	beq.n	800670e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e03c      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2204      	movs	r2, #4
 8006714:	4013      	ands	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006718:	4b1e      	ldr	r3, [pc, #120]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 800671e:	4013      	ands	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	4b1b      	ldr	r3, [pc, #108]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006728:	430a      	orrs	r2, r1
 800672a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2208      	movs	r2, #8
 8006732:	4013      	ands	r3, r2
 8006734:	d00a      	beq.n	800674c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006736:	4b17      	ldr	r3, [pc, #92]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <HAL_RCC_ClockConfig+0x248>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	00da      	lsls	r2, r3, #3
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006748:	430a      	orrs	r2, r1
 800674a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800674c:	f000 f82e 	bl	80067ac <HAL_RCC_GetSysClockFreq>
 8006750:	0001      	movs	r1, r0
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <HAL_RCC_ClockConfig+0x23c>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	220f      	movs	r2, #15
 800675a:	4013      	ands	r3, r2
 800675c:	4a11      	ldr	r2, [pc, #68]	; (80067a4 <HAL_RCC_ClockConfig+0x24c>)
 800675e:	5cd3      	ldrb	r3, [r2, r3]
 8006760:	000a      	movs	r2, r1
 8006762:	40da      	lsrs	r2, r3
 8006764:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <HAL_RCC_ClockConfig+0x250>)
 8006766:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8006768:	250b      	movs	r5, #11
 800676a:	197c      	adds	r4, r7, r5
 800676c:	2000      	movs	r0, #0
 800676e:	f7fe f95d 	bl	8004a2c <HAL_InitTick>
 8006772:	0003      	movs	r3, r0
 8006774:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006776:	197b      	adds	r3, r7, r5
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800677e:	230b      	movs	r3, #11
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	e000      	b.n	8006788 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	0018      	movs	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	b004      	add	sp, #16
 800678e:	bdb0      	pop	{r4, r5, r7, pc}
 8006790:	40022000 	.word	0x40022000
 8006794:	40021000 	.word	0x40021000
 8006798:	00001388 	.word	0x00001388
 800679c:	fffff8ff 	.word	0xfffff8ff
 80067a0:	ffffc7ff 	.word	0xffffc7ff
 80067a4:	08009dfc 	.word	0x08009dfc
 80067a8:	20000008 	.word	0x20000008

080067ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80067b2:	4b3b      	ldr	r3, [pc, #236]	; (80068a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	220c      	movs	r2, #12
 80067bc:	4013      	ands	r3, r2
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d00e      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x34>
 80067c2:	2b0c      	cmp	r3, #12
 80067c4:	d00f      	beq.n	80067e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d157      	bne.n	800687a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80067ca:	4b35      	ldr	r3, [pc, #212]	; (80068a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2210      	movs	r2, #16
 80067d0:	4013      	ands	r3, r2
 80067d2:	d002      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80067d4:	4b33      	ldr	r3, [pc, #204]	; (80068a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80067d6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80067d8:	e05d      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80067da:	4b33      	ldr	r3, [pc, #204]	; (80068a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80067dc:	613b      	str	r3, [r7, #16]
      break;
 80067de:	e05a      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067e0:	4b32      	ldr	r3, [pc, #200]	; (80068ac <HAL_RCC_GetSysClockFreq+0x100>)
 80067e2:	613b      	str	r3, [r7, #16]
      break;
 80067e4:	e057      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	0c9b      	lsrs	r3, r3, #18
 80067ea:	220f      	movs	r2, #15
 80067ec:	4013      	ands	r3, r2
 80067ee:	4a30      	ldr	r2, [pc, #192]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80067f0:	5cd3      	ldrb	r3, [r2, r3]
 80067f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	0d9b      	lsrs	r3, r3, #22
 80067f8:	2203      	movs	r2, #3
 80067fa:	4013      	ands	r3, r2
 80067fc:	3301      	adds	r3, #1
 80067fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	025b      	lsls	r3, r3, #9
 8006808:	4013      	ands	r3, r2
 800680a:	d00f      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	000a      	movs	r2, r1
 8006810:	0152      	lsls	r2, r2, #5
 8006812:	1a52      	subs	r2, r2, r1
 8006814:	0193      	lsls	r3, r2, #6
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	185b      	adds	r3, r3, r1
 800681c:	025b      	lsls	r3, r3, #9
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	0018      	movs	r0, r3
 8006822:	f7f9 fc79 	bl	8000118 <__udivsi3>
 8006826:	0003      	movs	r3, r0
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e023      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800682c:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2210      	movs	r2, #16
 8006832:	4013      	ands	r3, r2
 8006834:	d00f      	beq.n	8006856 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	000a      	movs	r2, r1
 800683a:	0152      	lsls	r2, r2, #5
 800683c:	1a52      	subs	r2, r2, r1
 800683e:	0193      	lsls	r3, r2, #6
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	185b      	adds	r3, r3, r1
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	0018      	movs	r0, r3
 800684c:	f7f9 fc64 	bl	8000118 <__udivsi3>
 8006850:	0003      	movs	r3, r0
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e00e      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	000a      	movs	r2, r1
 800685a:	0152      	lsls	r2, r2, #5
 800685c:	1a52      	subs	r2, r2, r1
 800685e:	0193      	lsls	r3, r2, #6
 8006860:	1a9b      	subs	r3, r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	185b      	adds	r3, r3, r1
 8006866:	029b      	lsls	r3, r3, #10
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	0018      	movs	r0, r3
 800686c:	f7f9 fc54 	bl	8000118 <__udivsi3>
 8006870:	0003      	movs	r3, r0
 8006872:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	613b      	str	r3, [r7, #16]
      break;
 8006878:	e00d      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	0b5b      	lsrs	r3, r3, #13
 8006880:	2207      	movs	r2, #7
 8006882:	4013      	ands	r3, r2
 8006884:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	0212      	lsls	r2, r2, #8
 800688e:	409a      	lsls	r2, r3
 8006890:	0013      	movs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
      break;
 8006894:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006896:	693b      	ldr	r3, [r7, #16]
}
 8006898:	0018      	movs	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	b006      	add	sp, #24
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000
 80068a4:	003d0900 	.word	0x003d0900
 80068a8:	00f42400 	.word	0x00f42400
 80068ac:	007a1200 	.word	0x007a1200
 80068b0:	08009e14 	.word	0x08009e14

080068b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b8:	4b02      	ldr	r3, [pc, #8]	; (80068c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80068ba:	681b      	ldr	r3, [r3, #0]
}
 80068bc:	0018      	movs	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	20000008 	.word	0x20000008

080068c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068cc:	f7ff fff2 	bl	80068b4 <HAL_RCC_GetHCLKFreq>
 80068d0:	0001      	movs	r1, r0
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	2207      	movs	r2, #7
 80068da:	4013      	ands	r3, r2
 80068dc:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068de:	5cd3      	ldrb	r3, [r2, r3]
 80068e0:	40d9      	lsrs	r1, r3
 80068e2:	000b      	movs	r3, r1
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	40021000 	.word	0x40021000
 80068f0:	08009e0c 	.word	0x08009e0c

080068f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068f8:	f7ff ffdc 	bl	80068b4 <HAL_RCC_GetHCLKFreq>
 80068fc:	0001      	movs	r1, r0
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	0adb      	lsrs	r3, r3, #11
 8006904:	2207      	movs	r2, #7
 8006906:	4013      	ands	r3, r2
 8006908:	4a04      	ldr	r2, [pc, #16]	; (800691c <HAL_RCC_GetPCLK2Freq+0x28>)
 800690a:	5cd3      	ldrb	r3, [r2, r3]
 800690c:	40d9      	lsrs	r1, r3
 800690e:	000b      	movs	r3, r1
}
 8006910:	0018      	movs	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	40021000 	.word	0x40021000
 800691c:	08009e0c 	.word	0x08009e0c

08006920 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2220      	movs	r2, #32
 800692e:	4013      	ands	r3, r2
 8006930:	d106      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	2380      	movs	r3, #128	; 0x80
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	4013      	ands	r3, r2
 800693c:	d100      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800693e:	e0dd      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8006940:	2317      	movs	r3, #23
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006948:	4ba4      	ldr	r3, [pc, #656]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800694a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	055b      	lsls	r3, r3, #21
 8006950:	4013      	ands	r3, r2
 8006952:	d10a      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006954:	4ba1      	ldr	r3, [pc, #644]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006958:	4ba0      	ldr	r3, [pc, #640]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	0549      	lsls	r1, r1, #21
 800695e:	430a      	orrs	r2, r1
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006962:	2317      	movs	r3, #23
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	2201      	movs	r2, #1
 8006968:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696a:	4b9d      	ldr	r3, [pc, #628]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	2380      	movs	r3, #128	; 0x80
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	4013      	ands	r3, r2
 8006974:	d11a      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006976:	4b9a      	ldr	r3, [pc, #616]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b99      	ldr	r3, [pc, #612]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	0049      	lsls	r1, r1, #1
 8006980:	430a      	orrs	r2, r1
 8006982:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006984:	f7fe f888 	bl	8004a98 <HAL_GetTick>
 8006988:	0003      	movs	r3, r0
 800698a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698c:	e008      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698e:	f7fe f883 	bl	8004a98 <HAL_GetTick>
 8006992:	0002      	movs	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b64      	cmp	r3, #100	; 0x64
 800699a:	d901      	bls.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e118      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a0:	4b8f      	ldr	r3, [pc, #572]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	4013      	ands	r3, r2
 80069aa:	d0f0      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80069ac:	4b8b      	ldr	r3, [pc, #556]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	23c0      	movs	r3, #192	; 0xc0
 80069b2:	039b      	lsls	r3, r3, #14
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	23c0      	movs	r3, #192	; 0xc0
 80069be:	039b      	lsls	r3, r3, #14
 80069c0:	4013      	ands	r3, r2
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d107      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	23c0      	movs	r3, #192	; 0xc0
 80069ce:	039b      	lsls	r3, r3, #14
 80069d0:	4013      	ands	r3, r2
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d013      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	23c0      	movs	r3, #192	; 0xc0
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	401a      	ands	r2, r3
 80069e2:	23c0      	movs	r3, #192	; 0xc0
 80069e4:	029b      	lsls	r3, r3, #10
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d10a      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069ea:	4b7c      	ldr	r3, [pc, #496]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	2380      	movs	r3, #128	; 0x80
 80069f0:	029b      	lsls	r3, r3, #10
 80069f2:	401a      	ands	r2, r3
 80069f4:	2380      	movs	r3, #128	; 0x80
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d101      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0e8      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006a00:	4b76      	ldr	r3, [pc, #472]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a04:	23c0      	movs	r3, #192	; 0xc0
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	4013      	ands	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d049      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	23c0      	movs	r3, #192	; 0xc0
 8006a18:	029b      	lsls	r3, r3, #10
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d004      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2220      	movs	r2, #32
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d10d      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	23c0      	movs	r3, #192	; 0xc0
 8006a32:	029b      	lsls	r3, r3, #10
 8006a34:	4013      	ands	r3, r2
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d034      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	4013      	ands	r3, r2
 8006a46:	d02e      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006a48:	4b64      	ldr	r3, [pc, #400]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4c:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a52:	4b62      	ldr	r3, [pc, #392]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a56:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a58:	2180      	movs	r1, #128	; 0x80
 8006a5a:	0309      	lsls	r1, r1, #12
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a60:	4b5e      	ldr	r3, [pc, #376]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a64:	4b5d      	ldr	r3, [pc, #372]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a66:	4960      	ldr	r1, [pc, #384]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006a68:	400a      	ands	r2, r1
 8006a6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006a6c:	4b5b      	ldr	r3, [pc, #364]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	2380      	movs	r3, #128	; 0x80
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d014      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7c:	f7fe f80c 	bl	8004a98 <HAL_GetTick>
 8006a80:	0003      	movs	r3, r0
 8006a82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a84:	e009      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a86:	f7fe f807 	bl	8004a98 <HAL_GetTick>
 8006a8a:	0002      	movs	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	4a56      	ldr	r2, [pc, #344]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e09b      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a9a:	4b50      	ldr	r3, [pc, #320]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d0ef      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	23c0      	movs	r3, #192	; 0xc0
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	401a      	ands	r2, r3
 8006ab0:	23c0      	movs	r3, #192	; 0xc0
 8006ab2:	029b      	lsls	r3, r3, #10
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d10c      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006ab8:	4b48      	ldr	r3, [pc, #288]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4c      	ldr	r2, [pc, #304]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	23c0      	movs	r3, #192	; 0xc0
 8006ac8:	039b      	lsls	r3, r3, #14
 8006aca:	401a      	ands	r2, r3
 8006acc:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	4b42      	ldr	r3, [pc, #264]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ad4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	23c0      	movs	r3, #192	; 0xc0
 8006adc:	029b      	lsls	r3, r3, #10
 8006ade:	401a      	ands	r2, r3
 8006ae0:	4b3e      	ldr	r3, [pc, #248]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ae6:	2317      	movs	r3, #23
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d105      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af0:	4b3a      	ldr	r3, [pc, #232]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af4:	4b39      	ldr	r3, [pc, #228]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006af6:	493f      	ldr	r1, [pc, #252]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006af8:	400a      	ands	r2, r1
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2201      	movs	r2, #1
 8006b02:	4013      	ands	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b06:	4b35      	ldr	r3, [pc, #212]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	0019      	movs	r1, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	4b31      	ldr	r3, [pc, #196]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b16:	430a      	orrs	r2, r1
 8006b18:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	4013      	ands	r3, r2
 8006b22:	d009      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b24:	4b2d      	ldr	r3, [pc, #180]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b28:	220c      	movs	r2, #12
 8006b2a:	4393      	bics	r3, r2
 8006b2c:	0019      	movs	r1, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b34:	430a      	orrs	r2, r1
 8006b36:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d009      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b42:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b46:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	0019      	movs	r1, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	4b22      	ldr	r3, [pc, #136]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b52:	430a      	orrs	r2, r1
 8006b54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	d009      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b60:	4b1e      	ldr	r3, [pc, #120]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b64:	4a25      	ldr	r2, [pc, #148]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	0019      	movs	r1, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b70:	430a      	orrs	r2, r1
 8006b72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b80:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b84:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	0019      	movs	r1, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69da      	ldr	r2, [r3, #28]
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006b90:	430a      	orrs	r2, r1
 8006b92:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2240      	movs	r2, #64	; 0x40
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	0019      	movs	r1, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006bbc:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc0:	4a10      	ldr	r2, [pc, #64]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1a      	ldr	r2, [r3, #32]
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b006      	add	sp, #24
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	40007000 	.word	0x40007000
 8006be4:	fffcffff 	.word	0xfffcffff
 8006be8:	fff7ffff 	.word	0xfff7ffff
 8006bec:	00001388 	.word	0x00001388
 8006bf0:	ffcfffff 	.word	0xffcfffff
 8006bf4:	efffffff 	.word	0xefffffff
 8006bf8:	fffff3ff 	.word	0xfffff3ff
 8006bfc:	ffffcfff 	.word	0xffffcfff
 8006c00:	fbffffff 	.word	0xfbffffff
 8006c04:	fff3ffff 	.word	0xfff3ffff

08006c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e059      	b.n	8006cce <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2251      	movs	r2, #81	; 0x51
 8006c24:	5c9b      	ldrb	r3, [r3, r2]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2250      	movs	r2, #80	; 0x50
 8006c30:	2100      	movs	r1, #0
 8006c32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f7fc f954 	bl	8002ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2251      	movs	r2, #81	; 0x51
 8006c40:	2102      	movs	r1, #2
 8006c42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2140      	movs	r1, #64	; 0x40
 8006c50:	438a      	bics	r2, r1
 8006c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6999      	ldr	r1, [r3, #24]
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	400b      	ands	r3, r1
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	0011      	movs	r1, r2
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	0c1b      	lsrs	r3, r3, #16
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	0019      	movs	r1, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4907      	ldr	r1, [pc, #28]	; (8006cd8 <HAL_SPI_Init+0xd0>)
 8006cba:	400a      	ands	r2, r1
 8006cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2251      	movs	r2, #81	; 0x51
 8006cc8:	2101      	movs	r1, #1
 8006cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	0018      	movs	r0, r3
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b002      	add	sp, #8
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	fffff7ff 	.word	0xfffff7ff

08006cdc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	1dbb      	adds	r3, r7, #6
 8006cea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cec:	231f      	movs	r3, #31
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2250      	movs	r2, #80	; 0x50
 8006cf8:	5c9b      	ldrb	r3, [r3, r2]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_SPI_Transmit+0x26>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e136      	b.n	8006f70 <HAL_SPI_Transmit+0x294>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2250      	movs	r2, #80	; 0x50
 8006d06:	2101      	movs	r1, #1
 8006d08:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d0a:	f7fd fec5 	bl	8004a98 <HAL_GetTick>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d12:	2316      	movs	r3, #22
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	1dba      	adds	r2, r7, #6
 8006d18:	8812      	ldrh	r2, [r2, #0]
 8006d1a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2251      	movs	r2, #81	; 0x51
 8006d20:	5c9b      	ldrb	r3, [r3, r2]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d004      	beq.n	8006d32 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006d28:	231f      	movs	r3, #31
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d30:	e113      	b.n	8006f5a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_SPI_Transmit+0x64>
 8006d38:	1dbb      	adds	r3, r7, #6
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006d40:	231f      	movs	r3, #31
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	2201      	movs	r2, #1
 8006d46:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d48:	e107      	b.n	8006f5a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2251      	movs	r2, #81	; 0x51
 8006d4e:	2103      	movs	r1, #3
 8006d50:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1dba      	adds	r2, r7, #6
 8006d62:	8812      	ldrh	r2, [r2, #0]
 8006d64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	1dba      	adds	r2, r7, #6
 8006d6a:	8812      	ldrh	r2, [r2, #0]
 8006d6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d108      	bne.n	8006daa <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	01c9      	lsls	r1, r1, #7
 8006da6:	430a      	orrs	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2240      	movs	r2, #64	; 0x40
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d007      	beq.n	8006dc8 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2140      	movs	r1, #64	; 0x40
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d14e      	bne.n	8006e72 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_SPI_Transmit+0x10a>
 8006ddc:	2316      	movs	r3, #22
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d13f      	bne.n	8006e66 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	881a      	ldrh	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e0a:	e02c      	b.n	8006e66 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2202      	movs	r2, #2
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d112      	bne.n	8006e40 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	881a      	ldrh	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	1c9a      	adds	r2, r3, #2
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e3e:	e012      	b.n	8006e66 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e40:	f7fd fe2a 	bl	8004a98 <HAL_GetTick>
 8006e44:	0002      	movs	r2, r0
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d802      	bhi.n	8006e56 <HAL_SPI_Transmit+0x17a>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	3301      	adds	r3, #1
 8006e54:	d102      	bne.n	8006e5c <HAL_SPI_Transmit+0x180>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8006e5c:	231f      	movs	r3, #31
 8006e5e:	18fb      	adds	r3, r7, r3
 8006e60:	2203      	movs	r2, #3
 8006e62:	701a      	strb	r2, [r3, #0]
          goto error;
 8006e64:	e079      	b.n	8006f5a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1cd      	bne.n	8006e0c <HAL_SPI_Transmit+0x130>
 8006e70:	e04f      	b.n	8006f12 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <HAL_SPI_Transmit+0x1a8>
 8006e7a:	2316      	movs	r3, #22
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d141      	bne.n	8006f08 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006eaa:	e02d      	b.n	8006f08 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d113      	bne.n	8006ee2 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	330c      	adds	r3, #12
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ee0:	e012      	b.n	8006f08 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee2:	f7fd fdd9 	bl	8004a98 <HAL_GetTick>
 8006ee6:	0002      	movs	r2, r0
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d802      	bhi.n	8006ef8 <HAL_SPI_Transmit+0x21c>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	d102      	bne.n	8006efe <HAL_SPI_Transmit+0x222>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d104      	bne.n	8006f08 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006efe:	231f      	movs	r3, #31
 8006f00:	18fb      	adds	r3, r7, r3
 8006f02:	2203      	movs	r2, #3
 8006f04:	701a      	strb	r2, [r3, #0]
          goto error;
 8006f06:	e028      	b.n	8006f5a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1cc      	bne.n	8006eac <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 fbe1 	bl	80076e0 <SPI_EndRxTxTransaction>
 8006f1e:	1e03      	subs	r3, r0, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2220      	movs	r2, #32
 8006f26:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006f4e:	231f      	movs	r3, #31
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	2201      	movs	r2, #1
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e000      	b.n	8006f5a <HAL_SPI_Transmit+0x27e>
  }

error:
 8006f58:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2251      	movs	r2, #81	; 0x51
 8006f5e:	2101      	movs	r1, #1
 8006f60:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2250      	movs	r2, #80	; 0x50
 8006f66:	2100      	movs	r1, #0
 8006f68:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006f6a:	231f      	movs	r3, #31
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	781b      	ldrb	r3, [r3, #0]
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b008      	add	sp, #32
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	1dbb      	adds	r3, r7, #6
 8006f86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f88:	2317      	movs	r3, #23
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	2382      	movs	r3, #130	; 0x82
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d113      	bne.n	8006fc4 <HAL_SPI_Receive+0x4c>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2251      	movs	r2, #81	; 0x51
 8006fa8:	2104      	movs	r1, #4
 8006faa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fac:	1dbb      	adds	r3, r7, #6
 8006fae:	881c      	ldrh	r4, [r3, #0]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	0023      	movs	r3, r4
 8006fbc:	f000 f8fa 	bl	80071b4 <HAL_SPI_TransmitReceive>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	e0f1      	b.n	80071a8 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2250      	movs	r2, #80	; 0x50
 8006fc8:	5c9b      	ldrb	r3, [r3, r2]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_SPI_Receive+0x5a>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e0ea      	b.n	80071a8 <HAL_SPI_Receive+0x230>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2250      	movs	r2, #80	; 0x50
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fda:	f7fd fd5d 	bl	8004a98 <HAL_GetTick>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2251      	movs	r2, #81	; 0x51
 8006fe6:	5c9b      	ldrb	r3, [r3, r2]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d004      	beq.n	8006ff8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006fee:	2317      	movs	r3, #23
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ff6:	e0cc      	b.n	8007192 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_SPI_Receive+0x8e>
 8006ffe:	1dbb      	adds	r3, r7, #6
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007006:	2317      	movs	r3, #23
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	2201      	movs	r2, #1
 800700c:	701a      	strb	r2, [r3, #0]
    goto error;
 800700e:	e0c0      	b.n	8007192 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2251      	movs	r2, #81	; 0x51
 8007014:	2104      	movs	r1, #4
 8007016:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1dba      	adds	r2, r7, #6
 8007028:	8812      	ldrh	r2, [r2, #0]
 800702a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1dba      	adds	r2, r7, #6
 8007030:	8812      	ldrh	r2, [r2, #0]
 8007032:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	429a      	cmp	r2, r3
 800705c:	d107      	bne.n	800706e <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4951      	ldr	r1, [pc, #324]	; (80071b0 <HAL_SPI_Receive+0x238>)
 800706a:	400a      	ands	r2, r1
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2240      	movs	r2, #64	; 0x40
 8007076:	4013      	ands	r3, r2
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d007      	beq.n	800708c <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2140      	movs	r1, #64	; 0x40
 8007088:	430a      	orrs	r2, r1
 800708a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d164      	bne.n	800715e <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007094:	e02f      	b.n	80070f6 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2201      	movs	r2, #1
 800709e:	4013      	ands	r3, r2
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d115      	bne.n	80070d0 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	001a      	movs	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	7812      	ldrb	r2, [r2, #0]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070ce:	e012      	b.n	80070f6 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070d0:	f7fd fce2 	bl	8004a98 <HAL_GetTick>
 80070d4:	0002      	movs	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d802      	bhi.n	80070e6 <HAL_SPI_Receive+0x16e>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	3301      	adds	r3, #1
 80070e4:	d102      	bne.n	80070ec <HAL_SPI_Receive+0x174>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 80070ec:	2317      	movs	r3, #23
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	2203      	movs	r2, #3
 80070f2:	701a      	strb	r2, [r3, #0]
          goto error;
 80070f4:	e04d      	b.n	8007192 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1ca      	bne.n	8007096 <HAL_SPI_Receive+0x11e>
 8007100:	e032      	b.n	8007168 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2201      	movs	r2, #1
 800710a:	4013      	ands	r3, r2
 800710c:	2b01      	cmp	r3, #1
 800710e:	d113      	bne.n	8007138 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	b292      	uxth	r2, r2
 800711c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007136:	e012      	b.n	800715e <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007138:	f7fd fcae 	bl	8004a98 <HAL_GetTick>
 800713c:	0002      	movs	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d802      	bhi.n	800714e <HAL_SPI_Receive+0x1d6>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	d102      	bne.n	8007154 <HAL_SPI_Receive+0x1dc>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8007154:	2317      	movs	r3, #23
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	2203      	movs	r2, #3
 800715a:	701a      	strb	r2, [r3, #0]
          goto error;
 800715c:	e019      	b.n	8007192 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1cc      	bne.n	8007102 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	0018      	movs	r0, r3
 8007170:	f000 fa4c 	bl	800760c <SPI_EndRxTransaction>
 8007174:	1e03      	subs	r3, r0, #0
 8007176:	d002      	beq.n	800717e <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8007186:	2317      	movs	r3, #23
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e000      	b.n	8007192 <HAL_SPI_Receive+0x21a>
  }

error :
 8007190:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2251      	movs	r2, #81	; 0x51
 8007196:	2101      	movs	r1, #1
 8007198:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2250      	movs	r2, #80	; 0x50
 800719e:	2100      	movs	r1, #0
 80071a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071a2:	2317      	movs	r3, #23
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	781b      	ldrb	r3, [r3, #0]
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b007      	add	sp, #28
 80071ae:	bd90      	pop	{r4, r7, pc}
 80071b0:	ffffbfff 	.word	0xffffbfff

080071b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	; 0x30
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	001a      	movs	r2, r3
 80071c2:	1cbb      	adds	r3, r7, #2
 80071c4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071c6:	2301      	movs	r3, #1
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071ca:	232b      	movs	r3, #43	; 0x2b
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2250      	movs	r2, #80	; 0x50
 80071d6:	5c9b      	ldrb	r3, [r3, r2]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x2c>
 80071dc:	2302      	movs	r3, #2
 80071de:	e1a1      	b.n	8007524 <HAL_SPI_TransmitReceive+0x370>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2250      	movs	r2, #80	; 0x50
 80071e4:	2101      	movs	r1, #1
 80071e6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071e8:	f7fd fc56 	bl	8004a98 <HAL_GetTick>
 80071ec:	0003      	movs	r3, r0
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071f0:	2023      	movs	r0, #35	; 0x23
 80071f2:	183b      	adds	r3, r7, r0
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	2151      	movs	r1, #81	; 0x51
 80071f8:	5c52      	ldrb	r2, [r2, r1]
 80071fa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007202:	231a      	movs	r3, #26
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	1cba      	adds	r2, r7, #2
 8007208:	8812      	ldrh	r2, [r2, #0]
 800720a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800720c:	183b      	adds	r3, r7, r0
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d012      	beq.n	800723a <HAL_SPI_TransmitReceive+0x86>
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	2382      	movs	r3, #130	; 0x82
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	429a      	cmp	r2, r3
 800721c:	d108      	bne.n	8007230 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <HAL_SPI_TransmitReceive+0x7c>
 8007226:	2323      	movs	r3, #35	; 0x23
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b04      	cmp	r3, #4
 800722e:	d004      	beq.n	800723a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8007230:	232b      	movs	r3, #43	; 0x2b
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	2202      	movs	r2, #2
 8007236:	701a      	strb	r2, [r3, #0]
    goto error;
 8007238:	e169      	b.n	800750e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <HAL_SPI_TransmitReceive+0x9a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_SPI_TransmitReceive+0x9a>
 8007246:	1cbb      	adds	r3, r7, #2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800724e:	232b      	movs	r3, #43	; 0x2b
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]
    goto error;
 8007256:	e15a      	b.n	800750e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2251      	movs	r2, #81	; 0x51
 800725c:	5c9b      	ldrb	r3, [r3, r2]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b04      	cmp	r3, #4
 8007262:	d003      	beq.n	800726c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2251      	movs	r2, #81	; 0x51
 8007268:	2105      	movs	r1, #5
 800726a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	1cba      	adds	r2, r7, #2
 800727c:	8812      	ldrh	r2, [r2, #0]
 800727e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1cba      	adds	r2, r7, #2
 8007284:	8812      	ldrh	r2, [r2, #0]
 8007286:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1cba      	adds	r2, r7, #2
 8007292:	8812      	ldrh	r2, [r2, #0]
 8007294:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1cba      	adds	r2, r7, #2
 800729a:	8812      	ldrh	r2, [r2, #0]
 800729c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2240      	movs	r2, #64	; 0x40
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d007      	beq.n	80072c8 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2140      	movs	r1, #64	; 0x40
 80072c4:	430a      	orrs	r2, r1
 80072c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	2380      	movs	r3, #128	; 0x80
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d000      	beq.n	80072d6 <HAL_SPI_TransmitReceive+0x122>
 80072d4:	e07a      	b.n	80073cc <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x134>
 80072de:	231a      	movs	r3, #26
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d166      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	881a      	ldrh	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	1c9a      	adds	r2, r3, #2
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800730c:	e053      	b.n	80073b6 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2202      	movs	r2, #2
 8007316:	4013      	ands	r3, r2
 8007318:	2b02      	cmp	r3, #2
 800731a:	d11b      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x1a0>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d016      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x1a0>
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d113      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	881a      	ldrh	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	1c9a      	adds	r2, r3, #2
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2201      	movs	r2, #1
 800735c:	4013      	ands	r3, r2
 800735e:	2b01      	cmp	r3, #1
 8007360:	d119      	bne.n	8007396 <HAL_SPI_TransmitReceive+0x1e2>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d014      	beq.n	8007396 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	b292      	uxth	r2, r2
 8007378:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	1c9a      	adds	r2, r3, #2
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007392:	2301      	movs	r3, #1
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007396:	f7fd fb7f 	bl	8004a98 <HAL_GetTick>
 800739a:	0002      	movs	r2, r0
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d807      	bhi.n	80073b6 <HAL_SPI_TransmitReceive+0x202>
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	3301      	adds	r3, #1
 80073aa:	d004      	beq.n	80073b6 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80073ac:	232b      	movs	r3, #43	; 0x2b
 80073ae:	18fb      	adds	r3, r7, r3
 80073b0:	2203      	movs	r2, #3
 80073b2:	701a      	strb	r2, [r3, #0]
        goto error;
 80073b4:	e0ab      	b.n	800750e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1a6      	bne.n	800730e <HAL_SPI_TransmitReceive+0x15a>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1a1      	bne.n	800730e <HAL_SPI_TransmitReceive+0x15a>
 80073ca:	e07f      	b.n	80074cc <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x22c>
 80073d4:	231a      	movs	r3, #26
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d000      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x22c>
 80073de:	e06b      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007406:	e057      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2202      	movs	r2, #2
 8007410:	4013      	ands	r3, r2
 8007412:	2b02      	cmp	r3, #2
 8007414:	d11c      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x29c>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d017      	beq.n	8007450 <HAL_SPI_TransmitReceive+0x29c>
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d114      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2201      	movs	r2, #1
 8007458:	4013      	ands	r3, r2
 800745a:	2b01      	cmp	r3, #1
 800745c:	d119      	bne.n	8007492 <HAL_SPI_TransmitReceive+0x2de>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d014      	beq.n	8007492 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800748e:	2301      	movs	r3, #1
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007492:	f7fd fb01 	bl	8004a98 <HAL_GetTick>
 8007496:	0002      	movs	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800749e:	429a      	cmp	r2, r3
 80074a0:	d802      	bhi.n	80074a8 <HAL_SPI_TransmitReceive+0x2f4>
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	3301      	adds	r3, #1
 80074a6:	d102      	bne.n	80074ae <HAL_SPI_TransmitReceive+0x2fa>
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80074ae:	232b      	movs	r3, #43	; 0x2b
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	2203      	movs	r2, #3
 80074b4:	701a      	strb	r2, [r3, #0]
        goto error;
 80074b6:	e02a      	b.n	800750e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1a2      	bne.n	8007408 <HAL_SPI_TransmitReceive+0x254>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d19d      	bne.n	8007408 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	0018      	movs	r0, r3
 80074d4:	f000 f904 	bl	80076e0 <SPI_EndRxTxTransaction>
 80074d8:	1e03      	subs	r3, r0, #0
 80074da:	d007      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80074dc:	232b      	movs	r3, #43	; 0x2b
 80074de:	18fb      	adds	r3, r7, r3
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80074ea:	e010      	b.n	800750e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10b      	bne.n	800750c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	e000      	b.n	800750e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800750c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2251      	movs	r2, #81	; 0x51
 8007512:	2101      	movs	r1, #1
 8007514:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2250      	movs	r2, #80	; 0x50
 800751a:	2100      	movs	r1, #0
 800751c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800751e:	232b      	movs	r3, #43	; 0x2b
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	781b      	ldrb	r3, [r3, #0]
}
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b00c      	add	sp, #48	; 0x30
 800752a:	bd80      	pop	{r7, pc}

0800752c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	1dfb      	adds	r3, r7, #7
 800753a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800753c:	e050      	b.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	d04d      	beq.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007544:	f7fd faa8 	bl	8004a98 <HAL_GetTick>
 8007548:	0002      	movs	r2, r0
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d902      	bls.n	800755a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d142      	bne.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	21e0      	movs	r1, #224	; 0xe0
 8007566:	438a      	bics	r2, r1
 8007568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	2382      	movs	r3, #130	; 0x82
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	429a      	cmp	r2, r3
 8007574:	d113      	bne.n	800759e <SPI_WaitFlagStateUntilTimeout+0x72>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	2380      	movs	r3, #128	; 0x80
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	429a      	cmp	r2, r3
 8007580:	d005      	beq.n	800758e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	2380      	movs	r3, #128	; 0x80
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	429a      	cmp	r2, r3
 800758c:	d107      	bne.n	800759e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2140      	movs	r1, #64	; 0x40
 800759a:	438a      	bics	r2, r1
 800759c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	019b      	lsls	r3, r3, #6
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d110      	bne.n	80075cc <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4914      	ldr	r1, [pc, #80]	; (8007608 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80075b6:	400a      	ands	r2, r1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	0189      	lsls	r1, r1, #6
 80075c8:	430a      	orrs	r2, r1
 80075ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2251      	movs	r2, #81	; 0x51
 80075d0:	2101      	movs	r1, #1
 80075d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2250      	movs	r2, #80	; 0x50
 80075d8:	2100      	movs	r1, #0
 80075da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e00f      	b.n	8007600 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	4013      	ands	r3, r2
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	425a      	negs	r2, r3
 80075f0:	4153      	adcs	r3, r2
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	001a      	movs	r2, r3
 80075f6:	1dfb      	adds	r3, r7, #7
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d19f      	bne.n	800753e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	b004      	add	sp, #16
 8007606:	bd80      	pop	{r7, pc}
 8007608:	ffffdfff 	.word	0xffffdfff

0800760c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af02      	add	r7, sp, #8
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	2382      	movs	r3, #130	; 0x82
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	429a      	cmp	r2, r3
 8007622:	d113      	bne.n	800764c <SPI_EndRxTransaction+0x40>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	2380      	movs	r3, #128	; 0x80
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	429a      	cmp	r2, r3
 800762e:	d005      	beq.n	800763c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	429a      	cmp	r2, r3
 800763a:	d107      	bne.n	800764c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2140      	movs	r1, #64	; 0x40
 8007648:	438a      	bics	r2, r1
 800764a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	2382      	movs	r3, #130	; 0x82
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	429a      	cmp	r2, r3
 8007656:	d12b      	bne.n	80076b0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	429a      	cmp	r2, r3
 8007662:	d012      	beq.n	800768a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	0013      	movs	r3, r2
 800766e:	2200      	movs	r2, #0
 8007670:	2180      	movs	r1, #128	; 0x80
 8007672:	f7ff ff5b 	bl	800752c <SPI_WaitFlagStateUntilTimeout>
 8007676:	1e03      	subs	r3, r0, #0
 8007678:	d02d      	beq.n	80076d6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	2220      	movs	r2, #32
 8007680:	431a      	orrs	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e026      	b.n	80076d8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	0013      	movs	r3, r2
 8007694:	2200      	movs	r2, #0
 8007696:	2101      	movs	r1, #1
 8007698:	f7ff ff48 	bl	800752c <SPI_WaitFlagStateUntilTimeout>
 800769c:	1e03      	subs	r3, r0, #0
 800769e:	d01a      	beq.n	80076d6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a4:	2220      	movs	r2, #32
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e013      	b.n	80076d8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	0013      	movs	r3, r2
 80076ba:	2200      	movs	r2, #0
 80076bc:	2101      	movs	r1, #1
 80076be:	f7ff ff35 	bl	800752c <SPI_WaitFlagStateUntilTimeout>
 80076c2:	1e03      	subs	r3, r0, #0
 80076c4:	d007      	beq.n	80076d6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	2220      	movs	r2, #32
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e000      	b.n	80076d8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	0018      	movs	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	b004      	add	sp, #16
 80076de:	bd80      	pop	{r7, pc}

080076e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	2382      	movs	r3, #130	; 0x82
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d112      	bne.n	800771e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	0013      	movs	r3, r2
 8007702:	2200      	movs	r2, #0
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	f7ff ff11 	bl	800752c <SPI_WaitFlagStateUntilTimeout>
 800770a:	1e03      	subs	r3, r0, #0
 800770c:	d020      	beq.n	8007750 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007712:	2220      	movs	r2, #32
 8007714:	431a      	orrs	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e019      	b.n	8007752 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2251      	movs	r2, #81	; 0x51
 8007722:	5c9b      	ldrb	r3, [r3, r2]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b05      	cmp	r3, #5
 8007728:	d112      	bne.n	8007750 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	0013      	movs	r3, r2
 8007734:	2200      	movs	r2, #0
 8007736:	2101      	movs	r1, #1
 8007738:	f7ff fef8 	bl	800752c <SPI_WaitFlagStateUntilTimeout>
 800773c:	1e03      	subs	r3, r0, #0
 800773e:	d007      	beq.n	8007750 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	2220      	movs	r2, #32
 8007746:	431a      	orrs	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e000      	b.n	8007752 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	0018      	movs	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	b004      	add	sp, #16
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e01e      	b.n	80077aa <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2239      	movs	r2, #57	; 0x39
 8007770:	5c9b      	ldrb	r3, [r3, r2]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d107      	bne.n	8007788 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2238      	movs	r2, #56	; 0x38
 800777c:	2100      	movs	r1, #0
 800777e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	0018      	movs	r0, r3
 8007784:	f7fb fc16 	bl	8002fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2239      	movs	r2, #57	; 0x39
 800778c:	2102      	movs	r1, #2
 800778e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	0019      	movs	r1, r3
 800779a:	0010      	movs	r0, r2
 800779c:	f000 fa40 	bl	8007c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2239      	movs	r2, #57	; 0x39
 80077a4:	2101      	movs	r1, #1
 80077a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	0018      	movs	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b002      	add	sp, #8
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2101      	movs	r1, #1
 80077c6:	430a      	orrs	r2, r1
 80077c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2207      	movs	r2, #7
 80077d2:	4013      	ands	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b06      	cmp	r3, #6
 80077da:	d007      	beq.n	80077ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2101      	movs	r1, #1
 80077e8:	430a      	orrs	r2, r1
 80077ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b004      	add	sp, #16
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2202      	movs	r2, #2
 8007806:	4013      	ands	r3, r2
 8007808:	2b02      	cmp	r3, #2
 800780a:	d124      	bne.n	8007856 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2202      	movs	r2, #2
 8007814:	4013      	ands	r3, r2
 8007816:	2b02      	cmp	r3, #2
 8007818:	d11d      	bne.n	8007856 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2203      	movs	r2, #3
 8007820:	4252      	negs	r2, r2
 8007822:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	2203      	movs	r2, #3
 8007832:	4013      	ands	r3, r2
 8007834:	d004      	beq.n	8007840 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	0018      	movs	r0, r3
 800783a:	f000 f9d9 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 800783e:	e007      	b.n	8007850 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	0018      	movs	r0, r3
 8007844:	f000 f9cc 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	0018      	movs	r0, r3
 800784c:	f000 f9d8 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2204      	movs	r2, #4
 800785e:	4013      	ands	r3, r2
 8007860:	2b04      	cmp	r3, #4
 8007862:	d125      	bne.n	80078b0 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2204      	movs	r2, #4
 800786c:	4013      	ands	r3, r2
 800786e:	2b04      	cmp	r3, #4
 8007870:	d11e      	bne.n	80078b0 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2205      	movs	r2, #5
 8007878:	4252      	negs	r2, r2
 800787a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699a      	ldr	r2, [r3, #24]
 8007888:	23c0      	movs	r3, #192	; 0xc0
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4013      	ands	r3, r2
 800788e:	d004      	beq.n	800789a <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	0018      	movs	r0, r3
 8007894:	f000 f9ac 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 8007898:	e007      	b.n	80078aa <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	0018      	movs	r0, r3
 800789e:	f000 f99f 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	0018      	movs	r0, r3
 80078a6:	f000 f9ab 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2208      	movs	r2, #8
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d124      	bne.n	8007908 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	2208      	movs	r2, #8
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d11d      	bne.n	8007908 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2209      	movs	r2, #9
 80078d2:	4252      	negs	r2, r2
 80078d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2204      	movs	r2, #4
 80078da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	2203      	movs	r2, #3
 80078e4:	4013      	ands	r3, r2
 80078e6:	d004      	beq.n	80078f2 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	0018      	movs	r0, r3
 80078ec:	f000 f980 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 80078f0:	e007      	b.n	8007902 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	0018      	movs	r0, r3
 80078f6:	f000 f973 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	0018      	movs	r0, r3
 80078fe:	f000 f97f 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2210      	movs	r2, #16
 8007910:	4013      	ands	r3, r2
 8007912:	2b10      	cmp	r3, #16
 8007914:	d125      	bne.n	8007962 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2210      	movs	r2, #16
 800791e:	4013      	ands	r3, r2
 8007920:	2b10      	cmp	r3, #16
 8007922:	d11e      	bne.n	8007962 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2211      	movs	r2, #17
 800792a:	4252      	negs	r2, r2
 800792c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2208      	movs	r2, #8
 8007932:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	23c0      	movs	r3, #192	; 0xc0
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4013      	ands	r3, r2
 8007940:	d004      	beq.n	800794c <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	0018      	movs	r0, r3
 8007946:	f000 f953 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 800794a:	e007      	b.n	800795c <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	0018      	movs	r0, r3
 8007950:	f000 f946 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	0018      	movs	r0, r3
 8007958:	f000 f952 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2201      	movs	r2, #1
 800796a:	4013      	ands	r3, r2
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10f      	bne.n	8007990 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	4013      	ands	r3, r2
 800797a:	2b01      	cmp	r3, #1
 800797c:	d108      	bne.n	8007990 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2202      	movs	r2, #2
 8007984:	4252      	negs	r2, r2
 8007986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	0018      	movs	r0, r3
 800798c:	f000 f920 	bl	8007bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	2240      	movs	r2, #64	; 0x40
 8007998:	4013      	ands	r3, r2
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d10f      	bne.n	80079be <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2240      	movs	r2, #64	; 0x40
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b40      	cmp	r3, #64	; 0x40
 80079aa:	d108      	bne.n	80079be <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2241      	movs	r2, #65	; 0x41
 80079b2:	4252      	negs	r2, r2
 80079b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 f929 	bl	8007c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b002      	add	sp, #8
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2238      	movs	r2, #56	; 0x38
 80079d6:	5c9b      	ldrb	r3, [r3, r2]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_TIM_ConfigClockSource+0x18>
 80079dc:	2302      	movs	r3, #2
 80079de:	e0ab      	b.n	8007b38 <HAL_TIM_ConfigClockSource+0x170>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2238      	movs	r2, #56	; 0x38
 80079e4:	2101      	movs	r1, #1
 80079e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2239      	movs	r2, #57	; 0x39
 80079ec:	2102      	movs	r1, #2
 80079ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2277      	movs	r2, #119	; 0x77
 80079fc:	4393      	bics	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a4f      	ldr	r2, [pc, #316]	; (8007b40 <HAL_TIM_ConfigClockSource+0x178>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b40      	cmp	r3, #64	; 0x40
 8007a16:	d100      	bne.n	8007a1a <HAL_TIM_ConfigClockSource+0x52>
 8007a18:	e06b      	b.n	8007af2 <HAL_TIM_ConfigClockSource+0x12a>
 8007a1a:	d80e      	bhi.n	8007a3a <HAL_TIM_ConfigClockSource+0x72>
 8007a1c:	2b10      	cmp	r3, #16
 8007a1e:	d100      	bne.n	8007a22 <HAL_TIM_ConfigClockSource+0x5a>
 8007a20:	e077      	b.n	8007b12 <HAL_TIM_ConfigClockSource+0x14a>
 8007a22:	d803      	bhi.n	8007a2c <HAL_TIM_ConfigClockSource+0x64>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d100      	bne.n	8007a2a <HAL_TIM_ConfigClockSource+0x62>
 8007a28:	e073      	b.n	8007b12 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007a2a:	e07c      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d100      	bne.n	8007a32 <HAL_TIM_ConfigClockSource+0x6a>
 8007a30:	e06f      	b.n	8007b12 <HAL_TIM_ConfigClockSource+0x14a>
 8007a32:	2b30      	cmp	r3, #48	; 0x30
 8007a34:	d100      	bne.n	8007a38 <HAL_TIM_ConfigClockSource+0x70>
 8007a36:	e06c      	b.n	8007b12 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007a38:	e075      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007a3a:	2b70      	cmp	r3, #112	; 0x70
 8007a3c:	d00e      	beq.n	8007a5c <HAL_TIM_ConfigClockSource+0x94>
 8007a3e:	d804      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x82>
 8007a40:	2b50      	cmp	r3, #80	; 0x50
 8007a42:	d036      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0xea>
 8007a44:	2b60      	cmp	r3, #96	; 0x60
 8007a46:	d044      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007a48:	e06d      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007a4a:	2280      	movs	r2, #128	; 0x80
 8007a4c:	0152      	lsls	r2, r2, #5
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d068      	beq.n	8007b24 <HAL_TIM_ConfigClockSource+0x15c>
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	0192      	lsls	r2, r2, #6
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d017      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007a5a:	e064      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	6899      	ldr	r1, [r3, #8]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f000 fa34 	bl	8007ed8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2277      	movs	r2, #119	; 0x77
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	609a      	str	r2, [r3, #8]
      break;
 8007a88:	e04d      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	6899      	ldr	r1, [r3, #8]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f000 fa1d 	bl	8007ed8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2180      	movs	r1, #128	; 0x80
 8007aaa:	01c9      	lsls	r1, r1, #7
 8007aac:	430a      	orrs	r2, r1
 8007aae:	609a      	str	r2, [r3, #8]
      break;
 8007ab0:	e039      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	001a      	movs	r2, r3
 8007ac0:	f000 f990 	bl	8007de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2150      	movs	r1, #80	; 0x50
 8007aca:	0018      	movs	r0, r3
 8007acc:	f000 f9ea 	bl	8007ea4 <TIM_ITRx_SetConfig>
      break;
 8007ad0:	e029      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6859      	ldr	r1, [r3, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	001a      	movs	r2, r3
 8007ae0:	f000 f9ae 	bl	8007e40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2160      	movs	r1, #96	; 0x60
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 f9da 	bl	8007ea4 <TIM_ITRx_SetConfig>
      break;
 8007af0:	e019      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	6859      	ldr	r1, [r3, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	001a      	movs	r2, r3
 8007b00:	f000 f970 	bl	8007de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2140      	movs	r1, #64	; 0x40
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f000 f9ca 	bl	8007ea4 <TIM_ITRx_SetConfig>
      break;
 8007b10:	e009      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	0010      	movs	r0, r2
 8007b1e:	f000 f9c1 	bl	8007ea4 <TIM_ITRx_SetConfig>
      break;
 8007b22:	e000      	b.n	8007b26 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007b24:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2239      	movs	r2, #57	; 0x39
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2238      	movs	r2, #56	; 0x38
 8007b32:	2100      	movs	r1, #0
 8007b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b004      	add	sp, #16
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	ffff00ff 	.word	0xffff00ff

08007b44 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2238      	movs	r2, #56	; 0x38
 8007b52:	5c9b      	ldrb	r3, [r3, r2]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e032      	b.n	8007bc2 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2238      	movs	r2, #56	; 0x38
 8007b60:	2101      	movs	r1, #1
 8007b62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2239      	movs	r2, #57	; 0x39
 8007b68:	2102      	movs	r1, #2
 8007b6a:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	0011      	movs	r1, r2
 8007b72:	0018      	movs	r0, r3
 8007b74:	f000 f8b2 	bl	8007cdc <TIM_SlaveTimer_SetConfig>
 8007b78:	1e03      	subs	r3, r0, #0
 8007b7a:	d009      	beq.n	8007b90 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2239      	movs	r2, #57	; 0x39
 8007b80:	2101      	movs	r1, #1
 8007b82:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2238      	movs	r2, #56	; 0x38
 8007b88:	2100      	movs	r1, #0
 8007b8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e018      	b.n	8007bc2 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2140      	movs	r1, #64	; 0x40
 8007b9c:	438a      	bics	r2, r1
 8007b9e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4908      	ldr	r1, [pc, #32]	; (8007bcc <HAL_TIM_SlaveConfigSynchro+0x88>)
 8007bac:	400a      	ands	r2, r1
 8007bae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2239      	movs	r2, #57	; 0x39
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2238      	movs	r2, #56	; 0x38
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b002      	add	sp, #8
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	ffffbfff 	.word	0xffffbfff

08007bd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007bd8:	46c0      	nop			; (mov r8, r8)
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be8:	46c0      	nop			; (mov r8, r8)
 8007bea:	46bd      	mov	sp, r7
 8007bec:	b002      	add	sp, #8
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bf8:	46c0      	nop			; (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b002      	add	sp, #8
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c08:	46c0      	nop			; (mov r8, r8)
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b002      	add	sp, #8
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c18:	46c0      	nop			; (mov r8, r8)
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b002      	add	sp, #8
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	2380      	movs	r3, #128	; 0x80
 8007c34:	05db      	lsls	r3, r3, #23
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d00b      	beq.n	8007c52 <TIM_Base_SetConfig+0x32>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a23      	ldr	r2, [pc, #140]	; (8007ccc <TIM_Base_SetConfig+0xac>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d007      	beq.n	8007c52 <TIM_Base_SetConfig+0x32>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a22      	ldr	r2, [pc, #136]	; (8007cd0 <TIM_Base_SetConfig+0xb0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d003      	beq.n	8007c52 <TIM_Base_SetConfig+0x32>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a21      	ldr	r2, [pc, #132]	; (8007cd4 <TIM_Base_SetConfig+0xb4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d108      	bne.n	8007c64 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2270      	movs	r2, #112	; 0x70
 8007c56:	4393      	bics	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	05db      	lsls	r3, r3, #23
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d00b      	beq.n	8007c86 <TIM_Base_SetConfig+0x66>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <TIM_Base_SetConfig+0xac>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d007      	beq.n	8007c86 <TIM_Base_SetConfig+0x66>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <TIM_Base_SetConfig+0xb0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_Base_SetConfig+0x66>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a14      	ldr	r2, [pc, #80]	; (8007cd4 <TIM_Base_SetConfig+0xb4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d108      	bne.n	8007c98 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a13      	ldr	r2, [pc, #76]	; (8007cd8 <TIM_Base_SetConfig+0xb8>)
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	4393      	bics	r3, r2
 8007c9e:	001a      	movs	r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	615a      	str	r2, [r3, #20]
}
 8007cc4:	46c0      	nop			; (mov r8, r8)
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b004      	add	sp, #16
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40010800 	.word	0x40010800
 8007cd4:	40011400 	.word	0x40011400
 8007cd8:	fffffcff 	.word	0xfffffcff

08007cdc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2270      	movs	r2, #112	; 0x70
 8007cf2:	4393      	bics	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2207      	movs	r2, #7
 8007d04:	4393      	bics	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2b30      	cmp	r3, #48	; 0x30
 8007d20:	d05a      	beq.n	8007dd8 <TIM_SlaveTimer_SetConfig+0xfc>
 8007d22:	d806      	bhi.n	8007d32 <TIM_SlaveTimer_SetConfig+0x56>
 8007d24:	2b10      	cmp	r3, #16
 8007d26:	d057      	beq.n	8007dd8 <TIM_SlaveTimer_SetConfig+0xfc>
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d055      	beq.n	8007dd8 <TIM_SlaveTimer_SetConfig+0xfc>
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d053      	beq.n	8007dd8 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007d30:	e053      	b.n	8007dda <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8007d32:	2b50      	cmp	r3, #80	; 0x50
 8007d34:	d03c      	beq.n	8007db0 <TIM_SlaveTimer_SetConfig+0xd4>
 8007d36:	d802      	bhi.n	8007d3e <TIM_SlaveTimer_SetConfig+0x62>
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d010      	beq.n	8007d5e <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8007d3c:	e04d      	b.n	8007dda <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8007d3e:	2b60      	cmp	r3, #96	; 0x60
 8007d40:	d040      	beq.n	8007dc4 <TIM_SlaveTimer_SetConfig+0xe8>
 8007d42:	2b70      	cmp	r3, #112	; 0x70
 8007d44:	d000      	beq.n	8007d48 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8007d46:	e048      	b.n	8007dda <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	68d9      	ldr	r1, [r3, #12]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f000 f8be 	bl	8007ed8 <TIM_ETR_SetConfig>
      break;
 8007d5c:	e03d      	b.n	8007dda <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d101      	bne.n	8007d6a <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e038      	b.n	8007ddc <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a1a      	ldr	r2, [r3, #32]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	438a      	bics	r2, r1
 8007d80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	22f0      	movs	r2, #240	; 0xf0
 8007d8e:	4393      	bics	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	621a      	str	r2, [r3, #32]
      break;
 8007dae:	e014      	b.n	8007dda <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	6899      	ldr	r1, [r3, #8]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	001a      	movs	r2, r3
 8007dbe:	f000 f811 	bl	8007de4 <TIM_TI1_ConfigInputStage>
      break;
 8007dc2:	e00a      	b.n	8007dda <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6899      	ldr	r1, [r3, #8]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	001a      	movs	r2, r3
 8007dd2:	f000 f835 	bl	8007e40 <TIM_TI2_ConfigInputStage>
      break;
 8007dd6:	e000      	b.n	8007dda <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8007dd8:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b006      	add	sp, #24
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4393      	bics	r3, r2
 8007dfe:	001a      	movs	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	22f0      	movs	r2, #240	; 0xf0
 8007e0e:	4393      	bics	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	220a      	movs	r2, #10
 8007e20:	4393      	bics	r3, r2
 8007e22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	621a      	str	r2, [r3, #32]
}
 8007e38:	46c0      	nop			; (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b006      	add	sp, #24
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	2210      	movs	r2, #16
 8007e52:	4393      	bics	r3, r2
 8007e54:	001a      	movs	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4a0d      	ldr	r2, [pc, #52]	; (8007ea0 <TIM_TI2_ConfigInputStage+0x60>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	031b      	lsls	r3, r3, #12
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	22a0      	movs	r2, #160	; 0xa0
 8007e7c:	4393      	bics	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	621a      	str	r2, [r3, #32]
}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b006      	add	sp, #24
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	ffff0fff 	.word	0xffff0fff

08007ea4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2270      	movs	r2, #112	; 0x70
 8007eb8:	4393      	bics	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	2207      	movs	r2, #7
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	609a      	str	r2, [r3, #8]
}
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b004      	add	sp, #16
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	4a09      	ldr	r2, [pc, #36]	; (8007f14 <TIM_ETR_SetConfig+0x3c>)
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	021a      	lsls	r2, r3, #8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	609a      	str	r2, [r3, #8]
}
 8007f0c:	46c0      	nop			; (mov r8, r8)
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	b006      	add	sp, #24
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	ffff00ff 	.word	0xffff00ff

08007f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2238      	movs	r2, #56	; 0x38
 8007f26:	5c9b      	ldrb	r3, [r3, r2]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e032      	b.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2238      	movs	r2, #56	; 0x38
 8007f34:	2101      	movs	r1, #1
 8007f36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2239      	movs	r2, #57	; 0x39
 8007f3c:	2102      	movs	r1, #2
 8007f3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2270      	movs	r2, #112	; 0x70
 8007f54:	4393      	bics	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2280      	movs	r2, #128	; 0x80
 8007f66:	4393      	bics	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2239      	movs	r2, #57	; 0x39
 8007f88:	2101      	movs	r1, #1
 8007f8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2238      	movs	r2, #56	; 0x38
 8007f90:	2100      	movs	r1, #0
 8007f92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	0018      	movs	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b004      	add	sp, #16
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e044      	b.n	800803c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d107      	bne.n	8007fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2270      	movs	r2, #112	; 0x70
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f7fb f80b 	bl	8002fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2224      	movs	r2, #36	; 0x24
 8007fce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2101      	movs	r1, #1
 8007fdc:	438a      	bics	r2, r1
 8007fde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 f9c2 	bl	800836c <UART_SetConfig>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e024      	b.n	800803c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f000 fce9 	bl	80089d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	490d      	ldr	r1, [pc, #52]	; (8008044 <HAL_UART_Init+0xa4>)
 800800e:	400a      	ands	r2, r1
 8008010:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	212a      	movs	r1, #42	; 0x2a
 800801e:	438a      	bics	r2, r1
 8008020:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2101      	movs	r1, #1
 800802e:	430a      	orrs	r2, r1
 8008030:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	0018      	movs	r0, r3
 8008036:	f000 fd81 	bl	8008b3c <UART_CheckIdleState>
 800803a:	0003      	movs	r3, r0
}
 800803c:	0018      	movs	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	b002      	add	sp, #8
 8008042:	bd80      	pop	{r7, pc}
 8008044:	ffffb7ff 	.word	0xffffb7ff

08008048 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08a      	sub	sp, #40	; 0x28
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	1dbb      	adds	r3, r7, #6
 8008056:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800805c:	2b20      	cmp	r3, #32
 800805e:	d000      	beq.n	8008062 <HAL_UART_Transmit+0x1a>
 8008060:	e094      	b.n	800818c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <HAL_UART_Transmit+0x28>
 8008068:	1dbb      	adds	r3, r7, #6
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e08c      	b.n	800818e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	2380      	movs	r3, #128	; 0x80
 800807a:	015b      	lsls	r3, r3, #5
 800807c:	429a      	cmp	r2, r3
 800807e:	d109      	bne.n	8008094 <HAL_UART_Transmit+0x4c>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d105      	bne.n	8008094 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2201      	movs	r2, #1
 800808c:	4013      	ands	r3, r2
 800808e:	d001      	beq.n	8008094 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e07c      	b.n	800818e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2270      	movs	r2, #112	; 0x70
 8008098:	5c9b      	ldrb	r3, [r3, r2]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Transmit+0x5a>
 800809e:	2302      	movs	r3, #2
 80080a0:	e075      	b.n	800818e <HAL_UART_Transmit+0x146>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2270      	movs	r2, #112	; 0x70
 80080a6:	2101      	movs	r1, #1
 80080a8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2221      	movs	r2, #33	; 0x21
 80080b4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80080b6:	f7fc fcef 	bl	8004a98 <HAL_GetTick>
 80080ba:	0003      	movs	r3, r0
 80080bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1dba      	adds	r2, r7, #6
 80080c2:	2150      	movs	r1, #80	; 0x50
 80080c4:	8812      	ldrh	r2, [r2, #0]
 80080c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	1dba      	adds	r2, r7, #6
 80080cc:	2152      	movs	r1, #82	; 0x52
 80080ce:	8812      	ldrh	r2, [r2, #0]
 80080d0:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	2380      	movs	r3, #128	; 0x80
 80080d8:	015b      	lsls	r3, r3, #5
 80080da:	429a      	cmp	r2, r3
 80080dc:	d108      	bne.n	80080f0 <HAL_UART_Transmit+0xa8>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	e003      	b.n	80080f8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080f8:	e02c      	b.n	8008154 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	0013      	movs	r3, r2
 8008104:	2200      	movs	r2, #0
 8008106:	2180      	movs	r1, #128	; 0x80
 8008108:	f000 fd5e 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 800810c:	1e03      	subs	r3, r0, #0
 800810e:	d001      	beq.n	8008114 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e03c      	b.n	800818e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	001a      	movs	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	05d2      	lsls	r2, r2, #23
 8008126:	0dd2      	lsrs	r2, r2, #23
 8008128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	3302      	adds	r3, #2
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	e007      	b.n	8008142 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	3301      	adds	r3, #1
 8008140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2252      	movs	r2, #82	; 0x52
 8008146:	5a9b      	ldrh	r3, [r3, r2]
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b299      	uxth	r1, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2252      	movs	r2, #82	; 0x52
 8008152:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2252      	movs	r2, #82	; 0x52
 8008158:	5a9b      	ldrh	r3, [r3, r2]
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1cc      	bne.n	80080fa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	0013      	movs	r3, r2
 800816a:	2200      	movs	r2, #0
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	f000 fd2b 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 8008172:	1e03      	subs	r3, r0, #0
 8008174:	d001      	beq.n	800817a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e009      	b.n	800818e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2270      	movs	r2, #112	; 0x70
 8008184:	2100      	movs	r1, #0
 8008186:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	e000      	b.n	800818e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 800818c:	2302      	movs	r3, #2
  }
}
 800818e:	0018      	movs	r0, r3
 8008190:	46bd      	mov	sp, r7
 8008192:	b008      	add	sp, #32
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	1dbb      	adds	r3, r7, #6
 80081a6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d000      	beq.n	80081b2 <HAL_UART_Receive+0x1a>
 80081b0:	e0d5      	b.n	800835e <HAL_UART_Receive+0x1c6>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_UART_Receive+0x28>
 80081b8:	1dbb      	adds	r3, r7, #6
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0cd      	b.n	8008360 <HAL_UART_Receive+0x1c8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	2380      	movs	r3, #128	; 0x80
 80081ca:	015b      	lsls	r3, r3, #5
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d109      	bne.n	80081e4 <HAL_UART_Receive+0x4c>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d105      	bne.n	80081e4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2201      	movs	r2, #1
 80081dc:	4013      	ands	r3, r2
 80081de:	d001      	beq.n	80081e4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0bd      	b.n	8008360 <HAL_UART_Receive+0x1c8>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2270      	movs	r2, #112	; 0x70
 80081e8:	5c9b      	ldrb	r3, [r3, r2]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <HAL_UART_Receive+0x5a>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e0b6      	b.n	8008360 <HAL_UART_Receive+0x1c8>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2270      	movs	r2, #112	; 0x70
 80081f6:	2101      	movs	r1, #1
 80081f8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2222      	movs	r2, #34	; 0x22
 8008204:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008206:	f7fc fc47 	bl	8004a98 <HAL_GetTick>
 800820a:	0003      	movs	r3, r0
 800820c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	1dba      	adds	r2, r7, #6
 8008212:	2158      	movs	r1, #88	; 0x58
 8008214:	8812      	ldrh	r2, [r2, #0]
 8008216:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	1dba      	adds	r2, r7, #6
 800821c:	215a      	movs	r1, #90	; 0x5a
 800821e:	8812      	ldrh	r2, [r2, #0]
 8008220:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	2380      	movs	r3, #128	; 0x80
 8008228:	015b      	lsls	r3, r3, #5
 800822a:	429a      	cmp	r2, r3
 800822c:	d10d      	bne.n	800824a <HAL_UART_Receive+0xb2>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <HAL_UART_Receive+0xa8>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	225c      	movs	r2, #92	; 0x5c
 800823a:	494b      	ldr	r1, [pc, #300]	; (8008368 <HAL_UART_Receive+0x1d0>)
 800823c:	5299      	strh	r1, [r3, r2]
 800823e:	e02e      	b.n	800829e <HAL_UART_Receive+0x106>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	225c      	movs	r2, #92	; 0x5c
 8008244:	21ff      	movs	r1, #255	; 0xff
 8008246:	5299      	strh	r1, [r3, r2]
 8008248:	e029      	b.n	800829e <HAL_UART_Receive+0x106>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10d      	bne.n	800826e <HAL_UART_Receive+0xd6>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <HAL_UART_Receive+0xcc>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	225c      	movs	r2, #92	; 0x5c
 800825e:	21ff      	movs	r1, #255	; 0xff
 8008260:	5299      	strh	r1, [r3, r2]
 8008262:	e01c      	b.n	800829e <HAL_UART_Receive+0x106>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	225c      	movs	r2, #92	; 0x5c
 8008268:	217f      	movs	r1, #127	; 0x7f
 800826a:	5299      	strh	r1, [r3, r2]
 800826c:	e017      	b.n	800829e <HAL_UART_Receive+0x106>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	2380      	movs	r3, #128	; 0x80
 8008274:	055b      	lsls	r3, r3, #21
 8008276:	429a      	cmp	r2, r3
 8008278:	d10d      	bne.n	8008296 <HAL_UART_Receive+0xfe>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <HAL_UART_Receive+0xf4>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	225c      	movs	r2, #92	; 0x5c
 8008286:	217f      	movs	r1, #127	; 0x7f
 8008288:	5299      	strh	r1, [r3, r2]
 800828a:	e008      	b.n	800829e <HAL_UART_Receive+0x106>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	225c      	movs	r2, #92	; 0x5c
 8008290:	213f      	movs	r1, #63	; 0x3f
 8008292:	5299      	strh	r1, [r3, r2]
 8008294:	e003      	b.n	800829e <HAL_UART_Receive+0x106>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	225c      	movs	r2, #92	; 0x5c
 800829a:	2100      	movs	r1, #0
 800829c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800829e:	2312      	movs	r3, #18
 80082a0:	18fb      	adds	r3, r7, r3
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	215c      	movs	r1, #92	; 0x5c
 80082a6:	5a52      	ldrh	r2, [r2, r1]
 80082a8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	2380      	movs	r3, #128	; 0x80
 80082b0:	015b      	lsls	r3, r3, #5
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d108      	bne.n	80082c8 <HAL_UART_Receive+0x130>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <HAL_UART_Receive+0x130>
    {
      pdata8bits  = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	e003      	b.n	80082d0 <HAL_UART_Receive+0x138>
    }
    else
    {
      pdata8bits  = pData;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80082d0:	e036      	b.n	8008340 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	0013      	movs	r3, r2
 80082dc:	2200      	movs	r2, #0
 80082de:	2120      	movs	r1, #32
 80082e0:	f000 fc72 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 80082e4:	1e03      	subs	r3, r0, #0
 80082e6:	d001      	beq.n	80082ec <HAL_UART_Receive+0x154>
      {
        return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e039      	b.n	8008360 <HAL_UART_Receive+0x1c8>
      }
      if (pdata8bits == NULL)
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10e      	bne.n	8008310 <HAL_UART_Receive+0x178>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2212      	movs	r2, #18
 80082fc:	18ba      	adds	r2, r7, r2
 80082fe:	8812      	ldrh	r2, [r2, #0]
 8008300:	4013      	ands	r3, r2
 8008302:	b29a      	uxth	r2, r3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	3302      	adds	r3, #2
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	e00e      	b.n	800832e <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2212      	movs	r2, #18
 800831a:	18ba      	adds	r2, r7, r2
 800831c:	8812      	ldrh	r2, [r2, #0]
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	4013      	ands	r3, r2
 8008322:	b2da      	uxtb	r2, r3
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	225a      	movs	r2, #90	; 0x5a
 8008332:	5a9b      	ldrh	r3, [r3, r2]
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b299      	uxth	r1, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	225a      	movs	r2, #90	; 0x5a
 800833e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	225a      	movs	r2, #90	; 0x5a
 8008344:	5a9b      	ldrh	r3, [r3, r2]
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1c2      	bne.n	80082d2 <HAL_UART_Receive+0x13a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2220      	movs	r2, #32
 8008350:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2270      	movs	r2, #112	; 0x70
 8008356:	2100      	movs	r1, #0
 8008358:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	e000      	b.n	8008360 <HAL_UART_Receive+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800835e:	2302      	movs	r3, #2
  }
}
 8008360:	0018      	movs	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	b008      	add	sp, #32
 8008366:	bd80      	pop	{r7, pc}
 8008368:	000001ff 	.word	0x000001ff

0800836c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b08e      	sub	sp, #56	; 0x38
 8008370:	af00      	add	r7, sp, #0
 8008372:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8008374:	231b      	movs	r3, #27
 8008376:	2218      	movs	r2, #24
 8008378:	4694      	mov	ip, r2
 800837a:	44bc      	add	ip, r7
 800837c:	4463      	add	r3, ip
 800837e:	2210      	movs	r2, #16
 8008380:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8008382:	2300      	movs	r3, #0
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8008386:	2313      	movs	r3, #19
 8008388:	2218      	movs	r2, #24
 800838a:	4694      	mov	ip, r2
 800838c:	44bc      	add	ip, r7
 800838e:	4463      	add	r3, ip
 8008390:	2200      	movs	r2, #0
 8008392:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008394:	2300      	movs	r3, #0
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	431a      	orrs	r2, r3
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4aca      	ldr	r2, [pc, #808]	; (80086e0 <UART_SetConfig+0x374>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	0019      	movs	r1, r3
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c2:	430a      	orrs	r2, r1
 80083c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	4ac5      	ldr	r2, [pc, #788]	; (80086e4 <UART_SetConfig+0x378>)
 80083ce:	4013      	ands	r3, r2
 80083d0:	0019      	movs	r1, r3
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4abf      	ldr	r2, [pc, #764]	; (80086e8 <UART_SetConfig+0x37c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f4:	4313      	orrs	r3, r2
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	4abb      	ldr	r2, [pc, #748]	; (80086ec <UART_SetConfig+0x380>)
 8008400:	4013      	ands	r3, r2
 8008402:	0019      	movs	r1, r3
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800840a:	430a      	orrs	r2, r1
 800840c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4ab7      	ldr	r2, [pc, #732]	; (80086f0 <UART_SetConfig+0x384>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d134      	bne.n	8008482 <UART_SetConfig+0x116>
 8008418:	4bb6      	ldr	r3, [pc, #728]	; (80086f4 <UART_SetConfig+0x388>)
 800841a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800841c:	2203      	movs	r2, #3
 800841e:	4013      	ands	r3, r2
 8008420:	2b01      	cmp	r3, #1
 8008422:	d015      	beq.n	8008450 <UART_SetConfig+0xe4>
 8008424:	d304      	bcc.n	8008430 <UART_SetConfig+0xc4>
 8008426:	2b02      	cmp	r3, #2
 8008428:	d00a      	beq.n	8008440 <UART_SetConfig+0xd4>
 800842a:	2b03      	cmp	r3, #3
 800842c:	d018      	beq.n	8008460 <UART_SetConfig+0xf4>
 800842e:	e01f      	b.n	8008470 <UART_SetConfig+0x104>
 8008430:	231b      	movs	r3, #27
 8008432:	2218      	movs	r2, #24
 8008434:	4694      	mov	ip, r2
 8008436:	44bc      	add	ip, r7
 8008438:	4463      	add	r3, ip
 800843a:	2201      	movs	r2, #1
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e0c5      	b.n	80085cc <UART_SetConfig+0x260>
 8008440:	231b      	movs	r3, #27
 8008442:	2218      	movs	r2, #24
 8008444:	4694      	mov	ip, r2
 8008446:	44bc      	add	ip, r7
 8008448:	4463      	add	r3, ip
 800844a:	2202      	movs	r2, #2
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e0bd      	b.n	80085cc <UART_SetConfig+0x260>
 8008450:	231b      	movs	r3, #27
 8008452:	2218      	movs	r2, #24
 8008454:	4694      	mov	ip, r2
 8008456:	44bc      	add	ip, r7
 8008458:	4463      	add	r3, ip
 800845a:	2204      	movs	r2, #4
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	e0b5      	b.n	80085cc <UART_SetConfig+0x260>
 8008460:	231b      	movs	r3, #27
 8008462:	2218      	movs	r2, #24
 8008464:	4694      	mov	ip, r2
 8008466:	44bc      	add	ip, r7
 8008468:	4463      	add	r3, ip
 800846a:	2208      	movs	r2, #8
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e0ad      	b.n	80085cc <UART_SetConfig+0x260>
 8008470:	231b      	movs	r3, #27
 8008472:	2218      	movs	r2, #24
 8008474:	4694      	mov	ip, r2
 8008476:	44bc      	add	ip, r7
 8008478:	4463      	add	r3, ip
 800847a:	2210      	movs	r2, #16
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	e0a4      	b.n	80085cc <UART_SetConfig+0x260>
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a9c      	ldr	r2, [pc, #624]	; (80086f8 <UART_SetConfig+0x38c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d137      	bne.n	80084fc <UART_SetConfig+0x190>
 800848c:	4b99      	ldr	r3, [pc, #612]	; (80086f4 <UART_SetConfig+0x388>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008490:	220c      	movs	r2, #12
 8008492:	4013      	ands	r3, r2
 8008494:	2b04      	cmp	r3, #4
 8008496:	d018      	beq.n	80084ca <UART_SetConfig+0x15e>
 8008498:	d802      	bhi.n	80084a0 <UART_SetConfig+0x134>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d005      	beq.n	80084aa <UART_SetConfig+0x13e>
 800849e:	e024      	b.n	80084ea <UART_SetConfig+0x17e>
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d00a      	beq.n	80084ba <UART_SetConfig+0x14e>
 80084a4:	2b0c      	cmp	r3, #12
 80084a6:	d018      	beq.n	80084da <UART_SetConfig+0x16e>
 80084a8:	e01f      	b.n	80084ea <UART_SetConfig+0x17e>
 80084aa:	231b      	movs	r3, #27
 80084ac:	2218      	movs	r2, #24
 80084ae:	4694      	mov	ip, r2
 80084b0:	44bc      	add	ip, r7
 80084b2:	4463      	add	r3, ip
 80084b4:	2200      	movs	r2, #0
 80084b6:	701a      	strb	r2, [r3, #0]
 80084b8:	e088      	b.n	80085cc <UART_SetConfig+0x260>
 80084ba:	231b      	movs	r3, #27
 80084bc:	2218      	movs	r2, #24
 80084be:	4694      	mov	ip, r2
 80084c0:	44bc      	add	ip, r7
 80084c2:	4463      	add	r3, ip
 80084c4:	2202      	movs	r2, #2
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e080      	b.n	80085cc <UART_SetConfig+0x260>
 80084ca:	231b      	movs	r3, #27
 80084cc:	2218      	movs	r2, #24
 80084ce:	4694      	mov	ip, r2
 80084d0:	44bc      	add	ip, r7
 80084d2:	4463      	add	r3, ip
 80084d4:	2204      	movs	r2, #4
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e078      	b.n	80085cc <UART_SetConfig+0x260>
 80084da:	231b      	movs	r3, #27
 80084dc:	2218      	movs	r2, #24
 80084de:	4694      	mov	ip, r2
 80084e0:	44bc      	add	ip, r7
 80084e2:	4463      	add	r3, ip
 80084e4:	2208      	movs	r2, #8
 80084e6:	701a      	strb	r2, [r3, #0]
 80084e8:	e070      	b.n	80085cc <UART_SetConfig+0x260>
 80084ea:	231b      	movs	r3, #27
 80084ec:	2218      	movs	r2, #24
 80084ee:	4694      	mov	ip, r2
 80084f0:	44bc      	add	ip, r7
 80084f2:	4463      	add	r3, ip
 80084f4:	2210      	movs	r2, #16
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	e067      	b.n	80085cc <UART_SetConfig+0x260>
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a7e      	ldr	r2, [pc, #504]	; (80086fc <UART_SetConfig+0x390>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d107      	bne.n	8008516 <UART_SetConfig+0x1aa>
 8008506:	231b      	movs	r3, #27
 8008508:	2218      	movs	r2, #24
 800850a:	4694      	mov	ip, r2
 800850c:	44bc      	add	ip, r7
 800850e:	4463      	add	r3, ip
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e05a      	b.n	80085cc <UART_SetConfig+0x260>
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a79      	ldr	r2, [pc, #484]	; (8008700 <UART_SetConfig+0x394>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d107      	bne.n	8008530 <UART_SetConfig+0x1c4>
 8008520:	231b      	movs	r3, #27
 8008522:	2218      	movs	r2, #24
 8008524:	4694      	mov	ip, r2
 8008526:	44bc      	add	ip, r7
 8008528:	4463      	add	r3, ip
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e04d      	b.n	80085cc <UART_SetConfig+0x260>
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a6c      	ldr	r2, [pc, #432]	; (80086e8 <UART_SetConfig+0x37c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d141      	bne.n	80085be <UART_SetConfig+0x252>
 800853a:	4b6e      	ldr	r3, [pc, #440]	; (80086f4 <UART_SetConfig+0x388>)
 800853c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800853e:	23c0      	movs	r3, #192	; 0xc0
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	4013      	ands	r3, r2
 8008544:	2280      	movs	r2, #128	; 0x80
 8008546:	00d2      	lsls	r2, r2, #3
 8008548:	4293      	cmp	r3, r2
 800854a:	d01f      	beq.n	800858c <UART_SetConfig+0x220>
 800854c:	2280      	movs	r2, #128	; 0x80
 800854e:	00d2      	lsls	r2, r2, #3
 8008550:	4293      	cmp	r3, r2
 8008552:	d802      	bhi.n	800855a <UART_SetConfig+0x1ee>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d009      	beq.n	800856c <UART_SetConfig+0x200>
 8008558:	e028      	b.n	80085ac <UART_SetConfig+0x240>
 800855a:	2280      	movs	r2, #128	; 0x80
 800855c:	0112      	lsls	r2, r2, #4
 800855e:	4293      	cmp	r3, r2
 8008560:	d00c      	beq.n	800857c <UART_SetConfig+0x210>
 8008562:	22c0      	movs	r2, #192	; 0xc0
 8008564:	0112      	lsls	r2, r2, #4
 8008566:	4293      	cmp	r3, r2
 8008568:	d018      	beq.n	800859c <UART_SetConfig+0x230>
 800856a:	e01f      	b.n	80085ac <UART_SetConfig+0x240>
 800856c:	231b      	movs	r3, #27
 800856e:	2218      	movs	r2, #24
 8008570:	4694      	mov	ip, r2
 8008572:	44bc      	add	ip, r7
 8008574:	4463      	add	r3, ip
 8008576:	2200      	movs	r2, #0
 8008578:	701a      	strb	r2, [r3, #0]
 800857a:	e027      	b.n	80085cc <UART_SetConfig+0x260>
 800857c:	231b      	movs	r3, #27
 800857e:	2218      	movs	r2, #24
 8008580:	4694      	mov	ip, r2
 8008582:	44bc      	add	ip, r7
 8008584:	4463      	add	r3, ip
 8008586:	2202      	movs	r2, #2
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e01f      	b.n	80085cc <UART_SetConfig+0x260>
 800858c:	231b      	movs	r3, #27
 800858e:	2218      	movs	r2, #24
 8008590:	4694      	mov	ip, r2
 8008592:	44bc      	add	ip, r7
 8008594:	4463      	add	r3, ip
 8008596:	2204      	movs	r2, #4
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	e017      	b.n	80085cc <UART_SetConfig+0x260>
 800859c:	231b      	movs	r3, #27
 800859e:	2218      	movs	r2, #24
 80085a0:	4694      	mov	ip, r2
 80085a2:	44bc      	add	ip, r7
 80085a4:	4463      	add	r3, ip
 80085a6:	2208      	movs	r2, #8
 80085a8:	701a      	strb	r2, [r3, #0]
 80085aa:	e00f      	b.n	80085cc <UART_SetConfig+0x260>
 80085ac:	231b      	movs	r3, #27
 80085ae:	2218      	movs	r2, #24
 80085b0:	4694      	mov	ip, r2
 80085b2:	44bc      	add	ip, r7
 80085b4:	4463      	add	r3, ip
 80085b6:	2210      	movs	r2, #16
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	e006      	b.n	80085cc <UART_SetConfig+0x260>
 80085be:	231b      	movs	r3, #27
 80085c0:	2218      	movs	r2, #24
 80085c2:	4694      	mov	ip, r2
 80085c4:	44bc      	add	ip, r7
 80085c6:	4463      	add	r3, ip
 80085c8:	2210      	movs	r2, #16
 80085ca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a45      	ldr	r2, [pc, #276]	; (80086e8 <UART_SetConfig+0x37c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d000      	beq.n	80085d8 <UART_SetConfig+0x26c>
 80085d6:	e09d      	b.n	8008714 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085d8:	231b      	movs	r3, #27
 80085da:	2218      	movs	r2, #24
 80085dc:	4694      	mov	ip, r2
 80085de:	44bc      	add	ip, r7
 80085e0:	4463      	add	r3, ip
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d00d      	beq.n	8008604 <UART_SetConfig+0x298>
 80085e8:	dc02      	bgt.n	80085f0 <UART_SetConfig+0x284>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d005      	beq.n	80085fa <UART_SetConfig+0x28e>
 80085ee:	e01d      	b.n	800862c <UART_SetConfig+0x2c0>
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d012      	beq.n	800861a <UART_SetConfig+0x2ae>
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d015      	beq.n	8008624 <UART_SetConfig+0x2b8>
 80085f8:	e018      	b.n	800862c <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80085fa:	f7fe f965 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 80085fe:	0003      	movs	r3, r0
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008602:	e01b      	b.n	800863c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008604:	4b3b      	ldr	r3, [pc, #236]	; (80086f4 <UART_SetConfig+0x388>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2210      	movs	r2, #16
 800860a:	4013      	ands	r3, r2
 800860c:	d002      	beq.n	8008614 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800860e:	4b3d      	ldr	r3, [pc, #244]	; (8008704 <UART_SetConfig+0x398>)
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8008612:	e013      	b.n	800863c <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8008614:	4b3c      	ldr	r3, [pc, #240]	; (8008708 <UART_SetConfig+0x39c>)
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008618:	e010      	b.n	800863c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800861a:	f7fe f8c7 	bl	80067ac <HAL_RCC_GetSysClockFreq>
 800861e:	0003      	movs	r3, r0
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008622:	e00b      	b.n	800863c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800862a:	e007      	b.n	800863c <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800862c:	2313      	movs	r3, #19
 800862e:	2218      	movs	r2, #24
 8008630:	4694      	mov	ip, r2
 8008632:	44bc      	add	ip, r7
 8008634:	4463      	add	r3, ip
 8008636:	2201      	movs	r2, #1
 8008638:	701a      	strb	r2, [r3, #0]
        break;
 800863a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d100      	bne.n	8008644 <UART_SetConfig+0x2d8>
 8008642:	e1a6      	b.n	8008992 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	0013      	movs	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	189b      	adds	r3, r3, r2
 800864e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008650:	429a      	cmp	r2, r3
 8008652:	d305      	bcc.n	8008660 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800865a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865c:	429a      	cmp	r2, r3
 800865e:	d907      	bls.n	8008670 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8008660:	2313      	movs	r3, #19
 8008662:	2218      	movs	r2, #24
 8008664:	4694      	mov	ip, r2
 8008666:	44bc      	add	ip, r7
 8008668:	4463      	add	r3, ip
 800866a:	2201      	movs	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e190      	b.n	8008992 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	6939      	ldr	r1, [r7, #16]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	000b      	movs	r3, r1
 800867e:	0e1b      	lsrs	r3, r3, #24
 8008680:	0010      	movs	r0, r2
 8008682:	0205      	lsls	r5, r0, #8
 8008684:	431d      	orrs	r5, r3
 8008686:	000b      	movs	r3, r1
 8008688:	021c      	lsls	r4, r3, #8
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	085b      	lsrs	r3, r3, #1
 8008690:	60bb      	str	r3, [r7, #8]
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68b8      	ldr	r0, [r7, #8]
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	1900      	adds	r0, r0, r4
 800869c:	4169      	adcs	r1, r5
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	607b      	str	r3, [r7, #4]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f7f7 fe38 	bl	8000320 <__aeabi_uldivmod>
 80086b0:	0003      	movs	r3, r0
 80086b2:	000c      	movs	r4, r1
 80086b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	4a14      	ldr	r2, [pc, #80]	; (800870c <UART_SetConfig+0x3a0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d908      	bls.n	80086d0 <UART_SetConfig+0x364>
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	4a13      	ldr	r2, [pc, #76]	; (8008710 <UART_SetConfig+0x3a4>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d804      	bhi.n	80086d0 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086cc:	60da      	str	r2, [r3, #12]
 80086ce:	e160      	b.n	8008992 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80086d0:	2313      	movs	r3, #19
 80086d2:	2218      	movs	r2, #24
 80086d4:	4694      	mov	ip, r2
 80086d6:	44bc      	add	ip, r7
 80086d8:	4463      	add	r3, ip
 80086da:	2201      	movs	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e158      	b.n	8008992 <UART_SetConfig+0x626>
 80086e0:	efff69f3 	.word	0xefff69f3
 80086e4:	ffffcfff 	.word	0xffffcfff
 80086e8:	40004800 	.word	0x40004800
 80086ec:	fffff4ff 	.word	0xfffff4ff
 80086f0:	40013800 	.word	0x40013800
 80086f4:	40021000 	.word	0x40021000
 80086f8:	40004400 	.word	0x40004400
 80086fc:	40004c00 	.word	0x40004c00
 8008700:	40005000 	.word	0x40005000
 8008704:	003d0900 	.word	0x003d0900
 8008708:	00f42400 	.word	0x00f42400
 800870c:	000002ff 	.word	0x000002ff
 8008710:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	69da      	ldr	r2, [r3, #28]
 8008718:	2380      	movs	r3, #128	; 0x80
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	429a      	cmp	r2, r3
 800871e:	d000      	beq.n	8008722 <UART_SetConfig+0x3b6>
 8008720:	e0a9      	b.n	8008876 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8008722:	231b      	movs	r3, #27
 8008724:	2218      	movs	r2, #24
 8008726:	4694      	mov	ip, r2
 8008728:	44bc      	add	ip, r7
 800872a:	4463      	add	r3, ip
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b08      	cmp	r3, #8
 8008730:	d86d      	bhi.n	800880e <UART_SetConfig+0x4a2>
 8008732:	009a      	lsls	r2, r3, #2
 8008734:	4b9f      	ldr	r3, [pc, #636]	; (80089b4 <UART_SetConfig+0x648>)
 8008736:	18d3      	adds	r3, r2, r3
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800873c:	f7fe f8c4 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8008740:	0003      	movs	r3, r0
 8008742:	005a      	lsls	r2, r3, #1
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	18d2      	adds	r2, r2, r3
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	0019      	movs	r1, r3
 8008752:	0010      	movs	r0, r2
 8008754:	f7f7 fce0 	bl	8000118 <__udivsi3>
 8008758:	0003      	movs	r3, r0
 800875a:	b29b      	uxth	r3, r3
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800875e:	e05e      	b.n	800881e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008760:	f7fe f8c8 	bl	80068f4 <HAL_RCC_GetPCLK2Freq>
 8008764:	0003      	movs	r3, r0
 8008766:	005a      	lsls	r2, r3, #1
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	18d2      	adds	r2, r2, r3
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	0019      	movs	r1, r3
 8008776:	0010      	movs	r0, r2
 8008778:	f7f7 fcce 	bl	8000118 <__udivsi3>
 800877c:	0003      	movs	r3, r0
 800877e:	b29b      	uxth	r3, r3
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008782:	e04c      	b.n	800881e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008784:	4b8c      	ldr	r3, [pc, #560]	; (80089b8 <UART_SetConfig+0x64c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2210      	movs	r2, #16
 800878a:	4013      	ands	r3, r2
 800878c:	d00e      	beq.n	80087ac <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	4a89      	ldr	r2, [pc, #548]	; (80089bc <UART_SetConfig+0x650>)
 8008796:	189a      	adds	r2, r3, r2
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	0019      	movs	r1, r3
 800879e:	0010      	movs	r0, r2
 80087a0:	f7f7 fcba 	bl	8000118 <__udivsi3>
 80087a4:	0003      	movs	r3, r0
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80087aa:	e038      	b.n	800881e <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	085b      	lsrs	r3, r3, #1
 80087b2:	4a83      	ldr	r2, [pc, #524]	; (80089c0 <UART_SetConfig+0x654>)
 80087b4:	189a      	adds	r2, r3, r2
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	0019      	movs	r1, r3
 80087bc:	0010      	movs	r0, r2
 80087be:	f7f7 fcab 	bl	8000118 <__udivsi3>
 80087c2:	0003      	movs	r3, r0
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087c8:	e029      	b.n	800881e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80087ca:	f7fd ffef 	bl	80067ac <HAL_RCC_GetSysClockFreq>
 80087ce:	0003      	movs	r3, r0
 80087d0:	005a      	lsls	r2, r3, #1
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	18d2      	adds	r2, r2, r3
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	0019      	movs	r1, r3
 80087e0:	0010      	movs	r0, r2
 80087e2:	f7f7 fc99 	bl	8000118 <__udivsi3>
 80087e6:	0003      	movs	r3, r0
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087ec:	e017      	b.n	800881e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	2280      	movs	r2, #128	; 0x80
 80087f6:	0252      	lsls	r2, r2, #9
 80087f8:	189a      	adds	r2, r3, r2
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	0019      	movs	r1, r3
 8008800:	0010      	movs	r0, r2
 8008802:	f7f7 fc89 	bl	8000118 <__udivsi3>
 8008806:	0003      	movs	r3, r0
 8008808:	b29b      	uxth	r3, r3
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800880c:	e007      	b.n	800881e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800880e:	2313      	movs	r3, #19
 8008810:	2218      	movs	r2, #24
 8008812:	4694      	mov	ip, r2
 8008814:	44bc      	add	ip, r7
 8008816:	4463      	add	r3, ip
 8008818:	2201      	movs	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
        break;
 800881c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008820:	2b0f      	cmp	r3, #15
 8008822:	d920      	bls.n	8008866 <UART_SetConfig+0x4fa>
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	4a67      	ldr	r2, [pc, #412]	; (80089c4 <UART_SetConfig+0x658>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d81c      	bhi.n	8008866 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	b29a      	uxth	r2, r3
 8008830:	200a      	movs	r0, #10
 8008832:	2418      	movs	r4, #24
 8008834:	193b      	adds	r3, r7, r4
 8008836:	181b      	adds	r3, r3, r0
 8008838:	210f      	movs	r1, #15
 800883a:	438a      	bics	r2, r1
 800883c:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	b29b      	uxth	r3, r3
 8008844:	2207      	movs	r2, #7
 8008846:	4013      	ands	r3, r2
 8008848:	b299      	uxth	r1, r3
 800884a:	193b      	adds	r3, r7, r4
 800884c:	181b      	adds	r3, r3, r0
 800884e:	193a      	adds	r2, r7, r4
 8008850:	1812      	adds	r2, r2, r0
 8008852:	8812      	ldrh	r2, [r2, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	193a      	adds	r2, r7, r4
 800885e:	1812      	adds	r2, r2, r0
 8008860:	8812      	ldrh	r2, [r2, #0]
 8008862:	60da      	str	r2, [r3, #12]
 8008864:	e095      	b.n	8008992 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8008866:	2313      	movs	r3, #19
 8008868:	2218      	movs	r2, #24
 800886a:	4694      	mov	ip, r2
 800886c:	44bc      	add	ip, r7
 800886e:	4463      	add	r3, ip
 8008870:	2201      	movs	r2, #1
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	e08d      	b.n	8008992 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8008876:	231b      	movs	r3, #27
 8008878:	2218      	movs	r2, #24
 800887a:	4694      	mov	ip, r2
 800887c:	44bc      	add	ip, r7
 800887e:	4463      	add	r3, ip
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b08      	cmp	r3, #8
 8008884:	d86a      	bhi.n	800895c <UART_SetConfig+0x5f0>
 8008886:	009a      	lsls	r2, r3, #2
 8008888:	4b4f      	ldr	r3, [pc, #316]	; (80089c8 <UART_SetConfig+0x65c>)
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008890:	f7fe f81a 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8008894:	0002      	movs	r2, r0
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	18d2      	adds	r2, r2, r3
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	0019      	movs	r1, r3
 80088a4:	0010      	movs	r0, r2
 80088a6:	f7f7 fc37 	bl	8000118 <__udivsi3>
 80088aa:	0003      	movs	r3, r0
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088b0:	e05c      	b.n	800896c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80088b2:	f7fe f81f 	bl	80068f4 <HAL_RCC_GetPCLK2Freq>
 80088b6:	0002      	movs	r2, r0
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	085b      	lsrs	r3, r3, #1
 80088be:	18d2      	adds	r2, r2, r3
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	0019      	movs	r1, r3
 80088c6:	0010      	movs	r0, r2
 80088c8:	f7f7 fc26 	bl	8000118 <__udivsi3>
 80088cc:	0003      	movs	r3, r0
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088d2:	e04b      	b.n	800896c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088d4:	4b38      	ldr	r3, [pc, #224]	; (80089b8 <UART_SetConfig+0x64c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2210      	movs	r2, #16
 80088da:	4013      	ands	r3, r2
 80088dc:	d00e      	beq.n	80088fc <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	4a39      	ldr	r2, [pc, #228]	; (80089cc <UART_SetConfig+0x660>)
 80088e6:	189a      	adds	r2, r3, r2
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	0019      	movs	r1, r3
 80088ee:	0010      	movs	r0, r2
 80088f0:	f7f7 fc12 	bl	8000118 <__udivsi3>
 80088f4:	0003      	movs	r3, r0
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80088fa:	e037      	b.n	800896c <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	4a33      	ldr	r2, [pc, #204]	; (80089d0 <UART_SetConfig+0x664>)
 8008904:	189a      	adds	r2, r3, r2
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	0019      	movs	r1, r3
 800890c:	0010      	movs	r0, r2
 800890e:	f7f7 fc03 	bl	8000118 <__udivsi3>
 8008912:	0003      	movs	r3, r0
 8008914:	b29b      	uxth	r3, r3
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008918:	e028      	b.n	800896c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800891a:	f7fd ff47 	bl	80067ac <HAL_RCC_GetSysClockFreq>
 800891e:	0002      	movs	r2, r0
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	18d2      	adds	r2, r2, r3
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	0019      	movs	r1, r3
 800892e:	0010      	movs	r0, r2
 8008930:	f7f7 fbf2 	bl	8000118 <__udivsi3>
 8008934:	0003      	movs	r3, r0
 8008936:	b29b      	uxth	r3, r3
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800893a:	e017      	b.n	800896c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	2280      	movs	r2, #128	; 0x80
 8008944:	0212      	lsls	r2, r2, #8
 8008946:	189a      	adds	r2, r3, r2
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	0019      	movs	r1, r3
 800894e:	0010      	movs	r0, r2
 8008950:	f7f7 fbe2 	bl	8000118 <__udivsi3>
 8008954:	0003      	movs	r3, r0
 8008956:	b29b      	uxth	r3, r3
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800895a:	e007      	b.n	800896c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800895c:	2313      	movs	r3, #19
 800895e:	2218      	movs	r2, #24
 8008960:	4694      	mov	ip, r2
 8008962:	44bc      	add	ip, r7
 8008964:	4463      	add	r3, ip
 8008966:	2201      	movs	r2, #1
 8008968:	701a      	strb	r2, [r3, #0]
        break;
 800896a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	2b0f      	cmp	r3, #15
 8008970:	d908      	bls.n	8008984 <UART_SetConfig+0x618>
 8008972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008974:	4a13      	ldr	r2, [pc, #76]	; (80089c4 <UART_SetConfig+0x658>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d804      	bhi.n	8008984 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008980:	60da      	str	r2, [r3, #12]
 8008982:	e006      	b.n	8008992 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8008984:	2313      	movs	r3, #19
 8008986:	2218      	movs	r2, #24
 8008988:	4694      	mov	ip, r2
 800898a:	44bc      	add	ip, r7
 800898c:	4463      	add	r3, ip
 800898e:	2201      	movs	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	2200      	movs	r2, #0
 8008996:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2200      	movs	r2, #0
 800899c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800899e:	2313      	movs	r3, #19
 80089a0:	2218      	movs	r2, #24
 80089a2:	4694      	mov	ip, r2
 80089a4:	44bc      	add	ip, r7
 80089a6:	4463      	add	r3, ip
 80089a8:	781b      	ldrb	r3, [r3, #0]
}
 80089aa:	0018      	movs	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	b00e      	add	sp, #56	; 0x38
 80089b0:	bdb0      	pop	{r4, r5, r7, pc}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	08009e20 	.word	0x08009e20
 80089b8:	40021000 	.word	0x40021000
 80089bc:	007a1200 	.word	0x007a1200
 80089c0:	01e84800 	.word	0x01e84800
 80089c4:	0000ffff 	.word	0x0000ffff
 80089c8:	08009e44 	.word	0x08009e44
 80089cc:	003d0900 	.word	0x003d0900
 80089d0:	00f42400 	.word	0x00f42400

080089d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2201      	movs	r2, #1
 80089e2:	4013      	ands	r3, r2
 80089e4:	d00b      	beq.n	80089fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	4a4a      	ldr	r2, [pc, #296]	; (8008b18 <UART_AdvFeatureConfig+0x144>)
 80089ee:	4013      	ands	r3, r2
 80089f0:	0019      	movs	r1, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	2202      	movs	r2, #2
 8008a04:	4013      	ands	r3, r2
 8008a06:	d00b      	beq.n	8008a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	4a43      	ldr	r2, [pc, #268]	; (8008b1c <UART_AdvFeatureConfig+0x148>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	0019      	movs	r1, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	2204      	movs	r2, #4
 8008a26:	4013      	ands	r3, r2
 8008a28:	d00b      	beq.n	8008a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	4a3b      	ldr	r2, [pc, #236]	; (8008b20 <UART_AdvFeatureConfig+0x14c>)
 8008a32:	4013      	ands	r3, r2
 8008a34:	0019      	movs	r1, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2208      	movs	r2, #8
 8008a48:	4013      	ands	r3, r2
 8008a4a:	d00b      	beq.n	8008a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	4a34      	ldr	r2, [pc, #208]	; (8008b24 <UART_AdvFeatureConfig+0x150>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	0019      	movs	r1, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	2210      	movs	r2, #16
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	d00b      	beq.n	8008a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4a2c      	ldr	r2, [pc, #176]	; (8008b28 <UART_AdvFeatureConfig+0x154>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	0019      	movs	r1, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	d00b      	beq.n	8008aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	4a25      	ldr	r2, [pc, #148]	; (8008b2c <UART_AdvFeatureConfig+0x158>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	0019      	movs	r1, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2240      	movs	r2, #64	; 0x40
 8008aae:	4013      	ands	r3, r2
 8008ab0:	d01d      	beq.n	8008aee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	; (8008b30 <UART_AdvFeatureConfig+0x15c>)
 8008aba:	4013      	ands	r3, r2
 8008abc:	0019      	movs	r1, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ace:	2380      	movs	r3, #128	; 0x80
 8008ad0:	035b      	lsls	r3, r3, #13
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d10b      	bne.n	8008aee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <UART_AdvFeatureConfig+0x160>)
 8008ade:	4013      	ands	r3, r2
 8008ae0:	0019      	movs	r1, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	2280      	movs	r2, #128	; 0x80
 8008af4:	4013      	ands	r3, r2
 8008af6:	d00b      	beq.n	8008b10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	4a0e      	ldr	r2, [pc, #56]	; (8008b38 <UART_AdvFeatureConfig+0x164>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	0019      	movs	r1, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	605a      	str	r2, [r3, #4]
  }
}
 8008b10:	46c0      	nop			; (mov r8, r8)
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b002      	add	sp, #8
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	fffdffff 	.word	0xfffdffff
 8008b1c:	fffeffff 	.word	0xfffeffff
 8008b20:	fffbffff 	.word	0xfffbffff
 8008b24:	ffff7fff 	.word	0xffff7fff
 8008b28:	ffffefff 	.word	0xffffefff
 8008b2c:	ffffdfff 	.word	0xffffdfff
 8008b30:	ffefffff 	.word	0xffefffff
 8008b34:	ff9fffff 	.word	0xff9fffff
 8008b38:	fff7ffff 	.word	0xfff7ffff

08008b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b4a:	f7fb ffa5 	bl	8004a98 <HAL_GetTick>
 8008b4e:	0003      	movs	r3, r0
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d10d      	bne.n	8008b7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	2380      	movs	r3, #128	; 0x80
 8008b64:	0399      	lsls	r1, r3, #14
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	4b16      	ldr	r3, [pc, #88]	; (8008bc4 <UART_CheckIdleState+0x88>)
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	0013      	movs	r3, r2
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f000 f82a 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 8008b74:	1e03      	subs	r3, r0, #0
 8008b76:	d001      	beq.n	8008b7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e01f      	b.n	8008bbc <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2204      	movs	r2, #4
 8008b84:	4013      	ands	r3, r2
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d10d      	bne.n	8008ba6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	2380      	movs	r3, #128	; 0x80
 8008b8e:	03d9      	lsls	r1, r3, #15
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <UART_CheckIdleState+0x88>)
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	0013      	movs	r3, r2
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f000 f815 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 8008b9e:	1e03      	subs	r3, r0, #0
 8008ba0:	d001      	beq.n	8008ba6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e00a      	b.n	8008bbc <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2270      	movs	r2, #112	; 0x70
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b004      	add	sp, #16
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	01ffffff 	.word	0x01ffffff

08008bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	1dfb      	adds	r3, r7, #7
 8008bd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bd8:	e029      	b.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	d026      	beq.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be0:	f7fb ff5a 	bl	8004a98 <HAL_GetTick>
 8008be4:	0002      	movs	r2, r0
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d11b      	bne.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4915      	ldr	r1, [pc, #84]	; (8008c58 <UART_WaitOnFlagUntilTimeout+0x90>)
 8008c02:	400a      	ands	r2, r1
 8008c04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2101      	movs	r1, #1
 8008c12:	438a      	bics	r2, r1
 8008c14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2270      	movs	r2, #112	; 0x70
 8008c26:	2100      	movs	r1, #0
 8008c28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e00f      	b.n	8008c4e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	4013      	ands	r3, r2
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	425a      	negs	r2, r3
 8008c3e:	4153      	adcs	r3, r2
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	001a      	movs	r2, r3
 8008c44:	1dfb      	adds	r3, r7, #7
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d0c6      	beq.n	8008bda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	0018      	movs	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	b004      	add	sp, #16
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	fffffe5f 	.word	0xfffffe5f

08008c5c <__errno>:
 8008c5c:	4b01      	ldr	r3, [pc, #4]	; (8008c64 <__errno+0x8>)
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	4770      	bx	lr
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	2000000c 	.word	0x2000000c

08008c68 <__libc_init_array>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	4d0c      	ldr	r5, [pc, #48]	; (8008ca0 <__libc_init_array+0x38>)
 8008c6e:	4c0d      	ldr	r4, [pc, #52]	; (8008ca4 <__libc_init_array+0x3c>)
 8008c70:	1b64      	subs	r4, r4, r5
 8008c72:	10a4      	asrs	r4, r4, #2
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	d109      	bne.n	8008c8c <__libc_init_array+0x24>
 8008c78:	2600      	movs	r6, #0
 8008c7a:	f001 f871 	bl	8009d60 <_init>
 8008c7e:	4d0a      	ldr	r5, [pc, #40]	; (8008ca8 <__libc_init_array+0x40>)
 8008c80:	4c0a      	ldr	r4, [pc, #40]	; (8008cac <__libc_init_array+0x44>)
 8008c82:	1b64      	subs	r4, r4, r5
 8008c84:	10a4      	asrs	r4, r4, #2
 8008c86:	42a6      	cmp	r6, r4
 8008c88:	d105      	bne.n	8008c96 <__libc_init_array+0x2e>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	00b3      	lsls	r3, r6, #2
 8008c8e:	58eb      	ldr	r3, [r5, r3]
 8008c90:	4798      	blx	r3
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7ee      	b.n	8008c74 <__libc_init_array+0xc>
 8008c96:	00b3      	lsls	r3, r6, #2
 8008c98:	58eb      	ldr	r3, [r5, r3]
 8008c9a:	4798      	blx	r3
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	e7f2      	b.n	8008c86 <__libc_init_array+0x1e>
 8008ca0:	08009eb8 	.word	0x08009eb8
 8008ca4:	08009eb8 	.word	0x08009eb8
 8008ca8:	08009eb8 	.word	0x08009eb8
 8008cac:	08009ebc 	.word	0x08009ebc

08008cb0 <memcpy>:
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d100      	bne.n	8008cba <memcpy+0xa>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	5ccc      	ldrb	r4, [r1, r3]
 8008cbc:	54c4      	strb	r4, [r0, r3]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	e7f8      	b.n	8008cb4 <memcpy+0x4>

08008cc2 <memset>:
 8008cc2:	0003      	movs	r3, r0
 8008cc4:	1812      	adds	r2, r2, r0
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d100      	bne.n	8008ccc <memset+0xa>
 8008cca:	4770      	bx	lr
 8008ccc:	7019      	strb	r1, [r3, #0]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	e7f9      	b.n	8008cc6 <memset+0x4>
	...

08008cd4 <pow>:
 8008cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cd6:	2400      	movs	r4, #0
 8008cd8:	b091      	sub	sp, #68	; 0x44
 8008cda:	001f      	movs	r7, r3
 8008cdc:	9000      	str	r0, [sp, #0]
 8008cde:	9101      	str	r1, [sp, #4]
 8008ce0:	0016      	movs	r6, r2
 8008ce2:	f000 f98d 	bl	8009000 <__ieee754_pow>
 8008ce6:	4bbe      	ldr	r3, [pc, #760]	; (8008fe0 <pow+0x30c>)
 8008ce8:	9002      	str	r0, [sp, #8]
 8008cea:	9103      	str	r1, [sp, #12]
 8008cec:	571c      	ldrsb	r4, [r3, r4]
 8008cee:	1c63      	adds	r3, r4, #1
 8008cf0:	d100      	bne.n	8008cf4 <pow+0x20>
 8008cf2:	e0d4      	b.n	8008e9e <pow+0x1ca>
 8008cf4:	0032      	movs	r2, r6
 8008cf6:	003b      	movs	r3, r7
 8008cf8:	0030      	movs	r0, r6
 8008cfa:	0039      	movs	r1, r7
 8008cfc:	f7f9 fb5c 	bl	80023b8 <__aeabi_dcmpun>
 8008d00:	1e05      	subs	r5, r0, #0
 8008d02:	d000      	beq.n	8008d06 <pow+0x32>
 8008d04:	e0cb      	b.n	8008e9e <pow+0x1ca>
 8008d06:	9a00      	ldr	r2, [sp, #0]
 8008d08:	9b01      	ldr	r3, [sp, #4]
 8008d0a:	0010      	movs	r0, r2
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	f7f9 fb53 	bl	80023b8 <__aeabi_dcmpun>
 8008d12:	2200      	movs	r2, #0
 8008d14:	9005      	str	r0, [sp, #20]
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d01e      	beq.n	8008d58 <pow+0x84>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	0030      	movs	r0, r6
 8008d1e:	0039      	movs	r1, r7
 8008d20:	f7f7 fa96 	bl	8000250 <__aeabi_dcmpeq>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d100      	bne.n	8008d2a <pow+0x56>
 8008d28:	e0b9      	b.n	8008e9e <pow+0x1ca>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	4bad      	ldr	r3, [pc, #692]	; (8008fe4 <pow+0x310>)
 8008d30:	950e      	str	r5, [sp, #56]	; 0x38
 8008d32:	9307      	str	r3, [sp, #28]
 8008d34:	9a00      	ldr	r2, [sp, #0]
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	9208      	str	r2, [sp, #32]
 8008d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4baa      	ldr	r3, [pc, #680]	; (8008fe8 <pow+0x314>)
 8008d40:	960a      	str	r6, [sp, #40]	; 0x28
 8008d42:	970b      	str	r7, [sp, #44]	; 0x2c
 8008d44:	920c      	str	r2, [sp, #48]	; 0x30
 8008d46:	930d      	str	r3, [sp, #52]	; 0x34
 8008d48:	2c02      	cmp	r4, #2
 8008d4a:	d033      	beq.n	8008db4 <pow+0xe0>
 8008d4c:	a806      	add	r0, sp, #24
 8008d4e:	f000 ff0b 	bl	8009b68 <matherr>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d125      	bne.n	8008da2 <pow+0xce>
 8008d56:	e059      	b.n	8008e0c <pow+0x138>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9800      	ldr	r0, [sp, #0]
 8008d5c:	9901      	ldr	r1, [sp, #4]
 8008d5e:	f7f7 fa77 	bl	8000250 <__aeabi_dcmpeq>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d057      	beq.n	8008e16 <pow+0x142>
 8008d66:	2200      	movs	r2, #0
 8008d68:	2300      	movs	r3, #0
 8008d6a:	0030      	movs	r0, r6
 8008d6c:	0039      	movs	r1, r7
 8008d6e:	f7f7 fa6f 	bl	8000250 <__aeabi_dcmpeq>
 8008d72:	1e05      	subs	r5, r0, #0
 8008d74:	d021      	beq.n	8008dba <pow+0xe6>
 8008d76:	2301      	movs	r3, #1
 8008d78:	9306      	str	r3, [sp, #24]
 8008d7a:	4b9a      	ldr	r3, [pc, #616]	; (8008fe4 <pow+0x310>)
 8008d7c:	960a      	str	r6, [sp, #40]	; 0x28
 8008d7e:	970b      	str	r7, [sp, #44]	; 0x2c
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	9b05      	ldr	r3, [sp, #20]
 8008d84:	930e      	str	r3, [sp, #56]	; 0x38
 8008d86:	9a00      	ldr	r2, [sp, #0]
 8008d88:	9b01      	ldr	r3, [sp, #4]
 8008d8a:	9208      	str	r2, [sp, #32]
 8008d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2300      	movs	r3, #0
 8008d92:	920c      	str	r2, [sp, #48]	; 0x30
 8008d94:	930d      	str	r3, [sp, #52]	; 0x34
 8008d96:	2c00      	cmp	r4, #0
 8008d98:	d0d8      	beq.n	8008d4c <pow+0x78>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4b92      	ldr	r3, [pc, #584]	; (8008fe8 <pow+0x314>)
 8008d9e:	920c      	str	r2, [sp, #48]	; 0x30
 8008da0:	930d      	str	r3, [sp, #52]	; 0x34
 8008da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <pow+0xe0>
 8008daa:	f7ff ff57 	bl	8008c5c <__errno>
 8008dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	6003      	str	r3, [r0, #0]
 8008db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008db6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008db8:	e06f      	b.n	8008e9a <pow+0x1c6>
 8008dba:	0030      	movs	r0, r6
 8008dbc:	0039      	movs	r1, r7
 8008dbe:	f000 fecb 	bl	8009b58 <finite>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d06b      	beq.n	8008e9e <pow+0x1ca>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2300      	movs	r3, #0
 8008dca:	0030      	movs	r0, r6
 8008dcc:	0039      	movs	r1, r7
 8008dce:	f7f7 fa45 	bl	800025c <__aeabi_dcmplt>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d063      	beq.n	8008e9e <pow+0x1ca>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	9306      	str	r3, [sp, #24]
 8008dda:	4b82      	ldr	r3, [pc, #520]	; (8008fe4 <pow+0x310>)
 8008ddc:	950e      	str	r5, [sp, #56]	; 0x38
 8008dde:	9307      	str	r3, [sp, #28]
 8008de0:	9b00      	ldr	r3, [sp, #0]
 8008de2:	9c01      	ldr	r4, [sp, #4]
 8008de4:	9308      	str	r3, [sp, #32]
 8008de6:	9409      	str	r4, [sp, #36]	; 0x24
 8008de8:	4b7d      	ldr	r3, [pc, #500]	; (8008fe0 <pow+0x30c>)
 8008dea:	960a      	str	r6, [sp, #40]	; 0x28
 8008dec:	970b      	str	r7, [sp, #44]	; 0x2c
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <pow+0x12c>
 8008df6:	2300      	movs	r3, #0
 8008df8:	2400      	movs	r4, #0
 8008dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8008dfc:	940d      	str	r4, [sp, #52]	; 0x34
 8008dfe:	e7a5      	b.n	8008d4c <pow+0x78>
 8008e00:	2000      	movs	r0, #0
 8008e02:	497a      	ldr	r1, [pc, #488]	; (8008fec <pow+0x318>)
 8008e04:	900c      	str	r0, [sp, #48]	; 0x30
 8008e06:	910d      	str	r1, [sp, #52]	; 0x34
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d19f      	bne.n	8008d4c <pow+0x78>
 8008e0c:	f7ff ff26 	bl	8008c5c <__errno>
 8008e10:	2321      	movs	r3, #33	; 0x21
 8008e12:	6003      	str	r3, [r0, #0]
 8008e14:	e7c5      	b.n	8008da2 <pow+0xce>
 8008e16:	9802      	ldr	r0, [sp, #8]
 8008e18:	9903      	ldr	r1, [sp, #12]
 8008e1a:	f000 fe9d 	bl	8009b58 <finite>
 8008e1e:	9005      	str	r0, [sp, #20]
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d000      	beq.n	8008e26 <pow+0x152>
 8008e24:	e0a5      	b.n	8008f72 <pow+0x29e>
 8008e26:	9800      	ldr	r0, [sp, #0]
 8008e28:	9901      	ldr	r1, [sp, #4]
 8008e2a:	f000 fe95 	bl	8009b58 <finite>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d100      	bne.n	8008e34 <pow+0x160>
 8008e32:	e09e      	b.n	8008f72 <pow+0x29e>
 8008e34:	0030      	movs	r0, r6
 8008e36:	0039      	movs	r1, r7
 8008e38:	f000 fe8e 	bl	8009b58 <finite>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d100      	bne.n	8008e42 <pow+0x16e>
 8008e40:	e097      	b.n	8008f72 <pow+0x29e>
 8008e42:	2500      	movs	r5, #0
 8008e44:	4b66      	ldr	r3, [pc, #408]	; (8008fe0 <pow+0x30c>)
 8008e46:	ac06      	add	r4, sp, #24
 8008e48:	575d      	ldrsb	r5, [r3, r5]
 8008e4a:	9a02      	ldr	r2, [sp, #8]
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	0019      	movs	r1, r3
 8008e50:	0010      	movs	r0, r2
 8008e52:	f7f9 fab1 	bl	80023b8 <__aeabi_dcmpun>
 8008e56:	4b63      	ldr	r3, [pc, #396]	; (8008fe4 <pow+0x310>)
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d031      	beq.n	8008ec0 <pow+0x1ec>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	6063      	str	r3, [r4, #4]
 8008e60:	9b05      	ldr	r3, [sp, #20]
 8008e62:	9206      	str	r2, [sp, #24]
 8008e64:	6223      	str	r3, [r4, #32]
 8008e66:	6126      	str	r6, [r4, #16]
 8008e68:	6167      	str	r7, [r4, #20]
 8008e6a:	9a00      	ldr	r2, [sp, #0]
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	60a2      	str	r2, [r4, #8]
 8008e70:	60e3      	str	r3, [r4, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	2300      	movs	r3, #0
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	d115      	bne.n	8008ea6 <pow+0x1d2>
 8008e7a:	61a2      	str	r2, [r4, #24]
 8008e7c:	61e3      	str	r3, [r4, #28]
 8008e7e:	0020      	movs	r0, r4
 8008e80:	f000 fe72 	bl	8009b68 <matherr>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d016      	beq.n	8008eb6 <pow+0x1e2>
 8008e88:	6a23      	ldr	r3, [r4, #32]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <pow+0x1c2>
 8008e8e:	f7ff fee5 	bl	8008c5c <__errno>
 8008e92:	6a23      	ldr	r3, [r4, #32]
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	69a3      	ldr	r3, [r4, #24]
 8008e98:	69e4      	ldr	r4, [r4, #28]
 8008e9a:	9302      	str	r3, [sp, #8]
 8008e9c:	9403      	str	r4, [sp, #12]
 8008e9e:	9802      	ldr	r0, [sp, #8]
 8008ea0:	9903      	ldr	r1, [sp, #12]
 8008ea2:	b011      	add	sp, #68	; 0x44
 8008ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea6:	0010      	movs	r0, r2
 8008ea8:	0019      	movs	r1, r3
 8008eaa:	f7f8 f8c1 	bl	8001030 <__aeabi_ddiv>
 8008eae:	61a0      	str	r0, [r4, #24]
 8008eb0:	61e1      	str	r1, [r4, #28]
 8008eb2:	2d02      	cmp	r5, #2
 8008eb4:	d1e3      	bne.n	8008e7e <pow+0x1aa>
 8008eb6:	f7ff fed1 	bl	8008c5c <__errno>
 8008eba:	2321      	movs	r3, #33	; 0x21
 8008ebc:	6003      	str	r3, [r0, #0]
 8008ebe:	e7e3      	b.n	8008e88 <pow+0x1b4>
 8008ec0:	2203      	movs	r2, #3
 8008ec2:	6126      	str	r6, [r4, #16]
 8008ec4:	6167      	str	r7, [r4, #20]
 8008ec6:	9206      	str	r2, [sp, #24]
 8008ec8:	6063      	str	r3, [r4, #4]
 8008eca:	6220      	str	r0, [r4, #32]
 8008ecc:	9a00      	ldr	r2, [sp, #0]
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	0030      	movs	r0, r6
 8008ed2:	60a2      	str	r2, [r4, #8]
 8008ed4:	60e3      	str	r3, [r4, #12]
 8008ed6:	0039      	movs	r1, r7
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4b45      	ldr	r3, [pc, #276]	; (8008ff0 <pow+0x31c>)
 8008edc:	f7f8 fcb2 	bl	8001844 <__aeabi_dmul>
 8008ee0:	0006      	movs	r6, r0
 8008ee2:	000f      	movs	r7, r1
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	d124      	bne.n	8008f32 <pow+0x25e>
 8008ee8:	9800      	ldr	r0, [sp, #0]
 8008eea:	9901      	ldr	r1, [sp, #4]
 8008eec:	22e0      	movs	r2, #224	; 0xe0
 8008eee:	4b41      	ldr	r3, [pc, #260]	; (8008ff4 <pow+0x320>)
 8008ef0:	0612      	lsls	r2, r2, #24
 8008ef2:	61a2      	str	r2, [r4, #24]
 8008ef4:	61e3      	str	r3, [r4, #28]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f7f7 f9af 	bl	800025c <__aeabi_dcmplt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d030      	beq.n	8008f64 <pow+0x290>
 8008f02:	0030      	movs	r0, r6
 8008f04:	0039      	movs	r1, r7
 8008f06:	f000 fe37 	bl	8009b78 <rint>
 8008f0a:	0032      	movs	r2, r6
 8008f0c:	003b      	movs	r3, r7
 8008f0e:	f7f7 f99f 	bl	8000250 <__aeabi_dcmpeq>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d104      	bne.n	8008f20 <pow+0x24c>
 8008f16:	22e0      	movs	r2, #224	; 0xe0
 8008f18:	4b37      	ldr	r3, [pc, #220]	; (8008ff8 <pow+0x324>)
 8008f1a:	0612      	lsls	r2, r2, #24
 8008f1c:	61a2      	str	r2, [r4, #24]
 8008f1e:	61e3      	str	r3, [r4, #28]
 8008f20:	4b2f      	ldr	r3, [pc, #188]	; (8008fe0 <pow+0x30c>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b25b      	sxtb	r3, r3
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d11c      	bne.n	8008f64 <pow+0x290>
 8008f2a:	f7ff fe97 	bl	8008c5c <__errno>
 8008f2e:	2322      	movs	r3, #34	; 0x22
 8008f30:	e7c4      	b.n	8008ebc <pow+0x1e8>
 8008f32:	2200      	movs	r2, #0
 8008f34:	9800      	ldr	r0, [sp, #0]
 8008f36:	9901      	ldr	r1, [sp, #4]
 8008f38:	4b30      	ldr	r3, [pc, #192]	; (8008ffc <pow+0x328>)
 8008f3a:	61a2      	str	r2, [r4, #24]
 8008f3c:	61e3      	str	r3, [r4, #28]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2300      	movs	r3, #0
 8008f42:	f7f7 f98b 	bl	800025c <__aeabi_dcmplt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d0ea      	beq.n	8008f20 <pow+0x24c>
 8008f4a:	0030      	movs	r0, r6
 8008f4c:	0039      	movs	r1, r7
 8008f4e:	f000 fe13 	bl	8009b78 <rint>
 8008f52:	0032      	movs	r2, r6
 8008f54:	003b      	movs	r3, r7
 8008f56:	f7f7 f97b 	bl	8000250 <__aeabi_dcmpeq>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d1e0      	bne.n	8008f20 <pow+0x24c>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4b22      	ldr	r3, [pc, #136]	; (8008fec <pow+0x318>)
 8008f62:	e7db      	b.n	8008f1c <pow+0x248>
 8008f64:	0020      	movs	r0, r4
 8008f66:	f000 fdff 	bl	8009b68 <matherr>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d000      	beq.n	8008f70 <pow+0x29c>
 8008f6e:	e78b      	b.n	8008e88 <pow+0x1b4>
 8008f70:	e7db      	b.n	8008f2a <pow+0x256>
 8008f72:	2200      	movs	r2, #0
 8008f74:	9802      	ldr	r0, [sp, #8]
 8008f76:	9903      	ldr	r1, [sp, #12]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f7f7 f969 	bl	8000250 <__aeabi_dcmpeq>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d100      	bne.n	8008f84 <pow+0x2b0>
 8008f82:	e78c      	b.n	8008e9e <pow+0x1ca>
 8008f84:	9800      	ldr	r0, [sp, #0]
 8008f86:	9901      	ldr	r1, [sp, #4]
 8008f88:	f000 fde6 	bl	8009b58 <finite>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d100      	bne.n	8008f92 <pow+0x2be>
 8008f90:	e785      	b.n	8008e9e <pow+0x1ca>
 8008f92:	0030      	movs	r0, r6
 8008f94:	0039      	movs	r1, r7
 8008f96:	f000 fddf 	bl	8009b58 <finite>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d100      	bne.n	8008fa0 <pow+0x2cc>
 8008f9e:	e77e      	b.n	8008e9e <pow+0x1ca>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	9306      	str	r3, [sp, #24]
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <pow+0x310>)
 8008fa6:	960a      	str	r6, [sp, #40]	; 0x28
 8008fa8:	970b      	str	r7, [sp, #44]	; 0x2c
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	2300      	movs	r3, #0
 8008fae:	930e      	str	r3, [sp, #56]	; 0x38
 8008fb0:	9b00      	ldr	r3, [sp, #0]
 8008fb2:	9c01      	ldr	r4, [sp, #4]
 8008fb4:	9308      	str	r3, [sp, #32]
 8008fb6:	9409      	str	r4, [sp, #36]	; 0x24
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2400      	movs	r4, #0
 8008fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8008fbe:	940d      	str	r4, [sp, #52]	; 0x34
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <pow+0x30c>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	b25b      	sxtb	r3, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d103      	bne.n	8008fd2 <pow+0x2fe>
 8008fca:	f7ff fe47 	bl	8008c5c <__errno>
 8008fce:	2322      	movs	r3, #34	; 0x22
 8008fd0:	e71f      	b.n	8008e12 <pow+0x13e>
 8008fd2:	a806      	add	r0, sp, #24
 8008fd4:	f000 fdc8 	bl	8009b68 <matherr>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d000      	beq.n	8008fde <pow+0x30a>
 8008fdc:	e6e1      	b.n	8008da2 <pow+0xce>
 8008fde:	e7f4      	b.n	8008fca <pow+0x2f6>
 8008fe0:	20000070 	.word	0x20000070
 8008fe4:	08009e68 	.word	0x08009e68
 8008fe8:	3ff00000 	.word	0x3ff00000
 8008fec:	fff00000 	.word	0xfff00000
 8008ff0:	3fe00000 	.word	0x3fe00000
 8008ff4:	47efffff 	.word	0x47efffff
 8008ff8:	c7efffff 	.word	0xc7efffff
 8008ffc:	7ff00000 	.word	0x7ff00000

08009000 <__ieee754_pow>:
 8009000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009002:	b095      	sub	sp, #84	; 0x54
 8009004:	9202      	str	r2, [sp, #8]
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	000e      	movs	r6, r1
 800900c:	9902      	ldr	r1, [sp, #8]
 800900e:	005d      	lsls	r5, r3, #1
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	000b      	movs	r3, r1
 8009014:	086d      	lsrs	r5, r5, #1
 8009016:	0007      	movs	r7, r0
 8009018:	432b      	orrs	r3, r5
 800901a:	d101      	bne.n	8009020 <__ieee754_pow+0x20>
 800901c:	f000 fcad 	bl	800997a <__ieee754_pow+0x97a>
 8009020:	4b7e      	ldr	r3, [pc, #504]	; (800921c <__ieee754_pow+0x21c>)
 8009022:	0074      	lsls	r4, r6, #1
 8009024:	9608      	str	r6, [sp, #32]
 8009026:	9000      	str	r0, [sp, #0]
 8009028:	0864      	lsrs	r4, r4, #1
 800902a:	469c      	mov	ip, r3
 800902c:	429c      	cmp	r4, r3
 800902e:	dc0b      	bgt.n	8009048 <__ieee754_pow+0x48>
 8009030:	d104      	bne.n	800903c <__ieee754_pow+0x3c>
 8009032:	2800      	cmp	r0, #0
 8009034:	d108      	bne.n	8009048 <__ieee754_pow+0x48>
 8009036:	42a5      	cmp	r5, r4
 8009038:	dc0c      	bgt.n	8009054 <__ieee754_pow+0x54>
 800903a:	e001      	b.n	8009040 <__ieee754_pow+0x40>
 800903c:	429d      	cmp	r5, r3
 800903e:	dc03      	bgt.n	8009048 <__ieee754_pow+0x48>
 8009040:	4565      	cmp	r5, ip
 8009042:	d10d      	bne.n	8009060 <__ieee754_pow+0x60>
 8009044:	2900      	cmp	r1, #0
 8009046:	d00b      	beq.n	8009060 <__ieee754_pow+0x60>
 8009048:	4b75      	ldr	r3, [pc, #468]	; (8009220 <__ieee754_pow+0x220>)
 800904a:	18e4      	adds	r4, r4, r3
 800904c:	4327      	orrs	r7, r4
 800904e:	d101      	bne.n	8009054 <__ieee754_pow+0x54>
 8009050:	f000 fc93 	bl	800997a <__ieee754_pow+0x97a>
 8009054:	4873      	ldr	r0, [pc, #460]	; (8009224 <__ieee754_pow+0x224>)
 8009056:	f000 fd89 	bl	8009b6c <nan>
 800905a:	9000      	str	r0, [sp, #0]
 800905c:	9101      	str	r1, [sp, #4]
 800905e:	e061      	b.n	8009124 <__ieee754_pow+0x124>
 8009060:	2300      	movs	r3, #0
 8009062:	9306      	str	r3, [sp, #24]
 8009064:	2e00      	cmp	r6, #0
 8009066:	da17      	bge.n	8009098 <__ieee754_pow+0x98>
 8009068:	4a6f      	ldr	r2, [pc, #444]	; (8009228 <__ieee754_pow+0x228>)
 800906a:	4295      	cmp	r5, r2
 800906c:	dc4d      	bgt.n	800910a <__ieee754_pow+0x10a>
 800906e:	4a6f      	ldr	r2, [pc, #444]	; (800922c <__ieee754_pow+0x22c>)
 8009070:	4295      	cmp	r5, r2
 8009072:	dd11      	ble.n	8009098 <__ieee754_pow+0x98>
 8009074:	4b6e      	ldr	r3, [pc, #440]	; (8009230 <__ieee754_pow+0x230>)
 8009076:	152a      	asrs	r2, r5, #20
 8009078:	18d2      	adds	r2, r2, r3
 800907a:	2a14      	cmp	r2, #20
 800907c:	dd25      	ble.n	80090ca <__ieee754_pow+0xca>
 800907e:	2034      	movs	r0, #52	; 0x34
 8009080:	1a82      	subs	r2, r0, r2
 8009082:	9802      	ldr	r0, [sp, #8]
 8009084:	40d0      	lsrs	r0, r2
 8009086:	0003      	movs	r3, r0
 8009088:	4093      	lsls	r3, r2
 800908a:	428b      	cmp	r3, r1
 800908c:	d104      	bne.n	8009098 <__ieee754_pow+0x98>
 800908e:	2201      	movs	r2, #1
 8009090:	4010      	ands	r0, r2
 8009092:	1892      	adds	r2, r2, r2
 8009094:	1a13      	subs	r3, r2, r0
 8009096:	9306      	str	r3, [sp, #24]
 8009098:	2900      	cmp	r1, #0
 800909a:	d15e      	bne.n	800915a <__ieee754_pow+0x15a>
 800909c:	4565      	cmp	r5, ip
 800909e:	d123      	bne.n	80090e8 <__ieee754_pow+0xe8>
 80090a0:	4b5f      	ldr	r3, [pc, #380]	; (8009220 <__ieee754_pow+0x220>)
 80090a2:	18e3      	adds	r3, r4, r3
 80090a4:	431f      	orrs	r7, r3
 80090a6:	d101      	bne.n	80090ac <__ieee754_pow+0xac>
 80090a8:	f000 fc67 	bl	800997a <__ieee754_pow+0x97a>
 80090ac:	4b5f      	ldr	r3, [pc, #380]	; (800922c <__ieee754_pow+0x22c>)
 80090ae:	429c      	cmp	r4, r3
 80090b0:	dd2d      	ble.n	800910e <__ieee754_pow+0x10e>
 80090b2:	9b02      	ldr	r3, [sp, #8]
 80090b4:	9c03      	ldr	r4, [sp, #12]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	9401      	str	r4, [sp, #4]
 80090ba:	9b04      	ldr	r3, [sp, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	da31      	bge.n	8009124 <__ieee754_pow+0x124>
 80090c0:	2300      	movs	r3, #0
 80090c2:	2400      	movs	r4, #0
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	9401      	str	r4, [sp, #4]
 80090c8:	e02c      	b.n	8009124 <__ieee754_pow+0x124>
 80090ca:	2900      	cmp	r1, #0
 80090cc:	d145      	bne.n	800915a <__ieee754_pow+0x15a>
 80090ce:	2314      	movs	r3, #20
 80090d0:	1a9a      	subs	r2, r3, r2
 80090d2:	002b      	movs	r3, r5
 80090d4:	4113      	asrs	r3, r2
 80090d6:	0019      	movs	r1, r3
 80090d8:	4091      	lsls	r1, r2
 80090da:	42a9      	cmp	r1, r5
 80090dc:	d104      	bne.n	80090e8 <__ieee754_pow+0xe8>
 80090de:	2201      	movs	r2, #1
 80090e0:	4013      	ands	r3, r2
 80090e2:	1892      	adds	r2, r2, r2
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	9306      	str	r3, [sp, #24]
 80090e8:	4b52      	ldr	r3, [pc, #328]	; (8009234 <__ieee754_pow+0x234>)
 80090ea:	429d      	cmp	r5, r3
 80090ec:	d11e      	bne.n	800912c <__ieee754_pow+0x12c>
 80090ee:	0038      	movs	r0, r7
 80090f0:	0031      	movs	r1, r6
 80090f2:	9b04      	ldr	r3, [sp, #16]
 80090f4:	9000      	str	r0, [sp, #0]
 80090f6:	9101      	str	r1, [sp, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da13      	bge.n	8009124 <__ieee754_pow+0x124>
 80090fc:	003a      	movs	r2, r7
 80090fe:	0033      	movs	r3, r6
 8009100:	2000      	movs	r0, #0
 8009102:	494c      	ldr	r1, [pc, #304]	; (8009234 <__ieee754_pow+0x234>)
 8009104:	f7f7 ff94 	bl	8001030 <__aeabi_ddiv>
 8009108:	e7a7      	b.n	800905a <__ieee754_pow+0x5a>
 800910a:	2302      	movs	r3, #2
 800910c:	e7c3      	b.n	8009096 <__ieee754_pow+0x96>
 800910e:	9b04      	ldr	r3, [sp, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dad5      	bge.n	80090c0 <__ieee754_pow+0xc0>
 8009114:	2280      	movs	r2, #128	; 0x80
 8009116:	0612      	lsls	r2, r2, #24
 8009118:	4694      	mov	ip, r2
 800911a:	9b02      	ldr	r3, [sp, #8]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	4463      	add	r3, ip
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	9800      	ldr	r0, [sp, #0]
 8009126:	9901      	ldr	r1, [sp, #4]
 8009128:	b015      	add	sp, #84	; 0x54
 800912a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912c:	2380      	movs	r3, #128	; 0x80
 800912e:	9a04      	ldr	r2, [sp, #16]
 8009130:	05db      	lsls	r3, r3, #23
 8009132:	429a      	cmp	r2, r3
 8009134:	d106      	bne.n	8009144 <__ieee754_pow+0x144>
 8009136:	003a      	movs	r2, r7
 8009138:	0033      	movs	r3, r6
 800913a:	0038      	movs	r0, r7
 800913c:	0031      	movs	r1, r6
 800913e:	f7f8 fb81 	bl	8001844 <__aeabi_dmul>
 8009142:	e78a      	b.n	800905a <__ieee754_pow+0x5a>
 8009144:	4b3c      	ldr	r3, [pc, #240]	; (8009238 <__ieee754_pow+0x238>)
 8009146:	9a04      	ldr	r2, [sp, #16]
 8009148:	429a      	cmp	r2, r3
 800914a:	d106      	bne.n	800915a <__ieee754_pow+0x15a>
 800914c:	2e00      	cmp	r6, #0
 800914e:	db04      	blt.n	800915a <__ieee754_pow+0x15a>
 8009150:	0038      	movs	r0, r7
 8009152:	0031      	movs	r1, r6
 8009154:	f000 fc4a 	bl	80099ec <__ieee754_sqrt>
 8009158:	e77f      	b.n	800905a <__ieee754_pow+0x5a>
 800915a:	0038      	movs	r0, r7
 800915c:	0031      	movs	r1, r6
 800915e:	f000 fcf7 	bl	8009b50 <fabs>
 8009162:	9000      	str	r0, [sp, #0]
 8009164:	9101      	str	r1, [sp, #4]
 8009166:	2f00      	cmp	r7, #0
 8009168:	d12e      	bne.n	80091c8 <__ieee754_pow+0x1c8>
 800916a:	2c00      	cmp	r4, #0
 800916c:	d004      	beq.n	8009178 <__ieee754_pow+0x178>
 800916e:	4a31      	ldr	r2, [pc, #196]	; (8009234 <__ieee754_pow+0x234>)
 8009170:	00b3      	lsls	r3, r6, #2
 8009172:	089b      	lsrs	r3, r3, #2
 8009174:	4293      	cmp	r3, r2
 8009176:	d127      	bne.n	80091c8 <__ieee754_pow+0x1c8>
 8009178:	9b04      	ldr	r3, [sp, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	da07      	bge.n	800918e <__ieee754_pow+0x18e>
 800917e:	9a00      	ldr	r2, [sp, #0]
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	2000      	movs	r0, #0
 8009184:	492b      	ldr	r1, [pc, #172]	; (8009234 <__ieee754_pow+0x234>)
 8009186:	f7f7 ff53 	bl	8001030 <__aeabi_ddiv>
 800918a:	9000      	str	r0, [sp, #0]
 800918c:	9101      	str	r1, [sp, #4]
 800918e:	9b08      	ldr	r3, [sp, #32]
 8009190:	2b00      	cmp	r3, #0
 8009192:	dac7      	bge.n	8009124 <__ieee754_pow+0x124>
 8009194:	4b22      	ldr	r3, [pc, #136]	; (8009220 <__ieee754_pow+0x220>)
 8009196:	18e4      	adds	r4, r4, r3
 8009198:	9b06      	ldr	r3, [sp, #24]
 800919a:	431c      	orrs	r4, r3
 800919c:	d108      	bne.n	80091b0 <__ieee754_pow+0x1b0>
 800919e:	9a00      	ldr	r2, [sp, #0]
 80091a0:	9b01      	ldr	r3, [sp, #4]
 80091a2:	0010      	movs	r0, r2
 80091a4:	0019      	movs	r1, r3
 80091a6:	f7f8 fdbf 	bl	8001d28 <__aeabi_dsub>
 80091aa:	0002      	movs	r2, r0
 80091ac:	000b      	movs	r3, r1
 80091ae:	e7a9      	b.n	8009104 <__ieee754_pow+0x104>
 80091b0:	9b06      	ldr	r3, [sp, #24]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d1b6      	bne.n	8009124 <__ieee754_pow+0x124>
 80091b6:	9800      	ldr	r0, [sp, #0]
 80091b8:	2180      	movs	r1, #128	; 0x80
 80091ba:	0002      	movs	r2, r0
 80091bc:	9801      	ldr	r0, [sp, #4]
 80091be:	0609      	lsls	r1, r1, #24
 80091c0:	1843      	adds	r3, r0, r1
 80091c2:	9200      	str	r2, [sp, #0]
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	e7ad      	b.n	8009124 <__ieee754_pow+0x124>
 80091c8:	0ff3      	lsrs	r3, r6, #31
 80091ca:	3b01      	subs	r3, #1
 80091cc:	9310      	str	r3, [sp, #64]	; 0x40
 80091ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	d104      	bne.n	80091e0 <__ieee754_pow+0x1e0>
 80091d6:	003a      	movs	r2, r7
 80091d8:	0033      	movs	r3, r6
 80091da:	0038      	movs	r0, r7
 80091dc:	0031      	movs	r1, r6
 80091de:	e7e2      	b.n	80091a6 <__ieee754_pow+0x1a6>
 80091e0:	4b16      	ldr	r3, [pc, #88]	; (800923c <__ieee754_pow+0x23c>)
 80091e2:	429d      	cmp	r5, r3
 80091e4:	dc00      	bgt.n	80091e8 <__ieee754_pow+0x1e8>
 80091e6:	e0f7      	b.n	80093d8 <__ieee754_pow+0x3d8>
 80091e8:	4b15      	ldr	r3, [pc, #84]	; (8009240 <__ieee754_pow+0x240>)
 80091ea:	429d      	cmp	r5, r3
 80091ec:	dd0b      	ble.n	8009206 <__ieee754_pow+0x206>
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <__ieee754_pow+0x22c>)
 80091f0:	429c      	cmp	r4, r3
 80091f2:	dc0e      	bgt.n	8009212 <__ieee754_pow+0x212>
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	db00      	blt.n	80091fc <__ieee754_pow+0x1fc>
 80091fa:	e761      	b.n	80090c0 <__ieee754_pow+0xc0>
 80091fc:	4a11      	ldr	r2, [pc, #68]	; (8009244 <__ieee754_pow+0x244>)
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <__ieee754_pow+0x248>)
 8009200:	0010      	movs	r0, r2
 8009202:	0019      	movs	r1, r3
 8009204:	e79b      	b.n	800913e <__ieee754_pow+0x13e>
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <__ieee754_pow+0x24c>)
 8009208:	429c      	cmp	r4, r3
 800920a:	ddf3      	ble.n	80091f4 <__ieee754_pow+0x1f4>
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <__ieee754_pow+0x234>)
 800920e:	429c      	cmp	r4, r3
 8009210:	dd1e      	ble.n	8009250 <__ieee754_pow+0x250>
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	dcf1      	bgt.n	80091fc <__ieee754_pow+0x1fc>
 8009218:	e752      	b.n	80090c0 <__ieee754_pow+0xc0>
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	7ff00000 	.word	0x7ff00000
 8009220:	c0100000 	.word	0xc0100000
 8009224:	08009e6b 	.word	0x08009e6b
 8009228:	433fffff 	.word	0x433fffff
 800922c:	3fefffff 	.word	0x3fefffff
 8009230:	fffffc01 	.word	0xfffffc01
 8009234:	3ff00000 	.word	0x3ff00000
 8009238:	3fe00000 	.word	0x3fe00000
 800923c:	41e00000 	.word	0x41e00000
 8009240:	43f00000 	.word	0x43f00000
 8009244:	8800759c 	.word	0x8800759c
 8009248:	7e37e43c 	.word	0x7e37e43c
 800924c:	3feffffe 	.word	0x3feffffe
 8009250:	2200      	movs	r2, #0
 8009252:	9800      	ldr	r0, [sp, #0]
 8009254:	9901      	ldr	r1, [sp, #4]
 8009256:	4b52      	ldr	r3, [pc, #328]	; (80093a0 <__ieee754_pow+0x3a0>)
 8009258:	f7f8 fd66 	bl	8001d28 <__aeabi_dsub>
 800925c:	22c0      	movs	r2, #192	; 0xc0
 800925e:	4b51      	ldr	r3, [pc, #324]	; (80093a4 <__ieee754_pow+0x3a4>)
 8009260:	05d2      	lsls	r2, r2, #23
 8009262:	0006      	movs	r6, r0
 8009264:	000f      	movs	r7, r1
 8009266:	f7f8 faed 	bl	8001844 <__aeabi_dmul>
 800926a:	4a4f      	ldr	r2, [pc, #316]	; (80093a8 <__ieee754_pow+0x3a8>)
 800926c:	9000      	str	r0, [sp, #0]
 800926e:	9101      	str	r1, [sp, #4]
 8009270:	4b4e      	ldr	r3, [pc, #312]	; (80093ac <__ieee754_pow+0x3ac>)
 8009272:	0030      	movs	r0, r6
 8009274:	0039      	movs	r1, r7
 8009276:	f7f8 fae5 	bl	8001844 <__aeabi_dmul>
 800927a:	2200      	movs	r2, #0
 800927c:	9004      	str	r0, [sp, #16]
 800927e:	9105      	str	r1, [sp, #20]
 8009280:	4b4b      	ldr	r3, [pc, #300]	; (80093b0 <__ieee754_pow+0x3b0>)
 8009282:	0030      	movs	r0, r6
 8009284:	0039      	movs	r1, r7
 8009286:	f7f8 fadd 	bl	8001844 <__aeabi_dmul>
 800928a:	0002      	movs	r2, r0
 800928c:	000b      	movs	r3, r1
 800928e:	4849      	ldr	r0, [pc, #292]	; (80093b4 <__ieee754_pow+0x3b4>)
 8009290:	4949      	ldr	r1, [pc, #292]	; (80093b8 <__ieee754_pow+0x3b8>)
 8009292:	f7f8 fd49 	bl	8001d28 <__aeabi_dsub>
 8009296:	0032      	movs	r2, r6
 8009298:	003b      	movs	r3, r7
 800929a:	f7f8 fad3 	bl	8001844 <__aeabi_dmul>
 800929e:	0002      	movs	r2, r0
 80092a0:	000b      	movs	r3, r1
 80092a2:	2000      	movs	r0, #0
 80092a4:	4945      	ldr	r1, [pc, #276]	; (80093bc <__ieee754_pow+0x3bc>)
 80092a6:	f7f8 fd3f 	bl	8001d28 <__aeabi_dsub>
 80092aa:	0032      	movs	r2, r6
 80092ac:	0004      	movs	r4, r0
 80092ae:	000d      	movs	r5, r1
 80092b0:	003b      	movs	r3, r7
 80092b2:	0030      	movs	r0, r6
 80092b4:	0039      	movs	r1, r7
 80092b6:	f7f8 fac5 	bl	8001844 <__aeabi_dmul>
 80092ba:	0002      	movs	r2, r0
 80092bc:	000b      	movs	r3, r1
 80092be:	0020      	movs	r0, r4
 80092c0:	0029      	movs	r1, r5
 80092c2:	f7f8 fabf 	bl	8001844 <__aeabi_dmul>
 80092c6:	4a3e      	ldr	r2, [pc, #248]	; (80093c0 <__ieee754_pow+0x3c0>)
 80092c8:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <__ieee754_pow+0x3a4>)
 80092ca:	f7f8 fabb 	bl	8001844 <__aeabi_dmul>
 80092ce:	0002      	movs	r2, r0
 80092d0:	000b      	movs	r3, r1
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	9905      	ldr	r1, [sp, #20]
 80092d6:	f7f8 fd27 	bl	8001d28 <__aeabi_dsub>
 80092da:	0002      	movs	r2, r0
 80092dc:	000b      	movs	r3, r1
 80092de:	0004      	movs	r4, r0
 80092e0:	000d      	movs	r5, r1
 80092e2:	9800      	ldr	r0, [sp, #0]
 80092e4:	9901      	ldr	r1, [sp, #4]
 80092e6:	f7f7 fb87 	bl	80009f8 <__aeabi_dadd>
 80092ea:	9a00      	ldr	r2, [sp, #0]
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	2000      	movs	r0, #0
 80092f0:	9004      	str	r0, [sp, #16]
 80092f2:	9105      	str	r1, [sp, #20]
 80092f4:	f7f8 fd18 	bl	8001d28 <__aeabi_dsub>
 80092f8:	0002      	movs	r2, r0
 80092fa:	000b      	movs	r3, r1
 80092fc:	0020      	movs	r0, r4
 80092fe:	0029      	movs	r1, r5
 8009300:	f7f8 fd12 	bl	8001d28 <__aeabi_dsub>
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009308:	3b01      	subs	r3, #1
 800930a:	0006      	movs	r6, r0
 800930c:	000f      	movs	r7, r1
 800930e:	4313      	orrs	r3, r2
 8009310:	d000      	beq.n	8009314 <__ieee754_pow+0x314>
 8009312:	e1de      	b.n	80096d2 <__ieee754_pow+0x6d2>
 8009314:	2300      	movs	r3, #0
 8009316:	4c2b      	ldr	r4, [pc, #172]	; (80093c4 <__ieee754_pow+0x3c4>)
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	9401      	str	r4, [sp, #4]
 800931c:	9c02      	ldr	r4, [sp, #8]
 800931e:	9d03      	ldr	r5, [sp, #12]
 8009320:	9802      	ldr	r0, [sp, #8]
 8009322:	9903      	ldr	r1, [sp, #12]
 8009324:	2400      	movs	r4, #0
 8009326:	002b      	movs	r3, r5
 8009328:	0022      	movs	r2, r4
 800932a:	f7f8 fcfd 	bl	8001d28 <__aeabi_dsub>
 800932e:	9a04      	ldr	r2, [sp, #16]
 8009330:	9b05      	ldr	r3, [sp, #20]
 8009332:	f7f8 fa87 	bl	8001844 <__aeabi_dmul>
 8009336:	9a02      	ldr	r2, [sp, #8]
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	9006      	str	r0, [sp, #24]
 800933c:	9107      	str	r1, [sp, #28]
 800933e:	0030      	movs	r0, r6
 8009340:	0039      	movs	r1, r7
 8009342:	f7f8 fa7f 	bl	8001844 <__aeabi_dmul>
 8009346:	0002      	movs	r2, r0
 8009348:	000b      	movs	r3, r1
 800934a:	9806      	ldr	r0, [sp, #24]
 800934c:	9907      	ldr	r1, [sp, #28]
 800934e:	f7f7 fb53 	bl	80009f8 <__aeabi_dadd>
 8009352:	0022      	movs	r2, r4
 8009354:	002b      	movs	r3, r5
 8009356:	9006      	str	r0, [sp, #24]
 8009358:	9107      	str	r1, [sp, #28]
 800935a:	9804      	ldr	r0, [sp, #16]
 800935c:	9905      	ldr	r1, [sp, #20]
 800935e:	f7f8 fa71 	bl	8001844 <__aeabi_dmul>
 8009362:	0006      	movs	r6, r0
 8009364:	000f      	movs	r7, r1
 8009366:	000b      	movs	r3, r1
 8009368:	0002      	movs	r2, r0
 800936a:	9806      	ldr	r0, [sp, #24]
 800936c:	9907      	ldr	r1, [sp, #28]
 800936e:	9604      	str	r6, [sp, #16]
 8009370:	9705      	str	r7, [sp, #20]
 8009372:	f7f7 fb41 	bl	80009f8 <__aeabi_dadd>
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <__ieee754_pow+0x3c8>)
 8009378:	0005      	movs	r5, r0
 800937a:	000c      	movs	r4, r1
 800937c:	9108      	str	r1, [sp, #32]
 800937e:	4299      	cmp	r1, r3
 8009380:	dc00      	bgt.n	8009384 <__ieee754_pow+0x384>
 8009382:	e2d8      	b.n	8009936 <__ieee754_pow+0x936>
 8009384:	4b11      	ldr	r3, [pc, #68]	; (80093cc <__ieee754_pow+0x3cc>)
 8009386:	18cb      	adds	r3, r1, r3
 8009388:	4303      	orrs	r3, r0
 800938a:	d100      	bne.n	800938e <__ieee754_pow+0x38e>
 800938c:	e1da      	b.n	8009744 <__ieee754_pow+0x744>
 800938e:	9800      	ldr	r0, [sp, #0]
 8009390:	9901      	ldr	r1, [sp, #4]
 8009392:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <__ieee754_pow+0x3d0>)
 8009394:	4b0f      	ldr	r3, [pc, #60]	; (80093d4 <__ieee754_pow+0x3d4>)
 8009396:	f7f8 fa55 	bl	8001844 <__aeabi_dmul>
 800939a:	4a0d      	ldr	r2, [pc, #52]	; (80093d0 <__ieee754_pow+0x3d0>)
 800939c:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <__ieee754_pow+0x3d4>)
 800939e:	e6ce      	b.n	800913e <__ieee754_pow+0x13e>
 80093a0:	3ff00000 	.word	0x3ff00000
 80093a4:	3ff71547 	.word	0x3ff71547
 80093a8:	f85ddf44 	.word	0xf85ddf44
 80093ac:	3e54ae0b 	.word	0x3e54ae0b
 80093b0:	3fd00000 	.word	0x3fd00000
 80093b4:	55555555 	.word	0x55555555
 80093b8:	3fd55555 	.word	0x3fd55555
 80093bc:	3fe00000 	.word	0x3fe00000
 80093c0:	652b82fe 	.word	0x652b82fe
 80093c4:	bff00000 	.word	0xbff00000
 80093c8:	408fffff 	.word	0x408fffff
 80093cc:	bf700000 	.word	0xbf700000
 80093d0:	8800759c 	.word	0x8800759c
 80093d4:	7e37e43c 	.word	0x7e37e43c
 80093d8:	4bbf      	ldr	r3, [pc, #764]	; (80096d8 <__ieee754_pow+0x6d8>)
 80093da:	2200      	movs	r2, #0
 80093dc:	429c      	cmp	r4, r3
 80093de:	dc0a      	bgt.n	80093f6 <__ieee754_pow+0x3f6>
 80093e0:	9800      	ldr	r0, [sp, #0]
 80093e2:	9901      	ldr	r1, [sp, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	4bbd      	ldr	r3, [pc, #756]	; (80096dc <__ieee754_pow+0x6dc>)
 80093e8:	f7f8 fa2c 	bl	8001844 <__aeabi_dmul>
 80093ec:	2235      	movs	r2, #53	; 0x35
 80093ee:	9000      	str	r0, [sp, #0]
 80093f0:	9101      	str	r1, [sp, #4]
 80093f2:	9c01      	ldr	r4, [sp, #4]
 80093f4:	4252      	negs	r2, r2
 80093f6:	49ba      	ldr	r1, [pc, #744]	; (80096e0 <__ieee754_pow+0x6e0>)
 80093f8:	1523      	asrs	r3, r4, #20
 80093fa:	185b      	adds	r3, r3, r1
 80093fc:	189b      	adds	r3, r3, r2
 80093fe:	0324      	lsls	r4, r4, #12
 8009400:	4db8      	ldr	r5, [pc, #736]	; (80096e4 <__ieee754_pow+0x6e4>)
 8009402:	4ab9      	ldr	r2, [pc, #740]	; (80096e8 <__ieee754_pow+0x6e8>)
 8009404:	930d      	str	r3, [sp, #52]	; 0x34
 8009406:	0b23      	lsrs	r3, r4, #12
 8009408:	431d      	orrs	r5, r3
 800940a:	2400      	movs	r4, #0
 800940c:	4293      	cmp	r3, r2
 800940e:	dd09      	ble.n	8009424 <__ieee754_pow+0x424>
 8009410:	4ab6      	ldr	r2, [pc, #728]	; (80096ec <__ieee754_pow+0x6ec>)
 8009412:	3401      	adds	r4, #1
 8009414:	4293      	cmp	r3, r2
 8009416:	dd05      	ble.n	8009424 <__ieee754_pow+0x424>
 8009418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800941a:	191b      	adds	r3, r3, r4
 800941c:	2400      	movs	r4, #0
 800941e:	930d      	str	r3, [sp, #52]	; 0x34
 8009420:	4bb3      	ldr	r3, [pc, #716]	; (80096f0 <__ieee754_pow+0x6f0>)
 8009422:	18ed      	adds	r5, r5, r3
 8009424:	9800      	ldr	r0, [sp, #0]
 8009426:	9901      	ldr	r1, [sp, #4]
 8009428:	0029      	movs	r1, r5
 800942a:	00e3      	lsls	r3, r4, #3
 800942c:	9311      	str	r3, [sp, #68]	; 0x44
 800942e:	4bb1      	ldr	r3, [pc, #708]	; (80096f4 <__ieee754_pow+0x6f4>)
 8009430:	00e2      	lsls	r2, r4, #3
 8009432:	189b      	adds	r3, r3, r2
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	900e      	str	r0, [sp, #56]	; 0x38
 800943a:	910f      	str	r1, [sp, #60]	; 0x3c
 800943c:	920a      	str	r2, [sp, #40]	; 0x28
 800943e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009440:	f7f8 fc72 	bl	8001d28 <__aeabi_dsub>
 8009444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009448:	0006      	movs	r6, r0
 800944a:	000f      	movs	r7, r1
 800944c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800944e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009450:	f7f7 fad2 	bl	80009f8 <__aeabi_dadd>
 8009454:	0002      	movs	r2, r0
 8009456:	000b      	movs	r3, r1
 8009458:	2000      	movs	r0, #0
 800945a:	49a2      	ldr	r1, [pc, #648]	; (80096e4 <__ieee754_pow+0x6e4>)
 800945c:	f7f7 fde8 	bl	8001030 <__aeabi_ddiv>
 8009460:	9012      	str	r0, [sp, #72]	; 0x48
 8009462:	9113      	str	r1, [sp, #76]	; 0x4c
 8009464:	0002      	movs	r2, r0
 8009466:	000b      	movs	r3, r1
 8009468:	0030      	movs	r0, r6
 800946a:	0039      	movs	r1, r7
 800946c:	f7f8 f9ea 	bl	8001844 <__aeabi_dmul>
 8009470:	9008      	str	r0, [sp, #32]
 8009472:	9109      	str	r1, [sp, #36]	; 0x24
 8009474:	9a08      	ldr	r2, [sp, #32]
 8009476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009478:	2180      	movs	r1, #128	; 0x80
 800947a:	9204      	str	r2, [sp, #16]
 800947c:	9305      	str	r3, [sp, #20]
 800947e:	2300      	movs	r3, #0
 8009480:	0589      	lsls	r1, r1, #22
 8009482:	106d      	asrs	r5, r5, #1
 8009484:	430d      	orrs	r5, r1
 8009486:	2180      	movs	r1, #128	; 0x80
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	9a04      	ldr	r2, [sp, #16]
 800948c:	9b05      	ldr	r3, [sp, #20]
 800948e:	9200      	str	r2, [sp, #0]
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	0309      	lsls	r1, r1, #12
 8009496:	186d      	adds	r5, r5, r1
 8009498:	04a4      	lsls	r4, r4, #18
 800949a:	192b      	adds	r3, r5, r4
 800949c:	9800      	ldr	r0, [sp, #0]
 800949e:	9901      	ldr	r1, [sp, #4]
 80094a0:	0014      	movs	r4, r2
 80094a2:	001d      	movs	r5, r3
 80094a4:	f7f8 f9ce 	bl	8001844 <__aeabi_dmul>
 80094a8:	0002      	movs	r2, r0
 80094aa:	000b      	movs	r3, r1
 80094ac:	0030      	movs	r0, r6
 80094ae:	0039      	movs	r1, r7
 80094b0:	f7f8 fc3a 	bl	8001d28 <__aeabi_dsub>
 80094b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b8:	0006      	movs	r6, r0
 80094ba:	000f      	movs	r7, r1
 80094bc:	0020      	movs	r0, r4
 80094be:	0029      	movs	r1, r5
 80094c0:	f7f8 fc32 	bl	8001d28 <__aeabi_dsub>
 80094c4:	0002      	movs	r2, r0
 80094c6:	000b      	movs	r3, r1
 80094c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80094ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094cc:	f7f8 fc2c 	bl	8001d28 <__aeabi_dsub>
 80094d0:	9a00      	ldr	r2, [sp, #0]
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	f7f8 f9b6 	bl	8001844 <__aeabi_dmul>
 80094d8:	0002      	movs	r2, r0
 80094da:	000b      	movs	r3, r1
 80094dc:	0030      	movs	r0, r6
 80094de:	0039      	movs	r1, r7
 80094e0:	f7f8 fc22 	bl	8001d28 <__aeabi_dsub>
 80094e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094e8:	f7f8 f9ac 	bl	8001844 <__aeabi_dmul>
 80094ec:	9a08      	ldr	r2, [sp, #32]
 80094ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f0:	900a      	str	r0, [sp, #40]	; 0x28
 80094f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80094f4:	0010      	movs	r0, r2
 80094f6:	0019      	movs	r1, r3
 80094f8:	f7f8 f9a4 	bl	8001844 <__aeabi_dmul>
 80094fc:	0006      	movs	r6, r0
 80094fe:	000f      	movs	r7, r1
 8009500:	4a7d      	ldr	r2, [pc, #500]	; (80096f8 <__ieee754_pow+0x6f8>)
 8009502:	4b7e      	ldr	r3, [pc, #504]	; (80096fc <__ieee754_pow+0x6fc>)
 8009504:	f7f8 f99e 	bl	8001844 <__aeabi_dmul>
 8009508:	4a7d      	ldr	r2, [pc, #500]	; (8009700 <__ieee754_pow+0x700>)
 800950a:	4b7e      	ldr	r3, [pc, #504]	; (8009704 <__ieee754_pow+0x704>)
 800950c:	f7f7 fa74 	bl	80009f8 <__aeabi_dadd>
 8009510:	0032      	movs	r2, r6
 8009512:	003b      	movs	r3, r7
 8009514:	f7f8 f996 	bl	8001844 <__aeabi_dmul>
 8009518:	4a7b      	ldr	r2, [pc, #492]	; (8009708 <__ieee754_pow+0x708>)
 800951a:	4b7c      	ldr	r3, [pc, #496]	; (800970c <__ieee754_pow+0x70c>)
 800951c:	f7f7 fa6c 	bl	80009f8 <__aeabi_dadd>
 8009520:	0032      	movs	r2, r6
 8009522:	003b      	movs	r3, r7
 8009524:	f7f8 f98e 	bl	8001844 <__aeabi_dmul>
 8009528:	4a79      	ldr	r2, [pc, #484]	; (8009710 <__ieee754_pow+0x710>)
 800952a:	4b7a      	ldr	r3, [pc, #488]	; (8009714 <__ieee754_pow+0x714>)
 800952c:	f7f7 fa64 	bl	80009f8 <__aeabi_dadd>
 8009530:	0032      	movs	r2, r6
 8009532:	003b      	movs	r3, r7
 8009534:	f7f8 f986 	bl	8001844 <__aeabi_dmul>
 8009538:	4a77      	ldr	r2, [pc, #476]	; (8009718 <__ieee754_pow+0x718>)
 800953a:	4b78      	ldr	r3, [pc, #480]	; (800971c <__ieee754_pow+0x71c>)
 800953c:	f7f7 fa5c 	bl	80009f8 <__aeabi_dadd>
 8009540:	0032      	movs	r2, r6
 8009542:	003b      	movs	r3, r7
 8009544:	f7f8 f97e 	bl	8001844 <__aeabi_dmul>
 8009548:	4a75      	ldr	r2, [pc, #468]	; (8009720 <__ieee754_pow+0x720>)
 800954a:	4b76      	ldr	r3, [pc, #472]	; (8009724 <__ieee754_pow+0x724>)
 800954c:	f7f7 fa54 	bl	80009f8 <__aeabi_dadd>
 8009550:	0032      	movs	r2, r6
 8009552:	0004      	movs	r4, r0
 8009554:	000d      	movs	r5, r1
 8009556:	003b      	movs	r3, r7
 8009558:	0030      	movs	r0, r6
 800955a:	0039      	movs	r1, r7
 800955c:	f7f8 f972 	bl	8001844 <__aeabi_dmul>
 8009560:	0002      	movs	r2, r0
 8009562:	000b      	movs	r3, r1
 8009564:	0020      	movs	r0, r4
 8009566:	0029      	movs	r1, r5
 8009568:	f7f8 f96c 	bl	8001844 <__aeabi_dmul>
 800956c:	9a00      	ldr	r2, [sp, #0]
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	0004      	movs	r4, r0
 8009572:	000d      	movs	r5, r1
 8009574:	9808      	ldr	r0, [sp, #32]
 8009576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009578:	f7f7 fa3e 	bl	80009f8 <__aeabi_dadd>
 800957c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800957e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009580:	f7f8 f960 	bl	8001844 <__aeabi_dmul>
 8009584:	0022      	movs	r2, r4
 8009586:	002b      	movs	r3, r5
 8009588:	f7f7 fa36 	bl	80009f8 <__aeabi_dadd>
 800958c:	9a00      	ldr	r2, [sp, #0]
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	900e      	str	r0, [sp, #56]	; 0x38
 8009592:	910f      	str	r1, [sp, #60]	; 0x3c
 8009594:	0010      	movs	r0, r2
 8009596:	0019      	movs	r1, r3
 8009598:	f7f8 f954 	bl	8001844 <__aeabi_dmul>
 800959c:	2200      	movs	r2, #0
 800959e:	4b62      	ldr	r3, [pc, #392]	; (8009728 <__ieee754_pow+0x728>)
 80095a0:	0004      	movs	r4, r0
 80095a2:	000d      	movs	r5, r1
 80095a4:	f7f7 fa28 	bl	80009f8 <__aeabi_dadd>
 80095a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ac:	f7f7 fa24 	bl	80009f8 <__aeabi_dadd>
 80095b0:	9e04      	ldr	r6, [sp, #16]
 80095b2:	000f      	movs	r7, r1
 80095b4:	0032      	movs	r2, r6
 80095b6:	000b      	movs	r3, r1
 80095b8:	9800      	ldr	r0, [sp, #0]
 80095ba:	9901      	ldr	r1, [sp, #4]
 80095bc:	f7f8 f942 	bl	8001844 <__aeabi_dmul>
 80095c0:	2200      	movs	r2, #0
 80095c2:	9000      	str	r0, [sp, #0]
 80095c4:	9101      	str	r1, [sp, #4]
 80095c6:	4b58      	ldr	r3, [pc, #352]	; (8009728 <__ieee754_pow+0x728>)
 80095c8:	0030      	movs	r0, r6
 80095ca:	0039      	movs	r1, r7
 80095cc:	f7f8 fbac 	bl	8001d28 <__aeabi_dsub>
 80095d0:	0022      	movs	r2, r4
 80095d2:	002b      	movs	r3, r5
 80095d4:	f7f8 fba8 	bl	8001d28 <__aeabi_dsub>
 80095d8:	0002      	movs	r2, r0
 80095da:	000b      	movs	r3, r1
 80095dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80095de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095e0:	f7f8 fba2 	bl	8001d28 <__aeabi_dsub>
 80095e4:	9a08      	ldr	r2, [sp, #32]
 80095e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e8:	f7f8 f92c 	bl	8001844 <__aeabi_dmul>
 80095ec:	0032      	movs	r2, r6
 80095ee:	0004      	movs	r4, r0
 80095f0:	000d      	movs	r5, r1
 80095f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095f6:	003b      	movs	r3, r7
 80095f8:	f7f8 f924 	bl	8001844 <__aeabi_dmul>
 80095fc:	0002      	movs	r2, r0
 80095fe:	000b      	movs	r3, r1
 8009600:	0020      	movs	r0, r4
 8009602:	0029      	movs	r1, r5
 8009604:	f7f7 f9f8 	bl	80009f8 <__aeabi_dadd>
 8009608:	0004      	movs	r4, r0
 800960a:	000d      	movs	r5, r1
 800960c:	0002      	movs	r2, r0
 800960e:	000b      	movs	r3, r1
 8009610:	9800      	ldr	r0, [sp, #0]
 8009612:	9901      	ldr	r1, [sp, #4]
 8009614:	f7f7 f9f0 	bl	80009f8 <__aeabi_dadd>
 8009618:	22e0      	movs	r2, #224	; 0xe0
 800961a:	9e04      	ldr	r6, [sp, #16]
 800961c:	0612      	lsls	r2, r2, #24
 800961e:	4b43      	ldr	r3, [pc, #268]	; (800972c <__ieee754_pow+0x72c>)
 8009620:	0030      	movs	r0, r6
 8009622:	000f      	movs	r7, r1
 8009624:	f7f8 f90e 	bl	8001844 <__aeabi_dmul>
 8009628:	9008      	str	r0, [sp, #32]
 800962a:	9109      	str	r1, [sp, #36]	; 0x24
 800962c:	9a00      	ldr	r2, [sp, #0]
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	0030      	movs	r0, r6
 8009632:	0039      	movs	r1, r7
 8009634:	f7f8 fb78 	bl	8001d28 <__aeabi_dsub>
 8009638:	0002      	movs	r2, r0
 800963a:	000b      	movs	r3, r1
 800963c:	0020      	movs	r0, r4
 800963e:	0029      	movs	r1, r5
 8009640:	f7f8 fb72 	bl	8001d28 <__aeabi_dsub>
 8009644:	4a3a      	ldr	r2, [pc, #232]	; (8009730 <__ieee754_pow+0x730>)
 8009646:	4b39      	ldr	r3, [pc, #228]	; (800972c <__ieee754_pow+0x72c>)
 8009648:	f7f8 f8fc 	bl	8001844 <__aeabi_dmul>
 800964c:	4a39      	ldr	r2, [pc, #228]	; (8009734 <__ieee754_pow+0x734>)
 800964e:	0004      	movs	r4, r0
 8009650:	000d      	movs	r5, r1
 8009652:	4b39      	ldr	r3, [pc, #228]	; (8009738 <__ieee754_pow+0x738>)
 8009654:	0030      	movs	r0, r6
 8009656:	0039      	movs	r1, r7
 8009658:	f7f8 f8f4 	bl	8001844 <__aeabi_dmul>
 800965c:	0002      	movs	r2, r0
 800965e:	000b      	movs	r3, r1
 8009660:	0020      	movs	r0, r4
 8009662:	0029      	movs	r1, r5
 8009664:	f7f7 f9c8 	bl	80009f8 <__aeabi_dadd>
 8009668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800966a:	4b34      	ldr	r3, [pc, #208]	; (800973c <__ieee754_pow+0x73c>)
 800966c:	189b      	adds	r3, r3, r2
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f7f7 f9c1 	bl	80009f8 <__aeabi_dadd>
 8009676:	9000      	str	r0, [sp, #0]
 8009678:	9101      	str	r1, [sp, #4]
 800967a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800967c:	f7f8 feb8 	bl	80023f0 <__aeabi_i2d>
 8009680:	0004      	movs	r4, r0
 8009682:	000d      	movs	r5, r1
 8009684:	9808      	ldr	r0, [sp, #32]
 8009686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009688:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800968a:	4b2d      	ldr	r3, [pc, #180]	; (8009740 <__ieee754_pow+0x740>)
 800968c:	189b      	adds	r3, r3, r2
 800968e:	681e      	ldr	r6, [r3, #0]
 8009690:	685f      	ldr	r7, [r3, #4]
 8009692:	9a00      	ldr	r2, [sp, #0]
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	f7f7 f9af 	bl	80009f8 <__aeabi_dadd>
 800969a:	0032      	movs	r2, r6
 800969c:	003b      	movs	r3, r7
 800969e:	f7f7 f9ab 	bl	80009f8 <__aeabi_dadd>
 80096a2:	0022      	movs	r2, r4
 80096a4:	002b      	movs	r3, r5
 80096a6:	f7f7 f9a7 	bl	80009f8 <__aeabi_dadd>
 80096aa:	9804      	ldr	r0, [sp, #16]
 80096ac:	0022      	movs	r2, r4
 80096ae:	002b      	movs	r3, r5
 80096b0:	9004      	str	r0, [sp, #16]
 80096b2:	9105      	str	r1, [sp, #20]
 80096b4:	f7f8 fb38 	bl	8001d28 <__aeabi_dsub>
 80096b8:	0032      	movs	r2, r6
 80096ba:	003b      	movs	r3, r7
 80096bc:	f7f8 fb34 	bl	8001d28 <__aeabi_dsub>
 80096c0:	9a08      	ldr	r2, [sp, #32]
 80096c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c4:	f7f8 fb30 	bl	8001d28 <__aeabi_dsub>
 80096c8:	0002      	movs	r2, r0
 80096ca:	000b      	movs	r3, r1
 80096cc:	9800      	ldr	r0, [sp, #0]
 80096ce:	9901      	ldr	r1, [sp, #4]
 80096d0:	e616      	b.n	8009300 <__ieee754_pow+0x300>
 80096d2:	2300      	movs	r3, #0
 80096d4:	4c03      	ldr	r4, [pc, #12]	; (80096e4 <__ieee754_pow+0x6e4>)
 80096d6:	e61f      	b.n	8009318 <__ieee754_pow+0x318>
 80096d8:	000fffff 	.word	0x000fffff
 80096dc:	43400000 	.word	0x43400000
 80096e0:	fffffc01 	.word	0xfffffc01
 80096e4:	3ff00000 	.word	0x3ff00000
 80096e8:	0003988e 	.word	0x0003988e
 80096ec:	000bb679 	.word	0x000bb679
 80096f0:	fff00000 	.word	0xfff00000
 80096f4:	08009e70 	.word	0x08009e70
 80096f8:	4a454eef 	.word	0x4a454eef
 80096fc:	3fca7e28 	.word	0x3fca7e28
 8009700:	93c9db65 	.word	0x93c9db65
 8009704:	3fcd864a 	.word	0x3fcd864a
 8009708:	a91d4101 	.word	0xa91d4101
 800970c:	3fd17460 	.word	0x3fd17460
 8009710:	518f264d 	.word	0x518f264d
 8009714:	3fd55555 	.word	0x3fd55555
 8009718:	db6fabff 	.word	0xdb6fabff
 800971c:	3fdb6db6 	.word	0x3fdb6db6
 8009720:	33333303 	.word	0x33333303
 8009724:	3fe33333 	.word	0x3fe33333
 8009728:	40080000 	.word	0x40080000
 800972c:	3feec709 	.word	0x3feec709
 8009730:	dc3a03fd 	.word	0xdc3a03fd
 8009734:	145b01f5 	.word	0x145b01f5
 8009738:	be3e2fe0 	.word	0xbe3e2fe0
 800973c:	08009e90 	.word	0x08009e90
 8009740:	08009e80 	.word	0x08009e80
 8009744:	4a8f      	ldr	r2, [pc, #572]	; (8009984 <__ieee754_pow+0x984>)
 8009746:	4b90      	ldr	r3, [pc, #576]	; (8009988 <__ieee754_pow+0x988>)
 8009748:	9806      	ldr	r0, [sp, #24]
 800974a:	9907      	ldr	r1, [sp, #28]
 800974c:	f7f7 f954 	bl	80009f8 <__aeabi_dadd>
 8009750:	0032      	movs	r2, r6
 8009752:	9002      	str	r0, [sp, #8]
 8009754:	9103      	str	r1, [sp, #12]
 8009756:	003b      	movs	r3, r7
 8009758:	0028      	movs	r0, r5
 800975a:	0021      	movs	r1, r4
 800975c:	f7f8 fae4 	bl	8001d28 <__aeabi_dsub>
 8009760:	0002      	movs	r2, r0
 8009762:	000b      	movs	r3, r1
 8009764:	9802      	ldr	r0, [sp, #8]
 8009766:	9903      	ldr	r1, [sp, #12]
 8009768:	f7f6 fd8c 	bl	8000284 <__aeabi_dcmpgt>
 800976c:	2800      	cmp	r0, #0
 800976e:	d000      	beq.n	8009772 <__ieee754_pow+0x772>
 8009770:	e60d      	b.n	800938e <__ieee754_pow+0x38e>
 8009772:	2100      	movs	r1, #0
 8009774:	4a85      	ldr	r2, [pc, #532]	; (800998c <__ieee754_pow+0x98c>)
 8009776:	0063      	lsls	r3, r4, #1
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	9102      	str	r1, [sp, #8]
 800977c:	4293      	cmp	r3, r2
 800977e:	dd25      	ble.n	80097cc <__ieee754_pow+0x7cc>
 8009780:	4a83      	ldr	r2, [pc, #524]	; (8009990 <__ieee754_pow+0x990>)
 8009782:	151b      	asrs	r3, r3, #20
 8009784:	189b      	adds	r3, r3, r2
 8009786:	2280      	movs	r2, #128	; 0x80
 8009788:	0352      	lsls	r2, r2, #13
 800978a:	4694      	mov	ip, r2
 800978c:	411a      	asrs	r2, r3
 800978e:	1914      	adds	r4, r2, r4
 8009790:	0060      	lsls	r0, r4, #1
 8009792:	4b80      	ldr	r3, [pc, #512]	; (8009994 <__ieee754_pow+0x994>)
 8009794:	0d40      	lsrs	r0, r0, #21
 8009796:	4d80      	ldr	r5, [pc, #512]	; (8009998 <__ieee754_pow+0x998>)
 8009798:	18c0      	adds	r0, r0, r3
 800979a:	4105      	asrs	r5, r0
 800979c:	0021      	movs	r1, r4
 800979e:	43a9      	bics	r1, r5
 80097a0:	000b      	movs	r3, r1
 80097a2:	4661      	mov	r1, ip
 80097a4:	0324      	lsls	r4, r4, #12
 80097a6:	0b24      	lsrs	r4, r4, #12
 80097a8:	4321      	orrs	r1, r4
 80097aa:	2414      	movs	r4, #20
 80097ac:	1a20      	subs	r0, r4, r0
 80097ae:	4101      	asrs	r1, r0
 80097b0:	9102      	str	r1, [sp, #8]
 80097b2:	9908      	ldr	r1, [sp, #32]
 80097b4:	2200      	movs	r2, #0
 80097b6:	2900      	cmp	r1, #0
 80097b8:	da02      	bge.n	80097c0 <__ieee754_pow+0x7c0>
 80097ba:	9902      	ldr	r1, [sp, #8]
 80097bc:	4249      	negs	r1, r1
 80097be:	9102      	str	r1, [sp, #8]
 80097c0:	0030      	movs	r0, r6
 80097c2:	0039      	movs	r1, r7
 80097c4:	f7f8 fab0 	bl	8001d28 <__aeabi_dsub>
 80097c8:	9004      	str	r0, [sp, #16]
 80097ca:	9105      	str	r1, [sp, #20]
 80097cc:	9a06      	ldr	r2, [sp, #24]
 80097ce:	9b07      	ldr	r3, [sp, #28]
 80097d0:	9804      	ldr	r0, [sp, #16]
 80097d2:	9905      	ldr	r1, [sp, #20]
 80097d4:	2600      	movs	r6, #0
 80097d6:	f7f7 f90f 	bl	80009f8 <__aeabi_dadd>
 80097da:	2200      	movs	r2, #0
 80097dc:	4b6f      	ldr	r3, [pc, #444]	; (800999c <__ieee754_pow+0x99c>)
 80097de:	0030      	movs	r0, r6
 80097e0:	000f      	movs	r7, r1
 80097e2:	f7f8 f82f 	bl	8001844 <__aeabi_dmul>
 80097e6:	9a04      	ldr	r2, [sp, #16]
 80097e8:	9b05      	ldr	r3, [sp, #20]
 80097ea:	9008      	str	r0, [sp, #32]
 80097ec:	9109      	str	r1, [sp, #36]	; 0x24
 80097ee:	0030      	movs	r0, r6
 80097f0:	0039      	movs	r1, r7
 80097f2:	f7f8 fa99 	bl	8001d28 <__aeabi_dsub>
 80097f6:	0002      	movs	r2, r0
 80097f8:	000b      	movs	r3, r1
 80097fa:	9806      	ldr	r0, [sp, #24]
 80097fc:	9907      	ldr	r1, [sp, #28]
 80097fe:	f7f8 fa93 	bl	8001d28 <__aeabi_dsub>
 8009802:	4a67      	ldr	r2, [pc, #412]	; (80099a0 <__ieee754_pow+0x9a0>)
 8009804:	4b67      	ldr	r3, [pc, #412]	; (80099a4 <__ieee754_pow+0x9a4>)
 8009806:	f7f8 f81d 	bl	8001844 <__aeabi_dmul>
 800980a:	4a67      	ldr	r2, [pc, #412]	; (80099a8 <__ieee754_pow+0x9a8>)
 800980c:	0004      	movs	r4, r0
 800980e:	000d      	movs	r5, r1
 8009810:	4b66      	ldr	r3, [pc, #408]	; (80099ac <__ieee754_pow+0x9ac>)
 8009812:	0030      	movs	r0, r6
 8009814:	0039      	movs	r1, r7
 8009816:	f7f8 f815 	bl	8001844 <__aeabi_dmul>
 800981a:	0002      	movs	r2, r0
 800981c:	000b      	movs	r3, r1
 800981e:	0020      	movs	r0, r4
 8009820:	0029      	movs	r1, r5
 8009822:	f7f7 f8e9 	bl	80009f8 <__aeabi_dadd>
 8009826:	0004      	movs	r4, r0
 8009828:	000d      	movs	r5, r1
 800982a:	0002      	movs	r2, r0
 800982c:	000b      	movs	r3, r1
 800982e:	9808      	ldr	r0, [sp, #32]
 8009830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009832:	f7f7 f8e1 	bl	80009f8 <__aeabi_dadd>
 8009836:	9a08      	ldr	r2, [sp, #32]
 8009838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983a:	0006      	movs	r6, r0
 800983c:	000f      	movs	r7, r1
 800983e:	f7f8 fa73 	bl	8001d28 <__aeabi_dsub>
 8009842:	0002      	movs	r2, r0
 8009844:	000b      	movs	r3, r1
 8009846:	0020      	movs	r0, r4
 8009848:	0029      	movs	r1, r5
 800984a:	f7f8 fa6d 	bl	8001d28 <__aeabi_dsub>
 800984e:	0032      	movs	r2, r6
 8009850:	9004      	str	r0, [sp, #16]
 8009852:	9105      	str	r1, [sp, #20]
 8009854:	003b      	movs	r3, r7
 8009856:	0030      	movs	r0, r6
 8009858:	0039      	movs	r1, r7
 800985a:	f7f7 fff3 	bl	8001844 <__aeabi_dmul>
 800985e:	0004      	movs	r4, r0
 8009860:	000d      	movs	r5, r1
 8009862:	4a53      	ldr	r2, [pc, #332]	; (80099b0 <__ieee754_pow+0x9b0>)
 8009864:	4b53      	ldr	r3, [pc, #332]	; (80099b4 <__ieee754_pow+0x9b4>)
 8009866:	f7f7 ffed 	bl	8001844 <__aeabi_dmul>
 800986a:	4a53      	ldr	r2, [pc, #332]	; (80099b8 <__ieee754_pow+0x9b8>)
 800986c:	4b53      	ldr	r3, [pc, #332]	; (80099bc <__ieee754_pow+0x9bc>)
 800986e:	f7f8 fa5b 	bl	8001d28 <__aeabi_dsub>
 8009872:	0022      	movs	r2, r4
 8009874:	002b      	movs	r3, r5
 8009876:	f7f7 ffe5 	bl	8001844 <__aeabi_dmul>
 800987a:	4a51      	ldr	r2, [pc, #324]	; (80099c0 <__ieee754_pow+0x9c0>)
 800987c:	4b51      	ldr	r3, [pc, #324]	; (80099c4 <__ieee754_pow+0x9c4>)
 800987e:	f7f7 f8bb 	bl	80009f8 <__aeabi_dadd>
 8009882:	0022      	movs	r2, r4
 8009884:	002b      	movs	r3, r5
 8009886:	f7f7 ffdd 	bl	8001844 <__aeabi_dmul>
 800988a:	4a4f      	ldr	r2, [pc, #316]	; (80099c8 <__ieee754_pow+0x9c8>)
 800988c:	4b4f      	ldr	r3, [pc, #316]	; (80099cc <__ieee754_pow+0x9cc>)
 800988e:	f7f8 fa4b 	bl	8001d28 <__aeabi_dsub>
 8009892:	0022      	movs	r2, r4
 8009894:	002b      	movs	r3, r5
 8009896:	f7f7 ffd5 	bl	8001844 <__aeabi_dmul>
 800989a:	4a4d      	ldr	r2, [pc, #308]	; (80099d0 <__ieee754_pow+0x9d0>)
 800989c:	4b4d      	ldr	r3, [pc, #308]	; (80099d4 <__ieee754_pow+0x9d4>)
 800989e:	f7f7 f8ab 	bl	80009f8 <__aeabi_dadd>
 80098a2:	0022      	movs	r2, r4
 80098a4:	002b      	movs	r3, r5
 80098a6:	f7f7 ffcd 	bl	8001844 <__aeabi_dmul>
 80098aa:	0002      	movs	r2, r0
 80098ac:	000b      	movs	r3, r1
 80098ae:	0030      	movs	r0, r6
 80098b0:	0039      	movs	r1, r7
 80098b2:	f7f8 fa39 	bl	8001d28 <__aeabi_dsub>
 80098b6:	0004      	movs	r4, r0
 80098b8:	000d      	movs	r5, r1
 80098ba:	0002      	movs	r2, r0
 80098bc:	000b      	movs	r3, r1
 80098be:	0030      	movs	r0, r6
 80098c0:	0039      	movs	r1, r7
 80098c2:	f7f7 ffbf 	bl	8001844 <__aeabi_dmul>
 80098c6:	2380      	movs	r3, #128	; 0x80
 80098c8:	9006      	str	r0, [sp, #24]
 80098ca:	9107      	str	r1, [sp, #28]
 80098cc:	2200      	movs	r2, #0
 80098ce:	05db      	lsls	r3, r3, #23
 80098d0:	0020      	movs	r0, r4
 80098d2:	0029      	movs	r1, r5
 80098d4:	f7f8 fa28 	bl	8001d28 <__aeabi_dsub>
 80098d8:	0002      	movs	r2, r0
 80098da:	000b      	movs	r3, r1
 80098dc:	9806      	ldr	r0, [sp, #24]
 80098de:	9907      	ldr	r1, [sp, #28]
 80098e0:	f7f7 fba6 	bl	8001030 <__aeabi_ddiv>
 80098e4:	9a04      	ldr	r2, [sp, #16]
 80098e6:	9b05      	ldr	r3, [sp, #20]
 80098e8:	0004      	movs	r4, r0
 80098ea:	000d      	movs	r5, r1
 80098ec:	0030      	movs	r0, r6
 80098ee:	0039      	movs	r1, r7
 80098f0:	f7f7 ffa8 	bl	8001844 <__aeabi_dmul>
 80098f4:	9a04      	ldr	r2, [sp, #16]
 80098f6:	9b05      	ldr	r3, [sp, #20]
 80098f8:	f7f7 f87e 	bl	80009f8 <__aeabi_dadd>
 80098fc:	0002      	movs	r2, r0
 80098fe:	000b      	movs	r3, r1
 8009900:	0020      	movs	r0, r4
 8009902:	0029      	movs	r1, r5
 8009904:	f7f8 fa10 	bl	8001d28 <__aeabi_dsub>
 8009908:	0032      	movs	r2, r6
 800990a:	003b      	movs	r3, r7
 800990c:	f7f8 fa0c 	bl	8001d28 <__aeabi_dsub>
 8009910:	0002      	movs	r2, r0
 8009912:	000b      	movs	r3, r1
 8009914:	2000      	movs	r0, #0
 8009916:	4930      	ldr	r1, [pc, #192]	; (80099d8 <__ieee754_pow+0x9d8>)
 8009918:	f7f8 fa06 	bl	8001d28 <__aeabi_dsub>
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	051b      	lsls	r3, r3, #20
 8009920:	185b      	adds	r3, r3, r1
 8009922:	151a      	asrs	r2, r3, #20
 8009924:	2a00      	cmp	r2, #0
 8009926:	dc26      	bgt.n	8009976 <__ieee754_pow+0x976>
 8009928:	9a02      	ldr	r2, [sp, #8]
 800992a:	f000 f9ad 	bl	8009c88 <scalbn>
 800992e:	9a00      	ldr	r2, [sp, #0]
 8009930:	9b01      	ldr	r3, [sp, #4]
 8009932:	f7ff fc04 	bl	800913e <__ieee754_pow+0x13e>
 8009936:	4a29      	ldr	r2, [pc, #164]	; (80099dc <__ieee754_pow+0x9dc>)
 8009938:	004b      	lsls	r3, r1, #1
 800993a:	085b      	lsrs	r3, r3, #1
 800993c:	4293      	cmp	r3, r2
 800993e:	dc00      	bgt.n	8009942 <__ieee754_pow+0x942>
 8009940:	e717      	b.n	8009772 <__ieee754_pow+0x772>
 8009942:	4b27      	ldr	r3, [pc, #156]	; (80099e0 <__ieee754_pow+0x9e0>)
 8009944:	18cb      	adds	r3, r1, r3
 8009946:	4303      	orrs	r3, r0
 8009948:	d009      	beq.n	800995e <__ieee754_pow+0x95e>
 800994a:	9800      	ldr	r0, [sp, #0]
 800994c:	9901      	ldr	r1, [sp, #4]
 800994e:	4a25      	ldr	r2, [pc, #148]	; (80099e4 <__ieee754_pow+0x9e4>)
 8009950:	4b25      	ldr	r3, [pc, #148]	; (80099e8 <__ieee754_pow+0x9e8>)
 8009952:	f7f7 ff77 	bl	8001844 <__aeabi_dmul>
 8009956:	4a23      	ldr	r2, [pc, #140]	; (80099e4 <__ieee754_pow+0x9e4>)
 8009958:	4b23      	ldr	r3, [pc, #140]	; (80099e8 <__ieee754_pow+0x9e8>)
 800995a:	f7ff fbf0 	bl	800913e <__ieee754_pow+0x13e>
 800995e:	0032      	movs	r2, r6
 8009960:	003b      	movs	r3, r7
 8009962:	f7f8 f9e1 	bl	8001d28 <__aeabi_dsub>
 8009966:	9a06      	ldr	r2, [sp, #24]
 8009968:	9b07      	ldr	r3, [sp, #28]
 800996a:	f7f6 fc95 	bl	8000298 <__aeabi_dcmpge>
 800996e:	2800      	cmp	r0, #0
 8009970:	d100      	bne.n	8009974 <__ieee754_pow+0x974>
 8009972:	e6fe      	b.n	8009772 <__ieee754_pow+0x772>
 8009974:	e7e9      	b.n	800994a <__ieee754_pow+0x94a>
 8009976:	0019      	movs	r1, r3
 8009978:	e7d9      	b.n	800992e <__ieee754_pow+0x92e>
 800997a:	2300      	movs	r3, #0
 800997c:	4c16      	ldr	r4, [pc, #88]	; (80099d8 <__ieee754_pow+0x9d8>)
 800997e:	f7ff fba1 	bl	80090c4 <__ieee754_pow+0xc4>
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	652b82fe 	.word	0x652b82fe
 8009988:	3c971547 	.word	0x3c971547
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	fffffc02 	.word	0xfffffc02
 8009994:	fffffc01 	.word	0xfffffc01
 8009998:	000fffff 	.word	0x000fffff
 800999c:	3fe62e43 	.word	0x3fe62e43
 80099a0:	fefa39ef 	.word	0xfefa39ef
 80099a4:	3fe62e42 	.word	0x3fe62e42
 80099a8:	0ca86c39 	.word	0x0ca86c39
 80099ac:	be205c61 	.word	0xbe205c61
 80099b0:	72bea4d0 	.word	0x72bea4d0
 80099b4:	3e663769 	.word	0x3e663769
 80099b8:	c5d26bf1 	.word	0xc5d26bf1
 80099bc:	3ebbbd41 	.word	0x3ebbbd41
 80099c0:	af25de2c 	.word	0xaf25de2c
 80099c4:	3f11566a 	.word	0x3f11566a
 80099c8:	16bebd93 	.word	0x16bebd93
 80099cc:	3f66c16c 	.word	0x3f66c16c
 80099d0:	5555553e 	.word	0x5555553e
 80099d4:	3fc55555 	.word	0x3fc55555
 80099d8:	3ff00000 	.word	0x3ff00000
 80099dc:	4090cbff 	.word	0x4090cbff
 80099e0:	3f6f3400 	.word	0x3f6f3400
 80099e4:	c2f8f359 	.word	0xc2f8f359
 80099e8:	01a56e1f 	.word	0x01a56e1f

080099ec <__ieee754_sqrt>:
 80099ec:	4b55      	ldr	r3, [pc, #340]	; (8009b44 <__ieee754_sqrt+0x158>)
 80099ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f0:	001a      	movs	r2, r3
 80099f2:	0005      	movs	r5, r0
 80099f4:	000c      	movs	r4, r1
 80099f6:	400a      	ands	r2, r1
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d10f      	bne.n	8009a1c <__ieee754_sqrt+0x30>
 80099fc:	0002      	movs	r2, r0
 80099fe:	000b      	movs	r3, r1
 8009a00:	f7f7 ff20 	bl	8001844 <__aeabi_dmul>
 8009a04:	0002      	movs	r2, r0
 8009a06:	000b      	movs	r3, r1
 8009a08:	0028      	movs	r0, r5
 8009a0a:	0021      	movs	r1, r4
 8009a0c:	f7f6 fff4 	bl	80009f8 <__aeabi_dadd>
 8009a10:	0005      	movs	r5, r0
 8009a12:	000c      	movs	r4, r1
 8009a14:	0028      	movs	r0, r5
 8009a16:	0021      	movs	r1, r4
 8009a18:	b003      	add	sp, #12
 8009a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a1c:	0002      	movs	r2, r0
 8009a1e:	2900      	cmp	r1, #0
 8009a20:	dc10      	bgt.n	8009a44 <__ieee754_sqrt+0x58>
 8009a22:	004b      	lsls	r3, r1, #1
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	4303      	orrs	r3, r0
 8009a28:	d0f4      	beq.n	8009a14 <__ieee754_sqrt+0x28>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	4281      	cmp	r1, r0
 8009a2e:	d100      	bne.n	8009a32 <__ieee754_sqrt+0x46>
 8009a30:	e07f      	b.n	8009b32 <__ieee754_sqrt+0x146>
 8009a32:	000b      	movs	r3, r1
 8009a34:	0028      	movs	r0, r5
 8009a36:	f7f8 f977 	bl	8001d28 <__aeabi_dsub>
 8009a3a:	0002      	movs	r2, r0
 8009a3c:	000b      	movs	r3, r1
 8009a3e:	f7f7 faf7 	bl	8001030 <__aeabi_ddiv>
 8009a42:	e7e5      	b.n	8009a10 <__ieee754_sqrt+0x24>
 8009a44:	1508      	asrs	r0, r1, #20
 8009a46:	d074      	beq.n	8009b32 <__ieee754_sqrt+0x146>
 8009a48:	4b3f      	ldr	r3, [pc, #252]	; (8009b48 <__ieee754_sqrt+0x15c>)
 8009a4a:	0309      	lsls	r1, r1, #12
 8009a4c:	18c0      	adds	r0, r0, r3
 8009a4e:	2380      	movs	r3, #128	; 0x80
 8009a50:	0b09      	lsrs	r1, r1, #12
 8009a52:	035b      	lsls	r3, r3, #13
 8009a54:	4319      	orrs	r1, r3
 8009a56:	07c3      	lsls	r3, r0, #31
 8009a58:	d503      	bpl.n	8009a62 <__ieee754_sqrt+0x76>
 8009a5a:	0fd3      	lsrs	r3, r2, #31
 8009a5c:	0049      	lsls	r1, r1, #1
 8009a5e:	18c9      	adds	r1, r1, r3
 8009a60:	0052      	lsls	r2, r2, #1
 8009a62:	2400      	movs	r4, #0
 8009a64:	1043      	asrs	r3, r0, #1
 8009a66:	0049      	lsls	r1, r1, #1
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	2580      	movs	r5, #128	; 0x80
 8009a6c:	0fd3      	lsrs	r3, r2, #31
 8009a6e:	18cb      	adds	r3, r1, r3
 8009a70:	0020      	movs	r0, r4
 8009a72:	2116      	movs	r1, #22
 8009a74:	0052      	lsls	r2, r2, #1
 8009a76:	03ad      	lsls	r5, r5, #14
 8009a78:	1946      	adds	r6, r0, r5
 8009a7a:	429e      	cmp	r6, r3
 8009a7c:	dc02      	bgt.n	8009a84 <__ieee754_sqrt+0x98>
 8009a7e:	1970      	adds	r0, r6, r5
 8009a80:	1b9b      	subs	r3, r3, r6
 8009a82:	1964      	adds	r4, r4, r5
 8009a84:	0fd6      	lsrs	r6, r2, #31
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	3901      	subs	r1, #1
 8009a8a:	199b      	adds	r3, r3, r6
 8009a8c:	0052      	lsls	r2, r2, #1
 8009a8e:	086d      	lsrs	r5, r5, #1
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d1f1      	bne.n	8009a78 <__ieee754_sqrt+0x8c>
 8009a94:	2520      	movs	r5, #32
 8009a96:	2680      	movs	r6, #128	; 0x80
 8009a98:	46ac      	mov	ip, r5
 8009a9a:	9100      	str	r1, [sp, #0]
 8009a9c:	0636      	lsls	r6, r6, #24
 8009a9e:	9d00      	ldr	r5, [sp, #0]
 8009aa0:	1977      	adds	r7, r6, r5
 8009aa2:	4283      	cmp	r3, r0
 8009aa4:	dc02      	bgt.n	8009aac <__ieee754_sqrt+0xc0>
 8009aa6:	d112      	bne.n	8009ace <__ieee754_sqrt+0xe2>
 8009aa8:	4297      	cmp	r7, r2
 8009aaa:	d810      	bhi.n	8009ace <__ieee754_sqrt+0xe2>
 8009aac:	19bd      	adds	r5, r7, r6
 8009aae:	9500      	str	r5, [sp, #0]
 8009ab0:	0005      	movs	r5, r0
 8009ab2:	2f00      	cmp	r7, #0
 8009ab4:	da03      	bge.n	8009abe <__ieee754_sqrt+0xd2>
 8009ab6:	9d00      	ldr	r5, [sp, #0]
 8009ab8:	43ed      	mvns	r5, r5
 8009aba:	0fed      	lsrs	r5, r5, #31
 8009abc:	1945      	adds	r5, r0, r5
 8009abe:	1a1b      	subs	r3, r3, r0
 8009ac0:	42ba      	cmp	r2, r7
 8009ac2:	4180      	sbcs	r0, r0
 8009ac4:	4240      	negs	r0, r0
 8009ac6:	1a1b      	subs	r3, r3, r0
 8009ac8:	0028      	movs	r0, r5
 8009aca:	1bd2      	subs	r2, r2, r7
 8009acc:	1989      	adds	r1, r1, r6
 8009ace:	0fd5      	lsrs	r5, r2, #31
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	18eb      	adds	r3, r5, r3
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	426d      	negs	r5, r5
 8009ad8:	44ac      	add	ip, r5
 8009ada:	4665      	mov	r5, ip
 8009adc:	0052      	lsls	r2, r2, #1
 8009ade:	0876      	lsrs	r6, r6, #1
 8009ae0:	2d00      	cmp	r5, #0
 8009ae2:	d1dc      	bne.n	8009a9e <__ieee754_sqrt+0xb2>
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	d003      	beq.n	8009af0 <__ieee754_sqrt+0x104>
 8009ae8:	1c4b      	adds	r3, r1, #1
 8009aea:	d127      	bne.n	8009b3c <__ieee754_sqrt+0x150>
 8009aec:	4661      	mov	r1, ip
 8009aee:	3401      	adds	r4, #1
 8009af0:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <__ieee754_sqrt+0x160>)
 8009af2:	1060      	asrs	r0, r4, #1
 8009af4:	18c0      	adds	r0, r0, r3
 8009af6:	0849      	lsrs	r1, r1, #1
 8009af8:	07e3      	lsls	r3, r4, #31
 8009afa:	d502      	bpl.n	8009b02 <__ieee754_sqrt+0x116>
 8009afc:	2380      	movs	r3, #128	; 0x80
 8009afe:	061b      	lsls	r3, r3, #24
 8009b00:	4319      	orrs	r1, r3
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	000d      	movs	r5, r1
 8009b06:	051c      	lsls	r4, r3, #20
 8009b08:	1823      	adds	r3, r4, r0
 8009b0a:	001c      	movs	r4, r3
 8009b0c:	e782      	b.n	8009a14 <__ieee754_sqrt+0x28>
 8009b0e:	0ad1      	lsrs	r1, r2, #11
 8009b10:	3b15      	subs	r3, #21
 8009b12:	0552      	lsls	r2, r2, #21
 8009b14:	2900      	cmp	r1, #0
 8009b16:	d0fa      	beq.n	8009b0e <__ieee754_sqrt+0x122>
 8009b18:	2480      	movs	r4, #128	; 0x80
 8009b1a:	0364      	lsls	r4, r4, #13
 8009b1c:	4221      	tst	r1, r4
 8009b1e:	d00a      	beq.n	8009b36 <__ieee754_sqrt+0x14a>
 8009b20:	2420      	movs	r4, #32
 8009b22:	0016      	movs	r6, r2
 8009b24:	1a24      	subs	r4, r4, r0
 8009b26:	40e6      	lsrs	r6, r4
 8009b28:	1e45      	subs	r5, r0, #1
 8009b2a:	4082      	lsls	r2, r0
 8009b2c:	4331      	orrs	r1, r6
 8009b2e:	1b58      	subs	r0, r3, r5
 8009b30:	e78a      	b.n	8009a48 <__ieee754_sqrt+0x5c>
 8009b32:	2300      	movs	r3, #0
 8009b34:	e7ee      	b.n	8009b14 <__ieee754_sqrt+0x128>
 8009b36:	0049      	lsls	r1, r1, #1
 8009b38:	3001      	adds	r0, #1
 8009b3a:	e7ef      	b.n	8009b1c <__ieee754_sqrt+0x130>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	3101      	adds	r1, #1
 8009b40:	4399      	bics	r1, r3
 8009b42:	e7d5      	b.n	8009af0 <__ieee754_sqrt+0x104>
 8009b44:	7ff00000 	.word	0x7ff00000
 8009b48:	fffffc01 	.word	0xfffffc01
 8009b4c:	3fe00000 	.word	0x3fe00000

08009b50 <fabs>:
 8009b50:	0049      	lsls	r1, r1, #1
 8009b52:	084b      	lsrs	r3, r1, #1
 8009b54:	0019      	movs	r1, r3
 8009b56:	4770      	bx	lr

08009b58 <finite>:
 8009b58:	0048      	lsls	r0, r1, #1
 8009b5a:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <finite+0xc>)
 8009b5c:	0840      	lsrs	r0, r0, #1
 8009b5e:	18c0      	adds	r0, r0, r3
 8009b60:	0fc0      	lsrs	r0, r0, #31
 8009b62:	4770      	bx	lr
 8009b64:	80100000 	.word	0x80100000

08009b68 <matherr>:
 8009b68:	2000      	movs	r0, #0
 8009b6a:	4770      	bx	lr

08009b6c <nan>:
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	4901      	ldr	r1, [pc, #4]	; (8009b74 <nan+0x8>)
 8009b70:	4770      	bx	lr
 8009b72:	46c0      	nop			; (mov r8, r8)
 8009b74:	7ff80000 	.word	0x7ff80000

08009b78 <rint>:
 8009b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b7a:	004a      	lsls	r2, r1, #1
 8009b7c:	4e3e      	ldr	r6, [pc, #248]	; (8009c78 <rint+0x100>)
 8009b7e:	0d52      	lsrs	r2, r2, #21
 8009b80:	b085      	sub	sp, #20
 8009b82:	1996      	adds	r6, r2, r6
 8009b84:	000d      	movs	r5, r1
 8009b86:	9101      	str	r1, [sp, #4]
 8009b88:	0003      	movs	r3, r0
 8009b8a:	0fcc      	lsrs	r4, r1, #31
 8009b8c:	2e13      	cmp	r6, #19
 8009b8e:	dc57      	bgt.n	8009c40 <rint+0xc8>
 8009b90:	2e00      	cmp	r6, #0
 8009b92:	da2a      	bge.n	8009bea <rint+0x72>
 8009b94:	004a      	lsls	r2, r1, #1
 8009b96:	0852      	lsrs	r2, r2, #1
 8009b98:	4302      	orrs	r2, r0
 8009b9a:	d024      	beq.n	8009be6 <rint+0x6e>
 8009b9c:	030a      	lsls	r2, r1, #12
 8009b9e:	0b12      	lsrs	r2, r2, #12
 8009ba0:	4302      	orrs	r2, r0
 8009ba2:	4253      	negs	r3, r2
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	2280      	movs	r2, #128	; 0x80
 8009ba8:	0c4d      	lsrs	r5, r1, #17
 8009baa:	0312      	lsls	r2, r2, #12
 8009bac:	0b1b      	lsrs	r3, r3, #12
 8009bae:	4013      	ands	r3, r2
 8009bb0:	046d      	lsls	r5, r5, #17
 8009bb2:	432b      	orrs	r3, r5
 8009bb4:	0019      	movs	r1, r3
 8009bb6:	4b31      	ldr	r3, [pc, #196]	; (8009c7c <rint+0x104>)
 8009bb8:	00e2      	lsls	r2, r4, #3
 8009bba:	189b      	adds	r3, r3, r2
 8009bbc:	681e      	ldr	r6, [r3, #0]
 8009bbe:	685f      	ldr	r7, [r3, #4]
 8009bc0:	0002      	movs	r2, r0
 8009bc2:	000b      	movs	r3, r1
 8009bc4:	0030      	movs	r0, r6
 8009bc6:	0039      	movs	r1, r7
 8009bc8:	f7f6 ff16 	bl	80009f8 <__aeabi_dadd>
 8009bcc:	9002      	str	r0, [sp, #8]
 8009bce:	9103      	str	r1, [sp, #12]
 8009bd0:	9802      	ldr	r0, [sp, #8]
 8009bd2:	9903      	ldr	r1, [sp, #12]
 8009bd4:	003b      	movs	r3, r7
 8009bd6:	0032      	movs	r2, r6
 8009bd8:	f7f8 f8a6 	bl	8001d28 <__aeabi_dsub>
 8009bdc:	004b      	lsls	r3, r1, #1
 8009bde:	085b      	lsrs	r3, r3, #1
 8009be0:	07e4      	lsls	r4, r4, #31
 8009be2:	4323      	orrs	r3, r4
 8009be4:	0019      	movs	r1, r3
 8009be6:	b005      	add	sp, #20
 8009be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bea:	4a25      	ldr	r2, [pc, #148]	; (8009c80 <rint+0x108>)
 8009bec:	4132      	asrs	r2, r6
 8009bee:	0017      	movs	r7, r2
 8009bf0:	400f      	ands	r7, r1
 8009bf2:	4307      	orrs	r7, r0
 8009bf4:	d0f7      	beq.n	8009be6 <rint+0x6e>
 8009bf6:	0852      	lsrs	r2, r2, #1
 8009bf8:	0011      	movs	r1, r2
 8009bfa:	4029      	ands	r1, r5
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	d00a      	beq.n	8009c16 <rint+0x9e>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2e13      	cmp	r6, #19
 8009c04:	d101      	bne.n	8009c0a <rint+0x92>
 8009c06:	2380      	movs	r3, #128	; 0x80
 8009c08:	061b      	lsls	r3, r3, #24
 8009c0a:	2780      	movs	r7, #128	; 0x80
 8009c0c:	02ff      	lsls	r7, r7, #11
 8009c0e:	4137      	asrs	r7, r6
 8009c10:	4395      	bics	r5, r2
 8009c12:	432f      	orrs	r7, r5
 8009c14:	9701      	str	r7, [sp, #4]
 8009c16:	9901      	ldr	r1, [sp, #4]
 8009c18:	001a      	movs	r2, r3
 8009c1a:	000b      	movs	r3, r1
 8009c1c:	4917      	ldr	r1, [pc, #92]	; (8009c7c <rint+0x104>)
 8009c1e:	00e4      	lsls	r4, r4, #3
 8009c20:	190c      	adds	r4, r1, r4
 8009c22:	6865      	ldr	r5, [r4, #4]
 8009c24:	6824      	ldr	r4, [r4, #0]
 8009c26:	0020      	movs	r0, r4
 8009c28:	0029      	movs	r1, r5
 8009c2a:	f7f6 fee5 	bl	80009f8 <__aeabi_dadd>
 8009c2e:	9002      	str	r0, [sp, #8]
 8009c30:	9103      	str	r1, [sp, #12]
 8009c32:	9802      	ldr	r0, [sp, #8]
 8009c34:	9903      	ldr	r1, [sp, #12]
 8009c36:	0022      	movs	r2, r4
 8009c38:	002b      	movs	r3, r5
 8009c3a:	f7f8 f875 	bl	8001d28 <__aeabi_dsub>
 8009c3e:	e7d2      	b.n	8009be6 <rint+0x6e>
 8009c40:	2e33      	cmp	r6, #51	; 0x33
 8009c42:	dd08      	ble.n	8009c56 <rint+0xde>
 8009c44:	2380      	movs	r3, #128	; 0x80
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	429e      	cmp	r6, r3
 8009c4a:	d1cc      	bne.n	8009be6 <rint+0x6e>
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	000b      	movs	r3, r1
 8009c50:	f7f6 fed2 	bl	80009f8 <__aeabi_dadd>
 8009c54:	e7c7      	b.n	8009be6 <rint+0x6e>
 8009c56:	2601      	movs	r6, #1
 8009c58:	4d0a      	ldr	r5, [pc, #40]	; (8009c84 <rint+0x10c>)
 8009c5a:	4276      	negs	r6, r6
 8009c5c:	1952      	adds	r2, r2, r5
 8009c5e:	40d6      	lsrs	r6, r2
 8009c60:	4206      	tst	r6, r0
 8009c62:	d0c0      	beq.n	8009be6 <rint+0x6e>
 8009c64:	0876      	lsrs	r6, r6, #1
 8009c66:	4206      	tst	r6, r0
 8009c68:	d0d5      	beq.n	8009c16 <rint+0x9e>
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	05c9      	lsls	r1, r1, #23
 8009c6e:	4111      	asrs	r1, r2
 8009c70:	43b3      	bics	r3, r6
 8009c72:	430b      	orrs	r3, r1
 8009c74:	e7cf      	b.n	8009c16 <rint+0x9e>
 8009c76:	46c0      	nop			; (mov r8, r8)
 8009c78:	fffffc01 	.word	0xfffffc01
 8009c7c:	08009ea0 	.word	0x08009ea0
 8009c80:	000fffff 	.word	0x000fffff
 8009c84:	fffffbed 	.word	0xfffffbed

08009c88 <scalbn>:
 8009c88:	004b      	lsls	r3, r1, #1
 8009c8a:	b570      	push	{r4, r5, r6, lr}
 8009c8c:	0d5b      	lsrs	r3, r3, #21
 8009c8e:	0014      	movs	r4, r2
 8009c90:	000a      	movs	r2, r1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10d      	bne.n	8009cb2 <scalbn+0x2a>
 8009c96:	004b      	lsls	r3, r1, #1
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	4303      	orrs	r3, r0
 8009c9c:	d010      	beq.n	8009cc0 <scalbn+0x38>
 8009c9e:	4b21      	ldr	r3, [pc, #132]	; (8009d24 <scalbn+0x9c>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f7f7 fdcf 	bl	8001844 <__aeabi_dmul>
 8009ca6:	4b20      	ldr	r3, [pc, #128]	; (8009d28 <scalbn+0xa0>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	da0a      	bge.n	8009cc2 <scalbn+0x3a>
 8009cac:	4a1f      	ldr	r2, [pc, #124]	; (8009d2c <scalbn+0xa4>)
 8009cae:	4b20      	ldr	r3, [pc, #128]	; (8009d30 <scalbn+0xa8>)
 8009cb0:	e017      	b.n	8009ce2 <scalbn+0x5a>
 8009cb2:	4d20      	ldr	r5, [pc, #128]	; (8009d34 <scalbn+0xac>)
 8009cb4:	42ab      	cmp	r3, r5
 8009cb6:	d108      	bne.n	8009cca <scalbn+0x42>
 8009cb8:	0002      	movs	r2, r0
 8009cba:	000b      	movs	r3, r1
 8009cbc:	f7f6 fe9c 	bl	80009f8 <__aeabi_dadd>
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	000a      	movs	r2, r1
 8009cc4:	004b      	lsls	r3, r1, #1
 8009cc6:	0d5b      	lsrs	r3, r3, #21
 8009cc8:	3b36      	subs	r3, #54	; 0x36
 8009cca:	4d1b      	ldr	r5, [pc, #108]	; (8009d38 <scalbn+0xb0>)
 8009ccc:	18e3      	adds	r3, r4, r3
 8009cce:	42ab      	cmp	r3, r5
 8009cd0:	dd0a      	ble.n	8009ce8 <scalbn+0x60>
 8009cd2:	0002      	movs	r2, r0
 8009cd4:	000b      	movs	r3, r1
 8009cd6:	4819      	ldr	r0, [pc, #100]	; (8009d3c <scalbn+0xb4>)
 8009cd8:	4919      	ldr	r1, [pc, #100]	; (8009d40 <scalbn+0xb8>)
 8009cda:	f000 f839 	bl	8009d50 <copysign>
 8009cde:	4a17      	ldr	r2, [pc, #92]	; (8009d3c <scalbn+0xb4>)
 8009ce0:	4b17      	ldr	r3, [pc, #92]	; (8009d40 <scalbn+0xb8>)
 8009ce2:	f7f7 fdaf 	bl	8001844 <__aeabi_dmul>
 8009ce6:	e7eb      	b.n	8009cc0 <scalbn+0x38>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dd05      	ble.n	8009cf8 <scalbn+0x70>
 8009cec:	4c15      	ldr	r4, [pc, #84]	; (8009d44 <scalbn+0xbc>)
 8009cee:	051b      	lsls	r3, r3, #20
 8009cf0:	4022      	ands	r2, r4
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	0011      	movs	r1, r2
 8009cf6:	e7e3      	b.n	8009cc0 <scalbn+0x38>
 8009cf8:	001d      	movs	r5, r3
 8009cfa:	3535      	adds	r5, #53	; 0x35
 8009cfc:	da09      	bge.n	8009d12 <scalbn+0x8a>
 8009cfe:	4b12      	ldr	r3, [pc, #72]	; (8009d48 <scalbn+0xc0>)
 8009d00:	0002      	movs	r2, r0
 8009d02:	429c      	cmp	r4, r3
 8009d04:	dce6      	bgt.n	8009cd4 <scalbn+0x4c>
 8009d06:	000b      	movs	r3, r1
 8009d08:	4808      	ldr	r0, [pc, #32]	; (8009d2c <scalbn+0xa4>)
 8009d0a:	4909      	ldr	r1, [pc, #36]	; (8009d30 <scalbn+0xa8>)
 8009d0c:	f000 f820 	bl	8009d50 <copysign>
 8009d10:	e7cc      	b.n	8009cac <scalbn+0x24>
 8009d12:	4c0c      	ldr	r4, [pc, #48]	; (8009d44 <scalbn+0xbc>)
 8009d14:	3336      	adds	r3, #54	; 0x36
 8009d16:	4022      	ands	r2, r4
 8009d18:	051b      	lsls	r3, r3, #20
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	0019      	movs	r1, r3
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <scalbn+0xc4>)
 8009d22:	e7de      	b.n	8009ce2 <scalbn+0x5a>
 8009d24:	43500000 	.word	0x43500000
 8009d28:	ffff3cb0 	.word	0xffff3cb0
 8009d2c:	c2f8f359 	.word	0xc2f8f359
 8009d30:	01a56e1f 	.word	0x01a56e1f
 8009d34:	000007ff 	.word	0x000007ff
 8009d38:	000007fe 	.word	0x000007fe
 8009d3c:	8800759c 	.word	0x8800759c
 8009d40:	7e37e43c 	.word	0x7e37e43c
 8009d44:	800fffff 	.word	0x800fffff
 8009d48:	0000c350 	.word	0x0000c350
 8009d4c:	3c900000 	.word	0x3c900000

08009d50 <copysign>:
 8009d50:	b530      	push	{r4, r5, lr}
 8009d52:	004a      	lsls	r2, r1, #1
 8009d54:	0fdb      	lsrs	r3, r3, #31
 8009d56:	07db      	lsls	r3, r3, #31
 8009d58:	0852      	lsrs	r2, r2, #1
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	0011      	movs	r1, r2
 8009d5e:	bd30      	pop	{r4, r5, pc}

08009d60 <_init>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	46c0      	nop			; (mov r8, r8)
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr

08009d6c <_fini>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	46c0      	nop			; (mov r8, r8)
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr
