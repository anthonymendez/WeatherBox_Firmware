
WeatherBox_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080069a0  080069a0  000169a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a80  08006a80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006a80  08006a80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a80  08006a80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08006af8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08006af8  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c500  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b3d  00000000  00000000  0002c598  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0002e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  0002ee18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013c93  00000000  00000000  0002fa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bef  00000000  00000000  00043703  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c6e7  00000000  00000000  0004d2f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c99d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000c9a54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006984 	.word	0x08006984

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006984 	.word	0x08006984

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f9b5 	bl	80015a0 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f90d 	bl	8001460 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f9a7 	bl	80015a0 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f99d 	bl	80015a0 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f92f 	bl	80014d8 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f925 	bl	80014d8 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8a9 	bl	80003fc <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f82b 	bl	8000310 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f89b 	bl	80003fc <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f891 	bl	80003fc <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f839 	bl	8000360 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f82f 	bl	8000360 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__eqsf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	024e      	lsls	r6, r1, #9
 8000316:	004c      	lsls	r4, r1, #1
 8000318:	0245      	lsls	r5, r0, #9
 800031a:	0a6d      	lsrs	r5, r5, #9
 800031c:	0e12      	lsrs	r2, r2, #24
 800031e:	0fc3      	lsrs	r3, r0, #31
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	2aff      	cmp	r2, #255	; 0xff
 8000328:	d00f      	beq.n	800034a <__eqsf2+0x3a>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d011      	beq.n	8000352 <__eqsf2+0x42>
 800032e:	2001      	movs	r0, #1
 8000330:	42a2      	cmp	r2, r4
 8000332:	d000      	beq.n	8000336 <__eqsf2+0x26>
 8000334:	bd70      	pop	{r4, r5, r6, pc}
 8000336:	42b5      	cmp	r5, r6
 8000338:	d1fc      	bne.n	8000334 <__eqsf2+0x24>
 800033a:	428b      	cmp	r3, r1
 800033c:	d00d      	beq.n	800035a <__eqsf2+0x4a>
 800033e:	2a00      	cmp	r2, #0
 8000340:	d1f8      	bne.n	8000334 <__eqsf2+0x24>
 8000342:	0028      	movs	r0, r5
 8000344:	1e45      	subs	r5, r0, #1
 8000346:	41a8      	sbcs	r0, r5
 8000348:	e7f4      	b.n	8000334 <__eqsf2+0x24>
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d1f1      	bne.n	8000334 <__eqsf2+0x24>
 8000350:	e7eb      	b.n	800032a <__eqsf2+0x1a>
 8000352:	2001      	movs	r0, #1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d1ed      	bne.n	8000334 <__eqsf2+0x24>
 8000358:	e7e9      	b.n	800032e <__eqsf2+0x1e>
 800035a:	2000      	movs	r0, #0
 800035c:	e7ea      	b.n	8000334 <__eqsf2+0x24>
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__gesf2>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	004a      	lsls	r2, r1, #1
 8000364:	024e      	lsls	r6, r1, #9
 8000366:	0245      	lsls	r5, r0, #9
 8000368:	0044      	lsls	r4, r0, #1
 800036a:	0a6d      	lsrs	r5, r5, #9
 800036c:	0e24      	lsrs	r4, r4, #24
 800036e:	0fc3      	lsrs	r3, r0, #31
 8000370:	0a76      	lsrs	r6, r6, #9
 8000372:	0e12      	lsrs	r2, r2, #24
 8000374:	0fc9      	lsrs	r1, r1, #31
 8000376:	2cff      	cmp	r4, #255	; 0xff
 8000378:	d015      	beq.n	80003a6 <__gesf2+0x46>
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d00e      	beq.n	800039c <__gesf2+0x3c>
 800037e:	2c00      	cmp	r4, #0
 8000380:	d115      	bne.n	80003ae <__gesf2+0x4e>
 8000382:	2a00      	cmp	r2, #0
 8000384:	d101      	bne.n	800038a <__gesf2+0x2a>
 8000386:	2e00      	cmp	r6, #0
 8000388:	d01c      	beq.n	80003c4 <__gesf2+0x64>
 800038a:	2d00      	cmp	r5, #0
 800038c:	d014      	beq.n	80003b8 <__gesf2+0x58>
 800038e:	428b      	cmp	r3, r1
 8000390:	d027      	beq.n	80003e2 <__gesf2+0x82>
 8000392:	2002      	movs	r0, #2
 8000394:	3b01      	subs	r3, #1
 8000396:	4018      	ands	r0, r3
 8000398:	3801      	subs	r0, #1
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	2e00      	cmp	r6, #0
 800039e:	d0ee      	beq.n	800037e <__gesf2+0x1e>
 80003a0:	2002      	movs	r0, #2
 80003a2:	4240      	negs	r0, r0
 80003a4:	e7f9      	b.n	800039a <__gesf2+0x3a>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d1fa      	bne.n	80003a0 <__gesf2+0x40>
 80003aa:	2aff      	cmp	r2, #255	; 0xff
 80003ac:	d00e      	beq.n	80003cc <__gesf2+0x6c>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d10e      	bne.n	80003d0 <__gesf2+0x70>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d0ed      	beq.n	8000392 <__gesf2+0x32>
 80003b6:	e00b      	b.n	80003d0 <__gesf2+0x70>
 80003b8:	2301      	movs	r3, #1
 80003ba:	3901      	subs	r1, #1
 80003bc:	4399      	bics	r1, r3
 80003be:	0008      	movs	r0, r1
 80003c0:	3001      	adds	r0, #1
 80003c2:	e7ea      	b.n	800039a <__gesf2+0x3a>
 80003c4:	2000      	movs	r0, #0
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d0e7      	beq.n	800039a <__gesf2+0x3a>
 80003ca:	e7e2      	b.n	8000392 <__gesf2+0x32>
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d1e7      	bne.n	80003a0 <__gesf2+0x40>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d1de      	bne.n	8000392 <__gesf2+0x32>
 80003d4:	4294      	cmp	r4, r2
 80003d6:	dd05      	ble.n	80003e4 <__gesf2+0x84>
 80003d8:	2102      	movs	r1, #2
 80003da:	1e58      	subs	r0, r3, #1
 80003dc:	4008      	ands	r0, r1
 80003de:	3801      	subs	r0, #1
 80003e0:	e7db      	b.n	800039a <__gesf2+0x3a>
 80003e2:	2400      	movs	r4, #0
 80003e4:	42a2      	cmp	r2, r4
 80003e6:	dc04      	bgt.n	80003f2 <__gesf2+0x92>
 80003e8:	42b5      	cmp	r5, r6
 80003ea:	d8d2      	bhi.n	8000392 <__gesf2+0x32>
 80003ec:	2000      	movs	r0, #0
 80003ee:	42b5      	cmp	r5, r6
 80003f0:	d2d3      	bcs.n	800039a <__gesf2+0x3a>
 80003f2:	1e58      	subs	r0, r3, #1
 80003f4:	2301      	movs	r3, #1
 80003f6:	4398      	bics	r0, r3
 80003f8:	3001      	adds	r0, #1
 80003fa:	e7ce      	b.n	800039a <__gesf2+0x3a>

080003fc <__lesf2>:
 80003fc:	b530      	push	{r4, r5, lr}
 80003fe:	0042      	lsls	r2, r0, #1
 8000400:	0244      	lsls	r4, r0, #9
 8000402:	024d      	lsls	r5, r1, #9
 8000404:	0fc3      	lsrs	r3, r0, #31
 8000406:	0048      	lsls	r0, r1, #1
 8000408:	0a64      	lsrs	r4, r4, #9
 800040a:	0e12      	lsrs	r2, r2, #24
 800040c:	0a6d      	lsrs	r5, r5, #9
 800040e:	0e00      	lsrs	r0, r0, #24
 8000410:	0fc9      	lsrs	r1, r1, #31
 8000412:	2aff      	cmp	r2, #255	; 0xff
 8000414:	d012      	beq.n	800043c <__lesf2+0x40>
 8000416:	28ff      	cmp	r0, #255	; 0xff
 8000418:	d00c      	beq.n	8000434 <__lesf2+0x38>
 800041a:	2a00      	cmp	r2, #0
 800041c:	d112      	bne.n	8000444 <__lesf2+0x48>
 800041e:	2800      	cmp	r0, #0
 8000420:	d119      	bne.n	8000456 <__lesf2+0x5a>
 8000422:	2d00      	cmp	r5, #0
 8000424:	d117      	bne.n	8000456 <__lesf2+0x5a>
 8000426:	2c00      	cmp	r4, #0
 8000428:	d02b      	beq.n	8000482 <__lesf2+0x86>
 800042a:	2002      	movs	r0, #2
 800042c:	3b01      	subs	r3, #1
 800042e:	4018      	ands	r0, r3
 8000430:	3801      	subs	r0, #1
 8000432:	e026      	b.n	8000482 <__lesf2+0x86>
 8000434:	2d00      	cmp	r5, #0
 8000436:	d0f0      	beq.n	800041a <__lesf2+0x1e>
 8000438:	2002      	movs	r0, #2
 800043a:	e022      	b.n	8000482 <__lesf2+0x86>
 800043c:	2c00      	cmp	r4, #0
 800043e:	d1fb      	bne.n	8000438 <__lesf2+0x3c>
 8000440:	28ff      	cmp	r0, #255	; 0xff
 8000442:	d01f      	beq.n	8000484 <__lesf2+0x88>
 8000444:	2800      	cmp	r0, #0
 8000446:	d11f      	bne.n	8000488 <__lesf2+0x8c>
 8000448:	2d00      	cmp	r5, #0
 800044a:	d11d      	bne.n	8000488 <__lesf2+0x8c>
 800044c:	2002      	movs	r0, #2
 800044e:	3b01      	subs	r3, #1
 8000450:	4018      	ands	r0, r3
 8000452:	3801      	subs	r0, #1
 8000454:	e015      	b.n	8000482 <__lesf2+0x86>
 8000456:	2c00      	cmp	r4, #0
 8000458:	d00e      	beq.n	8000478 <__lesf2+0x7c>
 800045a:	428b      	cmp	r3, r1
 800045c:	d1e5      	bne.n	800042a <__lesf2+0x2e>
 800045e:	2200      	movs	r2, #0
 8000460:	4290      	cmp	r0, r2
 8000462:	dc04      	bgt.n	800046e <__lesf2+0x72>
 8000464:	42ac      	cmp	r4, r5
 8000466:	d8e0      	bhi.n	800042a <__lesf2+0x2e>
 8000468:	2000      	movs	r0, #0
 800046a:	42ac      	cmp	r4, r5
 800046c:	d209      	bcs.n	8000482 <__lesf2+0x86>
 800046e:	1e58      	subs	r0, r3, #1
 8000470:	2301      	movs	r3, #1
 8000472:	4398      	bics	r0, r3
 8000474:	3001      	adds	r0, #1
 8000476:	e004      	b.n	8000482 <__lesf2+0x86>
 8000478:	2301      	movs	r3, #1
 800047a:	3901      	subs	r1, #1
 800047c:	4399      	bics	r1, r3
 800047e:	0008      	movs	r0, r1
 8000480:	3001      	adds	r0, #1
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	2d00      	cmp	r5, #0
 8000486:	d1d7      	bne.n	8000438 <__lesf2+0x3c>
 8000488:	428b      	cmp	r3, r1
 800048a:	d1ce      	bne.n	800042a <__lesf2+0x2e>
 800048c:	4282      	cmp	r2, r0
 800048e:	dde7      	ble.n	8000460 <__lesf2+0x64>
 8000490:	2102      	movs	r1, #2
 8000492:	1e58      	subs	r0, r3, #1
 8000494:	4008      	ands	r0, r1
 8000496:	3801      	subs	r0, #1
 8000498:	e7f3      	b.n	8000482 <__lesf2+0x86>
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_fsub>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	4647      	mov	r7, r8
 80004a0:	46ce      	mov	lr, r9
 80004a2:	0044      	lsls	r4, r0, #1
 80004a4:	0fc2      	lsrs	r2, r0, #31
 80004a6:	b580      	push	{r7, lr}
 80004a8:	0247      	lsls	r7, r0, #9
 80004aa:	0248      	lsls	r0, r1, #9
 80004ac:	0a40      	lsrs	r0, r0, #9
 80004ae:	4684      	mov	ip, r0
 80004b0:	4666      	mov	r6, ip
 80004b2:	0048      	lsls	r0, r1, #1
 80004b4:	0a7f      	lsrs	r7, r7, #9
 80004b6:	0e24      	lsrs	r4, r4, #24
 80004b8:	00f6      	lsls	r6, r6, #3
 80004ba:	0025      	movs	r5, r4
 80004bc:	4690      	mov	r8, r2
 80004be:	00fb      	lsls	r3, r7, #3
 80004c0:	0e00      	lsrs	r0, r0, #24
 80004c2:	0fc9      	lsrs	r1, r1, #31
 80004c4:	46b1      	mov	r9, r6
 80004c6:	28ff      	cmp	r0, #255	; 0xff
 80004c8:	d100      	bne.n	80004cc <__aeabi_fsub+0x30>
 80004ca:	e085      	b.n	80005d8 <__aeabi_fsub+0x13c>
 80004cc:	2601      	movs	r6, #1
 80004ce:	4071      	eors	r1, r6
 80004d0:	1a26      	subs	r6, r4, r0
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d057      	beq.n	8000586 <__aeabi_fsub+0xea>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	dd43      	ble.n	8000562 <__aeabi_fsub+0xc6>
 80004da:	2800      	cmp	r0, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fsub+0x44>
 80004de:	e07f      	b.n	80005e0 <__aeabi_fsub+0x144>
 80004e0:	4649      	mov	r1, r9
 80004e2:	2900      	cmp	r1, #0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fsub+0x4c>
 80004e6:	e0aa      	b.n	800063e <__aeabi_fsub+0x1a2>
 80004e8:	3e01      	subs	r6, #1
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d000      	beq.n	80004f0 <__aeabi_fsub+0x54>
 80004ee:	e0f7      	b.n	80006e0 <__aeabi_fsub+0x244>
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	015a      	lsls	r2, r3, #5
 80004f4:	d400      	bmi.n	80004f8 <__aeabi_fsub+0x5c>
 80004f6:	e08b      	b.n	8000610 <__aeabi_fsub+0x174>
 80004f8:	019b      	lsls	r3, r3, #6
 80004fa:	099c      	lsrs	r4, r3, #6
 80004fc:	0020      	movs	r0, r4
 80004fe:	f001 ff9d 	bl	800243c <__clzsi2>
 8000502:	3805      	subs	r0, #5
 8000504:	4084      	lsls	r4, r0
 8000506:	4285      	cmp	r5, r0
 8000508:	dd00      	ble.n	800050c <__aeabi_fsub+0x70>
 800050a:	e0d3      	b.n	80006b4 <__aeabi_fsub+0x218>
 800050c:	1b45      	subs	r5, r0, r5
 800050e:	0023      	movs	r3, r4
 8000510:	2020      	movs	r0, #32
 8000512:	3501      	adds	r5, #1
 8000514:	40eb      	lsrs	r3, r5
 8000516:	1b45      	subs	r5, r0, r5
 8000518:	40ac      	lsls	r4, r5
 800051a:	1e62      	subs	r2, r4, #1
 800051c:	4194      	sbcs	r4, r2
 800051e:	4323      	orrs	r3, r4
 8000520:	2407      	movs	r4, #7
 8000522:	2500      	movs	r5, #0
 8000524:	401c      	ands	r4, r3
 8000526:	2201      	movs	r2, #1
 8000528:	4641      	mov	r1, r8
 800052a:	400a      	ands	r2, r1
 800052c:	2c00      	cmp	r4, #0
 800052e:	d004      	beq.n	800053a <__aeabi_fsub+0x9e>
 8000530:	210f      	movs	r1, #15
 8000532:	4019      	ands	r1, r3
 8000534:	2904      	cmp	r1, #4
 8000536:	d000      	beq.n	800053a <__aeabi_fsub+0x9e>
 8000538:	3304      	adds	r3, #4
 800053a:	0159      	lsls	r1, r3, #5
 800053c:	d400      	bmi.n	8000540 <__aeabi_fsub+0xa4>
 800053e:	e080      	b.n	8000642 <__aeabi_fsub+0x1a6>
 8000540:	3501      	adds	r5, #1
 8000542:	b2ec      	uxtb	r4, r5
 8000544:	2dff      	cmp	r5, #255	; 0xff
 8000546:	d000      	beq.n	800054a <__aeabi_fsub+0xae>
 8000548:	e0a3      	b.n	8000692 <__aeabi_fsub+0x1f6>
 800054a:	24ff      	movs	r4, #255	; 0xff
 800054c:	2300      	movs	r3, #0
 800054e:	025b      	lsls	r3, r3, #9
 8000550:	05e4      	lsls	r4, r4, #23
 8000552:	0a58      	lsrs	r0, r3, #9
 8000554:	07d2      	lsls	r2, r2, #31
 8000556:	4320      	orrs	r0, r4
 8000558:	4310      	orrs	r0, r2
 800055a:	bc0c      	pop	{r2, r3}
 800055c:	4690      	mov	r8, r2
 800055e:	4699      	mov	r9, r3
 8000560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000562:	2e00      	cmp	r6, #0
 8000564:	d174      	bne.n	8000650 <__aeabi_fsub+0x1b4>
 8000566:	1c60      	adds	r0, r4, #1
 8000568:	b2c0      	uxtb	r0, r0
 800056a:	2801      	cmp	r0, #1
 800056c:	dc00      	bgt.n	8000570 <__aeabi_fsub+0xd4>
 800056e:	e0a7      	b.n	80006c0 <__aeabi_fsub+0x224>
 8000570:	464a      	mov	r2, r9
 8000572:	1a9c      	subs	r4, r3, r2
 8000574:	0162      	lsls	r2, r4, #5
 8000576:	d500      	bpl.n	800057a <__aeabi_fsub+0xde>
 8000578:	e0b6      	b.n	80006e8 <__aeabi_fsub+0x24c>
 800057a:	2c00      	cmp	r4, #0
 800057c:	d1be      	bne.n	80004fc <__aeabi_fsub+0x60>
 800057e:	2200      	movs	r2, #0
 8000580:	2400      	movs	r4, #0
 8000582:	2300      	movs	r3, #0
 8000584:	e7e3      	b.n	800054e <__aeabi_fsub+0xb2>
 8000586:	2e00      	cmp	r6, #0
 8000588:	dc00      	bgt.n	800058c <__aeabi_fsub+0xf0>
 800058a:	e085      	b.n	8000698 <__aeabi_fsub+0x1fc>
 800058c:	2800      	cmp	r0, #0
 800058e:	d046      	beq.n	800061e <__aeabi_fsub+0x182>
 8000590:	2cff      	cmp	r4, #255	; 0xff
 8000592:	d049      	beq.n	8000628 <__aeabi_fsub+0x18c>
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	4648      	mov	r0, r9
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	4310      	orrs	r0, r2
 800059c:	4681      	mov	r9, r0
 800059e:	2201      	movs	r2, #1
 80005a0:	2e1b      	cmp	r6, #27
 80005a2:	dc09      	bgt.n	80005b8 <__aeabi_fsub+0x11c>
 80005a4:	2020      	movs	r0, #32
 80005a6:	464c      	mov	r4, r9
 80005a8:	1b80      	subs	r0, r0, r6
 80005aa:	4084      	lsls	r4, r0
 80005ac:	464a      	mov	r2, r9
 80005ae:	0020      	movs	r0, r4
 80005b0:	40f2      	lsrs	r2, r6
 80005b2:	1e44      	subs	r4, r0, #1
 80005b4:	41a0      	sbcs	r0, r4
 80005b6:	4302      	orrs	r2, r0
 80005b8:	189b      	adds	r3, r3, r2
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	d528      	bpl.n	8000610 <__aeabi_fsub+0x174>
 80005be:	3501      	adds	r5, #1
 80005c0:	2dff      	cmp	r5, #255	; 0xff
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fsub+0x12a>
 80005c4:	e0a8      	b.n	8000718 <__aeabi_fsub+0x27c>
 80005c6:	2201      	movs	r2, #1
 80005c8:	2407      	movs	r4, #7
 80005ca:	4994      	ldr	r1, [pc, #592]	; (800081c <__aeabi_fsub+0x380>)
 80005cc:	401a      	ands	r2, r3
 80005ce:	085b      	lsrs	r3, r3, #1
 80005d0:	400b      	ands	r3, r1
 80005d2:	4313      	orrs	r3, r2
 80005d4:	401c      	ands	r4, r3
 80005d6:	e7a6      	b.n	8000526 <__aeabi_fsub+0x8a>
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d000      	beq.n	80005de <__aeabi_fsub+0x142>
 80005dc:	e778      	b.n	80004d0 <__aeabi_fsub+0x34>
 80005de:	e775      	b.n	80004cc <__aeabi_fsub+0x30>
 80005e0:	2cff      	cmp	r4, #255	; 0xff
 80005e2:	d054      	beq.n	800068e <__aeabi_fsub+0x1f2>
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	4649      	mov	r1, r9
 80005e8:	04d2      	lsls	r2, r2, #19
 80005ea:	4311      	orrs	r1, r2
 80005ec:	4689      	mov	r9, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	2e1b      	cmp	r6, #27
 80005f2:	dc09      	bgt.n	8000608 <__aeabi_fsub+0x16c>
 80005f4:	2120      	movs	r1, #32
 80005f6:	4648      	mov	r0, r9
 80005f8:	1b89      	subs	r1, r1, r6
 80005fa:	4088      	lsls	r0, r1
 80005fc:	464a      	mov	r2, r9
 80005fe:	0001      	movs	r1, r0
 8000600:	40f2      	lsrs	r2, r6
 8000602:	1e48      	subs	r0, r1, #1
 8000604:	4181      	sbcs	r1, r0
 8000606:	430a      	orrs	r2, r1
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	015a      	lsls	r2, r3, #5
 800060c:	d500      	bpl.n	8000610 <__aeabi_fsub+0x174>
 800060e:	e773      	b.n	80004f8 <__aeabi_fsub+0x5c>
 8000610:	2201      	movs	r2, #1
 8000612:	4641      	mov	r1, r8
 8000614:	400a      	ands	r2, r1
 8000616:	0759      	lsls	r1, r3, #29
 8000618:	d000      	beq.n	800061c <__aeabi_fsub+0x180>
 800061a:	e789      	b.n	8000530 <__aeabi_fsub+0x94>
 800061c:	e011      	b.n	8000642 <__aeabi_fsub+0x1a6>
 800061e:	4648      	mov	r0, r9
 8000620:	2800      	cmp	r0, #0
 8000622:	d158      	bne.n	80006d6 <__aeabi_fsub+0x23a>
 8000624:	2cff      	cmp	r4, #255	; 0xff
 8000626:	d10c      	bne.n	8000642 <__aeabi_fsub+0x1a6>
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fsub+0x194>
 800062e:	e78c      	b.n	800054a <__aeabi_fsub+0xae>
 8000630:	2080      	movs	r0, #128	; 0x80
 8000632:	03c0      	lsls	r0, r0, #15
 8000634:	4303      	orrs	r3, r0
 8000636:	025b      	lsls	r3, r3, #9
 8000638:	0a5b      	lsrs	r3, r3, #9
 800063a:	24ff      	movs	r4, #255	; 0xff
 800063c:	e787      	b.n	800054e <__aeabi_fsub+0xb2>
 800063e:	2cff      	cmp	r4, #255	; 0xff
 8000640:	d025      	beq.n	800068e <__aeabi_fsub+0x1f2>
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	2dff      	cmp	r5, #255	; 0xff
 8000646:	d0f0      	beq.n	800062a <__aeabi_fsub+0x18e>
 8000648:	025b      	lsls	r3, r3, #9
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	b2ec      	uxtb	r4, r5
 800064e:	e77e      	b.n	800054e <__aeabi_fsub+0xb2>
 8000650:	2c00      	cmp	r4, #0
 8000652:	d04d      	beq.n	80006f0 <__aeabi_fsub+0x254>
 8000654:	28ff      	cmp	r0, #255	; 0xff
 8000656:	d018      	beq.n	800068a <__aeabi_fsub+0x1ee>
 8000658:	2480      	movs	r4, #128	; 0x80
 800065a:	04e4      	lsls	r4, r4, #19
 800065c:	4272      	negs	r2, r6
 800065e:	4323      	orrs	r3, r4
 8000660:	2a1b      	cmp	r2, #27
 8000662:	dd00      	ble.n	8000666 <__aeabi_fsub+0x1ca>
 8000664:	e0c4      	b.n	80007f0 <__aeabi_fsub+0x354>
 8000666:	001c      	movs	r4, r3
 8000668:	2520      	movs	r5, #32
 800066a:	40d4      	lsrs	r4, r2
 800066c:	1aaa      	subs	r2, r5, r2
 800066e:	4093      	lsls	r3, r2
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	4193      	sbcs	r3, r2
 8000674:	4323      	orrs	r3, r4
 8000676:	464a      	mov	r2, r9
 8000678:	0005      	movs	r5, r0
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	4688      	mov	r8, r1
 800067e:	e738      	b.n	80004f2 <__aeabi_fsub+0x56>
 8000680:	1c72      	adds	r2, r6, #1
 8000682:	d0f8      	beq.n	8000676 <__aeabi_fsub+0x1da>
 8000684:	43f2      	mvns	r2, r6
 8000686:	28ff      	cmp	r0, #255	; 0xff
 8000688:	d1ea      	bne.n	8000660 <__aeabi_fsub+0x1c4>
 800068a:	000a      	movs	r2, r1
 800068c:	464b      	mov	r3, r9
 800068e:	25ff      	movs	r5, #255	; 0xff
 8000690:	e7d7      	b.n	8000642 <__aeabi_fsub+0x1a6>
 8000692:	019b      	lsls	r3, r3, #6
 8000694:	0a5b      	lsrs	r3, r3, #9
 8000696:	e75a      	b.n	800054e <__aeabi_fsub+0xb2>
 8000698:	2e00      	cmp	r6, #0
 800069a:	d141      	bne.n	8000720 <__aeabi_fsub+0x284>
 800069c:	1c65      	adds	r5, r4, #1
 800069e:	b2e9      	uxtb	r1, r5
 80006a0:	2901      	cmp	r1, #1
 80006a2:	dd45      	ble.n	8000730 <__aeabi_fsub+0x294>
 80006a4:	2dff      	cmp	r5, #255	; 0xff
 80006a6:	d100      	bne.n	80006aa <__aeabi_fsub+0x20e>
 80006a8:	e74f      	b.n	800054a <__aeabi_fsub+0xae>
 80006aa:	2407      	movs	r4, #7
 80006ac:	444b      	add	r3, r9
 80006ae:	085b      	lsrs	r3, r3, #1
 80006b0:	401c      	ands	r4, r3
 80006b2:	e738      	b.n	8000526 <__aeabi_fsub+0x8a>
 80006b4:	2207      	movs	r2, #7
 80006b6:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <__aeabi_fsub+0x384>)
 80006b8:	1a2d      	subs	r5, r5, r0
 80006ba:	4023      	ands	r3, r4
 80006bc:	4014      	ands	r4, r2
 80006be:	e732      	b.n	8000526 <__aeabi_fsub+0x8a>
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d11d      	bne.n	8000700 <__aeabi_fsub+0x264>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d17a      	bne.n	80007be <__aeabi_fsub+0x322>
 80006c8:	464b      	mov	r3, r9
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fsub+0x234>
 80006ce:	e091      	b.n	80007f4 <__aeabi_fsub+0x358>
 80006d0:	000a      	movs	r2, r1
 80006d2:	2500      	movs	r5, #0
 80006d4:	e7b5      	b.n	8000642 <__aeabi_fsub+0x1a6>
 80006d6:	3e01      	subs	r6, #1
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d119      	bne.n	8000710 <__aeabi_fsub+0x274>
 80006dc:	444b      	add	r3, r9
 80006de:	e76c      	b.n	80005ba <__aeabi_fsub+0x11e>
 80006e0:	2cff      	cmp	r4, #255	; 0xff
 80006e2:	d184      	bne.n	80005ee <__aeabi_fsub+0x152>
 80006e4:	25ff      	movs	r5, #255	; 0xff
 80006e6:	e7ac      	b.n	8000642 <__aeabi_fsub+0x1a6>
 80006e8:	464a      	mov	r2, r9
 80006ea:	4688      	mov	r8, r1
 80006ec:	1ad4      	subs	r4, r2, r3
 80006ee:	e705      	b.n	80004fc <__aeabi_fsub+0x60>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1c5      	bne.n	8000680 <__aeabi_fsub+0x1e4>
 80006f4:	000a      	movs	r2, r1
 80006f6:	28ff      	cmp	r0, #255	; 0xff
 80006f8:	d0c8      	beq.n	800068c <__aeabi_fsub+0x1f0>
 80006fa:	0005      	movs	r5, r0
 80006fc:	464b      	mov	r3, r9
 80006fe:	e7a0      	b.n	8000642 <__aeabi_fsub+0x1a6>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d149      	bne.n	8000798 <__aeabi_fsub+0x2fc>
 8000704:	464b      	mov	r3, r9
 8000706:	2b00      	cmp	r3, #0
 8000708:	d077      	beq.n	80007fa <__aeabi_fsub+0x35e>
 800070a:	000a      	movs	r2, r1
 800070c:	25ff      	movs	r5, #255	; 0xff
 800070e:	e798      	b.n	8000642 <__aeabi_fsub+0x1a6>
 8000710:	2cff      	cmp	r4, #255	; 0xff
 8000712:	d000      	beq.n	8000716 <__aeabi_fsub+0x27a>
 8000714:	e743      	b.n	800059e <__aeabi_fsub+0x102>
 8000716:	e787      	b.n	8000628 <__aeabi_fsub+0x18c>
 8000718:	000a      	movs	r2, r1
 800071a:	24ff      	movs	r4, #255	; 0xff
 800071c:	2300      	movs	r3, #0
 800071e:	e716      	b.n	800054e <__aeabi_fsub+0xb2>
 8000720:	2c00      	cmp	r4, #0
 8000722:	d115      	bne.n	8000750 <__aeabi_fsub+0x2b4>
 8000724:	2b00      	cmp	r3, #0
 8000726:	d157      	bne.n	80007d8 <__aeabi_fsub+0x33c>
 8000728:	28ff      	cmp	r0, #255	; 0xff
 800072a:	d1e6      	bne.n	80006fa <__aeabi_fsub+0x25e>
 800072c:	464b      	mov	r3, r9
 800072e:	e77b      	b.n	8000628 <__aeabi_fsub+0x18c>
 8000730:	2c00      	cmp	r4, #0
 8000732:	d120      	bne.n	8000776 <__aeabi_fsub+0x2da>
 8000734:	2b00      	cmp	r3, #0
 8000736:	d057      	beq.n	80007e8 <__aeabi_fsub+0x34c>
 8000738:	4649      	mov	r1, r9
 800073a:	2900      	cmp	r1, #0
 800073c:	d053      	beq.n	80007e6 <__aeabi_fsub+0x34a>
 800073e:	444b      	add	r3, r9
 8000740:	015a      	lsls	r2, r3, #5
 8000742:	d568      	bpl.n	8000816 <__aeabi_fsub+0x37a>
 8000744:	2407      	movs	r4, #7
 8000746:	4a36      	ldr	r2, [pc, #216]	; (8000820 <__aeabi_fsub+0x384>)
 8000748:	401c      	ands	r4, r3
 800074a:	2501      	movs	r5, #1
 800074c:	4013      	ands	r3, r2
 800074e:	e6ea      	b.n	8000526 <__aeabi_fsub+0x8a>
 8000750:	28ff      	cmp	r0, #255	; 0xff
 8000752:	d0eb      	beq.n	800072c <__aeabi_fsub+0x290>
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	04d2      	lsls	r2, r2, #19
 8000758:	4276      	negs	r6, r6
 800075a:	4313      	orrs	r3, r2
 800075c:	2e1b      	cmp	r6, #27
 800075e:	dc53      	bgt.n	8000808 <__aeabi_fsub+0x36c>
 8000760:	2520      	movs	r5, #32
 8000762:	1bad      	subs	r5, r5, r6
 8000764:	001a      	movs	r2, r3
 8000766:	40ab      	lsls	r3, r5
 8000768:	40f2      	lsrs	r2, r6
 800076a:	1e5c      	subs	r4, r3, #1
 800076c:	41a3      	sbcs	r3, r4
 800076e:	4313      	orrs	r3, r2
 8000770:	444b      	add	r3, r9
 8000772:	0005      	movs	r5, r0
 8000774:	e721      	b.n	80005ba <__aeabi_fsub+0x11e>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0d8      	beq.n	800072c <__aeabi_fsub+0x290>
 800077a:	4649      	mov	r1, r9
 800077c:	2900      	cmp	r1, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fsub+0x2e6>
 8000780:	e752      	b.n	8000628 <__aeabi_fsub+0x18c>
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	03c9      	lsls	r1, r1, #15
 8000786:	420f      	tst	r7, r1
 8000788:	d100      	bne.n	800078c <__aeabi_fsub+0x2f0>
 800078a:	e74d      	b.n	8000628 <__aeabi_fsub+0x18c>
 800078c:	4660      	mov	r0, ip
 800078e:	4208      	tst	r0, r1
 8000790:	d000      	beq.n	8000794 <__aeabi_fsub+0x2f8>
 8000792:	e749      	b.n	8000628 <__aeabi_fsub+0x18c>
 8000794:	464b      	mov	r3, r9
 8000796:	e747      	b.n	8000628 <__aeabi_fsub+0x18c>
 8000798:	4648      	mov	r0, r9
 800079a:	25ff      	movs	r5, #255	; 0xff
 800079c:	2800      	cmp	r0, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fsub+0x306>
 80007a0:	e74f      	b.n	8000642 <__aeabi_fsub+0x1a6>
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	4217      	tst	r7, r2
 80007a8:	d004      	beq.n	80007b4 <__aeabi_fsub+0x318>
 80007aa:	4660      	mov	r0, ip
 80007ac:	4210      	tst	r0, r2
 80007ae:	d101      	bne.n	80007b4 <__aeabi_fsub+0x318>
 80007b0:	464b      	mov	r3, r9
 80007b2:	4688      	mov	r8, r1
 80007b4:	2201      	movs	r2, #1
 80007b6:	4641      	mov	r1, r8
 80007b8:	25ff      	movs	r5, #255	; 0xff
 80007ba:	400a      	ands	r2, r1
 80007bc:	e741      	b.n	8000642 <__aeabi_fsub+0x1a6>
 80007be:	4648      	mov	r0, r9
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d01f      	beq.n	8000804 <__aeabi_fsub+0x368>
 80007c4:	1a1a      	subs	r2, r3, r0
 80007c6:	0150      	lsls	r0, r2, #5
 80007c8:	d520      	bpl.n	800080c <__aeabi_fsub+0x370>
 80007ca:	464a      	mov	r2, r9
 80007cc:	2407      	movs	r4, #7
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	401c      	ands	r4, r3
 80007d2:	4688      	mov	r8, r1
 80007d4:	2500      	movs	r5, #0
 80007d6:	e6a6      	b.n	8000526 <__aeabi_fsub+0x8a>
 80007d8:	1c74      	adds	r4, r6, #1
 80007da:	d0c9      	beq.n	8000770 <__aeabi_fsub+0x2d4>
 80007dc:	43f6      	mvns	r6, r6
 80007de:	28ff      	cmp	r0, #255	; 0xff
 80007e0:	d1bc      	bne.n	800075c <__aeabi_fsub+0x2c0>
 80007e2:	464b      	mov	r3, r9
 80007e4:	e720      	b.n	8000628 <__aeabi_fsub+0x18c>
 80007e6:	4699      	mov	r9, r3
 80007e8:	464b      	mov	r3, r9
 80007ea:	2500      	movs	r5, #0
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	e72b      	b.n	8000648 <__aeabi_fsub+0x1ac>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e740      	b.n	8000676 <__aeabi_fsub+0x1da>
 80007f4:	2200      	movs	r2, #0
 80007f6:	2300      	movs	r3, #0
 80007f8:	e6a9      	b.n	800054e <__aeabi_fsub+0xb2>
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	2200      	movs	r2, #0
 80007fe:	03db      	lsls	r3, r3, #15
 8000800:	24ff      	movs	r4, #255	; 0xff
 8000802:	e6a4      	b.n	800054e <__aeabi_fsub+0xb2>
 8000804:	2500      	movs	r5, #0
 8000806:	e71c      	b.n	8000642 <__aeabi_fsub+0x1a6>
 8000808:	2301      	movs	r3, #1
 800080a:	e7b1      	b.n	8000770 <__aeabi_fsub+0x2d4>
 800080c:	2a00      	cmp	r2, #0
 800080e:	d0f1      	beq.n	80007f4 <__aeabi_fsub+0x358>
 8000810:	0013      	movs	r3, r2
 8000812:	2500      	movs	r5, #0
 8000814:	e6fc      	b.n	8000610 <__aeabi_fsub+0x174>
 8000816:	2500      	movs	r5, #0
 8000818:	e6fa      	b.n	8000610 <__aeabi_fsub+0x174>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	fbffffff 	.word	0xfbffffff

08000824 <__aeabi_dadd>:
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	464f      	mov	r7, r9
 8000828:	4646      	mov	r6, r8
 800082a:	46d6      	mov	lr, sl
 800082c:	000c      	movs	r4, r1
 800082e:	0309      	lsls	r1, r1, #12
 8000830:	b5c0      	push	{r6, r7, lr}
 8000832:	0a49      	lsrs	r1, r1, #9
 8000834:	0f47      	lsrs	r7, r0, #29
 8000836:	005e      	lsls	r6, r3, #1
 8000838:	4339      	orrs	r1, r7
 800083a:	031f      	lsls	r7, r3, #12
 800083c:	0fdb      	lsrs	r3, r3, #31
 800083e:	469c      	mov	ip, r3
 8000840:	0065      	lsls	r5, r4, #1
 8000842:	0a7b      	lsrs	r3, r7, #9
 8000844:	0f57      	lsrs	r7, r2, #29
 8000846:	431f      	orrs	r7, r3
 8000848:	0d6d      	lsrs	r5, r5, #21
 800084a:	0fe4      	lsrs	r4, r4, #31
 800084c:	0d76      	lsrs	r6, r6, #21
 800084e:	46a1      	mov	r9, r4
 8000850:	00c0      	lsls	r0, r0, #3
 8000852:	46b8      	mov	r8, r7
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	1bab      	subs	r3, r5, r6
 8000858:	4564      	cmp	r4, ip
 800085a:	d07b      	beq.n	8000954 <__aeabi_dadd+0x130>
 800085c:	2b00      	cmp	r3, #0
 800085e:	dd5f      	ble.n	8000920 <__aeabi_dadd+0xfc>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x42>
 8000864:	e0a4      	b.n	80009b0 <__aeabi_dadd+0x18c>
 8000866:	003e      	movs	r6, r7
 8000868:	4316      	orrs	r6, r2
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x4a>
 800086c:	e112      	b.n	8000a94 <__aeabi_dadd+0x270>
 800086e:	1e5e      	subs	r6, r3, #1
 8000870:	2e00      	cmp	r6, #0
 8000872:	d000      	beq.n	8000876 <__aeabi_dadd+0x52>
 8000874:	e19e      	b.n	8000bb4 <__aeabi_dadd+0x390>
 8000876:	1a87      	subs	r7, r0, r2
 8000878:	4643      	mov	r3, r8
 800087a:	42b8      	cmp	r0, r7
 800087c:	4180      	sbcs	r0, r0
 800087e:	2501      	movs	r5, #1
 8000880:	1ac9      	subs	r1, r1, r3
 8000882:	4240      	negs	r0, r0
 8000884:	1a09      	subs	r1, r1, r0
 8000886:	020b      	lsls	r3, r1, #8
 8000888:	d400      	bmi.n	800088c <__aeabi_dadd+0x68>
 800088a:	e131      	b.n	8000af0 <__aeabi_dadd+0x2cc>
 800088c:	0249      	lsls	r1, r1, #9
 800088e:	0a4e      	lsrs	r6, r1, #9
 8000890:	2e00      	cmp	r6, #0
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x72>
 8000894:	e16e      	b.n	8000b74 <__aeabi_dadd+0x350>
 8000896:	0030      	movs	r0, r6
 8000898:	f001 fdd0 	bl	800243c <__clzsi2>
 800089c:	0003      	movs	r3, r0
 800089e:	3b08      	subs	r3, #8
 80008a0:	2b1f      	cmp	r3, #31
 80008a2:	dd00      	ble.n	80008a6 <__aeabi_dadd+0x82>
 80008a4:	e161      	b.n	8000b6a <__aeabi_dadd+0x346>
 80008a6:	2220      	movs	r2, #32
 80008a8:	0039      	movs	r1, r7
 80008aa:	1ad2      	subs	r2, r2, r3
 80008ac:	409e      	lsls	r6, r3
 80008ae:	40d1      	lsrs	r1, r2
 80008b0:	409f      	lsls	r7, r3
 80008b2:	430e      	orrs	r6, r1
 80008b4:	429d      	cmp	r5, r3
 80008b6:	dd00      	ble.n	80008ba <__aeabi_dadd+0x96>
 80008b8:	e151      	b.n	8000b5e <__aeabi_dadd+0x33a>
 80008ba:	1b5d      	subs	r5, r3, r5
 80008bc:	1c6b      	adds	r3, r5, #1
 80008be:	2b1f      	cmp	r3, #31
 80008c0:	dd00      	ble.n	80008c4 <__aeabi_dadd+0xa0>
 80008c2:	e17c      	b.n	8000bbe <__aeabi_dadd+0x39a>
 80008c4:	2120      	movs	r1, #32
 80008c6:	1ac9      	subs	r1, r1, r3
 80008c8:	003d      	movs	r5, r7
 80008ca:	0030      	movs	r0, r6
 80008cc:	408f      	lsls	r7, r1
 80008ce:	4088      	lsls	r0, r1
 80008d0:	40dd      	lsrs	r5, r3
 80008d2:	1e79      	subs	r1, r7, #1
 80008d4:	418f      	sbcs	r7, r1
 80008d6:	0031      	movs	r1, r6
 80008d8:	2207      	movs	r2, #7
 80008da:	4328      	orrs	r0, r5
 80008dc:	40d9      	lsrs	r1, r3
 80008de:	2500      	movs	r5, #0
 80008e0:	4307      	orrs	r7, r0
 80008e2:	403a      	ands	r2, r7
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	d009      	beq.n	80008fc <__aeabi_dadd+0xd8>
 80008e8:	230f      	movs	r3, #15
 80008ea:	403b      	ands	r3, r7
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d005      	beq.n	80008fc <__aeabi_dadd+0xd8>
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	42bb      	cmp	r3, r7
 80008f4:	41bf      	sbcs	r7, r7
 80008f6:	427f      	negs	r7, r7
 80008f8:	19c9      	adds	r1, r1, r7
 80008fa:	001f      	movs	r7, r3
 80008fc:	020b      	lsls	r3, r1, #8
 80008fe:	d400      	bmi.n	8000902 <__aeabi_dadd+0xde>
 8000900:	e226      	b.n	8000d50 <__aeabi_dadd+0x52c>
 8000902:	1c6a      	adds	r2, r5, #1
 8000904:	4bc6      	ldr	r3, [pc, #792]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000906:	0555      	lsls	r5, r2, #21
 8000908:	0d6d      	lsrs	r5, r5, #21
 800090a:	429a      	cmp	r2, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0xec>
 800090e:	e106      	b.n	8000b1e <__aeabi_dadd+0x2fa>
 8000910:	4ac4      	ldr	r2, [pc, #784]	; (8000c24 <__aeabi_dadd+0x400>)
 8000912:	08ff      	lsrs	r7, r7, #3
 8000914:	400a      	ands	r2, r1
 8000916:	0753      	lsls	r3, r2, #29
 8000918:	0252      	lsls	r2, r2, #9
 800091a:	433b      	orrs	r3, r7
 800091c:	0b12      	lsrs	r2, r2, #12
 800091e:	e08e      	b.n	8000a3e <__aeabi_dadd+0x21a>
 8000920:	2b00      	cmp	r3, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x102>
 8000924:	e0b8      	b.n	8000a98 <__aeabi_dadd+0x274>
 8000926:	1c6b      	adds	r3, r5, #1
 8000928:	055b      	lsls	r3, r3, #21
 800092a:	0d5b      	lsrs	r3, r3, #21
 800092c:	2b01      	cmp	r3, #1
 800092e:	dc00      	bgt.n	8000932 <__aeabi_dadd+0x10e>
 8000930:	e130      	b.n	8000b94 <__aeabi_dadd+0x370>
 8000932:	1a87      	subs	r7, r0, r2
 8000934:	4643      	mov	r3, r8
 8000936:	42b8      	cmp	r0, r7
 8000938:	41b6      	sbcs	r6, r6
 800093a:	1acb      	subs	r3, r1, r3
 800093c:	4276      	negs	r6, r6
 800093e:	1b9e      	subs	r6, r3, r6
 8000940:	0233      	lsls	r3, r6, #8
 8000942:	d500      	bpl.n	8000946 <__aeabi_dadd+0x122>
 8000944:	e14c      	b.n	8000be0 <__aeabi_dadd+0x3bc>
 8000946:	003b      	movs	r3, r7
 8000948:	4333      	orrs	r3, r6
 800094a:	d1a1      	bne.n	8000890 <__aeabi_dadd+0x6c>
 800094c:	2200      	movs	r2, #0
 800094e:	2400      	movs	r4, #0
 8000950:	2500      	movs	r5, #0
 8000952:	e070      	b.n	8000a36 <__aeabi_dadd+0x212>
 8000954:	2b00      	cmp	r3, #0
 8000956:	dc00      	bgt.n	800095a <__aeabi_dadd+0x136>
 8000958:	e0e5      	b.n	8000b26 <__aeabi_dadd+0x302>
 800095a:	2e00      	cmp	r6, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x13c>
 800095e:	e083      	b.n	8000a68 <__aeabi_dadd+0x244>
 8000960:	4eaf      	ldr	r6, [pc, #700]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000962:	42b5      	cmp	r5, r6
 8000964:	d060      	beq.n	8000a28 <__aeabi_dadd+0x204>
 8000966:	2680      	movs	r6, #128	; 0x80
 8000968:	0436      	lsls	r6, r6, #16
 800096a:	4337      	orrs	r7, r6
 800096c:	46b8      	mov	r8, r7
 800096e:	2b38      	cmp	r3, #56	; 0x38
 8000970:	dc00      	bgt.n	8000974 <__aeabi_dadd+0x150>
 8000972:	e13e      	b.n	8000bf2 <__aeabi_dadd+0x3ce>
 8000974:	4643      	mov	r3, r8
 8000976:	4313      	orrs	r3, r2
 8000978:	001f      	movs	r7, r3
 800097a:	1e7a      	subs	r2, r7, #1
 800097c:	4197      	sbcs	r7, r2
 800097e:	183f      	adds	r7, r7, r0
 8000980:	4287      	cmp	r7, r0
 8000982:	4180      	sbcs	r0, r0
 8000984:	4240      	negs	r0, r0
 8000986:	1809      	adds	r1, r1, r0
 8000988:	020b      	lsls	r3, r1, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x16a>
 800098c:	e0b0      	b.n	8000af0 <__aeabi_dadd+0x2cc>
 800098e:	4ba4      	ldr	r3, [pc, #656]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000990:	3501      	adds	r5, #1
 8000992:	429d      	cmp	r5, r3
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x174>
 8000996:	e0c3      	b.n	8000b20 <__aeabi_dadd+0x2fc>
 8000998:	4aa2      	ldr	r2, [pc, #648]	; (8000c24 <__aeabi_dadd+0x400>)
 800099a:	087b      	lsrs	r3, r7, #1
 800099c:	400a      	ands	r2, r1
 800099e:	2101      	movs	r1, #1
 80009a0:	400f      	ands	r7, r1
 80009a2:	431f      	orrs	r7, r3
 80009a4:	0851      	lsrs	r1, r2, #1
 80009a6:	07d3      	lsls	r3, r2, #31
 80009a8:	2207      	movs	r2, #7
 80009aa:	431f      	orrs	r7, r3
 80009ac:	403a      	ands	r2, r7
 80009ae:	e799      	b.n	80008e4 <__aeabi_dadd+0xc0>
 80009b0:	4e9b      	ldr	r6, [pc, #620]	; (8000c20 <__aeabi_dadd+0x3fc>)
 80009b2:	42b5      	cmp	r5, r6
 80009b4:	d038      	beq.n	8000a28 <__aeabi_dadd+0x204>
 80009b6:	2680      	movs	r6, #128	; 0x80
 80009b8:	0436      	lsls	r6, r6, #16
 80009ba:	4337      	orrs	r7, r6
 80009bc:	46b8      	mov	r8, r7
 80009be:	2b38      	cmp	r3, #56	; 0x38
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dadd+0x1a0>
 80009c2:	e0dc      	b.n	8000b7e <__aeabi_dadd+0x35a>
 80009c4:	2b1f      	cmp	r3, #31
 80009c6:	dc00      	bgt.n	80009ca <__aeabi_dadd+0x1a6>
 80009c8:	e130      	b.n	8000c2c <__aeabi_dadd+0x408>
 80009ca:	001e      	movs	r6, r3
 80009cc:	4647      	mov	r7, r8
 80009ce:	3e20      	subs	r6, #32
 80009d0:	40f7      	lsrs	r7, r6
 80009d2:	46bc      	mov	ip, r7
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d004      	beq.n	80009e2 <__aeabi_dadd+0x1be>
 80009d8:	2640      	movs	r6, #64	; 0x40
 80009da:	1af3      	subs	r3, r6, r3
 80009dc:	4646      	mov	r6, r8
 80009de:	409e      	lsls	r6, r3
 80009e0:	4332      	orrs	r2, r6
 80009e2:	0017      	movs	r7, r2
 80009e4:	4663      	mov	r3, ip
 80009e6:	1e7a      	subs	r2, r7, #1
 80009e8:	4197      	sbcs	r7, r2
 80009ea:	431f      	orrs	r7, r3
 80009ec:	e0cc      	b.n	8000b88 <__aeabi_dadd+0x364>
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x1d0>
 80009f2:	e204      	b.n	8000dfe <__aeabi_dadd+0x5da>
 80009f4:	4643      	mov	r3, r8
 80009f6:	4313      	orrs	r3, r2
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x1d8>
 80009fa:	e159      	b.n	8000cb0 <__aeabi_dadd+0x48c>
 80009fc:	074b      	lsls	r3, r1, #29
 80009fe:	08c0      	lsrs	r0, r0, #3
 8000a00:	4318      	orrs	r0, r3
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	08c9      	lsrs	r1, r1, #3
 8000a06:	031b      	lsls	r3, r3, #12
 8000a08:	4219      	tst	r1, r3
 8000a0a:	d008      	beq.n	8000a1e <__aeabi_dadd+0x1fa>
 8000a0c:	4645      	mov	r5, r8
 8000a0e:	08ed      	lsrs	r5, r5, #3
 8000a10:	421d      	tst	r5, r3
 8000a12:	d104      	bne.n	8000a1e <__aeabi_dadd+0x1fa>
 8000a14:	4643      	mov	r3, r8
 8000a16:	08d0      	lsrs	r0, r2, #3
 8000a18:	0759      	lsls	r1, r3, #29
 8000a1a:	4308      	orrs	r0, r1
 8000a1c:	0029      	movs	r1, r5
 8000a1e:	0f42      	lsrs	r2, r0, #29
 8000a20:	00c9      	lsls	r1, r1, #3
 8000a22:	4d7f      	ldr	r5, [pc, #508]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000a24:	4311      	orrs	r1, r2
 8000a26:	00c0      	lsls	r0, r0, #3
 8000a28:	074b      	lsls	r3, r1, #29
 8000a2a:	08ca      	lsrs	r2, r1, #3
 8000a2c:	497c      	ldr	r1, [pc, #496]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000a2e:	08c0      	lsrs	r0, r0, #3
 8000a30:	4303      	orrs	r3, r0
 8000a32:	428d      	cmp	r5, r1
 8000a34:	d068      	beq.n	8000b08 <__aeabi_dadd+0x2e4>
 8000a36:	0312      	lsls	r2, r2, #12
 8000a38:	056d      	lsls	r5, r5, #21
 8000a3a:	0b12      	lsrs	r2, r2, #12
 8000a3c:	0d6d      	lsrs	r5, r5, #21
 8000a3e:	2100      	movs	r1, #0
 8000a40:	0312      	lsls	r2, r2, #12
 8000a42:	0018      	movs	r0, r3
 8000a44:	0b13      	lsrs	r3, r2, #12
 8000a46:	0d0a      	lsrs	r2, r1, #20
 8000a48:	0512      	lsls	r2, r2, #20
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	4b76      	ldr	r3, [pc, #472]	; (8000c28 <__aeabi_dadd+0x404>)
 8000a4e:	052d      	lsls	r5, r5, #20
 8000a50:	4013      	ands	r3, r2
 8000a52:	432b      	orrs	r3, r5
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	07e4      	lsls	r4, r4, #31
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	4323      	orrs	r3, r4
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	bc1c      	pop	{r2, r3, r4}
 8000a60:	4690      	mov	r8, r2
 8000a62:	4699      	mov	r9, r3
 8000a64:	46a2      	mov	sl, r4
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a68:	003e      	movs	r6, r7
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	d012      	beq.n	8000a94 <__aeabi_dadd+0x270>
 8000a6e:	1e5e      	subs	r6, r3, #1
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d000      	beq.n	8000a76 <__aeabi_dadd+0x252>
 8000a74:	e100      	b.n	8000c78 <__aeabi_dadd+0x454>
 8000a76:	1887      	adds	r7, r0, r2
 8000a78:	4287      	cmp	r7, r0
 8000a7a:	4180      	sbcs	r0, r0
 8000a7c:	4441      	add	r1, r8
 8000a7e:	4240      	negs	r0, r0
 8000a80:	1809      	adds	r1, r1, r0
 8000a82:	2501      	movs	r5, #1
 8000a84:	020b      	lsls	r3, r1, #8
 8000a86:	d533      	bpl.n	8000af0 <__aeabi_dadd+0x2cc>
 8000a88:	2502      	movs	r5, #2
 8000a8a:	e785      	b.n	8000998 <__aeabi_dadd+0x174>
 8000a8c:	4664      	mov	r4, ip
 8000a8e:	0033      	movs	r3, r6
 8000a90:	4641      	mov	r1, r8
 8000a92:	0010      	movs	r0, r2
 8000a94:	001d      	movs	r5, r3
 8000a96:	e7c7      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_dadd+0x27a>
 8000a9c:	e0da      	b.n	8000c54 <__aeabi_dadd+0x430>
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	4304      	orrs	r4, r0
 8000aa2:	d0f3      	beq.n	8000a8c <__aeabi_dadd+0x268>
 8000aa4:	1c5c      	adds	r4, r3, #1
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x286>
 8000aa8:	e19f      	b.n	8000dea <__aeabi_dadd+0x5c6>
 8000aaa:	4c5d      	ldr	r4, [pc, #372]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000aac:	42a6      	cmp	r6, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x28e>
 8000ab0:	e12f      	b.n	8000d12 <__aeabi_dadd+0x4ee>
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	2b38      	cmp	r3, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x296>
 8000ab8:	e166      	b.n	8000d88 <__aeabi_dadd+0x564>
 8000aba:	2b1f      	cmp	r3, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x29c>
 8000abe:	e183      	b.n	8000dc8 <__aeabi_dadd+0x5a4>
 8000ac0:	2420      	movs	r4, #32
 8000ac2:	0005      	movs	r5, r0
 8000ac4:	1ae4      	subs	r4, r4, r3
 8000ac6:	000f      	movs	r7, r1
 8000ac8:	40dd      	lsrs	r5, r3
 8000aca:	40d9      	lsrs	r1, r3
 8000acc:	40a0      	lsls	r0, r4
 8000ace:	4643      	mov	r3, r8
 8000ad0:	40a7      	lsls	r7, r4
 8000ad2:	1a5b      	subs	r3, r3, r1
 8000ad4:	1e44      	subs	r4, r0, #1
 8000ad6:	41a0      	sbcs	r0, r4
 8000ad8:	4698      	mov	r8, r3
 8000ada:	432f      	orrs	r7, r5
 8000adc:	4338      	orrs	r0, r7
 8000ade:	1a17      	subs	r7, r2, r0
 8000ae0:	42ba      	cmp	r2, r7
 8000ae2:	4192      	sbcs	r2, r2
 8000ae4:	4643      	mov	r3, r8
 8000ae6:	4252      	negs	r2, r2
 8000ae8:	1a99      	subs	r1, r3, r2
 8000aea:	4664      	mov	r4, ip
 8000aec:	0035      	movs	r5, r6
 8000aee:	e6ca      	b.n	8000886 <__aeabi_dadd+0x62>
 8000af0:	2207      	movs	r2, #7
 8000af2:	403a      	ands	r2, r7
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x2d6>
 8000af8:	e6f6      	b.n	80008e8 <__aeabi_dadd+0xc4>
 8000afa:	074b      	lsls	r3, r1, #29
 8000afc:	08ca      	lsrs	r2, r1, #3
 8000afe:	4948      	ldr	r1, [pc, #288]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000b00:	08ff      	lsrs	r7, r7, #3
 8000b02:	433b      	orrs	r3, r7
 8000b04:	428d      	cmp	r5, r1
 8000b06:	d196      	bne.n	8000a36 <__aeabi_dadd+0x212>
 8000b08:	0019      	movs	r1, r3
 8000b0a:	4311      	orrs	r1, r2
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x2ec>
 8000b0e:	e19e      	b.n	8000e4e <__aeabi_dadd+0x62a>
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	0309      	lsls	r1, r1, #12
 8000b14:	430a      	orrs	r2, r1
 8000b16:	0312      	lsls	r2, r2, #12
 8000b18:	0b12      	lsrs	r2, r2, #12
 8000b1a:	4d41      	ldr	r5, [pc, #260]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000b1c:	e78f      	b.n	8000a3e <__aeabi_dadd+0x21a>
 8000b1e:	0015      	movs	r5, r2
 8000b20:	2200      	movs	r2, #0
 8000b22:	2300      	movs	r3, #0
 8000b24:	e78b      	b.n	8000a3e <__aeabi_dadd+0x21a>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d000      	beq.n	8000b2c <__aeabi_dadd+0x308>
 8000b2a:	e0c7      	b.n	8000cbc <__aeabi_dadd+0x498>
 8000b2c:	1c6b      	adds	r3, r5, #1
 8000b2e:	055f      	lsls	r7, r3, #21
 8000b30:	0d7f      	lsrs	r7, r7, #21
 8000b32:	2f01      	cmp	r7, #1
 8000b34:	dc00      	bgt.n	8000b38 <__aeabi_dadd+0x314>
 8000b36:	e0f1      	b.n	8000d1c <__aeabi_dadd+0x4f8>
 8000b38:	4d39      	ldr	r5, [pc, #228]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000b3a:	42ab      	cmp	r3, r5
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x31c>
 8000b3e:	e0b9      	b.n	8000cb4 <__aeabi_dadd+0x490>
 8000b40:	1885      	adds	r5, r0, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	4285      	cmp	r5, r0
 8000b46:	4189      	sbcs	r1, r1
 8000b48:	4442      	add	r2, r8
 8000b4a:	4249      	negs	r1, r1
 8000b4c:	1851      	adds	r1, r2, r1
 8000b4e:	2207      	movs	r2, #7
 8000b50:	07cf      	lsls	r7, r1, #31
 8000b52:	086d      	lsrs	r5, r5, #1
 8000b54:	432f      	orrs	r7, r5
 8000b56:	0849      	lsrs	r1, r1, #1
 8000b58:	403a      	ands	r2, r7
 8000b5a:	001d      	movs	r5, r3
 8000b5c:	e6c2      	b.n	80008e4 <__aeabi_dadd+0xc0>
 8000b5e:	2207      	movs	r2, #7
 8000b60:	4930      	ldr	r1, [pc, #192]	; (8000c24 <__aeabi_dadd+0x400>)
 8000b62:	1aed      	subs	r5, r5, r3
 8000b64:	4031      	ands	r1, r6
 8000b66:	403a      	ands	r2, r7
 8000b68:	e6bc      	b.n	80008e4 <__aeabi_dadd+0xc0>
 8000b6a:	003e      	movs	r6, r7
 8000b6c:	3828      	subs	r0, #40	; 0x28
 8000b6e:	4086      	lsls	r6, r0
 8000b70:	2700      	movs	r7, #0
 8000b72:	e69f      	b.n	80008b4 <__aeabi_dadd+0x90>
 8000b74:	0038      	movs	r0, r7
 8000b76:	f001 fc61 	bl	800243c <__clzsi2>
 8000b7a:	3020      	adds	r0, #32
 8000b7c:	e68e      	b.n	800089c <__aeabi_dadd+0x78>
 8000b7e:	4643      	mov	r3, r8
 8000b80:	4313      	orrs	r3, r2
 8000b82:	001f      	movs	r7, r3
 8000b84:	1e7a      	subs	r2, r7, #1
 8000b86:	4197      	sbcs	r7, r2
 8000b88:	1bc7      	subs	r7, r0, r7
 8000b8a:	42b8      	cmp	r0, r7
 8000b8c:	4180      	sbcs	r0, r0
 8000b8e:	4240      	negs	r0, r0
 8000b90:	1a09      	subs	r1, r1, r0
 8000b92:	e678      	b.n	8000886 <__aeabi_dadd+0x62>
 8000b94:	000e      	movs	r6, r1
 8000b96:	003b      	movs	r3, r7
 8000b98:	4306      	orrs	r6, r0
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d161      	bne.n	8000c64 <__aeabi_dadd+0x440>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_dadd+0x382>
 8000ba4:	e0f4      	b.n	8000d90 <__aeabi_dadd+0x56c>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x388>
 8000baa:	e11b      	b.n	8000de4 <__aeabi_dadd+0x5c0>
 8000bac:	4664      	mov	r4, ip
 8000bae:	0039      	movs	r1, r7
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	e739      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000bb4:	4f1a      	ldr	r7, [pc, #104]	; (8000c20 <__aeabi_dadd+0x3fc>)
 8000bb6:	42bb      	cmp	r3, r7
 8000bb8:	d07a      	beq.n	8000cb0 <__aeabi_dadd+0x48c>
 8000bba:	0033      	movs	r3, r6
 8000bbc:	e6ff      	b.n	80009be <__aeabi_dadd+0x19a>
 8000bbe:	0030      	movs	r0, r6
 8000bc0:	3d1f      	subs	r5, #31
 8000bc2:	40e8      	lsrs	r0, r5
 8000bc4:	2b20      	cmp	r3, #32
 8000bc6:	d003      	beq.n	8000bd0 <__aeabi_dadd+0x3ac>
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	1acb      	subs	r3, r1, r3
 8000bcc:	409e      	lsls	r6, r3
 8000bce:	4337      	orrs	r7, r6
 8000bd0:	1e7b      	subs	r3, r7, #1
 8000bd2:	419f      	sbcs	r7, r3
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	4307      	orrs	r7, r0
 8000bd8:	403a      	ands	r2, r7
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2500      	movs	r5, #0
 8000bde:	e789      	b.n	8000af4 <__aeabi_dadd+0x2d0>
 8000be0:	1a17      	subs	r7, r2, r0
 8000be2:	4643      	mov	r3, r8
 8000be4:	42ba      	cmp	r2, r7
 8000be6:	41b6      	sbcs	r6, r6
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	4276      	negs	r6, r6
 8000bec:	1b8e      	subs	r6, r1, r6
 8000bee:	4664      	mov	r4, ip
 8000bf0:	e64e      	b.n	8000890 <__aeabi_dadd+0x6c>
 8000bf2:	2b1f      	cmp	r3, #31
 8000bf4:	dd00      	ble.n	8000bf8 <__aeabi_dadd+0x3d4>
 8000bf6:	e0ad      	b.n	8000d54 <__aeabi_dadd+0x530>
 8000bf8:	2620      	movs	r6, #32
 8000bfa:	4647      	mov	r7, r8
 8000bfc:	1af6      	subs	r6, r6, r3
 8000bfe:	40b7      	lsls	r7, r6
 8000c00:	46b9      	mov	r9, r7
 8000c02:	0017      	movs	r7, r2
 8000c04:	46b2      	mov	sl, r6
 8000c06:	40df      	lsrs	r7, r3
 8000c08:	464e      	mov	r6, r9
 8000c0a:	433e      	orrs	r6, r7
 8000c0c:	0037      	movs	r7, r6
 8000c0e:	4656      	mov	r6, sl
 8000c10:	40b2      	lsls	r2, r6
 8000c12:	1e56      	subs	r6, r2, #1
 8000c14:	41b2      	sbcs	r2, r6
 8000c16:	4317      	orrs	r7, r2
 8000c18:	4642      	mov	r2, r8
 8000c1a:	40da      	lsrs	r2, r3
 8000c1c:	1889      	adds	r1, r1, r2
 8000c1e:	e6ae      	b.n	800097e <__aeabi_dadd+0x15a>
 8000c20:	000007ff 	.word	0x000007ff
 8000c24:	ff7fffff 	.word	0xff7fffff
 8000c28:	800fffff 	.word	0x800fffff
 8000c2c:	2620      	movs	r6, #32
 8000c2e:	4647      	mov	r7, r8
 8000c30:	1af6      	subs	r6, r6, r3
 8000c32:	40b7      	lsls	r7, r6
 8000c34:	46b9      	mov	r9, r7
 8000c36:	0017      	movs	r7, r2
 8000c38:	46b2      	mov	sl, r6
 8000c3a:	40df      	lsrs	r7, r3
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	433e      	orrs	r6, r7
 8000c40:	0037      	movs	r7, r6
 8000c42:	4656      	mov	r6, sl
 8000c44:	40b2      	lsls	r2, r6
 8000c46:	1e56      	subs	r6, r2, #1
 8000c48:	41b2      	sbcs	r2, r6
 8000c4a:	4317      	orrs	r7, r2
 8000c4c:	4642      	mov	r2, r8
 8000c4e:	40da      	lsrs	r2, r3
 8000c50:	1a89      	subs	r1, r1, r2
 8000c52:	e799      	b.n	8000b88 <__aeabi_dadd+0x364>
 8000c54:	4c7f      	ldr	r4, [pc, #508]	; (8000e54 <__aeabi_dadd+0x630>)
 8000c56:	42a6      	cmp	r6, r4
 8000c58:	d05b      	beq.n	8000d12 <__aeabi_dadd+0x4ee>
 8000c5a:	2480      	movs	r4, #128	; 0x80
 8000c5c:	0424      	lsls	r4, r4, #16
 8000c5e:	425b      	negs	r3, r3
 8000c60:	4321      	orrs	r1, r4
 8000c62:	e727      	b.n	8000ab4 <__aeabi_dadd+0x290>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d10c      	bne.n	8000c82 <__aeabi_dadd+0x45e>
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x44a>
 8000c6c:	e0cb      	b.n	8000e06 <__aeabi_dadd+0x5e2>
 8000c6e:	4664      	mov	r4, ip
 8000c70:	0039      	movs	r1, r7
 8000c72:	0010      	movs	r0, r2
 8000c74:	4d77      	ldr	r5, [pc, #476]	; (8000e54 <__aeabi_dadd+0x630>)
 8000c76:	e6d7      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000c78:	4f76      	ldr	r7, [pc, #472]	; (8000e54 <__aeabi_dadd+0x630>)
 8000c7a:	42bb      	cmp	r3, r7
 8000c7c:	d018      	beq.n	8000cb0 <__aeabi_dadd+0x48c>
 8000c7e:	0033      	movs	r3, r6
 8000c80:	e675      	b.n	800096e <__aeabi_dadd+0x14a>
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d014      	beq.n	8000cb0 <__aeabi_dadd+0x48c>
 8000c86:	074b      	lsls	r3, r1, #29
 8000c88:	08c0      	lsrs	r0, r0, #3
 8000c8a:	4318      	orrs	r0, r3
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	031b      	lsls	r3, r3, #12
 8000c92:	4219      	tst	r1, r3
 8000c94:	d007      	beq.n	8000ca6 <__aeabi_dadd+0x482>
 8000c96:	08fc      	lsrs	r4, r7, #3
 8000c98:	421c      	tst	r4, r3
 8000c9a:	d104      	bne.n	8000ca6 <__aeabi_dadd+0x482>
 8000c9c:	0779      	lsls	r1, r7, #29
 8000c9e:	08d0      	lsrs	r0, r2, #3
 8000ca0:	4308      	orrs	r0, r1
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	0021      	movs	r1, r4
 8000ca6:	464c      	mov	r4, r9
 8000ca8:	0f42      	lsrs	r2, r0, #29
 8000caa:	00c9      	lsls	r1, r1, #3
 8000cac:	4311      	orrs	r1, r2
 8000cae:	00c0      	lsls	r0, r0, #3
 8000cb0:	4d68      	ldr	r5, [pc, #416]	; (8000e54 <__aeabi_dadd+0x630>)
 8000cb2:	e6b9      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000cb4:	001d      	movs	r5, r3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e6c0      	b.n	8000a3e <__aeabi_dadd+0x21a>
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d15b      	bne.n	8000d78 <__aeabi_dadd+0x554>
 8000cc0:	000d      	movs	r5, r1
 8000cc2:	4305      	orrs	r5, r0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x4a4>
 8000cc6:	e6e2      	b.n	8000a8e <__aeabi_dadd+0x26a>
 8000cc8:	1c5d      	adds	r5, r3, #1
 8000cca:	d100      	bne.n	8000cce <__aeabi_dadd+0x4aa>
 8000ccc:	e0b0      	b.n	8000e30 <__aeabi_dadd+0x60c>
 8000cce:	4d61      	ldr	r5, [pc, #388]	; (8000e54 <__aeabi_dadd+0x630>)
 8000cd0:	42ae      	cmp	r6, r5
 8000cd2:	d01f      	beq.n	8000d14 <__aeabi_dadd+0x4f0>
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	2b38      	cmp	r3, #56	; 0x38
 8000cd8:	dc71      	bgt.n	8000dbe <__aeabi_dadd+0x59a>
 8000cda:	2b1f      	cmp	r3, #31
 8000cdc:	dd00      	ble.n	8000ce0 <__aeabi_dadd+0x4bc>
 8000cde:	e096      	b.n	8000e0e <__aeabi_dadd+0x5ea>
 8000ce0:	2520      	movs	r5, #32
 8000ce2:	000f      	movs	r7, r1
 8000ce4:	1aed      	subs	r5, r5, r3
 8000ce6:	40af      	lsls	r7, r5
 8000ce8:	46b9      	mov	r9, r7
 8000cea:	0007      	movs	r7, r0
 8000cec:	46aa      	mov	sl, r5
 8000cee:	40df      	lsrs	r7, r3
 8000cf0:	464d      	mov	r5, r9
 8000cf2:	433d      	orrs	r5, r7
 8000cf4:	002f      	movs	r7, r5
 8000cf6:	4655      	mov	r5, sl
 8000cf8:	40a8      	lsls	r0, r5
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	1e45      	subs	r5, r0, #1
 8000cfe:	41a8      	sbcs	r0, r5
 8000d00:	4488      	add	r8, r1
 8000d02:	4307      	orrs	r7, r0
 8000d04:	18bf      	adds	r7, r7, r2
 8000d06:	4297      	cmp	r7, r2
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	4251      	negs	r1, r2
 8000d0c:	4441      	add	r1, r8
 8000d0e:	0035      	movs	r5, r6
 8000d10:	e63a      	b.n	8000988 <__aeabi_dadd+0x164>
 8000d12:	4664      	mov	r4, ip
 8000d14:	0035      	movs	r5, r6
 8000d16:	4641      	mov	r1, r8
 8000d18:	0010      	movs	r0, r2
 8000d1a:	e685      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000d1c:	000b      	movs	r3, r1
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dadd+0x502>
 8000d24:	e663      	b.n	80009ee <__aeabi_dadd+0x1ca>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f5      	beq.n	8000d16 <__aeabi_dadd+0x4f2>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x50e>
 8000d30:	e67a      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000d32:	1887      	adds	r7, r0, r2
 8000d34:	4287      	cmp	r7, r0
 8000d36:	4180      	sbcs	r0, r0
 8000d38:	2207      	movs	r2, #7
 8000d3a:	4441      	add	r1, r8
 8000d3c:	4240      	negs	r0, r0
 8000d3e:	1809      	adds	r1, r1, r0
 8000d40:	403a      	ands	r2, r7
 8000d42:	020b      	lsls	r3, r1, #8
 8000d44:	d400      	bmi.n	8000d48 <__aeabi_dadd+0x524>
 8000d46:	e6d5      	b.n	8000af4 <__aeabi_dadd+0x2d0>
 8000d48:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <__aeabi_dadd+0x634>)
 8000d4a:	3501      	adds	r5, #1
 8000d4c:	4019      	ands	r1, r3
 8000d4e:	e5c9      	b.n	80008e4 <__aeabi_dadd+0xc0>
 8000d50:	0038      	movs	r0, r7
 8000d52:	e669      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000d54:	001e      	movs	r6, r3
 8000d56:	4647      	mov	r7, r8
 8000d58:	3e20      	subs	r6, #32
 8000d5a:	40f7      	lsrs	r7, r6
 8000d5c:	46bc      	mov	ip, r7
 8000d5e:	2b20      	cmp	r3, #32
 8000d60:	d004      	beq.n	8000d6c <__aeabi_dadd+0x548>
 8000d62:	2640      	movs	r6, #64	; 0x40
 8000d64:	1af3      	subs	r3, r6, r3
 8000d66:	4646      	mov	r6, r8
 8000d68:	409e      	lsls	r6, r3
 8000d6a:	4332      	orrs	r2, r6
 8000d6c:	0017      	movs	r7, r2
 8000d6e:	4663      	mov	r3, ip
 8000d70:	1e7a      	subs	r2, r7, #1
 8000d72:	4197      	sbcs	r7, r2
 8000d74:	431f      	orrs	r7, r3
 8000d76:	e602      	b.n	800097e <__aeabi_dadd+0x15a>
 8000d78:	4d36      	ldr	r5, [pc, #216]	; (8000e54 <__aeabi_dadd+0x630>)
 8000d7a:	42ae      	cmp	r6, r5
 8000d7c:	d0ca      	beq.n	8000d14 <__aeabi_dadd+0x4f0>
 8000d7e:	2580      	movs	r5, #128	; 0x80
 8000d80:	042d      	lsls	r5, r5, #16
 8000d82:	425b      	negs	r3, r3
 8000d84:	4329      	orrs	r1, r5
 8000d86:	e7a6      	b.n	8000cd6 <__aeabi_dadd+0x4b2>
 8000d88:	4308      	orrs	r0, r1
 8000d8a:	1e41      	subs	r1, r0, #1
 8000d8c:	4188      	sbcs	r0, r1
 8000d8e:	e6a6      	b.n	8000ade <__aeabi_dadd+0x2ba>
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x572>
 8000d94:	e648      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000d96:	1a87      	subs	r7, r0, r2
 8000d98:	4643      	mov	r3, r8
 8000d9a:	42b8      	cmp	r0, r7
 8000d9c:	41b6      	sbcs	r6, r6
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	4276      	negs	r6, r6
 8000da2:	1b9e      	subs	r6, r3, r6
 8000da4:	0233      	lsls	r3, r6, #8
 8000da6:	d54b      	bpl.n	8000e40 <__aeabi_dadd+0x61c>
 8000da8:	1a17      	subs	r7, r2, r0
 8000daa:	4643      	mov	r3, r8
 8000dac:	42ba      	cmp	r2, r7
 8000dae:	4192      	sbcs	r2, r2
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	4252      	negs	r2, r2
 8000db4:	1a89      	subs	r1, r1, r2
 8000db6:	2207      	movs	r2, #7
 8000db8:	4664      	mov	r4, ip
 8000dba:	403a      	ands	r2, r7
 8000dbc:	e592      	b.n	80008e4 <__aeabi_dadd+0xc0>
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	000f      	movs	r7, r1
 8000dc2:	1e79      	subs	r1, r7, #1
 8000dc4:	418f      	sbcs	r7, r1
 8000dc6:	e79d      	b.n	8000d04 <__aeabi_dadd+0x4e0>
 8000dc8:	001c      	movs	r4, r3
 8000dca:	000f      	movs	r7, r1
 8000dcc:	3c20      	subs	r4, #32
 8000dce:	40e7      	lsrs	r7, r4
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	d003      	beq.n	8000ddc <__aeabi_dadd+0x5b8>
 8000dd4:	2440      	movs	r4, #64	; 0x40
 8000dd6:	1ae3      	subs	r3, r4, r3
 8000dd8:	4099      	lsls	r1, r3
 8000dda:	4308      	orrs	r0, r1
 8000ddc:	1e41      	subs	r1, r0, #1
 8000dde:	4188      	sbcs	r0, r1
 8000de0:	4338      	orrs	r0, r7
 8000de2:	e67c      	b.n	8000ade <__aeabi_dadd+0x2ba>
 8000de4:	2200      	movs	r2, #0
 8000de6:	2400      	movs	r4, #0
 8000de8:	e625      	b.n	8000a36 <__aeabi_dadd+0x212>
 8000dea:	1a17      	subs	r7, r2, r0
 8000dec:	4643      	mov	r3, r8
 8000dee:	42ba      	cmp	r2, r7
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	1a59      	subs	r1, r3, r1
 8000df4:	4252      	negs	r2, r2
 8000df6:	1a89      	subs	r1, r1, r2
 8000df8:	4664      	mov	r4, ip
 8000dfa:	0035      	movs	r5, r6
 8000dfc:	e543      	b.n	8000886 <__aeabi_dadd+0x62>
 8000dfe:	4641      	mov	r1, r8
 8000e00:	0010      	movs	r0, r2
 8000e02:	4d14      	ldr	r5, [pc, #80]	; (8000e54 <__aeabi_dadd+0x630>)
 8000e04:	e610      	b.n	8000a28 <__aeabi_dadd+0x204>
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	2400      	movs	r4, #0
 8000e0a:	0312      	lsls	r2, r2, #12
 8000e0c:	e680      	b.n	8000b10 <__aeabi_dadd+0x2ec>
 8000e0e:	001d      	movs	r5, r3
 8000e10:	000f      	movs	r7, r1
 8000e12:	3d20      	subs	r5, #32
 8000e14:	40ef      	lsrs	r7, r5
 8000e16:	46bc      	mov	ip, r7
 8000e18:	2b20      	cmp	r3, #32
 8000e1a:	d003      	beq.n	8000e24 <__aeabi_dadd+0x600>
 8000e1c:	2540      	movs	r5, #64	; 0x40
 8000e1e:	1aeb      	subs	r3, r5, r3
 8000e20:	4099      	lsls	r1, r3
 8000e22:	4308      	orrs	r0, r1
 8000e24:	0007      	movs	r7, r0
 8000e26:	4663      	mov	r3, ip
 8000e28:	1e78      	subs	r0, r7, #1
 8000e2a:	4187      	sbcs	r7, r0
 8000e2c:	431f      	orrs	r7, r3
 8000e2e:	e769      	b.n	8000d04 <__aeabi_dadd+0x4e0>
 8000e30:	1887      	adds	r7, r0, r2
 8000e32:	4297      	cmp	r7, r2
 8000e34:	419b      	sbcs	r3, r3
 8000e36:	4441      	add	r1, r8
 8000e38:	425b      	negs	r3, r3
 8000e3a:	18c9      	adds	r1, r1, r3
 8000e3c:	0035      	movs	r5, r6
 8000e3e:	e5a3      	b.n	8000988 <__aeabi_dadd+0x164>
 8000e40:	003b      	movs	r3, r7
 8000e42:	4333      	orrs	r3, r6
 8000e44:	d0ce      	beq.n	8000de4 <__aeabi_dadd+0x5c0>
 8000e46:	2207      	movs	r2, #7
 8000e48:	0031      	movs	r1, r6
 8000e4a:	403a      	ands	r2, r7
 8000e4c:	e652      	b.n	8000af4 <__aeabi_dadd+0x2d0>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	001a      	movs	r2, r3
 8000e52:	e5f4      	b.n	8000a3e <__aeabi_dadd+0x21a>
 8000e54:	000007ff 	.word	0x000007ff
 8000e58:	ff7fffff 	.word	0xff7fffff

08000e5c <__aeabi_ddiv>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	4657      	mov	r7, sl
 8000e60:	46de      	mov	lr, fp
 8000e62:	464e      	mov	r6, r9
 8000e64:	4645      	mov	r5, r8
 8000e66:	b5e0      	push	{r5, r6, r7, lr}
 8000e68:	4683      	mov	fp, r0
 8000e6a:	0007      	movs	r7, r0
 8000e6c:	030e      	lsls	r6, r1, #12
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	b085      	sub	sp, #20
 8000e72:	4692      	mov	sl, r2
 8000e74:	001c      	movs	r4, r3
 8000e76:	0b36      	lsrs	r6, r6, #12
 8000e78:	0d40      	lsrs	r0, r0, #21
 8000e7a:	0fcd      	lsrs	r5, r1, #31
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_ddiv+0x26>
 8000e80:	e09d      	b.n	8000fbe <__aeabi_ddiv+0x162>
 8000e82:	4b95      	ldr	r3, [pc, #596]	; (80010d8 <__aeabi_ddiv+0x27c>)
 8000e84:	4298      	cmp	r0, r3
 8000e86:	d039      	beq.n	8000efc <__aeabi_ddiv+0xa0>
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	00f6      	lsls	r6, r6, #3
 8000e8c:	041b      	lsls	r3, r3, #16
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	4a92      	ldr	r2, [pc, #584]	; (80010dc <__aeabi_ddiv+0x280>)
 8000e92:	0f7b      	lsrs	r3, r7, #29
 8000e94:	4333      	orrs	r3, r6
 8000e96:	4699      	mov	r9, r3
 8000e98:	4694      	mov	ip, r2
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	4463      	add	r3, ip
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	00ff      	lsls	r7, r7, #3
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	0323      	lsls	r3, r4, #12
 8000eaa:	0b1b      	lsrs	r3, r3, #12
 8000eac:	4698      	mov	r8, r3
 8000eae:	0063      	lsls	r3, r4, #1
 8000eb0:	0fe4      	lsrs	r4, r4, #31
 8000eb2:	4652      	mov	r2, sl
 8000eb4:	0d5b      	lsrs	r3, r3, #21
 8000eb6:	9401      	str	r4, [sp, #4]
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_ddiv+0x60>
 8000eba:	e0b3      	b.n	8001024 <__aeabi_ddiv+0x1c8>
 8000ebc:	4986      	ldr	r1, [pc, #536]	; (80010d8 <__aeabi_ddiv+0x27c>)
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_ddiv+0x68>
 8000ec2:	e09e      	b.n	8001002 <__aeabi_ddiv+0x1a6>
 8000ec4:	4642      	mov	r2, r8
 8000ec6:	00d1      	lsls	r1, r2, #3
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	0412      	lsls	r2, r2, #16
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	4651      	mov	r1, sl
 8000ed0:	0f49      	lsrs	r1, r1, #29
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	468b      	mov	fp, r1
 8000ed6:	4981      	ldr	r1, [pc, #516]	; (80010dc <__aeabi_ddiv+0x280>)
 8000ed8:	4652      	mov	r2, sl
 8000eda:	468c      	mov	ip, r1
 8000edc:	9900      	ldr	r1, [sp, #0]
 8000ede:	4463      	add	r3, ip
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	002b      	movs	r3, r5
 8000eea:	4063      	eors	r3, r4
 8000eec:	469a      	mov	sl, r3
 8000eee:	2e0f      	cmp	r6, #15
 8000ef0:	d900      	bls.n	8000ef4 <__aeabi_ddiv+0x98>
 8000ef2:	e105      	b.n	8001100 <__aeabi_ddiv+0x2a4>
 8000ef4:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <__aeabi_ddiv+0x284>)
 8000ef6:	00b6      	lsls	r6, r6, #2
 8000ef8:	599b      	ldr	r3, [r3, r6]
 8000efa:	469f      	mov	pc, r3
 8000efc:	465b      	mov	r3, fp
 8000efe:	4333      	orrs	r3, r6
 8000f00:	4699      	mov	r9, r3
 8000f02:	d000      	beq.n	8000f06 <__aeabi_ddiv+0xaa>
 8000f04:	e0b8      	b.n	8001078 <__aeabi_ddiv+0x21c>
 8000f06:	2302      	movs	r3, #2
 8000f08:	2608      	movs	r6, #8
 8000f0a:	2700      	movs	r7, #0
 8000f0c:	9000      	str	r0, [sp, #0]
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	e7ca      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8000f12:	46cb      	mov	fp, r9
 8000f14:	003a      	movs	r2, r7
 8000f16:	9902      	ldr	r1, [sp, #8]
 8000f18:	9501      	str	r5, [sp, #4]
 8000f1a:	9b01      	ldr	r3, [sp, #4]
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	2902      	cmp	r1, #2
 8000f20:	d027      	beq.n	8000f72 <__aeabi_ddiv+0x116>
 8000f22:	2903      	cmp	r1, #3
 8000f24:	d100      	bne.n	8000f28 <__aeabi_ddiv+0xcc>
 8000f26:	e280      	b.n	800142a <__aeabi_ddiv+0x5ce>
 8000f28:	2901      	cmp	r1, #1
 8000f2a:	d044      	beq.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000f2c:	496d      	ldr	r1, [pc, #436]	; (80010e4 <__aeabi_ddiv+0x288>)
 8000f2e:	9b00      	ldr	r3, [sp, #0]
 8000f30:	468c      	mov	ip, r1
 8000f32:	4463      	add	r3, ip
 8000f34:	001c      	movs	r4, r3
 8000f36:	2c00      	cmp	r4, #0
 8000f38:	dd38      	ble.n	8000fac <__aeabi_ddiv+0x150>
 8000f3a:	0753      	lsls	r3, r2, #29
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_ddiv+0xe4>
 8000f3e:	e213      	b.n	8001368 <__aeabi_ddiv+0x50c>
 8000f40:	08d2      	lsrs	r2, r2, #3
 8000f42:	465b      	mov	r3, fp
 8000f44:	01db      	lsls	r3, r3, #7
 8000f46:	d509      	bpl.n	8000f5c <__aeabi_ddiv+0x100>
 8000f48:	4659      	mov	r1, fp
 8000f4a:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <__aeabi_ddiv+0x28c>)
 8000f4c:	4019      	ands	r1, r3
 8000f4e:	468b      	mov	fp, r1
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	00c9      	lsls	r1, r1, #3
 8000f54:	468c      	mov	ip, r1
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	4463      	add	r3, ip
 8000f5a:	001c      	movs	r4, r3
 8000f5c:	4b63      	ldr	r3, [pc, #396]	; (80010ec <__aeabi_ddiv+0x290>)
 8000f5e:	429c      	cmp	r4, r3
 8000f60:	dc07      	bgt.n	8000f72 <__aeabi_ddiv+0x116>
 8000f62:	465b      	mov	r3, fp
 8000f64:	0564      	lsls	r4, r4, #21
 8000f66:	075f      	lsls	r7, r3, #29
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	4317      	orrs	r7, r2
 8000f6c:	0b1b      	lsrs	r3, r3, #12
 8000f6e:	0d62      	lsrs	r2, r4, #21
 8000f70:	e002      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 8000f72:	2300      	movs	r3, #0
 8000f74:	2700      	movs	r7, #0
 8000f76:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <__aeabi_ddiv+0x27c>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	031b      	lsls	r3, r3, #12
 8000f7c:	0b1c      	lsrs	r4, r3, #12
 8000f7e:	0d0b      	lsrs	r3, r1, #20
 8000f80:	051b      	lsls	r3, r3, #20
 8000f82:	4323      	orrs	r3, r4
 8000f84:	0514      	lsls	r4, r2, #20
 8000f86:	4a5a      	ldr	r2, [pc, #360]	; (80010f0 <__aeabi_ddiv+0x294>)
 8000f88:	0038      	movs	r0, r7
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	431c      	orrs	r4, r3
 8000f8e:	4653      	mov	r3, sl
 8000f90:	0064      	lsls	r4, r4, #1
 8000f92:	07db      	lsls	r3, r3, #31
 8000f94:	0864      	lsrs	r4, r4, #1
 8000f96:	431c      	orrs	r4, r3
 8000f98:	0021      	movs	r1, r4
 8000f9a:	b005      	add	sp, #20
 8000f9c:	bc3c      	pop	{r2, r3, r4, r5}
 8000f9e:	4690      	mov	r8, r2
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	46a2      	mov	sl, r4
 8000fa4:	46ab      	mov	fp, r5
 8000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4252      	negs	r2, r2
 8000fac:	2301      	movs	r3, #1
 8000fae:	1b1b      	subs	r3, r3, r4
 8000fb0:	2b38      	cmp	r3, #56	; 0x38
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000fb4:	e1ad      	b.n	8001312 <__aeabi_ddiv+0x4b6>
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2700      	movs	r7, #0
 8000fbc:	e7dc      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 8000fbe:	465b      	mov	r3, fp
 8000fc0:	4333      	orrs	r3, r6
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	d05e      	beq.n	8001084 <__aeabi_ddiv+0x228>
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x170>
 8000fca:	e18a      	b.n	80012e2 <__aeabi_ddiv+0x486>
 8000fcc:	0030      	movs	r0, r6
 8000fce:	f001 fa35 	bl	800243c <__clzsi2>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	3b0b      	subs	r3, #11
 8000fd6:	2b1c      	cmp	r3, #28
 8000fd8:	dd00      	ble.n	8000fdc <__aeabi_ddiv+0x180>
 8000fda:	e17b      	b.n	80012d4 <__aeabi_ddiv+0x478>
 8000fdc:	221d      	movs	r2, #29
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	465a      	mov	r2, fp
 8000fe2:	0001      	movs	r1, r0
 8000fe4:	40da      	lsrs	r2, r3
 8000fe6:	3908      	subs	r1, #8
 8000fe8:	408e      	lsls	r6, r1
 8000fea:	0013      	movs	r3, r2
 8000fec:	465f      	mov	r7, fp
 8000fee:	4333      	orrs	r3, r6
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	408f      	lsls	r7, r1
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <__aeabi_ddiv+0x298>)
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	1a1b      	subs	r3, r3, r0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9302      	str	r3, [sp, #8]
 8001000:	e752      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8001002:	4641      	mov	r1, r8
 8001004:	4653      	mov	r3, sl
 8001006:	430b      	orrs	r3, r1
 8001008:	493b      	ldr	r1, [pc, #236]	; (80010f8 <__aeabi_ddiv+0x29c>)
 800100a:	469b      	mov	fp, r3
 800100c:	468c      	mov	ip, r1
 800100e:	9b00      	ldr	r3, [sp, #0]
 8001010:	4463      	add	r3, ip
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	465b      	mov	r3, fp
 8001016:	2b00      	cmp	r3, #0
 8001018:	d13b      	bne.n	8001092 <__aeabi_ddiv+0x236>
 800101a:	2302      	movs	r3, #2
 800101c:	2200      	movs	r2, #0
 800101e:	431e      	orrs	r6, r3
 8001020:	2102      	movs	r1, #2
 8001022:	e761      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 8001024:	4643      	mov	r3, r8
 8001026:	4313      	orrs	r3, r2
 8001028:	469b      	mov	fp, r3
 800102a:	d037      	beq.n	800109c <__aeabi_ddiv+0x240>
 800102c:	4643      	mov	r3, r8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x1d8>
 8001032:	e162      	b.n	80012fa <__aeabi_ddiv+0x49e>
 8001034:	4640      	mov	r0, r8
 8001036:	f001 fa01 	bl	800243c <__clzsi2>
 800103a:	0003      	movs	r3, r0
 800103c:	3b0b      	subs	r3, #11
 800103e:	2b1c      	cmp	r3, #28
 8001040:	dd00      	ble.n	8001044 <__aeabi_ddiv+0x1e8>
 8001042:	e153      	b.n	80012ec <__aeabi_ddiv+0x490>
 8001044:	0002      	movs	r2, r0
 8001046:	4641      	mov	r1, r8
 8001048:	3a08      	subs	r2, #8
 800104a:	4091      	lsls	r1, r2
 800104c:	4688      	mov	r8, r1
 800104e:	211d      	movs	r1, #29
 8001050:	1acb      	subs	r3, r1, r3
 8001052:	4651      	mov	r1, sl
 8001054:	40d9      	lsrs	r1, r3
 8001056:	000b      	movs	r3, r1
 8001058:	4641      	mov	r1, r8
 800105a:	430b      	orrs	r3, r1
 800105c:	469b      	mov	fp, r3
 800105e:	4653      	mov	r3, sl
 8001060:	4093      	lsls	r3, r2
 8001062:	001a      	movs	r2, r3
 8001064:	9b00      	ldr	r3, [sp, #0]
 8001066:	4925      	ldr	r1, [pc, #148]	; (80010fc <__aeabi_ddiv+0x2a0>)
 8001068:	469c      	mov	ip, r3
 800106a:	4460      	add	r0, ip
 800106c:	0003      	movs	r3, r0
 800106e:	468c      	mov	ip, r1
 8001070:	4463      	add	r3, ip
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2100      	movs	r1, #0
 8001076:	e737      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 8001078:	2303      	movs	r3, #3
 800107a:	46b1      	mov	r9, r6
 800107c:	9000      	str	r0, [sp, #0]
 800107e:	260c      	movs	r6, #12
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	e711      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8001084:	2300      	movs	r3, #0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	2604      	movs	r6, #4
 800108c:	2700      	movs	r7, #0
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	e70a      	b.n	8000ea8 <__aeabi_ddiv+0x4c>
 8001092:	2303      	movs	r3, #3
 8001094:	46c3      	mov	fp, r8
 8001096:	431e      	orrs	r6, r3
 8001098:	2103      	movs	r1, #3
 800109a:	e725      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 800109c:	3301      	adds	r3, #1
 800109e:	431e      	orrs	r6, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	e720      	b.n	8000ee8 <__aeabi_ddiv+0x8c>
 80010a6:	2300      	movs	r3, #0
 80010a8:	469a      	mov	sl, r3
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	2700      	movs	r7, #0
 80010ae:	031b      	lsls	r3, r3, #12
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <__aeabi_ddiv+0x27c>)
 80010b2:	e761      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	4649      	mov	r1, r9
 80010b8:	031b      	lsls	r3, r3, #12
 80010ba:	4219      	tst	r1, r3
 80010bc:	d100      	bne.n	80010c0 <__aeabi_ddiv+0x264>
 80010be:	e0e2      	b.n	8001286 <__aeabi_ddiv+0x42a>
 80010c0:	4659      	mov	r1, fp
 80010c2:	4219      	tst	r1, r3
 80010c4:	d000      	beq.n	80010c8 <__aeabi_ddiv+0x26c>
 80010c6:	e0de      	b.n	8001286 <__aeabi_ddiv+0x42a>
 80010c8:	430b      	orrs	r3, r1
 80010ca:	031b      	lsls	r3, r3, #12
 80010cc:	0017      	movs	r7, r2
 80010ce:	0b1b      	lsrs	r3, r3, #12
 80010d0:	46a2      	mov	sl, r4
 80010d2:	4a01      	ldr	r2, [pc, #4]	; (80010d8 <__aeabi_ddiv+0x27c>)
 80010d4:	e750      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	000007ff 	.word	0x000007ff
 80010dc:	fffffc01 	.word	0xfffffc01
 80010e0:	080069a0 	.word	0x080069a0
 80010e4:	000003ff 	.word	0x000003ff
 80010e8:	feffffff 	.word	0xfeffffff
 80010ec:	000007fe 	.word	0x000007fe
 80010f0:	800fffff 	.word	0x800fffff
 80010f4:	fffffc0d 	.word	0xfffffc0d
 80010f8:	fffff801 	.word	0xfffff801
 80010fc:	000003f3 	.word	0x000003f3
 8001100:	45d9      	cmp	r9, fp
 8001102:	d900      	bls.n	8001106 <__aeabi_ddiv+0x2aa>
 8001104:	e0cb      	b.n	800129e <__aeabi_ddiv+0x442>
 8001106:	d100      	bne.n	800110a <__aeabi_ddiv+0x2ae>
 8001108:	e0c6      	b.n	8001298 <__aeabi_ddiv+0x43c>
 800110a:	003c      	movs	r4, r7
 800110c:	4648      	mov	r0, r9
 800110e:	2700      	movs	r7, #0
 8001110:	9b00      	ldr	r3, [sp, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	465b      	mov	r3, fp
 8001118:	0e16      	lsrs	r6, r2, #24
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	431e      	orrs	r6, r3
 800111e:	0213      	lsls	r3, r2, #8
 8001120:	4698      	mov	r8, r3
 8001122:	0433      	lsls	r3, r6, #16
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	4699      	mov	r9, r3
 8001128:	0c31      	lsrs	r1, r6, #16
 800112a:	9101      	str	r1, [sp, #4]
 800112c:	f7ff f872 	bl	8000214 <__aeabi_uidivmod>
 8001130:	464a      	mov	r2, r9
 8001132:	4342      	muls	r2, r0
 8001134:	040b      	lsls	r3, r1, #16
 8001136:	0c21      	lsrs	r1, r4, #16
 8001138:	0005      	movs	r5, r0
 800113a:	4319      	orrs	r1, r3
 800113c:	428a      	cmp	r2, r1
 800113e:	d907      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 8001140:	1989      	adds	r1, r1, r6
 8001142:	3d01      	subs	r5, #1
 8001144:	428e      	cmp	r6, r1
 8001146:	d803      	bhi.n	8001150 <__aeabi_ddiv+0x2f4>
 8001148:	428a      	cmp	r2, r1
 800114a:	d901      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 800114c:	1e85      	subs	r5, r0, #2
 800114e:	1989      	adds	r1, r1, r6
 8001150:	1a88      	subs	r0, r1, r2
 8001152:	9901      	ldr	r1, [sp, #4]
 8001154:	f7ff f85e 	bl	8000214 <__aeabi_uidivmod>
 8001158:	0409      	lsls	r1, r1, #16
 800115a:	468c      	mov	ip, r1
 800115c:	464a      	mov	r2, r9
 800115e:	0421      	lsls	r1, r4, #16
 8001160:	4664      	mov	r4, ip
 8001162:	4342      	muls	r2, r0
 8001164:	0c09      	lsrs	r1, r1, #16
 8001166:	0003      	movs	r3, r0
 8001168:	4321      	orrs	r1, r4
 800116a:	428a      	cmp	r2, r1
 800116c:	d904      	bls.n	8001178 <__aeabi_ddiv+0x31c>
 800116e:	1989      	adds	r1, r1, r6
 8001170:	3b01      	subs	r3, #1
 8001172:	428e      	cmp	r6, r1
 8001174:	d800      	bhi.n	8001178 <__aeabi_ddiv+0x31c>
 8001176:	e0f1      	b.n	800135c <__aeabi_ddiv+0x500>
 8001178:	042d      	lsls	r5, r5, #16
 800117a:	431d      	orrs	r5, r3
 800117c:	46ab      	mov	fp, r5
 800117e:	4643      	mov	r3, r8
 8001180:	1a89      	subs	r1, r1, r2
 8001182:	4642      	mov	r2, r8
 8001184:	0c28      	lsrs	r0, r5, #16
 8001186:	0412      	lsls	r2, r2, #16
 8001188:	0c1d      	lsrs	r5, r3, #16
 800118a:	465b      	mov	r3, fp
 800118c:	0c14      	lsrs	r4, r2, #16
 800118e:	0022      	movs	r2, r4
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	435a      	muls	r2, r3
 8001196:	9403      	str	r4, [sp, #12]
 8001198:	436b      	muls	r3, r5
 800119a:	4344      	muls	r4, r0
 800119c:	9502      	str	r5, [sp, #8]
 800119e:	4368      	muls	r0, r5
 80011a0:	191b      	adds	r3, r3, r4
 80011a2:	0c15      	lsrs	r5, r2, #16
 80011a4:	18eb      	adds	r3, r5, r3
 80011a6:	429c      	cmp	r4, r3
 80011a8:	d903      	bls.n	80011b2 <__aeabi_ddiv+0x356>
 80011aa:	2480      	movs	r4, #128	; 0x80
 80011ac:	0264      	lsls	r4, r4, #9
 80011ae:	46a4      	mov	ip, r4
 80011b0:	4460      	add	r0, ip
 80011b2:	0c1c      	lsrs	r4, r3, #16
 80011b4:	0415      	lsls	r5, r2, #16
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	0c2d      	lsrs	r5, r5, #16
 80011ba:	1820      	adds	r0, r4, r0
 80011bc:	195d      	adds	r5, r3, r5
 80011be:	4281      	cmp	r1, r0
 80011c0:	d377      	bcc.n	80012b2 <__aeabi_ddiv+0x456>
 80011c2:	d073      	beq.n	80012ac <__aeabi_ddiv+0x450>
 80011c4:	1a0c      	subs	r4, r1, r0
 80011c6:	4aa2      	ldr	r2, [pc, #648]	; (8001450 <__aeabi_ddiv+0x5f4>)
 80011c8:	1b7d      	subs	r5, r7, r5
 80011ca:	42af      	cmp	r7, r5
 80011cc:	41bf      	sbcs	r7, r7
 80011ce:	4694      	mov	ip, r2
 80011d0:	9b00      	ldr	r3, [sp, #0]
 80011d2:	427f      	negs	r7, r7
 80011d4:	4463      	add	r3, ip
 80011d6:	1be0      	subs	r0, r4, r7
 80011d8:	001c      	movs	r4, r3
 80011da:	4286      	cmp	r6, r0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x384>
 80011de:	e0db      	b.n	8001398 <__aeabi_ddiv+0x53c>
 80011e0:	9901      	ldr	r1, [sp, #4]
 80011e2:	f7ff f817 	bl	8000214 <__aeabi_uidivmod>
 80011e6:	464a      	mov	r2, r9
 80011e8:	4342      	muls	r2, r0
 80011ea:	040b      	lsls	r3, r1, #16
 80011ec:	0c29      	lsrs	r1, r5, #16
 80011ee:	0007      	movs	r7, r0
 80011f0:	4319      	orrs	r1, r3
 80011f2:	428a      	cmp	r2, r1
 80011f4:	d907      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 80011f6:	1989      	adds	r1, r1, r6
 80011f8:	3f01      	subs	r7, #1
 80011fa:	428e      	cmp	r6, r1
 80011fc:	d803      	bhi.n	8001206 <__aeabi_ddiv+0x3aa>
 80011fe:	428a      	cmp	r2, r1
 8001200:	d901      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 8001202:	1e87      	subs	r7, r0, #2
 8001204:	1989      	adds	r1, r1, r6
 8001206:	1a88      	subs	r0, r1, r2
 8001208:	9901      	ldr	r1, [sp, #4]
 800120a:	f7ff f803 	bl	8000214 <__aeabi_uidivmod>
 800120e:	0409      	lsls	r1, r1, #16
 8001210:	464a      	mov	r2, r9
 8001212:	4689      	mov	r9, r1
 8001214:	0429      	lsls	r1, r5, #16
 8001216:	464d      	mov	r5, r9
 8001218:	4342      	muls	r2, r0
 800121a:	0c09      	lsrs	r1, r1, #16
 800121c:	0003      	movs	r3, r0
 800121e:	4329      	orrs	r1, r5
 8001220:	428a      	cmp	r2, r1
 8001222:	d907      	bls.n	8001234 <__aeabi_ddiv+0x3d8>
 8001224:	1989      	adds	r1, r1, r6
 8001226:	3b01      	subs	r3, #1
 8001228:	428e      	cmp	r6, r1
 800122a:	d803      	bhi.n	8001234 <__aeabi_ddiv+0x3d8>
 800122c:	428a      	cmp	r2, r1
 800122e:	d901      	bls.n	8001234 <__aeabi_ddiv+0x3d8>
 8001230:	1e83      	subs	r3, r0, #2
 8001232:	1989      	adds	r1, r1, r6
 8001234:	043f      	lsls	r7, r7, #16
 8001236:	1a89      	subs	r1, r1, r2
 8001238:	003a      	movs	r2, r7
 800123a:	9f03      	ldr	r7, [sp, #12]
 800123c:	431a      	orrs	r2, r3
 800123e:	0038      	movs	r0, r7
 8001240:	0413      	lsls	r3, r2, #16
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	4358      	muls	r0, r3
 8001246:	4681      	mov	r9, r0
 8001248:	9802      	ldr	r0, [sp, #8]
 800124a:	0c15      	lsrs	r5, r2, #16
 800124c:	436f      	muls	r7, r5
 800124e:	4343      	muls	r3, r0
 8001250:	4345      	muls	r5, r0
 8001252:	4648      	mov	r0, r9
 8001254:	0c00      	lsrs	r0, r0, #16
 8001256:	4684      	mov	ip, r0
 8001258:	19db      	adds	r3, r3, r7
 800125a:	4463      	add	r3, ip
 800125c:	429f      	cmp	r7, r3
 800125e:	d903      	bls.n	8001268 <__aeabi_ddiv+0x40c>
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	0240      	lsls	r0, r0, #9
 8001264:	4684      	mov	ip, r0
 8001266:	4465      	add	r5, ip
 8001268:	4648      	mov	r0, r9
 800126a:	0c1f      	lsrs	r7, r3, #16
 800126c:	0400      	lsls	r0, r0, #16
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	0c00      	lsrs	r0, r0, #16
 8001272:	197d      	adds	r5, r7, r5
 8001274:	1818      	adds	r0, r3, r0
 8001276:	42a9      	cmp	r1, r5
 8001278:	d200      	bcs.n	800127c <__aeabi_ddiv+0x420>
 800127a:	e084      	b.n	8001386 <__aeabi_ddiv+0x52a>
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x424>
 800127e:	e07f      	b.n	8001380 <__aeabi_ddiv+0x524>
 8001280:	2301      	movs	r3, #1
 8001282:	431a      	orrs	r2, r3
 8001284:	e657      	b.n	8000f36 <__aeabi_ddiv+0xda>
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	464a      	mov	r2, r9
 800128a:	031b      	lsls	r3, r3, #12
 800128c:	4313      	orrs	r3, r2
 800128e:	031b      	lsls	r3, r3, #12
 8001290:	0b1b      	lsrs	r3, r3, #12
 8001292:	46aa      	mov	sl, r5
 8001294:	4a6f      	ldr	r2, [pc, #444]	; (8001454 <__aeabi_ddiv+0x5f8>)
 8001296:	e66f      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 8001298:	42ba      	cmp	r2, r7
 800129a:	d900      	bls.n	800129e <__aeabi_ddiv+0x442>
 800129c:	e735      	b.n	800110a <__aeabi_ddiv+0x2ae>
 800129e:	464b      	mov	r3, r9
 80012a0:	07dc      	lsls	r4, r3, #31
 80012a2:	0858      	lsrs	r0, r3, #1
 80012a4:	087b      	lsrs	r3, r7, #1
 80012a6:	431c      	orrs	r4, r3
 80012a8:	07ff      	lsls	r7, r7, #31
 80012aa:	e734      	b.n	8001116 <__aeabi_ddiv+0x2ba>
 80012ac:	2400      	movs	r4, #0
 80012ae:	42af      	cmp	r7, r5
 80012b0:	d289      	bcs.n	80011c6 <__aeabi_ddiv+0x36a>
 80012b2:	4447      	add	r7, r8
 80012b4:	4547      	cmp	r7, r8
 80012b6:	41a4      	sbcs	r4, r4
 80012b8:	465b      	mov	r3, fp
 80012ba:	4264      	negs	r4, r4
 80012bc:	19a4      	adds	r4, r4, r6
 80012be:	1864      	adds	r4, r4, r1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	42a6      	cmp	r6, r4
 80012c4:	d21e      	bcs.n	8001304 <__aeabi_ddiv+0x4a8>
 80012c6:	42a0      	cmp	r0, r4
 80012c8:	d86d      	bhi.n	80013a6 <__aeabi_ddiv+0x54a>
 80012ca:	d100      	bne.n	80012ce <__aeabi_ddiv+0x472>
 80012cc:	e0b6      	b.n	800143c <__aeabi_ddiv+0x5e0>
 80012ce:	1a24      	subs	r4, r4, r0
 80012d0:	469b      	mov	fp, r3
 80012d2:	e778      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 80012d4:	0003      	movs	r3, r0
 80012d6:	465a      	mov	r2, fp
 80012d8:	3b28      	subs	r3, #40	; 0x28
 80012da:	409a      	lsls	r2, r3
 80012dc:	2700      	movs	r7, #0
 80012de:	4691      	mov	r9, r2
 80012e0:	e688      	b.n	8000ff4 <__aeabi_ddiv+0x198>
 80012e2:	4658      	mov	r0, fp
 80012e4:	f001 f8aa 	bl	800243c <__clzsi2>
 80012e8:	3020      	adds	r0, #32
 80012ea:	e672      	b.n	8000fd2 <__aeabi_ddiv+0x176>
 80012ec:	0003      	movs	r3, r0
 80012ee:	4652      	mov	r2, sl
 80012f0:	3b28      	subs	r3, #40	; 0x28
 80012f2:	409a      	lsls	r2, r3
 80012f4:	4693      	mov	fp, r2
 80012f6:	2200      	movs	r2, #0
 80012f8:	e6b4      	b.n	8001064 <__aeabi_ddiv+0x208>
 80012fa:	4650      	mov	r0, sl
 80012fc:	f001 f89e 	bl	800243c <__clzsi2>
 8001300:	3020      	adds	r0, #32
 8001302:	e69a      	b.n	800103a <__aeabi_ddiv+0x1de>
 8001304:	42a6      	cmp	r6, r4
 8001306:	d1e2      	bne.n	80012ce <__aeabi_ddiv+0x472>
 8001308:	45b8      	cmp	r8, r7
 800130a:	d9dc      	bls.n	80012c6 <__aeabi_ddiv+0x46a>
 800130c:	1a34      	subs	r4, r6, r0
 800130e:	469b      	mov	fp, r3
 8001310:	e759      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 8001312:	2b1f      	cmp	r3, #31
 8001314:	dc65      	bgt.n	80013e2 <__aeabi_ddiv+0x586>
 8001316:	4c50      	ldr	r4, [pc, #320]	; (8001458 <__aeabi_ddiv+0x5fc>)
 8001318:	9900      	ldr	r1, [sp, #0]
 800131a:	46a4      	mov	ip, r4
 800131c:	465c      	mov	r4, fp
 800131e:	4461      	add	r1, ip
 8001320:	0008      	movs	r0, r1
 8001322:	408c      	lsls	r4, r1
 8001324:	0011      	movs	r1, r2
 8001326:	4082      	lsls	r2, r0
 8001328:	40d9      	lsrs	r1, r3
 800132a:	1e50      	subs	r0, r2, #1
 800132c:	4182      	sbcs	r2, r0
 800132e:	430c      	orrs	r4, r1
 8001330:	4314      	orrs	r4, r2
 8001332:	465a      	mov	r2, fp
 8001334:	40da      	lsrs	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	0762      	lsls	r2, r4, #29
 800133a:	d009      	beq.n	8001350 <__aeabi_ddiv+0x4f4>
 800133c:	220f      	movs	r2, #15
 800133e:	4022      	ands	r2, r4
 8001340:	2a04      	cmp	r2, #4
 8001342:	d005      	beq.n	8001350 <__aeabi_ddiv+0x4f4>
 8001344:	0022      	movs	r2, r4
 8001346:	1d14      	adds	r4, r2, #4
 8001348:	4294      	cmp	r4, r2
 800134a:	4189      	sbcs	r1, r1
 800134c:	4249      	negs	r1, r1
 800134e:	185b      	adds	r3, r3, r1
 8001350:	021a      	lsls	r2, r3, #8
 8001352:	d562      	bpl.n	800141a <__aeabi_ddiv+0x5be>
 8001354:	2201      	movs	r2, #1
 8001356:	2300      	movs	r3, #0
 8001358:	2700      	movs	r7, #0
 800135a:	e60d      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 800135c:	428a      	cmp	r2, r1
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x506>
 8001360:	e70a      	b.n	8001178 <__aeabi_ddiv+0x31c>
 8001362:	1e83      	subs	r3, r0, #2
 8001364:	1989      	adds	r1, r1, r6
 8001366:	e707      	b.n	8001178 <__aeabi_ddiv+0x31c>
 8001368:	230f      	movs	r3, #15
 800136a:	4013      	ands	r3, r2
 800136c:	2b04      	cmp	r3, #4
 800136e:	d100      	bne.n	8001372 <__aeabi_ddiv+0x516>
 8001370:	e5e6      	b.n	8000f40 <__aeabi_ddiv+0xe4>
 8001372:	1d17      	adds	r7, r2, #4
 8001374:	4297      	cmp	r7, r2
 8001376:	4192      	sbcs	r2, r2
 8001378:	4253      	negs	r3, r2
 800137a:	449b      	add	fp, r3
 800137c:	08fa      	lsrs	r2, r7, #3
 800137e:	e5e0      	b.n	8000f42 <__aeabi_ddiv+0xe6>
 8001380:	2800      	cmp	r0, #0
 8001382:	d100      	bne.n	8001386 <__aeabi_ddiv+0x52a>
 8001384:	e5d7      	b.n	8000f36 <__aeabi_ddiv+0xda>
 8001386:	1871      	adds	r1, r6, r1
 8001388:	1e53      	subs	r3, r2, #1
 800138a:	42b1      	cmp	r1, r6
 800138c:	d327      	bcc.n	80013de <__aeabi_ddiv+0x582>
 800138e:	42a9      	cmp	r1, r5
 8001390:	d315      	bcc.n	80013be <__aeabi_ddiv+0x562>
 8001392:	d058      	beq.n	8001446 <__aeabi_ddiv+0x5ea>
 8001394:	001a      	movs	r2, r3
 8001396:	e773      	b.n	8001280 <__aeabi_ddiv+0x424>
 8001398:	2b00      	cmp	r3, #0
 800139a:	dc00      	bgt.n	800139e <__aeabi_ddiv+0x542>
 800139c:	e604      	b.n	8000fa8 <__aeabi_ddiv+0x14c>
 800139e:	2301      	movs	r3, #1
 80013a0:	2200      	movs	r2, #0
 80013a2:	449b      	add	fp, r3
 80013a4:	e5cd      	b.n	8000f42 <__aeabi_ddiv+0xe6>
 80013a6:	2302      	movs	r3, #2
 80013a8:	4447      	add	r7, r8
 80013aa:	4547      	cmp	r7, r8
 80013ac:	4189      	sbcs	r1, r1
 80013ae:	425b      	negs	r3, r3
 80013b0:	469c      	mov	ip, r3
 80013b2:	4249      	negs	r1, r1
 80013b4:	1989      	adds	r1, r1, r6
 80013b6:	190c      	adds	r4, r1, r4
 80013b8:	44e3      	add	fp, ip
 80013ba:	1a24      	subs	r4, r4, r0
 80013bc:	e703      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 80013be:	4643      	mov	r3, r8
 80013c0:	005f      	lsls	r7, r3, #1
 80013c2:	4547      	cmp	r7, r8
 80013c4:	419b      	sbcs	r3, r3
 80013c6:	46b8      	mov	r8, r7
 80013c8:	425b      	negs	r3, r3
 80013ca:	199e      	adds	r6, r3, r6
 80013cc:	3a02      	subs	r2, #2
 80013ce:	1989      	adds	r1, r1, r6
 80013d0:	42a9      	cmp	r1, r5
 80013d2:	d000      	beq.n	80013d6 <__aeabi_ddiv+0x57a>
 80013d4:	e754      	b.n	8001280 <__aeabi_ddiv+0x424>
 80013d6:	4540      	cmp	r0, r8
 80013d8:	d000      	beq.n	80013dc <__aeabi_ddiv+0x580>
 80013da:	e751      	b.n	8001280 <__aeabi_ddiv+0x424>
 80013dc:	e5ab      	b.n	8000f36 <__aeabi_ddiv+0xda>
 80013de:	001a      	movs	r2, r3
 80013e0:	e7f6      	b.n	80013d0 <__aeabi_ddiv+0x574>
 80013e2:	211f      	movs	r1, #31
 80013e4:	465f      	mov	r7, fp
 80013e6:	4249      	negs	r1, r1
 80013e8:	1b0c      	subs	r4, r1, r4
 80013ea:	40e7      	lsrs	r7, r4
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d007      	beq.n	8001400 <__aeabi_ddiv+0x5a4>
 80013f0:	491a      	ldr	r1, [pc, #104]	; (800145c <__aeabi_ddiv+0x600>)
 80013f2:	9b00      	ldr	r3, [sp, #0]
 80013f4:	468c      	mov	ip, r1
 80013f6:	4463      	add	r3, ip
 80013f8:	0018      	movs	r0, r3
 80013fa:	465b      	mov	r3, fp
 80013fc:	4083      	lsls	r3, r0
 80013fe:	431a      	orrs	r2, r3
 8001400:	1e50      	subs	r0, r2, #1
 8001402:	4182      	sbcs	r2, r0
 8001404:	433a      	orrs	r2, r7
 8001406:	2707      	movs	r7, #7
 8001408:	2300      	movs	r3, #0
 800140a:	4017      	ands	r7, r2
 800140c:	d009      	beq.n	8001422 <__aeabi_ddiv+0x5c6>
 800140e:	210f      	movs	r1, #15
 8001410:	2300      	movs	r3, #0
 8001412:	4011      	ands	r1, r2
 8001414:	0014      	movs	r4, r2
 8001416:	2904      	cmp	r1, #4
 8001418:	d195      	bne.n	8001346 <__aeabi_ddiv+0x4ea>
 800141a:	0022      	movs	r2, r4
 800141c:	075f      	lsls	r7, r3, #29
 800141e:	025b      	lsls	r3, r3, #9
 8001420:	0b1b      	lsrs	r3, r3, #12
 8001422:	08d2      	lsrs	r2, r2, #3
 8001424:	4317      	orrs	r7, r2
 8001426:	2200      	movs	r2, #0
 8001428:	e5a6      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	4659      	mov	r1, fp
 800142e:	031b      	lsls	r3, r3, #12
 8001430:	430b      	orrs	r3, r1
 8001432:	031b      	lsls	r3, r3, #12
 8001434:	0017      	movs	r7, r2
 8001436:	0b1b      	lsrs	r3, r3, #12
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <__aeabi_ddiv+0x5f8>)
 800143a:	e59d      	b.n	8000f78 <__aeabi_ddiv+0x11c>
 800143c:	42bd      	cmp	r5, r7
 800143e:	d8b2      	bhi.n	80013a6 <__aeabi_ddiv+0x54a>
 8001440:	469b      	mov	fp, r3
 8001442:	2400      	movs	r4, #0
 8001444:	e6bf      	b.n	80011c6 <__aeabi_ddiv+0x36a>
 8001446:	4580      	cmp	r8, r0
 8001448:	d3b9      	bcc.n	80013be <__aeabi_ddiv+0x562>
 800144a:	001a      	movs	r2, r3
 800144c:	e7c3      	b.n	80013d6 <__aeabi_ddiv+0x57a>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	000003ff 	.word	0x000003ff
 8001454:	000007ff 	.word	0x000007ff
 8001458:	0000041e 	.word	0x0000041e
 800145c:	0000043e 	.word	0x0000043e

08001460 <__eqdf2>:
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	464f      	mov	r7, r9
 8001464:	4646      	mov	r6, r8
 8001466:	46d6      	mov	lr, sl
 8001468:	4684      	mov	ip, r0
 800146a:	b5c0      	push	{r6, r7, lr}
 800146c:	4680      	mov	r8, r0
 800146e:	4e19      	ldr	r6, [pc, #100]	; (80014d4 <__eqdf2+0x74>)
 8001470:	0318      	lsls	r0, r3, #12
 8001472:	030f      	lsls	r7, r1, #12
 8001474:	004d      	lsls	r5, r1, #1
 8001476:	0b00      	lsrs	r0, r0, #12
 8001478:	005c      	lsls	r4, r3, #1
 800147a:	4682      	mov	sl, r0
 800147c:	0b3f      	lsrs	r7, r7, #12
 800147e:	0d6d      	lsrs	r5, r5, #21
 8001480:	0fc9      	lsrs	r1, r1, #31
 8001482:	4691      	mov	r9, r2
 8001484:	0d64      	lsrs	r4, r4, #21
 8001486:	0fdb      	lsrs	r3, r3, #31
 8001488:	2001      	movs	r0, #1
 800148a:	42b5      	cmp	r5, r6
 800148c:	d00a      	beq.n	80014a4 <__eqdf2+0x44>
 800148e:	42b4      	cmp	r4, r6
 8001490:	d003      	beq.n	800149a <__eqdf2+0x3a>
 8001492:	42a5      	cmp	r5, r4
 8001494:	d101      	bne.n	800149a <__eqdf2+0x3a>
 8001496:	4557      	cmp	r7, sl
 8001498:	d00c      	beq.n	80014b4 <__eqdf2+0x54>
 800149a:	bc1c      	pop	{r2, r3, r4}
 800149c:	4690      	mov	r8, r2
 800149e:	4699      	mov	r9, r3
 80014a0:	46a2      	mov	sl, r4
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	4666      	mov	r6, ip
 80014a6:	433e      	orrs	r6, r7
 80014a8:	d1f7      	bne.n	800149a <__eqdf2+0x3a>
 80014aa:	42ac      	cmp	r4, r5
 80014ac:	d1f5      	bne.n	800149a <__eqdf2+0x3a>
 80014ae:	4654      	mov	r4, sl
 80014b0:	4314      	orrs	r4, r2
 80014b2:	d1f2      	bne.n	800149a <__eqdf2+0x3a>
 80014b4:	2001      	movs	r0, #1
 80014b6:	45c8      	cmp	r8, r9
 80014b8:	d1ef      	bne.n	800149a <__eqdf2+0x3a>
 80014ba:	4299      	cmp	r1, r3
 80014bc:	d007      	beq.n	80014ce <__eqdf2+0x6e>
 80014be:	2d00      	cmp	r5, #0
 80014c0:	d1eb      	bne.n	800149a <__eqdf2+0x3a>
 80014c2:	4663      	mov	r3, ip
 80014c4:	431f      	orrs	r7, r3
 80014c6:	0038      	movs	r0, r7
 80014c8:	1e47      	subs	r7, r0, #1
 80014ca:	41b8      	sbcs	r0, r7
 80014cc:	e7e5      	b.n	800149a <__eqdf2+0x3a>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7e3      	b.n	800149a <__eqdf2+0x3a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	464f      	mov	r7, r9
 80014dc:	4646      	mov	r6, r8
 80014de:	46d6      	mov	lr, sl
 80014e0:	004d      	lsls	r5, r1, #1
 80014e2:	b5c0      	push	{r6, r7, lr}
 80014e4:	030e      	lsls	r6, r1, #12
 80014e6:	0fc9      	lsrs	r1, r1, #31
 80014e8:	468a      	mov	sl, r1
 80014ea:	492c      	ldr	r1, [pc, #176]	; (800159c <__gedf2+0xc4>)
 80014ec:	031f      	lsls	r7, r3, #12
 80014ee:	005c      	lsls	r4, r3, #1
 80014f0:	4680      	mov	r8, r0
 80014f2:	0b36      	lsrs	r6, r6, #12
 80014f4:	0d6d      	lsrs	r5, r5, #21
 80014f6:	4691      	mov	r9, r2
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d64      	lsrs	r4, r4, #21
 80014fc:	0fdb      	lsrs	r3, r3, #31
 80014fe:	428d      	cmp	r5, r1
 8001500:	d01e      	beq.n	8001540 <__gedf2+0x68>
 8001502:	428c      	cmp	r4, r1
 8001504:	d016      	beq.n	8001534 <__gedf2+0x5c>
 8001506:	2d00      	cmp	r5, #0
 8001508:	d11e      	bne.n	8001548 <__gedf2+0x70>
 800150a:	4330      	orrs	r0, r6
 800150c:	4684      	mov	ip, r0
 800150e:	2c00      	cmp	r4, #0
 8001510:	d101      	bne.n	8001516 <__gedf2+0x3e>
 8001512:	433a      	orrs	r2, r7
 8001514:	d023      	beq.n	800155e <__gedf2+0x86>
 8001516:	4662      	mov	r2, ip
 8001518:	2a00      	cmp	r2, #0
 800151a:	d01a      	beq.n	8001552 <__gedf2+0x7a>
 800151c:	459a      	cmp	sl, r3
 800151e:	d029      	beq.n	8001574 <__gedf2+0x9c>
 8001520:	4651      	mov	r1, sl
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bc1c      	pop	{r2, r3, r4}
 800152c:	4690      	mov	r8, r2
 800152e:	4699      	mov	r9, r3
 8001530:	46a2      	mov	sl, r4
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001534:	0039      	movs	r1, r7
 8001536:	4311      	orrs	r1, r2
 8001538:	d0e5      	beq.n	8001506 <__gedf2+0x2e>
 800153a:	2002      	movs	r0, #2
 800153c:	4240      	negs	r0, r0
 800153e:	e7f4      	b.n	800152a <__gedf2+0x52>
 8001540:	4330      	orrs	r0, r6
 8001542:	d1fa      	bne.n	800153a <__gedf2+0x62>
 8001544:	42ac      	cmp	r4, r5
 8001546:	d00f      	beq.n	8001568 <__gedf2+0x90>
 8001548:	2c00      	cmp	r4, #0
 800154a:	d10f      	bne.n	800156c <__gedf2+0x94>
 800154c:	433a      	orrs	r2, r7
 800154e:	d0e7      	beq.n	8001520 <__gedf2+0x48>
 8001550:	e00c      	b.n	800156c <__gedf2+0x94>
 8001552:	2201      	movs	r2, #1
 8001554:	3b01      	subs	r3, #1
 8001556:	4393      	bics	r3, r2
 8001558:	0018      	movs	r0, r3
 800155a:	3001      	adds	r0, #1
 800155c:	e7e5      	b.n	800152a <__gedf2+0x52>
 800155e:	4663      	mov	r3, ip
 8001560:	2000      	movs	r0, #0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7db      	b.n	8001520 <__gedf2+0x48>
 8001568:	433a      	orrs	r2, r7
 800156a:	d1e6      	bne.n	800153a <__gedf2+0x62>
 800156c:	459a      	cmp	sl, r3
 800156e:	d1d7      	bne.n	8001520 <__gedf2+0x48>
 8001570:	42a5      	cmp	r5, r4
 8001572:	dcd5      	bgt.n	8001520 <__gedf2+0x48>
 8001574:	42a5      	cmp	r5, r4
 8001576:	db05      	blt.n	8001584 <__gedf2+0xac>
 8001578:	42be      	cmp	r6, r7
 800157a:	d8d1      	bhi.n	8001520 <__gedf2+0x48>
 800157c:	d008      	beq.n	8001590 <__gedf2+0xb8>
 800157e:	2000      	movs	r0, #0
 8001580:	42be      	cmp	r6, r7
 8001582:	d2d2      	bcs.n	800152a <__gedf2+0x52>
 8001584:	4650      	mov	r0, sl
 8001586:	2301      	movs	r3, #1
 8001588:	3801      	subs	r0, #1
 800158a:	4398      	bics	r0, r3
 800158c:	3001      	adds	r0, #1
 800158e:	e7cc      	b.n	800152a <__gedf2+0x52>
 8001590:	45c8      	cmp	r8, r9
 8001592:	d8c5      	bhi.n	8001520 <__gedf2+0x48>
 8001594:	2000      	movs	r0, #0
 8001596:	45c8      	cmp	r8, r9
 8001598:	d3f4      	bcc.n	8001584 <__gedf2+0xac>
 800159a:	e7c6      	b.n	800152a <__gedf2+0x52>
 800159c:	000007ff 	.word	0x000007ff

080015a0 <__ledf2>:
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	464f      	mov	r7, r9
 80015a4:	4646      	mov	r6, r8
 80015a6:	46d6      	mov	lr, sl
 80015a8:	004d      	lsls	r5, r1, #1
 80015aa:	b5c0      	push	{r6, r7, lr}
 80015ac:	030e      	lsls	r6, r1, #12
 80015ae:	0fc9      	lsrs	r1, r1, #31
 80015b0:	468a      	mov	sl, r1
 80015b2:	492e      	ldr	r1, [pc, #184]	; (800166c <__ledf2+0xcc>)
 80015b4:	031f      	lsls	r7, r3, #12
 80015b6:	005c      	lsls	r4, r3, #1
 80015b8:	4680      	mov	r8, r0
 80015ba:	0b36      	lsrs	r6, r6, #12
 80015bc:	0d6d      	lsrs	r5, r5, #21
 80015be:	4691      	mov	r9, r2
 80015c0:	0b3f      	lsrs	r7, r7, #12
 80015c2:	0d64      	lsrs	r4, r4, #21
 80015c4:	0fdb      	lsrs	r3, r3, #31
 80015c6:	428d      	cmp	r5, r1
 80015c8:	d018      	beq.n	80015fc <__ledf2+0x5c>
 80015ca:	428c      	cmp	r4, r1
 80015cc:	d011      	beq.n	80015f2 <__ledf2+0x52>
 80015ce:	2d00      	cmp	r5, #0
 80015d0:	d118      	bne.n	8001604 <__ledf2+0x64>
 80015d2:	4330      	orrs	r0, r6
 80015d4:	4684      	mov	ip, r0
 80015d6:	2c00      	cmp	r4, #0
 80015d8:	d11e      	bne.n	8001618 <__ledf2+0x78>
 80015da:	433a      	orrs	r2, r7
 80015dc:	d11c      	bne.n	8001618 <__ledf2+0x78>
 80015de:	4663      	mov	r3, ip
 80015e0:	2000      	movs	r0, #0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d030      	beq.n	8001648 <__ledf2+0xa8>
 80015e6:	4651      	mov	r1, sl
 80015e8:	2002      	movs	r0, #2
 80015ea:	3901      	subs	r1, #1
 80015ec:	4008      	ands	r0, r1
 80015ee:	3801      	subs	r0, #1
 80015f0:	e02a      	b.n	8001648 <__ledf2+0xa8>
 80015f2:	0039      	movs	r1, r7
 80015f4:	4311      	orrs	r1, r2
 80015f6:	d0ea      	beq.n	80015ce <__ledf2+0x2e>
 80015f8:	2002      	movs	r0, #2
 80015fa:	e025      	b.n	8001648 <__ledf2+0xa8>
 80015fc:	4330      	orrs	r0, r6
 80015fe:	d1fb      	bne.n	80015f8 <__ledf2+0x58>
 8001600:	42ac      	cmp	r4, r5
 8001602:	d026      	beq.n	8001652 <__ledf2+0xb2>
 8001604:	2c00      	cmp	r4, #0
 8001606:	d126      	bne.n	8001656 <__ledf2+0xb6>
 8001608:	433a      	orrs	r2, r7
 800160a:	d124      	bne.n	8001656 <__ledf2+0xb6>
 800160c:	4651      	mov	r1, sl
 800160e:	2002      	movs	r0, #2
 8001610:	3901      	subs	r1, #1
 8001612:	4008      	ands	r0, r1
 8001614:	3801      	subs	r0, #1
 8001616:	e017      	b.n	8001648 <__ledf2+0xa8>
 8001618:	4662      	mov	r2, ip
 800161a:	2a00      	cmp	r2, #0
 800161c:	d00f      	beq.n	800163e <__ledf2+0x9e>
 800161e:	459a      	cmp	sl, r3
 8001620:	d1e1      	bne.n	80015e6 <__ledf2+0x46>
 8001622:	42a5      	cmp	r5, r4
 8001624:	db05      	blt.n	8001632 <__ledf2+0x92>
 8001626:	42be      	cmp	r6, r7
 8001628:	d8dd      	bhi.n	80015e6 <__ledf2+0x46>
 800162a:	d019      	beq.n	8001660 <__ledf2+0xc0>
 800162c:	2000      	movs	r0, #0
 800162e:	42be      	cmp	r6, r7
 8001630:	d20a      	bcs.n	8001648 <__ledf2+0xa8>
 8001632:	4650      	mov	r0, sl
 8001634:	2301      	movs	r3, #1
 8001636:	3801      	subs	r0, #1
 8001638:	4398      	bics	r0, r3
 800163a:	3001      	adds	r0, #1
 800163c:	e004      	b.n	8001648 <__ledf2+0xa8>
 800163e:	2201      	movs	r2, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	4393      	bics	r3, r2
 8001644:	0018      	movs	r0, r3
 8001646:	3001      	adds	r0, #1
 8001648:	bc1c      	pop	{r2, r3, r4}
 800164a:	4690      	mov	r8, r2
 800164c:	4699      	mov	r9, r3
 800164e:	46a2      	mov	sl, r4
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001652:	433a      	orrs	r2, r7
 8001654:	d1d0      	bne.n	80015f8 <__ledf2+0x58>
 8001656:	459a      	cmp	sl, r3
 8001658:	d1c5      	bne.n	80015e6 <__ledf2+0x46>
 800165a:	42a5      	cmp	r5, r4
 800165c:	dcc3      	bgt.n	80015e6 <__ledf2+0x46>
 800165e:	e7e0      	b.n	8001622 <__ledf2+0x82>
 8001660:	45c8      	cmp	r8, r9
 8001662:	d8c0      	bhi.n	80015e6 <__ledf2+0x46>
 8001664:	2000      	movs	r0, #0
 8001666:	45c8      	cmp	r8, r9
 8001668:	d3e3      	bcc.n	8001632 <__ledf2+0x92>
 800166a:	e7ed      	b.n	8001648 <__ledf2+0xa8>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4657      	mov	r7, sl
 8001674:	46de      	mov	lr, fp
 8001676:	464e      	mov	r6, r9
 8001678:	4645      	mov	r5, r8
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	4683      	mov	fp, r0
 800167e:	0006      	movs	r6, r0
 8001680:	030f      	lsls	r7, r1, #12
 8001682:	0048      	lsls	r0, r1, #1
 8001684:	b087      	sub	sp, #28
 8001686:	4692      	mov	sl, r2
 8001688:	001d      	movs	r5, r3
 800168a:	0b3f      	lsrs	r7, r7, #12
 800168c:	0d40      	lsrs	r0, r0, #21
 800168e:	0fcc      	lsrs	r4, r1, #31
 8001690:	2800      	cmp	r0, #0
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e06f      	b.n	8001776 <__aeabi_dmul+0x106>
 8001696:	4bde      	ldr	r3, [pc, #888]	; (8001a10 <__aeabi_dmul+0x3a0>)
 8001698:	4298      	cmp	r0, r3
 800169a:	d038      	beq.n	800170e <__aeabi_dmul+0x9e>
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	00ff      	lsls	r7, r7, #3
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431f      	orrs	r7, r3
 80016a4:	0f73      	lsrs	r3, r6, #29
 80016a6:	433b      	orrs	r3, r7
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	4bda      	ldr	r3, [pc, #872]	; (8001a14 <__aeabi_dmul+0x3a4>)
 80016ac:	2700      	movs	r7, #0
 80016ae:	4699      	mov	r9, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	469b      	mov	fp, r3
 80016b4:	00f6      	lsls	r6, r6, #3
 80016b6:	4481      	add	r9, r0
 80016b8:	032b      	lsls	r3, r5, #12
 80016ba:	0069      	lsls	r1, r5, #1
 80016bc:	0b1b      	lsrs	r3, r3, #12
 80016be:	4652      	mov	r2, sl
 80016c0:	4698      	mov	r8, r3
 80016c2:	0d49      	lsrs	r1, r1, #21
 80016c4:	0fed      	lsrs	r5, r5, #31
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x5c>
 80016ca:	e085      	b.n	80017d8 <__aeabi_dmul+0x168>
 80016cc:	4bd0      	ldr	r3, [pc, #832]	; (8001a10 <__aeabi_dmul+0x3a0>)
 80016ce:	4299      	cmp	r1, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dmul+0x64>
 80016d2:	e073      	b.n	80017bc <__aeabi_dmul+0x14c>
 80016d4:	4643      	mov	r3, r8
 80016d6:	00da      	lsls	r2, r3, #3
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	4313      	orrs	r3, r2
 80016de:	4652      	mov	r2, sl
 80016e0:	48cc      	ldr	r0, [pc, #816]	; (8001a14 <__aeabi_dmul+0x3a4>)
 80016e2:	0f52      	lsrs	r2, r2, #29
 80016e4:	4684      	mov	ip, r0
 80016e6:	4313      	orrs	r3, r2
 80016e8:	4652      	mov	r2, sl
 80016ea:	2000      	movs	r0, #0
 80016ec:	4461      	add	r1, ip
 80016ee:	00d2      	lsls	r2, r2, #3
 80016f0:	4489      	add	r9, r1
 80016f2:	0021      	movs	r1, r4
 80016f4:	4069      	eors	r1, r5
 80016f6:	9100      	str	r1, [sp, #0]
 80016f8:	468c      	mov	ip, r1
 80016fa:	2101      	movs	r1, #1
 80016fc:	4449      	add	r1, r9
 80016fe:	468a      	mov	sl, r1
 8001700:	2f0f      	cmp	r7, #15
 8001702:	d900      	bls.n	8001706 <__aeabi_dmul+0x96>
 8001704:	e090      	b.n	8001828 <__aeabi_dmul+0x1b8>
 8001706:	49c4      	ldr	r1, [pc, #784]	; (8001a18 <__aeabi_dmul+0x3a8>)
 8001708:	00bf      	lsls	r7, r7, #2
 800170a:	59cf      	ldr	r7, [r1, r7]
 800170c:	46bf      	mov	pc, r7
 800170e:	465b      	mov	r3, fp
 8001710:	433b      	orrs	r3, r7
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	d000      	beq.n	8001718 <__aeabi_dmul+0xa8>
 8001716:	e16a      	b.n	80019ee <__aeabi_dmul+0x37e>
 8001718:	2302      	movs	r3, #2
 800171a:	2708      	movs	r7, #8
 800171c:	2600      	movs	r6, #0
 800171e:	4681      	mov	r9, r0
 8001720:	469b      	mov	fp, r3
 8001722:	e7c9      	b.n	80016b8 <__aeabi_dmul+0x48>
 8001724:	0032      	movs	r2, r6
 8001726:	4658      	mov	r0, fp
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	4661      	mov	r1, ip
 800172c:	9100      	str	r1, [sp, #0]
 800172e:	2802      	cmp	r0, #2
 8001730:	d100      	bne.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e075      	b.n	8001820 <__aeabi_dmul+0x1b0>
 8001734:	2803      	cmp	r0, #3
 8001736:	d100      	bne.n	800173a <__aeabi_dmul+0xca>
 8001738:	e1fe      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 800173a:	2801      	cmp	r0, #1
 800173c:	d000      	beq.n	8001740 <__aeabi_dmul+0xd0>
 800173e:	e12c      	b.n	800199a <__aeabi_dmul+0x32a>
 8001740:	2300      	movs	r3, #0
 8001742:	2700      	movs	r7, #0
 8001744:	2600      	movs	r6, #0
 8001746:	2500      	movs	r5, #0
 8001748:	033f      	lsls	r7, r7, #12
 800174a:	0d2a      	lsrs	r2, r5, #20
 800174c:	0b3f      	lsrs	r7, r7, #12
 800174e:	48b3      	ldr	r0, [pc, #716]	; (8001a1c <__aeabi_dmul+0x3ac>)
 8001750:	0512      	lsls	r2, r2, #20
 8001752:	433a      	orrs	r2, r7
 8001754:	4002      	ands	r2, r0
 8001756:	051b      	lsls	r3, r3, #20
 8001758:	4313      	orrs	r3, r2
 800175a:	9a00      	ldr	r2, [sp, #0]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	07d1      	lsls	r1, r2, #31
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	430b      	orrs	r3, r1
 8001764:	0030      	movs	r0, r6
 8001766:	0019      	movs	r1, r3
 8001768:	b007      	add	sp, #28
 800176a:	bc3c      	pop	{r2, r3, r4, r5}
 800176c:	4690      	mov	r8, r2
 800176e:	4699      	mov	r9, r3
 8001770:	46a2      	mov	sl, r4
 8001772:	46ab      	mov	fp, r5
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	465b      	mov	r3, fp
 8001778:	433b      	orrs	r3, r7
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	d100      	bne.n	8001780 <__aeabi_dmul+0x110>
 800177e:	e12f      	b.n	80019e0 <__aeabi_dmul+0x370>
 8001780:	2f00      	cmp	r7, #0
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x116>
 8001784:	e1a5      	b.n	8001ad2 <__aeabi_dmul+0x462>
 8001786:	0038      	movs	r0, r7
 8001788:	f000 fe58 	bl	800243c <__clzsi2>
 800178c:	0003      	movs	r3, r0
 800178e:	3b0b      	subs	r3, #11
 8001790:	2b1c      	cmp	r3, #28
 8001792:	dd00      	ble.n	8001796 <__aeabi_dmul+0x126>
 8001794:	e196      	b.n	8001ac4 <__aeabi_dmul+0x454>
 8001796:	221d      	movs	r2, #29
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	465a      	mov	r2, fp
 800179c:	0001      	movs	r1, r0
 800179e:	40da      	lsrs	r2, r3
 80017a0:	465e      	mov	r6, fp
 80017a2:	3908      	subs	r1, #8
 80017a4:	408f      	lsls	r7, r1
 80017a6:	0013      	movs	r3, r2
 80017a8:	408e      	lsls	r6, r1
 80017aa:	433b      	orrs	r3, r7
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	4b9c      	ldr	r3, [pc, #624]	; (8001a20 <__aeabi_dmul+0x3b0>)
 80017b0:	2700      	movs	r7, #0
 80017b2:	1a1b      	subs	r3, r3, r0
 80017b4:	4699      	mov	r9, r3
 80017b6:	2300      	movs	r3, #0
 80017b8:	469b      	mov	fp, r3
 80017ba:	e77d      	b.n	80016b8 <__aeabi_dmul+0x48>
 80017bc:	4641      	mov	r1, r8
 80017be:	4653      	mov	r3, sl
 80017c0:	430b      	orrs	r3, r1
 80017c2:	4993      	ldr	r1, [pc, #588]	; (8001a10 <__aeabi_dmul+0x3a0>)
 80017c4:	468c      	mov	ip, r1
 80017c6:	44e1      	add	r9, ip
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d000      	beq.n	80017ce <__aeabi_dmul+0x15e>
 80017cc:	e11a      	b.n	8001a04 <__aeabi_dmul+0x394>
 80017ce:	2202      	movs	r2, #2
 80017d0:	2002      	movs	r0, #2
 80017d2:	4317      	orrs	r7, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	e78c      	b.n	80016f2 <__aeabi_dmul+0x82>
 80017d8:	4313      	orrs	r3, r2
 80017da:	d100      	bne.n	80017de <__aeabi_dmul+0x16e>
 80017dc:	e10d      	b.n	80019fa <__aeabi_dmul+0x38a>
 80017de:	4643      	mov	r3, r8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dmul+0x176>
 80017e4:	e181      	b.n	8001aea <__aeabi_dmul+0x47a>
 80017e6:	4640      	mov	r0, r8
 80017e8:	f000 fe28 	bl	800243c <__clzsi2>
 80017ec:	0002      	movs	r2, r0
 80017ee:	3a0b      	subs	r2, #11
 80017f0:	2a1c      	cmp	r2, #28
 80017f2:	dd00      	ble.n	80017f6 <__aeabi_dmul+0x186>
 80017f4:	e172      	b.n	8001adc <__aeabi_dmul+0x46c>
 80017f6:	0001      	movs	r1, r0
 80017f8:	4643      	mov	r3, r8
 80017fa:	3908      	subs	r1, #8
 80017fc:	408b      	lsls	r3, r1
 80017fe:	4698      	mov	r8, r3
 8001800:	231d      	movs	r3, #29
 8001802:	1a9a      	subs	r2, r3, r2
 8001804:	4653      	mov	r3, sl
 8001806:	40d3      	lsrs	r3, r2
 8001808:	001a      	movs	r2, r3
 800180a:	4643      	mov	r3, r8
 800180c:	4313      	orrs	r3, r2
 800180e:	4652      	mov	r2, sl
 8001810:	408a      	lsls	r2, r1
 8001812:	4649      	mov	r1, r9
 8001814:	1a08      	subs	r0, r1, r0
 8001816:	4982      	ldr	r1, [pc, #520]	; (8001a20 <__aeabi_dmul+0x3b0>)
 8001818:	4689      	mov	r9, r1
 800181a:	4481      	add	r9, r0
 800181c:	2000      	movs	r0, #0
 800181e:	e768      	b.n	80016f2 <__aeabi_dmul+0x82>
 8001820:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <__aeabi_dmul+0x3a0>)
 8001822:	2700      	movs	r7, #0
 8001824:	2600      	movs	r6, #0
 8001826:	e78e      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001828:	0c14      	lsrs	r4, r2, #16
 800182a:	0412      	lsls	r2, r2, #16
 800182c:	0c12      	lsrs	r2, r2, #16
 800182e:	0011      	movs	r1, r2
 8001830:	0c37      	lsrs	r7, r6, #16
 8001832:	0436      	lsls	r6, r6, #16
 8001834:	0c35      	lsrs	r5, r6, #16
 8001836:	4379      	muls	r1, r7
 8001838:	0028      	movs	r0, r5
 800183a:	468c      	mov	ip, r1
 800183c:	002e      	movs	r6, r5
 800183e:	4360      	muls	r0, r4
 8001840:	4460      	add	r0, ip
 8001842:	4683      	mov	fp, r0
 8001844:	4356      	muls	r6, r2
 8001846:	0021      	movs	r1, r4
 8001848:	0c30      	lsrs	r0, r6, #16
 800184a:	4680      	mov	r8, r0
 800184c:	4658      	mov	r0, fp
 800184e:	4379      	muls	r1, r7
 8001850:	4440      	add	r0, r8
 8001852:	9102      	str	r1, [sp, #8]
 8001854:	4584      	cmp	ip, r0
 8001856:	d906      	bls.n	8001866 <__aeabi_dmul+0x1f6>
 8001858:	4688      	mov	r8, r1
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	0249      	lsls	r1, r1, #9
 800185e:	468c      	mov	ip, r1
 8001860:	44e0      	add	r8, ip
 8001862:	4641      	mov	r1, r8
 8001864:	9102      	str	r1, [sp, #8]
 8001866:	0436      	lsls	r6, r6, #16
 8001868:	0c01      	lsrs	r1, r0, #16
 800186a:	0c36      	lsrs	r6, r6, #16
 800186c:	0400      	lsls	r0, r0, #16
 800186e:	468b      	mov	fp, r1
 8001870:	1981      	adds	r1, r0, r6
 8001872:	0c1e      	lsrs	r6, r3, #16
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	9103      	str	r1, [sp, #12]
 800187a:	0019      	movs	r1, r3
 800187c:	4379      	muls	r1, r7
 800187e:	468c      	mov	ip, r1
 8001880:	0028      	movs	r0, r5
 8001882:	4375      	muls	r5, r6
 8001884:	4465      	add	r5, ip
 8001886:	46a8      	mov	r8, r5
 8001888:	4358      	muls	r0, r3
 800188a:	0c05      	lsrs	r5, r0, #16
 800188c:	4445      	add	r5, r8
 800188e:	4377      	muls	r7, r6
 8001890:	42a9      	cmp	r1, r5
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x22c>
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	468c      	mov	ip, r1
 800189a:	4467      	add	r7, ip
 800189c:	0c29      	lsrs	r1, r5, #16
 800189e:	468c      	mov	ip, r1
 80018a0:	0039      	movs	r1, r7
 80018a2:	0400      	lsls	r0, r0, #16
 80018a4:	0c00      	lsrs	r0, r0, #16
 80018a6:	042d      	lsls	r5, r5, #16
 80018a8:	182d      	adds	r5, r5, r0
 80018aa:	4461      	add	r1, ip
 80018ac:	44ab      	add	fp, r5
 80018ae:	9105      	str	r1, [sp, #20]
 80018b0:	4659      	mov	r1, fp
 80018b2:	9104      	str	r1, [sp, #16]
 80018b4:	9901      	ldr	r1, [sp, #4]
 80018b6:	040f      	lsls	r7, r1, #16
 80018b8:	0c3f      	lsrs	r7, r7, #16
 80018ba:	0c08      	lsrs	r0, r1, #16
 80018bc:	0039      	movs	r1, r7
 80018be:	4351      	muls	r1, r2
 80018c0:	4342      	muls	r2, r0
 80018c2:	4690      	mov	r8, r2
 80018c4:	0002      	movs	r2, r0
 80018c6:	468c      	mov	ip, r1
 80018c8:	0c09      	lsrs	r1, r1, #16
 80018ca:	468b      	mov	fp, r1
 80018cc:	4362      	muls	r2, r4
 80018ce:	437c      	muls	r4, r7
 80018d0:	4444      	add	r4, r8
 80018d2:	445c      	add	r4, fp
 80018d4:	45a0      	cmp	r8, r4
 80018d6:	d903      	bls.n	80018e0 <__aeabi_dmul+0x270>
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0249      	lsls	r1, r1, #9
 80018dc:	4688      	mov	r8, r1
 80018de:	4442      	add	r2, r8
 80018e0:	0c21      	lsrs	r1, r4, #16
 80018e2:	4688      	mov	r8, r1
 80018e4:	4661      	mov	r1, ip
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	0c09      	lsrs	r1, r1, #16
 80018ea:	468c      	mov	ip, r1
 80018ec:	0039      	movs	r1, r7
 80018ee:	4359      	muls	r1, r3
 80018f0:	4343      	muls	r3, r0
 80018f2:	4370      	muls	r0, r6
 80018f4:	437e      	muls	r6, r7
 80018f6:	0c0f      	lsrs	r7, r1, #16
 80018f8:	18f6      	adds	r6, r6, r3
 80018fa:	0424      	lsls	r4, r4, #16
 80018fc:	19be      	adds	r6, r7, r6
 80018fe:	4464      	add	r4, ip
 8001900:	4442      	add	r2, r8
 8001902:	468c      	mov	ip, r1
 8001904:	42b3      	cmp	r3, r6
 8001906:	d903      	bls.n	8001910 <__aeabi_dmul+0x2a0>
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	4698      	mov	r8, r3
 800190e:	4440      	add	r0, r8
 8001910:	9b02      	ldr	r3, [sp, #8]
 8001912:	4661      	mov	r1, ip
 8001914:	4698      	mov	r8, r3
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	0437      	lsls	r7, r6, #16
 800191a:	4443      	add	r3, r8
 800191c:	469b      	mov	fp, r3
 800191e:	45ab      	cmp	fp, r5
 8001920:	41ad      	sbcs	r5, r5
 8001922:	426b      	negs	r3, r5
 8001924:	040d      	lsls	r5, r1, #16
 8001926:	9905      	ldr	r1, [sp, #20]
 8001928:	0c2d      	lsrs	r5, r5, #16
 800192a:	468c      	mov	ip, r1
 800192c:	197f      	adds	r7, r7, r5
 800192e:	4467      	add	r7, ip
 8001930:	18fd      	adds	r5, r7, r3
 8001932:	46a8      	mov	r8, r5
 8001934:	465d      	mov	r5, fp
 8001936:	192d      	adds	r5, r5, r4
 8001938:	42a5      	cmp	r5, r4
 800193a:	41a4      	sbcs	r4, r4
 800193c:	4693      	mov	fp, r2
 800193e:	4264      	negs	r4, r4
 8001940:	46a4      	mov	ip, r4
 8001942:	44c3      	add	fp, r8
 8001944:	44dc      	add	ip, fp
 8001946:	428f      	cmp	r7, r1
 8001948:	41bf      	sbcs	r7, r7
 800194a:	4598      	cmp	r8, r3
 800194c:	419b      	sbcs	r3, r3
 800194e:	4593      	cmp	fp, r2
 8001950:	4192      	sbcs	r2, r2
 8001952:	45a4      	cmp	ip, r4
 8001954:	41a4      	sbcs	r4, r4
 8001956:	425b      	negs	r3, r3
 8001958:	427f      	negs	r7, r7
 800195a:	431f      	orrs	r7, r3
 800195c:	0c36      	lsrs	r6, r6, #16
 800195e:	4252      	negs	r2, r2
 8001960:	4264      	negs	r4, r4
 8001962:	19bf      	adds	r7, r7, r6
 8001964:	4322      	orrs	r2, r4
 8001966:	18bf      	adds	r7, r7, r2
 8001968:	4662      	mov	r2, ip
 800196a:	1838      	adds	r0, r7, r0
 800196c:	0243      	lsls	r3, r0, #9
 800196e:	0dd2      	lsrs	r2, r2, #23
 8001970:	9903      	ldr	r1, [sp, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	026a      	lsls	r2, r5, #9
 8001976:	430a      	orrs	r2, r1
 8001978:	1e50      	subs	r0, r2, #1
 800197a:	4182      	sbcs	r2, r0
 800197c:	4661      	mov	r1, ip
 800197e:	0ded      	lsrs	r5, r5, #23
 8001980:	432a      	orrs	r2, r5
 8001982:	024e      	lsls	r6, r1, #9
 8001984:	4332      	orrs	r2, r6
 8001986:	01d9      	lsls	r1, r3, #7
 8001988:	d400      	bmi.n	800198c <__aeabi_dmul+0x31c>
 800198a:	e0b3      	b.n	8001af4 <__aeabi_dmul+0x484>
 800198c:	2601      	movs	r6, #1
 800198e:	0850      	lsrs	r0, r2, #1
 8001990:	4032      	ands	r2, r6
 8001992:	4302      	orrs	r2, r0
 8001994:	07de      	lsls	r6, r3, #31
 8001996:	4332      	orrs	r2, r6
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	4c22      	ldr	r4, [pc, #136]	; (8001a24 <__aeabi_dmul+0x3b4>)
 800199c:	4454      	add	r4, sl
 800199e:	2c00      	cmp	r4, #0
 80019a0:	dd62      	ble.n	8001a68 <__aeabi_dmul+0x3f8>
 80019a2:	0751      	lsls	r1, r2, #29
 80019a4:	d009      	beq.n	80019ba <__aeabi_dmul+0x34a>
 80019a6:	200f      	movs	r0, #15
 80019a8:	4010      	ands	r0, r2
 80019aa:	2804      	cmp	r0, #4
 80019ac:	d005      	beq.n	80019ba <__aeabi_dmul+0x34a>
 80019ae:	1d10      	adds	r0, r2, #4
 80019b0:	4290      	cmp	r0, r2
 80019b2:	4192      	sbcs	r2, r2
 80019b4:	4252      	negs	r2, r2
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	0002      	movs	r2, r0
 80019ba:	01d9      	lsls	r1, r3, #7
 80019bc:	d504      	bpl.n	80019c8 <__aeabi_dmul+0x358>
 80019be:	2480      	movs	r4, #128	; 0x80
 80019c0:	4819      	ldr	r0, [pc, #100]	; (8001a28 <__aeabi_dmul+0x3b8>)
 80019c2:	00e4      	lsls	r4, r4, #3
 80019c4:	4003      	ands	r3, r0
 80019c6:	4454      	add	r4, sl
 80019c8:	4818      	ldr	r0, [pc, #96]	; (8001a2c <__aeabi_dmul+0x3bc>)
 80019ca:	4284      	cmp	r4, r0
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x360>
 80019ce:	e727      	b.n	8001820 <__aeabi_dmul+0x1b0>
 80019d0:	075e      	lsls	r6, r3, #29
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	08d2      	lsrs	r2, r2, #3
 80019d6:	0b1f      	lsrs	r7, r3, #12
 80019d8:	0563      	lsls	r3, r4, #21
 80019da:	4316      	orrs	r6, r2
 80019dc:	0d5b      	lsrs	r3, r3, #21
 80019de:	e6b2      	b.n	8001746 <__aeabi_dmul+0xd6>
 80019e0:	2300      	movs	r3, #0
 80019e2:	4699      	mov	r9, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	2704      	movs	r7, #4
 80019e8:	2600      	movs	r6, #0
 80019ea:	469b      	mov	fp, r3
 80019ec:	e664      	b.n	80016b8 <__aeabi_dmul+0x48>
 80019ee:	2303      	movs	r3, #3
 80019f0:	9701      	str	r7, [sp, #4]
 80019f2:	4681      	mov	r9, r0
 80019f4:	270c      	movs	r7, #12
 80019f6:	469b      	mov	fp, r3
 80019f8:	e65e      	b.n	80016b8 <__aeabi_dmul+0x48>
 80019fa:	2201      	movs	r2, #1
 80019fc:	2001      	movs	r0, #1
 80019fe:	4317      	orrs	r7, r2
 8001a00:	2200      	movs	r2, #0
 8001a02:	e676      	b.n	80016f2 <__aeabi_dmul+0x82>
 8001a04:	2303      	movs	r3, #3
 8001a06:	2003      	movs	r0, #3
 8001a08:	431f      	orrs	r7, r3
 8001a0a:	4643      	mov	r3, r8
 8001a0c:	e671      	b.n	80016f2 <__aeabi_dmul+0x82>
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	000007ff 	.word	0x000007ff
 8001a14:	fffffc01 	.word	0xfffffc01
 8001a18:	080069e0 	.word	0x080069e0
 8001a1c:	800fffff 	.word	0x800fffff
 8001a20:	fffffc0d 	.word	0xfffffc0d
 8001a24:	000003ff 	.word	0x000003ff
 8001a28:	feffffff 	.word	0xfeffffff
 8001a2c:	000007fe 	.word	0x000007fe
 8001a30:	2300      	movs	r3, #0
 8001a32:	2780      	movs	r7, #128	; 0x80
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	033f      	lsls	r7, r7, #12
 8001a38:	2600      	movs	r6, #0
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001a3c:	e683      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001a3e:	9b01      	ldr	r3, [sp, #4]
 8001a40:	0032      	movs	r2, r6
 8001a42:	46a4      	mov	ip, r4
 8001a44:	4658      	mov	r0, fp
 8001a46:	e670      	b.n	800172a <__aeabi_dmul+0xba>
 8001a48:	46ac      	mov	ip, r5
 8001a4a:	e66e      	b.n	800172a <__aeabi_dmul+0xba>
 8001a4c:	2780      	movs	r7, #128	; 0x80
 8001a4e:	9901      	ldr	r1, [sp, #4]
 8001a50:	033f      	lsls	r7, r7, #12
 8001a52:	4239      	tst	r1, r7
 8001a54:	d02d      	beq.n	8001ab2 <__aeabi_dmul+0x442>
 8001a56:	423b      	tst	r3, r7
 8001a58:	d12b      	bne.n	8001ab2 <__aeabi_dmul+0x442>
 8001a5a:	431f      	orrs	r7, r3
 8001a5c:	033f      	lsls	r7, r7, #12
 8001a5e:	0b3f      	lsrs	r7, r7, #12
 8001a60:	9500      	str	r5, [sp, #0]
 8001a62:	0016      	movs	r6, r2
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001a66:	e66e      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001a68:	2501      	movs	r5, #1
 8001a6a:	1b2d      	subs	r5, r5, r4
 8001a6c:	2d38      	cmp	r5, #56	; 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dmul+0x402>
 8001a70:	e666      	b.n	8001740 <__aeabi_dmul+0xd0>
 8001a72:	2d1f      	cmp	r5, #31
 8001a74:	dc40      	bgt.n	8001af8 <__aeabi_dmul+0x488>
 8001a76:	4835      	ldr	r0, [pc, #212]	; (8001b4c <__aeabi_dmul+0x4dc>)
 8001a78:	001c      	movs	r4, r3
 8001a7a:	4450      	add	r0, sl
 8001a7c:	0016      	movs	r6, r2
 8001a7e:	4082      	lsls	r2, r0
 8001a80:	4084      	lsls	r4, r0
 8001a82:	40ee      	lsrs	r6, r5
 8001a84:	1e50      	subs	r0, r2, #1
 8001a86:	4182      	sbcs	r2, r0
 8001a88:	4334      	orrs	r4, r6
 8001a8a:	4314      	orrs	r4, r2
 8001a8c:	40eb      	lsrs	r3, r5
 8001a8e:	0762      	lsls	r2, r4, #29
 8001a90:	d009      	beq.n	8001aa6 <__aeabi_dmul+0x436>
 8001a92:	220f      	movs	r2, #15
 8001a94:	4022      	ands	r2, r4
 8001a96:	2a04      	cmp	r2, #4
 8001a98:	d005      	beq.n	8001aa6 <__aeabi_dmul+0x436>
 8001a9a:	0022      	movs	r2, r4
 8001a9c:	1d14      	adds	r4, r2, #4
 8001a9e:	4294      	cmp	r4, r2
 8001aa0:	4180      	sbcs	r0, r0
 8001aa2:	4240      	negs	r0, r0
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	021a      	lsls	r2, r3, #8
 8001aa8:	d53e      	bpl.n	8001b28 <__aeabi_dmul+0x4b8>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2700      	movs	r7, #0
 8001aae:	2600      	movs	r6, #0
 8001ab0:	e649      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001ab2:	2780      	movs	r7, #128	; 0x80
 8001ab4:	9b01      	ldr	r3, [sp, #4]
 8001ab6:	033f      	lsls	r7, r7, #12
 8001ab8:	431f      	orrs	r7, r3
 8001aba:	033f      	lsls	r7, r7, #12
 8001abc:	0b3f      	lsrs	r7, r7, #12
 8001abe:	9400      	str	r4, [sp, #0]
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001ac2:	e640      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	465a      	mov	r2, fp
 8001ac8:	3b28      	subs	r3, #40	; 0x28
 8001aca:	409a      	lsls	r2, r3
 8001acc:	2600      	movs	r6, #0
 8001ace:	9201      	str	r2, [sp, #4]
 8001ad0:	e66d      	b.n	80017ae <__aeabi_dmul+0x13e>
 8001ad2:	4658      	mov	r0, fp
 8001ad4:	f000 fcb2 	bl	800243c <__clzsi2>
 8001ad8:	3020      	adds	r0, #32
 8001ada:	e657      	b.n	800178c <__aeabi_dmul+0x11c>
 8001adc:	0003      	movs	r3, r0
 8001ade:	4652      	mov	r2, sl
 8001ae0:	3b28      	subs	r3, #40	; 0x28
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	e693      	b.n	8001812 <__aeabi_dmul+0x1a2>
 8001aea:	4650      	mov	r0, sl
 8001aec:	f000 fca6 	bl	800243c <__clzsi2>
 8001af0:	3020      	adds	r0, #32
 8001af2:	e67b      	b.n	80017ec <__aeabi_dmul+0x17c>
 8001af4:	46ca      	mov	sl, r9
 8001af6:	e750      	b.n	800199a <__aeabi_dmul+0x32a>
 8001af8:	201f      	movs	r0, #31
 8001afa:	001e      	movs	r6, r3
 8001afc:	4240      	negs	r0, r0
 8001afe:	1b04      	subs	r4, r0, r4
 8001b00:	40e6      	lsrs	r6, r4
 8001b02:	2d20      	cmp	r5, #32
 8001b04:	d003      	beq.n	8001b0e <__aeabi_dmul+0x49e>
 8001b06:	4c12      	ldr	r4, [pc, #72]	; (8001b50 <__aeabi_dmul+0x4e0>)
 8001b08:	4454      	add	r4, sl
 8001b0a:	40a3      	lsls	r3, r4
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	1e50      	subs	r0, r2, #1
 8001b10:	4182      	sbcs	r2, r0
 8001b12:	4332      	orrs	r2, r6
 8001b14:	2607      	movs	r6, #7
 8001b16:	2700      	movs	r7, #0
 8001b18:	4016      	ands	r6, r2
 8001b1a:	d009      	beq.n	8001b30 <__aeabi_dmul+0x4c0>
 8001b1c:	200f      	movs	r0, #15
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4010      	ands	r0, r2
 8001b22:	0014      	movs	r4, r2
 8001b24:	2804      	cmp	r0, #4
 8001b26:	d1b9      	bne.n	8001a9c <__aeabi_dmul+0x42c>
 8001b28:	0022      	movs	r2, r4
 8001b2a:	075e      	lsls	r6, r3, #29
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	0b1f      	lsrs	r7, r3, #12
 8001b30:	08d2      	lsrs	r2, r2, #3
 8001b32:	4316      	orrs	r6, r2
 8001b34:	2300      	movs	r3, #0
 8001b36:	e606      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001b38:	2780      	movs	r7, #128	; 0x80
 8001b3a:	033f      	lsls	r7, r7, #12
 8001b3c:	431f      	orrs	r7, r3
 8001b3e:	033f      	lsls	r7, r7, #12
 8001b40:	0b3f      	lsrs	r7, r7, #12
 8001b42:	0016      	movs	r6, r2
 8001b44:	4b00      	ldr	r3, [pc, #0]	; (8001b48 <__aeabi_dmul+0x4d8>)
 8001b46:	e5fe      	b.n	8001746 <__aeabi_dmul+0xd6>
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	0000041e 	.word	0x0000041e
 8001b50:	0000043e 	.word	0x0000043e

08001b54 <__aeabi_dsub>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	4657      	mov	r7, sl
 8001b58:	464e      	mov	r6, r9
 8001b5a:	4645      	mov	r5, r8
 8001b5c:	46de      	mov	lr, fp
 8001b5e:	000c      	movs	r4, r1
 8001b60:	0309      	lsls	r1, r1, #12
 8001b62:	b5e0      	push	{r5, r6, r7, lr}
 8001b64:	0a49      	lsrs	r1, r1, #9
 8001b66:	0f46      	lsrs	r6, r0, #29
 8001b68:	005f      	lsls	r7, r3, #1
 8001b6a:	4331      	orrs	r1, r6
 8001b6c:	031e      	lsls	r6, r3, #12
 8001b6e:	0fdb      	lsrs	r3, r3, #31
 8001b70:	0a76      	lsrs	r6, r6, #9
 8001b72:	469b      	mov	fp, r3
 8001b74:	0f53      	lsrs	r3, r2, #29
 8001b76:	4333      	orrs	r3, r6
 8001b78:	4ec8      	ldr	r6, [pc, #800]	; (8001e9c <__aeabi_dsub+0x348>)
 8001b7a:	0065      	lsls	r5, r4, #1
 8001b7c:	00c0      	lsls	r0, r0, #3
 8001b7e:	0fe4      	lsrs	r4, r4, #31
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	0d6d      	lsrs	r5, r5, #21
 8001b84:	46a2      	mov	sl, r4
 8001b86:	4681      	mov	r9, r0
 8001b88:	0d7f      	lsrs	r7, r7, #21
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	4690      	mov	r8, r2
 8001b8e:	42b7      	cmp	r7, r6
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x40>
 8001b92:	e0b9      	b.n	8001d08 <__aeabi_dsub+0x1b4>
 8001b94:	465b      	mov	r3, fp
 8001b96:	2601      	movs	r6, #1
 8001b98:	4073      	eors	r3, r6
 8001b9a:	469b      	mov	fp, r3
 8001b9c:	1bee      	subs	r6, r5, r7
 8001b9e:	45a3      	cmp	fp, r4
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x50>
 8001ba2:	e083      	b.n	8001cac <__aeabi_dsub+0x158>
 8001ba4:	2e00      	cmp	r6, #0
 8001ba6:	dd63      	ble.n	8001c70 <__aeabi_dsub+0x11c>
 8001ba8:	2f00      	cmp	r7, #0
 8001baa:	d000      	beq.n	8001bae <__aeabi_dsub+0x5a>
 8001bac:	e0b1      	b.n	8001d12 <__aeabi_dsub+0x1be>
 8001bae:	4663      	mov	r3, ip
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x62>
 8001bb4:	e123      	b.n	8001dfe <__aeabi_dsub+0x2aa>
 8001bb6:	1e73      	subs	r3, r6, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x6a>
 8001bbc:	e1ba      	b.n	8001f34 <__aeabi_dsub+0x3e0>
 8001bbe:	1a86      	subs	r6, r0, r2
 8001bc0:	4663      	mov	r3, ip
 8001bc2:	42b0      	cmp	r0, r6
 8001bc4:	4180      	sbcs	r0, r0
 8001bc6:	2501      	movs	r5, #1
 8001bc8:	1ac9      	subs	r1, r1, r3
 8001bca:	4240      	negs	r0, r0
 8001bcc:	1a09      	subs	r1, r1, r0
 8001bce:	020b      	lsls	r3, r1, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x80>
 8001bd2:	e147      	b.n	8001e64 <__aeabi_dsub+0x310>
 8001bd4:	0249      	lsls	r1, r1, #9
 8001bd6:	0a4b      	lsrs	r3, r1, #9
 8001bd8:	4698      	mov	r8, r3
 8001bda:	4643      	mov	r3, r8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x8e>
 8001be0:	e189      	b.n	8001ef6 <__aeabi_dsub+0x3a2>
 8001be2:	4640      	mov	r0, r8
 8001be4:	f000 fc2a 	bl	800243c <__clzsi2>
 8001be8:	0003      	movs	r3, r0
 8001bea:	3b08      	subs	r3, #8
 8001bec:	2b1f      	cmp	r3, #31
 8001bee:	dd00      	ble.n	8001bf2 <__aeabi_dsub+0x9e>
 8001bf0:	e17c      	b.n	8001eec <__aeabi_dsub+0x398>
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	40d0      	lsrs	r0, r2
 8001bfc:	4099      	lsls	r1, r3
 8001bfe:	0002      	movs	r2, r0
 8001c00:	409e      	lsls	r6, r3
 8001c02:	430a      	orrs	r2, r1
 8001c04:	429d      	cmp	r5, r3
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dsub+0xb6>
 8001c08:	e16a      	b.n	8001ee0 <__aeabi_dsub+0x38c>
 8001c0a:	1b5d      	subs	r5, r3, r5
 8001c0c:	1c6b      	adds	r3, r5, #1
 8001c0e:	2b1f      	cmp	r3, #31
 8001c10:	dd00      	ble.n	8001c14 <__aeabi_dsub+0xc0>
 8001c12:	e194      	b.n	8001f3e <__aeabi_dsub+0x3ea>
 8001c14:	2120      	movs	r1, #32
 8001c16:	0010      	movs	r0, r2
 8001c18:	0035      	movs	r5, r6
 8001c1a:	1ac9      	subs	r1, r1, r3
 8001c1c:	408e      	lsls	r6, r1
 8001c1e:	40da      	lsrs	r2, r3
 8001c20:	4088      	lsls	r0, r1
 8001c22:	40dd      	lsrs	r5, r3
 8001c24:	1e71      	subs	r1, r6, #1
 8001c26:	418e      	sbcs	r6, r1
 8001c28:	0011      	movs	r1, r2
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	4328      	orrs	r0, r5
 8001c2e:	2500      	movs	r5, #0
 8001c30:	4306      	orrs	r6, r0
 8001c32:	4032      	ands	r2, r6
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	d009      	beq.n	8001c4c <__aeabi_dsub+0xf8>
 8001c38:	230f      	movs	r3, #15
 8001c3a:	4033      	ands	r3, r6
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d005      	beq.n	8001c4c <__aeabi_dsub+0xf8>
 8001c40:	1d33      	adds	r3, r6, #4
 8001c42:	42b3      	cmp	r3, r6
 8001c44:	41b6      	sbcs	r6, r6
 8001c46:	4276      	negs	r6, r6
 8001c48:	1989      	adds	r1, r1, r6
 8001c4a:	001e      	movs	r6, r3
 8001c4c:	020b      	lsls	r3, r1, #8
 8001c4e:	d400      	bmi.n	8001c52 <__aeabi_dsub+0xfe>
 8001c50:	e23d      	b.n	80020ce <__aeabi_dsub+0x57a>
 8001c52:	1c6a      	adds	r2, r5, #1
 8001c54:	4b91      	ldr	r3, [pc, #580]	; (8001e9c <__aeabi_dsub+0x348>)
 8001c56:	0555      	lsls	r5, r2, #21
 8001c58:	0d6d      	lsrs	r5, r5, #21
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x10c>
 8001c5e:	e119      	b.n	8001e94 <__aeabi_dsub+0x340>
 8001c60:	4a8f      	ldr	r2, [pc, #572]	; (8001ea0 <__aeabi_dsub+0x34c>)
 8001c62:	08f6      	lsrs	r6, r6, #3
 8001c64:	400a      	ands	r2, r1
 8001c66:	0757      	lsls	r7, r2, #29
 8001c68:	0252      	lsls	r2, r2, #9
 8001c6a:	4337      	orrs	r7, r6
 8001c6c:	0b12      	lsrs	r2, r2, #12
 8001c6e:	e09b      	b.n	8001da8 <__aeabi_dsub+0x254>
 8001c70:	2e00      	cmp	r6, #0
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dsub+0x122>
 8001c74:	e0c5      	b.n	8001e02 <__aeabi_dsub+0x2ae>
 8001c76:	1c6e      	adds	r6, r5, #1
 8001c78:	0576      	lsls	r6, r6, #21
 8001c7a:	0d76      	lsrs	r6, r6, #21
 8001c7c:	2e01      	cmp	r6, #1
 8001c7e:	dc00      	bgt.n	8001c82 <__aeabi_dsub+0x12e>
 8001c80:	e148      	b.n	8001f14 <__aeabi_dsub+0x3c0>
 8001c82:	4667      	mov	r7, ip
 8001c84:	1a86      	subs	r6, r0, r2
 8001c86:	1bcb      	subs	r3, r1, r7
 8001c88:	42b0      	cmp	r0, r6
 8001c8a:	41bf      	sbcs	r7, r7
 8001c8c:	427f      	negs	r7, r7
 8001c8e:	46b8      	mov	r8, r7
 8001c90:	001f      	movs	r7, r3
 8001c92:	4643      	mov	r3, r8
 8001c94:	1aff      	subs	r7, r7, r3
 8001c96:	003b      	movs	r3, r7
 8001c98:	46b8      	mov	r8, r7
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	d500      	bpl.n	8001ca0 <__aeabi_dsub+0x14c>
 8001c9e:	e15f      	b.n	8001f60 <__aeabi_dsub+0x40c>
 8001ca0:	4337      	orrs	r7, r6
 8001ca2:	d19a      	bne.n	8001bda <__aeabi_dsub+0x86>
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	2500      	movs	r5, #0
 8001caa:	e079      	b.n	8001da0 <__aeabi_dsub+0x24c>
 8001cac:	2e00      	cmp	r6, #0
 8001cae:	dc00      	bgt.n	8001cb2 <__aeabi_dsub+0x15e>
 8001cb0:	e0fa      	b.n	8001ea8 <__aeabi_dsub+0x354>
 8001cb2:	2f00      	cmp	r7, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x164>
 8001cb6:	e08d      	b.n	8001dd4 <__aeabi_dsub+0x280>
 8001cb8:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <__aeabi_dsub+0x348>)
 8001cba:	429d      	cmp	r5, r3
 8001cbc:	d067      	beq.n	8001d8e <__aeabi_dsub+0x23a>
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	4667      	mov	r7, ip
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	431f      	orrs	r7, r3
 8001cc6:	46bc      	mov	ip, r7
 8001cc8:	2e38      	cmp	r6, #56	; 0x38
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dsub+0x17a>
 8001ccc:	e152      	b.n	8001f74 <__aeabi_dsub+0x420>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	4193      	sbcs	r3, r2
 8001cd6:	181e      	adds	r6, r3, r0
 8001cd8:	4286      	cmp	r6, r0
 8001cda:	4180      	sbcs	r0, r0
 8001cdc:	4240      	negs	r0, r0
 8001cde:	1809      	adds	r1, r1, r0
 8001ce0:	020b      	lsls	r3, r1, #8
 8001ce2:	d400      	bmi.n	8001ce6 <__aeabi_dsub+0x192>
 8001ce4:	e0be      	b.n	8001e64 <__aeabi_dsub+0x310>
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <__aeabi_dsub+0x348>)
 8001ce8:	3501      	adds	r5, #1
 8001cea:	429d      	cmp	r5, r3
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x19c>
 8001cee:	e0d2      	b.n	8001e96 <__aeabi_dsub+0x342>
 8001cf0:	4a6b      	ldr	r2, [pc, #428]	; (8001ea0 <__aeabi_dsub+0x34c>)
 8001cf2:	0873      	lsrs	r3, r6, #1
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	400e      	ands	r6, r1
 8001cfa:	431e      	orrs	r6, r3
 8001cfc:	0851      	lsrs	r1, r2, #1
 8001cfe:	07d3      	lsls	r3, r2, #31
 8001d00:	2207      	movs	r2, #7
 8001d02:	431e      	orrs	r6, r3
 8001d04:	4032      	ands	r2, r6
 8001d06:	e795      	b.n	8001c34 <__aeabi_dsub+0xe0>
 8001d08:	001e      	movs	r6, r3
 8001d0a:	4316      	orrs	r6, r2
 8001d0c:	d000      	beq.n	8001d10 <__aeabi_dsub+0x1bc>
 8001d0e:	e745      	b.n	8001b9c <__aeabi_dsub+0x48>
 8001d10:	e740      	b.n	8001b94 <__aeabi_dsub+0x40>
 8001d12:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <__aeabi_dsub+0x348>)
 8001d14:	429d      	cmp	r5, r3
 8001d16:	d03a      	beq.n	8001d8e <__aeabi_dsub+0x23a>
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	4667      	mov	r7, ip
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431f      	orrs	r7, r3
 8001d20:	46bc      	mov	ip, r7
 8001d22:	2e38      	cmp	r6, #56	; 0x38
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0x1d4>
 8001d26:	e0eb      	b.n	8001f00 <__aeabi_dsub+0x3ac>
 8001d28:	2e1f      	cmp	r6, #31
 8001d2a:	dc00      	bgt.n	8001d2e <__aeabi_dsub+0x1da>
 8001d2c:	e13a      	b.n	8001fa4 <__aeabi_dsub+0x450>
 8001d2e:	0033      	movs	r3, r6
 8001d30:	4667      	mov	r7, ip
 8001d32:	3b20      	subs	r3, #32
 8001d34:	40df      	lsrs	r7, r3
 8001d36:	003b      	movs	r3, r7
 8001d38:	2e20      	cmp	r6, #32
 8001d3a:	d005      	beq.n	8001d48 <__aeabi_dsub+0x1f4>
 8001d3c:	2740      	movs	r7, #64	; 0x40
 8001d3e:	1bbf      	subs	r7, r7, r6
 8001d40:	4666      	mov	r6, ip
 8001d42:	40be      	lsls	r6, r7
 8001d44:	4332      	orrs	r2, r6
 8001d46:	4690      	mov	r8, r2
 8001d48:	4646      	mov	r6, r8
 8001d4a:	1e72      	subs	r2, r6, #1
 8001d4c:	4196      	sbcs	r6, r2
 8001d4e:	4333      	orrs	r3, r6
 8001d50:	e0da      	b.n	8001f08 <__aeabi_dsub+0x3b4>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x204>
 8001d56:	e214      	b.n	8002182 <__aeabi_dsub+0x62e>
 8001d58:	4663      	mov	r3, ip
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x20c>
 8001d5e:	e168      	b.n	8002032 <__aeabi_dsub+0x4de>
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	074e      	lsls	r6, r1, #29
 8001d64:	08c0      	lsrs	r0, r0, #3
 8001d66:	08c9      	lsrs	r1, r1, #3
 8001d68:	031b      	lsls	r3, r3, #12
 8001d6a:	4306      	orrs	r6, r0
 8001d6c:	4219      	tst	r1, r3
 8001d6e:	d008      	beq.n	8001d82 <__aeabi_dsub+0x22e>
 8001d70:	4660      	mov	r0, ip
 8001d72:	08c0      	lsrs	r0, r0, #3
 8001d74:	4218      	tst	r0, r3
 8001d76:	d104      	bne.n	8001d82 <__aeabi_dsub+0x22e>
 8001d78:	4663      	mov	r3, ip
 8001d7a:	0001      	movs	r1, r0
 8001d7c:	08d2      	lsrs	r2, r2, #3
 8001d7e:	075e      	lsls	r6, r3, #29
 8001d80:	4316      	orrs	r6, r2
 8001d82:	00f3      	lsls	r3, r6, #3
 8001d84:	4699      	mov	r9, r3
 8001d86:	00c9      	lsls	r1, r1, #3
 8001d88:	0f72      	lsrs	r2, r6, #29
 8001d8a:	4d44      	ldr	r5, [pc, #272]	; (8001e9c <__aeabi_dsub+0x348>)
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	464b      	mov	r3, r9
 8001d90:	08de      	lsrs	r6, r3, #3
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <__aeabi_dsub+0x348>)
 8001d94:	074f      	lsls	r7, r1, #29
 8001d96:	4337      	orrs	r7, r6
 8001d98:	08ca      	lsrs	r2, r1, #3
 8001d9a:	429d      	cmp	r5, r3
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x24c>
 8001d9e:	e06e      	b.n	8001e7e <__aeabi_dsub+0x32a>
 8001da0:	0312      	lsls	r2, r2, #12
 8001da2:	056d      	lsls	r5, r5, #21
 8001da4:	0b12      	lsrs	r2, r2, #12
 8001da6:	0d6d      	lsrs	r5, r5, #21
 8001da8:	2100      	movs	r1, #0
 8001daa:	0312      	lsls	r2, r2, #12
 8001dac:	0b13      	lsrs	r3, r2, #12
 8001dae:	0d0a      	lsrs	r2, r1, #20
 8001db0:	0512      	lsls	r2, r2, #20
 8001db2:	431a      	orrs	r2, r3
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <__aeabi_dsub+0x350>)
 8001db6:	052d      	lsls	r5, r5, #20
 8001db8:	4013      	ands	r3, r2
 8001dba:	432b      	orrs	r3, r5
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	07e4      	lsls	r4, r4, #31
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	0038      	movs	r0, r7
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	bc3c      	pop	{r2, r3, r4, r5}
 8001dca:	4690      	mov	r8, r2
 8001dcc:	4699      	mov	r9, r3
 8001dce:	46a2      	mov	sl, r4
 8001dd0:	46ab      	mov	fp, r5
 8001dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	d011      	beq.n	8001dfe <__aeabi_dsub+0x2aa>
 8001dda:	1e73      	subs	r3, r6, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d000      	beq.n	8001de2 <__aeabi_dsub+0x28e>
 8001de0:	e107      	b.n	8001ff2 <__aeabi_dsub+0x49e>
 8001de2:	1886      	adds	r6, r0, r2
 8001de4:	4286      	cmp	r6, r0
 8001de6:	4180      	sbcs	r0, r0
 8001de8:	4461      	add	r1, ip
 8001dea:	4240      	negs	r0, r0
 8001dec:	1809      	adds	r1, r1, r0
 8001dee:	2501      	movs	r5, #1
 8001df0:	020b      	lsls	r3, r1, #8
 8001df2:	d537      	bpl.n	8001e64 <__aeabi_dsub+0x310>
 8001df4:	2502      	movs	r5, #2
 8001df6:	e77b      	b.n	8001cf0 <__aeabi_dsub+0x19c>
 8001df8:	003e      	movs	r6, r7
 8001dfa:	4661      	mov	r1, ip
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	0035      	movs	r5, r6
 8001e00:	e7c5      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8001e02:	465c      	mov	r4, fp
 8001e04:	2d00      	cmp	r5, #0
 8001e06:	d000      	beq.n	8001e0a <__aeabi_dsub+0x2b6>
 8001e08:	e0e1      	b.n	8001fce <__aeabi_dsub+0x47a>
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	4303      	orrs	r3, r0
 8001e0e:	d0f3      	beq.n	8001df8 <__aeabi_dsub+0x2a4>
 8001e10:	1c73      	adds	r3, r6, #1
 8001e12:	d100      	bne.n	8001e16 <__aeabi_dsub+0x2c2>
 8001e14:	e1ac      	b.n	8002170 <__aeabi_dsub+0x61c>
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <__aeabi_dsub+0x348>)
 8001e18:	429f      	cmp	r7, r3
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x2ca>
 8001e1c:	e13a      	b.n	8002094 <__aeabi_dsub+0x540>
 8001e1e:	43f3      	mvns	r3, r6
 8001e20:	2b38      	cmp	r3, #56	; 0x38
 8001e22:	dd00      	ble.n	8001e26 <__aeabi_dsub+0x2d2>
 8001e24:	e16f      	b.n	8002106 <__aeabi_dsub+0x5b2>
 8001e26:	2b1f      	cmp	r3, #31
 8001e28:	dd00      	ble.n	8001e2c <__aeabi_dsub+0x2d8>
 8001e2a:	e18c      	b.n	8002146 <__aeabi_dsub+0x5f2>
 8001e2c:	2520      	movs	r5, #32
 8001e2e:	000e      	movs	r6, r1
 8001e30:	1aed      	subs	r5, r5, r3
 8001e32:	40ae      	lsls	r6, r5
 8001e34:	46b0      	mov	r8, r6
 8001e36:	0006      	movs	r6, r0
 8001e38:	46aa      	mov	sl, r5
 8001e3a:	40de      	lsrs	r6, r3
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	4335      	orrs	r5, r6
 8001e40:	002e      	movs	r6, r5
 8001e42:	4655      	mov	r5, sl
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	40a8      	lsls	r0, r5
 8001e48:	4663      	mov	r3, ip
 8001e4a:	1e45      	subs	r5, r0, #1
 8001e4c:	41a8      	sbcs	r0, r5
 8001e4e:	1a5b      	subs	r3, r3, r1
 8001e50:	469c      	mov	ip, r3
 8001e52:	4330      	orrs	r0, r6
 8001e54:	1a16      	subs	r6, r2, r0
 8001e56:	42b2      	cmp	r2, r6
 8001e58:	4192      	sbcs	r2, r2
 8001e5a:	4663      	mov	r3, ip
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	1a99      	subs	r1, r3, r2
 8001e60:	003d      	movs	r5, r7
 8001e62:	e6b4      	b.n	8001bce <__aeabi_dsub+0x7a>
 8001e64:	2207      	movs	r2, #7
 8001e66:	4032      	ands	r2, r6
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_dsub+0x31a>
 8001e6c:	e6e4      	b.n	8001c38 <__aeabi_dsub+0xe4>
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <__aeabi_dsub+0x348>)
 8001e70:	08f6      	lsrs	r6, r6, #3
 8001e72:	074f      	lsls	r7, r1, #29
 8001e74:	4337      	orrs	r7, r6
 8001e76:	08ca      	lsrs	r2, r1, #3
 8001e78:	429d      	cmp	r5, r3
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_dsub+0x32a>
 8001e7c:	e790      	b.n	8001da0 <__aeabi_dsub+0x24c>
 8001e7e:	003b      	movs	r3, r7
 8001e80:	4313      	orrs	r3, r2
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dsub+0x332>
 8001e84:	e1a6      	b.n	80021d4 <__aeabi_dsub+0x680>
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	031b      	lsls	r3, r3, #12
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	0b12      	lsrs	r2, r2, #12
 8001e90:	4d02      	ldr	r5, [pc, #8]	; (8001e9c <__aeabi_dsub+0x348>)
 8001e92:	e789      	b.n	8001da8 <__aeabi_dsub+0x254>
 8001e94:	0015      	movs	r5, r2
 8001e96:	2200      	movs	r2, #0
 8001e98:	2700      	movs	r7, #0
 8001e9a:	e785      	b.n	8001da8 <__aeabi_dsub+0x254>
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	ff7fffff 	.word	0xff7fffff
 8001ea4:	800fffff 	.word	0x800fffff
 8001ea8:	2e00      	cmp	r6, #0
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x35a>
 8001eac:	e0c7      	b.n	800203e <__aeabi_dsub+0x4ea>
 8001eae:	1c6b      	adds	r3, r5, #1
 8001eb0:	055e      	lsls	r6, r3, #21
 8001eb2:	0d76      	lsrs	r6, r6, #21
 8001eb4:	2e01      	cmp	r6, #1
 8001eb6:	dc00      	bgt.n	8001eba <__aeabi_dsub+0x366>
 8001eb8:	e0f0      	b.n	800209c <__aeabi_dsub+0x548>
 8001eba:	4dc8      	ldr	r5, [pc, #800]	; (80021dc <__aeabi_dsub+0x688>)
 8001ebc:	42ab      	cmp	r3, r5
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x36e>
 8001ec0:	e0b9      	b.n	8002036 <__aeabi_dsub+0x4e2>
 8001ec2:	1885      	adds	r5, r0, r2
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	4285      	cmp	r5, r0
 8001ec8:	4189      	sbcs	r1, r1
 8001eca:	4462      	add	r2, ip
 8001ecc:	4249      	negs	r1, r1
 8001ece:	1851      	adds	r1, r2, r1
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	07ce      	lsls	r6, r1, #31
 8001ed4:	086d      	lsrs	r5, r5, #1
 8001ed6:	432e      	orrs	r6, r5
 8001ed8:	0849      	lsrs	r1, r1, #1
 8001eda:	4032      	ands	r2, r6
 8001edc:	001d      	movs	r5, r3
 8001ede:	e6a9      	b.n	8001c34 <__aeabi_dsub+0xe0>
 8001ee0:	49bf      	ldr	r1, [pc, #764]	; (80021e0 <__aeabi_dsub+0x68c>)
 8001ee2:	1aed      	subs	r5, r5, r3
 8001ee4:	4011      	ands	r1, r2
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4032      	ands	r2, r6
 8001eea:	e6a3      	b.n	8001c34 <__aeabi_dsub+0xe0>
 8001eec:	0032      	movs	r2, r6
 8001eee:	3828      	subs	r0, #40	; 0x28
 8001ef0:	4082      	lsls	r2, r0
 8001ef2:	2600      	movs	r6, #0
 8001ef4:	e686      	b.n	8001c04 <__aeabi_dsub+0xb0>
 8001ef6:	0030      	movs	r0, r6
 8001ef8:	f000 faa0 	bl	800243c <__clzsi2>
 8001efc:	3020      	adds	r0, #32
 8001efe:	e673      	b.n	8001be8 <__aeabi_dsub+0x94>
 8001f00:	4663      	mov	r3, ip
 8001f02:	4313      	orrs	r3, r2
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	4193      	sbcs	r3, r2
 8001f08:	1ac6      	subs	r6, r0, r3
 8001f0a:	42b0      	cmp	r0, r6
 8001f0c:	4180      	sbcs	r0, r0
 8001f0e:	4240      	negs	r0, r0
 8001f10:	1a09      	subs	r1, r1, r0
 8001f12:	e65c      	b.n	8001bce <__aeabi_dsub+0x7a>
 8001f14:	000e      	movs	r6, r1
 8001f16:	4667      	mov	r7, ip
 8001f18:	4306      	orrs	r6, r0
 8001f1a:	4317      	orrs	r7, r2
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	d15e      	bne.n	8001fde <__aeabi_dsub+0x48a>
 8001f20:	2e00      	cmp	r6, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x3d2>
 8001f24:	e0f3      	b.n	800210e <__aeabi_dsub+0x5ba>
 8001f26:	2f00      	cmp	r7, #0
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x3d8>
 8001f2a:	e11e      	b.n	800216a <__aeabi_dsub+0x616>
 8001f2c:	465c      	mov	r4, fp
 8001f2e:	4661      	mov	r1, ip
 8001f30:	4691      	mov	r9, r2
 8001f32:	e72c      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8001f34:	4fa9      	ldr	r7, [pc, #676]	; (80021dc <__aeabi_dsub+0x688>)
 8001f36:	42be      	cmp	r6, r7
 8001f38:	d07b      	beq.n	8002032 <__aeabi_dsub+0x4de>
 8001f3a:	001e      	movs	r6, r3
 8001f3c:	e6f1      	b.n	8001d22 <__aeabi_dsub+0x1ce>
 8001f3e:	0010      	movs	r0, r2
 8001f40:	3d1f      	subs	r5, #31
 8001f42:	40e8      	lsrs	r0, r5
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d003      	beq.n	8001f50 <__aeabi_dsub+0x3fc>
 8001f48:	2140      	movs	r1, #64	; 0x40
 8001f4a:	1acb      	subs	r3, r1, r3
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	4316      	orrs	r6, r2
 8001f50:	1e73      	subs	r3, r6, #1
 8001f52:	419e      	sbcs	r6, r3
 8001f54:	2207      	movs	r2, #7
 8001f56:	4306      	orrs	r6, r0
 8001f58:	4032      	ands	r2, r6
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	e783      	b.n	8001e68 <__aeabi_dsub+0x314>
 8001f60:	1a16      	subs	r6, r2, r0
 8001f62:	4663      	mov	r3, ip
 8001f64:	42b2      	cmp	r2, r6
 8001f66:	4180      	sbcs	r0, r0
 8001f68:	1a59      	subs	r1, r3, r1
 8001f6a:	4240      	negs	r0, r0
 8001f6c:	1a0b      	subs	r3, r1, r0
 8001f6e:	4698      	mov	r8, r3
 8001f70:	465c      	mov	r4, fp
 8001f72:	e632      	b.n	8001bda <__aeabi_dsub+0x86>
 8001f74:	2e1f      	cmp	r6, #31
 8001f76:	dd00      	ble.n	8001f7a <__aeabi_dsub+0x426>
 8001f78:	e0ab      	b.n	80020d2 <__aeabi_dsub+0x57e>
 8001f7a:	2720      	movs	r7, #32
 8001f7c:	1bbb      	subs	r3, r7, r6
 8001f7e:	469a      	mov	sl, r3
 8001f80:	4663      	mov	r3, ip
 8001f82:	4657      	mov	r7, sl
 8001f84:	40bb      	lsls	r3, r7
 8001f86:	4699      	mov	r9, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	464f      	mov	r7, r9
 8001f8c:	40f3      	lsrs	r3, r6
 8001f8e:	431f      	orrs	r7, r3
 8001f90:	003b      	movs	r3, r7
 8001f92:	4657      	mov	r7, sl
 8001f94:	40ba      	lsls	r2, r7
 8001f96:	1e57      	subs	r7, r2, #1
 8001f98:	41ba      	sbcs	r2, r7
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	4662      	mov	r2, ip
 8001f9e:	40f2      	lsrs	r2, r6
 8001fa0:	1889      	adds	r1, r1, r2
 8001fa2:	e698      	b.n	8001cd6 <__aeabi_dsub+0x182>
 8001fa4:	2720      	movs	r7, #32
 8001fa6:	1bbb      	subs	r3, r7, r6
 8001fa8:	469a      	mov	sl, r3
 8001faa:	4663      	mov	r3, ip
 8001fac:	4657      	mov	r7, sl
 8001fae:	40bb      	lsls	r3, r7
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	464f      	mov	r7, r9
 8001fb6:	40f3      	lsrs	r3, r6
 8001fb8:	431f      	orrs	r7, r3
 8001fba:	003b      	movs	r3, r7
 8001fbc:	4657      	mov	r7, sl
 8001fbe:	40ba      	lsls	r2, r7
 8001fc0:	1e57      	subs	r7, r2, #1
 8001fc2:	41ba      	sbcs	r2, r7
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	40f2      	lsrs	r2, r6
 8001fca:	1a89      	subs	r1, r1, r2
 8001fcc:	e79c      	b.n	8001f08 <__aeabi_dsub+0x3b4>
 8001fce:	4b83      	ldr	r3, [pc, #524]	; (80021dc <__aeabi_dsub+0x688>)
 8001fd0:	429f      	cmp	r7, r3
 8001fd2:	d05f      	beq.n	8002094 <__aeabi_dsub+0x540>
 8001fd4:	2580      	movs	r5, #128	; 0x80
 8001fd6:	042d      	lsls	r5, r5, #16
 8001fd8:	4273      	negs	r3, r6
 8001fda:	4329      	orrs	r1, r5
 8001fdc:	e720      	b.n	8001e20 <__aeabi_dsub+0x2cc>
 8001fde:	2e00      	cmp	r6, #0
 8001fe0:	d10c      	bne.n	8001ffc <__aeabi_dsub+0x4a8>
 8001fe2:	2f00      	cmp	r7, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x494>
 8001fe6:	e0d0      	b.n	800218a <__aeabi_dsub+0x636>
 8001fe8:	465c      	mov	r4, fp
 8001fea:	4661      	mov	r1, ip
 8001fec:	4691      	mov	r9, r2
 8001fee:	4d7b      	ldr	r5, [pc, #492]	; (80021dc <__aeabi_dsub+0x688>)
 8001ff0:	e6cd      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8001ff2:	4f7a      	ldr	r7, [pc, #488]	; (80021dc <__aeabi_dsub+0x688>)
 8001ff4:	42be      	cmp	r6, r7
 8001ff6:	d01c      	beq.n	8002032 <__aeabi_dsub+0x4de>
 8001ff8:	001e      	movs	r6, r3
 8001ffa:	e665      	b.n	8001cc8 <__aeabi_dsub+0x174>
 8001ffc:	2f00      	cmp	r7, #0
 8001ffe:	d018      	beq.n	8002032 <__aeabi_dsub+0x4de>
 8002000:	08c0      	lsrs	r0, r0, #3
 8002002:	074e      	lsls	r6, r1, #29
 8002004:	4306      	orrs	r6, r0
 8002006:	2080      	movs	r0, #128	; 0x80
 8002008:	08c9      	lsrs	r1, r1, #3
 800200a:	0300      	lsls	r0, r0, #12
 800200c:	4201      	tst	r1, r0
 800200e:	d008      	beq.n	8002022 <__aeabi_dsub+0x4ce>
 8002010:	4663      	mov	r3, ip
 8002012:	08dc      	lsrs	r4, r3, #3
 8002014:	4204      	tst	r4, r0
 8002016:	d104      	bne.n	8002022 <__aeabi_dsub+0x4ce>
 8002018:	0021      	movs	r1, r4
 800201a:	46da      	mov	sl, fp
 800201c:	08d2      	lsrs	r2, r2, #3
 800201e:	075e      	lsls	r6, r3, #29
 8002020:	4316      	orrs	r6, r2
 8002022:	00f3      	lsls	r3, r6, #3
 8002024:	4699      	mov	r9, r3
 8002026:	2401      	movs	r4, #1
 8002028:	4653      	mov	r3, sl
 800202a:	00c9      	lsls	r1, r1, #3
 800202c:	0f72      	lsrs	r2, r6, #29
 800202e:	4311      	orrs	r1, r2
 8002030:	401c      	ands	r4, r3
 8002032:	4d6a      	ldr	r5, [pc, #424]	; (80021dc <__aeabi_dsub+0x688>)
 8002034:	e6ab      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8002036:	001d      	movs	r5, r3
 8002038:	2200      	movs	r2, #0
 800203a:	2700      	movs	r7, #0
 800203c:	e6b4      	b.n	8001da8 <__aeabi_dsub+0x254>
 800203e:	2d00      	cmp	r5, #0
 8002040:	d159      	bne.n	80020f6 <__aeabi_dsub+0x5a2>
 8002042:	000b      	movs	r3, r1
 8002044:	4303      	orrs	r3, r0
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x4f6>
 8002048:	e6d6      	b.n	8001df8 <__aeabi_dsub+0x2a4>
 800204a:	1c73      	adds	r3, r6, #1
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x4fc>
 800204e:	e0b2      	b.n	80021b6 <__aeabi_dsub+0x662>
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <__aeabi_dsub+0x688>)
 8002052:	429f      	cmp	r7, r3
 8002054:	d01e      	beq.n	8002094 <__aeabi_dsub+0x540>
 8002056:	43f3      	mvns	r3, r6
 8002058:	2b38      	cmp	r3, #56	; 0x38
 800205a:	dc6f      	bgt.n	800213c <__aeabi_dsub+0x5e8>
 800205c:	2b1f      	cmp	r3, #31
 800205e:	dd00      	ble.n	8002062 <__aeabi_dsub+0x50e>
 8002060:	e097      	b.n	8002192 <__aeabi_dsub+0x63e>
 8002062:	2520      	movs	r5, #32
 8002064:	000e      	movs	r6, r1
 8002066:	1aed      	subs	r5, r5, r3
 8002068:	40ae      	lsls	r6, r5
 800206a:	46b0      	mov	r8, r6
 800206c:	0006      	movs	r6, r0
 800206e:	46aa      	mov	sl, r5
 8002070:	40de      	lsrs	r6, r3
 8002072:	4645      	mov	r5, r8
 8002074:	4335      	orrs	r5, r6
 8002076:	002e      	movs	r6, r5
 8002078:	4655      	mov	r5, sl
 800207a:	40a8      	lsls	r0, r5
 800207c:	40d9      	lsrs	r1, r3
 800207e:	1e45      	subs	r5, r0, #1
 8002080:	41a8      	sbcs	r0, r5
 8002082:	448c      	add	ip, r1
 8002084:	4306      	orrs	r6, r0
 8002086:	18b6      	adds	r6, r6, r2
 8002088:	4296      	cmp	r6, r2
 800208a:	4192      	sbcs	r2, r2
 800208c:	4251      	negs	r1, r2
 800208e:	4461      	add	r1, ip
 8002090:	003d      	movs	r5, r7
 8002092:	e625      	b.n	8001ce0 <__aeabi_dsub+0x18c>
 8002094:	003d      	movs	r5, r7
 8002096:	4661      	mov	r1, ip
 8002098:	4691      	mov	r9, r2
 800209a:	e678      	b.n	8001d8e <__aeabi_dsub+0x23a>
 800209c:	000b      	movs	r3, r1
 800209e:	4303      	orrs	r3, r0
 80020a0:	2d00      	cmp	r5, #0
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x552>
 80020a4:	e655      	b.n	8001d52 <__aeabi_dsub+0x1fe>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f5      	beq.n	8002096 <__aeabi_dsub+0x542>
 80020aa:	4663      	mov	r3, ip
 80020ac:	4313      	orrs	r3, r2
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x55e>
 80020b0:	e66d      	b.n	8001d8e <__aeabi_dsub+0x23a>
 80020b2:	1886      	adds	r6, r0, r2
 80020b4:	4286      	cmp	r6, r0
 80020b6:	4180      	sbcs	r0, r0
 80020b8:	4461      	add	r1, ip
 80020ba:	4240      	negs	r0, r0
 80020bc:	1809      	adds	r1, r1, r0
 80020be:	2200      	movs	r2, #0
 80020c0:	020b      	lsls	r3, r1, #8
 80020c2:	d400      	bmi.n	80020c6 <__aeabi_dsub+0x572>
 80020c4:	e6d0      	b.n	8001e68 <__aeabi_dsub+0x314>
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <__aeabi_dsub+0x68c>)
 80020c8:	3501      	adds	r5, #1
 80020ca:	4019      	ands	r1, r3
 80020cc:	e5b2      	b.n	8001c34 <__aeabi_dsub+0xe0>
 80020ce:	46b1      	mov	r9, r6
 80020d0:	e65d      	b.n	8001d8e <__aeabi_dsub+0x23a>
 80020d2:	0033      	movs	r3, r6
 80020d4:	4667      	mov	r7, ip
 80020d6:	3b20      	subs	r3, #32
 80020d8:	40df      	lsrs	r7, r3
 80020da:	003b      	movs	r3, r7
 80020dc:	2e20      	cmp	r6, #32
 80020de:	d005      	beq.n	80020ec <__aeabi_dsub+0x598>
 80020e0:	2740      	movs	r7, #64	; 0x40
 80020e2:	1bbf      	subs	r7, r7, r6
 80020e4:	4666      	mov	r6, ip
 80020e6:	40be      	lsls	r6, r7
 80020e8:	4332      	orrs	r2, r6
 80020ea:	4690      	mov	r8, r2
 80020ec:	4646      	mov	r6, r8
 80020ee:	1e72      	subs	r2, r6, #1
 80020f0:	4196      	sbcs	r6, r2
 80020f2:	4333      	orrs	r3, r6
 80020f4:	e5ef      	b.n	8001cd6 <__aeabi_dsub+0x182>
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <__aeabi_dsub+0x688>)
 80020f8:	429f      	cmp	r7, r3
 80020fa:	d0cb      	beq.n	8002094 <__aeabi_dsub+0x540>
 80020fc:	2580      	movs	r5, #128	; 0x80
 80020fe:	042d      	lsls	r5, r5, #16
 8002100:	4273      	negs	r3, r6
 8002102:	4329      	orrs	r1, r5
 8002104:	e7a8      	b.n	8002058 <__aeabi_dsub+0x504>
 8002106:	4308      	orrs	r0, r1
 8002108:	1e41      	subs	r1, r0, #1
 800210a:	4188      	sbcs	r0, r1
 800210c:	e6a2      	b.n	8001e54 <__aeabi_dsub+0x300>
 800210e:	2f00      	cmp	r7, #0
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x5c0>
 8002112:	e63c      	b.n	8001d8e <__aeabi_dsub+0x23a>
 8002114:	4663      	mov	r3, ip
 8002116:	1a86      	subs	r6, r0, r2
 8002118:	1acf      	subs	r7, r1, r3
 800211a:	42b0      	cmp	r0, r6
 800211c:	419b      	sbcs	r3, r3
 800211e:	425b      	negs	r3, r3
 8002120:	1afb      	subs	r3, r7, r3
 8002122:	4698      	mov	r8, r3
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	d54e      	bpl.n	80021c6 <__aeabi_dsub+0x672>
 8002128:	1a16      	subs	r6, r2, r0
 800212a:	4663      	mov	r3, ip
 800212c:	42b2      	cmp	r2, r6
 800212e:	4192      	sbcs	r2, r2
 8002130:	1a59      	subs	r1, r3, r1
 8002132:	4252      	negs	r2, r2
 8002134:	1a89      	subs	r1, r1, r2
 8002136:	465c      	mov	r4, fp
 8002138:	2200      	movs	r2, #0
 800213a:	e57b      	b.n	8001c34 <__aeabi_dsub+0xe0>
 800213c:	4301      	orrs	r1, r0
 800213e:	000e      	movs	r6, r1
 8002140:	1e71      	subs	r1, r6, #1
 8002142:	418e      	sbcs	r6, r1
 8002144:	e79f      	b.n	8002086 <__aeabi_dsub+0x532>
 8002146:	001d      	movs	r5, r3
 8002148:	000e      	movs	r6, r1
 800214a:	3d20      	subs	r5, #32
 800214c:	40ee      	lsrs	r6, r5
 800214e:	46b0      	mov	r8, r6
 8002150:	2b20      	cmp	r3, #32
 8002152:	d004      	beq.n	800215e <__aeabi_dsub+0x60a>
 8002154:	2540      	movs	r5, #64	; 0x40
 8002156:	1aeb      	subs	r3, r5, r3
 8002158:	4099      	lsls	r1, r3
 800215a:	4308      	orrs	r0, r1
 800215c:	4681      	mov	r9, r0
 800215e:	4648      	mov	r0, r9
 8002160:	4643      	mov	r3, r8
 8002162:	1e41      	subs	r1, r0, #1
 8002164:	4188      	sbcs	r0, r1
 8002166:	4318      	orrs	r0, r3
 8002168:	e674      	b.n	8001e54 <__aeabi_dsub+0x300>
 800216a:	2200      	movs	r2, #0
 800216c:	2400      	movs	r4, #0
 800216e:	e617      	b.n	8001da0 <__aeabi_dsub+0x24c>
 8002170:	1a16      	subs	r6, r2, r0
 8002172:	4663      	mov	r3, ip
 8002174:	42b2      	cmp	r2, r6
 8002176:	4192      	sbcs	r2, r2
 8002178:	1a59      	subs	r1, r3, r1
 800217a:	4252      	negs	r2, r2
 800217c:	1a89      	subs	r1, r1, r2
 800217e:	003d      	movs	r5, r7
 8002180:	e525      	b.n	8001bce <__aeabi_dsub+0x7a>
 8002182:	4661      	mov	r1, ip
 8002184:	4691      	mov	r9, r2
 8002186:	4d15      	ldr	r5, [pc, #84]	; (80021dc <__aeabi_dsub+0x688>)
 8002188:	e601      	b.n	8001d8e <__aeabi_dsub+0x23a>
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	2400      	movs	r4, #0
 800218e:	0312      	lsls	r2, r2, #12
 8002190:	e679      	b.n	8001e86 <__aeabi_dsub+0x332>
 8002192:	001d      	movs	r5, r3
 8002194:	000e      	movs	r6, r1
 8002196:	3d20      	subs	r5, #32
 8002198:	40ee      	lsrs	r6, r5
 800219a:	46b0      	mov	r8, r6
 800219c:	2b20      	cmp	r3, #32
 800219e:	d004      	beq.n	80021aa <__aeabi_dsub+0x656>
 80021a0:	2540      	movs	r5, #64	; 0x40
 80021a2:	1aeb      	subs	r3, r5, r3
 80021a4:	4099      	lsls	r1, r3
 80021a6:	4308      	orrs	r0, r1
 80021a8:	4681      	mov	r9, r0
 80021aa:	464e      	mov	r6, r9
 80021ac:	4643      	mov	r3, r8
 80021ae:	1e71      	subs	r1, r6, #1
 80021b0:	418e      	sbcs	r6, r1
 80021b2:	431e      	orrs	r6, r3
 80021b4:	e767      	b.n	8002086 <__aeabi_dsub+0x532>
 80021b6:	1886      	adds	r6, r0, r2
 80021b8:	4296      	cmp	r6, r2
 80021ba:	419b      	sbcs	r3, r3
 80021bc:	4461      	add	r1, ip
 80021be:	425b      	negs	r3, r3
 80021c0:	18c9      	adds	r1, r1, r3
 80021c2:	003d      	movs	r5, r7
 80021c4:	e58c      	b.n	8001ce0 <__aeabi_dsub+0x18c>
 80021c6:	4647      	mov	r7, r8
 80021c8:	4337      	orrs	r7, r6
 80021ca:	d0ce      	beq.n	800216a <__aeabi_dsub+0x616>
 80021cc:	2207      	movs	r2, #7
 80021ce:	4641      	mov	r1, r8
 80021d0:	4032      	ands	r2, r6
 80021d2:	e649      	b.n	8001e68 <__aeabi_dsub+0x314>
 80021d4:	2700      	movs	r7, #0
 80021d6:	003a      	movs	r2, r7
 80021d8:	e5e6      	b.n	8001da8 <__aeabi_dsub+0x254>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	000007ff 	.word	0x000007ff
 80021e0:	ff7fffff 	.word	0xff7fffff

080021e4 <__aeabi_dcmpun>:
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	4e0c      	ldr	r6, [pc, #48]	; (8002218 <__aeabi_dcmpun+0x34>)
 80021e8:	030d      	lsls	r5, r1, #12
 80021ea:	031c      	lsls	r4, r3, #12
 80021ec:	0049      	lsls	r1, r1, #1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	0b2d      	lsrs	r5, r5, #12
 80021f2:	0d49      	lsrs	r1, r1, #21
 80021f4:	0b24      	lsrs	r4, r4, #12
 80021f6:	0d5b      	lsrs	r3, r3, #21
 80021f8:	42b1      	cmp	r1, r6
 80021fa:	d008      	beq.n	800220e <__aeabi_dcmpun+0x2a>
 80021fc:	4906      	ldr	r1, [pc, #24]	; (8002218 <__aeabi_dcmpun+0x34>)
 80021fe:	2000      	movs	r0, #0
 8002200:	428b      	cmp	r3, r1
 8002202:	d103      	bne.n	800220c <__aeabi_dcmpun+0x28>
 8002204:	4314      	orrs	r4, r2
 8002206:	0020      	movs	r0, r4
 8002208:	1e44      	subs	r4, r0, #1
 800220a:	41a0      	sbcs	r0, r4
 800220c:	bd70      	pop	{r4, r5, r6, pc}
 800220e:	4305      	orrs	r5, r0
 8002210:	2001      	movs	r0, #1
 8002212:	2d00      	cmp	r5, #0
 8002214:	d1fa      	bne.n	800220c <__aeabi_dcmpun+0x28>
 8002216:	e7f1      	b.n	80021fc <__aeabi_dcmpun+0x18>
 8002218:	000007ff 	.word	0x000007ff

0800221c <__aeabi_i2d>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	2800      	cmp	r0, #0
 8002220:	d02d      	beq.n	800227e <__aeabi_i2d+0x62>
 8002222:	17c3      	asrs	r3, r0, #31
 8002224:	18c5      	adds	r5, r0, r3
 8002226:	405d      	eors	r5, r3
 8002228:	0fc4      	lsrs	r4, r0, #31
 800222a:	0028      	movs	r0, r5
 800222c:	f000 f906 	bl	800243c <__clzsi2>
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <__aeabi_i2d+0x6c>)
 8002232:	1a1b      	subs	r3, r3, r0
 8002234:	055b      	lsls	r3, r3, #21
 8002236:	0d5b      	lsrs	r3, r3, #21
 8002238:	280a      	cmp	r0, #10
 800223a:	dd15      	ble.n	8002268 <__aeabi_i2d+0x4c>
 800223c:	380b      	subs	r0, #11
 800223e:	4085      	lsls	r5, r0
 8002240:	2200      	movs	r2, #0
 8002242:	032d      	lsls	r5, r5, #12
 8002244:	0b2d      	lsrs	r5, r5, #12
 8002246:	2100      	movs	r1, #0
 8002248:	0010      	movs	r0, r2
 800224a:	032d      	lsls	r5, r5, #12
 800224c:	0d0a      	lsrs	r2, r1, #20
 800224e:	0b2d      	lsrs	r5, r5, #12
 8002250:	0512      	lsls	r2, r2, #20
 8002252:	432a      	orrs	r2, r5
 8002254:	4d0d      	ldr	r5, [pc, #52]	; (800228c <__aeabi_i2d+0x70>)
 8002256:	051b      	lsls	r3, r3, #20
 8002258:	402a      	ands	r2, r5
 800225a:	4313      	orrs	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	07e4      	lsls	r4, r4, #31
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	4323      	orrs	r3, r4
 8002264:	0019      	movs	r1, r3
 8002266:	bd70      	pop	{r4, r5, r6, pc}
 8002268:	0002      	movs	r2, r0
 800226a:	0029      	movs	r1, r5
 800226c:	3215      	adds	r2, #21
 800226e:	4091      	lsls	r1, r2
 8002270:	000a      	movs	r2, r1
 8002272:	210b      	movs	r1, #11
 8002274:	1a08      	subs	r0, r1, r0
 8002276:	40c5      	lsrs	r5, r0
 8002278:	032d      	lsls	r5, r5, #12
 800227a:	0b2d      	lsrs	r5, r5, #12
 800227c:	e7e3      	b.n	8002246 <__aeabi_i2d+0x2a>
 800227e:	2400      	movs	r4, #0
 8002280:	2300      	movs	r3, #0
 8002282:	2500      	movs	r5, #0
 8002284:	2200      	movs	r2, #0
 8002286:	e7de      	b.n	8002246 <__aeabi_i2d+0x2a>
 8002288:	0000041e 	.word	0x0000041e
 800228c:	800fffff 	.word	0x800fffff

08002290 <__aeabi_f2d>:
 8002290:	0041      	lsls	r1, r0, #1
 8002292:	0e09      	lsrs	r1, r1, #24
 8002294:	1c4b      	adds	r3, r1, #1
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	b2db      	uxtb	r3, r3
 800229a:	0246      	lsls	r6, r0, #9
 800229c:	0a75      	lsrs	r5, r6, #9
 800229e:	0fc4      	lsrs	r4, r0, #31
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	dd14      	ble.n	80022ce <__aeabi_f2d+0x3e>
 80022a4:	23e0      	movs	r3, #224	; 0xe0
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	076d      	lsls	r5, r5, #29
 80022aa:	0b36      	lsrs	r6, r6, #12
 80022ac:	18cb      	adds	r3, r1, r3
 80022ae:	2100      	movs	r1, #0
 80022b0:	0d0a      	lsrs	r2, r1, #20
 80022b2:	0028      	movs	r0, r5
 80022b4:	0512      	lsls	r2, r2, #20
 80022b6:	4d1c      	ldr	r5, [pc, #112]	; (8002328 <__aeabi_f2d+0x98>)
 80022b8:	4332      	orrs	r2, r6
 80022ba:	055b      	lsls	r3, r3, #21
 80022bc:	402a      	ands	r2, r5
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	4313      	orrs	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	07e4      	lsls	r4, r4, #31
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	4323      	orrs	r3, r4
 80022ca:	0019      	movs	r1, r3
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	2900      	cmp	r1, #0
 80022d0:	d114      	bne.n	80022fc <__aeabi_f2d+0x6c>
 80022d2:	2d00      	cmp	r5, #0
 80022d4:	d01e      	beq.n	8002314 <__aeabi_f2d+0x84>
 80022d6:	0028      	movs	r0, r5
 80022d8:	f000 f8b0 	bl	800243c <__clzsi2>
 80022dc:	280a      	cmp	r0, #10
 80022de:	dc1c      	bgt.n	800231a <__aeabi_f2d+0x8a>
 80022e0:	230b      	movs	r3, #11
 80022e2:	002a      	movs	r2, r5
 80022e4:	1a1b      	subs	r3, r3, r0
 80022e6:	40da      	lsrs	r2, r3
 80022e8:	0003      	movs	r3, r0
 80022ea:	3315      	adds	r3, #21
 80022ec:	409d      	lsls	r5, r3
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <__aeabi_f2d+0x9c>)
 80022f0:	0312      	lsls	r2, r2, #12
 80022f2:	1a1b      	subs	r3, r3, r0
 80022f4:	055b      	lsls	r3, r3, #21
 80022f6:	0b16      	lsrs	r6, r2, #12
 80022f8:	0d5b      	lsrs	r3, r3, #21
 80022fa:	e7d8      	b.n	80022ae <__aeabi_f2d+0x1e>
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	d006      	beq.n	800230e <__aeabi_f2d+0x7e>
 8002300:	0b32      	lsrs	r2, r6, #12
 8002302:	2680      	movs	r6, #128	; 0x80
 8002304:	0336      	lsls	r6, r6, #12
 8002306:	076d      	lsls	r5, r5, #29
 8002308:	4316      	orrs	r6, r2
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <__aeabi_f2d+0xa0>)
 800230c:	e7cf      	b.n	80022ae <__aeabi_f2d+0x1e>
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <__aeabi_f2d+0xa0>)
 8002310:	2600      	movs	r6, #0
 8002312:	e7cc      	b.n	80022ae <__aeabi_f2d+0x1e>
 8002314:	2300      	movs	r3, #0
 8002316:	2600      	movs	r6, #0
 8002318:	e7c9      	b.n	80022ae <__aeabi_f2d+0x1e>
 800231a:	0003      	movs	r3, r0
 800231c:	002a      	movs	r2, r5
 800231e:	3b0b      	subs	r3, #11
 8002320:	409a      	lsls	r2, r3
 8002322:	2500      	movs	r5, #0
 8002324:	e7e3      	b.n	80022ee <__aeabi_f2d+0x5e>
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	800fffff 	.word	0x800fffff
 800232c:	00000389 	.word	0x00000389
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2f>:
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	004c      	lsls	r4, r1, #1
 8002338:	0d64      	lsrs	r4, r4, #21
 800233a:	030b      	lsls	r3, r1, #12
 800233c:	1c62      	adds	r2, r4, #1
 800233e:	0a5b      	lsrs	r3, r3, #9
 8002340:	0f46      	lsrs	r6, r0, #29
 8002342:	0552      	lsls	r2, r2, #21
 8002344:	0fc9      	lsrs	r1, r1, #31
 8002346:	431e      	orrs	r6, r3
 8002348:	00c5      	lsls	r5, r0, #3
 800234a:	0d52      	lsrs	r2, r2, #21
 800234c:	2a01      	cmp	r2, #1
 800234e:	dd29      	ble.n	80023a4 <__aeabi_d2f+0x70>
 8002350:	4b37      	ldr	r3, [pc, #220]	; (8002430 <__aeabi_d2f+0xfc>)
 8002352:	18e7      	adds	r7, r4, r3
 8002354:	2ffe      	cmp	r7, #254	; 0xfe
 8002356:	dc1c      	bgt.n	8002392 <__aeabi_d2f+0x5e>
 8002358:	2f00      	cmp	r7, #0
 800235a:	dd3b      	ble.n	80023d4 <__aeabi_d2f+0xa0>
 800235c:	0180      	lsls	r0, r0, #6
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	2207      	movs	r2, #7
 8002364:	00f3      	lsls	r3, r6, #3
 8002366:	0f6d      	lsrs	r5, r5, #29
 8002368:	4303      	orrs	r3, r0
 800236a:	432b      	orrs	r3, r5
 800236c:	401a      	ands	r2, r3
 800236e:	2a00      	cmp	r2, #0
 8002370:	d004      	beq.n	800237c <__aeabi_d2f+0x48>
 8002372:	220f      	movs	r2, #15
 8002374:	401a      	ands	r2, r3
 8002376:	2a04      	cmp	r2, #4
 8002378:	d000      	beq.n	800237c <__aeabi_d2f+0x48>
 800237a:	3304      	adds	r3, #4
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	04d2      	lsls	r2, r2, #19
 8002380:	401a      	ands	r2, r3
 8002382:	d024      	beq.n	80023ce <__aeabi_d2f+0x9a>
 8002384:	3701      	adds	r7, #1
 8002386:	b2fa      	uxtb	r2, r7
 8002388:	2fff      	cmp	r7, #255	; 0xff
 800238a:	d002      	beq.n	8002392 <__aeabi_d2f+0x5e>
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	0a58      	lsrs	r0, r3, #9
 8002390:	e001      	b.n	8002396 <__aeabi_d2f+0x62>
 8002392:	22ff      	movs	r2, #255	; 0xff
 8002394:	2000      	movs	r0, #0
 8002396:	0240      	lsls	r0, r0, #9
 8002398:	05d2      	lsls	r2, r2, #23
 800239a:	0a40      	lsrs	r0, r0, #9
 800239c:	07c9      	lsls	r1, r1, #31
 800239e:	4310      	orrs	r0, r2
 80023a0:	4308      	orrs	r0, r1
 80023a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a4:	4335      	orrs	r5, r6
 80023a6:	2c00      	cmp	r4, #0
 80023a8:	d104      	bne.n	80023b4 <__aeabi_d2f+0x80>
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	d10a      	bne.n	80023c4 <__aeabi_d2f+0x90>
 80023ae:	2200      	movs	r2, #0
 80023b0:	2000      	movs	r0, #0
 80023b2:	e7f0      	b.n	8002396 <__aeabi_d2f+0x62>
 80023b4:	2d00      	cmp	r5, #0
 80023b6:	d0ec      	beq.n	8002392 <__aeabi_d2f+0x5e>
 80023b8:	2080      	movs	r0, #128	; 0x80
 80023ba:	03c0      	lsls	r0, r0, #15
 80023bc:	4330      	orrs	r0, r6
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	e7e9      	b.n	8002396 <__aeabi_d2f+0x62>
 80023c2:	2400      	movs	r4, #0
 80023c4:	2300      	movs	r3, #0
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	0a58      	lsrs	r0, r3, #9
 80023ca:	b2e2      	uxtb	r2, r4
 80023cc:	e7e3      	b.n	8002396 <__aeabi_d2f+0x62>
 80023ce:	08db      	lsrs	r3, r3, #3
 80023d0:	003c      	movs	r4, r7
 80023d2:	e7f8      	b.n	80023c6 <__aeabi_d2f+0x92>
 80023d4:	003b      	movs	r3, r7
 80023d6:	3317      	adds	r3, #23
 80023d8:	dbf3      	blt.n	80023c2 <__aeabi_d2f+0x8e>
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	4333      	orrs	r3, r6
 80023e0:	261e      	movs	r6, #30
 80023e2:	1bf6      	subs	r6, r6, r7
 80023e4:	2e1f      	cmp	r6, #31
 80023e6:	dd14      	ble.n	8002412 <__aeabi_d2f+0xde>
 80023e8:	2202      	movs	r2, #2
 80023ea:	4252      	negs	r2, r2
 80023ec:	1bd7      	subs	r7, r2, r7
 80023ee:	001a      	movs	r2, r3
 80023f0:	40fa      	lsrs	r2, r7
 80023f2:	0017      	movs	r7, r2
 80023f4:	2e20      	cmp	r6, #32
 80023f6:	d004      	beq.n	8002402 <__aeabi_d2f+0xce>
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <__aeabi_d2f+0x100>)
 80023fa:	4694      	mov	ip, r2
 80023fc:	4464      	add	r4, ip
 80023fe:	40a3      	lsls	r3, r4
 8002400:	431d      	orrs	r5, r3
 8002402:	002b      	movs	r3, r5
 8002404:	1e5d      	subs	r5, r3, #1
 8002406:	41ab      	sbcs	r3, r5
 8002408:	2207      	movs	r2, #7
 800240a:	433b      	orrs	r3, r7
 800240c:	401a      	ands	r2, r3
 800240e:	2700      	movs	r7, #0
 8002410:	e7ad      	b.n	800236e <__aeabi_d2f+0x3a>
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <__aeabi_d2f+0x104>)
 8002414:	0028      	movs	r0, r5
 8002416:	18a2      	adds	r2, r4, r2
 8002418:	4095      	lsls	r5, r2
 800241a:	4093      	lsls	r3, r2
 800241c:	1e6c      	subs	r4, r5, #1
 800241e:	41a5      	sbcs	r5, r4
 8002420:	40f0      	lsrs	r0, r6
 8002422:	2207      	movs	r2, #7
 8002424:	432b      	orrs	r3, r5
 8002426:	4303      	orrs	r3, r0
 8002428:	401a      	ands	r2, r3
 800242a:	2700      	movs	r7, #0
 800242c:	e79f      	b.n	800236e <__aeabi_d2f+0x3a>
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	fffffc80 	.word	0xfffffc80
 8002434:	fffffca2 	.word	0xfffffca2
 8002438:	fffffc82 	.word	0xfffffc82

0800243c <__clzsi2>:
 800243c:	211c      	movs	r1, #28
 800243e:	2301      	movs	r3, #1
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	4298      	cmp	r0, r3
 8002444:	d301      	bcc.n	800244a <__clzsi2+0xe>
 8002446:	0c00      	lsrs	r0, r0, #16
 8002448:	3910      	subs	r1, #16
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	4298      	cmp	r0, r3
 800244e:	d301      	bcc.n	8002454 <__clzsi2+0x18>
 8002450:	0a00      	lsrs	r0, r0, #8
 8002452:	3908      	subs	r1, #8
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	4298      	cmp	r0, r3
 8002458:	d301      	bcc.n	800245e <__clzsi2+0x22>
 800245a:	0900      	lsrs	r0, r0, #4
 800245c:	3904      	subs	r1, #4
 800245e:	a202      	add	r2, pc, #8	; (adr r2, 8002468 <__clzsi2+0x2c>)
 8002460:	5c10      	ldrb	r0, [r2, r0]
 8002462:	1840      	adds	r0, r0, r1
 8002464:	4770      	bx	lr
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	02020304 	.word	0x02020304
 800246c:	01010101 	.word	0x01010101
	...

08002478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800247c:	f000 fd42 	bl	8002f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002480:	f000 f80c 	bl	800249c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002484:	f000 f972 	bl	800276c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002488:	f000 f8c4 	bl	8002614 <MX_SPI1_Init>
  MX_TIM2_Init();
 800248c:	f000 f8fa 	bl	8002684 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002490:	f000 f87e 	bl	8002590 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002494:	f000 f86e 	bl	8002574 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002498:	e7fe      	b.n	8002498 <main+0x20>
	...

0800249c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b09f      	sub	sp, #124	; 0x7c
 80024a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a2:	2440      	movs	r4, #64	; 0x40
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	0018      	movs	r0, r3
 80024a8:	2338      	movs	r3, #56	; 0x38
 80024aa:	001a      	movs	r2, r3
 80024ac:	2100      	movs	r1, #0
 80024ae:	f003 fa1b 	bl	80058e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b2:	232c      	movs	r3, #44	; 0x2c
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	0018      	movs	r0, r3
 80024b8:	2314      	movs	r3, #20
 80024ba:	001a      	movs	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	f003 fa13 	bl	80058e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	0018      	movs	r0, r3
 80024c6:	2328      	movs	r3, #40	; 0x28
 80024c8:	001a      	movs	r2, r3
 80024ca:	2100      	movs	r1, #0
 80024cc:	f003 fa0c 	bl	80058e8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <SystemClock_Config+0xd0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <SystemClock_Config+0xd4>)
 80024d6:	401a      	ands	r2, r3
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <SystemClock_Config+0xd0>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	0109      	lsls	r1, r1, #4
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80024e2:	0021      	movs	r1, r4
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2210      	movs	r2, #16
 80024e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2201      	movs	r2, #1
 80024ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2200      	movs	r2, #0
 80024f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	22a0      	movs	r2, #160	; 0xa0
 80024fa:	0212      	lsls	r2, r2, #8
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2200      	movs	r2, #0
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002504:	187b      	adds	r3, r7, r1
 8002506:	0018      	movs	r0, r3
 8002508:	f001 f906 	bl	8003718 <HAL_RCC_OscConfig>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d001      	beq.n	8002514 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002510:	f000 f9ee 	bl	80028f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	187b      	adds	r3, r7, r1
 8002518:	220f      	movs	r2, #15
 800251a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2100      	movs	r1, #0
 8002538:	0018      	movs	r0, r3
 800253a:	f001 fcbd 	bl	8003eb8 <HAL_RCC_ClockConfig>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d001      	beq.n	8002546 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002542:	f000 f9d5 	bl	80028f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2208      	movs	r2, #8
 800254a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	0018      	movs	r0, r3
 8002556:	f001 fe5d 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800255e:	f000 f9c7 	bl	80028f0 <Error_Handler>
  }
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b01f      	add	sp, #124	; 0x7c
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40007000 	.word	0x40007000
 8002570:	ffffe7ff 	.word	0xffffe7ff

08002574 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2101      	movs	r1, #1
 800257c:	200f      	movs	r0, #15
 800257e:	f000 fdbd 	bl	80030fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002582:	200f      	movs	r0, #15
 8002584:	f000 fdcf 	bl	8003126 <HAL_NVIC_EnableIRQ>
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <MX_I2C1_Init+0x78>)
 8002596:	4a1d      	ldr	r2, [pc, #116]	; (800260c <MX_I2C1_Init+0x7c>)
 8002598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000609;
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <MX_I2C1_Init+0x78>)
 800259c:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <MX_I2C1_Init+0x80>)
 800259e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <MX_I2C1_Init+0x78>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <MX_I2C1_Init+0x78>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_I2C1_Init+0x78>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <MX_I2C1_Init+0x78>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_I2C1_Init+0x78>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <MX_I2C1_Init+0x78>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <MX_I2C1_Init+0x78>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_I2C1_Init+0x78>)
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 ff75 	bl	80034bc <HAL_I2C_Init>
 80025d2:	1e03      	subs	r3, r0, #0
 80025d4:	d001      	beq.n	80025da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025d6:	f000 f98b 	bl	80028f0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_I2C1_Init+0x78>)
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f001 f800 	bl	80035e8 <HAL_I2CEx_ConfigAnalogFilter>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d001      	beq.n	80025f0 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80025ec:	f000 f980 	bl	80028f0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <MX_I2C1_Init+0x78>)
 80025f2:	2100      	movs	r1, #0
 80025f4:	0018      	movs	r0, r3
 80025f6:	f001 f843 	bl	8003680 <HAL_I2CEx_ConfigDigitalFilter>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80025fe:	f000 f977 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000008c 	.word	0x2000008c
 800260c:	40005400 	.word	0x40005400
 8002610:	00000609 	.word	0x00000609

08002614 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <MX_SPI1_Init+0x68>)
 800261a:	4a19      	ldr	r2, [pc, #100]	; (8002680 <MX_SPI1_Init+0x6c>)
 800261c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <MX_SPI1_Init+0x68>)
 8002620:	2282      	movs	r2, #130	; 0x82
 8002622:	0052      	lsls	r2, r2, #1
 8002624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <MX_SPI1_Init+0x68>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_SPI1_Init+0x68>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <MX_SPI1_Init+0x68>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <MX_SPI1_Init+0x68>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <MX_SPI1_Init+0x68>)
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	02d2      	lsls	r2, r2, #11
 8002644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <MX_SPI1_Init+0x68>)
 8002648:	2238      	movs	r2, #56	; 0x38
 800264a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <MX_SPI1_Init+0x68>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <MX_SPI1_Init+0x68>)
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <MX_SPI1_Init+0x68>)
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <MX_SPI1_Init+0x68>)
 8002660:	2207      	movs	r2, #7
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <MX_SPI1_Init+0x68>)
 8002666:	0018      	movs	r0, r3
 8002668:	f001 ff48 	bl	80044fc <HAL_SPI_Init>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d001      	beq.n	8002674 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002670:	f000 f93e 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	200000d8 	.word	0x200000d8
 8002680:	40013000 	.word	0x40013000

08002684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268a:	2320      	movs	r3, #32
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	0018      	movs	r0, r3
 8002690:	2310      	movs	r3, #16
 8002692:	001a      	movs	r2, r3
 8002694:	2100      	movs	r1, #0
 8002696:	f003 f927 	bl	80058e8 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800269a:	230c      	movs	r3, #12
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	0018      	movs	r0, r3
 80026a0:	2314      	movs	r3, #20
 80026a2:	001a      	movs	r2, r3
 80026a4:	2100      	movs	r1, #0
 80026a6:	f003 f91f 	bl	80058e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	0018      	movs	r0, r3
 80026ae:	2308      	movs	r3, #8
 80026b0:	001a      	movs	r2, r3
 80026b2:	2100      	movs	r1, #0
 80026b4:	f003 f918 	bl	80058e8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	05d2      	lsls	r2, r2, #23
 80026be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <MX_TIM2_Init+0xe0>)
 80026c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 750;
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026ce:	4a26      	ldr	r2, [pc, #152]	; (8002768 <MX_TIM2_Init+0xe4>)
 80026d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b23      	ldr	r3, [pc, #140]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026e0:	0018      	movs	r0, r3
 80026e2:	f002 fcb4 	bl	800504e <HAL_TIM_Base_Init>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80026ea:	f000 f901 	bl	80028f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	2120      	movs	r1, #32
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	0152      	lsls	r2, r2, #5
 80026f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f8:	187a      	adds	r2, r7, r1
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MX_TIM2_Init+0xdc>)
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f002 fddc 	bl	80052bc <HAL_TIM_ConfigClockSource>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d001      	beq.n	800270c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002708:	f000 f8f2 	bl	80028f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800270c:	210c      	movs	r1, #12
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2200      	movs	r2, #0
 8002718:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800271a:	187a      	adds	r2, r7, r1
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <MX_TIM2_Init+0xdc>)
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f002 fe89 	bl	8005438 <HAL_TIM_SlaveConfigSynchro>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d001      	beq.n	800272e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800272a:	f000 f8e1 	bl	80028f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	2200      	movs	r2, #0
 8002738:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800273a:	1d3a      	adds	r2, r7, #4
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_TIM2_Init+0xdc>)
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f003 f863 	bl	800580c <HAL_TIMEx_MasterConfigSynchronization>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800274a:	f000 f8d1 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <MX_TIM2_Init+0xdc>)
 8002750:	0018      	movs	r0, r3
 8002752:	f002 fca8 	bl	80050a6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b00c      	add	sp, #48	; 0x30
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	20000130 	.word	0x20000130
 8002764:	00001b58 	.word	0x00001b58
 8002768:	000002ee 	.word	0x000002ee

0800276c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b08b      	sub	sp, #44	; 0x2c
 8002770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002772:	2414      	movs	r4, #20
 8002774:	193b      	adds	r3, r7, r4
 8002776:	0018      	movs	r0, r3
 8002778:	2314      	movs	r3, #20
 800277a:	001a      	movs	r2, r3
 800277c:	2100      	movs	r1, #0
 800277e:	f003 f8b3 	bl	80058e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002782:	4b56      	ldr	r3, [pc, #344]	; (80028dc <MX_GPIO_Init+0x170>)
 8002784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002786:	4b55      	ldr	r3, [pc, #340]	; (80028dc <MX_GPIO_Init+0x170>)
 8002788:	2104      	movs	r1, #4
 800278a:	430a      	orrs	r2, r1
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <MX_GPIO_Init+0x170>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800279a:	4b50      	ldr	r3, [pc, #320]	; (80028dc <MX_GPIO_Init+0x170>)
 800279c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279e:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <MX_GPIO_Init+0x170>)
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	430a      	orrs	r2, r1
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027a6:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <MX_GPIO_Init+0x170>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <MX_GPIO_Init+0x170>)
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	4b49      	ldr	r3, [pc, #292]	; (80028dc <MX_GPIO_Init+0x170>)
 80027b8:	2101      	movs	r1, #1
 80027ba:	430a      	orrs	r2, r1
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <MX_GPIO_Init+0x170>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ca:	4b44      	ldr	r3, [pc, #272]	; (80028dc <MX_GPIO_Init+0x170>)
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4b43      	ldr	r3, [pc, #268]	; (80028dc <MX_GPIO_Init+0x170>)
 80027d0:	2102      	movs	r1, #2
 80027d2:	430a      	orrs	r2, r1
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <MX_GPIO_Init+0x170>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	2202      	movs	r2, #2
 80027dc:	4013      	ands	r3, r2
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_LED_GPIO_Port, User_LED_Pin, GPIO_PIN_RESET);
 80027e2:	23a0      	movs	r3, #160	; 0xa0
 80027e4:	05db      	lsls	r3, r3, #23
 80027e6:	2200      	movs	r2, #0
 80027e8:	2120      	movs	r1, #32
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fe36 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS0_GPIO_Port, SS0_Pin, GPIO_PIN_SET);
 80027f0:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <MX_GPIO_Init+0x174>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	2110      	movs	r1, #16
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fe30 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS1_GPIO_Port, SS1_Pin, GPIO_PIN_RESET);
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <MX_GPIO_Init+0x174>)
 80027fe:	2200      	movs	r2, #0
 8002800:	2120      	movs	r1, #32
 8002802:	0018      	movs	r0, r3
 8002804:	f000 fe2a 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8002808:	4936      	ldr	r1, [pc, #216]	; (80028e4 <MX_GPIO_Init+0x178>)
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <MX_GPIO_Init+0x17c>)
 800280c:	2200      	movs	r2, #0
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fe24 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002814:	193b      	adds	r3, r7, r4
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	0192      	lsls	r2, r2, #6
 800281a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	4a33      	ldr	r2, [pc, #204]	; (80028ec <MX_GPIO_Init+0x180>)
 8002820:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	193b      	adds	r3, r7, r4
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002828:	193b      	adds	r3, r7, r4
 800282a:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <MX_GPIO_Init+0x174>)
 800282c:	0019      	movs	r1, r3
 800282e:	0010      	movs	r0, r2
 8002830:	f000 fc96 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002834:	193b      	adds	r3, r7, r4
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	193b      	adds	r3, r7, r4
 800283c:	2202      	movs	r2, #2
 800283e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	193b      	adds	r3, r7, r4
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	193b      	adds	r3, r7, r4
 8002848:	2203      	movs	r2, #3
 800284a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800284c:	193b      	adds	r3, r7, r4
 800284e:	2204      	movs	r2, #4
 8002850:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	193a      	adds	r2, r7, r4
 8002854:	23a0      	movs	r3, #160	; 0xa0
 8002856:	05db      	lsls	r3, r3, #23
 8002858:	0011      	movs	r1, r2
 800285a:	0018      	movs	r0, r3
 800285c:	f000 fc80 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_LED_Pin */
  GPIO_InitStruct.Pin = User_LED_Pin;
 8002860:	193b      	adds	r3, r7, r4
 8002862:	2220      	movs	r2, #32
 8002864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	193b      	adds	r3, r7, r4
 8002868:	2201      	movs	r2, #1
 800286a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	193b      	adds	r3, r7, r4
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	193b      	adds	r3, r7, r4
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_LED_GPIO_Port, &GPIO_InitStruct);
 8002878:	193a      	adds	r2, r7, r4
 800287a:	23a0      	movs	r3, #160	; 0xa0
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f000 fc6d 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS0_Pin SS1_Pin */
  GPIO_InitStruct.Pin = SS0_Pin|SS1_Pin;
 8002886:	0021      	movs	r1, r4
 8002888:	187b      	adds	r3, r7, r1
 800288a:	2230      	movs	r2, #48	; 0x30
 800288c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288e:	187b      	adds	r3, r7, r1
 8002890:	2201      	movs	r2, #1
 8002892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	187b      	adds	r3, r7, r1
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	187b      	adds	r3, r7, r1
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a0:	000c      	movs	r4, r1
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <MX_GPIO_Init+0x174>)
 80028a6:	0019      	movs	r1, r3
 80028a8:	0010      	movs	r0, r2
 80028aa:	f000 fc59 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin PB13 */
  GPIO_InitStruct.Pin = SS2_Pin|GPIO_PIN_13;
 80028ae:	0021      	movs	r1, r4
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <MX_GPIO_Init+0x178>)
 80028b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2201      	movs	r2, #1
 80028ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2200      	movs	r2, #0
 80028c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <MX_GPIO_Init+0x17c>)
 80028cc:	0019      	movs	r1, r3
 80028ce:	0010      	movs	r0, r2
 80028d0:	f000 fc46 	bl	8003160 <HAL_GPIO_Init>

}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b00b      	add	sp, #44	; 0x2c
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	50000800 	.word	0x50000800
 80028e4:	00002001 	.word	0x00002001
 80028e8:	50000400 	.word	0x50000400
 80028ec:	10210000 	.word	0x10210000

080028f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <HAL_MspInit+0x24>)
 8002902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_MspInit+0x24>)
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <HAL_MspInit+0x24>)
 800290e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_MspInit+0x24>)
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	0549      	lsls	r1, r1, #21
 8002916:	430a      	orrs	r2, r1
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	230c      	movs	r3, #12
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	0018      	movs	r0, r3
 8002932:	2314      	movs	r3, #20
 8002934:	001a      	movs	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	f002 ffd6 	bl	80058e8 <memset>
  if(hi2c->Instance==I2C1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <HAL_I2C_MspInit+0x80>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d12a      	bne.n	800299c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_I2C_MspInit+0x84>)
 8002948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_I2C_MspInit+0x84>)
 800294c:	2101      	movs	r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_I2C_MspInit+0x84>)
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800295e:	210c      	movs	r1, #12
 8002960:	187b      	adds	r3, r7, r1
 8002962:	22c0      	movs	r2, #192	; 0xc0
 8002964:	00d2      	lsls	r2, r2, #3
 8002966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2212      	movs	r2, #18
 800296c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296e:	187b      	adds	r3, r7, r1
 8002970:	2201      	movs	r2, #1
 8002972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	187b      	adds	r3, r7, r1
 8002976:	2203      	movs	r2, #3
 8002978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2206      	movs	r2, #6
 800297e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002980:	187a      	adds	r2, r7, r1
 8002982:	23a0      	movs	r3, #160	; 0xa0
 8002984:	05db      	lsls	r3, r3, #23
 8002986:	0011      	movs	r1, r2
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fbe9 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_I2C_MspInit+0x84>)
 8002990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_I2C_MspInit+0x84>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0389      	lsls	r1, r1, #14
 8002998:	430a      	orrs	r2, r1
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b008      	add	sp, #32
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40005400 	.word	0x40005400
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08b      	sub	sp, #44	; 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	2314      	movs	r3, #20
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	0018      	movs	r0, r3
 80029ba:	2314      	movs	r3, #20
 80029bc:	001a      	movs	r2, r3
 80029be:	2100      	movs	r1, #0
 80029c0:	f002 ff92 	bl	80058e8 <memset>
  if(hspi->Instance==SPI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_SPI_MspInit+0xc4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d14b      	bne.n	8002a66 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 80029d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0149      	lsls	r1, r1, #5
 80029d8:	430a      	orrs	r2, r1
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	430a      	orrs	r2, r1
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	2201      	movs	r2, #1
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 80029f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 80029fa:	2102      	movs	r1, #2
 80029fc:	430a      	orrs	r2, r1
 80029fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_SPI_MspInit+0xc8>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002a0c:	2414      	movs	r4, #20
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	22d0      	movs	r2, #208	; 0xd0
 8002a12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2202      	movs	r2, #2
 8002a18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	2203      	movs	r2, #3
 8002a24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	193a      	adds	r2, r7, r4
 8002a2e:	23a0      	movs	r3, #160	; 0xa0
 8002a30:	05db      	lsls	r3, r3, #23
 8002a32:	0011      	movs	r1, r2
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 fb93 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8002a3a:	0021      	movs	r1, r4
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	2208      	movs	r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	2202      	movs	r2, #2
 8002a46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	2203      	movs	r2, #3
 8002a52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_SPI_MspInit+0xcc>)
 8002a5e:	0019      	movs	r1, r3
 8002a60:	0010      	movs	r0, r2
 8002a62:	f000 fb7d 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b00b      	add	sp, #44	; 0x2c
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	40013000 	.word	0x40013000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	50000400 	.word	0x50000400

08002a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	05db      	lsls	r3, r3, #23
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d105      	bne.n	8002a9c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_TIM_Base_MspInit+0x28>)
 8002a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_TIM_Base_MspInit+0x28>)
 8002a96:	2101      	movs	r1, #1
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <HardFault_Handler+0x4>

08002ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint16_t wind_speed_digital = 0;
 8002ade:	2412      	movs	r4, #18
 8002ae0:	193b      	adds	r3, r7, r4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
  uint16_t wind_temp_digital = 0;
 8002ae6:	2510      	movs	r5, #16
 8002ae8:	197b      	adds	r3, r7, r5
 8002aea:	2200      	movs	r2, #0
 8002aec:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch2 = 0;
 8002aee:	260e      	movs	r6, #14
 8002af0:	19bb      	adds	r3, r7, r6
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch3 = 0;
 8002af6:	230c      	movs	r3, #12
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch4 = 0;
 8002afe:	220a      	movs	r2, #10
 8002b00:	18bb      	adds	r3, r7, r2
 8002b02:	2200      	movs	r2, #0
 8002b04:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch5 = 0;
 8002b06:	2108      	movs	r1, #8
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch6 = 0;
 8002b0e:	1dbb      	adds	r3, r7, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	801a      	strh	r2, [r3, #0]
  uint16_t din_ch7 = 0;
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b1a:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <TIM2_IRQHandler+0xe8>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f002 fae4 	bl	80050ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Toggle_User_LED();
 8002b22:	f000 f853 	bl	8002bcc <Toggle_User_LED>

  /* Read ADC Wind Speed Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_SPEED_CH, &wind_speed_digital);
 8002b26:	193b      	adds	r3, r7, r4
 8002b28:	0019      	movs	r1, r3
 8002b2a:	2080      	movs	r0, #128	; 0x80
 8002b2c:	f000 f87a 	bl	8002c24 <Read_ADC>

  /* Read ADC Wind Temp Sensor Channel */
  Read_ADC((uint8_t) ADC_WIND_SENSOR_TEMP_CH, &wind_temp_digital);
 8002b30:	197b      	adds	r3, r7, r5
 8002b32:	0019      	movs	r1, r3
 8002b34:	2090      	movs	r0, #144	; 0x90
 8002b36:	f000 f875 	bl	8002c24 <Read_ADC>

  Read_ADC((uint8_t) ADC_DIN_CH2, &din_ch2);
 8002b3a:	19bb      	adds	r3, r7, r6
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	20a0      	movs	r0, #160	; 0xa0
 8002b40:	f000 f870 	bl	8002c24 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH3, &din_ch3);
 8002b44:	230c      	movs	r3, #12
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	0019      	movs	r1, r3
 8002b4a:	20b0      	movs	r0, #176	; 0xb0
 8002b4c:	f000 f86a 	bl	8002c24 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH4, &din_ch4);
 8002b50:	220a      	movs	r2, #10
 8002b52:	18bb      	adds	r3, r7, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	20c0      	movs	r0, #192	; 0xc0
 8002b58:	f000 f864 	bl	8002c24 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH5, &din_ch5);
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	0019      	movs	r1, r3
 8002b62:	20d0      	movs	r0, #208	; 0xd0
 8002b64:	f000 f85e 	bl	8002c24 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH6, &din_ch6);
 8002b68:	1dbb      	adds	r3, r7, #6
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	20e0      	movs	r0, #224	; 0xe0
 8002b6e:	f000 f859 	bl	8002c24 <Read_ADC>
  Read_ADC((uint8_t) ADC_DIN_CH7, &din_ch7);
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	0019      	movs	r1, r3
 8002b76:	20f0      	movs	r0, #240	; 0xf0
 8002b78:	f000 f854 	bl	8002c24 <Read_ADC>

  /* Toggle SS1 Pin Low to select sensor */
  HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <TIM2_IRQHandler+0xec>)
 8002b7e:	2120      	movs	r1, #32
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 fc88 	bl	8003496 <HAL_GPIO_TogglePin>
  // TODO: Read from Sensor
  HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <TIM2_IRQHandler+0xec>)
 8002b88:	2120      	movs	r1, #32
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 fc83 	bl	8003496 <HAL_GPIO_TogglePin>
  /* Toggle SS1 High to un-select sensor */

  /* Toggle SS2 Pin Low to select sensor */
  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <TIM2_IRQHandler+0xf0>)
 8002b92:	2101      	movs	r1, #1
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 fc7e 	bl	8003496 <HAL_GPIO_TogglePin>
  // TODO: Read from Sensor
  HAL_GPIO_TogglePin(SS2_GPIO_Port, SS2_Pin);
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <TIM2_IRQHandler+0xf0>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fc79 	bl	8003496 <HAL_GPIO_TogglePin>
  /* Toggle SS2 High to un-select sensor */

  /* Calculations Done Here */
  float wind_speed = calculate_wind_speed(wind_speed_digital, wind_temp_digital);
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	197b      	adds	r3, r7, r5
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	0019      	movs	r1, r3
 8002bae:	0010      	movs	r0, r2
 8002bb0:	f000 f89c 	bl	8002cec <calculate_wind_speed>
 8002bb4:	1c03      	adds	r3, r0, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b007      	add	sp, #28
 8002bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc0:	20000130 	.word	0x20000130
 8002bc4:	50000800 	.word	0x50000800
 8002bc8:	50000400 	.word	0x50000400

08002bcc <Toggle_User_LED>:
/* USER CODE BEGIN 1 */
/**
 * 	@brief Toggle LED
 */
void Toggle_User_LED()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 8002bd0:	23a0      	movs	r3, #160	; 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 fc5d 	bl	8003496 <HAL_GPIO_TogglePin>
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <Toggle_ADC_Chip_Select>:

/**
 * 	@brief Toggle ADC Chip Select Pin
 */
void Toggle_ADC_Chip_Select()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ADC_CS_GPIO_Port, ADC_CS_PIN);
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <Toggle_ADC_Chip_Select+0x14>)
 8002bea:	2110      	movs	r1, #16
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fc52 	bl	8003496 <HAL_GPIO_TogglePin>
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	50000800 	.word	0x50000800

08002bfc <HAL_SPI_Transmit_Start>:

/**
 * 	@brief Transmit Start Bit in HAL SPI
 */
void HAL_SPI_Transmit_Start()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
	uint8_t adc_start = (uint8_t) ADC_START_BIT;
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &adc_start, sizeof(adc_start), SPI_TIMEOUT);
 8002c08:	23fa      	movs	r3, #250	; 0xfa
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	1df9      	adds	r1, r7, #7
 8002c0e:	4804      	ldr	r0, [pc, #16]	; (8002c20 <HAL_SPI_Transmit_Start+0x24>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	f001 fcdd 	bl	80045d0 <HAL_SPI_Transmit>
}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b002      	add	sp, #8
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	200000d8 	.word	0x200000d8

08002c24 <Read_ADC>:
 * 	@brief Read MCP3008 ADC based on given channel enum.
 *	Output is set to the pointer of a uint16_t set in the parameters.
 *	Output will be set to 0 before setting the ADC Value to it.
 */
void Read_ADC(uint8_t adc_ch_select, uint16_t *output)
{
 8002c24:	b5b0      	push	{r4, r5, r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_1 = 0;
 8002c32:	240f      	movs	r4, #15
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
	uint8_t adc_byte_2 = 0;
 8002c3a:	250e      	movs	r5, #14
 8002c3c:	197b      	adds	r3, r7, r5
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
	/* Set output to 0 */
	*output = 0;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	801a      	strh	r2, [r3, #0]

	/* Toggle SS0 Pin (CS) Low to use ADC */
	Toggle_ADC_Chip_Select();
 8002c48:	f7ff ffcc 	bl	8002be4 <Toggle_ADC_Chip_Select>
	/* Send to DIN CH0 Select */
	HAL_SPI_Transmit_Start();
 8002c4c:	f7ff ffd6 	bl	8002bfc <HAL_SPI_Transmit_Start>
	HAL_SPI_TransmitReceive(&hspi1, &adc_ch_select, &adc_byte_1, sizeof(adc_ch_select), SPI_TIMEOUT);
 8002c50:	23fa      	movs	r3, #250	; 0xfa
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	193a      	adds	r2, r7, r4
 8002c56:	1df9      	adds	r1, r7, #7
 8002c58:	4810      	ldr	r0, [pc, #64]	; (8002c9c <Read_ADC+0x78>)
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f001 ff23 	bl	8004aa8 <HAL_SPI_TransmitReceive>
	/* Read from Dout of ADC */
	HAL_SPI_Receive(&hspi1, &adc_byte_2, sizeof(adc_byte_2), SPI_TIMEOUT);
 8002c62:	23fa      	movs	r3, #250	; 0xfa
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	1979      	adds	r1, r7, r5
 8002c68:	480c      	ldr	r0, [pc, #48]	; (8002c9c <Read_ADC+0x78>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f001 fdfe 	bl	800486c <HAL_SPI_Receive>
	/* Toggle SS0 High (CS) to signify we're done with a round of the ADC */
	Toggle_ADC_Chip_Select();
 8002c70:	f7ff ffb8 	bl	8002be4 <Toggle_ADC_Chip_Select>
	/* Set Output to adc_value */
	*output = ADC_16_TO_10_BIT(adc_byte_1, adc_byte_2);
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	197b      	adds	r3, r7, r5
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	059b      	lsls	r3, r3, #22
 8002c8a:	0d9b      	lsrs	r3, r3, #22
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	801a      	strh	r2, [r3, #0]
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	200000d8 	.word	0x200000d8

08002ca0 <adc_to_voltage>:
/**
 * 	@brief Function handles converting adc value to a voltage.
 * 	Call reverse_and_shift_adc_value before hand.
 */
static float adc_to_voltage(uint16_t adc_value)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	1dbb      	adds	r3, r7, #6
 8002caa:	801a      	strh	r2, [r3, #0]
	return 5.0 * adc_value / 1024;;
 8002cac:	1dbb      	adds	r3, r7, #6
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7ff fab3 	bl	800221c <__aeabi_i2d>
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <adc_to_voltage+0x44>)
 8002cba:	f7fe fcd9 	bl	8001670 <__aeabi_dmul>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	000c      	movs	r4, r1
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	0021      	movs	r1, r4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <adc_to_voltage+0x48>)
 8002cca:	f7fe f8c7 	bl	8000e5c <__aeabi_ddiv>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	000c      	movs	r4, r1
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	0021      	movs	r1, r4
 8002cd6:	f7ff fb2d 	bl	8002334 <__aeabi_d2f>
 8002cda:	1c03      	adds	r3, r0, #0
}
 8002cdc:	1c18      	adds	r0, r3, #0
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b003      	add	sp, #12
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	40140000 	.word	0x40140000
 8002ce8:	40900000 	.word	0x40900000

08002cec <calculate_wind_speed>:
 *	TODO: Wait 40 seconds until we do the first measurement to let the wind sensor stabilize
 *	TODO: Use the Bosch sensor for ambiant temperature instead of the onboard Modern Device Sensor
 * 	https://moderndevice.com/uncategorized/calibrating-rev-p-wind-sensor-new-regression/?preview=true
 */
static float calculate_wind_speed(uint16_t wind_speed_adc, uint16_t wind_temp_adc)
{
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	1dbb      	adds	r3, r7, #6
 8002cf6:	801a      	strh	r2, [r3, #0]
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	1c0a      	adds	r2, r1, #0
 8002cfc:	801a      	strh	r2, [r3, #0]
	// Calculate Vin from ADC
	float wind_speed_vout = adc_to_voltage(wind_speed_adc);
 8002cfe:	1dbb      	adds	r3, r7, #6
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7ff ffcc 	bl	8002ca0 <adc_to_voltage>
 8002d08:	1c03      	adds	r3, r0, #0
 8002d0a:	617b      	str	r3, [r7, #20]
	float wind_temp_vout = adc_to_voltage(wind_temp_adc);
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff ffc5 	bl	8002ca0 <adc_to_voltage>
 8002d16:	1c03      	adds	r3, r0, #0
 8002d18:	613b      	str	r3, [r7, #16]

	// Zero Voltage not set, set here
	if (zero_voltage == -1) {
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <calculate_wind_speed+0x110>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4938      	ldr	r1, [pc, #224]	; (8002e00 <calculate_wind_speed+0x114>)
 8002d20:	1c18      	adds	r0, r3, #0
 8002d22:	f7fd fac7 	bl	80002b4 <__aeabi_fcmpeq>
 8002d26:	1e03      	subs	r3, r0, #0
 8002d28:	d002      	beq.n	8002d30 <calculate_wind_speed+0x44>
		zero_voltage = wind_speed_vout;
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <calculate_wind_speed+0x110>)
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]
	}

	// Calculate Ambient Temperature
	float TempAmb = (wind_temp_vout - 0.400) / 0.0195;
 8002d30:	6938      	ldr	r0, [r7, #16]
 8002d32:	f7ff faad 	bl	8002290 <__aeabi_f2d>
 8002d36:	4a33      	ldr	r2, [pc, #204]	; (8002e04 <calculate_wind_speed+0x118>)
 8002d38:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <calculate_wind_speed+0x11c>)
 8002d3a:	f7fe ff0b 	bl	8001b54 <__aeabi_dsub>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	000c      	movs	r4, r1
 8002d42:	0018      	movs	r0, r3
 8002d44:	0021      	movs	r1, r4
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <calculate_wind_speed+0x120>)
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <calculate_wind_speed+0x124>)
 8002d4a:	f7fe f887 	bl	8000e5c <__aeabi_ddiv>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	000c      	movs	r4, r1
 8002d52:	0018      	movs	r0, r3
 8002d54:	0021      	movs	r1, r4
 8002d56:	f7ff faed 	bl	8002334 <__aeabi_d2f>
 8002d5a:	1c03      	adds	r3, r0, #0
 8002d5c:	60fb      	str	r3, [r7, #12]

	// Calculate the Wind Speed in MPH
	float wind_speed = (wind_speed_vout - zero_voltage) / (3.038517 * pow(TempAmb, 0.115157));
 8002d5e:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <calculate_wind_speed+0x110>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1c19      	adds	r1, r3, #0
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7fd fb99 	bl	800049c <__aeabi_fsub>
 8002d6a:	1c03      	adds	r3, r0, #0
 8002d6c:	1c18      	adds	r0, r3, #0
 8002d6e:	f7ff fa8f 	bl	8002290 <__aeabi_f2d>
 8002d72:	0005      	movs	r5, r0
 8002d74:	000e      	movs	r6, r1
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f7ff fa8a 	bl	8002290 <__aeabi_f2d>
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <calculate_wind_speed+0x128>)
 8002d7e:	4c26      	ldr	r4, [pc, #152]	; (8002e18 <calculate_wind_speed+0x12c>)
 8002d80:	001a      	movs	r2, r3
 8002d82:	0023      	movs	r3, r4
 8002d84:	f002 fdb8 	bl	80058f8 <pow>
 8002d88:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <calculate_wind_speed+0x130>)
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <calculate_wind_speed+0x134>)
 8002d8c:	f7fe fc70 	bl	8001670 <__aeabi_dmul>
 8002d90:	0003      	movs	r3, r0
 8002d92:	000c      	movs	r4, r1
 8002d94:	001a      	movs	r2, r3
 8002d96:	0023      	movs	r3, r4
 8002d98:	0028      	movs	r0, r5
 8002d9a:	0031      	movs	r1, r6
 8002d9c:	f7fe f85e 	bl	8000e5c <__aeabi_ddiv>
 8002da0:	0003      	movs	r3, r0
 8002da2:	000c      	movs	r4, r1
 8002da4:	0018      	movs	r0, r3
 8002da6:	0021      	movs	r1, r4
 8002da8:	f7ff fac4 	bl	8002334 <__aeabi_d2f>
 8002dac:	1c03      	adds	r3, r0, #0
 8002dae:	60bb      	str	r3, [r7, #8]
	wind_speed /= 0.087288;
 8002db0:	68b8      	ldr	r0, [r7, #8]
 8002db2:	f7ff fa6d 	bl	8002290 <__aeabi_f2d>
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <calculate_wind_speed+0x138>)
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <calculate_wind_speed+0x13c>)
 8002dba:	f7fe f84f 	bl	8000e5c <__aeabi_ddiv>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	000c      	movs	r4, r1
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	0021      	movs	r1, r4
 8002dc6:	f7ff fab5 	bl	8002334 <__aeabi_d2f>
 8002dca:	1c03      	adds	r3, r0, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
	wind_speed = pow(wind_speed, 3.009364);
 8002dce:	68b8      	ldr	r0, [r7, #8]
 8002dd0:	f7ff fa5e 	bl	8002290 <__aeabi_f2d>
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <calculate_wind_speed+0x140>)
 8002dd6:	4c16      	ldr	r4, [pc, #88]	; (8002e30 <calculate_wind_speed+0x144>)
 8002dd8:	001a      	movs	r2, r3
 8002dda:	0023      	movs	r3, r4
 8002ddc:	f002 fd8c 	bl	80058f8 <pow>
 8002de0:	0003      	movs	r3, r0
 8002de2:	000c      	movs	r4, r1
 8002de4:	0018      	movs	r0, r3
 8002de6:	0021      	movs	r1, r4
 8002de8:	f7ff faa4 	bl	8002334 <__aeabi_d2f>
 8002dec:	1c03      	adds	r3, r0, #0
 8002dee:	60bb      	str	r3, [r7, #8]
	return wind_speed;
 8002df0:	68bb      	ldr	r3, [r7, #8]
}
 8002df2:	1c18      	adds	r0, r3, #0
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b007      	add	sp, #28
 8002df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	bf800000 	.word	0xbf800000
 8002e04:	9999999a 	.word	0x9999999a
 8002e08:	3fd99999 	.word	0x3fd99999
 8002e0c:	d916872b 	.word	0xd916872b
 8002e10:	3f93f7ce 	.word	0x3f93f7ce
 8002e14:	dce7cd03 	.word	0xdce7cd03
 8002e18:	3fbd7aed 	.word	0x3fbd7aed
 8002e1c:	003ab863 	.word	0x003ab863
 8002e20:	40084ee2 	.word	0x40084ee2
 8002e24:	a1554fbe 	.word	0xa1554fbe
 8002e28:	3fb65881 	.word	0x3fb65881
 8002e2c:	6ece13f5 	.word	0x6ece13f5
 8002e30:	4008132d 	.word	0x4008132d

08002e34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002e38:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <SystemInit+0x64>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <SystemInit+0x64>)
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	0049      	lsls	r1, r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002e46:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <SystemInit+0x64>)
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <SystemInit+0x64>)
 8002e4c:	4913      	ldr	r1, [pc, #76]	; (8002e9c <SystemInit+0x68>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <SystemInit+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <SystemInit+0x64>)
 8002e58:	4911      	ldr	r1, [pc, #68]	; (8002ea0 <SystemInit+0x6c>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <SystemInit+0x64>)
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <SystemInit+0x64>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	438a      	bics	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <SystemInit+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <SystemInit+0x64>)
 8002e70:	490c      	ldr	r1, [pc, #48]	; (8002ea4 <SystemInit+0x70>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <SystemInit+0x64>)
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <SystemInit+0x64>)
 8002e7c:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <SystemInit+0x74>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <SystemInit+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <SystemInit+0x78>)
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	0512      	lsls	r2, r2, #20
 8002e8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	88ff400c 	.word	0x88ff400c
 8002ea0:	fef6fff6 	.word	0xfef6fff6
 8002ea4:	fffbffff 	.word	0xfffbffff
 8002ea8:	ff02ffff 	.word	0xff02ffff
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002eb0:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002eb2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eb6:	e003      	b.n	8002ec0 <LoopCopyDataInit>

08002eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ebe:	3104      	adds	r1, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ec0:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ec8:	d3f6      	bcc.n	8002eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002ecc:	e002      	b.n	8002ed4 <LoopFillZerobss>

08002ece <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002ece:	2300      	movs	r3, #0
  str  r3, [r2]
 8002ed0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed2:	3204      	adds	r2, #4

08002ed4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <LoopForever+0x16>)
  cmp  r2, r3
 8002ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ed8:	d3f9      	bcc.n	8002ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002eda:	f7ff ffab 	bl	8002e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f002 fcdf 	bl	80058a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee2:	f7ff fac9 	bl	8002478 <main>

08002ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee6:	e7fe      	b.n	8002ee6 <LoopForever>
   ldr   r0, =_estack
 8002ee8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002eec:	08006a88 	.word	0x08006a88
  ldr  r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ef4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002ef8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002efc:	20000170 	.word	0x20000170

08002f00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC1_COMP_IRQHandler>
	...

08002f04 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_Init+0x3c>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_Init+0x3c>)
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f000 f811 	bl	8002f44 <HAL_InitTick>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002f26:	1dfb      	adds	r3, r7, #7
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e001      	b.n	8002f32 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f2e:	f7ff fce5 	bl	80028fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	781b      	ldrb	r3, [r3, #0]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	40022000 	.word	0x40022000

08002f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_InitTick+0x50>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	23fa      	movs	r3, #250	; 0xfa
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	0010      	movs	r0, r2
 8002f5e:	f7fd f8d3 	bl	8000108 <__udivsi3>
 8002f62:	0003      	movs	r3, r0
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 f8ee 	bl	8003146 <HAL_SYSTICK_Config>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d004      	beq.n	8002f78 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8002f6e:	230f      	movs	r3, #15
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e006      	b.n	8002f86 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	425b      	negs	r3, r3
 8002f7e:	2200      	movs	r2, #0
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f8bb 	bl	80030fc <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002f86:	230f      	movs	r3, #15
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <HAL_GetTick+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	2000016c 	.word	0x2000016c

08002fac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002fb8:	1dfb      	adds	r3, r7, #7
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	231f      	movs	r3, #31
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <NVIC_EnableIRQ+0x28>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4091      	lsls	r1, r2
 8002fc8:	000a      	movs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	0002      	movs	r2, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002fe6:	1dfb      	adds	r3, r7, #7
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b7f      	cmp	r3, #127	; 0x7f
 8002fec:	d932      	bls.n	8003054 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <NVIC_SetPriority+0xd4>)
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	3b08      	subs	r3, #8
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3306      	adds	r3, #6
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	3304      	adds	r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	1dfa      	adds	r2, r7, #7
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	0011      	movs	r1, r2
 800300e:	2203      	movs	r2, #3
 8003010:	400a      	ands	r2, r1
 8003012:	00d2      	lsls	r2, r2, #3
 8003014:	21ff      	movs	r1, #255	; 0xff
 8003016:	4091      	lsls	r1, r2
 8003018:	000a      	movs	r2, r1
 800301a:	43d2      	mvns	r2, r2
 800301c:	401a      	ands	r2, r3
 800301e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	019b      	lsls	r3, r3, #6
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	401a      	ands	r2, r3
 8003028:	1dfb      	adds	r3, r7, #7
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	0018      	movs	r0, r3
 800302e:	2303      	movs	r3, #3
 8003030:	4003      	ands	r3, r0
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003036:	481d      	ldr	r0, [pc, #116]	; (80030ac <NVIC_SetPriority+0xd4>)
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	001c      	movs	r4, r3
 800303e:	230f      	movs	r3, #15
 8003040:	4023      	ands	r3, r4
 8003042:	3b08      	subs	r3, #8
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	430a      	orrs	r2, r1
 8003048:	3306      	adds	r3, #6
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	18c3      	adds	r3, r0, r3
 800304e:	3304      	adds	r3, #4
 8003050:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003052:	e027      	b.n	80030a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <NVIC_SetPriority+0xd8>)
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b25b      	sxtb	r3, r3
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	33c0      	adds	r3, #192	; 0xc0
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	589b      	ldr	r3, [r3, r2]
 8003064:	1dfa      	adds	r2, r7, #7
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	0011      	movs	r1, r2
 800306a:	2203      	movs	r2, #3
 800306c:	400a      	ands	r2, r1
 800306e:	00d2      	lsls	r2, r2, #3
 8003070:	21ff      	movs	r1, #255	; 0xff
 8003072:	4091      	lsls	r1, r2
 8003074:	000a      	movs	r2, r1
 8003076:	43d2      	mvns	r2, r2
 8003078:	401a      	ands	r2, r3
 800307a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	22ff      	movs	r2, #255	; 0xff
 8003082:	401a      	ands	r2, r3
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	0018      	movs	r0, r3
 800308a:	2303      	movs	r3, #3
 800308c:	4003      	ands	r3, r0
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003092:	4807      	ldr	r0, [pc, #28]	; (80030b0 <NVIC_SetPriority+0xd8>)
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b25b      	sxtb	r3, r3
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	430a      	orrs	r2, r1
 800309e:	33c0      	adds	r3, #192	; 0xc0
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	501a      	str	r2, [r3, r0]
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b003      	add	sp, #12
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	e000ed00 	.word	0xe000ed00
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <SysTick_Config+0x40>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c6:	2301      	movs	r3, #1
 80030c8:	e010      	b.n	80030ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <SysTick_Config+0x44>)
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	3a01      	subs	r2, #1
 80030d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d2:	2301      	movs	r3, #1
 80030d4:	425b      	negs	r3, r3
 80030d6:	2103      	movs	r1, #3
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff ff7d 	bl	8002fd8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <SysTick_Config+0x44>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <SysTick_Config+0x44>)
 80030e6:	2207      	movs	r2, #7
 80030e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	00ffffff 	.word	0x00ffffff
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	210f      	movs	r1, #15
 8003108:	187b      	adds	r3, r7, r1
 800310a:	1c02      	adds	r2, r0, #0
 800310c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	187b      	adds	r3, r7, r1
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b25b      	sxtb	r3, r3
 8003116:	0011      	movs	r1, r2
 8003118:	0018      	movs	r0, r3
 800311a:	f7ff ff5d 	bl	8002fd8 <NVIC_SetPriority>
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	0002      	movs	r2, r0
 800312e:	1dfb      	adds	r3, r7, #7
 8003130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b25b      	sxtb	r3, r3
 8003138:	0018      	movs	r0, r3
 800313a:	f7ff ff37 	bl	8002fac <NVIC_EnableIRQ>
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff ffaf 	bl	80030b4 <SysTick_Config>
 8003156:	0003      	movs	r3, r0
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b002      	add	sp, #8
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003176:	e155      	b.n	8003424 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4091      	lsls	r1, r2
 8003182:	000a      	movs	r2, r1
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d100      	bne.n	8003190 <HAL_GPIO_Init+0x30>
 800318e:	e146      	b.n	800341e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x40>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b12      	cmp	r3, #18
 800319e:	d123      	bne.n	80031e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	58d3      	ldr	r3, [r2, r3]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2207      	movs	r2, #7
 80031b2:	4013      	ands	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	409a      	lsls	r2, r3
 80031ba:	0013      	movs	r3, r2
 80031bc:	43da      	mvns	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2107      	movs	r1, #7
 80031cc:	400b      	ands	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	409a      	lsls	r2, r3
 80031d2:	0013      	movs	r3, r2
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	6939      	ldr	r1, [r7, #16]
 80031e6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d00b      	beq.n	8003208 <HAL_GPIO_Init+0xa8>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d007      	beq.n	8003208 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031fc:	2b11      	cmp	r3, #17
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b12      	cmp	r3, #18
 8003206:	d130      	bne.n	800326a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	409a      	lsls	r2, r3
 8003216:	0013      	movs	r3, r2
 8003218:	43da      	mvns	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	409a      	lsls	r2, r3
 800322a:	0013      	movs	r3, r2
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800323e:	2201      	movs	r2, #1
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
 8003244:	0013      	movs	r3, r2
 8003246:	43da      	mvns	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	2201      	movs	r2, #1
 8003256:	401a      	ands	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	409a      	lsls	r2, r3
 8003278:	0013      	movs	r3, r2
 800327a:	43da      	mvns	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2203      	movs	r2, #3
 8003288:	401a      	ands	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	409a      	lsls	r2, r3
 8003290:	0013      	movs	r3, r2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	409a      	lsls	r2, r3
 80032c0:	0013      	movs	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	4013      	ands	r3, r2
 80032d8:	d100      	bne.n	80032dc <HAL_GPIO_Init+0x17c>
 80032da:	e0a0      	b.n	800341e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032dc:	4b57      	ldr	r3, [pc, #348]	; (800343c <HAL_GPIO_Init+0x2dc>)
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	4b56      	ldr	r3, [pc, #344]	; (800343c <HAL_GPIO_Init+0x2dc>)
 80032e2:	2101      	movs	r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80032e8:	4a55      	ldr	r2, [pc, #340]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	589b      	ldr	r3, [r3, r2]
 80032f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2203      	movs	r2, #3
 80032fa:	4013      	ands	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	220f      	movs	r2, #15
 8003300:	409a      	lsls	r2, r3
 8003302:	0013      	movs	r3, r2
 8003304:	43da      	mvns	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	23a0      	movs	r3, #160	; 0xa0
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	429a      	cmp	r2, r3
 8003314:	d01f      	beq.n	8003356 <HAL_GPIO_Init+0x1f6>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <HAL_GPIO_Init+0x2e4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d019      	beq.n	8003352 <HAL_GPIO_Init+0x1f2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a49      	ldr	r2, [pc, #292]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x1ee>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a48      	ldr	r2, [pc, #288]	; (800344c <HAL_GPIO_Init+0x2ec>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x1ea>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a47      	ldr	r2, [pc, #284]	; (8003450 <HAL_GPIO_Init+0x2f0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x1e6>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a46      	ldr	r2, [pc, #280]	; (8003454 <HAL_GPIO_Init+0x2f4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x1e2>
 800333e:	2305      	movs	r3, #5
 8003340:	e00a      	b.n	8003358 <HAL_GPIO_Init+0x1f8>
 8003342:	2306      	movs	r3, #6
 8003344:	e008      	b.n	8003358 <HAL_GPIO_Init+0x1f8>
 8003346:	2304      	movs	r3, #4
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x1f8>
 800334a:	2303      	movs	r3, #3
 800334c:	e004      	b.n	8003358 <HAL_GPIO_Init+0x1f8>
 800334e:	2302      	movs	r3, #2
 8003350:	e002      	b.n	8003358 <HAL_GPIO_Init+0x1f8>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_GPIO_Init+0x1f8>
 8003356:	2300      	movs	r3, #0
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	2103      	movs	r1, #3
 800335c:	400a      	ands	r2, r1
 800335e:	0092      	lsls	r2, r2, #2
 8003360:	4093      	lsls	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003368:	4935      	ldr	r1, [pc, #212]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	3302      	adds	r3, #2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43da      	mvns	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	025b      	lsls	r3, r3, #9
 800338e:	4013      	ands	r3, r2
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	43da      	mvns	r2, r3
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	029b      	lsls	r3, r3, #10
 80033b8:	4013      	ands	r3, r2
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	035b      	lsls	r3, r3, #13
 80033e2:	4013      	ands	r3, r2
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	039b      	lsls	r3, r3, #14
 800340c:	4013      	ands	r3, r2
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	40da      	lsrs	r2, r3
 800342c:	1e13      	subs	r3, r2, #0
 800342e:	d000      	beq.n	8003432 <HAL_GPIO_Init+0x2d2>
 8003430:	e6a2      	b.n	8003178 <HAL_GPIO_Init+0x18>
  }
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b006      	add	sp, #24
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40021000 	.word	0x40021000
 8003440:	40010000 	.word	0x40010000
 8003444:	50000400 	.word	0x50000400
 8003448:	50000800 	.word	0x50000800
 800344c:	50000c00 	.word	0x50000c00
 8003450:	50001000 	.word	0x50001000
 8003454:	50001c00 	.word	0x50001c00
 8003458:	40010400 	.word	0x40010400

0800345c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	0008      	movs	r0, r1
 8003466:	0011      	movs	r1, r2
 8003468:	1cbb      	adds	r3, r7, #2
 800346a:	1c02      	adds	r2, r0, #0
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	1c7b      	adds	r3, r7, #1
 8003470:	1c0a      	adds	r2, r1, #0
 8003472:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003474:	1c7b      	adds	r3, r7, #1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347c:	1cbb      	adds	r3, r7, #2
 800347e:	881a      	ldrh	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003484:	e003      	b.n	800348e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003486:	1cbb      	adds	r3, r7, #2
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	000a      	movs	r2, r1
 80034a0:	1cbb      	adds	r3, r7, #2
 80034a2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	1cbb      	adds	r3, r7, #2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	405a      	eors	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	615a      	str	r2, [r3, #20]
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e082      	b.n	80035d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2241      	movs	r2, #65	; 0x41
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2240      	movs	r2, #64	; 0x40
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff fa1d 	bl	8002924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2241      	movs	r2, #65	; 0x41
 80034ee:	2124      	movs	r1, #36	; 0x24
 80034f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	438a      	bics	r2, r1
 8003500:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4934      	ldr	r1, [pc, #208]	; (80035dc <HAL_I2C_Init+0x120>)
 800350c:	400a      	ands	r2, r1
 800350e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4931      	ldr	r1, [pc, #196]	; (80035e0 <HAL_I2C_Init+0x124>)
 800351c:	400a      	ands	r2, r1
 800351e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	0209      	lsls	r1, r1, #8
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	e007      	b.n	800354a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2184      	movs	r1, #132	; 0x84
 8003544:	0209      	lsls	r1, r1, #8
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d104      	bne.n	800355c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	491f      	ldr	r1, [pc, #124]	; (80035e4 <HAL_I2C_Init+0x128>)
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	491a      	ldr	r1, [pc, #104]	; (80035e0 <HAL_I2C_Init+0x124>)
 8003578:	400a      	ands	r2, r1
 800357a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	431a      	orrs	r2, r3
 8003586:	0011      	movs	r1, r2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	021a      	lsls	r2, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69d9      	ldr	r1, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2241      	movs	r2, #65	; 0x41
 80035c0:	2120      	movs	r1, #32
 80035c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2242      	movs	r2, #66	; 0x42
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	f0ffffff 	.word	0xf0ffffff
 80035e0:	ffff7fff 	.word	0xffff7fff
 80035e4:	02008000 	.word	0x02008000

080035e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2241      	movs	r2, #65	; 0x41
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d138      	bne.n	8003670 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2240      	movs	r2, #64	; 0x40
 8003602:	5c9b      	ldrb	r3, [r3, r2]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003608:	2302      	movs	r3, #2
 800360a:	e032      	b.n	8003672 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2240      	movs	r2, #64	; 0x40
 8003610:	2101      	movs	r1, #1
 8003612:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2241      	movs	r2, #65	; 0x41
 8003618:	2124      	movs	r1, #36	; 0x24
 800361a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2101      	movs	r1, #1
 8003628:	438a      	bics	r2, r1
 800362a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4911      	ldr	r1, [pc, #68]	; (800367c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003638:	400a      	ands	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2101      	movs	r1, #1
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2241      	movs	r2, #65	; 0x41
 8003660:	2120      	movs	r1, #32
 8003662:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b002      	add	sp, #8
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	ffffefff 	.word	0xffffefff

08003680 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2241      	movs	r2, #65	; 0x41
 800368e:	5c9b      	ldrb	r3, [r3, r2]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	d139      	bne.n	800370a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2240      	movs	r2, #64	; 0x40
 800369a:	5c9b      	ldrb	r3, [r3, r2]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e033      	b.n	800370c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	2101      	movs	r1, #1
 80036aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2241      	movs	r2, #65	; 0x41
 80036b0:	2124      	movs	r1, #36	; 0x24
 80036b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	438a      	bics	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2241      	movs	r2, #65	; 0x41
 80036fa:	2120      	movs	r1, #32
 80036fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2240      	movs	r2, #64	; 0x40
 8003702:	2100      	movs	r1, #0
 8003704:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800370a:	2302      	movs	r3, #2
  }
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}
 8003714:	fffff0ff 	.word	0xfffff0ff

08003718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f000 fbbc 	bl	8003ea4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372c:	4bc8      	ldr	r3, [pc, #800]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	220c      	movs	r2, #12
 8003732:	4013      	ands	r3, r2
 8003734:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003736:	4bc6      	ldr	r3, [pc, #792]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	025b      	lsls	r3, r3, #9
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2201      	movs	r2, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d100      	bne.n	800374e <HAL_RCC_OscConfig+0x36>
 800374c:	e07e      	b.n	800384c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d007      	beq.n	8003764 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d112      	bne.n	8003780 <HAL_RCC_OscConfig+0x68>
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	025b      	lsls	r3, r3, #9
 8003760:	429a      	cmp	r2, r3
 8003762:	d10d      	bne.n	8003780 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4bba      	ldr	r3, [pc, #744]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	029b      	lsls	r3, r3, #10
 800376c:	4013      	ands	r3, r2
 800376e:	d100      	bne.n	8003772 <HAL_RCC_OscConfig+0x5a>
 8003770:	e06b      	b.n	800384a <HAL_RCC_OscConfig+0x132>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d167      	bne.n	800384a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f000 fb92 	bl	8003ea4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	025b      	lsls	r3, r3, #9
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x84>
 800378c:	4bb0      	ldr	r3, [pc, #704]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4baf      	ldr	r3, [pc, #700]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	0249      	lsls	r1, r1, #9
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e027      	b.n	80037ec <HAL_RCC_OscConfig+0xd4>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	23a0      	movs	r3, #160	; 0xa0
 80037a2:	02db      	lsls	r3, r3, #11
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d10e      	bne.n	80037c6 <HAL_RCC_OscConfig+0xae>
 80037a8:	4ba9      	ldr	r3, [pc, #676]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4ba8      	ldr	r3, [pc, #672]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	02c9      	lsls	r1, r1, #11
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	4ba6      	ldr	r3, [pc, #664]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4ba5      	ldr	r3, [pc, #660]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0249      	lsls	r1, r1, #9
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e012      	b.n	80037ec <HAL_RCC_OscConfig+0xd4>
 80037c6:	4ba2      	ldr	r3, [pc, #648]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4ba1      	ldr	r3, [pc, #644]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037cc:	49a1      	ldr	r1, [pc, #644]	; (8003a54 <HAL_RCC_OscConfig+0x33c>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	4b9f      	ldr	r3, [pc, #636]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	025b      	lsls	r3, r3, #9
 80037da:	4013      	ands	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4b9b      	ldr	r3, [pc, #620]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b9a      	ldr	r3, [pc, #616]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80037e6:	499c      	ldr	r1, [pc, #624]	; (8003a58 <HAL_RCC_OscConfig+0x340>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7ff fbd0 	bl	8002f98 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037fc:	e009      	b.n	8003812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fe:	f7ff fbcb 	bl	8002f98 <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d902      	bls.n	8003812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	f000 fb49 	bl	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003812:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	029b      	lsls	r3, r3, #10
 800381a:	4013      	ands	r3, r2
 800381c:	d0ef      	beq.n	80037fe <HAL_RCC_OscConfig+0xe6>
 800381e:	e015      	b.n	800384c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7ff fbba 	bl	8002f98 <HAL_GetTick>
 8003824:	0003      	movs	r3, r0
 8003826:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382a:	f7ff fbb5 	bl	8002f98 <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b64      	cmp	r3, #100	; 0x64
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e333      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800383c:	4b84      	ldr	r3, [pc, #528]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	4013      	ands	r3, r2
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x112>
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2202      	movs	r2, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d100      	bne.n	8003858 <HAL_RCC_OscConfig+0x140>
 8003856:	e098      	b.n	800398a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	2220      	movs	r2, #32
 8003862:	4013      	ands	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003866:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b79      	ldr	r3, [pc, #484]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800386c:	2120      	movs	r1, #32
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	2220      	movs	r2, #32
 8003876:	4393      	bics	r3, r2
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d13d      	bne.n	8003902 <HAL_RCC_OscConfig+0x1ea>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d13a      	bne.n	8003902 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800388c:	4b70      	ldr	r3, [pc, #448]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2204      	movs	r2, #4
 8003892:	4013      	ands	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_RCC_OscConfig+0x188>
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e301      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b6b      	ldr	r3, [pc, #428]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a6d      	ldr	r2, [pc, #436]	; (8003a5c <HAL_RCC_OscConfig+0x344>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	021a      	lsls	r2, r3, #8
 80038b0:	4b67      	ldr	r3, [pc, #412]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80038b6:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2209      	movs	r2, #9
 80038bc:	4393      	bics	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038c8:	f000 fc20 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80038cc:	0001      	movs	r1, r0
 80038ce:	4b60      	ldr	r3, [pc, #384]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	220f      	movs	r2, #15
 80038d6:	4013      	ands	r3, r2
 80038d8:	4a61      	ldr	r2, [pc, #388]	; (8003a60 <HAL_RCC_OscConfig+0x348>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	000a      	movs	r2, r1
 80038de:	40da      	lsrs	r2, r3
 80038e0:	4b60      	ldr	r3, [pc, #384]	; (8003a64 <HAL_RCC_OscConfig+0x34c>)
 80038e2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80038e4:	2513      	movs	r5, #19
 80038e6:	197c      	adds	r4, r7, r5
 80038e8:	2000      	movs	r0, #0
 80038ea:	f7ff fb2b 	bl	8002f44 <HAL_InitTick>
 80038ee:	0003      	movs	r3, r0
 80038f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80038f2:	197b      	adds	r3, r7, r5
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d047      	beq.n	800398a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80038fa:	2313      	movs	r3, #19
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	e2d0      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d027      	beq.n	8003958 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003908:	4b51      	ldr	r3, [pc, #324]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2209      	movs	r2, #9
 800390e:	4393      	bics	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7ff fb3d 	bl	8002f98 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003924:	f7ff fb38 	bl	8002f98 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e2b6      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2204      	movs	r2, #4
 800393c:	4013      	ands	r3, r2
 800393e:	d0f1      	beq.n	8003924 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a45      	ldr	r2, [pc, #276]	; (8003a5c <HAL_RCC_OscConfig+0x344>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e018      	b.n	800398a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800395e:	2101      	movs	r1, #1
 8003960:	438a      	bics	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7ff fb18 	bl	8002f98 <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396e:	f7ff fb13 	bl	8002f98 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e291      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2204      	movs	r2, #4
 8003986:	4013      	ands	r3, r2
 8003988:	d1f1      	bne.n	800396e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	4013      	ands	r3, r2
 8003992:	d100      	bne.n	8003996 <HAL_RCC_OscConfig+0x27e>
 8003994:	e09f      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d13f      	bne.n	8003a1c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800399c:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4013      	ands	r3, r2
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_OscConfig+0x29c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e277      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a2b      	ldr	r2, [pc, #172]	; (8003a68 <HAL_RCC_OscConfig+0x350>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c8:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	0a19      	lsrs	r1, r3, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	061a      	lsls	r2, r3, #24
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	0b5b      	lsrs	r3, r3, #13
 80039e2:	3301      	adds	r3, #1
 80039e4:	2280      	movs	r2, #128	; 0x80
 80039e6:	0212      	lsls	r2, r2, #8
 80039e8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80039ea:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	210f      	movs	r1, #15
 80039f2:	400b      	ands	r3, r1
 80039f4:	491a      	ldr	r1, [pc, #104]	; (8003a60 <HAL_RCC_OscConfig+0x348>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039fa:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <HAL_RCC_OscConfig+0x34c>)
 80039fc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80039fe:	2513      	movs	r5, #19
 8003a00:	197c      	adds	r4, r7, r5
 8003a02:	2000      	movs	r0, #0
 8003a04:	f7ff fa9e 	bl	8002f44 <HAL_InitTick>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003a0c:	197b      	adds	r3, r7, r5
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d060      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8003a14:	2313      	movs	r3, #19
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	e243      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03e      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_RCC_OscConfig+0x338>)
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	0049      	lsls	r1, r1, #1
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7ff fab1 	bl	8002f98 <HAL_GetTick>
 8003a36:	0003      	movs	r3, r0
 8003a38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a3a:	e017      	b.n	8003a6c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a3c:	f7ff faac 	bl	8002f98 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d910      	bls.n	8003a6c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e22a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40021000 	.word	0x40021000
 8003a54:	fffeffff 	.word	0xfffeffff
 8003a58:	fffbffff 	.word	0xfffbffff
 8003a5c:	ffffe0ff 	.word	0xffffe0ff
 8003a60:	08006a20 	.word	0x08006a20
 8003a64:	20000004 	.word	0x20000004
 8003a68:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a6c:	4bc6      	ldr	r3, [pc, #792]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d0e1      	beq.n	8003a3c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a78:	4bc3      	ldr	r3, [pc, #780]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4ac3      	ldr	r2, [pc, #780]	; (8003d8c <HAL_RCC_OscConfig+0x674>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	0019      	movs	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a86:	4bc0      	ldr	r3, [pc, #768]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a8c:	4bbe      	ldr	r3, [pc, #760]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	0a19      	lsrs	r1, r3, #8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	061a      	lsls	r2, r3, #24
 8003a9a:	4bbb      	ldr	r3, [pc, #748]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	e019      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aa2:	4bb9      	ldr	r3, [pc, #740]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4bb8      	ldr	r3, [pc, #736]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003aa8:	49b9      	ldr	r1, [pc, #740]	; (8003d90 <HAL_RCC_OscConfig+0x678>)
 8003aaa:	400a      	ands	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7ff fa73 	bl	8002f98 <HAL_GetTick>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab8:	f7ff fa6e 	bl	8002f98 <HAL_GetTick>
 8003abc:	0002      	movs	r2, r0
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1ec      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003aca:	4baf      	ldr	r3, [pc, #700]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2208      	movs	r2, #8
 8003adc:	4013      	ands	r3, r2
 8003ade:	d036      	beq.n	8003b4e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d019      	beq.n	8003b1c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae8:	4ba7      	ldr	r3, [pc, #668]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aec:	4ba6      	ldr	r3, [pc, #664]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003aee:	2101      	movs	r1, #1
 8003af0:	430a      	orrs	r2, r1
 8003af2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af4:	f7ff fa50 	bl	8002f98 <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7ff fa4b 	bl	8002f98 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1c9      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b10:	4b9d      	ldr	r3, [pc, #628]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	2202      	movs	r2, #2
 8003b16:	4013      	ands	r3, r2
 8003b18:	d0f1      	beq.n	8003afe <HAL_RCC_OscConfig+0x3e6>
 8003b1a:	e018      	b.n	8003b4e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1c:	4b9a      	ldr	r3, [pc, #616]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b20:	4b99      	ldr	r3, [pc, #612]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	438a      	bics	r2, r1
 8003b26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b28:	f7ff fa36 	bl	8002f98 <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b32:	f7ff fa31 	bl	8002f98 <HAL_GetTick>
 8003b36:	0002      	movs	r2, r0
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1af      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b44:	4b90      	ldr	r3, [pc, #576]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	2202      	movs	r2, #2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d1f1      	bne.n	8003b32 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2204      	movs	r2, #4
 8003b54:	4013      	ands	r3, r2
 8003b56:	d100      	bne.n	8003b5a <HAL_RCC_OscConfig+0x442>
 8003b58:	e0af      	b.n	8003cba <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2323      	movs	r3, #35	; 0x23
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b62:	4b89      	ldr	r3, [pc, #548]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	055b      	lsls	r3, r3, #21
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d10a      	bne.n	8003b84 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b72:	4b85      	ldr	r3, [pc, #532]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	0549      	lsls	r1, r1, #21
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b7c:	2323      	movs	r3, #35	; 0x23
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b83      	ldr	r3, [pc, #524]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d11a      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b90:	4b80      	ldr	r3, [pc, #512]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	0049      	lsls	r1, r1, #1
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7ff f9fb 	bl	8002f98 <HAL_GetTick>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba8:	f7ff f9f6 	bl	8002f98 <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e174      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x67c>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	0049      	lsls	r1, r1, #1
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50
 8003be0:	e031      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4ec>
 8003bea:	4b67      	ldr	r3, [pc, #412]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bee:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003bf0:	4967      	ldr	r1, [pc, #412]	; (8003d90 <HAL_RCC_OscConfig+0x678>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
 8003bf6:	4b64      	ldr	r3, [pc, #400]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bfa:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003bfc:	4966      	ldr	r1, [pc, #408]	; (8003d98 <HAL_RCC_OscConfig+0x680>)
 8003bfe:	400a      	ands	r2, r1
 8003c00:	651a      	str	r2, [r3, #80]	; 0x50
 8003c02:	e020      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	23a0      	movs	r3, #160	; 0xa0
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d10e      	bne.n	8003c2e <HAL_RCC_OscConfig+0x516>
 8003c10:	4b5d      	ldr	r3, [pc, #372]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c14:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	00c9      	lsls	r1, r1, #3
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	651a      	str	r2, [r3, #80]	; 0x50
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c22:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	0049      	lsls	r1, r1, #1
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c2c:	e00b      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
 8003c2e:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c32:	4b55      	ldr	r3, [pc, #340]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c34:	4956      	ldr	r1, [pc, #344]	; (8003d90 <HAL_RCC_OscConfig+0x678>)
 8003c36:	400a      	ands	r2, r1
 8003c38:	651a      	str	r2, [r3, #80]	; 0x50
 8003c3a:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c3e:	4b52      	ldr	r3, [pc, #328]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c40:	4955      	ldr	r1, [pc, #340]	; (8003d98 <HAL_RCC_OscConfig+0x680>)
 8003c42:	400a      	ands	r2, r1
 8003c44:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4e:	f7ff f9a3 	bl	8002f98 <HAL_GetTick>
 8003c52:	0003      	movs	r3, r0
 8003c54:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c56:	e009      	b.n	8003c6c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7ff f99e 	bl	8002f98 <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	4a4e      	ldr	r2, [pc, #312]	; (8003d9c <HAL_RCC_OscConfig+0x684>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e11b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c6c:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4013      	ands	r3, r2
 8003c76:	d0ef      	beq.n	8003c58 <HAL_RCC_OscConfig+0x540>
 8003c78:	e014      	b.n	8003ca4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7ff f98d 	bl	8002f98 <HAL_GetTick>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c82:	e009      	b.n	8003c98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7ff f988 	bl	8002f98 <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a43      	ldr	r2, [pc, #268]	; (8003d9c <HAL_RCC_OscConfig+0x684>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e105      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c98:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d1ef      	bne.n	8003c84 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ca4:	2323      	movs	r3, #35	; 0x23
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb2:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003cb4:	493a      	ldr	r1, [pc, #232]	; (8003da0 <HAL_RCC_OscConfig+0x688>)
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d049      	beq.n	8003d58 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d026      	beq.n	8003d1a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003cde:	2101      	movs	r1, #1
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_RCC_OscConfig+0x68c>)
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	4b2e      	ldr	r3, [pc, #184]	; (8003da4 <HAL_RCC_OscConfig+0x68c>)
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	0189      	lsls	r1, r1, #6
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7ff f951 	bl	8002f98 <HAL_GetTick>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cfc:	f7ff f94c 	bl	8002f98 <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0ca      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0f1      	beq.n	8003cfc <HAL_RCC_OscConfig+0x5e4>
 8003d18:	e01e      	b.n	8003d58 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003d20:	2101      	movs	r1, #1
 8003d22:	438a      	bics	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <HAL_RCC_OscConfig+0x68c>)
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HAL_RCC_OscConfig+0x68c>)
 8003d2c:	491e      	ldr	r1, [pc, #120]	; (8003da8 <HAL_RCC_OscConfig+0x690>)
 8003d2e:	400a      	ands	r2, r1
 8003d30:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7ff f931 	bl	8002f98 <HAL_GetTick>
 8003d36:	0003      	movs	r3, r0
 8003d38:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d3c:	f7ff f92c 	bl	8002f98 <HAL_GetTick>
 8003d40:	0002      	movs	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0aa      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2202      	movs	r2, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	d1f1      	bne.n	8003d3c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d100      	bne.n	8003d62 <HAL_RCC_OscConfig+0x64a>
 8003d60:	e09f      	b.n	8003ea2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d100      	bne.n	8003d6a <HAL_RCC_OscConfig+0x652>
 8003d68:	e078      	b.n	8003e5c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d159      	bne.n	8003e26 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_RCC_OscConfig+0x670>)
 8003d78:	490c      	ldr	r1, [pc, #48]	; (8003dac <HAL_RCC_OscConfig+0x694>)
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7ff f90b 	bl	8002f98 <HAL_GetTick>
 8003d82:	0003      	movs	r3, r0
 8003d84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d86:	e01c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x6aa>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	ffff1fff 	.word	0xffff1fff
 8003d90:	fffffeff 	.word	0xfffffeff
 8003d94:	40007000 	.word	0x40007000
 8003d98:	fffffbff 	.word	0xfffffbff
 8003d9c:	00001388 	.word	0x00001388
 8003da0:	efffffff 	.word	0xefffffff
 8003da4:	40010000 	.word	0x40010000
 8003da8:	ffffdfff 	.word	0xffffdfff
 8003dac:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7ff f8f2 	bl	8002f98 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e070      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	049b      	lsls	r3, r3, #18
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a37      	ldr	r2, [pc, #220]	; (8003eb0 <HAL_RCC_OscConfig+0x798>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de6:	431a      	orrs	r2, r3
 8003de8:	4b30      	ldr	r3, [pc, #192]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003dea:	430a      	orrs	r2, r1
 8003dec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dee:	4b2f      	ldr	r3, [pc, #188]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	0449      	lsls	r1, r1, #17
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7ff f8cc 	bl	8002f98 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e06:	f7ff f8c7 	bl	8002f98 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e045      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	049b      	lsls	r3, r3, #18
 8003e20:	4013      	ands	r3, r2
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x6ee>
 8003e24:	e03d      	b.n	8003ea2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003e2c:	4921      	ldr	r1, [pc, #132]	; (8003eb4 <HAL_RCC_OscConfig+0x79c>)
 8003e2e:	400a      	ands	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7ff f8b1 	bl	8002f98 <HAL_GetTick>
 8003e36:	0003      	movs	r3, r0
 8003e38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7ff f8ac 	bl	8002f98 <HAL_GetTick>
 8003e40:	0002      	movs	r2, r0
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e02a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e4e:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	049b      	lsls	r3, r3, #18
 8003e56:	4013      	ands	r3, r2
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x724>
 8003e5a:	e022      	b.n	8003ea2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e68:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_RCC_OscConfig+0x794>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	025b      	lsls	r3, r3, #9
 8003e74:	401a      	ands	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10f      	bne.n	8003e9e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	23f0      	movs	r3, #240	; 0xf0
 8003e82:	039b      	lsls	r3, r3, #14
 8003e84:	401a      	ands	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	23c0      	movs	r3, #192	; 0xc0
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	401a      	ands	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b00a      	add	sp, #40	; 0x28
 8003eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	ff02ffff 	.word	0xff02ffff
 8003eb4:	feffffff 	.word	0xfeffffff

08003eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e10d      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d911      	bls.n	8003efe <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b85      	ldr	r3, [pc, #532]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eec:	4b80      	ldr	r3, [pc, #512]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e0f4      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b7a      	ldr	r3, [pc, #488]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	22f0      	movs	r2, #240	; 0xf0
 8003f0e:	4393      	bics	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	4b77      	ldr	r3, [pc, #476]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4013      	ands	r3, r2
 8003f24:	d100      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x70>
 8003f26:	e089      	b.n	800403c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f30:	4b70      	ldr	r3, [pc, #448]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	029b      	lsls	r3, r3, #10
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d120      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0d3      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f48:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	049b      	lsls	r3, r3, #18
 8003f50:	4013      	ands	r3, r2
 8003f52:	d114      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0c7      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f60:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2204      	movs	r2, #4
 8003f66:	4013      	ands	r3, r2
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0bc      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f6e:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4013      	ands	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0b4      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2203      	movs	r2, #3
 8003f84:	4393      	bics	r3, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f92:	f7ff f801 	bl	8002f98 <HAL_GetTick>
 8003f96:	0003      	movs	r3, r0
 8003f98:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d111      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fe fff8 	bl	8002f98 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	4a52      	ldr	r2, [pc, #328]	; (80040f8 <HAL_RCC_ClockConfig+0x240>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e097      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb8:	4b4e      	ldr	r3, [pc, #312]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	220c      	movs	r2, #12
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d1ef      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xec>
 8003fc4:	e03a      	b.n	800403c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d111      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fce:	e009      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fe ffe2 	bl	8002f98 <HAL_GetTick>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	4a47      	ldr	r2, [pc, #284]	; (80040f8 <HAL_RCC_ClockConfig+0x240>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e081      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe4:	4b43      	ldr	r3, [pc, #268]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	220c      	movs	r2, #12
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d1ef      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x118>
 8003ff0:	e024      	b.n	800403c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d11b      	bne.n	8004032 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ffa:	e009      	b.n	8004010 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fe ffcc 	bl	8002f98 <HAL_GetTick>
 8004000:	0002      	movs	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <HAL_RCC_ClockConfig+0x240>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e06b      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	220c      	movs	r2, #12
 8004016:	4013      	ands	r3, r2
 8004018:	2b04      	cmp	r3, #4
 800401a:	d1ef      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x144>
 800401c:	e00e      	b.n	800403c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401e:	f7fe ffbb 	bl	8002f98 <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	4a33      	ldr	r2, [pc, #204]	; (80040f8 <HAL_RCC_ClockConfig+0x240>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e05a      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004032:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	220c      	movs	r2, #12
 8004038:	4013      	ands	r3, r2
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2201      	movs	r2, #1
 8004042:	4013      	ands	r3, r2
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d211      	bcs.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2201      	movs	r2, #1
 8004050:	4393      	bics	r3, r2
 8004052:	0019      	movs	r1, r3
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCC_ClockConfig+0x238>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2201      	movs	r2, #1
 8004062:	4013      	ands	r3, r2
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d001      	beq.n	800406e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e03c      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2204      	movs	r2, #4
 8004074:	4013      	ands	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_RCC_ClockConfig+0x244>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2208      	movs	r2, #8
 8004092:	4013      	ands	r3, r2
 8004094:	d00a      	beq.n	80040ac <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_RCC_ClockConfig+0x248>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00da      	lsls	r2, r3, #3
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ac:	f000 f82e 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80040b0:	0001      	movs	r1, r0
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_ClockConfig+0x23c>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	220f      	movs	r2, #15
 80040ba:	4013      	ands	r3, r2
 80040bc:	4a11      	ldr	r2, [pc, #68]	; (8004104 <HAL_RCC_ClockConfig+0x24c>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	000a      	movs	r2, r1
 80040c2:	40da      	lsrs	r2, r3
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCC_ClockConfig+0x250>)
 80040c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80040c8:	250b      	movs	r5, #11
 80040ca:	197c      	adds	r4, r7, r5
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7fe ff39 	bl	8002f44 <HAL_InitTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80040d6:	197b      	adds	r3, r7, r5
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80040de:	230b      	movs	r3, #11
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b004      	add	sp, #16
 80040ee:	bdb0      	pop	{r4, r5, r7, pc}
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40021000 	.word	0x40021000
 80040f8:	00001388 	.word	0x00001388
 80040fc:	fffff8ff 	.word	0xfffff8ff
 8004100:	ffffc7ff 	.word	0xffffc7ff
 8004104:	08006a20 	.word	0x08006a20
 8004108:	20000004 	.word	0x20000004

0800410c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	220c      	movs	r2, #12
 800411c:	4013      	ands	r3, r2
 800411e:	2b08      	cmp	r3, #8
 8004120:	d00e      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x34>
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d00f      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x3a>
 8004126:	2b04      	cmp	r3, #4
 8004128:	d157      	bne.n	80041da <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800412a:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCC_GetSysClockFreq+0xf4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2210      	movs	r2, #16
 8004130:	4013      	ands	r3, r2
 8004132:	d002      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004134:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004136:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004138:	e05d      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800413a:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCC_GetSysClockFreq+0xfc>)
 800413c:	613b      	str	r3, [r7, #16]
      break;
 800413e:	e05a      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004140:	4b32      	ldr	r3, [pc, #200]	; (800420c <HAL_RCC_GetSysClockFreq+0x100>)
 8004142:	613b      	str	r3, [r7, #16]
      break;
 8004144:	e057      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	0c9b      	lsrs	r3, r3, #18
 800414a:	220f      	movs	r2, #15
 800414c:	4013      	ands	r3, r2
 800414e:	4a30      	ldr	r2, [pc, #192]	; (8004210 <HAL_RCC_GetSysClockFreq+0x104>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	0d9b      	lsrs	r3, r3, #22
 8004158:	2203      	movs	r2, #3
 800415a:	4013      	ands	r3, r2
 800415c:	3301      	adds	r3, #1
 800415e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004160:	4b27      	ldr	r3, [pc, #156]	; (8004200 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	025b      	lsls	r3, r3, #9
 8004168:	4013      	ands	r3, r2
 800416a:	d00f      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	000a      	movs	r2, r1
 8004170:	0152      	lsls	r2, r2, #5
 8004172:	1a52      	subs	r2, r2, r1
 8004174:	0193      	lsls	r3, r2, #6
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	185b      	adds	r3, r3, r1
 800417c:	025b      	lsls	r3, r3, #9
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	f7fb ffc1 	bl	8000108 <__udivsi3>
 8004186:	0003      	movs	r3, r0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e023      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <HAL_RCC_GetSysClockFreq+0xf4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2210      	movs	r2, #16
 8004192:	4013      	ands	r3, r2
 8004194:	d00f      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	000a      	movs	r2, r1
 800419a:	0152      	lsls	r2, r2, #5
 800419c:	1a52      	subs	r2, r2, r1
 800419e:	0193      	lsls	r3, r2, #6
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	185b      	adds	r3, r3, r1
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7fb ffac 	bl	8000108 <__udivsi3>
 80041b0:	0003      	movs	r3, r0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e00e      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	000a      	movs	r2, r1
 80041ba:	0152      	lsls	r2, r2, #5
 80041bc:	1a52      	subs	r2, r2, r1
 80041be:	0193      	lsls	r3, r2, #6
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	185b      	adds	r3, r3, r1
 80041c6:	029b      	lsls	r3, r3, #10
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7fb ff9c 	bl	8000108 <__udivsi3>
 80041d0:	0003      	movs	r3, r0
 80041d2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	613b      	str	r3, [r7, #16]
      break;
 80041d8:	e00d      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_GetSysClockFreq+0xf4>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	0b5b      	lsrs	r3, r3, #13
 80041e0:	2207      	movs	r2, #7
 80041e2:	4013      	ands	r3, r2
 80041e4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	3301      	adds	r3, #1
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	0212      	lsls	r2, r2, #8
 80041ee:	409a      	lsls	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
      break;
 80041f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041f6:	693b      	ldr	r3, [r7, #16]
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b006      	add	sp, #24
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	003d0900 	.word	0x003d0900
 8004208:	00f42400 	.word	0x00f42400
 800420c:	007a1200 	.word	0x007a1200
 8004210:	08006a30 	.word	0x08006a30

08004214 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2220      	movs	r2, #32
 8004222:	4013      	ands	r3, r2
 8004224:	d106      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	4013      	ands	r3, r2
 8004230:	d100      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004232:	e0dd      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004234:	2317      	movs	r3, #23
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423c:	4ba4      	ldr	r3, [pc, #656]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800423e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	055b      	lsls	r3, r3, #21
 8004244:	4013      	ands	r3, r2
 8004246:	d10a      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004248:	4ba1      	ldr	r3, [pc, #644]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800424a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800424c:	4ba0      	ldr	r3, [pc, #640]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	0549      	lsls	r1, r1, #21
 8004252:	430a      	orrs	r2, r1
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004256:	2317      	movs	r3, #23
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b9d      	ldr	r3, [pc, #628]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4013      	ands	r3, r2
 8004268:	d11a      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426a:	4b9a      	ldr	r3, [pc, #616]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b99      	ldr	r3, [pc, #612]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	0049      	lsls	r1, r1, #1
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004278:	f7fe fe8e 	bl	8002f98 <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	e008      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004282:	f7fe fe89 	bl	8002f98 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b64      	cmp	r3, #100	; 0x64
 800428e:	d901      	bls.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e118      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004294:	4b8f      	ldr	r3, [pc, #572]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4013      	ands	r3, r2
 800429e:	d0f0      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80042a0:	4b8b      	ldr	r3, [pc, #556]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	23c0      	movs	r3, #192	; 0xc0
 80042a6:	039b      	lsls	r3, r3, #14
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	23c0      	movs	r3, #192	; 0xc0
 80042b2:	039b      	lsls	r3, r3, #14
 80042b4:	4013      	ands	r3, r2
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d107      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	23c0      	movs	r3, #192	; 0xc0
 80042c2:	039b      	lsls	r3, r3, #14
 80042c4:	4013      	ands	r3, r2
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d013      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	23c0      	movs	r3, #192	; 0xc0
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	401a      	ands	r2, r3
 80042d6:	23c0      	movs	r3, #192	; 0xc0
 80042d8:	029b      	lsls	r3, r3, #10
 80042da:	429a      	cmp	r2, r3
 80042dc:	d10a      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042de:	4b7c      	ldr	r3, [pc, #496]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	401a      	ands	r2, r3
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	029b      	lsls	r3, r3, #10
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d101      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0e8      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80042f4:	4b76      	ldr	r3, [pc, #472]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042f8:	23c0      	movs	r3, #192	; 0xc0
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d049      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	23c0      	movs	r3, #192	; 0xc0
 800430c:	029b      	lsls	r3, r3, #10
 800430e:	4013      	ands	r3, r2
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	429a      	cmp	r2, r3
 8004314:	d004      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2220      	movs	r2, #32
 800431c:	4013      	ands	r3, r2
 800431e:	d10d      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	23c0      	movs	r3, #192	; 0xc0
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	4013      	ands	r3, r2
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d034      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4013      	ands	r3, r2
 800433a:	d02e      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800433c:	4b64      	ldr	r3, [pc, #400]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	4a65      	ldr	r2, [pc, #404]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004342:	4013      	ands	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004346:	4b62      	ldr	r3, [pc, #392]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800434a:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	0309      	lsls	r1, r1, #12
 8004350:	430a      	orrs	r2, r1
 8004352:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004354:	4b5e      	ldr	r3, [pc, #376]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004358:	4b5d      	ldr	r3, [pc, #372]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800435a:	4960      	ldr	r1, [pc, #384]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800435c:	400a      	ands	r2, r1
 800435e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004360:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4013      	ands	r3, r2
 800436e:	d014      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fe fe12 	bl	8002f98 <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004378:	e009      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fe fe0d 	bl	8002f98 <HAL_GetTick>
 800437e:	0002      	movs	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e09b      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800438e:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4013      	ands	r3, r2
 8004398:	d0ef      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	23c0      	movs	r3, #192	; 0xc0
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	401a      	ands	r2, r3
 80043a4:	23c0      	movs	r3, #192	; 0xc0
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80043ac:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a4c      	ldr	r2, [pc, #304]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	23c0      	movs	r3, #192	; 0xc0
 80043bc:	039b      	lsls	r3, r3, #14
 80043be:	401a      	ands	r2, r3
 80043c0:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	4b42      	ldr	r3, [pc, #264]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	23c0      	movs	r3, #192	; 0xc0
 80043d0:	029b      	lsls	r3, r3, #10
 80043d2:	401a      	ands	r2, r3
 80043d4:	4b3e      	ldr	r3, [pc, #248]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043d6:	430a      	orrs	r2, r1
 80043d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043da:	2317      	movs	r3, #23
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e4:	4b3a      	ldr	r3, [pc, #232]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e8:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043ea:	493f      	ldr	r1, [pc, #252]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2201      	movs	r2, #1
 80043f6:	4013      	ands	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	2203      	movs	r2, #3
 8004400:	4393      	bics	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800440a:	430a      	orrs	r2, r1
 800440c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2202      	movs	r2, #2
 8004414:	4013      	ands	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	220c      	movs	r2, #12
 800441e:	4393      	bics	r3, r2
 8004420:	0019      	movs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004428:	430a      	orrs	r2, r1
 800442a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2204      	movs	r2, #4
 8004432:	4013      	ands	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004436:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800443c:	4013      	ands	r3, r2
 800443e:	0019      	movs	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004446:	430a      	orrs	r2, r1
 8004448:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2208      	movs	r2, #8
 8004450:	4013      	ands	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004464:	430a      	orrs	r2, r1
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4013      	ands	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004478:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447a:	4013      	ands	r3, r2
 800447c:	0019      	movs	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004484:	430a      	orrs	r2, r1
 8004486:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2240      	movs	r2, #64	; 0x40
 800448e:	4013      	ands	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004498:	4013      	ands	r3, r2
 800449a:	0019      	movs	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044a2:	430a      	orrs	r2, r1
 80044a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	4013      	ands	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b4:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	0019      	movs	r1, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044c0:	430a      	orrs	r2, r1
 80044c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b006      	add	sp, #24
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40007000 	.word	0x40007000
 80044d8:	fffcffff 	.word	0xfffcffff
 80044dc:	fff7ffff 	.word	0xfff7ffff
 80044e0:	00001388 	.word	0x00001388
 80044e4:	ffcfffff 	.word	0xffcfffff
 80044e8:	efffffff 	.word	0xefffffff
 80044ec:	fffff3ff 	.word	0xfffff3ff
 80044f0:	ffffcfff 	.word	0xffffcfff
 80044f4:	fbffffff 	.word	0xfbffffff
 80044f8:	fff3ffff 	.word	0xfff3ffff

080044fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e059      	b.n	80045c2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2251      	movs	r2, #81	; 0x51
 8004518:	5c9b      	ldrb	r3, [r3, r2]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2250      	movs	r2, #80	; 0x50
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	0018      	movs	r0, r3
 800452c:	f7fe fa3e 	bl	80029ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2251      	movs	r2, #81	; 0x51
 8004534:	2102      	movs	r1, #2
 8004536:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2140      	movs	r1, #64	; 0x40
 8004544:	438a      	bics	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6999      	ldr	r1, [r3, #24]
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	400b      	ands	r3, r1
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	431a      	orrs	r2, r3
 800457c:	0011      	movs	r1, r2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	2204      	movs	r2, #4
 8004592:	4013      	ands	r3, r2
 8004594:	0019      	movs	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4907      	ldr	r1, [pc, #28]	; (80045cc <HAL_SPI_Init+0xd0>)
 80045ae:	400a      	ands	r2, r1
 80045b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2251      	movs	r2, #81	; 0x51
 80045bc:	2101      	movs	r1, #1
 80045be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b002      	add	sp, #8
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	fffff7ff 	.word	0xfffff7ff

080045d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	1dbb      	adds	r3, r7, #6
 80045de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045e0:	231f      	movs	r3, #31
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2250      	movs	r2, #80	; 0x50
 80045ec:	5c9b      	ldrb	r3, [r3, r2]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_SPI_Transmit+0x26>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e136      	b.n	8004864 <HAL_SPI_Transmit+0x294>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2250      	movs	r2, #80	; 0x50
 80045fa:	2101      	movs	r1, #1
 80045fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045fe:	f7fe fccb 	bl	8002f98 <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004606:	2316      	movs	r3, #22
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	1dba      	adds	r2, r7, #6
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2251      	movs	r2, #81	; 0x51
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d004      	beq.n	8004626 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800461c:	231f      	movs	r3, #31
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2202      	movs	r2, #2
 8004622:	701a      	strb	r2, [r3, #0]
    goto error;
 8004624:	e113      	b.n	800484e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_SPI_Transmit+0x64>
 800462c:	1dbb      	adds	r3, r7, #6
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004634:	231f      	movs	r3, #31
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
    goto error;
 800463c:	e107      	b.n	800484e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2251      	movs	r2, #81	; 0x51
 8004642:	2103      	movs	r1, #3
 8004644:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1dba      	adds	r2, r7, #6
 8004656:	8812      	ldrh	r2, [r2, #0]
 8004658:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1dba      	adds	r2, r7, #6
 800465e:	8812      	ldrh	r2, [r2, #0]
 8004660:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	429a      	cmp	r2, r3
 800468a:	d108      	bne.n	800469e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	01c9      	lsls	r1, r1, #7
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d007      	beq.n	80046bc <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2140      	movs	r1, #64	; 0x40
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d14e      	bne.n	8004766 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_SPI_Transmit+0x10a>
 80046d0:	2316      	movs	r3, #22
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d13f      	bne.n	800475a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046fe:	e02c      	b.n	800475a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2202      	movs	r2, #2
 8004708:	4013      	ands	r3, r2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d112      	bne.n	8004734 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	881a      	ldrh	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	1c9a      	adds	r2, r3, #2
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	86da      	strh	r2, [r3, #54]	; 0x36
 8004732:	e012      	b.n	800475a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004734:	f7fe fc30 	bl	8002f98 <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d802      	bhi.n	800474a <HAL_SPI_Transmit+0x17a>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	d102      	bne.n	8004750 <HAL_SPI_Transmit+0x180>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8004750:	231f      	movs	r3, #31
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2203      	movs	r2, #3
 8004756:	701a      	strb	r2, [r3, #0]
          goto error;
 8004758:	e079      	b.n	800484e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1cd      	bne.n	8004700 <HAL_SPI_Transmit+0x130>
 8004764:	e04f      	b.n	8004806 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_SPI_Transmit+0x1a8>
 800476e:	2316      	movs	r3, #22
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d141      	bne.n	80047fc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	7812      	ldrb	r2, [r2, #0]
 8004784:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800479e:	e02d      	b.n	80047fc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2202      	movs	r2, #2
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d113      	bne.n	80047d6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	7812      	ldrb	r2, [r2, #0]
 80047ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80047d4:	e012      	b.n	80047fc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d6:	f7fe fbdf 	bl	8002f98 <HAL_GetTick>
 80047da:	0002      	movs	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d802      	bhi.n	80047ec <HAL_SPI_Transmit+0x21c>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	d102      	bne.n	80047f2 <HAL_SPI_Transmit+0x222>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80047f2:	231f      	movs	r3, #31
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2203      	movs	r2, #3
 80047f8:	701a      	strb	r2, [r3, #0]
          goto error;
 80047fa:	e028      	b.n	800484e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1cc      	bne.n	80047a0 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 fbe1 	bl	8004fd4 <SPI_EndRxTxTransaction>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8004842:	231f      	movs	r3, #31
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e000      	b.n	800484e <HAL_SPI_Transmit+0x27e>
  }

error:
 800484c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2251      	movs	r2, #81	; 0x51
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2250      	movs	r2, #80	; 0x50
 800485a:	2100      	movs	r1, #0
 800485c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800485e:	231f      	movs	r3, #31
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	781b      	ldrb	r3, [r3, #0]
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b008      	add	sp, #32
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	1dbb      	adds	r3, r7, #6
 800487a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800487c:	2317      	movs	r3, #23
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	2382      	movs	r3, #130	; 0x82
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	429a      	cmp	r2, r3
 800488e:	d113      	bne.n	80048b8 <HAL_SPI_Receive+0x4c>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10f      	bne.n	80048b8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2251      	movs	r2, #81	; 0x51
 800489c:	2104      	movs	r1, #4
 800489e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048a0:	1dbb      	adds	r3, r7, #6
 80048a2:	881c      	ldrh	r4, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	0023      	movs	r3, r4
 80048b0:	f000 f8fa 	bl	8004aa8 <HAL_SPI_TransmitReceive>
 80048b4:	0003      	movs	r3, r0
 80048b6:	e0f1      	b.n	8004a9c <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2250      	movs	r2, #80	; 0x50
 80048bc:	5c9b      	ldrb	r3, [r3, r2]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_SPI_Receive+0x5a>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e0ea      	b.n	8004a9c <HAL_SPI_Receive+0x230>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2250      	movs	r2, #80	; 0x50
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ce:	f7fe fb63 	bl	8002f98 <HAL_GetTick>
 80048d2:	0003      	movs	r3, r0
 80048d4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2251      	movs	r2, #81	; 0x51
 80048da:	5c9b      	ldrb	r3, [r3, r2]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d004      	beq.n	80048ec <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80048e2:	2317      	movs	r3, #23
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	2202      	movs	r2, #2
 80048e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80048ea:	e0cc      	b.n	8004a86 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_SPI_Receive+0x8e>
 80048f2:	1dbb      	adds	r3, r7, #6
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80048fa:	2317      	movs	r3, #23
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
    goto error;
 8004902:	e0c0      	b.n	8004a86 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2251      	movs	r2, #81	; 0x51
 8004908:	2104      	movs	r1, #4
 800490a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1dba      	adds	r2, r7, #6
 800491c:	8812      	ldrh	r2, [r2, #0]
 800491e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1dba      	adds	r2, r7, #6
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	429a      	cmp	r2, r3
 8004950:	d107      	bne.n	8004962 <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4951      	ldr	r1, [pc, #324]	; (8004aa4 <HAL_SPI_Receive+0x238>)
 800495e:	400a      	ands	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2240      	movs	r2, #64	; 0x40
 800496a:	4013      	ands	r3, r2
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d007      	beq.n	8004980 <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2140      	movs	r1, #64	; 0x40
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d164      	bne.n	8004a52 <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004988:	e02f      	b.n	80049ea <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2201      	movs	r2, #1
 8004992:	4013      	ands	r3, r2
 8004994:	2b01      	cmp	r3, #1
 8004996:	d115      	bne.n	80049c4 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	001a      	movs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	7812      	ldrb	r2, [r2, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049c2:	e012      	b.n	80049ea <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c4:	f7fe fae8 	bl	8002f98 <HAL_GetTick>
 80049c8:	0002      	movs	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d802      	bhi.n	80049da <HAL_SPI_Receive+0x16e>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	d102      	bne.n	80049e0 <HAL_SPI_Receive+0x174>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d104      	bne.n	80049ea <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 80049e0:	2317      	movs	r3, #23
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	2203      	movs	r2, #3
 80049e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80049e8:	e04d      	b.n	8004a86 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ca      	bne.n	800498a <HAL_SPI_Receive+0x11e>
 80049f4:	e032      	b.n	8004a5c <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2201      	movs	r2, #1
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d113      	bne.n	8004a2c <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	1c9a      	adds	r2, r3, #2
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a2a:	e012      	b.n	8004a52 <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a2c:	f7fe fab4 	bl	8002f98 <HAL_GetTick>
 8004a30:	0002      	movs	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d802      	bhi.n	8004a42 <HAL_SPI_Receive+0x1d6>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	d102      	bne.n	8004a48 <HAL_SPI_Receive+0x1dc>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8004a48:	2317      	movs	r3, #23
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a50:	e019      	b.n	8004a86 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1cc      	bne.n	80049f6 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 fa4c 	bl	8004f00 <SPI_EndRxTransaction>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8004a7a:	2317      	movs	r3, #23
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e000      	b.n	8004a86 <HAL_SPI_Receive+0x21a>
  }

error :
 8004a84:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2251      	movs	r2, #81	; 0x51
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2250      	movs	r2, #80	; 0x50
 8004a92:	2100      	movs	r1, #0
 8004a94:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a96:	2317      	movs	r3, #23
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	781b      	ldrb	r3, [r3, #0]
}
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b007      	add	sp, #28
 8004aa2:	bd90      	pop	{r4, r7, pc}
 8004aa4:	ffffbfff 	.word	0xffffbfff

08004aa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	001a      	movs	r2, r3
 8004ab6:	1cbb      	adds	r3, r7, #2
 8004ab8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004aba:	2301      	movs	r3, #1
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004abe:	232b      	movs	r3, #43	; 0x2b
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2250      	movs	r2, #80	; 0x50
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x2c>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e1a1      	b.n	8004e18 <HAL_SPI_TransmitReceive+0x370>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2250      	movs	r2, #80	; 0x50
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004adc:	f7fe fa5c 	bl	8002f98 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae4:	2023      	movs	r0, #35	; 0x23
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	2151      	movs	r1, #81	; 0x51
 8004aec:	5c52      	ldrb	r2, [r2, r1]
 8004aee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004af6:	231a      	movs	r3, #26
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	1cba      	adds	r2, r7, #2
 8004afc:	8812      	ldrh	r2, [r2, #0]
 8004afe:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b00:	183b      	adds	r3, r7, r0
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d012      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x86>
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	2382      	movs	r3, #130	; 0x82
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d108      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x7c>
 8004b1a:	2323      	movs	r3, #35	; 0x23
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d004      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004b24:	232b      	movs	r3, #43	; 0x2b
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2202      	movs	r2, #2
 8004b2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b2c:	e169      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d006      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x9a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x9a>
 8004b3a:	1cbb      	adds	r3, r7, #2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d104      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8004b42:	232b      	movs	r3, #43	; 0x2b
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b4a:	e15a      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2251      	movs	r2, #81	; 0x51
 8004b50:	5c9b      	ldrb	r3, [r3, r2]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d003      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2251      	movs	r2, #81	; 0x51
 8004b5c:	2105      	movs	r1, #5
 8004b5e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1cba      	adds	r2, r7, #2
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1cba      	adds	r2, r7, #2
 8004b78:	8812      	ldrh	r2, [r2, #0]
 8004b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1cba      	adds	r2, r7, #2
 8004b86:	8812      	ldrh	r2, [r2, #0]
 8004b88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1cba      	adds	r2, r7, #2
 8004b8e:	8812      	ldrh	r2, [r2, #0]
 8004b90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2240      	movs	r2, #64	; 0x40
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d007      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2140      	movs	r1, #64	; 0x40
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d000      	beq.n	8004bca <HAL_SPI_TransmitReceive+0x122>
 8004bc8:	e07a      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x134>
 8004bd2:	231a      	movs	r3, #26
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d166      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	881a      	ldrh	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	1c9a      	adds	r2, r3, #2
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c00:	e053      	b.n	8004caa <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d11b      	bne.n	8004c48 <HAL_SPI_TransmitReceive+0x1a0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d016      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0x1a0>
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d113      	bne.n	8004c48 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	1c9a      	adds	r2, r3, #2
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d119      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x1e2>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d014      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c86:	2301      	movs	r3, #1
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c8a:	f7fe f985 	bl	8002f98 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d807      	bhi.n	8004caa <HAL_SPI_TransmitReceive+0x202>
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	d004      	beq.n	8004caa <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8004ca0:	232b      	movs	r3, #43	; 0x2b
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	701a      	strb	r2, [r3, #0]
        goto error;
 8004ca8:	e0ab      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1a6      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x15a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1a1      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x15a>
 8004cbe:	e07f      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_SPI_TransmitReceive+0x22c>
 8004cc8:	231a      	movs	r3, #26
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d000      	beq.n	8004cd4 <HAL_SPI_TransmitReceive+0x22c>
 8004cd2:	e06b      	b.n	8004dac <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cfa:	e057      	b.n	8004dac <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2202      	movs	r2, #2
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d11c      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x29c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d017      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x29c>
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d114      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	7812      	ldrb	r2, [r2, #0]
 8004d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d119      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x2de>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d014      	beq.n	8004d86 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d82:	2301      	movs	r3, #1
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d86:	f7fe f907 	bl	8002f98 <HAL_GetTick>
 8004d8a:	0002      	movs	r2, r0
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d802      	bhi.n	8004d9c <HAL_SPI_TransmitReceive+0x2f4>
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	3301      	adds	r3, #1
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x2fa>
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8004da2:	232b      	movs	r3, #43	; 0x2b
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	2203      	movs	r2, #3
 8004da8:	701a      	strb	r2, [r3, #0]
        goto error;
 8004daa:	e02a      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1a2      	bne.n	8004cfc <HAL_SPI_TransmitReceive+0x254>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d19d      	bne.n	8004cfc <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 f904 	bl	8004fd4 <SPI_EndRxTxTransaction>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d007      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8004dd0:	232b      	movs	r3, #43	; 0x2b
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dde:	e010      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	e000      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8004e00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2251      	movs	r2, #81	; 0x51
 8004e06:	2101      	movs	r1, #1
 8004e08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2250      	movs	r2, #80	; 0x50
 8004e0e:	2100      	movs	r1, #0
 8004e10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004e12:	232b      	movs	r3, #43	; 0x2b
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	781b      	ldrb	r3, [r3, #0]
}
 8004e18:	0018      	movs	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b00c      	add	sp, #48	; 0x30
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	1dfb      	adds	r3, r7, #7
 8004e2e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e30:	e050      	b.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	d04d      	beq.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e38:	f7fe f8ae 	bl	8002f98 <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d142      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	21e0      	movs	r1, #224	; 0xe0
 8004e5a:	438a      	bics	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	2382      	movs	r3, #130	; 0x82
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d113      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0x72>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d005      	beq.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d107      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2140      	movs	r1, #64	; 0x40
 8004e8e:	438a      	bics	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	019b      	lsls	r3, r3, #6
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d110      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4914      	ldr	r1, [pc, #80]	; (8004efc <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0189      	lsls	r1, r1, #6
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2251      	movs	r2, #81	; 0x51
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2250      	movs	r2, #80	; 0x50
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e00f      	b.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	425a      	negs	r2, r3
 8004ee4:	4153      	adcs	r3, r2
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	001a      	movs	r2, r3
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d19f      	bne.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b004      	add	sp, #16
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	ffffdfff 	.word	0xffffdfff

08004f00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	2382      	movs	r3, #130	; 0x82
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d113      	bne.n	8004f40 <SPI_EndRxTransaction+0x40>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d005      	beq.n	8004f30 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d107      	bne.n	8004f40 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2140      	movs	r1, #64	; 0x40
 8004f3c:	438a      	bics	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	2382      	movs	r3, #130	; 0x82
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d12b      	bne.n	8004fa4 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d012      	beq.n	8004f7e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	0013      	movs	r3, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	f7ff ff5b 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004f6a:	1e03      	subs	r3, r0, #0
 8004f6c:	d02d      	beq.n	8004fca <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	2220      	movs	r2, #32
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e026      	b.n	8004fcc <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	0013      	movs	r3, r2
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	f7ff ff48 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004f90:	1e03      	subs	r3, r0, #0
 8004f92:	d01a      	beq.n	8004fca <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	2220      	movs	r2, #32
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e013      	b.n	8004fcc <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	0013      	movs	r3, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	f7ff ff35 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d007      	beq.n	8004fca <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e000      	b.n	8004fcc <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b004      	add	sp, #16
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	2382      	movs	r3, #130	; 0x82
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d112      	bne.n	8005012 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	f7ff ff11 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004ffe:	1e03      	subs	r3, r0, #0
 8005000:	d020      	beq.n	8005044 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	2220      	movs	r2, #32
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e019      	b.n	8005046 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2251      	movs	r2, #81	; 0x51
 8005016:	5c9b      	ldrb	r3, [r3, r2]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b05      	cmp	r3, #5
 800501c:	d112      	bne.n	8005044 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	0013      	movs	r3, r2
 8005028:	2200      	movs	r2, #0
 800502a:	2101      	movs	r1, #1
 800502c:	f7ff fef8 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8005030:	1e03      	subs	r3, r0, #0
 8005032:	d007      	beq.n	8005044 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	2220      	movs	r2, #32
 800503a:	431a      	orrs	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e000      	b.n	8005046 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b004      	add	sp, #16
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e01e      	b.n	800509e <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2239      	movs	r2, #57	; 0x39
 8005064:	5c9b      	ldrb	r3, [r3, r2]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d107      	bne.n	800507c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2238      	movs	r2, #56	; 0x38
 8005070:	2100      	movs	r1, #0
 8005072:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	0018      	movs	r0, r3
 8005078:	f7fd fd00 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2239      	movs	r2, #57	; 0x39
 8005080:	2102      	movs	r1, #2
 8005082:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	0019      	movs	r1, r3
 800508e:	0010      	movs	r0, r2
 8005090:	f000 fa40 	bl	8005514 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2239      	movs	r2, #57	; 0x39
 8005098:	2101      	movs	r1, #1
 800509a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b002      	add	sp, #8
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2101      	movs	r1, #1
 80050ba:	430a      	orrs	r2, r1
 80050bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2207      	movs	r2, #7
 80050c6:	4013      	ands	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d007      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2101      	movs	r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b004      	add	sp, #16
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2202      	movs	r2, #2
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d124      	bne.n	800514a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2202      	movs	r2, #2
 8005108:	4013      	ands	r3, r2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d11d      	bne.n	800514a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2203      	movs	r2, #3
 8005114:	4252      	negs	r2, r2
 8005116:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2203      	movs	r2, #3
 8005126:	4013      	ands	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	0018      	movs	r0, r3
 800512e:	f000 f9d9 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 8005132:	e007      	b.n	8005144 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	0018      	movs	r0, r3
 8005138:	f000 f9cc 	bl	80054d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 f9d8 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2204      	movs	r2, #4
 8005152:	4013      	ands	r3, r2
 8005154:	2b04      	cmp	r3, #4
 8005156:	d125      	bne.n	80051a4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2204      	movs	r2, #4
 8005160:	4013      	ands	r3, r2
 8005162:	2b04      	cmp	r3, #4
 8005164:	d11e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2205      	movs	r2, #5
 800516c:	4252      	negs	r2, r2
 800516e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	23c0      	movs	r3, #192	; 0xc0
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4013      	ands	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	0018      	movs	r0, r3
 8005188:	f000 f9ac 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 800518c:	e007      	b.n	800519e <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	0018      	movs	r0, r3
 8005192:	f000 f99f 	bl	80054d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 f9ab 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2208      	movs	r2, #8
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d124      	bne.n	80051fc <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2208      	movs	r2, #8
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d11d      	bne.n	80051fc <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2209      	movs	r2, #9
 80051c6:	4252      	negs	r2, r2
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2204      	movs	r2, #4
 80051ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	2203      	movs	r2, #3
 80051d8:	4013      	ands	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 f980 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e007      	b.n	80051f6 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f000 f973 	bl	80054d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f97f 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2210      	movs	r2, #16
 8005204:	4013      	ands	r3, r2
 8005206:	2b10      	cmp	r3, #16
 8005208:	d125      	bne.n	8005256 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2210      	movs	r2, #16
 8005212:	4013      	ands	r3, r2
 8005214:	2b10      	cmp	r3, #16
 8005216:	d11e      	bne.n	8005256 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2211      	movs	r2, #17
 800521e:	4252      	negs	r2, r2
 8005220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2208      	movs	r2, #8
 8005226:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	23c0      	movs	r3, #192	; 0xc0
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4013      	ands	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0018      	movs	r0, r3
 800523a:	f000 f953 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 800523e:	e007      	b.n	8005250 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	0018      	movs	r0, r3
 8005244:	f000 f946 	bl	80054d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0018      	movs	r0, r3
 800524c:	f000 f952 	bl	80054f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2201      	movs	r2, #1
 800525e:	4013      	ands	r3, r2
 8005260:	2b01      	cmp	r3, #1
 8005262:	d10f      	bne.n	8005284 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	4013      	ands	r3, r2
 800526e:	2b01      	cmp	r3, #1
 8005270:	d108      	bne.n	8005284 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2202      	movs	r2, #2
 8005278:	4252      	negs	r2, r2
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0018      	movs	r0, r3
 8005280:	f000 f920 	bl	80054c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2240      	movs	r2, #64	; 0x40
 800528c:	4013      	ands	r3, r2
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d10f      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2240      	movs	r2, #64	; 0x40
 800529a:	4013      	ands	r3, r2
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d108      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2241      	movs	r2, #65	; 0x41
 80052a6:	4252      	negs	r2, r2
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f000 f929 	bl	8005504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b002      	add	sp, #8
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2238      	movs	r2, #56	; 0x38
 80052ca:	5c9b      	ldrb	r3, [r3, r2]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_ConfigClockSource+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e0ab      	b.n	800542c <HAL_TIM_ConfigClockSource+0x170>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2238      	movs	r2, #56	; 0x38
 80052d8:	2101      	movs	r1, #1
 80052da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2239      	movs	r2, #57	; 0x39
 80052e0:	2102      	movs	r1, #2
 80052e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2277      	movs	r2, #119	; 0x77
 80052f0:	4393      	bics	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a4f      	ldr	r2, [pc, #316]	; (8005434 <HAL_TIM_ConfigClockSource+0x178>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d100      	bne.n	800530e <HAL_TIM_ConfigClockSource+0x52>
 800530c:	e06b      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x12a>
 800530e:	d80e      	bhi.n	800532e <HAL_TIM_ConfigClockSource+0x72>
 8005310:	2b10      	cmp	r3, #16
 8005312:	d100      	bne.n	8005316 <HAL_TIM_ConfigClockSource+0x5a>
 8005314:	e077      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x14a>
 8005316:	d803      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0x64>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d100      	bne.n	800531e <HAL_TIM_ConfigClockSource+0x62>
 800531c:	e073      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800531e:	e07c      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005320:	2b20      	cmp	r3, #32
 8005322:	d100      	bne.n	8005326 <HAL_TIM_ConfigClockSource+0x6a>
 8005324:	e06f      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x14a>
 8005326:	2b30      	cmp	r3, #48	; 0x30
 8005328:	d100      	bne.n	800532c <HAL_TIM_ConfigClockSource+0x70>
 800532a:	e06c      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800532c:	e075      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800532e:	2b70      	cmp	r3, #112	; 0x70
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_ConfigClockSource+0x94>
 8005332:	d804      	bhi.n	800533e <HAL_TIM_ConfigClockSource+0x82>
 8005334:	2b50      	cmp	r3, #80	; 0x50
 8005336:	d036      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0xea>
 8005338:	2b60      	cmp	r3, #96	; 0x60
 800533a:	d044      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800533c:	e06d      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	0152      	lsls	r2, r2, #5
 8005342:	4293      	cmp	r3, r2
 8005344:	d068      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x15c>
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	0192      	lsls	r2, r2, #6
 800534a:	4293      	cmp	r3, r2
 800534c:	d017      	beq.n	800537e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800534e:	e064      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6899      	ldr	r1, [r3, #8]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f000 fa34 	bl	80057cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2277      	movs	r2, #119	; 0x77
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	609a      	str	r2, [r3, #8]
      break;
 800537c:	e04d      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6899      	ldr	r1, [r3, #8]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f000 fa1d 	bl	80057cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2180      	movs	r1, #128	; 0x80
 800539e:	01c9      	lsls	r1, r1, #7
 80053a0:	430a      	orrs	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]
      break;
 80053a4:	e039      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	001a      	movs	r2, r3
 80053b4:	f000 f990 	bl	80056d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2150      	movs	r1, #80	; 0x50
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f9ea 	bl	8005798 <TIM_ITRx_SetConfig>
      break;
 80053c4:	e029      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	001a      	movs	r2, r3
 80053d4:	f000 f9ae 	bl	8005734 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2160      	movs	r1, #96	; 0x60
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f9da 	bl	8005798 <TIM_ITRx_SetConfig>
      break;
 80053e4:	e019      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	001a      	movs	r2, r3
 80053f4:	f000 f970 	bl	80056d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 f9ca 	bl	8005798 <TIM_ITRx_SetConfig>
      break;
 8005404:	e009      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0019      	movs	r1, r3
 8005410:	0010      	movs	r0, r2
 8005412:	f000 f9c1 	bl	8005798 <TIM_ITRx_SetConfig>
      break;
 8005416:	e000      	b.n	800541a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005418:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2239      	movs	r2, #57	; 0x39
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2238      	movs	r2, #56	; 0x38
 8005426:	2100      	movs	r1, #0
 8005428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}
 8005434:	ffff00ff 	.word	0xffff00ff

08005438 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2238      	movs	r2, #56	; 0x38
 8005446:	5c9b      	ldrb	r3, [r3, r2]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIM_SlaveConfigSynchro+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e032      	b.n	80054b6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2238      	movs	r2, #56	; 0x38
 8005454:	2101      	movs	r1, #1
 8005456:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2239      	movs	r2, #57	; 0x39
 800545c:	2102      	movs	r1, #2
 800545e:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0011      	movs	r1, r2
 8005466:	0018      	movs	r0, r3
 8005468:	f000 f8b2 	bl	80055d0 <TIM_SlaveTimer_SetConfig>
 800546c:	1e03      	subs	r3, r0, #0
 800546e:	d009      	beq.n	8005484 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2239      	movs	r2, #57	; 0x39
 8005474:	2101      	movs	r1, #1
 8005476:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2238      	movs	r2, #56	; 0x38
 800547c:	2100      	movs	r1, #0
 800547e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e018      	b.n	80054b6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2140      	movs	r1, #64	; 0x40
 8005490:	438a      	bics	r2, r1
 8005492:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4908      	ldr	r1, [pc, #32]	; (80054c0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2239      	movs	r2, #57	; 0x39
 80054a8:	2101      	movs	r1, #1
 80054aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2238      	movs	r2, #56	; 0x38
 80054b0:	2100      	movs	r1, #0
 80054b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b002      	add	sp, #8
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	ffffbfff 	.word	0xffffbfff

080054c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b002      	add	sp, #8
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	b002      	add	sp, #8
 8005512:	bd80      	pop	{r7, pc}

08005514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	05db      	lsls	r3, r3, #23
 800552a:	429a      	cmp	r2, r3
 800552c:	d00b      	beq.n	8005546 <TIM_Base_SetConfig+0x32>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a23      	ldr	r2, [pc, #140]	; (80055c0 <TIM_Base_SetConfig+0xac>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0x32>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <TIM_Base_SetConfig+0xb0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0x32>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a21      	ldr	r2, [pc, #132]	; (80055c8 <TIM_Base_SetConfig+0xb4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2270      	movs	r2, #112	; 0x70
 800554a:	4393      	bics	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	05db      	lsls	r3, r3, #23
 800555e:	429a      	cmp	r2, r3
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0x66>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <TIM_Base_SetConfig+0xac>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0x66>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <TIM_Base_SetConfig+0xb0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0x66>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <TIM_Base_SetConfig+0xb4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a13      	ldr	r2, [pc, #76]	; (80055cc <TIM_Base_SetConfig+0xb8>)
 800557e:	4013      	ands	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	4393      	bics	r3, r2
 8005592:	001a      	movs	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	615a      	str	r2, [r3, #20]
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b004      	add	sp, #16
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40000400 	.word	0x40000400
 80055c4:	40010800 	.word	0x40010800
 80055c8:	40011400 	.word	0x40011400
 80055cc:	fffffcff 	.word	0xfffffcff

080055d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2270      	movs	r2, #112	; 0x70
 80055e6:	4393      	bics	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2207      	movs	r2, #7
 80055f8:	4393      	bics	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d05a      	beq.n	80056cc <TIM_SlaveTimer_SetConfig+0xfc>
 8005616:	d806      	bhi.n	8005626 <TIM_SlaveTimer_SetConfig+0x56>
 8005618:	2b10      	cmp	r3, #16
 800561a:	d057      	beq.n	80056cc <TIM_SlaveTimer_SetConfig+0xfc>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d055      	beq.n	80056cc <TIM_SlaveTimer_SetConfig+0xfc>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d053      	beq.n	80056cc <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005624:	e053      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8005626:	2b50      	cmp	r3, #80	; 0x50
 8005628:	d03c      	beq.n	80056a4 <TIM_SlaveTimer_SetConfig+0xd4>
 800562a:	d802      	bhi.n	8005632 <TIM_SlaveTimer_SetConfig+0x62>
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d010      	beq.n	8005652 <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8005630:	e04d      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8005632:	2b60      	cmp	r3, #96	; 0x60
 8005634:	d040      	beq.n	80056b8 <TIM_SlaveTimer_SetConfig+0xe8>
 8005636:	2b70      	cmp	r3, #112	; 0x70
 8005638:	d000      	beq.n	800563c <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 800563a:	e048      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68d9      	ldr	r1, [r3, #12]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f000 f8be 	bl	80057cc <TIM_ETR_SetConfig>
      break;
 8005650:	e03d      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b05      	cmp	r3, #5
 8005658:	d101      	bne.n	800565e <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e038      	b.n	80056d0 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6a1a      	ldr	r2, [r3, #32]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2101      	movs	r1, #1
 8005672:	438a      	bics	r2, r1
 8005674:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	22f0      	movs	r2, #240	; 0xf0
 8005682:	4393      	bics	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	621a      	str	r2, [r3, #32]
      break;
 80056a2:	e014      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6899      	ldr	r1, [r3, #8]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	001a      	movs	r2, r3
 80056b2:	f000 f811 	bl	80056d8 <TIM_TI1_ConfigInputStage>
      break;
 80056b6:	e00a      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	001a      	movs	r2, r3
 80056c6:	f000 f835 	bl	8005734 <TIM_TI2_ConfigInputStage>
      break;
 80056ca:	e000      	b.n	80056ce <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 80056cc:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b006      	add	sp, #24
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	2201      	movs	r2, #1
 80056f0:	4393      	bics	r3, r2
 80056f2:	001a      	movs	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	22f0      	movs	r2, #240	; 0xf0
 8005702:	4393      	bics	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	220a      	movs	r2, #10
 8005714:	4393      	bics	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b006      	add	sp, #24
 8005732:	bd80      	pop	{r7, pc}

08005734 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	2210      	movs	r2, #16
 8005746:	4393      	bics	r3, r2
 8005748:	001a      	movs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <TIM_TI2_ConfigInputStage+0x60>)
 800575e:	4013      	ands	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	031b      	lsls	r3, r3, #12
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	22a0      	movs	r2, #160	; 0xa0
 8005770:	4393      	bics	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	46bd      	mov	sp, r7
 800578e:	b006      	add	sp, #24
 8005790:	bd80      	pop	{r7, pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	ffff0fff 	.word	0xffff0fff

08005798 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2270      	movs	r2, #112	; 0x70
 80057ac:	4393      	bics	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	2207      	movs	r2, #7
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	609a      	str	r2, [r3, #8]
}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b004      	add	sp, #16
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4a09      	ldr	r2, [pc, #36]	; (8005808 <TIM_ETR_SetConfig+0x3c>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	46c0      	nop			; (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	b006      	add	sp, #24
 8005806:	bd80      	pop	{r7, pc}
 8005808:	ffff00ff 	.word	0xffff00ff

0800580c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2238      	movs	r2, #56	; 0x38
 800581a:	5c9b      	ldrb	r3, [r3, r2]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005820:	2302      	movs	r3, #2
 8005822:	e032      	b.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2238      	movs	r2, #56	; 0x38
 8005828:	2101      	movs	r1, #1
 800582a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2239      	movs	r2, #57	; 0x39
 8005830:	2102      	movs	r1, #2
 8005832:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2270      	movs	r2, #112	; 0x70
 8005848:	4393      	bics	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2280      	movs	r2, #128	; 0x80
 800585a:	4393      	bics	r3, r2
 800585c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4313      	orrs	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2239      	movs	r2, #57	; 0x39
 800587c:	2101      	movs	r1, #1
 800587e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2238      	movs	r2, #56	; 0x38
 8005884:	2100      	movs	r1, #0
 8005886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <__errno>:
 8005894:	4b01      	ldr	r3, [pc, #4]	; (800589c <__errno+0x8>)
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	4770      	bx	lr
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	20000008 	.word	0x20000008

080058a0 <__libc_init_array>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	2600      	movs	r6, #0
 80058a4:	4d0c      	ldr	r5, [pc, #48]	; (80058d8 <__libc_init_array+0x38>)
 80058a6:	4c0d      	ldr	r4, [pc, #52]	; (80058dc <__libc_init_array+0x3c>)
 80058a8:	1b64      	subs	r4, r4, r5
 80058aa:	10a4      	asrs	r4, r4, #2
 80058ac:	42a6      	cmp	r6, r4
 80058ae:	d109      	bne.n	80058c4 <__libc_init_array+0x24>
 80058b0:	2600      	movs	r6, #0
 80058b2:	f001 f867 	bl	8006984 <_init>
 80058b6:	4d0a      	ldr	r5, [pc, #40]	; (80058e0 <__libc_init_array+0x40>)
 80058b8:	4c0a      	ldr	r4, [pc, #40]	; (80058e4 <__libc_init_array+0x44>)
 80058ba:	1b64      	subs	r4, r4, r5
 80058bc:	10a4      	asrs	r4, r4, #2
 80058be:	42a6      	cmp	r6, r4
 80058c0:	d105      	bne.n	80058ce <__libc_init_array+0x2e>
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	00b3      	lsls	r3, r6, #2
 80058c6:	58eb      	ldr	r3, [r5, r3]
 80058c8:	4798      	blx	r3
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7ee      	b.n	80058ac <__libc_init_array+0xc>
 80058ce:	00b3      	lsls	r3, r6, #2
 80058d0:	58eb      	ldr	r3, [r5, r3]
 80058d2:	4798      	blx	r3
 80058d4:	3601      	adds	r6, #1
 80058d6:	e7f2      	b.n	80058be <__libc_init_array+0x1e>
 80058d8:	08006a80 	.word	0x08006a80
 80058dc:	08006a80 	.word	0x08006a80
 80058e0:	08006a80 	.word	0x08006a80
 80058e4:	08006a84 	.word	0x08006a84

080058e8 <memset>:
 80058e8:	0003      	movs	r3, r0
 80058ea:	1812      	adds	r2, r2, r0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d100      	bne.n	80058f2 <memset+0xa>
 80058f0:	4770      	bx	lr
 80058f2:	7019      	strb	r1, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	e7f9      	b.n	80058ec <memset+0x4>

080058f8 <pow>:
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fa:	2400      	movs	r4, #0
 80058fc:	b091      	sub	sp, #68	; 0x44
 80058fe:	001f      	movs	r7, r3
 8005900:	9000      	str	r0, [sp, #0]
 8005902:	9101      	str	r1, [sp, #4]
 8005904:	0016      	movs	r6, r2
 8005906:	f000 f98d 	bl	8005c24 <__ieee754_pow>
 800590a:	4bbe      	ldr	r3, [pc, #760]	; (8005c04 <pow+0x30c>)
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	9103      	str	r1, [sp, #12]
 8005910:	571c      	ldrsb	r4, [r3, r4]
 8005912:	1c63      	adds	r3, r4, #1
 8005914:	d100      	bne.n	8005918 <pow+0x20>
 8005916:	e0d4      	b.n	8005ac2 <pow+0x1ca>
 8005918:	0032      	movs	r2, r6
 800591a:	003b      	movs	r3, r7
 800591c:	0030      	movs	r0, r6
 800591e:	0039      	movs	r1, r7
 8005920:	f7fc fc60 	bl	80021e4 <__aeabi_dcmpun>
 8005924:	1e05      	subs	r5, r0, #0
 8005926:	d000      	beq.n	800592a <pow+0x32>
 8005928:	e0cb      	b.n	8005ac2 <pow+0x1ca>
 800592a:	9a00      	ldr	r2, [sp, #0]
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	0010      	movs	r0, r2
 8005930:	0019      	movs	r1, r3
 8005932:	f7fc fc57 	bl	80021e4 <__aeabi_dcmpun>
 8005936:	2200      	movs	r2, #0
 8005938:	9005      	str	r0, [sp, #20]
 800593a:	2800      	cmp	r0, #0
 800593c:	d01e      	beq.n	800597c <pow+0x84>
 800593e:	2300      	movs	r3, #0
 8005940:	0030      	movs	r0, r6
 8005942:	0039      	movs	r1, r7
 8005944:	f7fa fc7c 	bl	8000240 <__aeabi_dcmpeq>
 8005948:	2800      	cmp	r0, #0
 800594a:	d100      	bne.n	800594e <pow+0x56>
 800594c:	e0b9      	b.n	8005ac2 <pow+0x1ca>
 800594e:	2301      	movs	r3, #1
 8005950:	9306      	str	r3, [sp, #24]
 8005952:	4bad      	ldr	r3, [pc, #692]	; (8005c08 <pow+0x310>)
 8005954:	950e      	str	r5, [sp, #56]	; 0x38
 8005956:	9307      	str	r3, [sp, #28]
 8005958:	9a00      	ldr	r2, [sp, #0]
 800595a:	9b01      	ldr	r3, [sp, #4]
 800595c:	9208      	str	r2, [sp, #32]
 800595e:	9309      	str	r3, [sp, #36]	; 0x24
 8005960:	2200      	movs	r2, #0
 8005962:	4baa      	ldr	r3, [pc, #680]	; (8005c0c <pow+0x314>)
 8005964:	960a      	str	r6, [sp, #40]	; 0x28
 8005966:	970b      	str	r7, [sp, #44]	; 0x2c
 8005968:	920c      	str	r2, [sp, #48]	; 0x30
 800596a:	930d      	str	r3, [sp, #52]	; 0x34
 800596c:	2c02      	cmp	r4, #2
 800596e:	d033      	beq.n	80059d8 <pow+0xe0>
 8005970:	a806      	add	r0, sp, #24
 8005972:	f000 ff0b 	bl	800678c <matherr>
 8005976:	2800      	cmp	r0, #0
 8005978:	d125      	bne.n	80059c6 <pow+0xce>
 800597a:	e059      	b.n	8005a30 <pow+0x138>
 800597c:	2300      	movs	r3, #0
 800597e:	9800      	ldr	r0, [sp, #0]
 8005980:	9901      	ldr	r1, [sp, #4]
 8005982:	f7fa fc5d 	bl	8000240 <__aeabi_dcmpeq>
 8005986:	2800      	cmp	r0, #0
 8005988:	d057      	beq.n	8005a3a <pow+0x142>
 800598a:	2200      	movs	r2, #0
 800598c:	2300      	movs	r3, #0
 800598e:	0030      	movs	r0, r6
 8005990:	0039      	movs	r1, r7
 8005992:	f7fa fc55 	bl	8000240 <__aeabi_dcmpeq>
 8005996:	1e05      	subs	r5, r0, #0
 8005998:	d021      	beq.n	80059de <pow+0xe6>
 800599a:	2301      	movs	r3, #1
 800599c:	9306      	str	r3, [sp, #24]
 800599e:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <pow+0x310>)
 80059a0:	960a      	str	r6, [sp, #40]	; 0x28
 80059a2:	970b      	str	r7, [sp, #44]	; 0x2c
 80059a4:	9307      	str	r3, [sp, #28]
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	930e      	str	r3, [sp, #56]	; 0x38
 80059aa:	9a00      	ldr	r2, [sp, #0]
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	9208      	str	r2, [sp, #32]
 80059b0:	9309      	str	r3, [sp, #36]	; 0x24
 80059b2:	2200      	movs	r2, #0
 80059b4:	2300      	movs	r3, #0
 80059b6:	920c      	str	r2, [sp, #48]	; 0x30
 80059b8:	930d      	str	r3, [sp, #52]	; 0x34
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	d0d8      	beq.n	8005970 <pow+0x78>
 80059be:	2200      	movs	r2, #0
 80059c0:	4b92      	ldr	r3, [pc, #584]	; (8005c0c <pow+0x314>)
 80059c2:	920c      	str	r2, [sp, #48]	; 0x30
 80059c4:	930d      	str	r3, [sp, #52]	; 0x34
 80059c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <pow+0xe0>
 80059ce:	f7ff ff61 	bl	8005894 <__errno>
 80059d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	6003      	str	r3, [r0, #0]
 80059d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80059dc:	e06f      	b.n	8005abe <pow+0x1c6>
 80059de:	0030      	movs	r0, r6
 80059e0:	0039      	movs	r1, r7
 80059e2:	f000 fecb 	bl	800677c <finite>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d06b      	beq.n	8005ac2 <pow+0x1ca>
 80059ea:	2200      	movs	r2, #0
 80059ec:	2300      	movs	r3, #0
 80059ee:	0030      	movs	r0, r6
 80059f0:	0039      	movs	r1, r7
 80059f2:	f7fa fc2b 	bl	800024c <__aeabi_dcmplt>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d063      	beq.n	8005ac2 <pow+0x1ca>
 80059fa:	2301      	movs	r3, #1
 80059fc:	9306      	str	r3, [sp, #24]
 80059fe:	4b82      	ldr	r3, [pc, #520]	; (8005c08 <pow+0x310>)
 8005a00:	950e      	str	r5, [sp, #56]	; 0x38
 8005a02:	9307      	str	r3, [sp, #28]
 8005a04:	9b00      	ldr	r3, [sp, #0]
 8005a06:	9c01      	ldr	r4, [sp, #4]
 8005a08:	9308      	str	r3, [sp, #32]
 8005a0a:	9409      	str	r4, [sp, #36]	; 0x24
 8005a0c:	4b7d      	ldr	r3, [pc, #500]	; (8005c04 <pow+0x30c>)
 8005a0e:	960a      	str	r6, [sp, #40]	; 0x28
 8005a10:	970b      	str	r7, [sp, #44]	; 0x2c
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <pow+0x12c>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2400      	movs	r4, #0
 8005a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a20:	940d      	str	r4, [sp, #52]	; 0x34
 8005a22:	e7a5      	b.n	8005970 <pow+0x78>
 8005a24:	2000      	movs	r0, #0
 8005a26:	497a      	ldr	r1, [pc, #488]	; (8005c10 <pow+0x318>)
 8005a28:	900c      	str	r0, [sp, #48]	; 0x30
 8005a2a:	910d      	str	r1, [sp, #52]	; 0x34
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d19f      	bne.n	8005970 <pow+0x78>
 8005a30:	f7ff ff30 	bl	8005894 <__errno>
 8005a34:	2321      	movs	r3, #33	; 0x21
 8005a36:	6003      	str	r3, [r0, #0]
 8005a38:	e7c5      	b.n	80059c6 <pow+0xce>
 8005a3a:	9802      	ldr	r0, [sp, #8]
 8005a3c:	9903      	ldr	r1, [sp, #12]
 8005a3e:	f000 fe9d 	bl	800677c <finite>
 8005a42:	9005      	str	r0, [sp, #20]
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d000      	beq.n	8005a4a <pow+0x152>
 8005a48:	e0a5      	b.n	8005b96 <pow+0x29e>
 8005a4a:	9800      	ldr	r0, [sp, #0]
 8005a4c:	9901      	ldr	r1, [sp, #4]
 8005a4e:	f000 fe95 	bl	800677c <finite>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d100      	bne.n	8005a58 <pow+0x160>
 8005a56:	e09e      	b.n	8005b96 <pow+0x29e>
 8005a58:	0030      	movs	r0, r6
 8005a5a:	0039      	movs	r1, r7
 8005a5c:	f000 fe8e 	bl	800677c <finite>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d100      	bne.n	8005a66 <pow+0x16e>
 8005a64:	e097      	b.n	8005b96 <pow+0x29e>
 8005a66:	2500      	movs	r5, #0
 8005a68:	4b66      	ldr	r3, [pc, #408]	; (8005c04 <pow+0x30c>)
 8005a6a:	ac06      	add	r4, sp, #24
 8005a6c:	575d      	ldrsb	r5, [r3, r5]
 8005a6e:	9a02      	ldr	r2, [sp, #8]
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	0019      	movs	r1, r3
 8005a74:	0010      	movs	r0, r2
 8005a76:	f7fc fbb5 	bl	80021e4 <__aeabi_dcmpun>
 8005a7a:	4b63      	ldr	r3, [pc, #396]	; (8005c08 <pow+0x310>)
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d031      	beq.n	8005ae4 <pow+0x1ec>
 8005a80:	2201      	movs	r2, #1
 8005a82:	6063      	str	r3, [r4, #4]
 8005a84:	9b05      	ldr	r3, [sp, #20]
 8005a86:	9206      	str	r2, [sp, #24]
 8005a88:	6223      	str	r3, [r4, #32]
 8005a8a:	6126      	str	r6, [r4, #16]
 8005a8c:	6167      	str	r7, [r4, #20]
 8005a8e:	9a00      	ldr	r2, [sp, #0]
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	60a2      	str	r2, [r4, #8]
 8005a94:	60e3      	str	r3, [r4, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	d115      	bne.n	8005aca <pow+0x1d2>
 8005a9e:	61a2      	str	r2, [r4, #24]
 8005aa0:	61e3      	str	r3, [r4, #28]
 8005aa2:	0020      	movs	r0, r4
 8005aa4:	f000 fe72 	bl	800678c <matherr>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d016      	beq.n	8005ada <pow+0x1e2>
 8005aac:	6a23      	ldr	r3, [r4, #32]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <pow+0x1c2>
 8005ab2:	f7ff feef 	bl	8005894 <__errno>
 8005ab6:	6a23      	ldr	r3, [r4, #32]
 8005ab8:	6003      	str	r3, [r0, #0]
 8005aba:	69a3      	ldr	r3, [r4, #24]
 8005abc:	69e4      	ldr	r4, [r4, #28]
 8005abe:	9302      	str	r3, [sp, #8]
 8005ac0:	9403      	str	r4, [sp, #12]
 8005ac2:	9802      	ldr	r0, [sp, #8]
 8005ac4:	9903      	ldr	r1, [sp, #12]
 8005ac6:	b011      	add	sp, #68	; 0x44
 8005ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aca:	0010      	movs	r0, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	f7fb f9c5 	bl	8000e5c <__aeabi_ddiv>
 8005ad2:	61a0      	str	r0, [r4, #24]
 8005ad4:	61e1      	str	r1, [r4, #28]
 8005ad6:	2d02      	cmp	r5, #2
 8005ad8:	d1e3      	bne.n	8005aa2 <pow+0x1aa>
 8005ada:	f7ff fedb 	bl	8005894 <__errno>
 8005ade:	2321      	movs	r3, #33	; 0x21
 8005ae0:	6003      	str	r3, [r0, #0]
 8005ae2:	e7e3      	b.n	8005aac <pow+0x1b4>
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	6126      	str	r6, [r4, #16]
 8005ae8:	6167      	str	r7, [r4, #20]
 8005aea:	9206      	str	r2, [sp, #24]
 8005aec:	6063      	str	r3, [r4, #4]
 8005aee:	6220      	str	r0, [r4, #32]
 8005af0:	9a00      	ldr	r2, [sp, #0]
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	0030      	movs	r0, r6
 8005af6:	60a2      	str	r2, [r4, #8]
 8005af8:	60e3      	str	r3, [r4, #12]
 8005afa:	0039      	movs	r1, r7
 8005afc:	2200      	movs	r2, #0
 8005afe:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <pow+0x31c>)
 8005b00:	f7fb fdb6 	bl	8001670 <__aeabi_dmul>
 8005b04:	0006      	movs	r6, r0
 8005b06:	000f      	movs	r7, r1
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	d124      	bne.n	8005b56 <pow+0x25e>
 8005b0c:	9800      	ldr	r0, [sp, #0]
 8005b0e:	9901      	ldr	r1, [sp, #4]
 8005b10:	22e0      	movs	r2, #224	; 0xe0
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <pow+0x320>)
 8005b14:	0612      	lsls	r2, r2, #24
 8005b16:	61a2      	str	r2, [r4, #24]
 8005b18:	61e3      	str	r3, [r4, #28]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f7fa fb95 	bl	800024c <__aeabi_dcmplt>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d030      	beq.n	8005b88 <pow+0x290>
 8005b26:	0030      	movs	r0, r6
 8005b28:	0039      	movs	r1, r7
 8005b2a:	f000 fe37 	bl	800679c <rint>
 8005b2e:	0032      	movs	r2, r6
 8005b30:	003b      	movs	r3, r7
 8005b32:	f7fa fb85 	bl	8000240 <__aeabi_dcmpeq>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d104      	bne.n	8005b44 <pow+0x24c>
 8005b3a:	22e0      	movs	r2, #224	; 0xe0
 8005b3c:	4b37      	ldr	r3, [pc, #220]	; (8005c1c <pow+0x324>)
 8005b3e:	0612      	lsls	r2, r2, #24
 8005b40:	61a2      	str	r2, [r4, #24]
 8005b42:	61e3      	str	r3, [r4, #28]
 8005b44:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <pow+0x30c>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d11c      	bne.n	8005b88 <pow+0x290>
 8005b4e:	f7ff fea1 	bl	8005894 <__errno>
 8005b52:	2322      	movs	r3, #34	; 0x22
 8005b54:	e7c4      	b.n	8005ae0 <pow+0x1e8>
 8005b56:	2200      	movs	r2, #0
 8005b58:	9800      	ldr	r0, [sp, #0]
 8005b5a:	9901      	ldr	r1, [sp, #4]
 8005b5c:	4b30      	ldr	r3, [pc, #192]	; (8005c20 <pow+0x328>)
 8005b5e:	61a2      	str	r2, [r4, #24]
 8005b60:	61e3      	str	r3, [r4, #28]
 8005b62:	2200      	movs	r2, #0
 8005b64:	2300      	movs	r3, #0
 8005b66:	f7fa fb71 	bl	800024c <__aeabi_dcmplt>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d0ea      	beq.n	8005b44 <pow+0x24c>
 8005b6e:	0030      	movs	r0, r6
 8005b70:	0039      	movs	r1, r7
 8005b72:	f000 fe13 	bl	800679c <rint>
 8005b76:	0032      	movs	r2, r6
 8005b78:	003b      	movs	r3, r7
 8005b7a:	f7fa fb61 	bl	8000240 <__aeabi_dcmpeq>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d1e0      	bne.n	8005b44 <pow+0x24c>
 8005b82:	2200      	movs	r2, #0
 8005b84:	4b22      	ldr	r3, [pc, #136]	; (8005c10 <pow+0x318>)
 8005b86:	e7db      	b.n	8005b40 <pow+0x248>
 8005b88:	0020      	movs	r0, r4
 8005b8a:	f000 fdff 	bl	800678c <matherr>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d000      	beq.n	8005b94 <pow+0x29c>
 8005b92:	e78b      	b.n	8005aac <pow+0x1b4>
 8005b94:	e7db      	b.n	8005b4e <pow+0x256>
 8005b96:	2200      	movs	r2, #0
 8005b98:	9802      	ldr	r0, [sp, #8]
 8005b9a:	9903      	ldr	r1, [sp, #12]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f7fa fb4f 	bl	8000240 <__aeabi_dcmpeq>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d100      	bne.n	8005ba8 <pow+0x2b0>
 8005ba6:	e78c      	b.n	8005ac2 <pow+0x1ca>
 8005ba8:	9800      	ldr	r0, [sp, #0]
 8005baa:	9901      	ldr	r1, [sp, #4]
 8005bac:	f000 fde6 	bl	800677c <finite>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d100      	bne.n	8005bb6 <pow+0x2be>
 8005bb4:	e785      	b.n	8005ac2 <pow+0x1ca>
 8005bb6:	0030      	movs	r0, r6
 8005bb8:	0039      	movs	r1, r7
 8005bba:	f000 fddf 	bl	800677c <finite>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d100      	bne.n	8005bc4 <pow+0x2cc>
 8005bc2:	e77e      	b.n	8005ac2 <pow+0x1ca>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	9306      	str	r3, [sp, #24]
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <pow+0x310>)
 8005bca:	960a      	str	r6, [sp, #40]	; 0x28
 8005bcc:	970b      	str	r7, [sp, #44]	; 0x2c
 8005bce:	9307      	str	r3, [sp, #28]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	930e      	str	r3, [sp, #56]	; 0x38
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	9c01      	ldr	r4, [sp, #4]
 8005bd8:	9308      	str	r3, [sp, #32]
 8005bda:	9409      	str	r4, [sp, #36]	; 0x24
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2400      	movs	r4, #0
 8005be0:	930c      	str	r3, [sp, #48]	; 0x30
 8005be2:	940d      	str	r4, [sp, #52]	; 0x34
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <pow+0x30c>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d103      	bne.n	8005bf6 <pow+0x2fe>
 8005bee:	f7ff fe51 	bl	8005894 <__errno>
 8005bf2:	2322      	movs	r3, #34	; 0x22
 8005bf4:	e71f      	b.n	8005a36 <pow+0x13e>
 8005bf6:	a806      	add	r0, sp, #24
 8005bf8:	f000 fdc8 	bl	800678c <matherr>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d000      	beq.n	8005c02 <pow+0x30a>
 8005c00:	e6e1      	b.n	80059c6 <pow+0xce>
 8005c02:	e7f4      	b.n	8005bee <pow+0x2f6>
 8005c04:	2000006c 	.word	0x2000006c
 8005c08:	08006a39 	.word	0x08006a39
 8005c0c:	3ff00000 	.word	0x3ff00000
 8005c10:	fff00000 	.word	0xfff00000
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	47efffff 	.word	0x47efffff
 8005c1c:	c7efffff 	.word	0xc7efffff
 8005c20:	7ff00000 	.word	0x7ff00000

08005c24 <__ieee754_pow>:
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	b095      	sub	sp, #84	; 0x54
 8005c28:	9202      	str	r2, [sp, #8]
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	000e      	movs	r6, r1
 8005c30:	9902      	ldr	r1, [sp, #8]
 8005c32:	005d      	lsls	r5, r3, #1
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	000b      	movs	r3, r1
 8005c38:	086d      	lsrs	r5, r5, #1
 8005c3a:	0007      	movs	r7, r0
 8005c3c:	432b      	orrs	r3, r5
 8005c3e:	d101      	bne.n	8005c44 <__ieee754_pow+0x20>
 8005c40:	f000 fcad 	bl	800659e <__ieee754_pow+0x97a>
 8005c44:	4b7e      	ldr	r3, [pc, #504]	; (8005e40 <__ieee754_pow+0x21c>)
 8005c46:	0074      	lsls	r4, r6, #1
 8005c48:	9608      	str	r6, [sp, #32]
 8005c4a:	9000      	str	r0, [sp, #0]
 8005c4c:	0864      	lsrs	r4, r4, #1
 8005c4e:	469c      	mov	ip, r3
 8005c50:	429c      	cmp	r4, r3
 8005c52:	dc0b      	bgt.n	8005c6c <__ieee754_pow+0x48>
 8005c54:	d104      	bne.n	8005c60 <__ieee754_pow+0x3c>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d108      	bne.n	8005c6c <__ieee754_pow+0x48>
 8005c5a:	42a5      	cmp	r5, r4
 8005c5c:	dc0c      	bgt.n	8005c78 <__ieee754_pow+0x54>
 8005c5e:	e001      	b.n	8005c64 <__ieee754_pow+0x40>
 8005c60:	429d      	cmp	r5, r3
 8005c62:	dc03      	bgt.n	8005c6c <__ieee754_pow+0x48>
 8005c64:	4565      	cmp	r5, ip
 8005c66:	d10d      	bne.n	8005c84 <__ieee754_pow+0x60>
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	d00b      	beq.n	8005c84 <__ieee754_pow+0x60>
 8005c6c:	4b75      	ldr	r3, [pc, #468]	; (8005e44 <__ieee754_pow+0x220>)
 8005c6e:	18e4      	adds	r4, r4, r3
 8005c70:	4327      	orrs	r7, r4
 8005c72:	d101      	bne.n	8005c78 <__ieee754_pow+0x54>
 8005c74:	f000 fc93 	bl	800659e <__ieee754_pow+0x97a>
 8005c78:	4873      	ldr	r0, [pc, #460]	; (8005e48 <__ieee754_pow+0x224>)
 8005c7a:	f000 fd89 	bl	8006790 <nan>
 8005c7e:	9000      	str	r0, [sp, #0]
 8005c80:	9101      	str	r1, [sp, #4]
 8005c82:	e061      	b.n	8005d48 <__ieee754_pow+0x124>
 8005c84:	2300      	movs	r3, #0
 8005c86:	9306      	str	r3, [sp, #24]
 8005c88:	2e00      	cmp	r6, #0
 8005c8a:	da17      	bge.n	8005cbc <__ieee754_pow+0x98>
 8005c8c:	4a6f      	ldr	r2, [pc, #444]	; (8005e4c <__ieee754_pow+0x228>)
 8005c8e:	4295      	cmp	r5, r2
 8005c90:	dc4d      	bgt.n	8005d2e <__ieee754_pow+0x10a>
 8005c92:	4a6f      	ldr	r2, [pc, #444]	; (8005e50 <__ieee754_pow+0x22c>)
 8005c94:	4295      	cmp	r5, r2
 8005c96:	dd11      	ble.n	8005cbc <__ieee754_pow+0x98>
 8005c98:	4b6e      	ldr	r3, [pc, #440]	; (8005e54 <__ieee754_pow+0x230>)
 8005c9a:	152a      	asrs	r2, r5, #20
 8005c9c:	18d2      	adds	r2, r2, r3
 8005c9e:	2a14      	cmp	r2, #20
 8005ca0:	dd25      	ble.n	8005cee <__ieee754_pow+0xca>
 8005ca2:	2034      	movs	r0, #52	; 0x34
 8005ca4:	1a82      	subs	r2, r0, r2
 8005ca6:	9802      	ldr	r0, [sp, #8]
 8005ca8:	40d0      	lsrs	r0, r2
 8005caa:	0003      	movs	r3, r0
 8005cac:	4093      	lsls	r3, r2
 8005cae:	428b      	cmp	r3, r1
 8005cb0:	d104      	bne.n	8005cbc <__ieee754_pow+0x98>
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4010      	ands	r0, r2
 8005cb6:	1892      	adds	r2, r2, r2
 8005cb8:	1a13      	subs	r3, r2, r0
 8005cba:	9306      	str	r3, [sp, #24]
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d15e      	bne.n	8005d7e <__ieee754_pow+0x15a>
 8005cc0:	4565      	cmp	r5, ip
 8005cc2:	d123      	bne.n	8005d0c <__ieee754_pow+0xe8>
 8005cc4:	4b5f      	ldr	r3, [pc, #380]	; (8005e44 <__ieee754_pow+0x220>)
 8005cc6:	18e3      	adds	r3, r4, r3
 8005cc8:	431f      	orrs	r7, r3
 8005cca:	d101      	bne.n	8005cd0 <__ieee754_pow+0xac>
 8005ccc:	f000 fc67 	bl	800659e <__ieee754_pow+0x97a>
 8005cd0:	4b5f      	ldr	r3, [pc, #380]	; (8005e50 <__ieee754_pow+0x22c>)
 8005cd2:	429c      	cmp	r4, r3
 8005cd4:	dd2d      	ble.n	8005d32 <__ieee754_pow+0x10e>
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	9c03      	ldr	r4, [sp, #12]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	9401      	str	r4, [sp, #4]
 8005cde:	9b04      	ldr	r3, [sp, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	da31      	bge.n	8005d48 <__ieee754_pow+0x124>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2400      	movs	r4, #0
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	9401      	str	r4, [sp, #4]
 8005cec:	e02c      	b.n	8005d48 <__ieee754_pow+0x124>
 8005cee:	2900      	cmp	r1, #0
 8005cf0:	d145      	bne.n	8005d7e <__ieee754_pow+0x15a>
 8005cf2:	2314      	movs	r3, #20
 8005cf4:	1a9a      	subs	r2, r3, r2
 8005cf6:	002b      	movs	r3, r5
 8005cf8:	4113      	asrs	r3, r2
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	4091      	lsls	r1, r2
 8005cfe:	42a9      	cmp	r1, r5
 8005d00:	d104      	bne.n	8005d0c <__ieee754_pow+0xe8>
 8005d02:	2201      	movs	r2, #1
 8005d04:	4013      	ands	r3, r2
 8005d06:	1892      	adds	r2, r2, r2
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	9306      	str	r3, [sp, #24]
 8005d0c:	4b52      	ldr	r3, [pc, #328]	; (8005e58 <__ieee754_pow+0x234>)
 8005d0e:	429d      	cmp	r5, r3
 8005d10:	d11e      	bne.n	8005d50 <__ieee754_pow+0x12c>
 8005d12:	0038      	movs	r0, r7
 8005d14:	0031      	movs	r1, r6
 8005d16:	9b04      	ldr	r3, [sp, #16]
 8005d18:	9000      	str	r0, [sp, #0]
 8005d1a:	9101      	str	r1, [sp, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da13      	bge.n	8005d48 <__ieee754_pow+0x124>
 8005d20:	003a      	movs	r2, r7
 8005d22:	0033      	movs	r3, r6
 8005d24:	2000      	movs	r0, #0
 8005d26:	494c      	ldr	r1, [pc, #304]	; (8005e58 <__ieee754_pow+0x234>)
 8005d28:	f7fb f898 	bl	8000e5c <__aeabi_ddiv>
 8005d2c:	e7a7      	b.n	8005c7e <__ieee754_pow+0x5a>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e7c3      	b.n	8005cba <__ieee754_pow+0x96>
 8005d32:	9b04      	ldr	r3, [sp, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dad5      	bge.n	8005ce4 <__ieee754_pow+0xc0>
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	0612      	lsls	r2, r2, #24
 8005d3c:	4694      	mov	ip, r2
 8005d3e:	9b02      	ldr	r3, [sp, #8]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	4463      	add	r3, ip
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	9800      	ldr	r0, [sp, #0]
 8005d4a:	9901      	ldr	r1, [sp, #4]
 8005d4c:	b015      	add	sp, #84	; 0x54
 8005d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	05db      	lsls	r3, r3, #23
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d106      	bne.n	8005d68 <__ieee754_pow+0x144>
 8005d5a:	003a      	movs	r2, r7
 8005d5c:	0033      	movs	r3, r6
 8005d5e:	0038      	movs	r0, r7
 8005d60:	0031      	movs	r1, r6
 8005d62:	f7fb fc85 	bl	8001670 <__aeabi_dmul>
 8005d66:	e78a      	b.n	8005c7e <__ieee754_pow+0x5a>
 8005d68:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <__ieee754_pow+0x238>)
 8005d6a:	9a04      	ldr	r2, [sp, #16]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d106      	bne.n	8005d7e <__ieee754_pow+0x15a>
 8005d70:	2e00      	cmp	r6, #0
 8005d72:	db04      	blt.n	8005d7e <__ieee754_pow+0x15a>
 8005d74:	0038      	movs	r0, r7
 8005d76:	0031      	movs	r1, r6
 8005d78:	f000 fc4a 	bl	8006610 <__ieee754_sqrt>
 8005d7c:	e77f      	b.n	8005c7e <__ieee754_pow+0x5a>
 8005d7e:	0038      	movs	r0, r7
 8005d80:	0031      	movs	r1, r6
 8005d82:	f000 fcf7 	bl	8006774 <fabs>
 8005d86:	9000      	str	r0, [sp, #0]
 8005d88:	9101      	str	r1, [sp, #4]
 8005d8a:	2f00      	cmp	r7, #0
 8005d8c:	d12e      	bne.n	8005dec <__ieee754_pow+0x1c8>
 8005d8e:	2c00      	cmp	r4, #0
 8005d90:	d004      	beq.n	8005d9c <__ieee754_pow+0x178>
 8005d92:	4a31      	ldr	r2, [pc, #196]	; (8005e58 <__ieee754_pow+0x234>)
 8005d94:	00b3      	lsls	r3, r6, #2
 8005d96:	089b      	lsrs	r3, r3, #2
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d127      	bne.n	8005dec <__ieee754_pow+0x1c8>
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da07      	bge.n	8005db2 <__ieee754_pow+0x18e>
 8005da2:	9a00      	ldr	r2, [sp, #0]
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	2000      	movs	r0, #0
 8005da8:	492b      	ldr	r1, [pc, #172]	; (8005e58 <__ieee754_pow+0x234>)
 8005daa:	f7fb f857 	bl	8000e5c <__aeabi_ddiv>
 8005dae:	9000      	str	r0, [sp, #0]
 8005db0:	9101      	str	r1, [sp, #4]
 8005db2:	9b08      	ldr	r3, [sp, #32]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dac7      	bge.n	8005d48 <__ieee754_pow+0x124>
 8005db8:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <__ieee754_pow+0x220>)
 8005dba:	18e4      	adds	r4, r4, r3
 8005dbc:	9b06      	ldr	r3, [sp, #24]
 8005dbe:	431c      	orrs	r4, r3
 8005dc0:	d108      	bne.n	8005dd4 <__ieee754_pow+0x1b0>
 8005dc2:	9a00      	ldr	r2, [sp, #0]
 8005dc4:	9b01      	ldr	r3, [sp, #4]
 8005dc6:	0010      	movs	r0, r2
 8005dc8:	0019      	movs	r1, r3
 8005dca:	f7fb fec3 	bl	8001b54 <__aeabi_dsub>
 8005dce:	0002      	movs	r2, r0
 8005dd0:	000b      	movs	r3, r1
 8005dd2:	e7a9      	b.n	8005d28 <__ieee754_pow+0x104>
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d1b6      	bne.n	8005d48 <__ieee754_pow+0x124>
 8005dda:	9800      	ldr	r0, [sp, #0]
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	0002      	movs	r2, r0
 8005de0:	9801      	ldr	r0, [sp, #4]
 8005de2:	0609      	lsls	r1, r1, #24
 8005de4:	1843      	adds	r3, r0, r1
 8005de6:	9200      	str	r2, [sp, #0]
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	e7ad      	b.n	8005d48 <__ieee754_pow+0x124>
 8005dec:	0ff3      	lsrs	r3, r6, #31
 8005dee:	3b01      	subs	r3, #1
 8005df0:	9310      	str	r3, [sp, #64]	; 0x40
 8005df2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005df4:	9b06      	ldr	r3, [sp, #24]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	d104      	bne.n	8005e04 <__ieee754_pow+0x1e0>
 8005dfa:	003a      	movs	r2, r7
 8005dfc:	0033      	movs	r3, r6
 8005dfe:	0038      	movs	r0, r7
 8005e00:	0031      	movs	r1, r6
 8005e02:	e7e2      	b.n	8005dca <__ieee754_pow+0x1a6>
 8005e04:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <__ieee754_pow+0x23c>)
 8005e06:	429d      	cmp	r5, r3
 8005e08:	dc00      	bgt.n	8005e0c <__ieee754_pow+0x1e8>
 8005e0a:	e0f7      	b.n	8005ffc <__ieee754_pow+0x3d8>
 8005e0c:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <__ieee754_pow+0x240>)
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	dd0b      	ble.n	8005e2a <__ieee754_pow+0x206>
 8005e12:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <__ieee754_pow+0x22c>)
 8005e14:	429c      	cmp	r4, r3
 8005e16:	dc0e      	bgt.n	8005e36 <__ieee754_pow+0x212>
 8005e18:	9b04      	ldr	r3, [sp, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	db00      	blt.n	8005e20 <__ieee754_pow+0x1fc>
 8005e1e:	e761      	b.n	8005ce4 <__ieee754_pow+0xc0>
 8005e20:	4a11      	ldr	r2, [pc, #68]	; (8005e68 <__ieee754_pow+0x244>)
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <__ieee754_pow+0x248>)
 8005e24:	0010      	movs	r0, r2
 8005e26:	0019      	movs	r1, r3
 8005e28:	e79b      	b.n	8005d62 <__ieee754_pow+0x13e>
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <__ieee754_pow+0x24c>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	ddf3      	ble.n	8005e18 <__ieee754_pow+0x1f4>
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <__ieee754_pow+0x234>)
 8005e32:	429c      	cmp	r4, r3
 8005e34:	dd1e      	ble.n	8005e74 <__ieee754_pow+0x250>
 8005e36:	9b04      	ldr	r3, [sp, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dcf1      	bgt.n	8005e20 <__ieee754_pow+0x1fc>
 8005e3c:	e752      	b.n	8005ce4 <__ieee754_pow+0xc0>
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	7ff00000 	.word	0x7ff00000
 8005e44:	c0100000 	.word	0xc0100000
 8005e48:	08006a3c 	.word	0x08006a3c
 8005e4c:	433fffff 	.word	0x433fffff
 8005e50:	3fefffff 	.word	0x3fefffff
 8005e54:	fffffc01 	.word	0xfffffc01
 8005e58:	3ff00000 	.word	0x3ff00000
 8005e5c:	3fe00000 	.word	0x3fe00000
 8005e60:	41e00000 	.word	0x41e00000
 8005e64:	43f00000 	.word	0x43f00000
 8005e68:	8800759c 	.word	0x8800759c
 8005e6c:	7e37e43c 	.word	0x7e37e43c
 8005e70:	3feffffe 	.word	0x3feffffe
 8005e74:	2200      	movs	r2, #0
 8005e76:	9800      	ldr	r0, [sp, #0]
 8005e78:	9901      	ldr	r1, [sp, #4]
 8005e7a:	4b52      	ldr	r3, [pc, #328]	; (8005fc4 <__ieee754_pow+0x3a0>)
 8005e7c:	f7fb fe6a 	bl	8001b54 <__aeabi_dsub>
 8005e80:	22c0      	movs	r2, #192	; 0xc0
 8005e82:	4b51      	ldr	r3, [pc, #324]	; (8005fc8 <__ieee754_pow+0x3a4>)
 8005e84:	05d2      	lsls	r2, r2, #23
 8005e86:	0006      	movs	r6, r0
 8005e88:	000f      	movs	r7, r1
 8005e8a:	f7fb fbf1 	bl	8001670 <__aeabi_dmul>
 8005e8e:	4a4f      	ldr	r2, [pc, #316]	; (8005fcc <__ieee754_pow+0x3a8>)
 8005e90:	9000      	str	r0, [sp, #0]
 8005e92:	9101      	str	r1, [sp, #4]
 8005e94:	4b4e      	ldr	r3, [pc, #312]	; (8005fd0 <__ieee754_pow+0x3ac>)
 8005e96:	0030      	movs	r0, r6
 8005e98:	0039      	movs	r1, r7
 8005e9a:	f7fb fbe9 	bl	8001670 <__aeabi_dmul>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	9004      	str	r0, [sp, #16]
 8005ea2:	9105      	str	r1, [sp, #20]
 8005ea4:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <__ieee754_pow+0x3b0>)
 8005ea6:	0030      	movs	r0, r6
 8005ea8:	0039      	movs	r1, r7
 8005eaa:	f7fb fbe1 	bl	8001670 <__aeabi_dmul>
 8005eae:	0002      	movs	r2, r0
 8005eb0:	000b      	movs	r3, r1
 8005eb2:	4849      	ldr	r0, [pc, #292]	; (8005fd8 <__ieee754_pow+0x3b4>)
 8005eb4:	4949      	ldr	r1, [pc, #292]	; (8005fdc <__ieee754_pow+0x3b8>)
 8005eb6:	f7fb fe4d 	bl	8001b54 <__aeabi_dsub>
 8005eba:	0032      	movs	r2, r6
 8005ebc:	003b      	movs	r3, r7
 8005ebe:	f7fb fbd7 	bl	8001670 <__aeabi_dmul>
 8005ec2:	0002      	movs	r2, r0
 8005ec4:	000b      	movs	r3, r1
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	4945      	ldr	r1, [pc, #276]	; (8005fe0 <__ieee754_pow+0x3bc>)
 8005eca:	f7fb fe43 	bl	8001b54 <__aeabi_dsub>
 8005ece:	0032      	movs	r2, r6
 8005ed0:	0004      	movs	r4, r0
 8005ed2:	000d      	movs	r5, r1
 8005ed4:	003b      	movs	r3, r7
 8005ed6:	0030      	movs	r0, r6
 8005ed8:	0039      	movs	r1, r7
 8005eda:	f7fb fbc9 	bl	8001670 <__aeabi_dmul>
 8005ede:	0002      	movs	r2, r0
 8005ee0:	000b      	movs	r3, r1
 8005ee2:	0020      	movs	r0, r4
 8005ee4:	0029      	movs	r1, r5
 8005ee6:	f7fb fbc3 	bl	8001670 <__aeabi_dmul>
 8005eea:	4a3e      	ldr	r2, [pc, #248]	; (8005fe4 <__ieee754_pow+0x3c0>)
 8005eec:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <__ieee754_pow+0x3a4>)
 8005eee:	f7fb fbbf 	bl	8001670 <__aeabi_dmul>
 8005ef2:	0002      	movs	r2, r0
 8005ef4:	000b      	movs	r3, r1
 8005ef6:	9804      	ldr	r0, [sp, #16]
 8005ef8:	9905      	ldr	r1, [sp, #20]
 8005efa:	f7fb fe2b 	bl	8001b54 <__aeabi_dsub>
 8005efe:	0002      	movs	r2, r0
 8005f00:	000b      	movs	r3, r1
 8005f02:	0004      	movs	r4, r0
 8005f04:	000d      	movs	r5, r1
 8005f06:	9800      	ldr	r0, [sp, #0]
 8005f08:	9901      	ldr	r1, [sp, #4]
 8005f0a:	f7fa fc8b 	bl	8000824 <__aeabi_dadd>
 8005f0e:	9a00      	ldr	r2, [sp, #0]
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	2000      	movs	r0, #0
 8005f14:	9004      	str	r0, [sp, #16]
 8005f16:	9105      	str	r1, [sp, #20]
 8005f18:	f7fb fe1c 	bl	8001b54 <__aeabi_dsub>
 8005f1c:	0002      	movs	r2, r0
 8005f1e:	000b      	movs	r3, r1
 8005f20:	0020      	movs	r0, r4
 8005f22:	0029      	movs	r1, r5
 8005f24:	f7fb fe16 	bl	8001b54 <__aeabi_dsub>
 8005f28:	9b06      	ldr	r3, [sp, #24]
 8005f2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	0006      	movs	r6, r0
 8005f30:	000f      	movs	r7, r1
 8005f32:	4313      	orrs	r3, r2
 8005f34:	d000      	beq.n	8005f38 <__ieee754_pow+0x314>
 8005f36:	e1de      	b.n	80062f6 <__ieee754_pow+0x6d2>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4c2b      	ldr	r4, [pc, #172]	; (8005fe8 <__ieee754_pow+0x3c4>)
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	9401      	str	r4, [sp, #4]
 8005f40:	9c02      	ldr	r4, [sp, #8]
 8005f42:	9d03      	ldr	r5, [sp, #12]
 8005f44:	9802      	ldr	r0, [sp, #8]
 8005f46:	9903      	ldr	r1, [sp, #12]
 8005f48:	2400      	movs	r4, #0
 8005f4a:	002b      	movs	r3, r5
 8005f4c:	0022      	movs	r2, r4
 8005f4e:	f7fb fe01 	bl	8001b54 <__aeabi_dsub>
 8005f52:	9a04      	ldr	r2, [sp, #16]
 8005f54:	9b05      	ldr	r3, [sp, #20]
 8005f56:	f7fb fb8b 	bl	8001670 <__aeabi_dmul>
 8005f5a:	9a02      	ldr	r2, [sp, #8]
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	9006      	str	r0, [sp, #24]
 8005f60:	9107      	str	r1, [sp, #28]
 8005f62:	0030      	movs	r0, r6
 8005f64:	0039      	movs	r1, r7
 8005f66:	f7fb fb83 	bl	8001670 <__aeabi_dmul>
 8005f6a:	0002      	movs	r2, r0
 8005f6c:	000b      	movs	r3, r1
 8005f6e:	9806      	ldr	r0, [sp, #24]
 8005f70:	9907      	ldr	r1, [sp, #28]
 8005f72:	f7fa fc57 	bl	8000824 <__aeabi_dadd>
 8005f76:	0022      	movs	r2, r4
 8005f78:	002b      	movs	r3, r5
 8005f7a:	9006      	str	r0, [sp, #24]
 8005f7c:	9107      	str	r1, [sp, #28]
 8005f7e:	9804      	ldr	r0, [sp, #16]
 8005f80:	9905      	ldr	r1, [sp, #20]
 8005f82:	f7fb fb75 	bl	8001670 <__aeabi_dmul>
 8005f86:	0006      	movs	r6, r0
 8005f88:	000f      	movs	r7, r1
 8005f8a:	000b      	movs	r3, r1
 8005f8c:	0002      	movs	r2, r0
 8005f8e:	9806      	ldr	r0, [sp, #24]
 8005f90:	9907      	ldr	r1, [sp, #28]
 8005f92:	9604      	str	r6, [sp, #16]
 8005f94:	9705      	str	r7, [sp, #20]
 8005f96:	f7fa fc45 	bl	8000824 <__aeabi_dadd>
 8005f9a:	4b14      	ldr	r3, [pc, #80]	; (8005fec <__ieee754_pow+0x3c8>)
 8005f9c:	0005      	movs	r5, r0
 8005f9e:	000c      	movs	r4, r1
 8005fa0:	9108      	str	r1, [sp, #32]
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	dc00      	bgt.n	8005fa8 <__ieee754_pow+0x384>
 8005fa6:	e2d8      	b.n	800655a <__ieee754_pow+0x936>
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <__ieee754_pow+0x3cc>)
 8005faa:	18cb      	adds	r3, r1, r3
 8005fac:	4303      	orrs	r3, r0
 8005fae:	d100      	bne.n	8005fb2 <__ieee754_pow+0x38e>
 8005fb0:	e1da      	b.n	8006368 <__ieee754_pow+0x744>
 8005fb2:	9800      	ldr	r0, [sp, #0]
 8005fb4:	9901      	ldr	r1, [sp, #4]
 8005fb6:	4a0f      	ldr	r2, [pc, #60]	; (8005ff4 <__ieee754_pow+0x3d0>)
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <__ieee754_pow+0x3d4>)
 8005fba:	f7fb fb59 	bl	8001670 <__aeabi_dmul>
 8005fbe:	4a0d      	ldr	r2, [pc, #52]	; (8005ff4 <__ieee754_pow+0x3d0>)
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <__ieee754_pow+0x3d4>)
 8005fc2:	e6ce      	b.n	8005d62 <__ieee754_pow+0x13e>
 8005fc4:	3ff00000 	.word	0x3ff00000
 8005fc8:	3ff71547 	.word	0x3ff71547
 8005fcc:	f85ddf44 	.word	0xf85ddf44
 8005fd0:	3e54ae0b 	.word	0x3e54ae0b
 8005fd4:	3fd00000 	.word	0x3fd00000
 8005fd8:	55555555 	.word	0x55555555
 8005fdc:	3fd55555 	.word	0x3fd55555
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	652b82fe 	.word	0x652b82fe
 8005fe8:	bff00000 	.word	0xbff00000
 8005fec:	408fffff 	.word	0x408fffff
 8005ff0:	bf700000 	.word	0xbf700000
 8005ff4:	8800759c 	.word	0x8800759c
 8005ff8:	7e37e43c 	.word	0x7e37e43c
 8005ffc:	4bbf      	ldr	r3, [pc, #764]	; (80062fc <__ieee754_pow+0x6d8>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	429c      	cmp	r4, r3
 8006002:	dc0a      	bgt.n	800601a <__ieee754_pow+0x3f6>
 8006004:	9800      	ldr	r0, [sp, #0]
 8006006:	9901      	ldr	r1, [sp, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	4bbd      	ldr	r3, [pc, #756]	; (8006300 <__ieee754_pow+0x6dc>)
 800600c:	f7fb fb30 	bl	8001670 <__aeabi_dmul>
 8006010:	2235      	movs	r2, #53	; 0x35
 8006012:	9000      	str	r0, [sp, #0]
 8006014:	9101      	str	r1, [sp, #4]
 8006016:	9c01      	ldr	r4, [sp, #4]
 8006018:	4252      	negs	r2, r2
 800601a:	49ba      	ldr	r1, [pc, #744]	; (8006304 <__ieee754_pow+0x6e0>)
 800601c:	1523      	asrs	r3, r4, #20
 800601e:	185b      	adds	r3, r3, r1
 8006020:	189b      	adds	r3, r3, r2
 8006022:	0324      	lsls	r4, r4, #12
 8006024:	4db8      	ldr	r5, [pc, #736]	; (8006308 <__ieee754_pow+0x6e4>)
 8006026:	4ab9      	ldr	r2, [pc, #740]	; (800630c <__ieee754_pow+0x6e8>)
 8006028:	930d      	str	r3, [sp, #52]	; 0x34
 800602a:	0b23      	lsrs	r3, r4, #12
 800602c:	431d      	orrs	r5, r3
 800602e:	2400      	movs	r4, #0
 8006030:	4293      	cmp	r3, r2
 8006032:	dd09      	ble.n	8006048 <__ieee754_pow+0x424>
 8006034:	4ab6      	ldr	r2, [pc, #728]	; (8006310 <__ieee754_pow+0x6ec>)
 8006036:	3401      	adds	r4, #1
 8006038:	4293      	cmp	r3, r2
 800603a:	dd05      	ble.n	8006048 <__ieee754_pow+0x424>
 800603c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800603e:	191b      	adds	r3, r3, r4
 8006040:	2400      	movs	r4, #0
 8006042:	930d      	str	r3, [sp, #52]	; 0x34
 8006044:	4bb3      	ldr	r3, [pc, #716]	; (8006314 <__ieee754_pow+0x6f0>)
 8006046:	18ed      	adds	r5, r5, r3
 8006048:	9800      	ldr	r0, [sp, #0]
 800604a:	9901      	ldr	r1, [sp, #4]
 800604c:	0029      	movs	r1, r5
 800604e:	00e3      	lsls	r3, r4, #3
 8006050:	9311      	str	r3, [sp, #68]	; 0x44
 8006052:	4bb1      	ldr	r3, [pc, #708]	; (8006318 <__ieee754_pow+0x6f4>)
 8006054:	00e2      	lsls	r2, r4, #3
 8006056:	189b      	adds	r3, r3, r2
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	900e      	str	r0, [sp, #56]	; 0x38
 800605e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006060:	920a      	str	r2, [sp, #40]	; 0x28
 8006062:	930b      	str	r3, [sp, #44]	; 0x2c
 8006064:	f7fb fd76 	bl	8001b54 <__aeabi_dsub>
 8006068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800606a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800606c:	0006      	movs	r6, r0
 800606e:	000f      	movs	r7, r1
 8006070:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006072:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006074:	f7fa fbd6 	bl	8000824 <__aeabi_dadd>
 8006078:	0002      	movs	r2, r0
 800607a:	000b      	movs	r3, r1
 800607c:	2000      	movs	r0, #0
 800607e:	49a2      	ldr	r1, [pc, #648]	; (8006308 <__ieee754_pow+0x6e4>)
 8006080:	f7fa feec 	bl	8000e5c <__aeabi_ddiv>
 8006084:	9012      	str	r0, [sp, #72]	; 0x48
 8006086:	9113      	str	r1, [sp, #76]	; 0x4c
 8006088:	0002      	movs	r2, r0
 800608a:	000b      	movs	r3, r1
 800608c:	0030      	movs	r0, r6
 800608e:	0039      	movs	r1, r7
 8006090:	f7fb faee 	bl	8001670 <__aeabi_dmul>
 8006094:	9008      	str	r0, [sp, #32]
 8006096:	9109      	str	r1, [sp, #36]	; 0x24
 8006098:	9a08      	ldr	r2, [sp, #32]
 800609a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609c:	2180      	movs	r1, #128	; 0x80
 800609e:	9204      	str	r2, [sp, #16]
 80060a0:	9305      	str	r3, [sp, #20]
 80060a2:	2300      	movs	r3, #0
 80060a4:	0589      	lsls	r1, r1, #22
 80060a6:	106d      	asrs	r5, r5, #1
 80060a8:	430d      	orrs	r5, r1
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	9a04      	ldr	r2, [sp, #16]
 80060b0:	9b05      	ldr	r3, [sp, #20]
 80060b2:	9200      	str	r2, [sp, #0]
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	0309      	lsls	r1, r1, #12
 80060ba:	186d      	adds	r5, r5, r1
 80060bc:	04a4      	lsls	r4, r4, #18
 80060be:	192b      	adds	r3, r5, r4
 80060c0:	9800      	ldr	r0, [sp, #0]
 80060c2:	9901      	ldr	r1, [sp, #4]
 80060c4:	0014      	movs	r4, r2
 80060c6:	001d      	movs	r5, r3
 80060c8:	f7fb fad2 	bl	8001670 <__aeabi_dmul>
 80060cc:	0002      	movs	r2, r0
 80060ce:	000b      	movs	r3, r1
 80060d0:	0030      	movs	r0, r6
 80060d2:	0039      	movs	r1, r7
 80060d4:	f7fb fd3e 	bl	8001b54 <__aeabi_dsub>
 80060d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060dc:	0006      	movs	r6, r0
 80060de:	000f      	movs	r7, r1
 80060e0:	0020      	movs	r0, r4
 80060e2:	0029      	movs	r1, r5
 80060e4:	f7fb fd36 	bl	8001b54 <__aeabi_dsub>
 80060e8:	0002      	movs	r2, r0
 80060ea:	000b      	movs	r3, r1
 80060ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060f0:	f7fb fd30 	bl	8001b54 <__aeabi_dsub>
 80060f4:	9a00      	ldr	r2, [sp, #0]
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	f7fb faba 	bl	8001670 <__aeabi_dmul>
 80060fc:	0002      	movs	r2, r0
 80060fe:	000b      	movs	r3, r1
 8006100:	0030      	movs	r0, r6
 8006102:	0039      	movs	r1, r7
 8006104:	f7fb fd26 	bl	8001b54 <__aeabi_dsub>
 8006108:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800610a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800610c:	f7fb fab0 	bl	8001670 <__aeabi_dmul>
 8006110:	9a08      	ldr	r2, [sp, #32]
 8006112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006114:	900a      	str	r0, [sp, #40]	; 0x28
 8006116:	910b      	str	r1, [sp, #44]	; 0x2c
 8006118:	0010      	movs	r0, r2
 800611a:	0019      	movs	r1, r3
 800611c:	f7fb faa8 	bl	8001670 <__aeabi_dmul>
 8006120:	0006      	movs	r6, r0
 8006122:	000f      	movs	r7, r1
 8006124:	4a7d      	ldr	r2, [pc, #500]	; (800631c <__ieee754_pow+0x6f8>)
 8006126:	4b7e      	ldr	r3, [pc, #504]	; (8006320 <__ieee754_pow+0x6fc>)
 8006128:	f7fb faa2 	bl	8001670 <__aeabi_dmul>
 800612c:	4a7d      	ldr	r2, [pc, #500]	; (8006324 <__ieee754_pow+0x700>)
 800612e:	4b7e      	ldr	r3, [pc, #504]	; (8006328 <__ieee754_pow+0x704>)
 8006130:	f7fa fb78 	bl	8000824 <__aeabi_dadd>
 8006134:	0032      	movs	r2, r6
 8006136:	003b      	movs	r3, r7
 8006138:	f7fb fa9a 	bl	8001670 <__aeabi_dmul>
 800613c:	4a7b      	ldr	r2, [pc, #492]	; (800632c <__ieee754_pow+0x708>)
 800613e:	4b7c      	ldr	r3, [pc, #496]	; (8006330 <__ieee754_pow+0x70c>)
 8006140:	f7fa fb70 	bl	8000824 <__aeabi_dadd>
 8006144:	0032      	movs	r2, r6
 8006146:	003b      	movs	r3, r7
 8006148:	f7fb fa92 	bl	8001670 <__aeabi_dmul>
 800614c:	4a79      	ldr	r2, [pc, #484]	; (8006334 <__ieee754_pow+0x710>)
 800614e:	4b7a      	ldr	r3, [pc, #488]	; (8006338 <__ieee754_pow+0x714>)
 8006150:	f7fa fb68 	bl	8000824 <__aeabi_dadd>
 8006154:	0032      	movs	r2, r6
 8006156:	003b      	movs	r3, r7
 8006158:	f7fb fa8a 	bl	8001670 <__aeabi_dmul>
 800615c:	4a77      	ldr	r2, [pc, #476]	; (800633c <__ieee754_pow+0x718>)
 800615e:	4b78      	ldr	r3, [pc, #480]	; (8006340 <__ieee754_pow+0x71c>)
 8006160:	f7fa fb60 	bl	8000824 <__aeabi_dadd>
 8006164:	0032      	movs	r2, r6
 8006166:	003b      	movs	r3, r7
 8006168:	f7fb fa82 	bl	8001670 <__aeabi_dmul>
 800616c:	4a75      	ldr	r2, [pc, #468]	; (8006344 <__ieee754_pow+0x720>)
 800616e:	4b76      	ldr	r3, [pc, #472]	; (8006348 <__ieee754_pow+0x724>)
 8006170:	f7fa fb58 	bl	8000824 <__aeabi_dadd>
 8006174:	0032      	movs	r2, r6
 8006176:	0004      	movs	r4, r0
 8006178:	000d      	movs	r5, r1
 800617a:	003b      	movs	r3, r7
 800617c:	0030      	movs	r0, r6
 800617e:	0039      	movs	r1, r7
 8006180:	f7fb fa76 	bl	8001670 <__aeabi_dmul>
 8006184:	0002      	movs	r2, r0
 8006186:	000b      	movs	r3, r1
 8006188:	0020      	movs	r0, r4
 800618a:	0029      	movs	r1, r5
 800618c:	f7fb fa70 	bl	8001670 <__aeabi_dmul>
 8006190:	9a00      	ldr	r2, [sp, #0]
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	0004      	movs	r4, r0
 8006196:	000d      	movs	r5, r1
 8006198:	9808      	ldr	r0, [sp, #32]
 800619a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800619c:	f7fa fb42 	bl	8000824 <__aeabi_dadd>
 80061a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a4:	f7fb fa64 	bl	8001670 <__aeabi_dmul>
 80061a8:	0022      	movs	r2, r4
 80061aa:	002b      	movs	r3, r5
 80061ac:	f7fa fb3a 	bl	8000824 <__aeabi_dadd>
 80061b0:	9a00      	ldr	r2, [sp, #0]
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	900e      	str	r0, [sp, #56]	; 0x38
 80061b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80061b8:	0010      	movs	r0, r2
 80061ba:	0019      	movs	r1, r3
 80061bc:	f7fb fa58 	bl	8001670 <__aeabi_dmul>
 80061c0:	2200      	movs	r2, #0
 80061c2:	4b62      	ldr	r3, [pc, #392]	; (800634c <__ieee754_pow+0x728>)
 80061c4:	0004      	movs	r4, r0
 80061c6:	000d      	movs	r5, r1
 80061c8:	f7fa fb2c 	bl	8000824 <__aeabi_dadd>
 80061cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061d0:	f7fa fb28 	bl	8000824 <__aeabi_dadd>
 80061d4:	9e04      	ldr	r6, [sp, #16]
 80061d6:	000f      	movs	r7, r1
 80061d8:	0032      	movs	r2, r6
 80061da:	000b      	movs	r3, r1
 80061dc:	9800      	ldr	r0, [sp, #0]
 80061de:	9901      	ldr	r1, [sp, #4]
 80061e0:	f7fb fa46 	bl	8001670 <__aeabi_dmul>
 80061e4:	2200      	movs	r2, #0
 80061e6:	9000      	str	r0, [sp, #0]
 80061e8:	9101      	str	r1, [sp, #4]
 80061ea:	4b58      	ldr	r3, [pc, #352]	; (800634c <__ieee754_pow+0x728>)
 80061ec:	0030      	movs	r0, r6
 80061ee:	0039      	movs	r1, r7
 80061f0:	f7fb fcb0 	bl	8001b54 <__aeabi_dsub>
 80061f4:	0022      	movs	r2, r4
 80061f6:	002b      	movs	r3, r5
 80061f8:	f7fb fcac 	bl	8001b54 <__aeabi_dsub>
 80061fc:	0002      	movs	r2, r0
 80061fe:	000b      	movs	r3, r1
 8006200:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006202:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006204:	f7fb fca6 	bl	8001b54 <__aeabi_dsub>
 8006208:	9a08      	ldr	r2, [sp, #32]
 800620a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620c:	f7fb fa30 	bl	8001670 <__aeabi_dmul>
 8006210:	0032      	movs	r2, r6
 8006212:	0004      	movs	r4, r0
 8006214:	000d      	movs	r5, r1
 8006216:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800621a:	003b      	movs	r3, r7
 800621c:	f7fb fa28 	bl	8001670 <__aeabi_dmul>
 8006220:	0002      	movs	r2, r0
 8006222:	000b      	movs	r3, r1
 8006224:	0020      	movs	r0, r4
 8006226:	0029      	movs	r1, r5
 8006228:	f7fa fafc 	bl	8000824 <__aeabi_dadd>
 800622c:	0004      	movs	r4, r0
 800622e:	000d      	movs	r5, r1
 8006230:	0002      	movs	r2, r0
 8006232:	000b      	movs	r3, r1
 8006234:	9800      	ldr	r0, [sp, #0]
 8006236:	9901      	ldr	r1, [sp, #4]
 8006238:	f7fa faf4 	bl	8000824 <__aeabi_dadd>
 800623c:	22e0      	movs	r2, #224	; 0xe0
 800623e:	9e04      	ldr	r6, [sp, #16]
 8006240:	0612      	lsls	r2, r2, #24
 8006242:	4b43      	ldr	r3, [pc, #268]	; (8006350 <__ieee754_pow+0x72c>)
 8006244:	0030      	movs	r0, r6
 8006246:	000f      	movs	r7, r1
 8006248:	f7fb fa12 	bl	8001670 <__aeabi_dmul>
 800624c:	9008      	str	r0, [sp, #32]
 800624e:	9109      	str	r1, [sp, #36]	; 0x24
 8006250:	9a00      	ldr	r2, [sp, #0]
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	0030      	movs	r0, r6
 8006256:	0039      	movs	r1, r7
 8006258:	f7fb fc7c 	bl	8001b54 <__aeabi_dsub>
 800625c:	0002      	movs	r2, r0
 800625e:	000b      	movs	r3, r1
 8006260:	0020      	movs	r0, r4
 8006262:	0029      	movs	r1, r5
 8006264:	f7fb fc76 	bl	8001b54 <__aeabi_dsub>
 8006268:	4a3a      	ldr	r2, [pc, #232]	; (8006354 <__ieee754_pow+0x730>)
 800626a:	4b39      	ldr	r3, [pc, #228]	; (8006350 <__ieee754_pow+0x72c>)
 800626c:	f7fb fa00 	bl	8001670 <__aeabi_dmul>
 8006270:	4a39      	ldr	r2, [pc, #228]	; (8006358 <__ieee754_pow+0x734>)
 8006272:	0004      	movs	r4, r0
 8006274:	000d      	movs	r5, r1
 8006276:	4b39      	ldr	r3, [pc, #228]	; (800635c <__ieee754_pow+0x738>)
 8006278:	0030      	movs	r0, r6
 800627a:	0039      	movs	r1, r7
 800627c:	f7fb f9f8 	bl	8001670 <__aeabi_dmul>
 8006280:	0002      	movs	r2, r0
 8006282:	000b      	movs	r3, r1
 8006284:	0020      	movs	r0, r4
 8006286:	0029      	movs	r1, r5
 8006288:	f7fa facc 	bl	8000824 <__aeabi_dadd>
 800628c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <__ieee754_pow+0x73c>)
 8006290:	189b      	adds	r3, r3, r2
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f7fa fac5 	bl	8000824 <__aeabi_dadd>
 800629a:	9000      	str	r0, [sp, #0]
 800629c:	9101      	str	r1, [sp, #4]
 800629e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80062a0:	f7fb ffbc 	bl	800221c <__aeabi_i2d>
 80062a4:	0004      	movs	r4, r0
 80062a6:	000d      	movs	r5, r1
 80062a8:	9808      	ldr	r0, [sp, #32]
 80062aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062ae:	4b2d      	ldr	r3, [pc, #180]	; (8006364 <__ieee754_pow+0x740>)
 80062b0:	189b      	adds	r3, r3, r2
 80062b2:	681e      	ldr	r6, [r3, #0]
 80062b4:	685f      	ldr	r7, [r3, #4]
 80062b6:	9a00      	ldr	r2, [sp, #0]
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	f7fa fab3 	bl	8000824 <__aeabi_dadd>
 80062be:	0032      	movs	r2, r6
 80062c0:	003b      	movs	r3, r7
 80062c2:	f7fa faaf 	bl	8000824 <__aeabi_dadd>
 80062c6:	0022      	movs	r2, r4
 80062c8:	002b      	movs	r3, r5
 80062ca:	f7fa faab 	bl	8000824 <__aeabi_dadd>
 80062ce:	9804      	ldr	r0, [sp, #16]
 80062d0:	0022      	movs	r2, r4
 80062d2:	002b      	movs	r3, r5
 80062d4:	9004      	str	r0, [sp, #16]
 80062d6:	9105      	str	r1, [sp, #20]
 80062d8:	f7fb fc3c 	bl	8001b54 <__aeabi_dsub>
 80062dc:	0032      	movs	r2, r6
 80062de:	003b      	movs	r3, r7
 80062e0:	f7fb fc38 	bl	8001b54 <__aeabi_dsub>
 80062e4:	9a08      	ldr	r2, [sp, #32]
 80062e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e8:	f7fb fc34 	bl	8001b54 <__aeabi_dsub>
 80062ec:	0002      	movs	r2, r0
 80062ee:	000b      	movs	r3, r1
 80062f0:	9800      	ldr	r0, [sp, #0]
 80062f2:	9901      	ldr	r1, [sp, #4]
 80062f4:	e616      	b.n	8005f24 <__ieee754_pow+0x300>
 80062f6:	2300      	movs	r3, #0
 80062f8:	4c03      	ldr	r4, [pc, #12]	; (8006308 <__ieee754_pow+0x6e4>)
 80062fa:	e61f      	b.n	8005f3c <__ieee754_pow+0x318>
 80062fc:	000fffff 	.word	0x000fffff
 8006300:	43400000 	.word	0x43400000
 8006304:	fffffc01 	.word	0xfffffc01
 8006308:	3ff00000 	.word	0x3ff00000
 800630c:	0003988e 	.word	0x0003988e
 8006310:	000bb679 	.word	0x000bb679
 8006314:	fff00000 	.word	0xfff00000
 8006318:	08006a40 	.word	0x08006a40
 800631c:	4a454eef 	.word	0x4a454eef
 8006320:	3fca7e28 	.word	0x3fca7e28
 8006324:	93c9db65 	.word	0x93c9db65
 8006328:	3fcd864a 	.word	0x3fcd864a
 800632c:	a91d4101 	.word	0xa91d4101
 8006330:	3fd17460 	.word	0x3fd17460
 8006334:	518f264d 	.word	0x518f264d
 8006338:	3fd55555 	.word	0x3fd55555
 800633c:	db6fabff 	.word	0xdb6fabff
 8006340:	3fdb6db6 	.word	0x3fdb6db6
 8006344:	33333303 	.word	0x33333303
 8006348:	3fe33333 	.word	0x3fe33333
 800634c:	40080000 	.word	0x40080000
 8006350:	3feec709 	.word	0x3feec709
 8006354:	dc3a03fd 	.word	0xdc3a03fd
 8006358:	145b01f5 	.word	0x145b01f5
 800635c:	be3e2fe0 	.word	0xbe3e2fe0
 8006360:	08006a60 	.word	0x08006a60
 8006364:	08006a50 	.word	0x08006a50
 8006368:	4a8f      	ldr	r2, [pc, #572]	; (80065a8 <__ieee754_pow+0x984>)
 800636a:	4b90      	ldr	r3, [pc, #576]	; (80065ac <__ieee754_pow+0x988>)
 800636c:	9806      	ldr	r0, [sp, #24]
 800636e:	9907      	ldr	r1, [sp, #28]
 8006370:	f7fa fa58 	bl	8000824 <__aeabi_dadd>
 8006374:	0032      	movs	r2, r6
 8006376:	9002      	str	r0, [sp, #8]
 8006378:	9103      	str	r1, [sp, #12]
 800637a:	003b      	movs	r3, r7
 800637c:	0028      	movs	r0, r5
 800637e:	0021      	movs	r1, r4
 8006380:	f7fb fbe8 	bl	8001b54 <__aeabi_dsub>
 8006384:	0002      	movs	r2, r0
 8006386:	000b      	movs	r3, r1
 8006388:	9802      	ldr	r0, [sp, #8]
 800638a:	9903      	ldr	r1, [sp, #12]
 800638c:	f7f9 ff72 	bl	8000274 <__aeabi_dcmpgt>
 8006390:	2800      	cmp	r0, #0
 8006392:	d000      	beq.n	8006396 <__ieee754_pow+0x772>
 8006394:	e60d      	b.n	8005fb2 <__ieee754_pow+0x38e>
 8006396:	2100      	movs	r1, #0
 8006398:	4a85      	ldr	r2, [pc, #532]	; (80065b0 <__ieee754_pow+0x98c>)
 800639a:	0063      	lsls	r3, r4, #1
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	9102      	str	r1, [sp, #8]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	dd25      	ble.n	80063f0 <__ieee754_pow+0x7cc>
 80063a4:	4a83      	ldr	r2, [pc, #524]	; (80065b4 <__ieee754_pow+0x990>)
 80063a6:	151b      	asrs	r3, r3, #20
 80063a8:	189b      	adds	r3, r3, r2
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	0352      	lsls	r2, r2, #13
 80063ae:	4694      	mov	ip, r2
 80063b0:	411a      	asrs	r2, r3
 80063b2:	1914      	adds	r4, r2, r4
 80063b4:	0060      	lsls	r0, r4, #1
 80063b6:	4b80      	ldr	r3, [pc, #512]	; (80065b8 <__ieee754_pow+0x994>)
 80063b8:	0d40      	lsrs	r0, r0, #21
 80063ba:	4d80      	ldr	r5, [pc, #512]	; (80065bc <__ieee754_pow+0x998>)
 80063bc:	18c0      	adds	r0, r0, r3
 80063be:	4105      	asrs	r5, r0
 80063c0:	0021      	movs	r1, r4
 80063c2:	43a9      	bics	r1, r5
 80063c4:	000b      	movs	r3, r1
 80063c6:	4661      	mov	r1, ip
 80063c8:	0324      	lsls	r4, r4, #12
 80063ca:	0b24      	lsrs	r4, r4, #12
 80063cc:	4321      	orrs	r1, r4
 80063ce:	2414      	movs	r4, #20
 80063d0:	1a20      	subs	r0, r4, r0
 80063d2:	4101      	asrs	r1, r0
 80063d4:	9102      	str	r1, [sp, #8]
 80063d6:	9908      	ldr	r1, [sp, #32]
 80063d8:	2200      	movs	r2, #0
 80063da:	2900      	cmp	r1, #0
 80063dc:	da02      	bge.n	80063e4 <__ieee754_pow+0x7c0>
 80063de:	9902      	ldr	r1, [sp, #8]
 80063e0:	4249      	negs	r1, r1
 80063e2:	9102      	str	r1, [sp, #8]
 80063e4:	0030      	movs	r0, r6
 80063e6:	0039      	movs	r1, r7
 80063e8:	f7fb fbb4 	bl	8001b54 <__aeabi_dsub>
 80063ec:	9004      	str	r0, [sp, #16]
 80063ee:	9105      	str	r1, [sp, #20]
 80063f0:	9a06      	ldr	r2, [sp, #24]
 80063f2:	9b07      	ldr	r3, [sp, #28]
 80063f4:	9804      	ldr	r0, [sp, #16]
 80063f6:	9905      	ldr	r1, [sp, #20]
 80063f8:	2600      	movs	r6, #0
 80063fa:	f7fa fa13 	bl	8000824 <__aeabi_dadd>
 80063fe:	2200      	movs	r2, #0
 8006400:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <__ieee754_pow+0x99c>)
 8006402:	0030      	movs	r0, r6
 8006404:	000f      	movs	r7, r1
 8006406:	f7fb f933 	bl	8001670 <__aeabi_dmul>
 800640a:	9a04      	ldr	r2, [sp, #16]
 800640c:	9b05      	ldr	r3, [sp, #20]
 800640e:	9008      	str	r0, [sp, #32]
 8006410:	9109      	str	r1, [sp, #36]	; 0x24
 8006412:	0030      	movs	r0, r6
 8006414:	0039      	movs	r1, r7
 8006416:	f7fb fb9d 	bl	8001b54 <__aeabi_dsub>
 800641a:	0002      	movs	r2, r0
 800641c:	000b      	movs	r3, r1
 800641e:	9806      	ldr	r0, [sp, #24]
 8006420:	9907      	ldr	r1, [sp, #28]
 8006422:	f7fb fb97 	bl	8001b54 <__aeabi_dsub>
 8006426:	4a67      	ldr	r2, [pc, #412]	; (80065c4 <__ieee754_pow+0x9a0>)
 8006428:	4b67      	ldr	r3, [pc, #412]	; (80065c8 <__ieee754_pow+0x9a4>)
 800642a:	f7fb f921 	bl	8001670 <__aeabi_dmul>
 800642e:	4a67      	ldr	r2, [pc, #412]	; (80065cc <__ieee754_pow+0x9a8>)
 8006430:	0004      	movs	r4, r0
 8006432:	000d      	movs	r5, r1
 8006434:	4b66      	ldr	r3, [pc, #408]	; (80065d0 <__ieee754_pow+0x9ac>)
 8006436:	0030      	movs	r0, r6
 8006438:	0039      	movs	r1, r7
 800643a:	f7fb f919 	bl	8001670 <__aeabi_dmul>
 800643e:	0002      	movs	r2, r0
 8006440:	000b      	movs	r3, r1
 8006442:	0020      	movs	r0, r4
 8006444:	0029      	movs	r1, r5
 8006446:	f7fa f9ed 	bl	8000824 <__aeabi_dadd>
 800644a:	0004      	movs	r4, r0
 800644c:	000d      	movs	r5, r1
 800644e:	0002      	movs	r2, r0
 8006450:	000b      	movs	r3, r1
 8006452:	9808      	ldr	r0, [sp, #32]
 8006454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006456:	f7fa f9e5 	bl	8000824 <__aeabi_dadd>
 800645a:	9a08      	ldr	r2, [sp, #32]
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	0006      	movs	r6, r0
 8006460:	000f      	movs	r7, r1
 8006462:	f7fb fb77 	bl	8001b54 <__aeabi_dsub>
 8006466:	0002      	movs	r2, r0
 8006468:	000b      	movs	r3, r1
 800646a:	0020      	movs	r0, r4
 800646c:	0029      	movs	r1, r5
 800646e:	f7fb fb71 	bl	8001b54 <__aeabi_dsub>
 8006472:	0032      	movs	r2, r6
 8006474:	9004      	str	r0, [sp, #16]
 8006476:	9105      	str	r1, [sp, #20]
 8006478:	003b      	movs	r3, r7
 800647a:	0030      	movs	r0, r6
 800647c:	0039      	movs	r1, r7
 800647e:	f7fb f8f7 	bl	8001670 <__aeabi_dmul>
 8006482:	0004      	movs	r4, r0
 8006484:	000d      	movs	r5, r1
 8006486:	4a53      	ldr	r2, [pc, #332]	; (80065d4 <__ieee754_pow+0x9b0>)
 8006488:	4b53      	ldr	r3, [pc, #332]	; (80065d8 <__ieee754_pow+0x9b4>)
 800648a:	f7fb f8f1 	bl	8001670 <__aeabi_dmul>
 800648e:	4a53      	ldr	r2, [pc, #332]	; (80065dc <__ieee754_pow+0x9b8>)
 8006490:	4b53      	ldr	r3, [pc, #332]	; (80065e0 <__ieee754_pow+0x9bc>)
 8006492:	f7fb fb5f 	bl	8001b54 <__aeabi_dsub>
 8006496:	0022      	movs	r2, r4
 8006498:	002b      	movs	r3, r5
 800649a:	f7fb f8e9 	bl	8001670 <__aeabi_dmul>
 800649e:	4a51      	ldr	r2, [pc, #324]	; (80065e4 <__ieee754_pow+0x9c0>)
 80064a0:	4b51      	ldr	r3, [pc, #324]	; (80065e8 <__ieee754_pow+0x9c4>)
 80064a2:	f7fa f9bf 	bl	8000824 <__aeabi_dadd>
 80064a6:	0022      	movs	r2, r4
 80064a8:	002b      	movs	r3, r5
 80064aa:	f7fb f8e1 	bl	8001670 <__aeabi_dmul>
 80064ae:	4a4f      	ldr	r2, [pc, #316]	; (80065ec <__ieee754_pow+0x9c8>)
 80064b0:	4b4f      	ldr	r3, [pc, #316]	; (80065f0 <__ieee754_pow+0x9cc>)
 80064b2:	f7fb fb4f 	bl	8001b54 <__aeabi_dsub>
 80064b6:	0022      	movs	r2, r4
 80064b8:	002b      	movs	r3, r5
 80064ba:	f7fb f8d9 	bl	8001670 <__aeabi_dmul>
 80064be:	4a4d      	ldr	r2, [pc, #308]	; (80065f4 <__ieee754_pow+0x9d0>)
 80064c0:	4b4d      	ldr	r3, [pc, #308]	; (80065f8 <__ieee754_pow+0x9d4>)
 80064c2:	f7fa f9af 	bl	8000824 <__aeabi_dadd>
 80064c6:	0022      	movs	r2, r4
 80064c8:	002b      	movs	r3, r5
 80064ca:	f7fb f8d1 	bl	8001670 <__aeabi_dmul>
 80064ce:	0002      	movs	r2, r0
 80064d0:	000b      	movs	r3, r1
 80064d2:	0030      	movs	r0, r6
 80064d4:	0039      	movs	r1, r7
 80064d6:	f7fb fb3d 	bl	8001b54 <__aeabi_dsub>
 80064da:	0004      	movs	r4, r0
 80064dc:	000d      	movs	r5, r1
 80064de:	0002      	movs	r2, r0
 80064e0:	000b      	movs	r3, r1
 80064e2:	0030      	movs	r0, r6
 80064e4:	0039      	movs	r1, r7
 80064e6:	f7fb f8c3 	bl	8001670 <__aeabi_dmul>
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	9006      	str	r0, [sp, #24]
 80064ee:	9107      	str	r1, [sp, #28]
 80064f0:	2200      	movs	r2, #0
 80064f2:	05db      	lsls	r3, r3, #23
 80064f4:	0020      	movs	r0, r4
 80064f6:	0029      	movs	r1, r5
 80064f8:	f7fb fb2c 	bl	8001b54 <__aeabi_dsub>
 80064fc:	0002      	movs	r2, r0
 80064fe:	000b      	movs	r3, r1
 8006500:	9806      	ldr	r0, [sp, #24]
 8006502:	9907      	ldr	r1, [sp, #28]
 8006504:	f7fa fcaa 	bl	8000e5c <__aeabi_ddiv>
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	9b05      	ldr	r3, [sp, #20]
 800650c:	0004      	movs	r4, r0
 800650e:	000d      	movs	r5, r1
 8006510:	0030      	movs	r0, r6
 8006512:	0039      	movs	r1, r7
 8006514:	f7fb f8ac 	bl	8001670 <__aeabi_dmul>
 8006518:	9a04      	ldr	r2, [sp, #16]
 800651a:	9b05      	ldr	r3, [sp, #20]
 800651c:	f7fa f982 	bl	8000824 <__aeabi_dadd>
 8006520:	0002      	movs	r2, r0
 8006522:	000b      	movs	r3, r1
 8006524:	0020      	movs	r0, r4
 8006526:	0029      	movs	r1, r5
 8006528:	f7fb fb14 	bl	8001b54 <__aeabi_dsub>
 800652c:	0032      	movs	r2, r6
 800652e:	003b      	movs	r3, r7
 8006530:	f7fb fb10 	bl	8001b54 <__aeabi_dsub>
 8006534:	0002      	movs	r2, r0
 8006536:	000b      	movs	r3, r1
 8006538:	2000      	movs	r0, #0
 800653a:	4930      	ldr	r1, [pc, #192]	; (80065fc <__ieee754_pow+0x9d8>)
 800653c:	f7fb fb0a 	bl	8001b54 <__aeabi_dsub>
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	051b      	lsls	r3, r3, #20
 8006544:	185b      	adds	r3, r3, r1
 8006546:	151a      	asrs	r2, r3, #20
 8006548:	2a00      	cmp	r2, #0
 800654a:	dc26      	bgt.n	800659a <__ieee754_pow+0x976>
 800654c:	9a02      	ldr	r2, [sp, #8]
 800654e:	f000 f9ad 	bl	80068ac <scalbn>
 8006552:	9a00      	ldr	r2, [sp, #0]
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	f7ff fc04 	bl	8005d62 <__ieee754_pow+0x13e>
 800655a:	4a29      	ldr	r2, [pc, #164]	; (8006600 <__ieee754_pow+0x9dc>)
 800655c:	004b      	lsls	r3, r1, #1
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	4293      	cmp	r3, r2
 8006562:	dc00      	bgt.n	8006566 <__ieee754_pow+0x942>
 8006564:	e717      	b.n	8006396 <__ieee754_pow+0x772>
 8006566:	4b27      	ldr	r3, [pc, #156]	; (8006604 <__ieee754_pow+0x9e0>)
 8006568:	18cb      	adds	r3, r1, r3
 800656a:	4303      	orrs	r3, r0
 800656c:	d009      	beq.n	8006582 <__ieee754_pow+0x95e>
 800656e:	9800      	ldr	r0, [sp, #0]
 8006570:	9901      	ldr	r1, [sp, #4]
 8006572:	4a25      	ldr	r2, [pc, #148]	; (8006608 <__ieee754_pow+0x9e4>)
 8006574:	4b25      	ldr	r3, [pc, #148]	; (800660c <__ieee754_pow+0x9e8>)
 8006576:	f7fb f87b 	bl	8001670 <__aeabi_dmul>
 800657a:	4a23      	ldr	r2, [pc, #140]	; (8006608 <__ieee754_pow+0x9e4>)
 800657c:	4b23      	ldr	r3, [pc, #140]	; (800660c <__ieee754_pow+0x9e8>)
 800657e:	f7ff fbf0 	bl	8005d62 <__ieee754_pow+0x13e>
 8006582:	0032      	movs	r2, r6
 8006584:	003b      	movs	r3, r7
 8006586:	f7fb fae5 	bl	8001b54 <__aeabi_dsub>
 800658a:	9a06      	ldr	r2, [sp, #24]
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	f7f9 fe7b 	bl	8000288 <__aeabi_dcmpge>
 8006592:	2800      	cmp	r0, #0
 8006594:	d100      	bne.n	8006598 <__ieee754_pow+0x974>
 8006596:	e6fe      	b.n	8006396 <__ieee754_pow+0x772>
 8006598:	e7e9      	b.n	800656e <__ieee754_pow+0x94a>
 800659a:	0019      	movs	r1, r3
 800659c:	e7d9      	b.n	8006552 <__ieee754_pow+0x92e>
 800659e:	2300      	movs	r3, #0
 80065a0:	4c16      	ldr	r4, [pc, #88]	; (80065fc <__ieee754_pow+0x9d8>)
 80065a2:	f7ff fba1 	bl	8005ce8 <__ieee754_pow+0xc4>
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	652b82fe 	.word	0x652b82fe
 80065ac:	3c971547 	.word	0x3c971547
 80065b0:	3fe00000 	.word	0x3fe00000
 80065b4:	fffffc02 	.word	0xfffffc02
 80065b8:	fffffc01 	.word	0xfffffc01
 80065bc:	000fffff 	.word	0x000fffff
 80065c0:	3fe62e43 	.word	0x3fe62e43
 80065c4:	fefa39ef 	.word	0xfefa39ef
 80065c8:	3fe62e42 	.word	0x3fe62e42
 80065cc:	0ca86c39 	.word	0x0ca86c39
 80065d0:	be205c61 	.word	0xbe205c61
 80065d4:	72bea4d0 	.word	0x72bea4d0
 80065d8:	3e663769 	.word	0x3e663769
 80065dc:	c5d26bf1 	.word	0xc5d26bf1
 80065e0:	3ebbbd41 	.word	0x3ebbbd41
 80065e4:	af25de2c 	.word	0xaf25de2c
 80065e8:	3f11566a 	.word	0x3f11566a
 80065ec:	16bebd93 	.word	0x16bebd93
 80065f0:	3f66c16c 	.word	0x3f66c16c
 80065f4:	5555553e 	.word	0x5555553e
 80065f8:	3fc55555 	.word	0x3fc55555
 80065fc:	3ff00000 	.word	0x3ff00000
 8006600:	4090cbff 	.word	0x4090cbff
 8006604:	3f6f3400 	.word	0x3f6f3400
 8006608:	c2f8f359 	.word	0xc2f8f359
 800660c:	01a56e1f 	.word	0x01a56e1f

08006610 <__ieee754_sqrt>:
 8006610:	4b55      	ldr	r3, [pc, #340]	; (8006768 <__ieee754_sqrt+0x158>)
 8006612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006614:	001a      	movs	r2, r3
 8006616:	0005      	movs	r5, r0
 8006618:	000c      	movs	r4, r1
 800661a:	400a      	ands	r2, r1
 800661c:	429a      	cmp	r2, r3
 800661e:	d10f      	bne.n	8006640 <__ieee754_sqrt+0x30>
 8006620:	0002      	movs	r2, r0
 8006622:	000b      	movs	r3, r1
 8006624:	f7fb f824 	bl	8001670 <__aeabi_dmul>
 8006628:	0002      	movs	r2, r0
 800662a:	000b      	movs	r3, r1
 800662c:	0028      	movs	r0, r5
 800662e:	0021      	movs	r1, r4
 8006630:	f7fa f8f8 	bl	8000824 <__aeabi_dadd>
 8006634:	0005      	movs	r5, r0
 8006636:	000c      	movs	r4, r1
 8006638:	0028      	movs	r0, r5
 800663a:	0021      	movs	r1, r4
 800663c:	b003      	add	sp, #12
 800663e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006640:	0002      	movs	r2, r0
 8006642:	2900      	cmp	r1, #0
 8006644:	dc10      	bgt.n	8006668 <__ieee754_sqrt+0x58>
 8006646:	004b      	lsls	r3, r1, #1
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	4303      	orrs	r3, r0
 800664c:	d0f4      	beq.n	8006638 <__ieee754_sqrt+0x28>
 800664e:	2000      	movs	r0, #0
 8006650:	4281      	cmp	r1, r0
 8006652:	d100      	bne.n	8006656 <__ieee754_sqrt+0x46>
 8006654:	e07f      	b.n	8006756 <__ieee754_sqrt+0x146>
 8006656:	000b      	movs	r3, r1
 8006658:	0028      	movs	r0, r5
 800665a:	f7fb fa7b 	bl	8001b54 <__aeabi_dsub>
 800665e:	0002      	movs	r2, r0
 8006660:	000b      	movs	r3, r1
 8006662:	f7fa fbfb 	bl	8000e5c <__aeabi_ddiv>
 8006666:	e7e5      	b.n	8006634 <__ieee754_sqrt+0x24>
 8006668:	1508      	asrs	r0, r1, #20
 800666a:	d074      	beq.n	8006756 <__ieee754_sqrt+0x146>
 800666c:	4b3f      	ldr	r3, [pc, #252]	; (800676c <__ieee754_sqrt+0x15c>)
 800666e:	0309      	lsls	r1, r1, #12
 8006670:	18c0      	adds	r0, r0, r3
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	0b09      	lsrs	r1, r1, #12
 8006676:	035b      	lsls	r3, r3, #13
 8006678:	4319      	orrs	r1, r3
 800667a:	07c3      	lsls	r3, r0, #31
 800667c:	d503      	bpl.n	8006686 <__ieee754_sqrt+0x76>
 800667e:	0fd3      	lsrs	r3, r2, #31
 8006680:	0049      	lsls	r1, r1, #1
 8006682:	18c9      	adds	r1, r1, r3
 8006684:	0052      	lsls	r2, r2, #1
 8006686:	2400      	movs	r4, #0
 8006688:	1043      	asrs	r3, r0, #1
 800668a:	0049      	lsls	r1, r1, #1
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	2580      	movs	r5, #128	; 0x80
 8006690:	0fd3      	lsrs	r3, r2, #31
 8006692:	18cb      	adds	r3, r1, r3
 8006694:	0020      	movs	r0, r4
 8006696:	2116      	movs	r1, #22
 8006698:	0052      	lsls	r2, r2, #1
 800669a:	03ad      	lsls	r5, r5, #14
 800669c:	1946      	adds	r6, r0, r5
 800669e:	429e      	cmp	r6, r3
 80066a0:	dc02      	bgt.n	80066a8 <__ieee754_sqrt+0x98>
 80066a2:	1970      	adds	r0, r6, r5
 80066a4:	1b9b      	subs	r3, r3, r6
 80066a6:	1964      	adds	r4, r4, r5
 80066a8:	0fd6      	lsrs	r6, r2, #31
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	3901      	subs	r1, #1
 80066ae:	199b      	adds	r3, r3, r6
 80066b0:	0052      	lsls	r2, r2, #1
 80066b2:	086d      	lsrs	r5, r5, #1
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d1f1      	bne.n	800669c <__ieee754_sqrt+0x8c>
 80066b8:	2520      	movs	r5, #32
 80066ba:	2680      	movs	r6, #128	; 0x80
 80066bc:	46ac      	mov	ip, r5
 80066be:	9100      	str	r1, [sp, #0]
 80066c0:	0636      	lsls	r6, r6, #24
 80066c2:	9d00      	ldr	r5, [sp, #0]
 80066c4:	1977      	adds	r7, r6, r5
 80066c6:	4283      	cmp	r3, r0
 80066c8:	dc02      	bgt.n	80066d0 <__ieee754_sqrt+0xc0>
 80066ca:	d112      	bne.n	80066f2 <__ieee754_sqrt+0xe2>
 80066cc:	4297      	cmp	r7, r2
 80066ce:	d810      	bhi.n	80066f2 <__ieee754_sqrt+0xe2>
 80066d0:	19bd      	adds	r5, r7, r6
 80066d2:	9500      	str	r5, [sp, #0]
 80066d4:	0005      	movs	r5, r0
 80066d6:	2f00      	cmp	r7, #0
 80066d8:	da03      	bge.n	80066e2 <__ieee754_sqrt+0xd2>
 80066da:	9d00      	ldr	r5, [sp, #0]
 80066dc:	43ed      	mvns	r5, r5
 80066de:	0fed      	lsrs	r5, r5, #31
 80066e0:	1945      	adds	r5, r0, r5
 80066e2:	1a1b      	subs	r3, r3, r0
 80066e4:	42ba      	cmp	r2, r7
 80066e6:	4180      	sbcs	r0, r0
 80066e8:	4240      	negs	r0, r0
 80066ea:	1a1b      	subs	r3, r3, r0
 80066ec:	0028      	movs	r0, r5
 80066ee:	1bd2      	subs	r2, r2, r7
 80066f0:	1989      	adds	r1, r1, r6
 80066f2:	0fd5      	lsrs	r5, r2, #31
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	18eb      	adds	r3, r5, r3
 80066f8:	2501      	movs	r5, #1
 80066fa:	426d      	negs	r5, r5
 80066fc:	44ac      	add	ip, r5
 80066fe:	4665      	mov	r5, ip
 8006700:	0052      	lsls	r2, r2, #1
 8006702:	0876      	lsrs	r6, r6, #1
 8006704:	2d00      	cmp	r5, #0
 8006706:	d1dc      	bne.n	80066c2 <__ieee754_sqrt+0xb2>
 8006708:	4313      	orrs	r3, r2
 800670a:	d003      	beq.n	8006714 <__ieee754_sqrt+0x104>
 800670c:	1c4b      	adds	r3, r1, #1
 800670e:	d127      	bne.n	8006760 <__ieee754_sqrt+0x150>
 8006710:	4661      	mov	r1, ip
 8006712:	3401      	adds	r4, #1
 8006714:	4b16      	ldr	r3, [pc, #88]	; (8006770 <__ieee754_sqrt+0x160>)
 8006716:	1060      	asrs	r0, r4, #1
 8006718:	18c0      	adds	r0, r0, r3
 800671a:	0849      	lsrs	r1, r1, #1
 800671c:	07e3      	lsls	r3, r4, #31
 800671e:	d502      	bpl.n	8006726 <__ieee754_sqrt+0x116>
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	4319      	orrs	r1, r3
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	000d      	movs	r5, r1
 800672a:	051c      	lsls	r4, r3, #20
 800672c:	1823      	adds	r3, r4, r0
 800672e:	001c      	movs	r4, r3
 8006730:	e782      	b.n	8006638 <__ieee754_sqrt+0x28>
 8006732:	0ad1      	lsrs	r1, r2, #11
 8006734:	3b15      	subs	r3, #21
 8006736:	0552      	lsls	r2, r2, #21
 8006738:	2900      	cmp	r1, #0
 800673a:	d0fa      	beq.n	8006732 <__ieee754_sqrt+0x122>
 800673c:	2480      	movs	r4, #128	; 0x80
 800673e:	0364      	lsls	r4, r4, #13
 8006740:	4221      	tst	r1, r4
 8006742:	d00a      	beq.n	800675a <__ieee754_sqrt+0x14a>
 8006744:	2420      	movs	r4, #32
 8006746:	0016      	movs	r6, r2
 8006748:	1a24      	subs	r4, r4, r0
 800674a:	40e6      	lsrs	r6, r4
 800674c:	1e45      	subs	r5, r0, #1
 800674e:	4082      	lsls	r2, r0
 8006750:	4331      	orrs	r1, r6
 8006752:	1b58      	subs	r0, r3, r5
 8006754:	e78a      	b.n	800666c <__ieee754_sqrt+0x5c>
 8006756:	2300      	movs	r3, #0
 8006758:	e7ee      	b.n	8006738 <__ieee754_sqrt+0x128>
 800675a:	0049      	lsls	r1, r1, #1
 800675c:	3001      	adds	r0, #1
 800675e:	e7ef      	b.n	8006740 <__ieee754_sqrt+0x130>
 8006760:	2301      	movs	r3, #1
 8006762:	3101      	adds	r1, #1
 8006764:	4399      	bics	r1, r3
 8006766:	e7d5      	b.n	8006714 <__ieee754_sqrt+0x104>
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	fffffc01 	.word	0xfffffc01
 8006770:	3fe00000 	.word	0x3fe00000

08006774 <fabs>:
 8006774:	0049      	lsls	r1, r1, #1
 8006776:	084b      	lsrs	r3, r1, #1
 8006778:	0019      	movs	r1, r3
 800677a:	4770      	bx	lr

0800677c <finite>:
 800677c:	0048      	lsls	r0, r1, #1
 800677e:	4b02      	ldr	r3, [pc, #8]	; (8006788 <finite+0xc>)
 8006780:	0840      	lsrs	r0, r0, #1
 8006782:	18c0      	adds	r0, r0, r3
 8006784:	0fc0      	lsrs	r0, r0, #31
 8006786:	4770      	bx	lr
 8006788:	80100000 	.word	0x80100000

0800678c <matherr>:
 800678c:	2000      	movs	r0, #0
 800678e:	4770      	bx	lr

08006790 <nan>:
 8006790:	2000      	movs	r0, #0
 8006792:	4901      	ldr	r1, [pc, #4]	; (8006798 <nan+0x8>)
 8006794:	4770      	bx	lr
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	7ff80000 	.word	0x7ff80000

0800679c <rint>:
 800679c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800679e:	004a      	lsls	r2, r1, #1
 80067a0:	4e3e      	ldr	r6, [pc, #248]	; (800689c <rint+0x100>)
 80067a2:	0d52      	lsrs	r2, r2, #21
 80067a4:	b085      	sub	sp, #20
 80067a6:	1996      	adds	r6, r2, r6
 80067a8:	000d      	movs	r5, r1
 80067aa:	9101      	str	r1, [sp, #4]
 80067ac:	0003      	movs	r3, r0
 80067ae:	0fcc      	lsrs	r4, r1, #31
 80067b0:	2e13      	cmp	r6, #19
 80067b2:	dc57      	bgt.n	8006864 <rint+0xc8>
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	da2a      	bge.n	800680e <rint+0x72>
 80067b8:	004a      	lsls	r2, r1, #1
 80067ba:	0852      	lsrs	r2, r2, #1
 80067bc:	4302      	orrs	r2, r0
 80067be:	d024      	beq.n	800680a <rint+0x6e>
 80067c0:	030a      	lsls	r2, r1, #12
 80067c2:	0b12      	lsrs	r2, r2, #12
 80067c4:	4302      	orrs	r2, r0
 80067c6:	4253      	negs	r3, r2
 80067c8:	4313      	orrs	r3, r2
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	0c4d      	lsrs	r5, r1, #17
 80067ce:	0312      	lsls	r2, r2, #12
 80067d0:	0b1b      	lsrs	r3, r3, #12
 80067d2:	4013      	ands	r3, r2
 80067d4:	046d      	lsls	r5, r5, #17
 80067d6:	432b      	orrs	r3, r5
 80067d8:	0019      	movs	r1, r3
 80067da:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <rint+0x104>)
 80067dc:	00e2      	lsls	r2, r4, #3
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	681e      	ldr	r6, [r3, #0]
 80067e2:	685f      	ldr	r7, [r3, #4]
 80067e4:	0002      	movs	r2, r0
 80067e6:	000b      	movs	r3, r1
 80067e8:	0030      	movs	r0, r6
 80067ea:	0039      	movs	r1, r7
 80067ec:	f7fa f81a 	bl	8000824 <__aeabi_dadd>
 80067f0:	9002      	str	r0, [sp, #8]
 80067f2:	9103      	str	r1, [sp, #12]
 80067f4:	9802      	ldr	r0, [sp, #8]
 80067f6:	9903      	ldr	r1, [sp, #12]
 80067f8:	003b      	movs	r3, r7
 80067fa:	0032      	movs	r2, r6
 80067fc:	f7fb f9aa 	bl	8001b54 <__aeabi_dsub>
 8006800:	004b      	lsls	r3, r1, #1
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	07e4      	lsls	r4, r4, #31
 8006806:	4323      	orrs	r3, r4
 8006808:	0019      	movs	r1, r3
 800680a:	b005      	add	sp, #20
 800680c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800680e:	4a25      	ldr	r2, [pc, #148]	; (80068a4 <rint+0x108>)
 8006810:	4132      	asrs	r2, r6
 8006812:	0017      	movs	r7, r2
 8006814:	400f      	ands	r7, r1
 8006816:	4307      	orrs	r7, r0
 8006818:	d0f7      	beq.n	800680a <rint+0x6e>
 800681a:	0852      	lsrs	r2, r2, #1
 800681c:	0011      	movs	r1, r2
 800681e:	4029      	ands	r1, r5
 8006820:	430b      	orrs	r3, r1
 8006822:	d00a      	beq.n	800683a <rint+0x9e>
 8006824:	2300      	movs	r3, #0
 8006826:	2e13      	cmp	r6, #19
 8006828:	d101      	bne.n	800682e <rint+0x92>
 800682a:	2380      	movs	r3, #128	; 0x80
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	2780      	movs	r7, #128	; 0x80
 8006830:	02ff      	lsls	r7, r7, #11
 8006832:	4137      	asrs	r7, r6
 8006834:	4395      	bics	r5, r2
 8006836:	432f      	orrs	r7, r5
 8006838:	9701      	str	r7, [sp, #4]
 800683a:	9901      	ldr	r1, [sp, #4]
 800683c:	001a      	movs	r2, r3
 800683e:	000b      	movs	r3, r1
 8006840:	4917      	ldr	r1, [pc, #92]	; (80068a0 <rint+0x104>)
 8006842:	00e4      	lsls	r4, r4, #3
 8006844:	190c      	adds	r4, r1, r4
 8006846:	6865      	ldr	r5, [r4, #4]
 8006848:	6824      	ldr	r4, [r4, #0]
 800684a:	0020      	movs	r0, r4
 800684c:	0029      	movs	r1, r5
 800684e:	f7f9 ffe9 	bl	8000824 <__aeabi_dadd>
 8006852:	9002      	str	r0, [sp, #8]
 8006854:	9103      	str	r1, [sp, #12]
 8006856:	9802      	ldr	r0, [sp, #8]
 8006858:	9903      	ldr	r1, [sp, #12]
 800685a:	0022      	movs	r2, r4
 800685c:	002b      	movs	r3, r5
 800685e:	f7fb f979 	bl	8001b54 <__aeabi_dsub>
 8006862:	e7d2      	b.n	800680a <rint+0x6e>
 8006864:	2e33      	cmp	r6, #51	; 0x33
 8006866:	dd08      	ble.n	800687a <rint+0xde>
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	429e      	cmp	r6, r3
 800686e:	d1cc      	bne.n	800680a <rint+0x6e>
 8006870:	0002      	movs	r2, r0
 8006872:	000b      	movs	r3, r1
 8006874:	f7f9 ffd6 	bl	8000824 <__aeabi_dadd>
 8006878:	e7c7      	b.n	800680a <rint+0x6e>
 800687a:	2601      	movs	r6, #1
 800687c:	4d0a      	ldr	r5, [pc, #40]	; (80068a8 <rint+0x10c>)
 800687e:	4276      	negs	r6, r6
 8006880:	1952      	adds	r2, r2, r5
 8006882:	40d6      	lsrs	r6, r2
 8006884:	4206      	tst	r6, r0
 8006886:	d0c0      	beq.n	800680a <rint+0x6e>
 8006888:	0876      	lsrs	r6, r6, #1
 800688a:	4206      	tst	r6, r0
 800688c:	d0d5      	beq.n	800683a <rint+0x9e>
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	05c9      	lsls	r1, r1, #23
 8006892:	4111      	asrs	r1, r2
 8006894:	43b3      	bics	r3, r6
 8006896:	430b      	orrs	r3, r1
 8006898:	e7cf      	b.n	800683a <rint+0x9e>
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	fffffc01 	.word	0xfffffc01
 80068a0:	08006a70 	.word	0x08006a70
 80068a4:	000fffff 	.word	0x000fffff
 80068a8:	fffffbed 	.word	0xfffffbed

080068ac <scalbn>:
 80068ac:	004b      	lsls	r3, r1, #1
 80068ae:	b570      	push	{r4, r5, r6, lr}
 80068b0:	0d5b      	lsrs	r3, r3, #21
 80068b2:	0014      	movs	r4, r2
 80068b4:	000a      	movs	r2, r1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10d      	bne.n	80068d6 <scalbn+0x2a>
 80068ba:	004b      	lsls	r3, r1, #1
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	4303      	orrs	r3, r0
 80068c0:	d010      	beq.n	80068e4 <scalbn+0x38>
 80068c2:	4b21      	ldr	r3, [pc, #132]	; (8006948 <scalbn+0x9c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	f7fa fed3 	bl	8001670 <__aeabi_dmul>
 80068ca:	4b20      	ldr	r3, [pc, #128]	; (800694c <scalbn+0xa0>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	da0a      	bge.n	80068e6 <scalbn+0x3a>
 80068d0:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <scalbn+0xa4>)
 80068d2:	4b20      	ldr	r3, [pc, #128]	; (8006954 <scalbn+0xa8>)
 80068d4:	e017      	b.n	8006906 <scalbn+0x5a>
 80068d6:	4d20      	ldr	r5, [pc, #128]	; (8006958 <scalbn+0xac>)
 80068d8:	42ab      	cmp	r3, r5
 80068da:	d108      	bne.n	80068ee <scalbn+0x42>
 80068dc:	0002      	movs	r2, r0
 80068de:	000b      	movs	r3, r1
 80068e0:	f7f9 ffa0 	bl	8000824 <__aeabi_dadd>
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	000a      	movs	r2, r1
 80068e8:	004b      	lsls	r3, r1, #1
 80068ea:	0d5b      	lsrs	r3, r3, #21
 80068ec:	3b36      	subs	r3, #54	; 0x36
 80068ee:	4d1b      	ldr	r5, [pc, #108]	; (800695c <scalbn+0xb0>)
 80068f0:	18e3      	adds	r3, r4, r3
 80068f2:	42ab      	cmp	r3, r5
 80068f4:	dd0a      	ble.n	800690c <scalbn+0x60>
 80068f6:	0002      	movs	r2, r0
 80068f8:	000b      	movs	r3, r1
 80068fa:	4819      	ldr	r0, [pc, #100]	; (8006960 <scalbn+0xb4>)
 80068fc:	4919      	ldr	r1, [pc, #100]	; (8006964 <scalbn+0xb8>)
 80068fe:	f000 f839 	bl	8006974 <copysign>
 8006902:	4a17      	ldr	r2, [pc, #92]	; (8006960 <scalbn+0xb4>)
 8006904:	4b17      	ldr	r3, [pc, #92]	; (8006964 <scalbn+0xb8>)
 8006906:	f7fa feb3 	bl	8001670 <__aeabi_dmul>
 800690a:	e7eb      	b.n	80068e4 <scalbn+0x38>
 800690c:	2b00      	cmp	r3, #0
 800690e:	dd05      	ble.n	800691c <scalbn+0x70>
 8006910:	4c15      	ldr	r4, [pc, #84]	; (8006968 <scalbn+0xbc>)
 8006912:	051b      	lsls	r3, r3, #20
 8006914:	4022      	ands	r2, r4
 8006916:	431a      	orrs	r2, r3
 8006918:	0011      	movs	r1, r2
 800691a:	e7e3      	b.n	80068e4 <scalbn+0x38>
 800691c:	001d      	movs	r5, r3
 800691e:	3535      	adds	r5, #53	; 0x35
 8006920:	da09      	bge.n	8006936 <scalbn+0x8a>
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <scalbn+0xc0>)
 8006924:	0002      	movs	r2, r0
 8006926:	429c      	cmp	r4, r3
 8006928:	dce6      	bgt.n	80068f8 <scalbn+0x4c>
 800692a:	000b      	movs	r3, r1
 800692c:	4808      	ldr	r0, [pc, #32]	; (8006950 <scalbn+0xa4>)
 800692e:	4909      	ldr	r1, [pc, #36]	; (8006954 <scalbn+0xa8>)
 8006930:	f000 f820 	bl	8006974 <copysign>
 8006934:	e7cc      	b.n	80068d0 <scalbn+0x24>
 8006936:	4c0c      	ldr	r4, [pc, #48]	; (8006968 <scalbn+0xbc>)
 8006938:	3336      	adds	r3, #54	; 0x36
 800693a:	4022      	ands	r2, r4
 800693c:	051b      	lsls	r3, r3, #20
 800693e:	4313      	orrs	r3, r2
 8006940:	0019      	movs	r1, r3
 8006942:	2200      	movs	r2, #0
 8006944:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <scalbn+0xc4>)
 8006946:	e7de      	b.n	8006906 <scalbn+0x5a>
 8006948:	43500000 	.word	0x43500000
 800694c:	ffff3cb0 	.word	0xffff3cb0
 8006950:	c2f8f359 	.word	0xc2f8f359
 8006954:	01a56e1f 	.word	0x01a56e1f
 8006958:	000007ff 	.word	0x000007ff
 800695c:	000007fe 	.word	0x000007fe
 8006960:	8800759c 	.word	0x8800759c
 8006964:	7e37e43c 	.word	0x7e37e43c
 8006968:	800fffff 	.word	0x800fffff
 800696c:	0000c350 	.word	0x0000c350
 8006970:	3c900000 	.word	0x3c900000

08006974 <copysign>:
 8006974:	b530      	push	{r4, r5, lr}
 8006976:	004a      	lsls	r2, r1, #1
 8006978:	0fdb      	lsrs	r3, r3, #31
 800697a:	07db      	lsls	r3, r3, #31
 800697c:	0852      	lsrs	r2, r2, #1
 800697e:	431a      	orrs	r2, r3
 8006980:	0011      	movs	r1, r2
 8006982:	bd30      	pop	{r4, r5, pc}

08006984 <_init>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr

08006990 <_fini>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006996:	bc08      	pop	{r3}
 8006998:	469e      	mov	lr, r3
 800699a:	4770      	bx	lr
